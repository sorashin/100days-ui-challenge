require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"form/GA":[function(require,module,exports){
var s;

s = document.createElement('script');

s.setAttribute('src', 'https://www.googletagmanager.com/gtag/js?id=UA-75056533-3');

s.setAttribute('async', '');

document.head.appendChild(s);

window.dataLayer = window.dataLayer || [];

window.gtag = function() {
  return dataLayer.push(arguments);
};

window.gtag('js', new Date());

window.gtag('config', 'UA-75056533-3');

if (window.location.href.includes('framer.cloud')) {
  window.gtag('event', 'Cloud', {
    'event_category': 'Visitors'
  });
} else {
  window.gtag('event', 'Non-Cloud', {
    'event_category': 'Visitors'
  });
}


},{}],"form/Light":[function(require,module,exports){
var Animation, BaseClass, States, _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = Framer._;

BaseClass = require('./_BaseClass.coffee').BaseClass;

Animation = require('./_Animation.coffee').Animation;

States = require('./_States.coffee').States;

exports.Light = (function(superClass) {
  extend(Light, superClass);

  function Light(properties) {
    Light.__super__.constructor.call(this);
    if (!properties.type) {
      throw Error('Please specify a light type!');
    }
    this.properties = _.defaults(properties, {
      castShadow: true
    });
    this.setupLight();
  }

  Light.prototype.setupLight = function() {
    switch (this.properties.type) {
      case 'point':
        this.light = new THREE.PointLight(new THREE.Color(this.properties.color, this.properties.intensity, this.properties.distance, this.properties.decay));
        break;
      case 'directional':
        this.light = new THREE.DirectionalLight(new THREE.Color(this.properties.color, this.properties.intensity));
        break;
      case 'ambient':
        this.light = new THREE.AmbientLight(new THREE.Color(this.properties.color, this.properties.intensity));
        break;
      case 'hemisphere':
        this.light = new THREE.HemisphereLight(new THREE.Color(this.properties.skyColor, new THREE.Color(this.properties.groundColor, this.properties.intensity)));
        break;
      case 'rectarea':
        this.light = new THREE.RectAreaLight(new THREE.Color(this.properties.color, this.properties.intensity, this.properties.width, this.properties.height));
        break;
      case 'spot':
        this.light = new THREE.SpotLight(new THREE.Color(this.properties.color, this.properties.intensity, this.properties.distance, this.properties.angle, this.properties.penumbra, this.properties.decay));
    }
    this.addToRenderingInstance(this.properties.parent);
    this.applyProperties();
    this.saveInitialProperties();
    return this._states = new States(this);
  };

  Light.prototype.addToRenderingInstance = function(parent) {
    if (parent.scene) {
      return parent.scene.add(this.light);
    } else {
      return parent.add(this.light);
    }
  };

  Light.prototype.applyProperties = function(properties) {
    return Object.keys(this.properties).map((function(_this) {
      return function(k) {
        return _this[k] = _this.properties[k];
      };
    })(this));
  };

  Light.prototype.saveInitialProperties = function() {
    return this.initialProperties = this;
  };

  Light.prototype.on = function(eventName, cb) {
    var callback;
    if (eventName.includes('change')) {
      callback = function(e) {
        return cb(e.value);
      };
      this.light.addEventListener(eventName, callback);
      return Framer.CurrentContext.on('reset', (function(_this) {
        return function() {
          return _this.light.removeEventListener(eventName, callback);
        };
      })(this));
    }
  };

  Light.prototype.animate = function(properties) {
    return new Animation(this, properties);
  };

  Light.prototype.lookAt = function(a, b, c) {
    if (arguments.length === 1) {
      return this.light.lookAt(a);
    } else if (arguments.length === 3) {
      return this.light.lookAt(a, b, c);
    }
  };

  Light.prototype.stateSwitch = function(state) {
    return Object.keys(this.states).map((function(_this) {
      return function(k) {
        if (k === state) {
          _this.states.current = _this.states[k];
          return Object.keys(_this.states.current).map(function(pk) {
            return _this[pk] = _this.states.current[pk];
          });
        }
      };
    })(this));
  };

  Light.prototype.stateCycle = function(stateA, stateB) {
    if (this.states.current === this.states[stateA] || this.states.current === this.states[stateB]) {
      if (this.states.current === this.states[stateA]) {
        return this.animate(stateB);
      } else if (this.states.current === this.states[stateB]) {
        return this.animate(stateA);
      }
    } else {
      return this.animate(stateA);
    }
  };

  Light.define('position', {
    get: function() {
      return this.light.position;
    }
  });

  Light.define('x', {
    get: function() {
      return this.light.position.x;
    },
    set: function(x) {
      this.light.position.x = x;
      return this.light.dispatchEvent({
        type: 'change:x',
        value: this.x
      });
    }
  });

  Light.define('y', {
    get: function() {
      return this.light.position.y;
    },
    set: function(y) {
      this.light.position.y = y;
      return this.light.dispatchEvent({
        type: 'change:y',
        value: this.y
      });
    }
  });

  Light.define('z', {
    get: function() {
      return this.light.position.z;
    },
    set: function(z) {
      this.light.position.z = z;
      return this.light.dispatchEvent({
        type: 'change:z',
        value: this.z
      });
    }
  });

  Light.define('rotation', {
    get: function() {
      return this.light.rotation;
    }
  });

  Light.define('rotationX', {
    get: function() {
      return THREE.Math.radToDeg(this.light.rotation.x);
    },
    set: function(x) {
      this.light.rotation.x = THREE.Math.degToRad(x);
      return this.light.dispatchEvent({
        type: 'change:rotationX',
        value: this.rotationX
      });
    }
  });

  Light.define('rotationY', {
    get: function() {
      return THREE.Math.radToDeg(this.light.rotation.y);
    },
    set: function(y) {
      this.light.rotation.y = THREE.Math.degToRad(y);
      return this.light.dispatchEvent({
        type: 'change:rotationY',
        value: this.rotationY
      });
    }
  });

  Light.define('rotationZ', {
    get: function() {
      return THREE.Math.radToDeg(this.light.rotation.z);
    },
    set: function(z) {
      this.light.rotation.z = THREE.Math.degToRad(z);
      return this.light.dispatchEvent({
        type: 'change:rotationZ',
        value: this.rotationZ
      });
    }
  });

  Light.define('visible', {
    get: function() {
      return this.light.visible;
    },
    set: function(bool) {
      this.light.visible = bool;
      return this.light.dispatchEvent({
        type: 'change:visible',
        value: this.visible
      });
    }
  });

  Light.define('states', {
    get: function() {
      return this._states.states;
    },
    set: function(states) {
      return _.extend(this.states, states);
    }
  });

  Light.define('color', {
    get: function() {
      return this.light.color;
    },
    set: function(color) {
      this.light.color = new THREE.Color(color);
      return this.light.dispatchEvent({
        type: 'change:color',
        value: this.color
      });
    }
  });

  Light.define('intensity', {
    get: function() {
      return this.light.intensity;
    },
    set: function(intensity) {
      this.light.intensity = intensity;
      return this.light.dispatchEvent({
        type: 'change:intensity',
        value: this.intensity
      });
    }
  });

  Light.define('angle', {
    get: function() {
      return this.light.angle;
    },
    set: function(angle) {
      this.light.angle = angle;
      return this.light.dispatchEvent({
        type: 'change:angle',
        value: this.angle
      });
    }
  });

  Light.define('castShadow', {
    get: function() {
      return this.light.castShadow;
    },
    set: function(bool) {
      this.light.castShadow = bool;
      return this.light.dispatchEvent({
        type: 'change:castShadow',
        value: this.castShadow
      });
    }
  });

  Light.define('decay', {
    get: function() {
      return this.light.decay;
    },
    set: function(decay) {
      this.light.decay = decay;
      return this.light.dispatchEvent({
        type: 'change:decay',
        value: this.decay
      });
    }
  });

  Light.define('distance', {
    get: function() {
      return this.light.distance;
    },
    set: function(distance) {
      this.light.distance = distance;
      return this.light.dispatchEvent({
        type: 'change:distance',
        value: this.distance
      });
    }
  });

  Light.define('penumbra', {
    get: function() {
      return this.light.penumbra;
    },
    set: function(penumbra) {
      this.light.penumbra = penumbra;
      return this.light.dispatchEvent({
        type: 'change:penumbra',
        value: this.penumbra
      });
    }
  });

  Light.define('power', {
    get: function() {
      return this.light.power;
    },
    set: function(power) {
      this.light.power = power;
      return this.light.dispatchEvent({
        type: 'change:power',
        value: this.power
      });
    }
  });

  Light.define('shadow', {
    get: function() {
      return this.light.shadow;
    },
    set: function(shadow) {
      return this.light.shadow = shadow;
    }
  });

  Light.define('target', {
    get: function() {
      return this.light.target;
    },
    set: function(target) {
      this.light.target = target;
      return this.light.dispatchEvent({
        type: 'change:target',
        value: this.target
      });
    }
  });

  Light.define('width', {
    get: function() {
      return this.light.width;
    },
    set: function(width) {
      this.light.width = width;
      return this.light.dispatchEvent({
        type: 'change:width',
        value: this.width
      });
    }
  });

  Light.define('height', {
    get: function() {
      return this.light.height;
    },
    set: function(height) {
      this.light.height = height;
      return this.light.dispatchEvent({
        type: 'change:height',
        value: this.height
      });
    }
  });

  Light.define('groundColor', {
    get: function() {
      return this.light.groundColor;
    },
    set: function(groundColor) {
      this.light.groundColor = new THREE.Color(groundColor);
      return this.light.dispatchEvent({
        type: 'change:groundColor',
        value: this.groundColor
      });
    }
  });

  Light.define('skyColor', {
    get: function() {
      return this.light.skyColor;
    },
    set: function(skyColor) {
      this.light.skyColor = new THREE.Color(skyColor);
      return this.light.dispatchEvent({
        type: 'change:skyColor',
        value: this.skyColor
      });
    }
  });

  return Light;

})(BaseClass);


},{"./_Animation.coffee":"form/_Animation","./_BaseClass.coffee":"form/_BaseClass","./_States.coffee":"form/_States"}],"form/Mesh":[function(require,module,exports){
var _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = Framer._;

exports.Mesh = (function(superClass) {
  extend(Mesh, superClass);

  Mesh.define = function(propertyName, descriptor) {
    if (descriptor.readonly) {
      descriptor.set = function(value) {
        throw Error(this.constructor.name + "." + propertyName + " is readonly");
      };
    }
    return Object.defineProperty(this.prototype, propertyName, descriptor);
  };

  function Mesh(properties) {
    if (properties == null) {
      properties = {};
    }
    Mesh.__super__.constructor.call(this, properties.geometry, properties.material);
    _.defaults(properties, {
      castShadow: true,
      receiveShadow: true
    });
    this.setupShadowSettings(properties);
    if (properties.parent) {
      this.addToRenderingInstance(properties.parent);
    }
    this.setScale(properties.scale, properties.scaleX, properties.scaleY, properties.scaleZ);
    this.setPosition([properties.x, properties.y, properties.z]);
    this.setRotation([properties.rotationX, properties.rotationY, properties.rotationZ]);
  }

  Mesh.prototype.setupShadowSettings = function(properties) {
    this.castShadow = properties.castShadow;
    return this.receiveShadow = properties.receiveShadow;
  };

  Mesh.prototype.addToRenderingInstance = function(parent) {
    if (parent.scene) {
      return parent.scene.add(this);
    } else {
      return parent.add(this);
    }
  };

  Mesh.prototype.setScale = function(uniformScale, scaleX, scaleY, scaleZ) {
    if (uniformScale) {
      return this.scale = uniformScale || 1;
    } else {
      this.scaleX = scaleX || 1;
      this.scaleY = scaleY || 1;
      return this.scaleZ = scaleZ || 1;
    }
  };

  Mesh.prototype.setPosition = function(position) {
    this.x = position[0] || 0;
    this.y = position[1] || 0;
    return this.z = position[2] || 0;
  };

  Mesh.prototype.setRotation = function(rotation) {
    this.rotationX = rotation[0] || 0;
    this.rotationY = rotation[1] || 0;
    return this.rotationZ = rotation[2] || 0;
  };

  Mesh.define('scale', {
    get: function() {
      return this.scale.x;
    },
    set: function(scale) {
      return this.scale.set(scale, scale, scale);
    }
  });

  Mesh.define('scaleX', {
    get: function() {
      return this.scale.x;
    },
    set: function(scale) {
      return this.scale.set(scale, this.scale.y, this.scale.z);
    }
  });

  Mesh.define('scaleY', {
    get: function() {
      return this.scale.y;
    },
    set: function(scale) {
      return this.scale.set(this.scale.x, scale, this.scale.z);
    }
  });

  Mesh.define('scaleZ', {
    get: function() {
      return this.scale.z;
    },
    set: function(scale) {
      return this.scale.set(this.scale.x, this.scale.y, scale);
    }
  });

  Mesh.define('x', {
    get: function() {
      return this.position.x;
    },
    set: function(x) {
      return this.position.x = x;
    }
  });

  Mesh.define('y', {
    get: function() {
      return this.position.y;
    },
    set: function(y) {
      return this.position.y = y;
    }
  });

  Mesh.define('z', {
    get: function() {
      return this.position.z;
    },
    set: function(z) {
      return this.position.z = z;
    }
  });

  Mesh.define('rotationX', {
    get: function() {
      return THREE.Math.radToDeg(this.rotation.x);
    },
    set: function(x) {
      return this.rotation.x = THREE.Math.degToRad(x);
    }
  });

  Mesh.define('rotationY', {
    get: function() {
      return THREE.Math.radToDeg(this.rotation.y);
    },
    set: function(y) {
      return this.rotation.y = THREE.Math.degToRad(y);
    }
  });

  Mesh.define('rotationZ', {
    get: function() {
      return THREE.Math.radToDeg(this.rotation.z);
    },
    set: function(z) {
      return this.rotation.z = THREE.Math.degToRad(z);
    }
  });

  return Mesh;

})(THREE.Mesh);


},{}],"form/Model":[function(require,module,exports){
var Animation, BaseClass, Collada, FBX, GLTF, JSONObject, OBJ, States, _,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = Framer._;

BaseClass = require('./_BaseClass.coffee').BaseClass;

Animation = require('./_Animation.coffee').Animation;

States = require('./_States.coffee').States;

OBJ = require('./loaders/OBJ.coffee').OBJ;

FBX = require('./loaders/FBX.coffee').FBX;

GLTF = require('./loaders/GLTF.coffee').GLTF;

Collada = require('./loaders/Collada.coffee').Collada;

JSONObject = require('./loaders/JSONObject.coffee').JSONObject;

exports.Model = (function(superClass) {
  extend(Model, superClass);

  function Model(properties) {
    if (properties == null) {
      properties = {};
    }
    this.updateMixer = bind(this.updateMixer, this);
    Model.__super__.constructor.call(this);
    _.defaults(properties, {
      animate: true,
      castShadow: true,
      receiveShadow: true,
      reposition: true
    });
    switch (this.getExtension(properties.path)) {
      case 'obj':
        new OBJ(properties, (function(_this) {
          return function(model) {
            _this.mesh = model;
            return _this.setupModel(properties);
          };
        })(this));
        break;
      case 'fbx':
        new FBX(properties, (function(_this) {
          return function(model) {
            _this.mesh = model;
            return _this.setupModel(properties);
          };
        })(this));
        break;
      case 'gltf' || 'glb':
        new GLTF(properties, (function(_this) {
          return function(model) {
            _this.mesh = model;
            return _this.setupModel(properties);
          };
        })(this));
        break;
      case 'dae':
        new Collada(properties, (function(_this) {
          return function(model) {
            _this.mesh = model;
            return _this.setupModel(properties);
          };
        })(this));
        break;
      case 'json':
        new JSONObject(properties, (function(_this) {
          return function(model) {
            _this.mesh = model;
            return _this.setupModel(properties);
          };
        })(this));
    }
  }

  Model.prototype.getExtension = function(path) {
    return path.split('.').pop();
  };

  Model.prototype.setupModel = function(properties) {
    if (properties.reposition) {
      this.repositionMesh();
    }
    this.pivot = new THREE.Group;
    this.pivot.add(this.mesh);
    this.saveInitialProperties();
    if (properties.material) {
      this.applyMaterial(properties.material);
    }
    this.setupShadowSettings(properties);
    if (properties.smoothShading) {
      this.mesh.traverse(function(c) {
        if (c instanceof THREE.Mesh) {
          return c.material.shading = THREE.SmoothShading;
        }
      });
    }
    if (properties.animate && this.mesh.animations && this.mesh.animations[0]) {
      this.handleAnimations(properties);
    }
    if (properties.parent) {
      this.addToRenderingInstance(properties.parent);
    }
    this.setScale(properties.scale, properties.scaleX, properties.scaleY, properties.scaleZ);
    this.setPosition([properties.x, properties.y, properties.z]);
    this.setRotation([properties.rotationX, properties.rotationY, properties.rotationZ]);
    this.setMid({
      midX: properties.midX,
      midY: properties.midY,
      midZ: properties.midZ
    });
    if (properties.visible) {
      this.visible = properties.visible;
    }
    this._states = new States(this);
    if (properties.onLoad) {
      return properties.onLoad(this);
    }
  };

  Model.prototype.repositionMesh = function() {
    this.boundingBox = new THREE.Box3().setFromObject(this.mesh);
    this.offset = this.boundingBox.getCenter(this.mesh.position);
    return this.mesh.position.multiplyScalar(-1);
  };

  Model.prototype.saveInitialProperties = function() {
    return this.initialProperties = this;
  };

  Model.prototype.applyMaterial = function(material) {
    return this.mesh.traverse(function(c) {
      if (c instanceof THREE.Mesh) {
        return c.material = material;
      }
    });
  };

  Model.prototype.setupShadowSettings = function(properties) {
    return this.mesh.traverse(function(c) {
      if (c instanceof THREE.Mesh) {
        c.castShadow = properties.castShadow;
        return c.receiveShadow = properties.receiveShadow;
      }
    });
  };

  Model.prototype.addToRenderingInstance = function(parent) {
    if (parent.scene) {
      return parent.scene.add(this.pivot);
    } else {
      return parent.add(this.pivot);
    }
  };

  Model.prototype.handleAnimations = function(properties) {
    if (_.isNumber(properties.animationClip)) {
      this.animationIndex = properties.animationClip - 1;
    } else {
      this.animationIndex = 0;
    }
    this.clock = new THREE.Clock;
    this.mesh.mixer = new THREE.AnimationMixer(this.mesh);
    this.action = this.mesh.mixer.clipAction(this.mesh.animations[this.animationIndex]);
    this.action.play();
    this.updateMixer();
    return Framer.CurrentContext.on('reset', (function(_this) {
      return function() {
        return cancelAnimationFrame(_this.mixerRequestId);
      };
    })(this));
  };

  Model.prototype.updateMixer = function() {
    this.mixerRequestId = requestAnimationFrame(this.updateMixer);
    return this.mesh.mixer.update(this.clock.getDelta());
  };

  Model.prototype.on = function(eventName, cb) {
    var callback;
    if (eventName.includes('change')) {
      callback = function(e) {
        return cb(e.value);
      };
      this.pivot.addEventListener(eventName, callback);
      return Framer.CurrentContext.on('reset', (function(_this) {
        return function() {
          return _this.pivot.removeEventListener(eventName, callback);
        };
      })(this));
    } else {
      return this.mesh.traverse(function(c) {
        if (c instanceof THREE.Mesh) {
          callback = function() {
            return cb();
          };
          c.addEventListener(eventName, callback);
          return Framer.CurrentContext.on('reset', (function(_this) {
            return function() {
              return c.removeEventListener(eventName, callback);
            };
          })(this));
        }
      });
    }
  };

  Model.prototype.setScale = function(uniformScale, scaleX, scaleY, scaleZ) {
    if (uniformScale) {
      return this.scale = uniformScale || 1;
    } else {
      this.scaleX = scaleX || 1;
      this.scaleY = scaleY || 1;
      return this.scaleZ = scaleZ || 1;
    }
  };

  Model.prototype.setPosition = function(position) {
    this.x = position[0] || 0;
    this.y = position[1] || 0;
    return this.z = position[2] || 0;
  };

  Model.prototype.setRotation = function(rotation) {
    this.rotationX = rotation[0] || 0;
    this.rotationY = rotation[1] || 0;
    return this.rotationZ = rotation[2] || 0;
  };

  Model.prototype.setMid = function(mid) {
    return Object.keys(mid).map((function(_this) {
      return function(k) {
        if (mid[k]) {
          return _this[k] = mid[k];
        }
      };
    })(this));
  };

  Model.prototype.animate = function(properties) {
    return new Animation(this, properties);
  };

  Model.prototype.lookAt = function(a, b, c) {
    if (arguments.length === 1) {
      return this.pivot.lookAt(a);
    } else if (arguments.length === 3) {
      return this.pivot.lookAt(a, b, c);
    }
  };

  Model.prototype.stateSwitch = function(state) {
    return Object.keys(this.states).map((function(_this) {
      return function(k) {
        if (k === state) {
          _this.states.current = _this.states[k];
          return Object.keys(_this.states.current).map(function(pk) {
            return _this[pk] = _this.states.current[pk];
          });
        }
      };
    })(this));
  };

  Model.prototype.stateCycle = function(stateA, stateB) {
    if (this.states.current === this.states[stateA] || this.states.current === this.states[stateB]) {
      if (this.states.current === this.states[stateA]) {
        return this.animate(stateB);
      } else if (this.states.current === this.states[stateB]) {
        return this.animate(stateA);
      }
    } else {
      return this.animate(stateA);
    }
  };

  Model.define('scale', {
    get: function() {
      return this.pivot.scale.x;
    },
    set: function(scale) {
      this.pivot.scale.set(scale, scale, scale);
      return this.pivot.dispatchEvent({
        type: 'change:scale',
        value: this.scale
      });
    }
  });

  Model.define('scaleX', {
    get: function() {
      return this.pivot.scale.x;
    },
    set: function(scale) {
      this.pivot.scale.set(scale, this.pivot.scale.y, this.pivot.scale.z);
      return this.pivot.dispatchEvent({
        type: 'change:scaleX',
        value: this.scaleX
      });
    }
  });

  Model.define('scaleY', {
    get: function() {
      return this.pivot.scale.y;
    },
    set: function(scale) {
      this.pivot.scale.set(this.pivot.scale.x, scale, this.pivot.scale.z);
      return this.pivot.dispatchEvent({
        type: 'change:scaleY',
        value: this.scaleY
      });
    }
  });

  Model.define('scaleZ', {
    get: function() {
      return this.pivot.scale.z;
    },
    set: function(scale) {
      this.pivot.scale.set(this.pivot.scale.x, this.pivot.scale.y, scale);
      return this.pivot.dispatchEvent({
        type: 'change:scaleZ',
        value: this.scaleZ
      });
    }
  });

  Model.define('position', {
    get: function() {
      return this.pivot.position;
    }
  });

  Model.define('x', {
    get: function() {
      return this.pivot.position.x;
    },
    set: function(x) {
      this.pivot.position.x = x;
      return this.pivot.dispatchEvent({
        type: 'change:x',
        value: this.x
      });
    }
  });

  Model.define('y', {
    get: function() {
      return this.pivot.position.y;
    },
    set: function(y) {
      this.pivot.position.y = y;
      return this.pivot.dispatchEvent({
        type: 'change:y',
        value: this.y
      });
    }
  });

  Model.define('z', {
    get: function() {
      return this.pivot.position.z;
    },
    set: function(z) {
      this.pivot.position.z = z;
      return this.pivot.dispatchEvent({
        type: 'change:z',
        value: this.z
      });
    }
  });

  Model.define('rotation', {
    get: function() {
      return this.pivot.rotation;
    }
  });

  Model.define('rotationX', {
    get: function() {
      return THREE.Math.radToDeg(this.pivot.rotation.x);
    },
    set: function(x) {
      this.pivot.rotation.x = THREE.Math.degToRad(x);
      return this.pivot.dispatchEvent({
        type: 'change:rotationX',
        value: this.rotationX
      });
    }
  });

  Model.define('rotationY', {
    get: function() {
      return THREE.Math.radToDeg(this.pivot.rotation.y);
    },
    set: function(y) {
      this.pivot.rotation.y = THREE.Math.degToRad(y);
      return this.pivot.dispatchEvent({
        type: 'change:rotationY',
        value: this.rotationY
      });
    }
  });

  Model.define('rotationZ', {
    get: function() {
      return THREE.Math.radToDeg(this.pivot.rotation.z);
    },
    set: function(z) {
      this.pivot.rotation.z = THREE.Math.degToRad(z);
      return this.pivot.dispatchEvent({
        type: 'change:rotationZ',
        value: this.rotationZ
      });
    }
  });

  Model.define('midX', {
    set: function(midX) {
      return this.mesh.position.x = -midX;
    }
  });

  Model.define('midY', {
    set: function(midY) {
      return this.mesh.position.y = -midY;
    }
  });

  Model.define('midZ', {
    set: function(midZ) {
      return this.mesh.position.z = -midZ;
    }
  });

  Model.define('parent', {
    get: function() {
      return this.pivot.parent;
    },
    set: function(parent) {
      this.pivot.parent = parent;
      return this.pivot.dispatchEvent({
        type: 'change:parent',
        value: this.parent
      });
    }
  });

  Model.define('visible', {
    get: function() {
      return this.pivot.visible;
    },
    set: function(bool) {
      this.pivot.visible = bool;
      return this.pivot.dispatchEvent({
        type: 'change:visible',
        value: this.visible
      });
    }
  });

  Model.define('children', {
    get: function() {
      return this.pivot.children;
    }
  });

  Model.define('size', {
    get: function() {
      return {
        height: this.boundingBox.max.y - this.boundingBox.min.y,
        width: this.boundingBox.max.x - this.boundingBox.min.x,
        depth: this.boundingBox.max.z - this.boundingBox.min.z
      };
    }
  });

  Model.define('states', {
    get: function() {
      return this._states.states;
    },
    set: function(states) {
      return _.extend(this.states, states);
    }
  });

  Model.define('animationClip', {
    get: function() {
      return this.animationIndex + 1;
    },
    set: function(animation) {
      if (this.mesh.animations[animation - 1]) {
        this.animationIndex = animation - 1;
        this.action = this.mesh.mixer.clipAction(this.mesh.animations[this.animationIndex]);
        return this.action.play();
      }
    }
  });

  return Model;

})(BaseClass);


},{"./_Animation.coffee":"form/_Animation","./_BaseClass.coffee":"form/_BaseClass","./_States.coffee":"form/_States","./loaders/Collada.coffee":"form/loaders/Collada","./loaders/FBX.coffee":"form/loaders/FBX","./loaders/GLTF.coffee":"form/loaders/GLTF","./loaders/JSONObject.coffee":"form/loaders/JSONObject","./loaders/OBJ.coffee":"form/loaders/OBJ"}],"form/Scene":[function(require,module,exports){
var Camera, _,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = Framer._;

Camera = require('./_Camera.coffee').Camera;

exports.Scene = (function(superClass) {
  extend(Scene, superClass);

  function Scene(properties) {
    var cameraProps;
    if (properties == null) {
      properties = {};
    }
    this.onWindowResize = bind(this.onWindowResize, this);
    this.handleRaycaster = bind(this.handleRaycaster, this);
    this.loop = bind(this.loop, this);
    Scene.__super__.constructor.call(this, _.defaults(properties, {
      backgroundColor: '#000'
    }));
    this.renderer = new THREE.WebGLRenderer({
      antialias: true,
      alpha: true
    });
    this._element.appendChild(this.renderer.domElement);
    this.renderer.setSize(this.width, this.height);
    this.renderer.setPixelRatio(window.devicePixelRatio);
    this.renderer.domElement.style.width = '100%';
    this.renderer.domElement.style.height = '100%';
    this.renderer.shadowMap.enabled = true;
    this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    this.scene = new THREE.Scene;
    cameraProps = _.defaults(properties.camera, {
      aspect: this.width / this.height
    });
    this.camera = new Camera(cameraProps, this._element);
    Canvas.onResize(this.onWindowResize);
    this.raycaster = new THREE.Raycaster;
    this.mouse = new THREE.Vector2;
    this.intersected = null;
    this.intersectedEventEmitted = false;
    this.mousedown = false;
    this.on('mousemove', (function(_this) {
      return function(e) {
        _this.mouse.x = (e.clientX / _this.width) * 2 - 1;
        return _this.mouse.y = -(e.clientY / _this.height) * 2 + 1;
      };
    })(this));
    this.on('mousedown', (function(_this) {
      return function(e) {
        _this.mousedown = true;
        if (_this.intersected) {
          _this.intersected.object.dispatchEvent({
            type: 'mousedown'
          });
          _this.intersected.object.dispatchEvent({
            type: 'onmousedown'
          });
          _this.intersected.object.dispatchEvent({
            type: 'click'
          });
          return _this.intersected.object.dispatchEvent({
            type: 'onclick'
          });
        }
      };
    })(this));
    this.on('mouseup', (function(_this) {
      return function(e) {
        _this.mousedown = false;
        if (_this.intersected) {
          _this.intersected.object.dispatchEvent({
            type: 'mouseup'
          });
          return _this.intersected.object.dispatchEvent({
            type: 'onmouseup'
          });
        }
      };
    })(this));
    this.loop();
    Framer.CurrentContext.on('reset', (function(_this) {
      return function() {
        return cancelAnimationFrame(_this.animationLoopRequestId);
      };
    })(this));
  }

  Scene.prototype.loop = function() {
    this.animationLoopRequestId = requestAnimationFrame(this.loop);
    if (this.animationLoop) {
      this.animationLoop();
    }
    if (this.camera.controls) {
      this.camera.controls.update();
    }
    this.handleRaycaster();
    return this.renderer.render(this.scene, this.camera.nativeCamera);
  };

  Scene.prototype.handleRaycaster = function() {
    var intersects;
    this.raycaster.setFromCamera(this.mouse, this.camera.nativeCamera);
    intersects = this.raycaster.intersectObjects(this.scene.children, true);
    if (intersects.length && this.intersected !== intersects[0]) {
      this.intersected = intersects[0];
    }
    if (this.intersected && !intersects.length) {
      this.intersected.object.dispatchEvent({
        type: 'mouseout'
      });
      this.intersected.object.dispatchEvent({
        type: 'onmouseout'
      });
    }
    if (!intersects.length) {
      this.intersected = null;
      this.intersectedEventEmitted = false;
    }
    if (!this.intersectedEventEmitted && this.intersected) {
      this.intersected.object.dispatchEvent({
        type: 'mouseover'
      });
      this.intersected.object.dispatchEvent({
        type: 'onmouseover'
      });
      return this.intersectedEventEmitted = true;
    }
  };

  Scene.prototype.onWindowResize = function(e) {
    this.camera.aspect = this.width / this.height;
    this.camera.nativeCamera.updateProjectionMatrix();
    return this.renderer.setSize(this.width, this.height);
  };

  return Scene;

})(Layer);


},{"./_Camera.coffee":"form/_Camera"}],"form/Studio":[function(require,module,exports){
var Scene, _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = Framer._;

Scene = require('./Scene.coffee').Scene;

exports.Studio = (function(superClass) {
  extend(Studio, superClass);

  function Studio(properties) {
    if (properties == null) {
      properties = {};
    }
    _.defaults(properties, {
      camera: {
        y: 220,
        rotationX: -15
      }
    });
    Studio.__super__.constructor.call(this, properties);
    this.scene.background = new THREE.Color(0xFFF6EB);
    this.scene.fog = new THREE.Fog(0xFFF6EB, 400, 1000);
    this.hlight = new THREE.HemisphereLight(0xffffff, 0x444444);
    this.hlight.position.y = 200;
    this.scene.add(this.hlight);
    this.light = new THREE.PointLight(0xffffff, .1);
    this.light.position.set(0, 800, 0);
    this.light.castShadow = true;
    this.light.shadow.camera.near = 100;
    this.light.shadow.camera.far = 1000;
    this.light.shadow.bias = .0001;
    this.light.shadow.radius = 5;
    this.light.shadow.mapSize.width = 1024;
    this.light.shadow.mapSize.height = 1024;
    this.scene.add(this.light);
    this.light2 = new THREE.DirectionalLight(0xff9999, .3);
    this.light2.position.set(-100, 200, -300);
    this.scene.add(this.light2);
    this.light3 = new THREE.DirectionalLight(0x6666ff, .2);
    this.light3.position.set(100, 200, -300);
    this.scene.add(this.light3);
    this.light4 = new THREE.DirectionalLight(0xff9999, .3);
    this.light4.position.set(-100, 200, 300);
    this.scene.add(this.light4);
    this.light5 = new THREE.DirectionalLight(0x6666ff, .2);
    this.light5.position.set(100, 200, 300);
    this.scene.add(this.light5);
    this.floorGeo = new THREE.CircleGeometry(800, 100);
    this.floorMat = new THREE.MeshStandardMaterial({
      roughness: .6,
      color: 0xaaaaaa,
      metalness: 0.2,
      bumpScale: 0.0005
    });
    this.floor = new THREE.Mesh(this.floorGeo, this.floorMat);
    this.floor.rotation.x = -Math.PI / 2;
    this.floor.receiveShadow = true;

    /*
    @grid = new THREE.GridHelper 2000, 20, 0x000000, 0x000000
    @grid.material.opacity = .2
    @grid.material.transparent = true
    @scene.add @grid
     */
  }

  return Studio;

})(Scene);


},{"./Scene.coffee":"form/Scene"}],"form/_Animation":[function(require,module,exports){
var Model, _,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = Framer._;

Model = require('./Model.coffee').Model;

exports.Animation = (function(superClass) {
  extend(Animation, superClass);

  function Animation(model, properties) {
    var stateName;
    if (properties == null) {
      properties = {};
    }
    this.animationLoop = bind(this.animationLoop, this);
    Animation.__super__.constructor.call(this);
    if (!properties) {
      throw Error('Please specify properties or a state to animate!');
    }
    if (_.isString(properties)) {
      stateName = properties;
      Object.keys(model.states).map((function(_this) {
        return function(k) {
          if (k === stateName) {
            model.states.current = model.states[k];
            return properties = model.states[stateName];
          }
        };
      })(this));
    }
    this.properties = this.filterProperties(properties);
    this.options = _.defaults(properties.options, {
      time: 1,
      delay: 0,
      curve: 'linear'
    });
    Utils.delay(this.options.delay, (function(_this) {
      return function() {
        _this.model = model;
        _this.mesh = model.mesh || model.light || model.nativeCamera;
        _this.fps = 60;
        _this.time = _this.options.time;
        _this.renderedFrames = 0;
        _this.totalFrames = _this.time * _this.fps;
        _this.modelPropertyInitialValues = {};
        _this.deltas = _this.calculateDeltas();
        if (_this.deltas.length) {
          _this.intervalDisposer = setInterval(function() {
            if (_this.renderedFrames >= _this.totalFrames) {
              return _this.disposeInterval;
            }
            requestAnimationFrame(_this.animationLoop);
            return _this.renderedFrames++;
          }, 1000 / _this.fps);
        }
        return Framer.CurrentContext.on('reset', function() {
          if (_this.intervalDisposer) {
            return clearInterval(_this.intervalDisposer);
          }
        });
      };
    })(this));
  }

  Animation.prototype.filterProperties = function(properties) {
    var props;
    props = Object.assign({}, properties);
    delete props.options;
    return props;
  };

  Animation.prototype.calculateDeltas = function() {
    var deltas;
    deltas = Object.keys(this.properties).map((function(_this) {
      return function(k) {
        var newObj;
        _this.modelPropertyInitialValues[k] = _this.model[k];
        newObj = {};
        if (_this.model[k] > _this.properties[k]) {
          newObj[k] = -Math.abs(_this.model[k] - _this.properties[k]);
        } else if (_this.model[k] < _this.properties[k]) {
          newObj[k] = Math.abs(_this.model[k] - _this.properties[k]);
        } else {
          null;
        }
        return newObj;
      };
    })(this));
    return deltas.filter(function(d) {
      return d;
    });
  };

  Animation.prototype.applyEasing = function(t, b, c, d) {
    if (this.options.curve.includes('ease')) {
      return this[this.options.curve](t, b, c, d);
    } else {
      return this.linear(t, b, c, d);
    }
  };

  Animation.prototype.animationLoop = function() {
    var delta, deltaValue, easedValue, i, j, len, prop, ref, results;
    ref = this.deltas;
    results = [];
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      delta = ref[i];
      prop = Object.keys(delta)[0];
      deltaValue = Object.values(delta)[0];
      easedValue = this.applyEasing(this.renderedFrames, this.modelPropertyInitialValues[prop], deltaValue, this.totalFrames);
      results.push(this.model[prop] = easedValue);
    }
    return results;
  };

  Animation.prototype.disposeInterval = function() {
    return clearInterval(this.intervalDisposer);
  };

  Animation.prototype.linear = function(t, b, c, d) {
    return c * t / d + b;
  };

  Animation.prototype.easeInQuad = function(t, b, c, d) {
    return c * (t /= d) * t + b;
  };

  Animation.prototype.easeOutQuad = function(t, b, c, d) {
    return -c * (t /= d) * (t - 2) + b;
  };

  Animation.prototype.easeInOutQuad = function(t, b, c, d) {
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t + b;
    } else {
      return -c / 2 * ((--t) * (t - 2) - 1) + b;
    }
  };

  Animation.prototype.easeInCubic = function(t, b, c, d) {
    return c * (t /= d) * t * t + b;
  };

  Animation.prototype.easeOutCubic = function(t, b, c, d) {
    return c * ((t = t / d - 1) * t * t + 1) + b;
  };

  Animation.prototype.easeInOutCubic = function(t, b, c, d) {
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t + b;
    } else {
      return c / 2 * ((t -= 2) * t * t + 2) + b;
    }
  };

  Animation.prototype.easeInQuart = function(t, b, c, d) {
    return c * (t /= d) * t * t * t + b;
  };

  Animation.prototype.easeOutQuart = function(t, b, c, d) {
    return -c * ((t = t / d - 1) * t * t * t - 1) + b;
  };

  Animation.prototype.easeInOutQuart = function(t, b, c, d) {
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t * t + b;
    } else {
      return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
    }
  };

  Animation.prototype.easeInQuint = function(t, b, c, d) {
    return c * (t /= d) * t * t * t * t + b;
  };

  Animation.prototype.easeOutQuint = function(t, b, c, d) {
    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
  };

  Animation.prototype.easeInOutQuint = function(t, b, c, d) {
    if ((t /= d / 2) < 1) {
      return c / 2 * t * t * t * t * t + b;
    } else {
      return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
    }
  };

  Animation.prototype.easeInSine = function(t, b, c, d) {
    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
  };

  Animation.prototype.easeOutSine = function(t, b, c, d) {
    return c * Math.sin(t / d * (Math.PI / 2)) + b;
  };

  Animation.prototype.easeInOutSine = function(t, b, c, d) {
    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
  };

  Animation.prototype.easeInExpo = function(t, b, c, d) {
    var ref;
    return (ref = t === 0) != null ? ref : {
      b: c * Math.pow(2, 10 * (t / d - 1)) + b
    };
  };

  Animation.prototype.easeOutExpo = function(t, b, c, d) {
    var ref;
    return (ref = t === d) != null ? ref : b + {
      c: c * (-Math.pow(2, -10 * t / d) + 1) + b
    };
  };

  Animation.prototype.easeInOutExpo = function(t, b, c, d) {
    if (t === 0) {
      b;
    }
    if (t === d) {
      b + c;
    }
    if ((t /= d / 2) < 1) {
      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
    } else {
      return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
    }
  };

  Animation.prototype.easeInCirc = function(t, b, c, d) {
    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
  };

  Animation.prototype.easeOutCirc = function(t, b, c, d) {
    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
  };

  Animation.prototype.easeInOutCirc = function(t, b, c, d) {
    if ((t /= d / 2) < 1) {
      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
    } else {
      return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
    }
  };

  Animation.prototype.easeInElastic = function(t, b, c, d) {
    var a, p, s;
    s = 1.70158;
    p = 0;
    a = c;
    if (t === 0) {
      b;
    }
    if ((t /= d) === 1) {
      b + c;
    }
    if (!p) {
      p = d * .3;
    }
    if (a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
  };

  Animation.prototype.easeOutElastic = function(t, b, c, d) {
    var a, p, s;
    s = 1.70158;
    p = 0;
    a = c;
    if (t === 0) {
      b;
    }
    if ((t /= d) === 1) {
      b + c;
    }
    if (!p) {
      p = d * .3;
    }
    if (a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    return a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b;
  };

  Animation.prototype.easeInOutElastic = function(t, b, c, d) {
    var a, p, s;
    s = 1.70158;
    p = 0;
    a = c;
    if (t === 0) {
      b;
    }
    if ((t /= d / 2) === 2) {
      b + c;
    }
    if (!p) {
      p = d * (.3 * 1.5);
    }
    if (a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      s = p / (2 * Math.PI) * Math.asin(c / a);
    }
    if (t < 1) {
      -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
    }
    return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b;
  };

  return Animation;

})(Framer.EventEmitter);


},{"./Model.coffee":"form/Model"}],"form/_BaseClass":[function(require,module,exports){
exports.BaseClass = (function() {
  function BaseClass() {}

  BaseClass.define = function(propertyName, descriptor) {
    if (descriptor.readonly) {
      descriptor.set = function(value) {
        throw Error(this.constructor.name + "." + propertyName + " is readonly");
      };
    }
    return Object.defineProperty(this.prototype, propertyName, descriptor);
  };

  return BaseClass;

})();


},{}],"form/_Camera":[function(require,module,exports){
var Animation, BaseClass, States, _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = Framer._;

require('./lib/OrbitControls');

BaseClass = require('./_BaseClass.coffee').BaseClass;

Animation = require('./_Animation.coffee').Animation;

States = require('./_States.coffee').States;

exports.Camera = (function(superClass) {
  extend(Camera, superClass);

  function Camera(properties, sceneDOM) {
    if (properties == null) {
      properties = {};
    }
    Camera.__super__.constructor.call(this);
    this.sceneDOM = sceneDOM;
    _.defaults(properties, {
      x: 0,
      y: 0,
      z: 500,
      rotationX: 0,
      rotationY: 0,
      rotationZ: 0,
      fov: 35,
      near: 0.1,
      far: 10000,
      enablePan: false,
      enableZoom: false,
      enableRotate: false,
      autoRotate: false,
      autoRotateSpeed: 10,
      target: new THREE.Vector3(0, 0, 0)
    });
    this.nativeCamera = new THREE.PerspectiveCamera(properties.fov, properties.aspect, properties.near, properties.far);
    if (properties.orbitControls) {
      this.setupOrbitControls(properties);
    }
    this.setPosition([properties.x, properties.y, properties.z]);
    this.setRotation([properties.rotationX, properties.rotationY, properties.rotationZ]);
    this.saveInitialProperties();
    this._states = new States(this);
  }

  Camera.prototype.setupOrbitControls = function(properties) {
    this.controls = new THREE.OrbitControls(this.nativeCamera, this.sceneDOM);
    this.enablePan = properties.enablePan;
    this.enableZoom = properties.enableZoom;
    this.enableRotate = properties.enableRotate;
    this.autoRotate = properties.autoRotate;
    this.autoRotateSpeed = properties.autoRotateSpeed;
    return this.target = properties.target;
  };

  Camera.prototype.saveInitialProperties = function() {
    return this.initialProperties = this;
  };

  Camera.prototype.on = function(eventName, cb) {
    var callback;
    if (eventName.includes('change')) {
      callback = function(e) {
        return cb(e.value);
      };
      this.nativeCamera.addEventListener(eventName, callback);
      return Framer.CurrentContext.on('reset', (function(_this) {
        return function() {
          return _this.nativeCamera.removeEventListener(eventName, callback);
        };
      })(this));
    }
  };

  Camera.prototype.setPosition = function(positions) {
    this.x = positions[0];
    this.y = positions[1];
    return this.z = positions[2];
  };

  Camera.prototype.setRotation = function(rotations) {
    this.rotationX = rotations[0];
    this.rotationY = rotations[1];
    return this.rotationZ = rotations[2];
  };

  Camera.prototype.animate = function(properties) {
    return new Animation(this, properties);
  };

  Camera.prototype.lookAt = function(a, b, c) {
    if (arguments.length === 1) {
      return this.nativeCamera.lookAt(a);
    } else if (arguments.length === 3) {
      return this.nativeCamera.lookAt(a, b, c);
    }
  };

  Camera.prototype.stateSwitch = function(state) {
    return Object.keys(this.states).map((function(_this) {
      return function(k) {
        if (k === state) {
          _this.states.current = _this.states[k];
          return Object.keys(_this.states.current).map(function(pk) {
            return _this[pk] = _this.states.current[pk];
          });
        }
      };
    })(this));
  };

  Camera.prototype.stateCycle = function(stateA, stateB) {
    if (this.states.current === this.states[stateA] || this.states.current === this.states[stateB]) {
      if (this.states.current === this.states[stateA]) {
        return this.animate(stateB);
      } else if (this.states.current === this.states[stateB]) {
        return this.animate(stateA);
      }
    } else {
      return this.animate(stateA);
    }
  };

  Camera.define('position', {
    get: function() {
      return this.nativeCamera.position;
    }
  });

  Camera.define('x', {
    get: function() {
      return this.nativeCamera.position.x;
    },
    set: function(x) {
      this.nativeCamera.position.x = x;
      if (this.controls) {
        this.controls.update();
      }
      return this.nativeCamera.dispatchEvent({
        type: 'change:x',
        value: this.x
      });
    }
  });

  Camera.define('y', {
    get: function() {
      return this.nativeCamera.position.y;
    },
    set: function(y) {
      this.nativeCamera.position.y = y;
      if (this.controls) {
        this.controls.update();
      }
      return this.nativeCamera.dispatchEvent({
        type: 'change:y',
        value: this.y
      });
    }
  });

  Camera.define('z', {
    get: function() {
      return this.nativeCamera.position.z;
    },
    set: function(z) {
      this.nativeCamera.position.z = z;
      if (this.controls) {
        this.controls.update();
      }
      return this.nativeCamera.dispatchEvent({
        type: 'change:z',
        value: this.z
      });
    }
  });

  Camera.define('rotation', {
    get: function() {
      return this.nativeCamera.rotation;
    }
  });

  Camera.define('rotationX', {
    get: function() {
      return THREE.Math.radToDeg(this.nativeCamera.rotation.x);
    },
    set: function(x) {
      this.nativeCamera.rotation.x = THREE.Math.degToRad(x);
      if (this.controls) {
        this.controls.update();
      }
      return this.nativeCamera.dispatchEvent({
        type: 'change:rotationX',
        value: this.rotationX
      });
    }
  });

  Camera.define('rotationY', {
    get: function() {
      return THREE.Math.radToDeg(this.nativeCamera.rotation.y);
    },
    set: function(y) {
      this.nativeCamera.rotation.y = THREE.Math.degToRad(y);
      if (this.controls) {
        this.controls.update();
      }
      return this.nativeCamera.dispatchEvent({
        type: 'change:rotationY',
        value: this.rotationY
      });
    }
  });

  Camera.define('rotationZ', {
    get: function() {
      return THREE.Math.radToDeg(this.nativeCamera.rotation.z);
    },
    set: function(z) {
      this.nativeCamera.rotation.z = THREE.Math.degToRad(z);
      if (this.controls) {
        this.controls.update();
      }
      return this.nativeCamera.dispatchEvent({
        type: 'change:rotationZ',
        value: this.rotationZ
      });
    }
  });

  Camera.define('fov', {
    get: function() {
      return this.nativeCamera.fov;
    },
    set: function(fov) {
      this.nativeCamera.fov = fov;
      return this.nativeCamera.dispatchEvent({
        type: 'change:fov',
        value: this.fov
      });
    }
  });

  Camera.define('zoom', {
    get: function() {
      return this.nativeCamera.zoom;
    },
    set: function(factor) {
      this.nativeCamera.zoom = factor;
      return this.nativeCamera.dispatchEvent({
        type: 'change:zoom',
        value: this.zoom
      });
    }
  });

  Camera.define('near', {
    get: function() {
      return this.nativeCamera.near;
    },
    set: function(near) {
      this.nativeCamera.near = near;
      return this.nativeCamera.dispatchEvent({
        type: 'change:near',
        value: this.near
      });
    }
  });

  Camera.define('far', {
    get: function() {
      return this.nativeCamera.far;
    },
    set: function(far) {
      this.nativeCamera.far = far;
      return this.nativeCamera.dispatchEvent({
        type: 'change:far',
        value: this.far
      });
    }
  });

  Camera.define('aspect', {
    get: function() {
      return this.nativeCamera.aspect;
    },
    set: function(aspect) {
      this.nativeCamera.aspect = aspect;
      return this.nativeCamera.dispatchEvent({
        type: 'change:aspect',
        value: this.aspect
      });
    }
  });

  Camera.define('states', {
    get: function() {
      return this._states.states;
    },
    set: function(states) {
      return _.extend(this.states, states);
    }
  });

  Camera.define('enablePan', {
    get: function() {
      return this.controls.enablePan;
    },
    set: function(bool) {
      this.controls.enablePan = bool;
      return this.nativeCamera.dispatchEvent({
        type: 'change:enablePan',
        value: this.enablePan
      });
    }
  });

  Camera.define('enableZoom', {
    get: function() {
      return this.controls.enableZoom;
    },
    set: function(bool) {
      this.controls.enableZoom = bool;
      return this.nativeCamera.dispatchEvent({
        type: 'change:enableZoom',
        value: this.enableZoom
      });
    }
  });

  Camera.define('enableRotate', {
    get: function() {
      return this.controls.enableRotate;
    },
    set: function(bool) {
      this.controls.enableRotate = bool;
      return this.nativeCamera.dispatchEvent({
        type: 'change:enableRotate',
        value: this.enableRotate
      });
    }
  });

  Camera.define('autoRotate', {
    get: function() {
      return this.controls.autoRotate;
    },
    set: function(bool) {
      this.controls.autoRotate = bool;
      return this.nativeCamera.dispatchEvent({
        type: 'change:autoRotate',
        value: this.autoRotate
      });
    }
  });

  Camera.define('autoRotateSpeed', {
    get: function() {
      return this.controls.autoRotateSpeed;
    },
    set: function(speed) {
      this.controls.autoRotateSpeed = speed;
      return this.nativeCamera.dispatchEvent({
        type: 'change:autoRotateSpeed',
        value: this.autoRotateSpeed
      });
    }
  });

  Camera.define('target', {
    get: function() {
      return this.controls.target;
    },
    set: function(vector3) {
      this.controls.target = vector3;
      return this.nativeCamera.dispatchEvent({
        type: 'change:target',
        value: this.target
      });
    }
  });

  return Camera;

})(BaseClass);


},{"./_Animation.coffee":"form/_Animation","./_BaseClass.coffee":"form/_BaseClass","./_States.coffee":"form/_States","./lib/OrbitControls":"form/lib/OrbitControls"}],"form/_States":[function(require,module,exports){
var BaseClass, acceptedModelProperties, reservedStateError,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BaseClass = require('./_BaseClass.coffee').BaseClass;

acceptedModelProperties = ['x', 'y', 'z', 'rotationX', 'rotationY', 'rotationZ', 'scale', 'scaleX', 'scaleY', 'scaleZ', 'options'];

reservedStateError = function(name) {
  throw Error("The state '" + name + "' is a reserved name.");
};

exports.States = (function(superClass) {
  extend(States, superClass);

  function States(model) {
    States.__super__.constructor.call(this);
    this.model = model;
    this.initialModelProperties = Object.getOwnPropertyNames(Object.getPrototypeOf(this.model.initialProperties));
    this.states = {
      "default": this.filterProperties(this.initialModelProperties),
      current: this.filterProperties(this.initialModelProperties)
    };
  }

  States.prototype.filterProperties = function(propeties) {
    var newPropertyObj;
    newPropertyObj = {};
    propeties.map((function(_this) {
      return function(k) {
        if (acceptedModelProperties.includes(k)) {
          return newPropertyObj[k] = _this.model[k];
        }
      };
    })(this));
    return newPropertyObj;
  };

  States.define('current', {
    get: function() {
      return this.states.current;
    },
    set: function(state) {
      this.states.previous = this.states.current;
      return this.states.current = state;
    }
  });

  States.define('previous', {
    get: function() {
      return this.states.previous;
    }
  });

  return States;

})(BaseClass);


},{"./_BaseClass.coffee":"form/_BaseClass"}],"form/lib/ColladaLoader":[function(require,module,exports){
/**
 * @author mrdoob / http://mrdoob.com/
 * @author Mugen87 / https://github.com/Mugen87
 */

THREE.ColladaLoader = function ( manager ) {
    
        this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
    
    };
    
    THREE.ColladaLoader.prototype = {
    
        constructor: THREE.ColladaLoader,
    
        crossOrigin: 'Anonymous',
    
        load: function ( url, onLoad, onProgress, onError ) {
    
            var scope = this;
    
            var path = scope.path === undefined ? THREE.LoaderUtils.extractUrlBase( url ) : scope.path;
    
            var loader = new THREE.FileLoader( scope.manager );
            loader.load( url, function ( text ) {
    
                onLoad( scope.parse( text, path ) );
    
            }, onProgress, onError );
    
        },
    
        setPath: function ( value ) {
    
            this.path = value;
    
        },
    
        options: {
    
            set convertUpAxis( value ) {
    
                console.warn( 'THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.' );
    
            }
    
        },
    
        setCrossOrigin: function ( value ) {
    
            this.crossOrigin = value;
    
        },
    
        parse: function ( text, path ) {
    
            function getElementsByTagName( xml, name ) {
    
                // Non recursive xml.getElementsByTagName() ...
    
                var array = [];
                var childNodes = xml.childNodes;
    
                for ( var i = 0, l = childNodes.length; i < l; i ++ ) {
    
                    var child = childNodes[ i ];
    
                    if ( child.nodeName === name ) {
    
                        array.push( child );
    
                    }
    
                }
    
                return array;
    
            }
    
            function parseStrings( text ) {
    
                if ( text.length === 0 ) return [];
    
                var parts = text.trim().split( /\s+/ );
                var array = new Array( parts.length );
    
                for ( var i = 0, l = parts.length; i < l; i ++ ) {
    
                    array[ i ] = parts[ i ];
    
                }
    
                return array;
    
            }
    
            function parseFloats( text ) {
    
                if ( text.length === 0 ) return [];
    
                var parts = text.trim().split( /\s+/ );
                var array = new Array( parts.length );
    
                for ( var i = 0, l = parts.length; i < l; i ++ ) {
    
                    array[ i ] = parseFloat( parts[ i ] );
    
                }
    
                return array;
    
            }
    
            function parseInts( text ) {
    
                if ( text.length === 0 ) return [];
    
                var parts = text.trim().split( /\s+/ );
                var array = new Array( parts.length );
    
                for ( var i = 0, l = parts.length; i < l; i ++ ) {
    
                    array[ i ] = parseInt( parts[ i ] );
    
                }
    
                return array;
    
            }
    
            function parseId( text ) {
    
                return text.substring( 1 );
    
            }
    
            function generateId() {
    
                return 'three_default_' + ( count ++ );
    
            }
    
            function isEmpty( object ) {
    
                return Object.keys( object ).length === 0;
    
            }
    
            // asset
    
            function parseAsset( xml ) {
    
                return {
                    unit: parseAssetUnit( getElementsByTagName( xml, 'unit' )[ 0 ] ),
                    upAxis: parseAssetUpAxis( getElementsByTagName( xml, 'up_axis' )[ 0 ] )
                };
    
            }
    
            function parseAssetUnit( xml ) {
    
                return xml !== undefined ? parseFloat( xml.getAttribute( 'meter' ) ) : 1;
    
            }
    
            function parseAssetUpAxis( xml ) {
    
                return xml !== undefined ? xml.textContent : 'Y_UP';
    
            }
    
            // library
    
            function parseLibrary( xml, libraryName, nodeName, parser ) {
    
                var library = getElementsByTagName( xml, libraryName )[ 0 ];
    
                if ( library !== undefined ) {
    
                    var elements = getElementsByTagName( library, nodeName );
    
                    for ( var i = 0; i < elements.length; i ++ ) {
    
                        parser( elements[ i ] );
    
                    }
    
                }
    
            }
    
            function buildLibrary( data, builder ) {
    
                for ( var name in data ) {
    
                    var object = data[ name ];
                    object.build = builder( data[ name ] );
    
                }
    
            }
    
            // get
    
            function getBuild( data, builder ) {
    
                if ( data.build !== undefined ) return data.build;
    
                data.build = builder( data );
    
                return data.build;
    
            }
    
            // animation
    
            function parseAnimation( xml ) {
    
                var data = {
                    sources: {},
                    samplers: {},
                    channels: {}
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    var id;
    
                    switch ( child.nodeName ) {
    
                        case 'source':
                            id = child.getAttribute( 'id' );
                            data.sources[ id ] = parseSource( child );
                            break;
    
                        case 'sampler':
                            id = child.getAttribute( 'id' );
                            data.samplers[ id ] = parseAnimationSampler( child );
                            break;
    
                        case 'channel':
                            id = child.getAttribute( 'target' );
                            data.channels[ id ] = parseAnimationChannel( child );
                            break;
    
                        default:
                            console.log( child );
    
                    }
    
                }
    
                library.animations[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function parseAnimationSampler( xml ) {
    
                var data = {
                    inputs: {},
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'input':
                            var id = parseId( child.getAttribute( 'source' ) );
                            var semantic = child.getAttribute( 'semantic' );
                            data.inputs[ semantic ] = id;
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseAnimationChannel( xml ) {
    
                var data = {};
    
                var target = xml.getAttribute( 'target' );
    
                // parsing SID Addressing Syntax
    
                var parts = target.split( '/' );
    
                var id = parts.shift();
                var sid = parts.shift();
    
                // check selection syntax
    
                var arraySyntax = ( sid.indexOf( '(' ) !== - 1 );
                var memberSyntax = ( sid.indexOf( '.' ) !== - 1 );
    
                if ( memberSyntax ) {
    
                    //  member selection access
    
                    parts = sid.split( '.' );
                    sid = parts.shift();
                    data.member = parts.shift();
    
                } else if ( arraySyntax ) {
    
                    // array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.
    
                    var indices = sid.split( '(' );
                    sid = indices.shift();
    
                    for ( var i = 0; i < indices.length; i ++ ) {
    
                        indices[ i ] = parseInt( indices[ i ].replace( /\)/, '' ) );
    
                    }
    
                    data.indices = indices;
    
                }
    
                data.id = id;
                data.sid = sid;
    
                data.arraySyntax = arraySyntax;
                data.memberSyntax = memberSyntax;
    
                data.sampler = parseId( xml.getAttribute( 'source' ) );
    
                return data;
    
            }
    
            function buildAnimation( data ) {
    
                var tracks = [];
    
                var channels = data.channels;
                var samplers = data.samplers;
                var sources = data.sources;
    
                for ( var target in channels ) {
    
                    if ( channels.hasOwnProperty( target ) ) {
    
                        var channel = channels[ target ];
                        var sampler = samplers[ channel.sampler ];
    
                        var inputId = sampler.inputs.INPUT;
                        var outputId = sampler.inputs.OUTPUT;
    
                        var inputSource = sources[ inputId ];
                        var outputSource = sources[ outputId ];
    
                        var animation = buildAnimationChannel( channel, inputSource, outputSource );
    
                        createKeyframeTracks( animation, tracks );
    
                    }
    
                }
    
                return tracks;
    
            }
    
            function getAnimation( id ) {
    
                return getBuild( library.animations[ id ], buildAnimation );
    
            }
    
            function buildAnimationChannel( channel, inputSource, outputSource ) {
    
                var node = library.nodes[ channel.id ];
                var object3D = getNode( node.id );
    
                var transform = node.transforms[ channel.sid ];
                var defaultMatrix = node.matrix.clone().transpose();
    
                var time, stride;
                var i, il, j, jl;
    
                var data = {};
    
                // the collada spec allows the animation of data in various ways.
                // depending on the transform type (matrix, translate, rotate, scale), we execute different logic
    
                switch ( transform ) {
    
                    case 'matrix':
    
                        for ( i = 0, il = inputSource.array.length; i < il; i ++ ) {
    
                            time = inputSource.array[ i ];
                            stride = i * outputSource.stride;
    
                            if ( data[ time ] === undefined ) data[ time ] = {};
    
                            if ( channel.arraySyntax === true ) {
    
                                var value = outputSource.array[ stride ];
                                var index = channel.indices[ 0 ] + 4 * channel.indices[ 1 ];
    
                                data[ time ][ index ] = value;
    
                            } else {
    
                                for ( j = 0, jl = outputSource.stride; j < jl; j ++ ) {
    
                                    data[ time ][ j ] = outputSource.array[ stride + j ];
    
                                }
    
                            }
    
                        }
    
                        break;
    
                    case 'translate':
                        console.warn( 'THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', transform );
                        break;
    
                    case 'rotate':
                        console.warn( 'THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', transform );
                        break;
    
                    case 'scale':
                        console.warn( 'THREE.ColladaLoader: Animation transform type "%s" not yet implemented.', transform );
                        break;
    
                }
    
                var keyframes = prepareAnimationData( data, defaultMatrix );
    
                var animation = {
                    name: object3D.uuid,
                    keyframes: keyframes
                };
    
                return animation;
    
            }
    
            function prepareAnimationData( data, defaultMatrix ) {
    
                var keyframes = [];
    
                // transfer data into a sortable array
    
                for ( var time in data ) {
    
                    keyframes.push( { time: parseFloat( time ), value: data[ time ] } );
    
                }
    
                // ensure keyframes are sorted by time
    
                keyframes.sort( ascending );
    
                // now we clean up all animation data, so we can use them for keyframe tracks
    
                for ( var i = 0; i < 16; i ++ ) {
    
                    transformAnimationData( keyframes, i, defaultMatrix.elements[ i ] );
    
                }
    
                return keyframes;
    
                // array sort function
    
                function ascending( a, b ) {
    
                    return a.time - b.time;
    
                }
    
            }
    
            var position = new THREE.Vector3();
            var scale = new THREE.Vector3();
            var quaternion = new THREE.Quaternion();
    
            function createKeyframeTracks( animation, tracks ) {
    
                var keyframes = animation.keyframes;
                var name = animation.name;
    
                var times = [];
                var positionData = [];
                var quaternionData = [];
                var scaleData = [];
    
                for ( var i = 0, l = keyframes.length; i < l; i ++ ) {
    
                    var keyframe = keyframes[ i ];
    
                    var time = keyframe.time;
                    var value = keyframe.value;
    
                    matrix.fromArray( value ).transpose();
                    matrix.decompose( position, quaternion, scale );
    
                    times.push( time );
                    positionData.push( position.x, position.y, position.z );
                    quaternionData.push( quaternion.x, quaternion.y, quaternion.z, quaternion.w );
                    scaleData.push( scale.x, scale.y, scale.z );
    
                }
    
                if ( positionData.length > 0 ) tracks.push( new THREE.VectorKeyframeTrack( name + '.position', times, positionData ) );
                if ( quaternionData.length > 0 ) tracks.push( new THREE.QuaternionKeyframeTrack( name + '.quaternion', times, quaternionData ) );
                if ( scaleData.length > 0 ) tracks.push( new THREE.VectorKeyframeTrack( name + '.scale', times, scaleData ) );
    
                return tracks;
    
            }
    
            function transformAnimationData( keyframes, property, defaultValue ) {
    
                var keyframe;
    
                var empty = true;
                var i, l;
    
                // check, if values of a property are missing in our keyframes
    
                for ( i = 0, l = keyframes.length; i < l; i ++ ) {
    
                    keyframe = keyframes[ i ];
    
                    if ( keyframe.value[ property ] === undefined ) {
    
                        keyframe.value[ property ] = null; // mark as missing
    
                    } else {
    
                        empty = false;
    
                    }
    
                }
    
                if ( empty === true ) {
    
                    // no values at all, so we set a default value
    
                    for ( i = 0, l = keyframes.length; i < l; i ++ ) {
    
                        keyframe = keyframes[ i ];
    
                        keyframe.value[ property ] = defaultValue;
    
                    }
    
                } else {
    
                    // filling gaps
    
                    createMissingKeyframes( keyframes, property );
    
                }
    
            }
    
            function createMissingKeyframes( keyframes, property ) {
    
                var prev, next;
    
                for ( var i = 0, l = keyframes.length; i < l; i ++ ) {
    
                    var keyframe = keyframes[ i ];
    
                    if ( keyframe.value[ property ] === null ) {
    
                        prev = getPrev( keyframes, i, property );
                        next = getNext( keyframes, i, property );
    
                        if ( prev === null ) {
    
                            keyframe.value[ property ] = next.value[ property ];
                            continue;
    
                        }
    
                        if ( next === null ) {
    
                            keyframe.value[ property ] = prev.value[ property ];
                            continue;
    
                        }
    
                        interpolate( keyframe, prev, next, property );
    
                    }
    
                }
    
            }
    
            function getPrev( keyframes, i, property ) {
    
                while ( i >= 0 ) {
    
                    var keyframe = keyframes[ i ];
    
                    if ( keyframe.value[ property ] !== null ) return keyframe;
    
                    i --;
    
                }
    
                return null;
    
            }
    
            function getNext( keyframes, i, property ) {
    
                while ( i < keyframes.length ) {
    
                    var keyframe = keyframes[ i ];
    
                    if ( keyframe.value[ property ] !== null ) return keyframe;
    
                    i ++;
    
                }
    
                return null;
    
            }
    
            function interpolate( key, prev, next, property ) {
    
                if ( ( next.time - prev.time ) === 0 ) {
    
                    key.value[ property ] = prev.value[ property ];
                    return;
    
                }
    
                key.value[ property ] = ( ( key.time - prev.time ) * ( next.value[ property ] - prev.value[ property ] ) / ( next.time - prev.time ) ) + prev.value[ property ];
    
            }
    
            // animation clips
    
            function parseAnimationClip( xml ) {
    
                var data = {
                    name: xml.getAttribute( 'id' ) || 'default',
                    start: parseFloat( xml.getAttribute( 'start' ) || 0 ),
                    end: parseFloat( xml.getAttribute( 'end' ) || 0 ),
                    animations: []
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'instance_animation':
                            data.animations.push( parseId( child.getAttribute( 'url' ) ) );
                            break;
    
                    }
    
                }
    
                library.clips[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function buildAnimationClip( data ) {
    
                var tracks = [];
    
                var name = data.name;
                var duration = ( data.end - data.start ) || - 1;
                var animations = data.animations;
    
                for ( var i = 0, il = animations.length; i < il; i ++ ) {
    
                    var animationTracks = getAnimation( animations[ i ] );
    
                    for ( var j = 0, jl = animationTracks.length; j < jl; j ++ ) {
    
                        tracks.push( animationTracks[ j ] );
    
                    }
    
                }
    
                return new THREE.AnimationClip( name, duration, tracks );
    
            }
    
            function getAnimationClip( id ) {
    
                return getBuild( library.clips[ id ], buildAnimationClip );
    
            }
    
            // controller
    
            function parseController( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'skin':
                            // there is exactly one skin per controller
                            data.id = parseId( child.getAttribute( 'source' ) );
                            data.skin = parseSkin( child );
                            break;
    
                        case 'morph':
                            data.id = parseId( child.getAttribute( 'source' ) );
                            console.warn( 'THREE.ColladaLoader: Morph target animation not supported yet.' );
                            break;
    
                    }
    
                }
    
                library.controllers[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function parseSkin( xml ) {
    
                var data = {
                    sources: {}
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'bind_shape_matrix':
                            data.bindShapeMatrix = parseFloats( child.textContent );
                            break;
    
                        case 'source':
                            var id = child.getAttribute( 'id' );
                            data.sources[ id ] = parseSource( child );
                            break;
    
                        case 'joints':
                            data.joints = parseJoints( child );
                            break;
    
                        case 'vertex_weights':
                            data.vertexWeights = parseVertexWeights( child );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseJoints( xml ) {
    
                var data = {
                    inputs: {}
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'input':
                            var semantic = child.getAttribute( 'semantic' );
                            var id = parseId( child.getAttribute( 'source' ) );
                            data.inputs[ semantic ] = id;
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseVertexWeights( xml ) {
    
                var data = {
                    inputs: {}
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'input':
                            var semantic = child.getAttribute( 'semantic' );
                            var id = parseId( child.getAttribute( 'source' ) );
                            var offset = parseInt( child.getAttribute( 'offset' ) );
                            data.inputs[ semantic ] = { id: id, offset: offset };
                            break;
    
                        case 'vcount':
                            data.vcount = parseInts( child.textContent );
                            break;
    
                        case 'v':
                            data.v = parseInts( child.textContent );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function buildController( data ) {
    
                var build = {
                    id: data.id
                };
    
                var geometry = library.geometries[ build.id ];
    
                if ( data.skin !== undefined ) {
    
                    build.skin = buildSkin( data.skin );
    
                    // we enhance the 'sources' property of the corresponding geometry with our skin data
    
                    geometry.sources.skinIndices = build.skin.indices;
                    geometry.sources.skinWeights = build.skin.weights;
    
                }
    
                return build;
    
            }
    
            function buildSkin( data ) {
    
                var BONE_LIMIT = 4;
    
                var build = {
                    joints: [], // this must be an array to preserve the joint order
                    indices: {
                        array: [],
                        stride: BONE_LIMIT
                    },
                    weights: {
                        array: [],
                        stride: BONE_LIMIT
                    }
                };
    
                var sources = data.sources;
                var vertexWeights = data.vertexWeights;
    
                var vcount = vertexWeights.vcount;
                var v = vertexWeights.v;
                var jointOffset = vertexWeights.inputs.JOINT.offset;
                var weightOffset = vertexWeights.inputs.WEIGHT.offset;
    
                var jointSource = data.sources[ data.joints.inputs.JOINT ];
                var inverseSource = data.sources[ data.joints.inputs.INV_BIND_MATRIX ];
    
                var weights = sources[ vertexWeights.inputs.WEIGHT.id ].array;
                var stride = 0;
    
                var i, j, l;
    
                // procces skin data for each vertex
    
                for ( i = 0, l = vcount.length; i < l; i ++ ) {
    
                    var jointCount = vcount[ i ]; // this is the amount of joints that affect a single vertex
                    var vertexSkinData = [];
    
                    for ( j = 0; j < jointCount; j ++ ) {
    
                        var skinIndex = v[ stride + jointOffset ];
                        var weightId = v[ stride + weightOffset ];
                        var skinWeight = weights[ weightId ];
    
                        vertexSkinData.push( { index: skinIndex, weight: skinWeight } );
    
                        stride += 2;
    
                    }
    
                    // we sort the joints in descending order based on the weights.
                    // this ensures, we only procced the most important joints of the vertex
    
                    vertexSkinData.sort( descending );
    
                    // now we provide for each vertex a set of four index and weight values.
                    // the order of the skin data matches the order of vertices
    
                    for ( j = 0; j < BONE_LIMIT; j ++ ) {
    
                        var d = vertexSkinData[ j ];
    
                        if ( d !== undefined ) {
    
                            build.indices.array.push( d.index );
                            build.weights.array.push( d.weight );
    
                        } else {
    
                            build.indices.array.push( 0 );
                            build.weights.array.push( 0 );
    
                        }
    
                    }
    
                }
    
                // setup bind matrix
    
                build.bindMatrix = new THREE.Matrix4().fromArray( data.bindShapeMatrix ).transpose();
    
                // process bones and inverse bind matrix data
    
                for ( i = 0, l = jointSource.array.length; i < l; i ++ ) {
    
                    var name = jointSource.array[ i ];
                    var boneInverse = new THREE.Matrix4().fromArray( inverseSource.array, i * inverseSource.stride ).transpose();
    
                    build.joints.push( { name: name, boneInverse: boneInverse } );
    
                }
    
                return build;
    
                // array sort function
    
                function descending( a, b ) {
    
                    return b.weight - a.weight;
    
                }
    
            }
    
            function getController( id ) {
    
                return getBuild( library.controllers[ id ], buildController );
    
            }
    
            // image
    
            function parseImage( xml ) {
    
                var data = {
                    init_from: getElementsByTagName( xml, 'init_from' )[ 0 ].textContent
                };
    
                library.images[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function buildImage( data ) {
    
                if ( data.build !== undefined ) return data.build;
    
                return data.init_from;
    
            }
    
            function getImage( id ) {
    
                return getBuild( library.images[ id ], buildImage );
    
            }
    
            // effect
    
            function parseEffect( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'profile_COMMON':
                            data.profile = parseEffectProfileCOMMON( child );
                            break;
    
                    }
    
                }
    
                library.effects[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function parseEffectProfileCOMMON( xml ) {
    
                var data = {
                    surfaces: {},
                    samplers: {}
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'newparam':
                            parseEffectNewparam( child, data );
                            break;
    
                        case 'technique':
                            data.technique = parseEffectTechnique( child );
                            break;
    
                        case 'extra':
                            data.extra = parseEffectExtra( child );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseEffectNewparam( xml, data ) {
    
                var sid = xml.getAttribute( 'sid' );
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'surface':
                            data.surfaces[ sid ] = parseEffectSurface( child );
                            break;
    
                        case 'sampler2D':
                            data.samplers[ sid ] = parseEffectSampler( child );
                            break;
    
                    }
    
                }
    
            }
    
            function parseEffectSurface( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'init_from':
                            data.init_from = child.textContent;
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseEffectSampler( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'source':
                            data.source = child.textContent;
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseEffectTechnique( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'constant':
                        case 'lambert':
                        case 'blinn':
                        case 'phong':
                            data.type = child.nodeName;
                            data.parameters = parseEffectParameters( child );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseEffectParameters( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'emission':
                        case 'diffuse':
                        case 'specular':
                        case 'shininess':
                        case 'transparency':
                            data[ child.nodeName ] = parseEffectParameter( child );
                            break;
                        case 'transparent':
                            data[ child.nodeName ] = {
                                opaque: child.getAttribute( 'opaque' ),
                                data: parseEffectParameter( child )
                            };
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseEffectParameter( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'color':
                            data[ child.nodeName ] = parseFloats( child.textContent );
                            break;
    
                        case 'float':
                            data[ child.nodeName ] = parseFloat( child.textContent );
                            break;
    
                        case 'texture':
                            data[ child.nodeName ] = { id: child.getAttribute( 'texture' ), extra: parseEffectParameterTexture( child ) };
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseEffectParameterTexture( xml ) {
    
                var data = {
                    technique: {}
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'extra':
                            parseEffectParameterTextureExtra( child, data );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseEffectParameterTextureExtra( xml, data ) {
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'technique':
                            parseEffectParameterTextureExtraTechnique( child, data );
                            break;
    
                    }
    
                }
    
            }
    
            function parseEffectParameterTextureExtraTechnique( xml, data ) {
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'repeatU':
                        case 'repeatV':
                        case 'offsetU':
                        case 'offsetV':
                            data.technique[ child.nodeName ] = parseFloat( child.textContent );
                            break;
    
                        case 'wrapU':
                        case 'wrapV':
    
                            // some files have values for wrapU/wrapV which become NaN via parseInt
    
                            if ( child.textContent.toUpperCase() === 'TRUE' ) {
    
                                data.technique[ child.nodeName ] = 1;
    
                            } else if ( child.textContent.toUpperCase() === 'FALSE' ) {
    
                                data.technique[ child.nodeName ] = 0;
    
                            } else {
    
                                data.technique[ child.nodeName ] = parseInt( child.textContent );
    
                            }
    
                            break;
    
                    }
    
                }
    
            }
    
            function parseEffectExtra( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'technique':
                            data.technique = parseEffectExtraTechnique( child );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseEffectExtraTechnique( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'double_sided':
                            data[ child.nodeName ] = parseInt( child.textContent );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function buildEffect( data ) {
    
                return data;
    
            }
    
            function getEffect( id ) {
    
                return getBuild( library.effects[ id ], buildEffect );
    
            }
    
            // material
    
            function parseMaterial( xml ) {
    
                var data = {
                    name: xml.getAttribute( 'name' )
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'instance_effect':
                            data.url = parseId( child.getAttribute( 'url' ) );
                            break;
    
                    }
    
                }
    
                library.materials[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function buildMaterial( data ) {
    
                var effect = getEffect( data.url );
                var technique = effect.profile.technique;
                var extra = effect.profile.extra;
    
                var material;
    
                switch ( technique.type ) {
    
                    case 'phong':
                    case 'blinn':
                        material = new THREE.MeshPhongMaterial();
                        break;
    
                    case 'lambert':
                        material = new THREE.MeshLambertMaterial();
                        break;
    
                    default:
                        material = new THREE.MeshBasicMaterial();
                        break;
    
                }
    
                material.name = data.name;
    
                function getTexture( textureObject ) {
    
                    var sampler = effect.profile.samplers[ textureObject.id ];
                    var image;
    
                    // get image
    
                    if ( sampler !== undefined ) {
    
                        var surface = effect.profile.surfaces[ sampler.source ];
                        image = getImage( surface.init_from );
    
                    } else {
    
                        console.warn( 'THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).' );
                        image = getImage( textureObject.id );
    
                    }
    
                    // create texture if image is avaiable
    
                    if ( image !== undefined ) {
    
                        var texture = textureLoader.load( image );
    
                        var extra = textureObject.extra;
    
                        if ( extra !== undefined && extra.technique !== undefined && isEmpty( extra.technique ) === false ) {
    
                            var technique = extra.technique;
    
                            texture.wrapS = technique.wrapU ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
                            texture.wrapT = technique.wrapV ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
    
                            texture.offset.set( technique.offsetU || 0, technique.offsetV || 0 );
                            texture.repeat.set( technique.repeatU || 1, technique.repeatV || 1 );
    
                        } else {
    
                            texture.wrapS = THREE.RepeatWrapping;
                            texture.wrapT = THREE.RepeatWrapping;
    
                        }
    
                        return texture;
    
                    } else {
    
                        console.error( 'THREE.ColladaLoader: Unable to load texture with ID:', textureObject.id );
    
                        return null;
    
                    }
    
                }
    
                var parameters = technique.parameters;
    
                for ( var key in parameters ) {
    
                    var parameter = parameters[ key ];
    
                    switch ( key ) {
    
                        case 'diffuse':
                            if ( parameter.color ) material.color.fromArray( parameter.color );
                            if ( parameter.texture ) material.map = getTexture( parameter.texture );
                            break;
                        case 'specular':
                            if ( parameter.color && material.specular ) material.specular.fromArray( parameter.color );
                            if ( parameter.texture ) material.specularMap = getTexture( parameter.texture );
                            break;
                        case 'shininess':
                            if ( parameter.float && material.shininess )
                                material.shininess = parameter.float;
                            break;
                        case 'emission':
                            if ( parameter.color && material.emissive )
                                material.emissive.fromArray( parameter.color );
                            break;
    
                    }
    
                }
    
                //
    
                var transparent = parameters[ 'transparent' ];
                var transparency = parameters[ 'transparency' ];
    
                // <transparency> does not exist but <transparent>
    
                if ( transparency === undefined && transparent ) {
    
                    transparency = {
                        float: 1
                    };
    
                }
    
                // <transparent> does not exist but <transparency>
    
                if ( transparent === undefined && transparency ) {
    
                    transparent = {
                        opaque: 'A_ONE',
                        data: {
                            color: [ 1, 1, 1, 1 ]
                        } };
    
                }
    
                if ( transparent && transparency ) {
    
                    // handle case if a texture exists but no color
    
                    if ( transparent.data.texture ) {
    
                        material.alphaMap = getTexture( transparent.data.texture );
                        material.transparent = true;
    
                    } else {
    
                        var color = transparent.data.color;
    
                        switch ( transparent.opaque ) {
    
                            case 'A_ONE':
                                material.opacity = color[ 3 ] * transparency.float;
                                break;
                            case 'RGB_ZERO':
                                material.opacity = 1 - ( color[ 0 ] * transparency.float );
                                break;
                            case 'A_ZERO':
                                material.opacity = 1 - ( color[ 3 ] * transparency.float );
                                break;
                            case 'RGB_ONE':
                                material.opacity = color[ 0 ] * transparency.float;
                                break;
                            default:
                                console.warn( 'THREE.ColladaLoader: Invalid opaque type "%s" of transparent tag.', transparent.opaque );
    
                        }
    
                        if ( material.opacity < 1 ) material.transparent = true;
    
                    }
    
                }
    
                //
    
                if ( extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1 ) {
    
                    material.side = THREE.DoubleSide;
    
                }
    
                return material;
    
            }
    
            function getMaterial( id ) {
    
                return getBuild( library.materials[ id ], buildMaterial );
    
            }
    
            // camera
    
            function parseCamera( xml ) {
    
                var data = {
                    name: xml.getAttribute( 'name' )
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'optics':
                            data.optics = parseCameraOptics( child );
                            break;
    
                    }
    
                }
    
                library.cameras[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function parseCameraOptics( xml ) {
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    switch ( child.nodeName ) {
    
                        case 'technique_common':
                            return parseCameraTechnique( child );
    
                    }
    
                }
    
                return {};
    
            }
    
            function parseCameraTechnique( xml ) {
    
                var data = {};
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    switch ( child.nodeName ) {
    
                        case 'perspective':
                        case 'orthographic':
    
                            data.technique = child.nodeName;
                            data.parameters = parseCameraParameters( child );
    
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseCameraParameters( xml ) {
    
                var data = {};
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    switch ( child.nodeName ) {
    
                        case 'xfov':
                        case 'yfov':
                        case 'xmag':
                        case 'ymag':
                        case 'znear':
                        case 'zfar':
                        case 'aspect_ratio':
                            data[ child.nodeName ] = parseFloat( child.textContent );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function buildCamera( data ) {
    
                var camera;
    
                switch ( data.optics.technique ) {
    
                    case 'perspective':
                        camera = new THREE.PerspectiveCamera(
                            data.optics.parameters.yfov,
                            data.optics.parameters.aspect_ratio,
                            data.optics.parameters.znear,
                            data.optics.parameters.zfar
                        );
                        break;
    
                    case 'orthographic':
                        var ymag = data.optics.parameters.ymag;
                        var xmag = data.optics.parameters.xmag;
                        var aspectRatio = data.optics.parameters.aspect_ratio;
    
                        xmag = ( xmag === undefined ) ? ( ymag * aspectRatio ) : xmag;
                        ymag = ( ymag === undefined ) ? ( xmag / aspectRatio ) : ymag;
    
                        xmag *= 0.5;
                        ymag *= 0.5;
    
                        camera = new THREE.OrthographicCamera(
                            - xmag, xmag, ymag, - ymag, // left, right, top, bottom
                            data.optics.parameters.znear,
                            data.optics.parameters.zfar
                        );
                        break;
    
                    default:
                        camera = new THREE.PerspectiveCamera();
                        break;
    
                }
    
                camera.name = data.name;
    
                return camera;
    
            }
    
            function getCamera( id ) {
    
                var data = library.cameras[ id ];
    
                if ( data !== undefined ) {
    
                    return getBuild( data, buildCamera );
    
                }
    
                console.warn( 'THREE.ColladaLoader: Couldn\'t find camera with ID:', id );
    
                return null;
    
            }
    
            // light
    
            function parseLight( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'technique_common':
                            data = parseLightTechnique( child );
                            break;
    
                    }
    
                }
    
                library.lights[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function parseLightTechnique( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'directional':
                        case 'point':
                        case 'spot':
                        case 'ambient':
    
                            data.technique = child.nodeName;
                            data.parameters = parseLightParameters( child );
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseLightParameters( xml ) {
    
                var data = {};
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'color':
                            var array = parseFloats( child.textContent );
                            data.color = new THREE.Color().fromArray( array );
                            break;
    
                        case 'falloff_angle':
                            data.falloffAngle = parseFloat( child.textContent );
                            break;
    
                        case 'quadratic_attenuation':
                            var f = parseFloat( child.textContent );
                            data.distance = f ? Math.sqrt( 1 / f ) : 0;
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function buildLight( data ) {
    
                var light;
    
                switch ( data.technique ) {
    
                    case 'directional':
                        light = new THREE.DirectionalLight();
                        break;
    
                    case 'point':
                        light = new THREE.PointLight();
                        break;
    
                    case 'spot':
                        light = new THREE.SpotLight();
                        break;
    
                    case 'ambient':
                        light = new THREE.AmbientLight();
                        break;
    
                }
    
                if ( data.parameters.color ) light.color.copy( data.parameters.color );
                if ( data.parameters.distance ) light.distance = data.parameters.distance;
    
                return light;
    
            }
    
            function getLight( id ) {
    
                var data = library.lights[ id ];
    
                if ( data !== undefined ) {
    
                    return getBuild( data, buildLight );
    
                }
    
                console.warn( 'THREE.ColladaLoader: Couldn\'t find light with ID:', id );
    
                return null;
    
            }
    
            // geometry
    
            function parseGeometry( xml ) {
    
                var data = {
                    name: xml.getAttribute( 'name' ),
                    sources: {},
                    vertices: {},
                    primitives: []
                };
    
                var mesh = getElementsByTagName( xml, 'mesh' )[ 0 ];
    
                // the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep
                if ( mesh === undefined ) return;
    
                for ( var i = 0; i < mesh.childNodes.length; i ++ ) {
    
                    var child = mesh.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    var id = child.getAttribute( 'id' );
    
                    switch ( child.nodeName ) {
    
                        case 'source':
                            data.sources[ id ] = parseSource( child );
                            break;
    
                        case 'vertices':
                            // data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];
                            data.vertices = parseGeometryVertices( child );
                            break;
    
                        case 'polygons':
                            console.warn( 'THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName );
                            break;
    
                        case 'lines':
                        case 'linestrips':
                        case 'polylist':
                        case 'triangles':
                            data.primitives.push( parseGeometryPrimitive( child ) );
                            break;
    
                        default:
                            console.log( child );
    
                    }
    
                }
    
                library.geometries[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function parseSource( xml ) {
    
                var data = {
                    array: [],
                    stride: 3
                };
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'float_array':
                            data.array = parseFloats( child.textContent );
                            break;
    
                        case 'Name_array':
                            data.array = parseStrings( child.textContent );
                            break;
    
                        case 'technique_common':
                            var accessor = getElementsByTagName( child, 'accessor' )[ 0 ];
    
                            if ( accessor !== undefined ) {
    
                                data.stride = parseInt( accessor.getAttribute( 'stride' ) );
    
                            }
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseGeometryVertices( xml ) {
    
                var data = {};
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    data[ child.getAttribute( 'semantic' ) ] = parseId( child.getAttribute( 'source' ) );
    
                }
    
                return data;
    
            }
    
            function parseGeometryPrimitive( xml ) {
    
                var primitive = {
                    type: xml.nodeName,
                    material: xml.getAttribute( 'material' ),
                    count: parseInt( xml.getAttribute( 'count' ) ),
                    inputs: {},
                    stride: 0
                };
    
                for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'input':
                            var id = parseId( child.getAttribute( 'source' ) );
                            var semantic = child.getAttribute( 'semantic' );
                            var offset = parseInt( child.getAttribute( 'offset' ) );
                            primitive.inputs[ semantic ] = { id: id, offset: offset };
                            primitive.stride = Math.max( primitive.stride, offset + 1 );
                            break;
    
                        case 'vcount':
                            primitive.vcount = parseInts( child.textContent );
                            break;
    
                        case 'p':
                            primitive.p = parseInts( child.textContent );
                            break;
    
                    }
    
                }
    
                return primitive;
    
            }
    
            function groupPrimitives( primitives ) {
    
                var build = {};
    
                for ( var i = 0; i < primitives.length; i ++ ) {
    
                    var primitive = primitives[ i ];
    
                    if ( build[ primitive.type ] === undefined ) build[ primitive.type ] = [];
    
                    build[ primitive.type ].push( primitive );
    
                }
    
                return build;
    
            }
    
            function buildGeometry( data ) {
    
                var build = {};
    
                var sources = data.sources;
                var vertices = data.vertices;
                var primitives = data.primitives;
    
                if ( primitives.length === 0 ) return {};
    
                // our goal is to create one buffer geoemtry for a single type of primitives
                // first, we group all primitives by their type
    
                var groupedPrimitives = groupPrimitives( primitives );
    
                for ( var type in groupedPrimitives ) {
    
                    // second, we create for each type of primitives (polylist,triangles or lines) a buffer geometry
    
                    build[ type ] = buildGeometryType( groupedPrimitives[ type ], sources, vertices );
    
                }
    
                return build;
    
            }
    
            function buildGeometryType( primitives, sources, vertices ) {
    
                var build = {};
    
                var position = { array: [], stride: 0 };
                var normal = { array: [], stride: 0 };
                var uv = { array: [], stride: 0 };
                var color = { array: [], stride: 0 };
    
                var skinIndex = { array: [], stride: 4 };
                var skinWeight = { array: [], stride: 4 };
    
                var geometry = new THREE.BufferGeometry();
    
                var materialKeys = [];
    
                var start = 0, count = 0;
    
                for ( var p = 0; p < primitives.length; p ++ ) {
    
                    var primitive = primitives[ p ];
                    var inputs = primitive.inputs;
                    var triangleCount = 1;
    
                    if ( primitive.vcount && primitive.vcount[ 0 ] === 4 ) {
    
                        triangleCount = 2; // one quad -> two triangles
    
                    }
    
                    // groups
    
                    if ( primitive.type === 'lines' || primitive.type === 'linestrips' ) {
    
                        count = primitive.count * 2;
    
                    } else {
    
                        count = primitive.count * 3 * triangleCount;
    
                    }
    
                    geometry.addGroup( start, count, p );
                    start += count;
    
                    // material
    
                    if ( primitive.material ) {
    
                        materialKeys.push( primitive.material );
    
                    }
    
                    // geometry data
    
                    for ( var name in inputs ) {
    
                        var input = inputs[ name ];
    
                        switch ( name )	{
    
                            case 'VERTEX':
                                for ( var key in vertices ) {
    
                                    var id = vertices[ key ];
    
                                    switch ( key ) {
    
                                        case 'POSITION':
                                            buildGeometryData( primitive, sources[ id ], input.offset, position.array );
                                            position.stride = sources[ id ].stride;
    
                                            if ( sources.skinWeights && sources.skinIndices ) {
    
                                                buildGeometryData( primitive, sources.skinIndices, input.offset, skinIndex.array );
                                                buildGeometryData( primitive, sources.skinWeights, input.offset, skinWeight.array );
    
                                            }
                                            break;
    
                                        case 'NORMAL':
                                            buildGeometryData( primitive, sources[ id ], input.offset, normal.array );
                                            normal.stride = sources[ id ].stride;
                                            break;
    
                                        case 'COLOR':
                                            buildGeometryData( primitive, sources[ id ], input.offset, color.array );
                                            color.stride = sources[ id ].stride;
                                            break;
    
                                        case 'TEXCOORD':
                                            buildGeometryData( primitive, sources[ id ], input.offset, uv.array );
                                            uv.stride = sources[ id ].stride;
                                            break;
    
                                        default:
                                            console.warn( 'THREE.ColladaLoader: Semantic "%s" not handled in geometry build process.', key );
    
                                    }
    
                                }
                                break;
    
                            case 'NORMAL':
                                buildGeometryData( primitive, sources[ input.id ], input.offset, normal.array );
                                normal.stride = sources[ input.id ].stride;
                                break;
    
                            case 'COLOR':
                                buildGeometryData( primitive, sources[ input.id ], input.offset, color.array );
                                color.stride = sources[ input.id ].stride;
                                break;
    
                            case 'TEXCOORD':
                                buildGeometryData( primitive, sources[ input.id ], input.offset, uv.array );
                                uv.stride = sources[ input.id ].stride;
                                break;
    
                        }
    
                    }
    
                }
    
                // build geometry
    
                if ( position.array.length > 0 ) geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( position.array, position.stride ) );
                if ( normal.array.length > 0 ) geometry.addAttribute( 'normal', new THREE.Float32BufferAttribute( normal.array, normal.stride ) );
                if ( color.array.length > 0 ) geometry.addAttribute( 'color', new THREE.Float32BufferAttribute( color.array, color.stride ) );
                if ( uv.array.length > 0 ) geometry.addAttribute( 'uv', new THREE.Float32BufferAttribute( uv.array, uv.stride ) );
    
                if ( skinIndex.array.length > 0 ) geometry.addAttribute( 'skinIndex', new THREE.Float32BufferAttribute( skinIndex.array, skinIndex.stride ) );
                if ( skinWeight.array.length > 0 ) geometry.addAttribute( 'skinWeight', new THREE.Float32BufferAttribute( skinWeight.array, skinWeight.stride ) );
    
                build.data = geometry;
                build.type = primitives[ 0 ].type;
                build.materialKeys = materialKeys;
    
                return build;
    
            }
    
            function buildGeometryData( primitive, source, offset, array ) {
    
                var indices = primitive.p;
                var stride = primitive.stride;
                var vcount = primitive.vcount;
    
                function pushVector( i ) {
    
                    var index = indices[ i + offset ] * sourceStride;
                    var length = index + sourceStride;
    
                    for ( ; index < length; index ++ ) {
    
                        array.push( sourceArray[ index ] );
    
                    }
    
                }
    
                var maxcount = 0;
    
                var sourceArray = source.array;
                var sourceStride = source.stride;
    
                if ( primitive.vcount !== undefined ) {
    
                    var index = 0;
    
                    for ( var i = 0, l = vcount.length; i < l; i ++ ) {
    
                        var count = vcount[ i ];
    
                        if ( count === 4 ) {
    
                            var a = index + stride * 0;
                            var b = index + stride * 1;
                            var c = index + stride * 2;
                            var d = index + stride * 3;
    
                            pushVector( a ); pushVector( b ); pushVector( d );
                            pushVector( b ); pushVector( c ); pushVector( d );
    
                        } else if ( count === 3 ) {
    
                            var a = index + stride * 0;
                            var b = index + stride * 1;
                            var c = index + stride * 2;
    
                            pushVector( a ); pushVector( b ); pushVector( c );
    
                        } else {
    
                            maxcount = Math.max( maxcount, count );
    
                        }
    
                        index += stride * count;
    
                    }
    
                    if ( maxcount > 0 ) {
    
                        console.log( 'THREE.ColladaLoader: Geometry has faces with more than 4 vertices.' );
    
                    }
    
                } else {
    
                    for ( var i = 0, l = indices.length; i < l; i += stride ) {
    
                        pushVector( i );
    
                    }
    
                }
    
            }
    
            function getGeometry( id ) {
    
                return getBuild( library.geometries[ id ], buildGeometry );
    
            }
    
            // kinematics
    
            function parseKinematicsModel( xml ) {
    
                var data = {
                    name: xml.getAttribute( 'name' ) || '',
                    joints: {},
                    links: []
                };
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'technique_common':
                            parseKinematicsTechniqueCommon( child, data );
                            break;
    
                    }
    
                }
    
                library.kinematicsModels[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function buildKinematicsModel( data ) {
    
                if ( data.build !== undefined ) return data.build;
    
                return data;
    
            }
    
            function getKinematicsModel( id ) {
    
                return getBuild( library.kinematicsModels[ id ], buildKinematicsModel );
    
            }
    
            function parseKinematicsTechniqueCommon( xml, data ) {
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'joint':
                            data.joints[ child.getAttribute( 'sid' ) ] = parseKinematicsJoint( child );
                            break;
    
                        case 'link':
                            data.links.push( parseKinematicsLink( child ) );
                            break;
    
                    }
    
                }
    
            }
    
            function parseKinematicsJoint( xml ) {
    
                var data;
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'prismatic':
                        case 'revolute':
                            data = parseKinematicsJointParameter( child );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseKinematicsJointParameter( xml, data ) {
    
                var data = {
                    sid: xml.getAttribute( 'sid' ),
                    name: xml.getAttribute( 'name' ) || '',
                    axis: new THREE.Vector3(),
                    limits: {
                        min: 0,
                        max: 0
                    },
                    type: xml.nodeName,
                    static: false,
                    zeroPosition: 0,
                    middlePosition: 0
                };
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'axis':
                            var array = parseFloats( child.textContent );
                            data.axis.fromArray( array );
                            break;
                        case 'limits':
                            var max = child.getElementsByTagName( 'max' )[ 0 ];
                            var min = child.getElementsByTagName( 'min' )[ 0 ];
    
                            data.limits.max = parseFloat( max.textContent );
                            data.limits.min = parseFloat( min.textContent );
                            break;
    
                    }
    
                }
    
                // if min is equal to or greater than max, consider the joint static
    
                if ( data.limits.min >= data.limits.max ) {
    
                    data.static = true;
    
                }
    
                // calculate middle position
    
                data.middlePosition = ( data.limits.min + data.limits.max ) / 2.0;
    
                return data;
    
            }
    
            function parseKinematicsLink( xml ) {
    
                var data = {
                    sid: xml.getAttribute( 'sid' ),
                    name: xml.getAttribute( 'name' ) || '',
                    attachments: [],
                    transforms: []
                };
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'attachment_full':
                            data.attachments.push( parseKinematicsAttachment( child ) );
                            break;
    
                        case 'matrix':
                        case 'translate':
                        case 'rotate':
                            data.transforms.push( parseKinematicsTransform( child ) );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseKinematicsAttachment( xml ) {
    
                var data = {
                    joint: xml.getAttribute( 'joint' ).split( '/' ).pop(),
                    transforms: [],
                    links: []
                };
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'link':
                            data.links.push( parseKinematicsLink( child ) );
                            break;
    
                        case 'matrix':
                        case 'translate':
                        case 'rotate':
                            data.transforms.push( parseKinematicsTransform( child ) );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function parseKinematicsTransform( xml ) {
    
                var data = {
                    type: xml.nodeName
                };
    
                var array = parseFloats( xml.textContent );
    
                switch ( data.type ) {
    
                    case 'matrix':
                        data.obj = new THREE.Matrix4();
                        data.obj.fromArray( array ).transpose();
                        break;
    
                    case 'translate':
                        data.obj = new THREE.Vector3();
                        data.obj.fromArray( array );
                        break;
    
                    case 'rotate':
                        data.obj = new THREE.Vector3();
                        data.obj.fromArray( array );
                        data.angle = THREE.Math.degToRad( array[ 3 ] );
                        break;
    
                }
    
                return data;
    
            }
    
            function parseKinematicsScene( xml ) {
    
                var data = {
                    bindJointAxis: []
                };
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'bind_joint_axis':
                            data.bindJointAxis.push( parseKinematicsBindJointAxis( child ) );
                            break;
    
                    }
    
                }
    
                library.kinematicsScenes[ parseId( xml.getAttribute( 'url' ) ) ] = data;
    
            }
    
            function parseKinematicsBindJointAxis( xml ) {
    
                var data = {
                    target: xml.getAttribute( 'target' ).split( '/' ).pop()
                };
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'axis':
                            var param = child.getElementsByTagName( 'param' )[ 0 ];
                            data.axis = param.textContent;
                            var tmpJointIndex = data.axis.split( 'inst_' ).pop().split( 'axis' )[ 0 ];
                            data.jointIndex = tmpJointIndex.substr( 0, tmpJointIndex.length - 1 );
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function buildKinematicsScene( data ) {
    
                if ( data.build !== undefined ) return data.build;
    
                return data;
    
            }
    
            function getKinematicsScene( id ) {
    
                return getBuild( library.kinematicsScenes[ id ], buildKinematicsScene );
    
            }
    
            function setupKinematics() {
    
                var kinematicsModelId = Object.keys( library.kinematicsModels )[ 0 ];
                var kinematicsSceneId = Object.keys( library.kinematicsScenes )[ 0 ];
                var visualSceneId = Object.keys( library.visualScenes )[ 0 ];
    
                if ( kinematicsModelId === undefined || kinematicsSceneId === undefined ) return;
    
                var kinematicsModel = getKinematicsModel( kinematicsModelId );
                var kinematicsScene = getKinematicsScene( kinematicsSceneId );
                var visualScene = getVisualScene( visualSceneId );
    
                var bindJointAxis = kinematicsScene.bindJointAxis;
                var jointMap = {};
    
                for ( var i = 0, l = bindJointAxis.length; i < l; i ++ ) {
    
                    var axis = bindJointAxis[ i ];
    
                    // the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'
    
                    var targetElement = collada.querySelector( '[sid="' + axis.target + '"]' );
    
                    if ( targetElement ) {
    
                        // get the parent of the transfrom element
    
                        var parentVisualElement = targetElement.parentElement;
    
                        // connect the joint of the kinematics model with the element in the visual scene
    
                        connect( axis.jointIndex, parentVisualElement );
    
                    }
    
                }
    
                function connect( jointIndex, visualElement ) {
    
                    var visualElementName = visualElement.getAttribute( 'name' );
                    var joint = kinematicsModel.joints[ jointIndex ];
    
                    visualScene.traverse( function ( object ) {
    
                        if ( object.name === visualElementName ) {
    
                            jointMap[ jointIndex ] = {
                                object: object,
                                transforms: buildTransformList( visualElement ),
                                joint: joint,
                                position: joint.zeroPosition
                            };
    
                        }
    
                    } );
    
                }
    
                var m0 = new THREE.Matrix4();
    
                kinematics = {
    
                    joints: kinematicsModel && kinematicsModel.joints,
    
                    getJointValue: function ( jointIndex ) {
    
                        var jointData = jointMap[ jointIndex ];
    
                        if ( jointData ) {
    
                            return jointData.position;
    
                        } else {
    
                            console.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' doesn\'t exist.' );
    
                        }
    
                    },
    
                    setJointValue: function ( jointIndex, value ) {
    
                        var jointData = jointMap[ jointIndex ];
    
                        if ( jointData ) {
    
                            var joint = jointData.joint;
    
                            if ( value > joint.limits.max || value < joint.limits.min ) {
    
                                console.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').' );
    
                            } else if ( joint.static ) {
    
                                console.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' is static.' );
    
                            } else {
    
                                var object = jointData.object;
                                var axis = joint.axis;
                                var transforms = jointData.transforms;
    
                                matrix.identity();
    
                                // each update, we have to apply all transforms in the correct order
    
                                for ( var i = 0; i < transforms.length; i ++ ) {
    
                                    var transform = transforms[ i ];
    
                                    // if there is a connection of the transform node with a joint, apply the joint value
    
                                    if ( transform.sid && transform.sid.indexOf( jointIndex ) !== - 1 ) {
    
                                        switch ( joint.type ) {
    
                                            case 'revolute':
                                                matrix.multiply( m0.makeRotationAxis( axis, THREE.Math.degToRad( value ) ) );
                                                break;
    
                                            case 'prismatic':
                                                matrix.multiply( m0.makeTranslation( axis.x * value, axis.y * value, axis.z * value ) );
                                                break;
    
                                            default:
                                                console.warn( 'THREE.ColladaLoader: Unknown joint type: ' + joint.type );
                                                break;
    
                                        }
    
                                    } else {
    
                                        switch ( transform.type ) {
    
                                            case 'matrix':
                                                matrix.multiply( transform.obj );
                                                break;
    
                                            case 'translate':
                                                matrix.multiply( m0.makeTranslation( transform.obj.x, transform.obj.y, transform.obj.z ) );
                                                break;
    
                                            case 'scale':
                                                matrix.scale( transform.obj );
                                                break;
    
                                            case 'rotate':
                                                matrix.multiply( m0.makeRotationAxis( transform.obj, transform.angle ) );
                                                break;
    
                                        }
    
                                    }
    
                                }
    
                                object.matrix.copy( matrix );
                                object.matrix.decompose( object.position, object.quaternion, object.scale );
    
                                jointMap[ jointIndex ].position = value;
    
                            }
    
                        } else {
    
                            console.log( 'THREE.ColladaLoader: ' + jointIndex + ' does not exist.' );
    
                        }
    
                    }
    
                };
    
            }
    
            function buildTransformList( node ) {
    
                var transforms = [];
    
                var xml = collada.querySelector( '[id="' + node.id + '"]' );
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'matrix':
                            var array = parseFloats( child.textContent );
                            var matrix = new THREE.Matrix4().fromArray( array ).transpose();
                            transforms.push( {
                                sid: child.getAttribute( 'sid' ),
                                type: child.nodeName,
                                obj: matrix
                            } );
                            break;
    
                        case 'translate':
                        case 'scale':
                            var array = parseFloats( child.textContent );
                            var vector = new THREE.Vector3().fromArray( array );
                            transforms.push( {
                                sid: child.getAttribute( 'sid' ),
                                type: child.nodeName,
                                obj: vector
                            } );
                            break;
    
                        case 'rotate':
                            var array = parseFloats( child.textContent );
                            var vector = new THREE.Vector3().fromArray( array );
                            var angle = THREE.Math.degToRad( array[ 3 ] );
                            transforms.push( {
                                sid: child.getAttribute( 'sid' ),
                                type: child.nodeName,
                                obj: vector,
                                angle: angle
                            } );
                            break;
    
                    }
    
                }
    
                return transforms;
    
            }
    
            // nodes
    
            function prepareNodes( xml ) {
    
                var elements = xml.getElementsByTagName( 'node' );
    
                // ensure all node elements have id attributes
    
                for ( var i = 0; i < elements.length; i ++ ) {
    
                    var element = elements[ i ];
    
                    if ( element.hasAttribute( 'id' ) === false ) {
    
                        element.setAttribute( 'id', generateId() );
    
                    }
    
                }
    
            }
    
            var matrix = new THREE.Matrix4();
            var vector = new THREE.Vector3();
    
            function parseNode( xml ) {
    
                var data = {
                    name: xml.getAttribute( 'name' ) || '',
                    type: xml.getAttribute( 'type' ),
                    id: xml.getAttribute( 'id' ),
                    sid: xml.getAttribute( 'sid' ),
                    matrix: new THREE.Matrix4(),
                    nodes: [],
                    instanceCameras: [],
                    instanceControllers: [],
                    instanceLights: [],
                    instanceGeometries: [],
                    instanceNodes: [],
                    transforms: {}
                };
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    if ( child.nodeType !== 1 ) continue;
    
                    switch ( child.nodeName ) {
    
                        case 'node':
                            data.nodes.push( child.getAttribute( 'id' ) );
                            parseNode( child );
                            break;
    
                        case 'instance_camera':
                            data.instanceCameras.push( parseId( child.getAttribute( 'url' ) ) );
                            break;
    
                        case 'instance_controller':
                            data.instanceControllers.push( parseNodeInstance( child ) );
                            break;
    
                        case 'instance_light':
                            data.instanceLights.push( parseId( child.getAttribute( 'url' ) ) );
                            break;
    
                        case 'instance_geometry':
                            data.instanceGeometries.push( parseNodeInstance( child ) );
                            break;
    
                        case 'instance_node':
                            data.instanceNodes.push( parseId( child.getAttribute( 'url' ) ) );
                            break;
    
                        case 'matrix':
                            var array = parseFloats( child.textContent );
                            data.matrix.multiply( matrix.fromArray( array ).transpose() );
                            data.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;
                            break;
    
                        case 'translate':
                            var array = parseFloats( child.textContent );
                            vector.fromArray( array );
                            data.matrix.multiply( matrix.makeTranslation( vector.x, vector.y, vector.z ) );
                            data.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;
                            break;
    
                        case 'rotate':
                            var array = parseFloats( child.textContent );
                            var angle = THREE.Math.degToRad( array[ 3 ] );
                            data.matrix.multiply( matrix.makeRotationAxis( vector.fromArray( array ), angle ) );
                            data.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;
                            break;
    
                        case 'scale':
                            var array = parseFloats( child.textContent );
                            data.matrix.scale( vector.fromArray( array ) );
                            data.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;
                            break;
    
                        case 'extra':
                            break;
    
                        default:
                            console.log( child );
    
                    }
    
                }
    
                library.nodes[ data.id ] = data;
    
                return data;
    
            }
    
            function parseNodeInstance( xml ) {
    
                var data = {
                    id: parseId( xml.getAttribute( 'url' ) ),
                    materials: {},
                    skeletons: []
                };
    
                for ( var i = 0; i < xml.childNodes.length; i ++ ) {
    
                    var child = xml.childNodes[ i ];
    
                    switch ( child.nodeName ) {
    
                        case 'bind_material':
                            var instances = child.getElementsByTagName( 'instance_material' );
    
                            for ( var j = 0; j < instances.length; j ++ ) {
    
                                var instance = instances[ j ];
                                var symbol = instance.getAttribute( 'symbol' );
                                var target = instance.getAttribute( 'target' );
    
                                data.materials[ symbol ] = parseId( target );
    
                            }
    
                            break;
    
                        case 'skeleton':
                            data.skeletons.push( parseId( child.textContent ) );
                            break;
    
                        default:
                            break;
    
                    }
    
                }
    
                return data;
    
            }
    
            function buildSkeleton( skeletons, joints ) {
    
                var boneData = [];
                var sortedBoneData = [];
    
                var i, j, data;
    
                // a skeleton can have multiple root bones. collada expresses this
                // situtation with multiple "skeleton" tags per controller instance
    
                for ( i = 0; i < skeletons.length; i ++ ) {
    
                    var skeleton = skeletons[ i ];
                    var root = getNode( skeleton );
    
                    // setup bone data for a single bone hierarchy
    
                    buildBoneHierarchy( root, joints, boneData );
    
                }
    
                // sort bone data (the order is defined in the corresponding controller)
    
                for ( i = 0; i < joints.length; i ++ ) {
    
                    for ( j = 0; j < boneData.length; j ++ ) {
    
                        data = boneData[ j ];
    
                        if ( data.bone.name === joints[ i ].name ) {
    
                            sortedBoneData[ i ] = data;
                            data.processed = true;
                            break;
    
                        }
    
                    }
    
                }
    
                // add unprocessed bone data at the end of the list
    
                for ( i = 0; i < boneData.length; i ++ ) {
    
                    data = boneData[ i ];
    
                    if ( data.processed === false ) {
    
                        sortedBoneData.push( data );
                        data.processed = true;
    
                    }
    
                }
    
                // setup arrays for skeleton creation
    
                var bones = [];
                var boneInverses = [];
    
                for ( i = 0; i < sortedBoneData.length; i ++ ) {
    
                    data = sortedBoneData[ i ];
    
                    bones.push( data.bone );
                    boneInverses.push( data.boneInverse );
    
                }
    
                return new THREE.Skeleton( bones, boneInverses );
    
            }
    
            function buildBoneHierarchy( root, joints, boneData ) {
    
                // setup bone data from visual scene
    
                root.traverse( function ( object ) {
    
                    if ( object.isBone === true ) {
    
                        var boneInverse;
    
                        // retrieve the boneInverse from the controller data
    
                        for ( var i = 0; i < joints.length; i ++ ) {
    
                            var joint = joints[ i ];
    
                            if ( joint.name === object.name ) {
    
                                boneInverse = joint.boneInverse;
                                break;
    
                            }
    
                        }
    
                        if ( boneInverse === undefined ) {
    
                            // Unfortunately, there can be joints in the visual scene that are not part of the
                            // corresponding controller. In this case, we have to create a dummy boneInverse matrix
                            // for the respective bone. This bone won't affect any vertices, because there are no skin indices
                            // and weights defined for it. But we still have to add the bone to the sorted bone list in order to
                            // ensure a correct animation of the model.
    
                             boneInverse = new THREE.Matrix4();
    
                        }
    
                        boneData.push( { bone: object, boneInverse: boneInverse, processed: false } );
    
                    }
    
                } );
    
            }
    
            function buildNode( data ) {
    
                var objects = [];
    
                var matrix = data.matrix;
                var nodes = data.nodes;
                var type = data.type;
                var instanceCameras = data.instanceCameras;
                var instanceControllers = data.instanceControllers;
                var instanceLights = data.instanceLights;
                var instanceGeometries = data.instanceGeometries;
                var instanceNodes = data.instanceNodes;
    
                // nodes
    
                for ( var i = 0, l = nodes.length; i < l; i ++ ) {
    
                    objects.push( getNode( nodes[ i ] ) );
    
                }
    
                // instance cameras
    
                for ( var i = 0, l = instanceCameras.length; i < l; i ++ ) {
    
                    var instanceCamera = getCamera( instanceCameras[ i ] );
    
                    if ( instanceCamera !== null ) {
    
                        objects.push( instanceCamera.clone() );
    
                    }
    
                }
    
                // instance controllers
    
                for ( var i = 0, l = instanceControllers.length; i < l; i ++ ) {
    
                    var instance = instanceControllers[ i ];
                    var controller = getController( instance.id );
                    var geometries = getGeometry( controller.id );
                    var newObjects = buildObjects( geometries, instance.materials );
    
                    var skeletons = instance.skeletons;
                    var joints = controller.skin.joints;
    
                    var skeleton = buildSkeleton( skeletons, joints );
    
                    for ( var j = 0, jl = newObjects.length; j < jl; j ++ ) {
    
                        var object = newObjects[ j ];
    
                        if ( object.isSkinnedMesh ) {
    
                            object.bind( skeleton, controller.skin.bindMatrix );
                            object.normalizeSkinWeights();
    
                        }
    
                        objects.push( object );
    
                    }
    
                }
    
                // instance lights
    
                for ( var i = 0, l = instanceLights.length; i < l; i ++ ) {
    
                    var instanceLight = getLight( instanceLights[ i ] );
    
                    if ( instanceLight !== null ) {
    
                        objects.push( instanceLight.clone() );
    
                    }
    
                }
    
                // instance geometries
    
                for ( var i = 0, l = instanceGeometries.length; i < l; i ++ ) {
    
                    var instance = instanceGeometries[ i ];
    
                    // a single geometry instance in collada can lead to multiple object3Ds.
                    // this is the case when primitives are combined like triangles and lines
    
                    var geometries = getGeometry( instance.id );
                    var newObjects = buildObjects( geometries, instance.materials );
    
                    for ( var j = 0, jl = newObjects.length; j < jl; j ++ ) {
    
                        objects.push( newObjects[ j ] );
    
                    }
    
                }
    
                // instance nodes
    
                for ( var i = 0, l = instanceNodes.length; i < l; i ++ ) {
    
                    objects.push( getNode( instanceNodes[ i ] ).clone() );
    
                }
    
                var object;
    
                if ( nodes.length === 0 && objects.length === 1 ) {
    
                    object = objects[ 0 ];
    
                } else {
    
                    object = ( type === 'JOINT' ) ? new THREE.Bone() : new THREE.Group();
    
                    for ( var i = 0; i < objects.length; i ++ ) {
    
                        object.add( objects[ i ] );
    
                    }
    
                }
    
                object.name = ( type === 'JOINT' ) ? data.sid : data.name;
                object.matrix.copy( matrix );
                object.matrix.decompose( object.position, object.quaternion, object.scale );
    
                return object;
    
            }
    
            function resolveMaterialBinding( keys, instanceMaterials ) {
    
                var materials = [];
    
                for ( var i = 0, l = keys.length; i < l; i ++ ) {
    
                    var id = instanceMaterials[ keys[ i ] ];
                    materials.push( getMaterial( id ) );
    
                }
    
                return materials;
    
            }
    
            function buildObjects( geometries, instanceMaterials ) {
    
                var objects = [];
    
                for ( var type in geometries ) {
    
                    var geometry = geometries[ type ];
    
                    var materials = resolveMaterialBinding( geometry.materialKeys, instanceMaterials );
    
                    // handle case if no materials are defined
    
                    if ( materials.length === 0 ) {
    
                        if ( type === 'lines' || type === 'linestrips' ) {
    
                            materials.push( new THREE.LineBasicMaterial() );
    
                        } else {
    
                            materials.push( new THREE.MeshPhongMaterial() );
    
                        }
    
                    }
    
                    // regard skinning
    
                    var skinning = ( geometry.data.attributes.skinIndex !== undefined );
    
                    if ( skinning ) {
    
                        for ( var i = 0, l = materials.length; i < l; i ++ ) {
    
                            materials[ i ].skinning = true;
    
                        }
    
                    }
    
                    // choose between a single or multi materials (material array)
    
                    var material = ( materials.length === 1 ) ? materials[ 0 ] : materials;
    
                    // now create a specific 3D object
    
                    var object;
    
                    switch ( type ) {
    
                        case 'lines':
                            object = new THREE.LineSegments( geometry.data, material );
                            break;
    
                        case 'linestrips':
                            object = new THREE.Line( geometry.data, material );
                            break;
    
                        case 'triangles':
                        case 'polylist':
                            if ( skinning ) {
    
                                object = new THREE.SkinnedMesh( geometry.data, material );
    
                            } else {
    
                                object = new THREE.Mesh( geometry.data, material );
    
                            }
                            break;
    
                    }
    
                    objects.push( object );
    
                }
    
                return objects;
    
            }
    
            function getNode( id ) {
    
                return getBuild( library.nodes[ id ], buildNode );
    
            }
    
            // visual scenes
    
            function parseVisualScene( xml ) {
    
                var data = {
                    name: xml.getAttribute( 'name' ),
                    children: []
                };
    
                prepareNodes( xml );
    
                var elements = getElementsByTagName( xml, 'node' );
    
                for ( var i = 0; i < elements.length; i ++ ) {
    
                    data.children.push( parseNode( elements[ i ] ) );
    
                }
    
                library.visualScenes[ xml.getAttribute( 'id' ) ] = data;
    
            }
    
            function buildVisualScene( data ) {
    
                var group = new THREE.Group();
                group.name = data.name;
    
                var children = data.children;
    
                for ( var i = 0; i < children.length; i ++ ) {
    
                    var child = children[ i ];
    
                    if ( child.id === null ) {
    
                        group.add( buildNode( child ) );
    
                    } else {
    
                        // if there is an ID, let's try to get the finished build (e.g. joints are already build)
    
                        group.add( getNode( child.id ) );
    
                    }
    
                }
    
                return group;
    
            }
    
            function getVisualScene( id ) {
    
                return getBuild( library.visualScenes[ id ], buildVisualScene );
    
            }
    
            // scenes
    
            function parseScene( xml ) {
    
                var instance = getElementsByTagName( xml, 'instance_visual_scene' )[ 0 ];
                return getVisualScene( parseId( instance.getAttribute( 'url' ) ) );
    
            }
    
            function setupAnimations() {
    
                var clips = library.clips;
    
                if ( isEmpty( clips ) === true ) {
    
                    if ( isEmpty( library.animations ) === false ) {
    
                        // if there are animations but no clips, we create a default clip for playback
    
                        var tracks = [];
    
                        for ( var id in library.animations ) {
    
                            var animationTracks = getAnimation( id );
    
                            for ( var i = 0, l = animationTracks.length; i < l; i ++ ) {
    
                                tracks.push( animationTracks[ i ] );
    
                            }
    
                        }
    
                        animations.push( new THREE.AnimationClip( 'default', - 1, tracks ) );
    
                    }
    
                } else {
    
                    for ( var id in clips ) {
    
                        animations.push( getAnimationClip( id ) );
    
                    }
    
                }
    
            }
    
            console.time( 'THREE.ColladaLoader' );
    
            if ( text.length === 0 ) {
    
                return { scene: new THREE.Scene() };
    
            }
    
            console.time( 'THREE.ColladaLoader: DOMParser' );
    
            var xml = new DOMParser().parseFromString( text, 'application/xml' );
    
            console.timeEnd( 'THREE.ColladaLoader: DOMParser' );
    
            var collada = getElementsByTagName( xml, 'COLLADA' )[ 0 ];
    
            // metadata
    
            var version = collada.getAttribute( 'version' );
            console.log( 'THREE.ColladaLoader: File version', version );
    
            var asset = parseAsset( getElementsByTagName( collada, 'asset' )[ 0 ] );
            var textureLoader = new THREE.TextureLoader( this.manager );
            textureLoader.setPath( path ).setCrossOrigin( this.crossOrigin );
    
            //
    
            var animations = [];
            var kinematics = {};
            var count = 0;
    
            //
    
            var library = {
                animations: {},
                clips: {},
                controllers: {},
                images: {},
                effects: {},
                materials: {},
                cameras: {},
                lights: {},
                geometries: {},
                nodes: {},
                visualScenes: {},
                kinematicsModels: {},
                kinematicsScenes: {}
            };
    
            console.time( 'THREE.ColladaLoader: Parse' );
    
            parseLibrary( collada, 'library_animations', 'animation', parseAnimation );
            parseLibrary( collada, 'library_animation_clips', 'animation_clip', parseAnimationClip );
            parseLibrary( collada, 'library_controllers', 'controller', parseController );
            parseLibrary( collada, 'library_images', 'image', parseImage );
            parseLibrary( collada, 'library_effects', 'effect', parseEffect );
            parseLibrary( collada, 'library_materials', 'material', parseMaterial );
            parseLibrary( collada, 'library_cameras', 'camera', parseCamera );
            parseLibrary( collada, 'library_lights', 'light', parseLight );
            parseLibrary( collada, 'library_geometries', 'geometry', parseGeometry );
            parseLibrary( collada, 'library_nodes', 'node', parseNode );
            parseLibrary( collada, 'library_visual_scenes', 'visual_scene', parseVisualScene );
            parseLibrary( collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel );
            parseLibrary( collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene );
    
            console.timeEnd( 'THREE.ColladaLoader: Parse' );
    
            console.time( 'THREE.ColladaLoader: Build' );
    
            buildLibrary( library.animations, buildAnimation );
            buildLibrary( library.clips, buildAnimationClip );
            buildLibrary( library.controllers, buildController );
            buildLibrary( library.images, buildImage );
            buildLibrary( library.effects, buildEffect );
            buildLibrary( library.materials, buildMaterial );
            buildLibrary( library.cameras, buildCamera );
            buildLibrary( library.lights, buildLight );
            buildLibrary( library.geometries, buildGeometry );
            buildLibrary( library.visualScenes, buildVisualScene );
    
            console.timeEnd( 'THREE.ColladaLoader: Build' );
    
            setupAnimations();
            setupKinematics();
    
            var scene = parseScene( getElementsByTagName( collada, 'scene' )[ 0 ] );
    
            if ( asset.upAxis === 'Z_UP' ) {
    
                scene.rotation.x = - Math.PI / 2;
    
            }
    
            scene.scale.multiplyScalar( asset.unit );
    
            console.timeEnd( 'THREE.ColladaLoader' );
    
            return {
                animations: animations,
                kinematics: kinematics,
                library: library,
                scene: scene
            };
    
        }
    
    };
},{}],"form/lib/FBXLoader":[function(require,module,exports){
/**
 * @author Kyle-Larson https://github.com/Kyle-Larson
 * @author Takahiro https://github.com/takahirox
 * @author Lewy Blue https://github.com/looeee
 *
 * Loader loads FBX file and generates Group representing FBX scene.
 * Requires FBX file to be >= 7.0 and in ASCII or to be any version in Binary format.
 *
 * Supports:
 * 	Mesh Generation (Positional Data)
 * 	Normal Data (Per Vertex Drawing Instance)
 *	UV Data (Per Vertex Drawing Instance)
 *	Skinning
 *	Animation
 * 	- Separated Animations based on stacks.
 * 	- Skeletal & Non-Skeletal Animations
 *	NURBS (Open, Closed and Periodic forms)
 *
 * Needs Support:
 *	Euler rotation order
 *
 *
 * FBX format references:
 * 	https://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure
 *
 * 	Binary format specification:
 *		https://code.blender.org/2013/08/fbx-binary-file-format-specification/
 *		https://wiki.rogiken.org/specifications/file-format/fbx/ (more detail but Japanese)
 */

( function () {
    
        THREE.FBXLoader = function ( manager ) {
    
            this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
    
        };
    
        Object.assign( THREE.FBXLoader.prototype, {
    
            load: function ( url, onLoad, onProgress, onError ) {
    
                var self = this;
    
                var resourceDirectory = THREE.LoaderUtils.extractUrlBase( url );
    
                var loader = new THREE.FileLoader( this.manager );
                loader.setResponseType( 'arraybuffer' );
                loader.load( url, function ( buffer ) {
    
                    try {
    
                        var scene = self.parse( buffer, resourceDirectory );
                        onLoad( scene );
    
                    } catch ( error ) {
    
                        window.setTimeout( function () {
    
                            if ( onError ) onError( error );
    
                            self.manager.itemError( url );
    
                        }, 0 );
    
                    }
    
                }, onProgress, onError );
    
            },
    
            parse: function ( FBXBuffer, resourceDirectory ) {
    
                var FBXTree;
    
                if ( isFbxFormatBinary( FBXBuffer ) ) {
    
                    FBXTree = new BinaryParser().parse( FBXBuffer );
    
                } else {
    
                    var FBXText = convertArrayBufferToString( FBXBuffer );
    
                    if ( ! isFbxFormatASCII( FBXText ) ) {
    
                        throw new Error( 'THREE.FBXLoader: Unknown format.' );
    
                    }
    
                    if ( getFbxVersion( FBXText ) < 7000 ) {
    
                        throw new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion( FBXText ) );
    
                    }
    
                    FBXTree = new TextParser().parse( FBXText );
    
                }
    
                // console.log( FBXTree );
    
                var connections = parseConnections( FBXTree );
                var images = parseImages( FBXTree );
                var textures = parseTextures( FBXTree, new THREE.TextureLoader( this.manager ).setPath( resourceDirectory ), images, connections );
                var materials = parseMaterials( FBXTree, textures, connections );
                var skeletons = parseDeformers( FBXTree, connections );
                var geometryMap = parseGeometries( FBXTree, connections, skeletons );
                var sceneGraph = parseScene( FBXTree, connections, skeletons, geometryMap, materials );
    
                return sceneGraph;
    
            }
    
        } );
    
        // Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )
        // and details the connection type
        function parseConnections( FBXTree ) {
    
            var connectionMap = new Map();
    
            if ( 'Connections' in FBXTree ) {
    
                var rawConnections = FBXTree.Connections.connections;
    
                rawConnections.forEach( function ( rawConnection ) {
    
                    var fromID = rawConnection[ 0 ];
                    var toID = rawConnection[ 1 ];
                    var relationship = rawConnection[ 2 ];
    
                    if ( ! connectionMap.has( fromID ) ) {
    
                        connectionMap.set( fromID, {
                            parents: [],
                            children: []
                        } );
    
                    }
    
                    var parentRelationship = { ID: toID, relationship: relationship };
                    connectionMap.get( fromID ).parents.push( parentRelationship );
    
                    if ( ! connectionMap.has( toID ) ) {
    
                        connectionMap.set( toID, {
                            parents: [],
                            children: []
                        } );
    
                    }
    
                    var childRelationship = { ID: fromID, relationship: relationship };
                    connectionMap.get( toID ).children.push( childRelationship );
    
                } );
    
            }
    
            return connectionMap;
    
        }
    
        // Parse FBXTree.Objects.Video for embedded image data
        // These images are connected to textures in FBXTree.Objects.Textures
        // via FBXTree.Connections.
        function parseImages( FBXTree ) {
    
            var images = {};
            var blobs = {};
    
            if ( 'Video' in FBXTree.Objects ) {
    
                var videoNodes = FBXTree.Objects.Video;
    
                for ( var nodeID in videoNodes ) {
    
                    var videoNode = videoNodes[ nodeID ];
    
                    var id = parseInt( nodeID );
    
                    images[ id ] = videoNode.Filename;
    
                    // raw image data is in videoNode.Content
                    if ( 'Content' in videoNode ) {
    
                        var arrayBufferContent = ( videoNode.Content instanceof ArrayBuffer ) && ( videoNode.Content.byteLength > 0 );
                        var base64Content = ( typeof videoNode.Content === 'string' ) && ( videoNode.Content !== '' );
    
                        if ( arrayBufferContent || base64Content ) {
    
                            var image = parseImage( videoNodes[ nodeID ] );
    
                            blobs[ videoNode.Filename ] = image;
    
                        }
    
                    }
    
                }
    
            }
    
            for ( var id in images ) {
    
                var filename = images[ id ];
    
                if ( blobs[ filename ] !== undefined ) images[ id ] = blobs[ filename ];
                else images[ id ] = images[ id ].split( '\\' ).pop();
    
            }
    
            return images;
    
        }
    
        // Parse embedded image data in FBXTree.Video.Content
        function parseImage( videoNode ) {
    
            var content = videoNode.Content;
            var fileName = videoNode.RelativeFilename || videoNode.Filename;
            var extension = fileName.slice( fileName.lastIndexOf( '.' ) + 1 ).toLowerCase();
    
            var type;
    
            switch ( extension ) {
    
                case 'bmp':
    
                    type = 'image/bmp';
                    break;
    
                case 'jpg':
                case 'jpeg':
    
                    type = 'image/jpeg';
                    break;
    
                case 'png':
    
                    type = 'image/png';
                    break;
    
                case 'tif':
    
                    type = 'image/tiff';
                    break;
    
                default:
    
                    console.warn( 'FBXLoader: Image type "' + extension + '" is not supported.' );
                    return;
    
            }
    
            if ( typeof content === 'string' ) { // ASCII format
    
                return 'data:' + type + ';base64,' + content;
    
            } else { // Binary Format
    
                var array = new Uint8Array( content );
                return window.URL.createObjectURL( new Blob( [ array ], { type: type } ) );
    
            }
    
        }
    
        // Parse nodes in FBXTree.Objects.Texture
        // These contain details such as UV scaling, cropping, rotation etc and are connected
        // to images in FBXTree.Objects.Video
        function parseTextures( FBXTree, loader, images, connections ) {
    
            var textureMap = new Map();
    
            if ( 'Texture' in FBXTree.Objects ) {
    
                var textureNodes = FBXTree.Objects.Texture;
                for ( var nodeID in textureNodes ) {
    
                    var texture = parseTexture( textureNodes[ nodeID ], loader, images, connections );
                    textureMap.set( parseInt( nodeID ), texture );
    
                }
    
            }
    
            return textureMap;
    
        }
    
        // Parse individual node in FBXTree.Objects.Texture
        function parseTexture( textureNode, loader, images, connections ) {
    
            var texture = loadTexture( textureNode, loader, images, connections );
    
            texture.ID = textureNode.id;
    
            texture.name = textureNode.attrName;
    
            var wrapModeU = textureNode.WrapModeU;
            var wrapModeV = textureNode.WrapModeV;
    
            var valueU = wrapModeU !== undefined ? wrapModeU.value : 0;
            var valueV = wrapModeV !== undefined ? wrapModeV.value : 0;
    
            // http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a
            // 0: repeat(default), 1: clamp
    
            texture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
            texture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;
    
            if ( 'Scaling' in textureNode ) {
    
                var values = textureNode.Scaling.value;
    
                texture.repeat.x = values[ 0 ];
                texture.repeat.y = values[ 1 ];
    
            }
    
            return texture;
    
        }
    
        // load a texture specified as a blob or data URI, or via an external URL using THREE.TextureLoader
        function loadTexture( textureNode, loader, images, connections ) {
    
            var fileName;
    
            var currentPath = loader.path;
    
            var children = connections.get( textureNode.id ).children;
    
            if ( children !== undefined && children.length > 0 && images[ children[ 0 ].ID ] !== undefined ) {
    
                fileName = images[ children[ 0 ].ID ];
    
                if ( fileName.indexOf( 'blob:' ) === 0 || fileName.indexOf( 'data:' ) === 0 ) {
    
                    loader.setPath( undefined );
    
                }
    
            }
    
            var texture = loader.load( fileName );
    
            loader.setPath( currentPath );
    
            return texture;
    
        }
    
        // Parse nodes in FBXTree.Objects.Material
        function parseMaterials( FBXTree, textureMap, connections ) {
    
            var materialMap = new Map();
    
            if ( 'Material' in FBXTree.Objects ) {
    
                var materialNodes = FBXTree.Objects.Material;
    
                for ( var nodeID in materialNodes ) {
    
                    var material = parseMaterial( FBXTree, materialNodes[ nodeID ], textureMap, connections );
    
                    if ( material !== null ) materialMap.set( parseInt( nodeID ), material );
    
                }
    
            }
    
            return materialMap;
    
        }
    
        // Parse single node in FBXTree.Objects.Material
        // Materials are connected to texture maps in FBXTree.Objects.Textures
        // FBX format currently only supports Lambert and Phong shading models
        function parseMaterial( FBXTree, materialNode, textureMap, connections ) {
    
            var ID = materialNode.id;
            var name = materialNode.attrName;
            var type = materialNode.ShadingModel;
    
            //Case where FBX wraps shading model in property object.
            if ( typeof type === 'object' ) {
    
                type = type.value;
    
            }
    
            // Ignore unused materials which don't have any connections.
            if ( ! connections.has( ID ) ) return null;
    
            var parameters = parseParameters( FBXTree, materialNode, textureMap, ID, connections );
    
            var material;
    
            switch ( type.toLowerCase() ) {
    
                case 'phong':
                    material = new THREE.MeshPhongMaterial();
                    break;
                case 'lambert':
                    material = new THREE.MeshLambertMaterial();
                    break;
                default:
                    console.warn( 'THREE.FBXLoader: unknown material type "%s". Defaulting to MeshPhongMaterial.', type );
                    material = new THREE.MeshPhongMaterial( { color: 0x3300ff } );
                    break;
    
            }
    
            material.setValues( parameters );
            material.name = name;
    
            return material;
    
        }
    
        // Parse FBX material and return parameters suitable for a three.js material
        // Also parse the texture map and return any textures associated with the material
        function parseParameters( FBXTree, properties, textureMap, ID, connections ) {
    
            var parameters = {};
    
            if ( properties.BumpFactor ) {
    
                parameters.bumpScale = properties.BumpFactor.value;
    
            }
            if ( properties.Diffuse ) {
    
                parameters.color = new THREE.Color().fromArray( properties.Diffuse.value );
    
            }
            if ( properties.DisplacementFactor ) {
    
                parameters.displacementScale = properties.DisplacementFactor.value;
    
            }
            if ( properties.ReflectionFactor ) {
    
                parameters.reflectivity = properties.ReflectionFactor.value;
    
            }
            if ( properties.Specular ) {
    
                parameters.specular = new THREE.Color().fromArray( properties.Specular.value );
    
            }
            if ( properties.Shininess ) {
    
                parameters.shininess = properties.Shininess.value;
    
            }
            if ( properties.Emissive ) {
    
                parameters.emissive = new THREE.Color().fromArray( properties.Emissive.value );
    
            }
            if ( properties.EmissiveFactor ) {
    
                parameters.emissiveIntensity = parseFloat( properties.EmissiveFactor.value );
    
            }
            if ( properties.Opacity ) {
    
                parameters.opacity = parseFloat( properties.Opacity.value );
    
            }
            if ( parameters.opacity < 1.0 ) {
    
                parameters.transparent = true;
    
            }
    
            connections.get( ID ).children.forEach( function ( child ) {
    
                var type = child.relationship;
    
                switch ( type ) {
    
                    case 'Bump':
                        parameters.bumpMap = textureMap.get( child.ID );
                        break;
    
                    case 'DiffuseColor':
                        parameters.map = getTexture( FBXTree, textureMap, child.ID, connections );
                        break;
    
                    case 'DisplacementColor':
                        parameters.displacementMap = getTexture( FBXTree, textureMap, child.ID, connections );
                        break;
    
    
                    case 'EmissiveColor':
                        parameters.emissiveMap = getTexture( FBXTree, textureMap, child.ID, connections );
                        break;
    
                    case 'NormalMap':
                        parameters.normalMap = getTexture( FBXTree, textureMap, child.ID, connections );
                        break;
    
                    case 'ReflectionColor':
                        parameters.envMap = getTexture( FBXTree, textureMap, child.ID, connections );
                        parameters.envMap.mapping = THREE.EquirectangularReflectionMapping;
                        break;
    
                    case 'SpecularColor':
                        parameters.specularMap = getTexture( FBXTree, textureMap, child.ID, connections );
                        break;
    
                    case 'TransparentColor':
                        parameters.alphaMap = getTexture( FBXTree, textureMap, child.ID, connections );
                        parameters.transparent = true;
                        break;
    
                    case 'AmbientColor':
                    case 'ShininessExponent': // AKA glossiness map
                    case 'SpecularFactor': // AKA specularLevel
                    case 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor
                    default:
                        console.warn( 'THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type );
                        break;
    
                }
    
            } );
    
            return parameters;
    
        }
    
        // get a texture from the textureMap for use by a material.
        function getTexture( FBXTree, textureMap, id, connections ) {
    
            // if the texture is a layered texture, just use the first layer and issue a warning
            if ( 'LayeredTexture' in FBXTree.Objects && id in FBXTree.Objects.LayeredTexture ) {
    
                console.warn( 'THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.' );
                id = connections.get( id ).children[ 0 ].ID;
    
            }
    
            return textureMap.get( id );
    
        }
    
        // Parse nodes in FBXTree.Objects.Deformer
        // Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here
        // Generates map of Skeleton-like objects for use later when generating and binding skeletons.
        function parseDeformers( FBXTree, connections ) {
    
            var skeletons = {};
    
            if ( 'Deformer' in FBXTree.Objects ) {
    
                var DeformerNodes = FBXTree.Objects.Deformer;
    
                for ( var nodeID in DeformerNodes ) {
    
                    var deformerNode = DeformerNodes[ nodeID ];
    
                    if ( deformerNode.attrType === 'Skin' ) {
    
                        var relationships = connections.get( parseInt( nodeID ) );
    
                        var skeleton = parseSkeleton( relationships, DeformerNodes );
                        skeleton.ID = nodeID;
    
                        if ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: skeleton attached to more than one geometry is not supported.' );
                        skeleton.geometryID = relationships.parents[ 0 ].ID;
    
                        skeletons[ nodeID ] = skeleton;
    
                    }
    
                }
    
            }
    
            return skeletons;
    
        }
    
        // Parse single nodes in FBXTree.Objects.Deformer
        // The top level deformer nodes have type 'Skin' and subDeformer nodes have type 'Cluster'
        // Each skin node represents a skeleton and each cluster node represents a bone
        function parseSkeleton( connections, deformerNodes ) {
    
            var rawBones = [];
    
            connections.children.forEach( function ( child ) {
    
                var subDeformerNode = deformerNodes[ child.ID ];
    
                if ( subDeformerNode.attrType !== 'Cluster' ) return;
    
                var rawBone = {
    
                    ID: child.ID,
                    indices: [],
                    weights: [],
                    transform: new THREE.Matrix4().fromArray( subDeformerNode.Transform.a ),
                    transformLink: new THREE.Matrix4().fromArray( subDeformerNode.TransformLink.a ),
                    linkMode: subDeformerNode.Mode,
    
                };
    
                if ( 'Indexes' in subDeformerNode ) {
    
                    rawBone.indices = subDeformerNode.Indexes.a;
                    rawBone.weights = subDeformerNode.Weights.a;
    
                }
    
                rawBones.push( rawBone );
    
            } );
    
            return {
    
                rawBones: rawBones,
                bones: []
    
            };
    
        }
    
        // Parse nodes in FBXTree.Objects.Geometry
        function parseGeometries( FBXTree, connections, skeletons ) {
    
            var geometryMap = new Map();
    
            if ( 'Geometry' in FBXTree.Objects ) {
    
                var geometryNodes = FBXTree.Objects.Geometry;
    
    
    
                for ( var nodeID in geometryNodes ) {
    
                    var relationships = connections.get( parseInt( nodeID ) );
                    var geo = parseGeometry( FBXTree, relationships, geometryNodes[ nodeID ], skeletons );
    
                    geometryMap.set( parseInt( nodeID ), geo );
    
                }
    
            }
    
            return geometryMap;
    
        }
    
        // Parse single node in FBXTree.Objects.Geometry
        function parseGeometry( FBXTree, relationships, geometryNode, skeletons ) {
    
            switch ( geometryNode.attrType ) {
    
                case 'Mesh':
                    return parseMeshGeometry( FBXTree, relationships, geometryNode, skeletons );
                    break;
    
                case 'NurbsCurve':
                    return parseNurbsGeometry( geometryNode );
                    break;
    
            }
    
        }
    
    
        // Parse single node mesh geometry in FBXTree.Objects.Geometry
        function parseMeshGeometry( FBXTree, relationships, geometryNode, skeletons ) {
    
            var modelNodes = relationships.parents.map( function ( parent ) {
    
                return FBXTree.Objects.Model[ parent.ID ];
    
            } );
    
            // don't create geometry if it is not associated with any models
            if ( modelNodes.length === 0 ) return;
    
            var skeleton = relationships.children.reduce( function ( skeleton, child ) {
    
                if ( skeletons[ child.ID ] !== undefined ) skeleton = skeletons[ child.ID ];
    
                return skeleton;
    
            }, null );
    
            var preTransform = new THREE.Matrix4();
    
            // TODO: if there is more than one model associated with the geometry, AND the models have
            // different geometric transforms, then this will cause problems
            // if ( modelNodes.length > 1 ) { }
    
            // For now just assume one model and get the preRotations from that
            var modelNode = modelNodes[ 0 ];
    
            if ( 'GeometricRotation' in modelNode ) {
    
                var array = modelNode.GeometricRotation.value.map( THREE.Math.degToRad );
                array[ 3 ] = 'ZYX';
    
                preTransform.makeRotationFromEuler( new THREE.Euler().fromArray( array ) );
    
            }
    
            if ( 'GeometricTranslation' in modelNode ) {
    
                preTransform.setPosition( new THREE.Vector3().fromArray( modelNode.GeometricTranslation.value ) );
    
            }
    
            return genGeometry( FBXTree, relationships, geometryNode, skeleton, preTransform );
    
        }
    
        // Generate a THREE.BufferGeometry from a node in FBXTree.Objects.Geometry
        function genGeometry( FBXTree, relationships, geometryNode, skeleton, preTransform ) {
    
            var vertexPositions = geometryNode.Vertices.a;
            var vertexIndices = geometryNode.PolygonVertexIndex.a;
    
            // create arrays to hold the final data used to build the buffergeometry
            var vertexBuffer = [];
            var normalBuffer = [];
            var colorsBuffer = [];
            var uvsBuffer = [];
            var materialIndexBuffer = [];
            var vertexWeightsBuffer = [];
            var weightsIndicesBuffer = [];
    
            if ( geometryNode.LayerElementColor ) {
    
                var colorInfo = getColors( geometryNode.LayerElementColor[ 0 ] );
    
            }
    
            if ( geometryNode.LayerElementMaterial ) {
    
                var materialInfo = getMaterials( geometryNode.LayerElementMaterial[ 0 ] );
    
            }
    
            if ( geometryNode.LayerElementNormal ) {
    
                var normalInfo = getNormals( geometryNode.LayerElementNormal[ 0 ] );
    
            }
    
            if ( geometryNode.LayerElementUV ) {
    
                var uvInfo = [];
                var i = 0;
                while ( geometryNode.LayerElementUV[ i ] ) {
    
                    uvInfo.push( getUVs( geometryNode.LayerElementUV[ i ] ) );
                    i ++;
    
                }
    
            }
    
            var weightTable = {};
    
            if ( skeleton !== null ) {
    
                skeleton.rawBones.forEach( function ( rawBone, i ) {
    
                    // loop over the bone's vertex indices and weights
                    rawBone.indices.forEach( function ( index, j ) {
    
                        if ( weightTable[ index ] === undefined ) weightTable[ index ] = [];
    
                        weightTable[ index ].push( {
    
                            id: i,
                            weight: rawBone.weights[ j ],
    
                        } );
    
                    } );
    
                } );
    
            }
    
            var polygonIndex = 0;
            var faceLength = 0;
            var displayedWeightsWarning = false;
    
            // these will hold data for a single face
            var vertexPositionIndexes = [];
            var faceNormals = [];
            var faceColors = [];
            var faceUVs = [];
            var faceWeights = [];
            var faceWeightIndices = [];
    
            vertexIndices.forEach( function ( vertexIndex, polygonVertexIndex ) {
    
                var endOfFace = false;
    
                // Face index and vertex index arrays are combined in a single array
                // A cube with quad faces looks like this:
                // PolygonVertexIndex: *24 {
                //  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5
                //  }
                // Negative numbers mark the end of a face - first face here is 0, 1, 3, -3
                // to find index of last vertex multiply by -1 and subtract 1: -3 * - 1 - 1 = 2
                if ( vertexIndex < 0 ) {
    
                    vertexIndex = vertexIndex ^ - 1; // equivalent to ( x * -1 ) - 1
                    vertexIndices[ polygonVertexIndex ] = vertexIndex;
                    endOfFace = true;
    
                }
    
                var weightIndices = [];
                var weights = [];
    
                vertexPositionIndexes.push( vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2 );
    
                if ( colorInfo ) {
    
                    var data = getData( polygonVertexIndex, polygonIndex, vertexIndex, colorInfo );
    
                    faceColors.push( data[ 0 ], data[ 1 ], data[ 2 ] );
    
                }
    
                if ( skeleton ) {
    
                    if ( weightTable[ vertexIndex ] !== undefined ) {
    
                        weightTable[ vertexIndex ].forEach( function ( wt ) {
    
                            weights.push( wt.weight );
                            weightIndices.push( wt.id );
    
                        } );
    
    
                    }
    
                    if ( weights.length > 4 ) {
    
                        if ( ! displayedWeightsWarning ) {
    
                            console.warn( 'THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.' );
                            displayedWeightsWarning = true;
    
                        }
    
                        var wIndex = [ 0, 0, 0, 0 ];
                        var Weight = [ 0, 0, 0, 0 ];
    
                        weights.forEach( function ( weight, weightIndex ) {
    
                            var currentWeight = weight;
                            var currentIndex = weightIndices[ weightIndex ];
    
                            Weight.forEach( function ( comparedWeight, comparedWeightIndex, comparedWeightArray ) {
    
                                if ( currentWeight > comparedWeight ) {
    
                                    comparedWeightArray[ comparedWeightIndex ] = currentWeight;
                                    currentWeight = comparedWeight;
    
                                    var tmp = wIndex[ comparedWeightIndex ];
                                    wIndex[ comparedWeightIndex ] = currentIndex;
                                    currentIndex = tmp;
    
                                }
    
                            } );
    
                        } );
    
                        weightIndices = wIndex;
                        weights = Weight;
    
                    }
    
                    // if the weight array is shorter than 4 pad with 0s
                    while ( weights.length < 4 ) {
    
                        weights.push( 0 );
                        weightIndices.push( 0 );
    
                    }
    
                    for ( var i = 0; i < 4; ++ i ) {
    
                        faceWeights.push( weights[ i ] );
                        faceWeightIndices.push( weightIndices[ i ] );
    
                    }
    
                }
    
                if ( normalInfo ) {
    
                    var data = getData( polygonVertexIndex, polygonIndex, vertexIndex, normalInfo );
    
                    faceNormals.push( data[ 0 ], data[ 1 ], data[ 2 ] );
    
                }
    
                if ( materialInfo && materialInfo.mappingType !== 'AllSame' ) {
    
                    var materialIndex = getData( polygonVertexIndex, polygonIndex, vertexIndex, materialInfo )[ 0 ];
    
                }
    
                if ( uvInfo ) {
    
                    uvInfo.forEach( function ( uv, i ) {
    
                        var data = getData( polygonVertexIndex, polygonIndex, vertexIndex, uv );
    
                        if ( faceUVs[ i ] === undefined ) {
    
                            faceUVs[ i ] = [];
    
                        }
    
                        faceUVs[ i ].push( data[ 0 ] );
                        faceUVs[ i ].push( data[ 1 ] );
    
                    } );
    
                }
    
                faceLength ++;
    
                // we have reached the end of a face - it may have 4 sides though
                // in which case the data is split to represent two 3 sided faces
                if ( endOfFace ) {
    
                    for ( var i = 2; i < faceLength; i ++ ) {
    
                        vertexBuffer.push( vertexPositions[ vertexPositionIndexes[ 0 ] ] );
                        vertexBuffer.push( vertexPositions[ vertexPositionIndexes[ 1 ] ] );
                        vertexBuffer.push( vertexPositions[ vertexPositionIndexes[ 2 ] ] );
    
                        vertexBuffer.push( vertexPositions[ vertexPositionIndexes[ ( i - 1 ) * 3 ] ] );
                        vertexBuffer.push( vertexPositions[ vertexPositionIndexes[ ( i - 1 ) * 3 + 1 ] ] );
                        vertexBuffer.push( vertexPositions[ vertexPositionIndexes[ ( i - 1 ) * 3 + 2 ] ] );
    
                        vertexBuffer.push( vertexPositions[ vertexPositionIndexes[ i * 3 ] ] );
                        vertexBuffer.push( vertexPositions[ vertexPositionIndexes[ i * 3 + 1 ] ] );
                        vertexBuffer.push( vertexPositions[ vertexPositionIndexes[ i * 3 + 2 ] ] );
    
                        if ( skeleton ) {
    
                            vertexWeightsBuffer.push( faceWeights[ 0 ] );
                            vertexWeightsBuffer.push( faceWeights[ 1 ] );
                            vertexWeightsBuffer.push( faceWeights[ 2 ] );
                            vertexWeightsBuffer.push( faceWeights[ 3 ] );
    
                            vertexWeightsBuffer.push( faceWeights[ ( i - 1 ) * 4 ] );
                            vertexWeightsBuffer.push( faceWeights[ ( i - 1 ) * 4 + 1 ] );
                            vertexWeightsBuffer.push( faceWeights[ ( i - 1 ) * 4 + 2 ] );
                            vertexWeightsBuffer.push( faceWeights[ ( i - 1 ) * 4 + 3 ] );
    
                            vertexWeightsBuffer.push( faceWeights[ i * 4 ] );
                            vertexWeightsBuffer.push( faceWeights[ i * 4 + 1 ] );
                            vertexWeightsBuffer.push( faceWeights[ i * 4 + 2 ] );
                            vertexWeightsBuffer.push( faceWeights[ i * 4 + 3 ] );
    
                            weightsIndicesBuffer.push( faceWeightIndices[ 0 ] );
                            weightsIndicesBuffer.push( faceWeightIndices[ 1 ] );
                            weightsIndicesBuffer.push( faceWeightIndices[ 2 ] );
                            weightsIndicesBuffer.push( faceWeightIndices[ 3 ] );
    
                            weightsIndicesBuffer.push( faceWeightIndices[ ( i - 1 ) * 4 ] );
                            weightsIndicesBuffer.push( faceWeightIndices[ ( i - 1 ) * 4 + 1 ] );
                            weightsIndicesBuffer.push( faceWeightIndices[ ( i - 1 ) * 4 + 2 ] );
                            weightsIndicesBuffer.push( faceWeightIndices[ ( i - 1 ) * 4 + 3 ] );
    
                            weightsIndicesBuffer.push( faceWeightIndices[ i * 4 ] );
                            weightsIndicesBuffer.push( faceWeightIndices[ i * 4 + 1 ] );
                            weightsIndicesBuffer.push( faceWeightIndices[ i * 4 + 2 ] );
                            weightsIndicesBuffer.push( faceWeightIndices[ i * 4 + 3 ] );
    
                        }
    
                        if ( colorInfo ) {
    
                            colorsBuffer.push( faceColors[ 0 ] );
                            colorsBuffer.push( faceColors[ 1 ] );
                            colorsBuffer.push( faceColors[ 2 ] );
    
                            colorsBuffer.push( faceColors[ ( i - 1 ) * 3 ] );
                            colorsBuffer.push( faceColors[ ( i - 1 ) * 3 + 1 ] );
                            colorsBuffer.push( faceColors[ ( i - 1 ) * 3 + 2 ] );
    
                            colorsBuffer.push( faceColors[ i * 3 ] );
                            colorsBuffer.push( faceColors[ i * 3 + 1 ] );
                            colorsBuffer.push( faceColors[ i * 3 + 2 ] );
    
                        }
    
                        if ( materialInfo && materialInfo.mappingType !== 'AllSame' ) {
    
                            materialIndexBuffer.push( materialIndex );
                            materialIndexBuffer.push( materialIndex );
                            materialIndexBuffer.push( materialIndex );
    
                        }
    
                        if ( normalInfo ) {
    
                            normalBuffer.push( faceNormals[ 0 ] );
                            normalBuffer.push( faceNormals[ 1 ] );
                            normalBuffer.push( faceNormals[ 2 ] );
    
                            normalBuffer.push( faceNormals[ ( i - 1 ) * 3 ] );
                            normalBuffer.push( faceNormals[ ( i - 1 ) * 3 + 1 ] );
                            normalBuffer.push( faceNormals[ ( i - 1 ) * 3 + 2 ] );
    
                            normalBuffer.push( faceNormals[ i * 3 ] );
                            normalBuffer.push( faceNormals[ i * 3 + 1 ] );
                            normalBuffer.push( faceNormals[ i * 3 + 2 ] );
    
                        }
    
                        if ( uvInfo ) {
    
                            uvInfo.forEach( function ( uv, j ) {
    
                                if ( uvsBuffer[ j ] === undefined ) uvsBuffer[ j ] = [];
    
                                uvsBuffer[ j ].push( faceUVs[ j ][ 0 ] );
                                uvsBuffer[ j ].push( faceUVs[ j ][ 1 ] );
    
                                uvsBuffer[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 ] );
                                uvsBuffer[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 + 1 ] );
    
                                uvsBuffer[ j ].push( faceUVs[ j ][ i * 2 ] );
                                uvsBuffer[ j ].push( faceUVs[ j ][ i * 2 + 1 ] );
    
                            } );
    
                        }
    
                    }
    
                    polygonIndex ++;
                    faceLength = 0;
    
                    // reset arrays for the next face
                    vertexPositionIndexes = [];
                    faceNormals = [];
                    faceColors = [];
                    faceUVs = [];
                    faceWeights = [];
                    faceWeightIndices = [];
    
                }
    
            } );
    
            var geo = new THREE.BufferGeometry();
            geo.name = geometryNode.name;
    
            var positionAttribute = new THREE.Float32BufferAttribute( vertexBuffer, 3 );
    
            preTransform.applyToBufferAttribute( positionAttribute );
    
            geo.addAttribute( 'position', positionAttribute );
    
            if ( colorsBuffer.length > 0 ) {
    
                geo.addAttribute( 'color', new THREE.Float32BufferAttribute( colorsBuffer, 3 ) );
    
            }
    
            if ( skeleton ) {
    
                geo.addAttribute( 'skinIndex', new THREE.Float32BufferAttribute( weightsIndicesBuffer, 4 ) );
    
                geo.addAttribute( 'skinWeight', new THREE.Float32BufferAttribute( vertexWeightsBuffer, 4 ) );
    
                // used later to bind the skeleton to the model
                geo.FBX_Deformer = skeleton;
    
            }
    
            if ( normalBuffer.length > 0 ) {
    
                var normalAttribute = new THREE.Float32BufferAttribute( normalBuffer, 3 );
    
                var normalMatrix = new THREE.Matrix3().getNormalMatrix( preTransform );
                normalMatrix.applyToBufferAttribute( normalAttribute );
    
                geo.addAttribute( 'normal', normalAttribute );
    
            }
    
            uvsBuffer.forEach( function ( uvBuffer, i ) {
    
                // subsequent uv buffers are called 'uv1', 'uv2', ...
                var name = 'uv' + ( i + 1 ).toString();
    
                // the first uv buffer is just called 'uv'
                if ( i === 0 ) {
    
                    name = 'uv';
    
                }
    
                geo.addAttribute( name, new THREE.Float32BufferAttribute( uvsBuffer[ i ], 2 ) );
    
            } );
    
            if ( materialInfo && materialInfo.mappingType !== 'AllSame' ) {
    
                // Convert the material indices of each vertex into rendering groups on the geometry.
                var prevMaterialIndex = materialIndexBuffer[ 0 ];
                var startIndex = 0;
    
                materialIndexBuffer.forEach( function ( currentIndex, i ) {
    
                    if ( currentIndex !== prevMaterialIndex ) {
    
                        geo.addGroup( startIndex, i - startIndex, prevMaterialIndex );
    
                        prevMaterialIndex = currentIndex;
                        startIndex = i;
    
                    }
    
                } );
    
                // the loop above doesn't add the last group, do that here.
                if ( geo.groups.length > 0 ) {
    
                    var lastGroup = geo.groups[ geo.groups.length - 1 ];
                    var lastIndex = lastGroup.start + lastGroup.count;
    
                    if ( lastIndex !== materialIndexBuffer.length ) {
    
                        geo.addGroup( lastIndex, materialIndexBuffer.length - lastIndex, prevMaterialIndex );
    
                    }
    
                }
    
                // case where there are multiple materials but the whole geometry is only
                // using one of them
                if ( geo.groups.length === 0 ) {
    
                    geo.addGroup( 0, materialIndexBuffer.length, materialIndexBuffer[ 0 ] );
    
                }
    
            }
    
            return geo;
    
        }
    
    
        // Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists
        function getNormals( NormalNode ) {
    
            var mappingType = NormalNode.MappingInformationType;
            var referenceType = NormalNode.ReferenceInformationType;
            var buffer = NormalNode.Normals.a;
            var indexBuffer = [];
            if ( referenceType === 'IndexToDirect' ) {
    
                if ( 'NormalIndex' in NormalNode ) {
    
                    indexBuffer = NormalNode.NormalIndex.a;
    
                } else if ( 'NormalsIndex' in NormalNode ) {
    
                    indexBuffer = NormalNode.NormalsIndex.a;
    
                }
    
            }
    
            return {
                dataSize: 3,
                buffer: buffer,
                indices: indexBuffer,
                mappingType: mappingType,
                referenceType: referenceType
            };
    
        }
    
        // Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists
        function getUVs( UVNode ) {
    
            var mappingType = UVNode.MappingInformationType;
            var referenceType = UVNode.ReferenceInformationType;
            var buffer = UVNode.UV.a;
            var indexBuffer = [];
            if ( referenceType === 'IndexToDirect' ) {
    
                indexBuffer = UVNode.UVIndex.a;
    
            }
    
            return {
                dataSize: 2,
                buffer: buffer,
                indices: indexBuffer,
                mappingType: mappingType,
                referenceType: referenceType
            };
    
        }
    
        // Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists
        function getColors( ColorNode ) {
    
            var mappingType = ColorNode.MappingInformationType;
            var referenceType = ColorNode.ReferenceInformationType;
            var buffer = ColorNode.Colors.a;
            var indexBuffer = [];
            if ( referenceType === 'IndexToDirect' ) {
    
                indexBuffer = ColorNode.ColorIndex.a;
    
            }
    
            return {
                dataSize: 4,
                buffer: buffer,
                indices: indexBuffer,
                mappingType: mappingType,
                referenceType: referenceType
            };
    
        }
    
        // Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists
        function getMaterials( MaterialNode ) {
    
            var mappingType = MaterialNode.MappingInformationType;
            var referenceType = MaterialNode.ReferenceInformationType;
    
            if ( mappingType === 'NoMappingInformation' ) {
    
                return {
                    dataSize: 1,
                    buffer: [ 0 ],
                    indices: [ 0 ],
                    mappingType: 'AllSame',
                    referenceType: referenceType
                };
    
            }
    
            var materialIndexBuffer = MaterialNode.Materials.a;
    
            // Since materials are stored as indices, there's a bit of a mismatch between FBX and what
            // we expect.So we create an intermediate buffer that points to the index in the buffer,
            // for conforming with the other functions we've written for other data.
            var materialIndices = [];
    
            for ( var i = 0; i < materialIndexBuffer.length; ++ i ) {
    
                materialIndices.push( i );
    
            }
    
            return {
                dataSize: 1,
                buffer: materialIndexBuffer,
                indices: materialIndices,
                mappingType: mappingType,
                referenceType: referenceType
            };
    
        }
    
        // Functions use the infoObject and given indices to return value array of geometry.
        // Parameters:
        // 	- polygonVertexIndex - Index of vertex in draw order (which index of the index buffer refers to this vertex).
        // 	- polygonIndex - Index of polygon in geometry.
        // 	- vertexIndex - Index of vertex inside vertex buffer (used because some data refers to old index buffer that we don't use anymore).
        // 	- infoObject: can be materialInfo, normalInfo, UVInfo or colorInfo
        // Index type:
        //	- Direct: index is same as polygonVertexIndex
        //	- IndexToDirect: infoObject has it's own set of indices
        var dataArray = [];
    
        var GetData = {
    
            ByPolygonVertex: {
    
                Direct: function ( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {
    
                    var from = ( polygonVertexIndex * infoObject.dataSize );
                    var to = ( polygonVertexIndex * infoObject.dataSize ) + infoObject.dataSize;
    
                    return slice( dataArray, infoObject.buffer, from, to );
    
                },
    
                IndexToDirect: function ( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {
    
                    var index = infoObject.indices[ polygonVertexIndex ];
                    var from = ( index * infoObject.dataSize );
                    var to = ( index * infoObject.dataSize ) + infoObject.dataSize;
    
                    return slice( dataArray, infoObject.buffer, from, to );
    
                }
    
            },
    
            ByPolygon: {
    
                Direct: function ( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {
    
                    var from = polygonIndex * infoObject.dataSize;
                    var to = polygonIndex * infoObject.dataSize + infoObject.dataSize;
    
                    return slice( dataArray, infoObject.buffer, from, to );
    
                },
    
                IndexToDirect: function ( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {
    
                    var index = infoObject.indices[ polygonIndex ];
                    var from = index * infoObject.dataSize;
                    var to = index * infoObject.dataSize + infoObject.dataSize;
    
                    return slice( dataArray, infoObject.buffer, from, to );
    
                }
    
            },
    
            ByVertice: {
    
                Direct: function ( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {
    
                    var from = ( vertexIndex * infoObject.dataSize );
                    var to = ( vertexIndex * infoObject.dataSize ) + infoObject.dataSize;
    
                    return slice( dataArray, infoObject.buffer, from, to );
    
                }
    
            },
    
            AllSame: {
    
                IndexToDirect: function ( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {
    
                    var from = infoObject.indices[ 0 ] * infoObject.dataSize;
                    var to = infoObject.indices[ 0 ] * infoObject.dataSize + infoObject.dataSize;
    
                    return slice( dataArray, infoObject.buffer, from, to );
    
                }
    
            }
    
        };
    
        function getData( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {
    
            return GetData[ infoObject.mappingType ][ infoObject.referenceType ]( polygonVertexIndex, polygonIndex, vertexIndex, infoObject );
    
        }
    
        // Generate a NurbGeometry from a node in FBXTree.Objects.Geometry
        function parseNurbsGeometry( geometryNode ) {
    
            if ( THREE.NURBSCurve === undefined ) {
    
                console.error( 'THREE.FBXLoader: The loader relies on THREE.NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.' );
                return new THREE.BufferGeometry();
    
            }
    
            var order = parseInt( geometryNode.Order );
    
            if ( isNaN( order ) ) {
    
                console.error( 'THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geometryNode.Order, geometryNode.id );
                return new THREE.BufferGeometry();
    
            }
    
            var degree = order - 1;
    
            var knots = geometryNode.KnotVector.a;
            var controlPoints = [];
            var pointsValues = geometryNode.Points.a;
    
            for ( var i = 0, l = pointsValues.length; i < l; i += 4 ) {
    
                controlPoints.push( new THREE.Vector4().fromArray( pointsValues, i ) );
    
            }
    
            var startKnot, endKnot;
    
            if ( geometryNode.Form === 'Closed' ) {
    
                controlPoints.push( controlPoints[ 0 ] );
    
            } else if ( geometryNode.Form === 'Periodic' ) {
    
                startKnot = degree;
                endKnot = knots.length - 1 - startKnot;
    
                for ( var i = 0; i < degree; ++ i ) {
    
                    controlPoints.push( controlPoints[ i ] );
    
                }
    
            }
    
            var curve = new THREE.NURBSCurve( degree, knots, controlPoints, startKnot, endKnot );
            var vertices = curve.getPoints( controlPoints.length * 7 );
    
            var positions = new Float32Array( vertices.length * 3 );
    
            vertices.forEach( function ( vertex, i ) {
    
                vertex.toArray( positions, i * 3 );
    
            } );
    
            var geometry = new THREE.BufferGeometry();
            geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );
    
            return geometry;
    
        }
    
        // create the main THREE.Group() to be returned by the loader
        function parseScene( FBXTree, connections, skeletons, geometryMap, materialMap ) {
    
            var sceneGraph = new THREE.Group();
    
            var modelMap = parseModels( FBXTree, skeletons, geometryMap, materialMap, connections );
    
            var modelNodes = FBXTree.Objects.Model;
    
            modelMap.forEach( function ( model ) {
    
                var modelNode = modelNodes[ model.ID ];
                setLookAtProperties( FBXTree, model, modelNode, connections, sceneGraph );
    
                var parentConnections = connections.get( model.ID ).parents;
    
                parentConnections.forEach( function ( connection ) {
    
                    var parent = modelMap.get( connection.ID );
                    if ( parent !== undefined ) parent.add( model );
    
                } );
    
                if ( model.parent === null ) {
    
                    sceneGraph.add( model );
    
                }
    
    
            } );
    
            bindSkeleton( FBXTree, skeletons, geometryMap, modelMap, connections );
    
            addAnimations( FBXTree, connections, sceneGraph );
    
            createAmbientLight( FBXTree, sceneGraph );
    
            return sceneGraph;
    
        }
    
        // parse nodes in FBXTree.Objects.Model
        function parseModels( FBXTree, skeletons, geometryMap, materialMap, connections ) {
    
            var modelMap = new Map();
            var modelNodes = FBXTree.Objects.Model;
    
            for ( var nodeID in modelNodes ) {
    
                var id = parseInt( nodeID );
                var node = modelNodes[ nodeID ];
                var relationships = connections.get( id );
    
                var model = buildSkeleton( relationships, skeletons, id, node.attrName );
    
                if ( ! model ) {
    
                    switch ( node.attrType ) {
    
                        case 'Camera':
                            model = createCamera( FBXTree, relationships );
                            break;
                        case 'Light':
                            model = createLight( FBXTree, relationships );
                            break;
                        case 'Mesh':
                            model = createMesh( FBXTree, relationships, geometryMap, materialMap );
                            break;
                        case 'NurbsCurve':
                            model = createCurve( relationships, geometryMap );
                            break;
                        case 'LimbNode': // usually associated with a Bone, however if a Bone was not created we'll make a Group instead
                        case 'Null':
                        default:
                            model = new THREE.Group();
                            break;
    
                    }
    
                    model.name = THREE.PropertyBinding.sanitizeNodeName( node.attrName );
                    model.ID = id;
    
                }
    
                setModelTransforms( FBXTree, model, node );
                modelMap.set( id, model );
    
            }
    
            return modelMap;
    
        }
    
        function buildSkeleton( relationships, skeletons, id, name ) {
    
            var bone = null;
    
            relationships.parents.forEach( function ( parent ) {
    
                for ( var ID in skeletons ) {
    
                    var skeleton = skeletons[ ID ];
    
                    skeleton.rawBones.forEach( function ( rawBone, i ) {
    
                        if ( rawBone.ID === parent.ID ) {
    
                            var subBone = bone;
                            bone = new THREE.Bone();
                            bone.matrixWorld.copy( rawBone.transformLink );
    
                            // set name and id here - otherwise in cases where "subBone" is created it will not have a name / id
                            bone.name = THREE.PropertyBinding.sanitizeNodeName( name );
                            bone.ID = id;
    
                            skeleton.bones[ i ] = bone;
    
                            // In cases where a bone is shared between multiple meshes
                            // duplicate the bone here and and it as a child of the first bone
                            if ( subBone !== null ) {
    
                                bone.add( subBone );
    
                            }
    
                        }
    
                    } );
    
                }
    
            } );
    
            return bone;
    
        }
    
        // create a THREE.PerspectiveCamera or THREE.OrthographicCamera
        function createCamera( FBXTree, relationships ) {
    
            var model;
            var cameraAttribute;
    
            relationships.children.forEach( function ( child ) {
    
                var attr = FBXTree.Objects.NodeAttribute[ child.ID ];
    
                if ( attr !== undefined ) {
    
                    cameraAttribute = attr;
    
                }
    
            } );
    
            if ( cameraAttribute === undefined ) {
    
                model = new THREE.Object3D();
    
            } else {
    
                var type = 0;
                if ( cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1 ) {
    
                    type = 1;
    
                }
    
                var nearClippingPlane = 1;
                if ( cameraAttribute.NearPlane !== undefined ) {
    
                    nearClippingPlane = cameraAttribute.NearPlane.value / 1000;
    
                }
    
                var farClippingPlane = 1000;
                if ( cameraAttribute.FarPlane !== undefined ) {
    
                    farClippingPlane = cameraAttribute.FarPlane.value / 1000;
    
                }
    
    
                var width = window.innerWidth;
                var height = window.innerHeight;
    
                if ( cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined ) {
    
                    width = cameraAttribute.AspectWidth.value;
                    height = cameraAttribute.AspectHeight.value;
    
                }
    
                var aspect = width / height;
    
                var fov = 45;
                if ( cameraAttribute.FieldOfView !== undefined ) {
    
                    fov = cameraAttribute.FieldOfView.value;
    
                }
    
                var focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;
    
                switch ( type ) {
    
                    case 0: // Perspective
                        model = new THREE.PerspectiveCamera( fov, aspect, nearClippingPlane, farClippingPlane );
                        if ( focalLength !== null ) model.setFocalLength( focalLength );
                        break;
    
                    case 1: // Orthographic
                        model = new THREE.OrthographicCamera( - width / 2, width / 2, height / 2, - height / 2, nearClippingPlane, farClippingPlane );
                        break;
    
                    default:
                        console.warn( 'THREE.FBXLoader: Unknown camera type ' + type + '.' );
                        model = new THREE.Object3D();
                        break;
    
                }
    
            }
    
            return model;
    
        }
    
        // Create a THREE.DirectionalLight, THREE.PointLight or THREE.SpotLight
        function createLight( FBXTree, relationships ) {
    
            var model;
            var lightAttribute;
    
            relationships.children.forEach( function ( child ) {
    
                var attr = FBXTree.Objects.NodeAttribute[ child.ID ];
    
                if ( attr !== undefined ) {
    
                    lightAttribute = attr;
    
                }
    
            } );
    
            if ( lightAttribute === undefined ) {
    
                model = new THREE.Object3D();
    
            } else {
    
                var type;
    
                // LightType can be undefined for Point lights
                if ( lightAttribute.LightType === undefined ) {
    
                    type = 0;
    
                } else {
    
                    type = lightAttribute.LightType.value;
    
                }
    
                var color = 0xffffff;
    
                if ( lightAttribute.Color !== undefined ) {
    
                    color = new THREE.Color().fromArray( lightAttribute.Color.value );
    
                }
    
                var intensity = ( lightAttribute.Intensity === undefined ) ? 1 : lightAttribute.Intensity.value / 100;
    
                // light disabled
                if ( lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0 ) {
    
                    intensity = 0;
    
                }
    
                var distance = 0;
                if ( lightAttribute.FarAttenuationEnd !== undefined ) {
    
                    if ( lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0 ) {
    
                        distance = 0;
    
                    } else {
    
                        distance = lightAttribute.FarAttenuationEnd.value / 1000;
    
                    }
    
                }
    
                // TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?
                var decay = 1;
    
                switch ( type ) {
    
                    case 0: // Point
                        model = new THREE.PointLight( color, intensity, distance, decay );
                        break;
    
                    case 1: // Directional
                        model = new THREE.DirectionalLight( color, intensity );
                        break;
    
                    case 2: // Spot
                        var angle = Math.PI / 3;
    
                        if ( lightAttribute.InnerAngle !== undefined ) {
    
                            angle = THREE.Math.degToRad( lightAttribute.InnerAngle.value );
    
                        }
    
                        var penumbra = 0;
                        if ( lightAttribute.OuterAngle !== undefined ) {
    
                            // TODO: this is not correct - FBX calculates outer and inner angle in degrees
                            // with OuterAngle > InnerAngle && OuterAngle <= Math.PI
                            // while three.js uses a penumbra between (0, 1) to attenuate the inner angle
                            penumbra = THREE.Math.degToRad( lightAttribute.OuterAngle.value );
                            penumbra = Math.max( penumbra, 1 );
    
                        }
    
                        model = new THREE.SpotLight( color, intensity, distance, angle, penumbra, decay );
                        break;
    
                    default:
                        console.warn( 'THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a THREE.PointLight.' );
                        model = new THREE.PointLight( color, intensity );
                        break;
    
                }
    
                if ( lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1 ) {
    
                    model.castShadow = true;
    
                }
    
            }
    
            return model;
    
        }
    
        function createMesh( FBXTree, relationships, geometryMap, materialMap ) {
    
            var model;
            var geometry = null;
            var material = null;
            var materials = [];
    
            // get geometry and materials(s) from connections
            relationships.children.forEach( function ( child ) {
    
                if ( geometryMap.has( child.ID ) ) {
    
                    geometry = geometryMap.get( child.ID );
    
                }
    
                if ( materialMap.has( child.ID ) ) {
    
                    materials.push( materialMap.get( child.ID ) );
    
                }
    
            } );
    
            if ( materials.length > 1 ) {
    
                material = materials;
    
            } else if ( materials.length > 0 ) {
    
                material = materials[ 0 ];
    
            } else {
    
                material = new THREE.MeshPhongMaterial( { color: 0xcccccc } );
                materials.push( material );
    
            }
    
            if ( 'color' in geometry.attributes ) {
    
                materials.forEach( function ( material ) {
    
                    material.vertexColors = THREE.VertexColors;
    
                } );
    
            }
    
            if ( geometry.FBX_Deformer ) {
    
                materials.forEach( function ( material ) {
    
                    material.skinning = true;
    
                } );
    
                model = new THREE.SkinnedMesh( geometry, material );
    
            } else {
    
                model = new THREE.Mesh( geometry, material );
    
            }
    
            return model;
    
        }
    
        function createCurve( relationships, geometryMap ) {
    
            var geometry = relationships.children.reduce( function ( geo, child ) {
    
                if ( geometryMap.has( child.ID ) ) geo = geometryMap.get( child.ID );
    
                return geo;
    
            }, null );
    
            // FBX does not list materials for Nurbs lines, so we'll just put our own in here.
            var material = new THREE.LineBasicMaterial( { color: 0x3300ff, linewidth: 1 } );
            return new THREE.Line( geometry, material );
    
        }
    
        // Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light
        function createAmbientLight( FBXTree, sceneGraph ) {
    
            if ( 'GlobalSettings' in FBXTree && 'AmbientColor' in FBXTree.GlobalSettings ) {
    
                var ambientColor = FBXTree.GlobalSettings.AmbientColor.value;
                var r = ambientColor[ 0 ];
                var g = ambientColor[ 1 ];
                var b = ambientColor[ 2 ];
    
                if ( r !== 0 || g !== 0 || b !== 0 ) {
    
                    var color = new THREE.Color( r, g, b );
                    sceneGraph.add( new THREE.AmbientLight( color, 1 ) );
    
                }
    
            }
    
        }
    
        function setLookAtProperties( FBXTree, model, modelNode, connections, sceneGraph ) {
    
            if ( 'LookAtProperty' in modelNode ) {
    
                var children = connections.get( model.ID ).children;
    
                children.forEach( function ( child ) {
    
                    if ( child.relationship === 'LookAtProperty' ) {
    
                        var lookAtTarget = FBXTree.Objects.Model[ child.ID ];
    
                        if ( 'Lcl_Translation' in lookAtTarget ) {
    
                            var pos = lookAtTarget.Lcl_Translation.value;
    
                            // DirectionalLight, SpotLight
                            if ( model.target !== undefined ) {
    
                                model.target.position.fromArray( pos );
                                sceneGraph.add( model.target );
    
                            } else { // Cameras and other Object3Ds
    
                                model.lookAt( new THREE.Vector3().fromArray( pos ) );
    
                            }
    
                        }
    
                    }
    
                } );
    
            }
    
        }
    
        // parse the model node for transform details and apply them to the model
        function setModelTransforms( FBXTree, model, modelNode ) {
    
            // http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html
            if ( 'RotationOrder' in modelNode ) {
    
                var enums = [
                    'XYZ', // default
                    'XZY',
                    'YZX',
                    'ZXY',
                    'YXZ',
                    'ZYX',
                    'SphericXYZ',
                ];
    
                var value = parseInt( modelNode.RotationOrder.value, 10 );
    
                if ( value > 0 && value < 6 ) {
    
                    // model.rotation.order = enums[ value ];
    
                    // Note: Euler order other than XYZ is currently not supported, so just display a warning for now
                    console.warn( 'THREE.FBXLoader: unsupported Euler Order: %s. Currently only XYZ order is supported. Animations and rotations may be incorrect.', enums[ value ] );
    
                } else if ( value === 6 ) {
    
                    console.warn( 'THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.' );
    
                }
    
            }
    
            if ( 'Lcl_Translation' in modelNode ) {
    
                model.position.fromArray( modelNode.Lcl_Translation.value );
    
            }
    
            if ( 'Lcl_Rotation' in modelNode ) {
    
                var rotation = modelNode.Lcl_Rotation.value.map( THREE.Math.degToRad );
                rotation.push( 'ZYX' );
                model.rotation.fromArray( rotation );
    
            }
    
            if ( 'Lcl_Scaling' in modelNode ) {
    
                model.scale.fromArray( modelNode.Lcl_Scaling.value );
    
            }
    
            if ( 'PreRotation' in modelNode ) {
    
                var array = modelNode.PreRotation.value.map( THREE.Math.degToRad );
                array[ 3 ] = 'ZYX';
    
                var preRotations = new THREE.Euler().fromArray( array );
    
                preRotations = new THREE.Quaternion().setFromEuler( preRotations );
                var currentRotation = new THREE.Quaternion().setFromEuler( model.rotation );
                preRotations.multiply( currentRotation );
                model.rotation.setFromQuaternion( preRotations, 'ZYX' );
    
            }
    
        }
    
        function bindSkeleton( FBXTree, skeletons, geometryMap, modelMap, connections ) {
    
            var bindMatrices = parsePoseNodes( FBXTree );
    
            for ( var ID in skeletons ) {
    
                var skeleton = skeletons[ ID ];
    
                var parents = connections.get( parseInt( skeleton.ID ) ).parents;
    
                parents.forEach( function ( parent ) {
    
                    if ( geometryMap.has( parent.ID ) ) {
    
                        var geoID = parent.ID;
                        var geoRelationships = connections.get( geoID );
    
                        geoRelationships.parents.forEach( function ( geoConnParent ) {
    
                            if ( modelMap.has( geoConnParent.ID ) ) {
    
                                var model = modelMap.get( geoConnParent.ID );
    
                                model.bind( new THREE.Skeleton( skeleton.bones ), bindMatrices[ geoConnParent.ID ] );
    
                            }
    
                        } );
    
                    }
    
                } );
    
            }
    
        }
    
        function parsePoseNodes( FBXTree ) {
    
            var bindMatrices = {};
    
            if ( 'Pose' in FBXTree.Objects ) {
    
                var BindPoseNode = FBXTree.Objects.Pose;
    
                for ( var nodeID in BindPoseNode ) {
    
                    if ( BindPoseNode[ nodeID ].attrType === 'BindPose' ) {
    
                        var poseNodes = BindPoseNode[ nodeID ].PoseNode;
    
                        if ( Array.isArray( poseNodes ) ) {
    
                            poseNodes.forEach( function ( poseNode ) {
    
                                bindMatrices[ poseNode.Node ] = new THREE.Matrix4().fromArray( poseNode.Matrix.a );
    
                            } );
    
                        } else {
    
                            bindMatrices[ poseNodes.Node ] = new THREE.Matrix4().fromArray( poseNodes.Matrix.a );
    
                        }
    
                    }
    
                }
    
            }
    
            return bindMatrices;
    
        }
    
        function parseAnimations( FBXTree, connections ) {
    
            // since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,
            // if this is undefined we can safely assume there are no animations
            if ( FBXTree.Objects.AnimationCurve === undefined ) return undefined;
    
            var curveNodesMap = parseAnimationCurveNodes( FBXTree );
    
            parseAnimationCurves( FBXTree, connections, curveNodesMap );
    
            var layersMap = parseAnimationLayers( FBXTree, connections, curveNodesMap );
            var rawClips = parseAnimStacks( FBXTree, connections, layersMap );
    
            return rawClips;
    
        }
    
        // parse nodes in FBXTree.Objects.AnimationCurveNode
        // each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )
        // and is referenced by an AnimationLayer
        function parseAnimationCurveNodes( FBXTree ) {
    
            var rawCurveNodes = FBXTree.Objects.AnimationCurveNode;
    
            var curveNodesMap = new Map();
    
            for ( var nodeID in rawCurveNodes ) {
    
                var rawCurveNode = rawCurveNodes[ nodeID ];
    
                if ( rawCurveNode.attrName.match( /S|R|T/ ) !== null ) {
    
                    var curveNode = {
    
                        id: rawCurveNode.id,
                        attr: rawCurveNode.attrName,
                        curves: {},
    
                    };
    
                    curveNodesMap.set( curveNode.id, curveNode );
    
                }
    
            }
    
            return curveNodesMap;
    
        }
    
        // parse nodes in FBXTree.Objects.AnimationCurve and connect them up to
        // previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated
        // axis ( e.g. times and values of x rotation)
        function parseAnimationCurves( FBXTree, connections, curveNodesMap ) {
    
            var rawCurves = FBXTree.Objects.AnimationCurve;
    
            for ( var nodeID in rawCurves ) {
    
                var animationCurve = {
    
                    id: rawCurves[ nodeID ].id,
                    times: rawCurves[ nodeID ].KeyTime.a.map( convertFBXTimeToSeconds ),
                    values: rawCurves[ nodeID ].KeyValueFloat.a,
    
                };
    
                var relationships = connections.get( animationCurve.id );
    
                if ( relationships !== undefined ) {
    
                    var animationCurveID = relationships.parents[ 0 ].ID;
                    var animationCurveRelationship = relationships.parents[ 0 ].relationship;
                    var axis = '';
    
                    if ( animationCurveRelationship.match( /X/ ) ) {
    
                        axis = 'x';
    
                    } else if ( animationCurveRelationship.match( /Y/ ) ) {
    
                        axis = 'y';
    
                    } else if ( animationCurveRelationship.match( /Z/ ) ) {
    
                        axis = 'z';
    
                    } else {
    
                        continue;
    
                    }
    
                    curveNodesMap.get( animationCurveID ).curves[ axis ] = animationCurve;
    
                }
    
            }
    
        }
    
        // parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references
        // to various AnimationCurveNodes and is referenced by an AnimationStack node
        // note: theoretically a stack can multiple layers, however in practice there always seems to be one per stack
        function parseAnimationLayers( FBXTree, connections, curveNodesMap ) {
    
            var rawLayers = FBXTree.Objects.AnimationLayer;
    
            var layersMap = new Map();
    
            for ( var nodeID in rawLayers ) {
    
                var layerCurveNodes = [];
    
                var connection = connections.get( parseInt( nodeID ) );
    
                if ( connection !== undefined ) {
    
                    // all the animationCurveNodes used in the layer
                    var children = connection.children;
    
                    children.forEach( function ( child, i ) {
    
                        if ( curveNodesMap.has( child.ID ) ) {
    
                            var curveNode = curveNodesMap.get( child.ID );
    
                            // check that the curves are defined for at least one axis, otherwise ignore the curveNode
                            if ( curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined ) {
    
                                if ( layerCurveNodes[ i ] === undefined ) {
    
                                    var modelID;
    
                                    connections.get( child.ID ).parents.forEach( function ( parent ) {
    
                                        if ( parent.relationship !== undefined ) modelID = parent.ID;
    
                                    } );
    
                                    var rawModel = FBXTree.Objects.Model[ modelID.toString() ];
    
                                    var node = {
    
                                        modelName: THREE.PropertyBinding.sanitizeNodeName( rawModel.attrName ),
                                        initialPosition: [ 0, 0, 0 ],
                                        initialRotation: [ 0, 0, 0 ],
                                        initialScale: [ 1, 1, 1 ],
    
                                    };
    
                                    if ( 'Lcl_Translation' in rawModel ) node.initialPosition = rawModel.Lcl_Translation.value;
    
                                    if ( 'Lcl_Rotation' in rawModel ) node.initialRotation = rawModel.Lcl_Rotation.value;
    
                                    if ( 'Lcl_Scaling' in rawModel ) node.initialScale = rawModel.Lcl_Scaling.value;
    
                                    // if the animated model is pre rotated, we'll have to apply the pre rotations to every
                                    // animation value as well
                                    if ( 'PreRotation' in rawModel ) node.preRotations = rawModel.PreRotation.value;
    
                                    layerCurveNodes[ i ] = node;
    
                                }
    
                                layerCurveNodes[ i ][ curveNode.attr ] = curveNode;
    
                            }
    
    
    
                        }
    
                    } );
    
                    layersMap.set( parseInt( nodeID ), layerCurveNodes );
    
                }
    
            }
    
            return layersMap;
    
        }
    
        // parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation
        // hierarchy. Each Stack node will be used to create a THREE.AnimationClip
        function parseAnimStacks( FBXTree, connections, layersMap ) {
    
            var rawStacks = FBXTree.Objects.AnimationStack;
    
            // connect the stacks (clips) up to the layers
            var rawClips = {};
    
            for ( var nodeID in rawStacks ) {
    
                var children = connections.get( parseInt( nodeID ) ).children;
    
                if ( children.length > 1 ) {
    
                    // it seems like stacks will always be associated with a single layer. But just in case there are files
                    // where there are multiple layers per stack, we'll display a warning
                    console.warn( 'THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.' );
    
                }
    
                var layer = layersMap.get( children[ 0 ].ID );
    
                rawClips[ nodeID ] = {
    
                    name: rawStacks[ nodeID ].attrName,
                    layer: layer,
    
                };
    
            }
    
            return rawClips;
    
        }
    
        // take raw animation data from parseAnimations and connect it up to the loaded models
        function addAnimations( FBXTree, connections, sceneGraph ) {
    
            sceneGraph.animations = [];
    
            var rawClips = parseAnimations( FBXTree, connections );
    
            if ( rawClips === undefined ) return;
    
    
            for ( var key in rawClips ) {
    
                var rawClip = rawClips[ key ];
    
                var clip = addClip( rawClip );
    
                sceneGraph.animations.push( clip );
    
            }
    
        }
    
        function addClip( rawClip ) {
    
            var tracks = [];
    
            rawClip.layer.forEach( function ( rawTracks ) {
    
                tracks = tracks.concat( generateTracks( rawTracks ) );
    
            } );
    
            return new THREE.AnimationClip( rawClip.name, - 1, tracks );
    
        }
    
        function generateTracks( rawTracks ) {
    
            var tracks = [];
    
            if ( rawTracks.T !== undefined && Object.keys( rawTracks.T.curves ).length > 0 ) {
    
                var positionTrack = generateVectorTrack( rawTracks.modelName, rawTracks.T.curves, rawTracks.initialPosition, 'position' );
                if ( positionTrack !== undefined ) tracks.push( positionTrack );
    
            }
    
            if ( rawTracks.R !== undefined && Object.keys( rawTracks.R.curves ).length > 0 ) {
    
                var rotationTrack = generateRotationTrack( rawTracks.modelName, rawTracks.R.curves, rawTracks.initialRotation, rawTracks.preRotations );
                if ( rotationTrack !== undefined ) tracks.push( rotationTrack );
    
            }
    
            if ( rawTracks.S !== undefined && Object.keys( rawTracks.S.curves ).length > 0 ) {
    
                var scaleTrack = generateVectorTrack( rawTracks.modelName, rawTracks.S.curves, rawTracks.initialScale, 'scale' );
                if ( scaleTrack !== undefined ) tracks.push( scaleTrack );
    
            }
    
            return tracks;
    
        }
    
        function generateVectorTrack( modelName, curves, initialValue, type ) {
    
            var times = getTimesForAllAxes( curves );
            var values = getKeyframeTrackValues( times, curves, initialValue );
    
            return new THREE.VectorKeyframeTrack( modelName + '.' + type, times, values );
    
        }
    
        function generateRotationTrack( modelName, curves, initialValue, preRotations ) {
    
            if ( curves.x !== undefined ) curves.x.values = curves.x.values.map( THREE.Math.degToRad );
            if ( curves.y !== undefined ) curves.y.values = curves.y.values.map( THREE.Math.degToRad );
            if ( curves.z !== undefined ) curves.z.values = curves.z.values.map( THREE.Math.degToRad );
    
            var times = getTimesForAllAxes( curves );
            var values = getKeyframeTrackValues( times, curves, initialValue );
    
            if ( preRotations !== undefined ) {
    
                preRotations = preRotations.map( THREE.Math.degToRad );
                preRotations.push( 'ZYX' );
    
                preRotations = new THREE.Euler().fromArray( preRotations );
                preRotations = new THREE.Quaternion().setFromEuler( preRotations );
    
            }
    
            var quaternion = new THREE.Quaternion();
            var euler = new THREE.Euler();
    
            var quaternionValues = [];
    
            for ( var i = 0; i < values.length; i += 3 ) {
    
                euler.set( values[ i ], values[ i + 1 ], values[ i + 2 ], 'ZYX' );
    
                quaternion.setFromEuler( euler );
    
                if ( preRotations !== undefined )quaternion.premultiply( preRotations );
    
                quaternion.toArray( quaternionValues, ( i / 3 ) * 4 );
    
            }
    
            return new THREE.QuaternionKeyframeTrack( modelName + '.quaternion', times, quaternionValues );
    
        }
    
        function getKeyframeTrackValues( times, curves, initialValue ) {
    
            var prevValue = initialValue;
    
            var values = [];
    
            var xIndex = - 1;
            var yIndex = - 1;
            var zIndex = - 1;
    
            times.forEach( function ( time ) {
    
                if ( curves.x ) xIndex = curves.x.times.indexOf( time );
                if ( curves.y ) yIndex = curves.y.times.indexOf( time );
                if ( curves.z ) zIndex = curves.z.times.indexOf( time );
    
                // if there is an x value defined for this frame, use that
                if ( xIndex !== - 1 ) {
    
                    var xValue = curves.x.values[ xIndex ];
                    values.push( xValue );
                    prevValue[ 0 ] = xValue;
    
                } else {
    
                    // otherwise use the x value from the previous frame
                    values.push( prevValue[ 0 ] );
    
                }
    
                if ( yIndex !== - 1 ) {
    
                    var yValue = curves.y.values[ yIndex ];
                    values.push( yValue );
                    prevValue[ 1 ] = yValue;
    
                } else {
    
                    values.push( prevValue[ 1 ] );
    
                }
    
                if ( zIndex !== - 1 ) {
    
                    var zValue = curves.z.values[ zIndex ];
                    values.push( zValue );
                    prevValue[ 2 ] = zValue;
    
                } else {
    
                    values.push( prevValue[ 2 ] );
    
                }
    
            } );
    
            return values;
    
        }
    
        // For all animated objects, times are defined separately for each axis
        // Here we'll combine the times into one sorted array without duplicates
        function getTimesForAllAxes( curves ) {
    
            var times = [];
    
            // first join together the times for each axis, if defined
            if ( curves.x !== undefined ) times = times.concat( curves.x.times );
            if ( curves.y !== undefined ) times = times.concat( curves.y.times );
            if ( curves.z !== undefined ) times = times.concat( curves.z.times );
    
            // then sort them and remove duplicates
            times = times.sort( function ( a, b ) {
    
                return a - b;
    
            } ).filter( function ( elem, index, array ) {
    
                return array.indexOf( elem ) == index;
    
            } );
    
            return times;
    
        }
    
        // parse an FBX file in ASCII format
        function TextParser() {}
    
        Object.assign( TextParser.prototype, {
    
            getPrevNode: function () {
    
                return this.nodeStack[ this.currentIndent - 2 ];
    
            },
    
            getCurrentNode: function () {
    
                return this.nodeStack[ this.currentIndent - 1 ];
    
            },
    
            getCurrentProp: function () {
    
                return this.currentProp;
    
            },
    
            pushStack: function ( node ) {
    
                this.nodeStack.push( node );
                this.currentIndent += 1;
    
            },
    
            popStack: function () {
    
                this.nodeStack.pop();
                this.currentIndent -= 1;
    
            },
    
            setCurrentProp: function ( val, name ) {
    
                this.currentProp = val;
                this.currentPropName = name;
    
            },
    
            parse: function ( text ) {
    
                this.currentIndent = 0;
                this.allNodes = new FBXTree();
                this.nodeStack = [];
                this.currentProp = [];
                this.currentPropName = '';
    
                var self = this;
    
                var split = text.split( '\n' );
    
                split.forEach( function ( line, i ) {
    
                    var matchComment = line.match( /^[\s\t]*;/ );
                    var matchEmpty = line.match( /^[\s\t]*$/ );
    
                    if ( matchComment || matchEmpty ) return;
    
                    var matchBeginning = line.match( '^\\t{' + self.currentIndent + '}(\\w+):(.*){', '' );
                    var matchProperty = line.match( '^\\t{' + ( self.currentIndent ) + '}(\\w+):[\\s\\t\\r\\n](.*)' );
                    var matchEnd = line.match( '^\\t{' + ( self.currentIndent - 1 ) + '}}' );
    
                    if ( matchBeginning ) {
    
                        self.parseNodeBegin( line, matchBeginning );
    
                    } else if ( matchProperty ) {
    
                        self.parseNodeProperty( line, matchProperty, split[ ++ i ] );
    
                    } else if ( matchEnd ) {
    
                        self.popStack();
    
                    } else if ( line.match( /^[^\s\t}]/ ) ) {
    
                        // large arrays are split over multiple lines terminated with a ',' character
                        // if this is encountered the line needs to be joined to the previous line
                        self.parseNodePropertyContinued( line );
    
                    }
    
                } );
    
                return this.allNodes;
    
            },
    
            parseNodeBegin: function ( line, property ) {
    
                var nodeName = property[ 1 ].trim().replace( /^"/, '' ).replace( /"$/, '' );
    
                var nodeAttrs = property[ 2 ].split( ',' ).map( function ( attr ) {
    
                    return attr.trim().replace( /^"/, '' ).replace( /"$/, '' );
    
                } );
    
                var node = { name: nodeName };
                var attrs = this.parseNodeAttr( nodeAttrs );
    
                var currentNode = this.getCurrentNode();
    
                // a top node
                if ( this.currentIndent === 0 ) {
    
                    this.allNodes.add( nodeName, node );
    
                } else { // a subnode
    
                    // if the subnode already exists, append it
                    if ( nodeName in currentNode ) {
    
                    // special case Pose needs PoseNodes as an array
                        if ( nodeName === 'PoseNode' ) {
    
                            currentNode.PoseNode.push( node );
    
                        } else if ( currentNode[ nodeName ].id !== undefined ) {
    
                            currentNode[ nodeName ] = {};
                            currentNode[ nodeName ][ currentNode[ nodeName ].id ] = currentNode[ nodeName ];
    
                        }
    
                        if ( attrs.id !== '' ) currentNode[ nodeName ][ attrs.id ] = node;
    
                    } else if ( typeof attrs.id === 'number' ) {
    
                        currentNode[ nodeName ] = {};
                        currentNode[ nodeName ][ attrs.id ] = node;
    
                    } else if ( nodeName !== 'Properties70' ) {
    
                        if ( nodeName === 'PoseNode' )	currentNode[ nodeName ] = [ node ];
                        else currentNode[ nodeName ] = node;
    
                    }
    
                }
    
                if ( typeof attrs.id === 'number' ) node.id = attrs.id;
                if ( attrs.name !== '' ) node.attrName = attrs.name;
                if ( attrs.type !== '' ) node.attrType = attrs.type;
    
                this.pushStack( node );
    
            },
    
            parseNodeAttr: function ( attrs ) {
    
                var id = attrs[ 0 ];
    
                if ( attrs[ 0 ] !== '' ) {
    
                    id = parseInt( attrs[ 0 ] );
    
                    if ( isNaN( id ) ) {
    
                        id = attrs[ 0 ];
    
                    }
    
                }
    
                var name = '', type = '';
    
                if ( attrs.length > 1 ) {
    
                    name = attrs[ 1 ].replace( /^(\w+)::/, '' );
                    type = attrs[ 2 ];
    
                }
    
                return { id: id, name: name, type: type };
    
            },
    
            parseNodeProperty: function ( line, property, contentLine ) {
    
                var propName = property[ 1 ].replace( /^"/, '' ).replace( /"$/, '' ).trim();
                var propValue = property[ 2 ].replace( /^"/, '' ).replace( /"$/, '' ).trim();
    
                // for special case: base64 image data follows "Content: ," line
                //	Content: ,
                //	 "/9j/4RDaRXhpZgAATU0A..."
                if ( propName === 'Content' && propValue === ',' ) {
    
                    propValue = contentLine.replace( /"/g, '' ).replace( /,$/, '' ).trim();
    
                }
    
                var currentNode = this.getCurrentNode();
                var parentName = currentNode.name;
    
                if ( parentName === 'Properties70' ) {
    
                    this.parseNodeSpecialProperty( line, propName, propValue );
                    return;
    
                }
    
                // Connections
                if ( propName === 'C' ) {
    
                    var connProps = propValue.split( ',' ).slice( 1 );
                    var from = parseInt( connProps[ 0 ] );
                    var to = parseInt( connProps[ 1 ] );
    
                    var rest = propValue.split( ',' ).slice( 3 );
    
                    rest = rest.map( function ( elem ) {
    
                        return elem.trim().replace( /^"/, '' );
    
                    } );
    
                    propName = 'connections';
                    propValue = [ from, to ];
                    append( propValue, rest );
    
                    if ( currentNode[ propName ] === undefined ) {
    
                        currentNode[ propName ] = [];
    
                    }
    
                }
    
                // Node
                if ( propName === 'Node' ) currentNode.id = propValue;
    
                // connections
                if ( propName in currentNode && Array.isArray( currentNode[ propName ] ) ) {
    
                    currentNode[ propName ].push( propValue );
    
                } else {
    
                    if ( propName !== 'a' ) currentNode[ propName ] = propValue;
                    else currentNode.a = propValue;
    
                }
    
                this.setCurrentProp( currentNode, propName );
    
                // convert string to array, unless it ends in ',' in which case more will be added to it
                if ( propName === 'a' && propValue.slice( - 1 ) !== ',' ) {
    
                    currentNode.a = parseNumberArray( propValue );
    
                }
    
            },
    
            parseNodePropertyContinued: function ( line ) {
    
                var currentNode = this.getCurrentNode();
    
                currentNode.a += line;
    
                // if the line doesn't end in ',' we have reached the end of the property value
                // so convert the string to an array
                if ( line.slice( - 1 ) !== ',' ) {
    
                    currentNode.a = parseNumberArray( currentNode.a );
    
                }
    
            },
    
            // parse "Property70"
            parseNodeSpecialProperty: function ( line, propName, propValue ) {
    
                // split this
                // P: "Lcl Scaling", "Lcl Scaling", "", "A",1,1,1
                // into array like below
                // ["Lcl Scaling", "Lcl Scaling", "", "A", "1,1,1" ]
                var props = propValue.split( '",' ).map( function ( prop ) {
    
                    return prop.trim().replace( /^\"/, '' ).replace( /\s/, '_' );
    
                } );
    
                var innerPropName = props[ 0 ];
                var innerPropType1 = props[ 1 ];
                var innerPropType2 = props[ 2 ];
                var innerPropFlag = props[ 3 ];
                var innerPropValue = props[ 4 ];
    
                // cast values where needed, otherwise leave as strings
                switch ( innerPropType1 ) {
    
                    case 'int':
                    case 'enum':
                    case 'bool':
                    case 'ULongLong':
                    case 'double':
                    case 'Number':
                    case 'FieldOfView':
                        innerPropValue = parseFloat( innerPropValue );
                        break;
    
                    case 'Color':
                    case 'ColorRGB':
                    case 'Vector3D':
                    case 'Lcl_Translation':
                    case 'Lcl_Rotation':
                    case 'Lcl_Scaling':
                        innerPropValue = parseNumberArray( innerPropValue );
                        break;
    
                }
    
                // CAUTION: these props must append to parent's parent
                this.getPrevNode()[ innerPropName ] = {
    
                    'type': innerPropType1,
                    'type2': innerPropType2,
                    'flag': innerPropFlag,
                    'value': innerPropValue
    
                };
    
                this.setCurrentProp( this.getPrevNode(), innerPropName );
    
            },
    
        } );
    
        // Parse an FBX file in Binary format
        function BinaryParser() {}
    
        Object.assign( BinaryParser.prototype, {
    
            parse: function ( buffer ) {
    
                var reader = new BinaryReader( buffer );
                reader.skip( 23 ); // skip magic 23 bytes
    
                var version = reader.getUint32();
    
                console.log( 'THREE.FBXLoader: FBX binary version: ' + version );
    
                var allNodes = new FBXTree();
    
                while ( ! this.endOfContent( reader ) ) {
    
                    var node = this.parseNode( reader, version );
                    if ( node !== null ) allNodes.add( node.name, node );
    
                }
    
                return allNodes;
    
            },
    
            // Check if reader has reached the end of content.
            endOfContent: function ( reader ) {
    
                // footer size: 160bytes + 16-byte alignment padding
                // - 16bytes: magic
                // - padding til 16-byte alignment (at least 1byte?)
                //	(seems like some exporters embed fixed 15 or 16bytes?)
                // - 4bytes: magic
                // - 4bytes: version
                // - 120bytes: zero
                // - 16bytes: magic
                if ( reader.size() % 16 === 0 ) {
    
                    return ( ( reader.getOffset() + 160 + 16 ) & ~ 0xf ) >= reader.size();
    
                } else {
    
                    return reader.getOffset() + 160 + 16 >= reader.size();
    
                }
    
            },
    
            // recursively parse nodes until the end of the file is reached
            parseNode: function ( reader, version ) {
    
                var node = {};
    
                // The first three data sizes depends on version.
                var endOffset = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();
                var numProperties = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();
    
                // note: do not remove this even if you get a linter warning as it moves the buffer forward
                var propertyListLen = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();
    
                var nameLen = reader.getUint8();
                var name = reader.getString( nameLen );
    
                // Regards this node as NULL-record if endOffset is zero
                if ( endOffset === 0 ) return null;
    
                var propertyList = [];
    
                for ( var i = 0; i < numProperties; i ++ ) {
    
                    propertyList.push( this.parseProperty( reader ) );
    
                }
    
                // Regards the first three elements in propertyList as id, attrName, and attrType
                var id = propertyList.length > 0 ? propertyList[ 0 ] : '';
                var attrName = propertyList.length > 1 ? propertyList[ 1 ] : '';
                var attrType = propertyList.length > 2 ? propertyList[ 2 ] : '';
    
                // check if this node represents just a single property
                // like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}
                node.singleProperty = ( numProperties === 1 && reader.getOffset() === endOffset ) ? true : false;
    
                while ( endOffset > reader.getOffset() ) {
    
                    var subNode = this.parseNode( reader, version );
    
                    if ( subNode !== null ) this.parseSubNode( name, node, subNode );
    
                }
    
                node.propertyList = propertyList; // raw property list used by parent
    
                if ( typeof id === 'number' ) node.id = id;
                if ( attrName !== '' ) node.attrName = attrName;
                if ( attrType !== '' ) node.attrType = attrType;
                if ( name !== '' ) node.name = name;
    
                return node;
    
            },
    
            parseSubNode: function ( name, node, subNode ) {
    
                // special case: child node is single property
                if ( subNode.singleProperty === true ) {
    
                    var value = subNode.propertyList[ 0 ];
    
                    if ( Array.isArray( value ) ) {
    
                        node[ subNode.name ] = subNode;
    
                        subNode.a = value;
    
                    } else {
    
                        node[ subNode.name ] = value;
    
                    }
    
                } else if ( name === 'Connections' && subNode.name === 'C' ) {
    
                    var array = [];
    
                    subNode.propertyList.forEach( function ( property, i ) {
    
                        // first Connection is FBX type (OO, OP, etc.). We'll discard these
                        if ( i !== 0 ) array.push( property );
    
                    } );
    
                    if ( node.connections === undefined ) {
    
                        node.connections = [];
    
                    }
    
                    node.connections.push( array );
    
                } else if ( subNode.name === 'Properties70' ) {
    
                    var keys = Object.keys( subNode );
    
                    keys.forEach( function ( key ) {
    
                        node[ key ] = subNode[ key ];
    
                    } );
    
                } else if ( name === 'Properties70' && subNode.name === 'P' ) {
    
                    var innerPropName = subNode.propertyList[ 0 ];
                    var innerPropType1 = subNode.propertyList[ 1 ];
                    var innerPropType2 = subNode.propertyList[ 2 ];
                    var innerPropFlag = subNode.propertyList[ 3 ];
                    var innerPropValue;
    
                    if ( innerPropName.indexOf( 'Lcl ' ) === 0 ) innerPropName = innerPropName.replace( 'Lcl ', 'Lcl_' );
                    if ( innerPropType1.indexOf( 'Lcl ' ) === 0 ) innerPropType1 = innerPropType1.replace( 'Lcl ', 'Lcl_' );
    
                    if ( innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf( 'Lcl_' ) === 0 ) {
    
                        innerPropValue = [
                            subNode.propertyList[ 4 ],
                            subNode.propertyList[ 5 ],
                            subNode.propertyList[ 6 ]
                        ];
    
                    } else {
    
                        innerPropValue = subNode.propertyList[ 4 ];
    
                    }
    
                    // this will be copied to parent, see above
                    node[ innerPropName ] = {
    
                        'type': innerPropType1,
                        'type2': innerPropType2,
                        'flag': innerPropFlag,
                        'value': innerPropValue
    
                    };
    
                } else if ( node[ subNode.name ] === undefined ) {
    
                    if ( typeof subNode.id === 'number' ) {
    
                        node[ subNode.name ] = {};
                        node[ subNode.name ][ subNode.id ] = subNode;
    
                    } else {
    
                        node[ subNode.name ] = subNode;
    
                    }
    
                } else {
    
                    if ( subNode.name === 'PoseNode' ) {
    
                        if ( ! Array.isArray( node[ subNode.name ] ) ) {
    
                            node[ subNode.name ] = [ node[ subNode.name ] ];
    
                        }
    
                        node[ subNode.name ].push( subNode );
    
                    } else if ( node[ subNode.name ][ subNode.id ] === undefined ) {
    
                        node[ subNode.name ][ subNode.id ] = subNode;
    
                    }
    
                }
    
            },
    
            parseProperty: function ( reader ) {
    
                var type = reader.getString( 1 );
    
                switch ( type ) {
    
                    case 'C':
                        return reader.getBoolean();
    
                    case 'D':
                        return reader.getFloat64();
    
                    case 'F':
                        return reader.getFloat32();
    
                    case 'I':
                        return reader.getInt32();
    
                    case 'L':
                        return reader.getInt64();
    
                    case 'R':
                        var length = reader.getUint32();
                        return reader.getArrayBuffer( length );
    
                    case 'S':
                        var length = reader.getUint32();
                        return reader.getString( length );
    
                    case 'Y':
                        return reader.getInt16();
    
                    case 'b':
                    case 'c':
                    case 'd':
                    case 'f':
                    case 'i':
                    case 'l':
    
                        var arrayLength = reader.getUint32();
                        var encoding = reader.getUint32(); // 0: non-compressed, 1: compressed
                        var compressedLength = reader.getUint32();
    
                        if ( encoding === 0 ) {
    
                            switch ( type ) {
    
                                case 'b':
                                case 'c':
                                    return reader.getBooleanArray( arrayLength );
    
                                case 'd':
                                    return reader.getFloat64Array( arrayLength );
    
                                case 'f':
                                    return reader.getFloat32Array( arrayLength );
    
                                case 'i':
                                    return reader.getInt32Array( arrayLength );
    
                                case 'l':
                                    return reader.getInt64Array( arrayLength );
    
                            }
    
                        }
    
                        if ( window.Zlib === undefined ) {
    
                            console.error( 'THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js' );
    
                        }
    
                        var inflate = new Zlib.Inflate( new Uint8Array( reader.getArrayBuffer( compressedLength ) ) ); // eslint-disable-line no-undef
                        var reader2 = new BinaryReader( inflate.decompress().buffer );
    
                        switch ( type ) {
    
                            case 'b':
                            case 'c':
                                return reader2.getBooleanArray( arrayLength );
    
                            case 'd':
                                return reader2.getFloat64Array( arrayLength );
    
                            case 'f':
                                return reader2.getFloat32Array( arrayLength );
    
                            case 'i':
                                return reader2.getInt32Array( arrayLength );
    
                            case 'l':
                                return reader2.getInt64Array( arrayLength );
    
                        }
    
                    default:
                        throw new Error( 'THREE.FBXLoader: Unknown property type ' + type );
    
                }
    
            }
    
        } );
    
    
        function BinaryReader( buffer, littleEndian ) {
    
            this.dv = new DataView( buffer );
            this.offset = 0;
            this.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;
    
        }
    
        Object.assign( BinaryReader.prototype, {
    
            getOffset: function () {
    
                return this.offset;
    
            },
    
            size: function () {
    
                return this.dv.buffer.byteLength;
    
            },
    
            skip: function ( length ) {
    
                this.offset += length;
    
            },
    
            // seems like true/false representation depends on exporter.
            // true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)
            // then sees LSB.
            getBoolean: function () {
    
                return ( this.getUint8() & 1 ) === 1;
    
            },
    
            getBooleanArray: function ( size ) {
    
                var a = [];
    
                for ( var i = 0; i < size; i ++ ) {
    
                    a.push( this.getBoolean() );
    
                }
    
                return a;
    
            },
    
            getUint8: function () {
    
                var value = this.dv.getUint8( this.offset );
                this.offset += 1;
                return value;
    
            },
    
            getInt16: function () {
    
                var value = this.dv.getInt16( this.offset, this.littleEndian );
                this.offset += 2;
                return value;
    
            },
    
            getInt32: function () {
    
                var value = this.dv.getInt32( this.offset, this.littleEndian );
                this.offset += 4;
                return value;
    
            },
    
            getInt32Array: function ( size ) {
    
                var a = [];
    
                for ( var i = 0; i < size; i ++ ) {
    
                    a.push( this.getInt32() );
    
                }
    
                return a;
    
            },
    
            getUint32: function () {
    
                var value = this.dv.getUint32( this.offset, this.littleEndian );
                this.offset += 4;
                return value;
    
            },
    
            // JavaScript doesn't support 64-bit integer so calculate this here
            // 1 << 32 will return 1 so using multiply operation instead here.
            // There's a possibility that this method returns wrong value if the value
            // is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.
            // TODO: safely handle 64-bit integer
            getInt64: function () {
    
                var low, high;
    
                if ( this.littleEndian ) {
    
                    low = this.getUint32();
                    high = this.getUint32();
    
                } else {
    
                    high = this.getUint32();
                    low = this.getUint32();
    
                }
    
                // calculate negative value
                if ( high & 0x80000000 ) {
    
                    high = ~ high & 0xFFFFFFFF;
                    low = ~ low & 0xFFFFFFFF;
    
                    if ( low === 0xFFFFFFFF ) high = ( high + 1 ) & 0xFFFFFFFF;
    
                    low = ( low + 1 ) & 0xFFFFFFFF;
    
                    return - ( high * 0x100000000 + low );
    
                }
    
                return high * 0x100000000 + low;
    
            },
    
            getInt64Array: function ( size ) {
    
                var a = [];
    
                for ( var i = 0; i < size; i ++ ) {
    
                    a.push( this.getInt64() );
    
                }
    
                return a;
    
            },
    
            // Note: see getInt64() comment
            getUint64: function () {
    
                var low, high;
    
                if ( this.littleEndian ) {
    
                    low = this.getUint32();
                    high = this.getUint32();
    
                } else {
    
                    high = this.getUint32();
                    low = this.getUint32();
    
                }
    
                return high * 0x100000000 + low;
    
            },
    
            getFloat32: function () {
    
                var value = this.dv.getFloat32( this.offset, this.littleEndian );
                this.offset += 4;
                return value;
    
            },
    
            getFloat32Array: function ( size ) {
    
                var a = [];
    
                for ( var i = 0; i < size; i ++ ) {
    
                    a.push( this.getFloat32() );
    
                }
    
                return a;
    
            },
    
            getFloat64: function () {
    
                var value = this.dv.getFloat64( this.offset, this.littleEndian );
                this.offset += 8;
                return value;
    
            },
    
            getFloat64Array: function ( size ) {
    
                var a = [];
    
                for ( var i = 0; i < size; i ++ ) {
    
                    a.push( this.getFloat64() );
    
                }
    
                return a;
    
            },
    
            getArrayBuffer: function ( size ) {
    
                var value = this.dv.buffer.slice( this.offset, this.offset + size );
                this.offset += size;
                return value;
    
            },
    
            getString: function ( size ) {
    
                var a = new Uint8Array( size );
    
                for ( var i = 0; i < size; i ++ ) {
    
                    a[ i ] = this.getUint8();
    
                }
    
                var nullByte = a.indexOf( 0 );
                if ( nullByte >= 0 ) a = a.slice( 0, nullByte );
    
                return THREE.LoaderUtils.decodeText( a );
    
            }
    
        } );
    
        // FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)
        // and BinaryParser( FBX Binary format)
        function FBXTree() {}
    
        Object.assign( FBXTree.prototype, {
    
            add: function ( key, val ) {
    
                this[ key ] = val;
    
            },
    
        } );
    
        function isFbxFormatBinary( buffer ) {
    
            var CORRECT = 'Kaydara FBX Binary  \0';
    
            return buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString( buffer, 0, CORRECT.length );
    
        }
    
        function isFbxFormatASCII( text ) {
    
            var CORRECT = [ 'K', 'a', 'y', 'd', 'a', 'r', 'a', '\\', 'F', 'B', 'X', '\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\', '\\' ];
    
            var cursor = 0;
    
            function read( offset ) {
    
                var result = text[ offset - 1 ];
                text = text.slice( cursor + offset );
                cursor ++;
                return result;
    
            }
    
            for ( var i = 0; i < CORRECT.length; ++ i ) {
    
                var num = read( 1 );
                if ( num === CORRECT[ i ] ) {
    
                    return false;
    
                }
    
            }
    
            return true;
    
        }
    
        function getFbxVersion( text ) {
    
            var versionRegExp = /FBXVersion: (\d+)/;
            var match = text.match( versionRegExp );
            if ( match ) {
    
                var version = parseInt( match[ 1 ] );
                return version;
    
            }
            throw new Error( 'THREE.FBXLoader: Cannot find the version number for the file given.' );
    
        }
    
        // Converts FBX ticks into real time seconds.
        function convertFBXTimeToSeconds( time ) {
    
            return time / 46186158000;
    
        }
    
    
        // Parses comma separated list of numbers and returns them an array.
        // Used internally by the TextParser
        function parseNumberArray( value ) {
    
            var array = value.split( ',' ).map( function ( val ) {
    
                return parseFloat( val );
    
            } );
    
            return array;
    
        }
    
        function convertArrayBufferToString( buffer, from, to ) {
    
            if ( from === undefined ) from = 0;
            if ( to === undefined ) to = buffer.byteLength;
    
            return THREE.LoaderUtils.decodeText( new Uint8Array( buffer, from, to ) );
    
        }
    
        function append( a, b ) {
    
            for ( var i = 0, j = a.length, l = b.length; i < l; i ++, j ++ ) {
    
                a[ j ] = b[ i ];
    
            }
    
        }
    
        function slice( a, b, from, to ) {
    
            for ( var i = from, j = 0; i < to; i ++, j ++ ) {
    
                a[ j ] = b[ i ];
    
            }
    
            return a;
    
        }
    
    } )();
},{}],"form/lib/GLTFLoader":[function(require,module,exports){
/**
 * @author Rich Tibbett / https://github.com/richtr
 * @author mrdoob / http://mrdoob.com/
 * @author Tony Parisi / http://www.tonyparisi.com/
 * @author Takahiro / https://github.com/takahirox
 * @author Don McCurdy / https://www.donmccurdy.com
 */

THREE.GLTFLoader = ( function () {
    
        function GLTFLoader( manager ) {
    
            this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
    
        }
    
        GLTFLoader.prototype = {
    
            constructor: GLTFLoader,
    
            crossOrigin: 'Anonymous',
    
            load: function ( url, onLoad, onProgress, onError ) {
    
                var scope = this;
    
                var path = this.path !== undefined ? this.path : THREE.LoaderUtils.extractUrlBase( url );
    
                var loader = new THREE.FileLoader( scope.manager );
    
                loader.setResponseType( 'arraybuffer' );
    
                loader.load( url, function ( data ) {
    
                    try {
    
                        scope.parse( data, path, onLoad, onError );
    
                    } catch ( e ) {
    
                        if ( onError !== undefined ) {
    
                            onError( e );
    
                        } else {
    
                            throw e;
    
                        }
    
                    }
    
                }, onProgress, onError );
    
            },
    
            setCrossOrigin: function ( value ) {
    
                this.crossOrigin = value;
                return this;
    
            },
    
            setPath: function ( value ) {
    
                this.path = value;
                return this;
    
            },
    
            parse: function ( data, path, onLoad, onError ) {
    
                var content;
                var extensions = {};
    
                if ( typeof data === 'string' ) {
    
                    content = data;
    
                } else {
    
                    var magic = THREE.LoaderUtils.decodeText( new Uint8Array( data, 0, 4 ) );
    
                    if ( magic === BINARY_EXTENSION_HEADER_MAGIC ) {
    
                        try {
    
                            extensions[ EXTENSIONS.KHR_BINARY_GLTF ] = new GLTFBinaryExtension( data );
    
                        } catch ( error ) {
    
                            if ( onError ) onError( error );
                            return;
    
                        }
    
                        content = extensions[ EXTENSIONS.KHR_BINARY_GLTF ].content;
    
                    } else {
    
                        content = THREE.LoaderUtils.decodeText( new Uint8Array( data ) );
    
                    }
    
                }
    
                var json = JSON.parse( content );
    
                if ( json.asset === undefined || json.asset.version[ 0 ] < 2 ) {
    
                    if ( onError ) onError( new Error( 'THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported. Use LegacyGLTFLoader instead.' ) );
                    return;
    
                }
    
                if ( json.extensionsUsed ) {
    
                    if ( json.extensionsUsed.indexOf( EXTENSIONS.KHR_LIGHTS ) >= 0 ) {
    
                        extensions[ EXTENSIONS.KHR_LIGHTS ] = new GLTFLightsExtension( json );
    
                    }
    
                    if ( json.extensionsUsed.indexOf( EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ) >= 0 ) {
    
                        extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ] = new GLTFMaterialsPbrSpecularGlossinessExtension();
    
                    }
    
                }
    
                console.time( 'GLTFLoader' );
    
                var parser = new GLTFParser( json, extensions, {
    
                    path: path || this.path || '',
                    crossOrigin: this.crossOrigin,
                    manager: this.manager
    
                } );
    
                parser.parse( function ( scene, scenes, cameras, animations, asset ) {
    
                    console.timeEnd( 'GLTFLoader' );
    
                    var glTF = {
                        scene: scene,
                        scenes: scenes,
                        cameras: cameras,
                        animations: animations,
                        asset: asset
                    };
    
                    onLoad( glTF );
    
                }, onError );
    
            }
    
        };
    
        /* GLTFREGISTRY */
    
        function GLTFRegistry() {
    
            var objects = {};
    
            return	{
    
                get: function ( key ) {
    
                    return objects[ key ];
    
                },
    
                add: function ( key, object ) {
    
                    objects[ key ] = object;
    
                },
    
                remove: function ( key ) {
    
                    delete objects[ key ];
    
                },
    
                removeAll: function () {
    
                    objects = {};
    
                }
    
            };
    
        }
    
        /*********************************/
        /********** EXTENSIONS ***********/
        /*********************************/
    
        var EXTENSIONS = {
            KHR_BINARY_GLTF: 'KHR_binary_glTF',
            KHR_LIGHTS: 'KHR_lights',
            KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness'
        };
    
        /**
         * Lights Extension
         *
         * Specification: PENDING
         */
        function GLTFLightsExtension( json ) {
    
            this.name = EXTENSIONS.KHR_LIGHTS;
    
            this.lights = {};
    
            var extension = ( json.extensions && json.extensions[ EXTENSIONS.KHR_LIGHTS ] ) || {};
            var lights = extension.lights || {};
    
            for ( var lightId in lights ) {
    
                var light = lights[ lightId ];
                var lightNode;
    
                var color = new THREE.Color().fromArray( light.color );
    
                switch ( light.type ) {
    
                    case 'directional':
                        lightNode = new THREE.DirectionalLight( color );
                        lightNode.position.set( 0, 0, 1 );
                        break;
    
                    case 'point':
                        lightNode = new THREE.PointLight( color );
                        break;
    
                    case 'spot':
                        lightNode = new THREE.SpotLight( color );
                        lightNode.position.set( 0, 0, 1 );
                        break;
    
                    case 'ambient':
                        lightNode = new THREE.AmbientLight( color );
                        break;
    
                }
    
                if ( lightNode ) {
    
                    if ( light.constantAttenuation !== undefined ) {
    
                        lightNode.intensity = light.constantAttenuation;
    
                    }
    
                    if ( light.linearAttenuation !== undefined ) {
    
                        lightNode.distance = 1 / light.linearAttenuation;
    
                    }
    
                    if ( light.quadraticAttenuation !== undefined ) {
    
                        lightNode.decay = light.quadraticAttenuation;
    
                    }
    
                    if ( light.fallOffAngle !== undefined ) {
    
                        lightNode.angle = light.fallOffAngle;
    
                    }
    
                    if ( light.fallOffExponent !== undefined ) {
    
                        console.warn( 'THREE.GLTFLoader:: light.fallOffExponent not currently supported.' );
    
                    }
    
                    lightNode.name = light.name || ( 'light_' + lightId );
                    this.lights[ lightId ] = lightNode;
    
                }
    
            }
    
        }
    
        /* BINARY EXTENSION */
    
        var BINARY_EXTENSION_BUFFER_NAME = 'binary_glTF';
        var BINARY_EXTENSION_HEADER_MAGIC = 'glTF';
        var BINARY_EXTENSION_HEADER_LENGTH = 12;
        var BINARY_EXTENSION_CHUNK_TYPES = { JSON: 0x4E4F534A, BIN: 0x004E4942 };
    
        function GLTFBinaryExtension( data ) {
    
            this.name = EXTENSIONS.KHR_BINARY_GLTF;
            this.content = null;
            this.body = null;
    
            var headerView = new DataView( data, 0, BINARY_EXTENSION_HEADER_LENGTH );
    
            this.header = {
                magic: THREE.LoaderUtils.decodeText( new Uint8Array( data.slice( 0, 4 ) ) ),
                version: headerView.getUint32( 4, true ),
                length: headerView.getUint32( 8, true )
            };
    
            if ( this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC ) {
    
                throw new Error( 'THREE.GLTFLoader: Unsupported glTF-Binary header.' );
    
            } else if ( this.header.version < 2.0 ) {
    
                throw new Error( 'THREE.GLTFLoader: Legacy binary file detected. Use LegacyGLTFLoader instead.' );
    
            }
    
            var chunkView = new DataView( data, BINARY_EXTENSION_HEADER_LENGTH );
            var chunkIndex = 0;
    
            while ( chunkIndex < chunkView.byteLength ) {
    
                var chunkLength = chunkView.getUint32( chunkIndex, true );
                chunkIndex += 4;
    
                var chunkType = chunkView.getUint32( chunkIndex, true );
                chunkIndex += 4;
    
                if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON ) {
    
                    var contentArray = new Uint8Array( data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength );
                    this.content = THREE.LoaderUtils.decodeText( contentArray );
    
                } else if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN ) {
    
                    var byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;
                    this.body = data.slice( byteOffset, byteOffset + chunkLength );
    
                }
    
                // Clients must ignore chunks with unknown types.
    
                chunkIndex += chunkLength;
    
            }
    
            if ( this.content === null ) {
    
                throw new Error( 'THREE.GLTFLoader: JSON content not found.' );
    
            }
    
        }
    
        /**
         * Specular-Glossiness Extension
         *
         * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness
         */
        function GLTFMaterialsPbrSpecularGlossinessExtension() {
    
            return {
    
                name: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,
    
                specularGlossinessParams: [
                    'color',
                    'map',
                    'lightMap',
                    'lightMapIntensity',
                    'aoMap',
                    'aoMapIntensity',
                    'emissive',
                    'emissiveIntensity',
                    'emissiveMap',
                    'bumpMap',
                    'bumpScale',
                    'normalMap',
                    'displacementMap',
                    'displacementScale',
                    'displacementBias',
                    'specularMap',
                    'specular',
                    'glossinessMap',
                    'glossiness',
                    'alphaMap',
                    'envMap',
                    'envMapIntensity',
                    'refractionRatio',
                ],
    
                getMaterialType: function () {
    
                    return THREE.ShaderMaterial;
    
                },
    
                extendParams: function ( params, material, parser ) {
    
                    var pbrSpecularGlossiness = material.extensions[ this.name ];
    
                    var shader = THREE.ShaderLib[ 'standard' ];
    
                    var uniforms = THREE.UniformsUtils.clone( shader.uniforms );
    
                    var specularMapParsFragmentChunk = [
                        '#ifdef USE_SPECULARMAP',
                        '	uniform sampler2D specularMap;',
                        '#endif'
                    ].join( '\n' );
    
                    var glossinessMapParsFragmentChunk = [
                        '#ifdef USE_GLOSSINESSMAP',
                        '	uniform sampler2D glossinessMap;',
                        '#endif'
                    ].join( '\n' );
    
                    var specularMapFragmentChunk = [
                        'vec3 specularFactor = specular;',
                        '#ifdef USE_SPECULARMAP',
                        '	vec4 texelSpecular = texture2D( specularMap, vUv );',
                        '	texelSpecular = sRGBToLinear( texelSpecular );',
                        '	// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',
                        '	specularFactor *= texelSpecular.rgb;',
                        '#endif'
                    ].join( '\n' );
    
                    var glossinessMapFragmentChunk = [
                        'float glossinessFactor = glossiness;',
                        '#ifdef USE_GLOSSINESSMAP',
                        '	vec4 texelGlossiness = texture2D( glossinessMap, vUv );',
                        '	// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',
                        '	glossinessFactor *= texelGlossiness.a;',
                        '#endif'
                    ].join( '\n' );
    
                    var lightPhysicalFragmentChunk = [
                        'PhysicalMaterial material;',
                        'material.diffuseColor = diffuseColor.rgb;',
                        'material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );',
                        'material.specularColor = specularFactor.rgb;',
                    ].join( '\n' );
    
                    var fragmentShader = shader.fragmentShader
                        .replace( '#include <specularmap_fragment>', '' )
                        .replace( 'uniform float roughness;', 'uniform vec3 specular;' )
                        .replace( 'uniform float metalness;', 'uniform float glossiness;' )
                        .replace( '#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk )
                        .replace( '#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk )
                        .replace( '#include <roughnessmap_fragment>', specularMapFragmentChunk )
                        .replace( '#include <metalnessmap_fragment>', glossinessMapFragmentChunk )
                        .replace( '#include <lights_physical_fragment>', lightPhysicalFragmentChunk );
    
                    delete uniforms.roughness;
                    delete uniforms.metalness;
                    delete uniforms.roughnessMap;
                    delete uniforms.metalnessMap;
    
                    uniforms.specular = { value: new THREE.Color().setHex( 0x111111 ) };
                    uniforms.glossiness = { value: 0.5 };
                    uniforms.specularMap = { value: null };
                    uniforms.glossinessMap = { value: null };
    
                    params.vertexShader = shader.vertexShader;
                    params.fragmentShader = fragmentShader;
                    params.uniforms = uniforms;
                    params.defines = { 'STANDARD': '' };
    
                    params.color = new THREE.Color( 1.0, 1.0, 1.0 );
                    params.opacity = 1.0;
    
                    var pending = [];
    
                    if ( Array.isArray( pbrSpecularGlossiness.diffuseFactor ) ) {
    
                        var array = pbrSpecularGlossiness.diffuseFactor;
    
                        params.color.fromArray( array );
                        params.opacity = array[ 3 ];
    
                    }
    
                    if ( pbrSpecularGlossiness.diffuseTexture !== undefined ) {
    
                        pending.push( parser.assignTexture( params, 'map', pbrSpecularGlossiness.diffuseTexture.index ) );
    
                    }
    
                    params.emissive = new THREE.Color( 0.0, 0.0, 0.0 );
                    params.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1.0;
                    params.specular = new THREE.Color( 1.0, 1.0, 1.0 );
    
                    if ( Array.isArray( pbrSpecularGlossiness.specularFactor ) ) {
    
                        params.specular.fromArray( pbrSpecularGlossiness.specularFactor );
    
                    }
    
                    if ( pbrSpecularGlossiness.specularGlossinessTexture !== undefined ) {
    
                        var specGlossIndex = pbrSpecularGlossiness.specularGlossinessTexture.index;
                        pending.push( parser.assignTexture( params, 'glossinessMap', specGlossIndex ) );
                        pending.push( parser.assignTexture( params, 'specularMap', specGlossIndex ) );
    
                    }
    
                    return Promise.all( pending );
    
                },
    
                createMaterial: function ( params ) {
    
                    // setup material properties based on MeshStandardMaterial for Specular-Glossiness
    
                    var material = new THREE.ShaderMaterial( {
                        defines: params.defines,
                        vertexShader: params.vertexShader,
                        fragmentShader: params.fragmentShader,
                        uniforms: params.uniforms,
                        fog: true,
                        lights: true,
                        opacity: params.opacity,
                        transparent: params.transparent
                    } );
    
                    material.isGLTFSpecularGlossinessMaterial = true;
    
                    material.color = params.color;
    
                    material.map = params.map === undefined ? null : params.map;
    
                    material.lightMap = null;
                    material.lightMapIntensity = 1.0;
    
                    material.aoMap = params.aoMap === undefined ? null : params.aoMap;
                    material.aoMapIntensity = 1.0;
    
                    material.emissive = params.emissive;
                    material.emissiveIntensity = 1.0;
                    material.emissiveMap = params.emissiveMap === undefined ? null : params.emissiveMap;
    
                    material.bumpMap = params.bumpMap === undefined ? null : params.bumpMap;
                    material.bumpScale = 1;
    
                    material.normalMap = params.normalMap === undefined ? null : params.normalMap;
                    if ( params.normalScale ) material.normalScale = params.normalScale;
    
                    material.displacementMap = null;
                    material.displacementScale = 1;
                    material.displacementBias = 0;
    
                    material.specularMap = params.specularMap === undefined ? null : params.specularMap;
                    material.specular = params.specular;
    
                    material.glossinessMap = params.glossinessMap === undefined ? null : params.glossinessMap;
                    material.glossiness = params.glossiness;
    
                    material.alphaMap = null;
    
                    material.envMap = params.envMap === undefined ? null : params.envMap;
                    material.envMapIntensity = 1.0;
    
                    material.refractionRatio = 0.98;
    
                    material.extensions.derivatives = true;
    
                    return material;
    
                },
    
                /**
                 * Clones a GLTFSpecularGlossinessMaterial instance. The ShaderMaterial.copy() method can
                 * copy only properties it knows about or inherits, and misses many properties that would
                 * normally be defined by MeshStandardMaterial.
                 *
                 * This method allows GLTFSpecularGlossinessMaterials to be cloned in the process of
                 * loading a glTF model, but cloning later (e.g. by the user) would require these changes
                 * AND also updating `.onBeforeRender` on the parent mesh.
                 *
                 * @param  {THREE.ShaderMaterial} source
                 * @return {THREE.ShaderMaterial}
                 */
                cloneMaterial: function ( source ) {
    
                    var target = source.clone();
    
                    target.isGLTFSpecularGlossinessMaterial = true;
    
                    var params = this.specularGlossinessParams;
    
                    for ( var i = 0, il = params.length; i < il; i ++ ) {
    
                        target[ params[ i ] ] = source[ params[ i ] ];
    
                    }
    
                    return target;
    
                },
    
                // Here's based on refreshUniformsCommon() and refreshUniformsStandard() in WebGLRenderer.
                refreshUniforms: function ( renderer, scene, camera, geometry, material, group ) {
    
                    if ( material.isGLTFSpecularGlossinessMaterial !== true ) {
    
                        return;
    
                    }
    
                    var uniforms = material.uniforms;
                    var defines = material.defines;
    
                    uniforms.opacity.value = material.opacity;
    
                    uniforms.diffuse.value.copy( material.color );
                    uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );
    
                    uniforms.map.value = material.map;
                    uniforms.specularMap.value = material.specularMap;
                    uniforms.alphaMap.value = material.alphaMap;
    
                    uniforms.lightMap.value = material.lightMap;
                    uniforms.lightMapIntensity.value = material.lightMapIntensity;
    
                    uniforms.aoMap.value = material.aoMap;
                    uniforms.aoMapIntensity.value = material.aoMapIntensity;
    
                    // uv repeat and offset setting priorities
                    // 1. color map
                    // 2. specular map
                    // 3. normal map
                    // 4. bump map
                    // 5. alpha map
                    // 6. emissive map
    
                    var uvScaleMap;
    
                    if ( material.map ) {
    
                        uvScaleMap = material.map;
    
                    } else if ( material.specularMap ) {
    
                        uvScaleMap = material.specularMap;
    
                    } else if ( material.displacementMap ) {
    
                        uvScaleMap = material.displacementMap;
    
                    } else if ( material.normalMap ) {
    
                        uvScaleMap = material.normalMap;
    
                    } else if ( material.bumpMap ) {
    
                        uvScaleMap = material.bumpMap;
    
                    } else if ( material.glossinessMap ) {
    
                        uvScaleMap = material.glossinessMap;
    
                    } else if ( material.alphaMap ) {
    
                        uvScaleMap = material.alphaMap;
    
                    } else if ( material.emissiveMap ) {
    
                        uvScaleMap = material.emissiveMap;
    
                    }
    
                    if ( uvScaleMap !== undefined ) {
    
                        // backwards compatibility
                        if ( uvScaleMap.isWebGLRenderTarget ) {
    
                            uvScaleMap = uvScaleMap.texture;
    
                        }
    
                        var offset;
                        var repeat;
    
                        if ( uvScaleMap.matrix !== undefined ) {
    
                            // > r88.
    
                            if ( uvScaleMap.matrixAutoUpdate === true ) {
    
                                offset = uvScaleMap.offset;
                                repeat = uvScaleMap.repeat;
                                var rotation = uvScaleMap.rotation;
                                var center = uvScaleMap.center;
    
                                uvScaleMap.matrix.setUvTransform( offset.x, offset.y, repeat.x, repeat.y, rotation, center.x, center.y );
    
                            }
    
                            uniforms.uvTransform.value.copy( uvScaleMap.matrix );
    
                        } else {
    
                            // <= r87. Remove when reasonable.
    
                            offset = uvScaleMap.offset;
                            repeat = uvScaleMap.repeat;
    
                            uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );
    
                        }
    
                    }
    
                    uniforms.envMap.value = material.envMap;
                    uniforms.envMapIntensity.value = material.envMapIntensity;
                    uniforms.flipEnvMap.value = ( material.envMap && material.envMap.isCubeTexture ) ? - 1 : 1;
    
                    uniforms.refractionRatio.value = material.refractionRatio;
    
                    uniforms.specular.value.copy( material.specular );
                    uniforms.glossiness.value = material.glossiness;
    
                    uniforms.glossinessMap.value = material.glossinessMap;
    
                    uniforms.emissiveMap.value = material.emissiveMap;
                    uniforms.bumpMap.value = material.bumpMap;
                    uniforms.normalMap.value = material.normalMap;
    
                    uniforms.displacementMap.value = material.displacementMap;
                    uniforms.displacementScale.value = material.displacementScale;
                    uniforms.displacementBias.value = material.displacementBias;
    
                    if ( uniforms.glossinessMap.value !== null && defines.USE_GLOSSINESSMAP === undefined ) {
    
                        defines.USE_GLOSSINESSMAP = '';
                        // set USE_ROUGHNESSMAP to enable vUv
                        defines.USE_ROUGHNESSMAP = '';
    
                    }
    
                    if ( uniforms.glossinessMap.value === null && defines.USE_GLOSSINESSMAP !== undefined ) {
    
                        delete defines.USE_GLOSSINESSMAP;
                        delete defines.USE_ROUGHNESSMAP;
    
                    }
    
                }
    
            };
    
        }
    
        /*********************************/
        /********** INTERPOLATION ********/
        /*********************************/
    
        // Spline Interpolation
        // Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation
        function GLTFCubicSplineInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {
    
            THREE.Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );
    
        };
    
        GLTFCubicSplineInterpolant.prototype = Object.create( THREE.Interpolant.prototype );
        GLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;
    
        GLTFCubicSplineInterpolant.prototype.interpolate_ = function ( i1, t0, t, t1 ) {
    
            var result = this.resultBuffer;
            var values = this.sampleValues;
            var stride = this.valueSize;
    
            var stride2 = stride * 2;
            var stride3 = stride * 3;
    
            var td = t1 - t0;
    
            var p = ( t - t0 ) / td;
            var pp = p * p;
            var ppp = pp * p;
    
            var offset1 = i1 * stride3;
            var offset0 = offset1 - stride3;
    
            var s0 = 2 * ppp - 3 * pp + 1;
            var s1 = ppp - 2 * pp + p;
            var s2 = - 2 * ppp + 3 * pp;
            var s3 = ppp - pp;
    
            // Layout of keyframe output values for CUBICSPLINE animations:
            //   [ inTangent_1, splineVertex_1, outTangent_1, inTangent_2, splineVertex_2, ... ]
            for ( var i = 0; i !== stride; i ++ ) {
    
                var p0 = values[ offset0 + i + stride ];        // splineVertex_k
                var m0 = values[ offset0 + i + stride2 ] * td;  // outTangent_k * (t_k+1 - t_k)
                var p1 = values[ offset1 + i + stride ];        // splineVertex_k+1
                var m1 = values[ offset1 + i ] * td;            // inTangent_k+1 * (t_k+1 - t_k)
    
                result[ i ] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;
    
            }
    
            return result;
    
        };
    
        /*********************************/
        /********** INTERNALS ************/
        /*********************************/
    
        /* CONSTANTS */
    
        var WEBGL_CONSTANTS = {
            FLOAT: 5126,
            //FLOAT_MAT2: 35674,
            FLOAT_MAT3: 35675,
            FLOAT_MAT4: 35676,
            FLOAT_VEC2: 35664,
            FLOAT_VEC3: 35665,
            FLOAT_VEC4: 35666,
            LINEAR: 9729,
            REPEAT: 10497,
            SAMPLER_2D: 35678,
            POINTS: 0,
            LINES: 1,
            LINE_LOOP: 2,
            LINE_STRIP: 3,
            TRIANGLES: 4,
            TRIANGLE_STRIP: 5,
            TRIANGLE_FAN: 6,
            UNSIGNED_BYTE: 5121,
            UNSIGNED_SHORT: 5123
        };
    
        var WEBGL_TYPE = {
            5126: Number,
            //35674: THREE.Matrix2,
            35675: THREE.Matrix3,
            35676: THREE.Matrix4,
            35664: THREE.Vector2,
            35665: THREE.Vector3,
            35666: THREE.Vector4,
            35678: THREE.Texture
        };
    
        var WEBGL_COMPONENT_TYPES = {
            5120: Int8Array,
            5121: Uint8Array,
            5122: Int16Array,
            5123: Uint16Array,
            5125: Uint32Array,
            5126: Float32Array
        };
    
        var WEBGL_FILTERS = {
            9728: THREE.NearestFilter,
            9729: THREE.LinearFilter,
            9984: THREE.NearestMipMapNearestFilter,
            9985: THREE.LinearMipMapNearestFilter,
            9986: THREE.NearestMipMapLinearFilter,
            9987: THREE.LinearMipMapLinearFilter
        };
    
        var WEBGL_WRAPPINGS = {
            33071: THREE.ClampToEdgeWrapping,
            33648: THREE.MirroredRepeatWrapping,
            10497: THREE.RepeatWrapping
        };
    
        var WEBGL_TEXTURE_FORMATS = {
            6406: THREE.AlphaFormat,
            6407: THREE.RGBFormat,
            6408: THREE.RGBAFormat,
            6409: THREE.LuminanceFormat,
            6410: THREE.LuminanceAlphaFormat
        };
    
        var WEBGL_TEXTURE_DATATYPES = {
            5121: THREE.UnsignedByteType,
            32819: THREE.UnsignedShort4444Type,
            32820: THREE.UnsignedShort5551Type,
            33635: THREE.UnsignedShort565Type
        };
    
        var WEBGL_SIDES = {
            1028: THREE.BackSide, // Culling front
            1029: THREE.FrontSide // Culling back
            //1032: THREE.NoSide   // Culling front and back, what to do?
        };
    
        var WEBGL_DEPTH_FUNCS = {
            512: THREE.NeverDepth,
            513: THREE.LessDepth,
            514: THREE.EqualDepth,
            515: THREE.LessEqualDepth,
            516: THREE.GreaterEqualDepth,
            517: THREE.NotEqualDepth,
            518: THREE.GreaterEqualDepth,
            519: THREE.AlwaysDepth
        };
    
        var WEBGL_BLEND_EQUATIONS = {
            32774: THREE.AddEquation,
            32778: THREE.SubtractEquation,
            32779: THREE.ReverseSubtractEquation
        };
    
        var WEBGL_BLEND_FUNCS = {
            0: THREE.ZeroFactor,
            1: THREE.OneFactor,
            768: THREE.SrcColorFactor,
            769: THREE.OneMinusSrcColorFactor,
            770: THREE.SrcAlphaFactor,
            771: THREE.OneMinusSrcAlphaFactor,
            772: THREE.DstAlphaFactor,
            773: THREE.OneMinusDstAlphaFactor,
            774: THREE.DstColorFactor,
            775: THREE.OneMinusDstColorFactor,
            776: THREE.SrcAlphaSaturateFactor
            // The followings are not supported by Three.js yet
            //32769: CONSTANT_COLOR,
            //32770: ONE_MINUS_CONSTANT_COLOR,
            //32771: CONSTANT_ALPHA,
            //32772: ONE_MINUS_CONSTANT_COLOR
        };
    
        var WEBGL_TYPE_SIZES = {
            'SCALAR': 1,
            'VEC2': 2,
            'VEC3': 3,
            'VEC4': 4,
            'MAT2': 4,
            'MAT3': 9,
            'MAT4': 16
        };
    
        var PATH_PROPERTIES = {
            scale: 'scale',
            translation: 'position',
            rotation: 'quaternion',
            weights: 'morphTargetInfluences'
        };
    
        var INTERPOLATION = {
            CUBICSPLINE: THREE.InterpolateSmooth, // We use custom interpolation GLTFCubicSplineInterpolation for CUBICSPLINE.
                                                  // KeyframeTrack.optimize() can't handle glTF Cubic Spline output values layout,
                                                  // using THREE.InterpolateSmooth for KeyframeTrack instantiation to prevent optimization.
                                                  // See KeyframeTrack.optimize() for the detail.
            LINEAR: THREE.InterpolateLinear,
            STEP: THREE.InterpolateDiscrete
        };
    
        var STATES_ENABLES = {
            2884: 'CULL_FACE',
            2929: 'DEPTH_TEST',
            3042: 'BLEND',
            3089: 'SCISSOR_TEST',
            32823: 'POLYGON_OFFSET_FILL',
            32926: 'SAMPLE_ALPHA_TO_COVERAGE'
        };
    
        var ALPHA_MODES = {
            OPAQUE: 'OPAQUE',
            MASK: 'MASK',
            BLEND: 'BLEND'
        };
    
        /* UTILITY FUNCTIONS */
    
        function resolveURL( url, path ) {
    
            // Invalid URL
            if ( typeof url !== 'string' || url === '' ) return '';
    
            // Absolute URL http://,https://,//
            if ( /^(https?:)?\/\//i.test( url ) ) return url;
    
            // Data URI
            if ( /^data:.*,.*$/i.test( url ) ) return url;
    
            // Blob URL
            if ( /^blob:.*$/i.test( url ) ) return url;
    
            // Relative URL
            return path + url;
    
        }
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material
         */
        function createDefaultMaterial() {
    
            return new THREE.MeshStandardMaterial( {
                color: 0xFFFFFF,
                emissive: 0x000000,
                metalness: 1,
                roughness: 1,
                transparent: false,
                depthTest: true,
                side: THREE.FrontSide
            } );
    
        }
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets
         *
         * TODO: Implement support for morph targets on TANGENT attribute.
         *
         * @param {THREE.Mesh} mesh
         * @param {GLTF.Mesh} meshDef
         * @param {GLTF.Primitive} primitiveDef
         * @param {Array<THREE.BufferAttribute>} accessors
         */
        function addMorphTargets( mesh, meshDef, primitiveDef, accessors ) {
    
            var geometry = mesh.geometry;
            var material = mesh.material;
    
            var targets = primitiveDef.targets;
            var morphAttributes = geometry.morphAttributes;
    
            morphAttributes.position = [];
            morphAttributes.normal = [];
    
            material.morphTargets = true;
    
            for ( var i = 0, il = targets.length; i < il; i ++ ) {
    
                var target = targets[ i ];
                var attributeName = 'morphTarget' + i;
    
                var positionAttribute, normalAttribute;
    
                if ( target.POSITION !== undefined ) {
    
                    // Three.js morph formula is
                    //   position
                    //     + weight0 * ( morphTarget0 - position )
                    //     + weight1 * ( morphTarget1 - position )
                    //     ...
                    // while the glTF one is
                    //   position
                    //     + weight0 * morphTarget0
                    //     + weight1 * morphTarget1
                    //     ...
                    // then adding position to morphTarget.
                    // So morphTarget value will depend on mesh's position, then cloning attribute
                    // for the case if attribute is shared among two or more meshes.
    
                    positionAttribute = cloneBufferAttribute( accessors[ target.POSITION ] );
                    var position = geometry.attributes.position;
    
                    for ( var j = 0, jl = positionAttribute.count; j < jl; j ++ ) {
    
                        positionAttribute.setXYZ(
                            j,
                            positionAttribute.getX( j ) + position.getX( j ),
                            positionAttribute.getY( j ) + position.getY( j ),
                            positionAttribute.getZ( j ) + position.getZ( j )
                        );
    
                    }
    
                } else if ( geometry.attributes.position ) {
    
                    // Copying the original position not to affect the final position.
                    // See the formula above.
                    positionAttribute = cloneBufferAttribute( geometry.attributes.position );
    
                }
    
                if ( positionAttribute !== undefined ) {
    
                    positionAttribute.name = attributeName;
                    morphAttributes.position.push( positionAttribute );
    
                }
    
                if ( target.NORMAL !== undefined ) {
    
                    material.morphNormals = true;
    
                    // see target.POSITION's comment
    
                    normalAttribute = cloneBufferAttribute( accessors[ target.NORMAL ] );
                    var normal = geometry.attributes.normal;
    
                    for ( var j = 0, jl = normalAttribute.count; j < jl; j ++ ) {
    
                        normalAttribute.setXYZ(
                            j,
                            normalAttribute.getX( j ) + normal.getX( j ),
                            normalAttribute.getY( j ) + normal.getY( j ),
                            normalAttribute.getZ( j ) + normal.getZ( j )
                        );
    
                    }
    
                } else if ( geometry.attributes.normal !== undefined ) {
    
                    normalAttribute = cloneBufferAttribute( geometry.attributes.normal );
    
                }
    
                if ( normalAttribute !== undefined ) {
    
                    normalAttribute.name = attributeName;
                    morphAttributes.normal.push( normalAttribute );
    
                }
    
            }
    
            mesh.updateMorphTargets();
    
            if ( meshDef.weights !== undefined ) {
    
                for ( var i = 0, il = meshDef.weights.length; i < il; i ++ ) {
    
                    mesh.morphTargetInfluences[ i ] = meshDef.weights[ i ];
    
                }
    
            }
    
        }
    
        function isPrimitiveEqual( a, b ) {
    
            if ( a.indices !== b.indices ) {
    
                return false;
    
            }
    
            var attribA = a.attributes || {};
            var attribB = b.attributes || {};
            var keysA = Object.keys( attribA );
            var keysB = Object.keys( attribB );
    
            if ( keysA.length !== keysB.length ) {
    
                return false;
    
            }
    
            for ( var i = 0, il = keysA.length; i < il; i ++ ) {
    
                var key = keysA[ i ];
    
                if ( attribA[ key ] !== attribB[ key ] ) {
    
                    return false;
    
                }
    
            }
    
            return true;
    
        }
    
        function getCachedGeometry( cache, newPrimitive ) {
    
            for ( var i = 0, il = cache.length; i < il; i ++ ) {
    
                var cached = cache[ i ];
    
                if ( isPrimitiveEqual( cached.primitive, newPrimitive ) ) {
    
                    return cached.geometry;
    
                }
    
            }
    
            return null;
    
        }
    
        function cloneBufferAttribute( attribute ) {
    
            if ( attribute.isInterleavedBufferAttribute ) {
    
                var count = attribute.count;
                var itemSize = attribute.itemSize;
                var array = attribute.array.slice( 0, count * itemSize );
    
                for ( var i = 0; i < count; ++ i ) {
    
                    array[ i ] = attribute.getX( i );
                    if ( itemSize >= 2 ) array[ i + 1 ] = attribute.getY( i );
                    if ( itemSize >= 3 ) array[ i + 2 ] = attribute.getZ( i );
                    if ( itemSize >= 4 ) array[ i + 3 ] = attribute.getW( i );
    
                }
    
                return new THREE.BufferAttribute( array, itemSize, attribute.normalized );
    
            }
    
            return attribute.clone();
    
        }
    
        /* GLTF PARSER */
    
        function GLTFParser( json, extensions, options ) {
    
            this.json = json || {};
            this.extensions = extensions || {};
            this.options = options || {};
    
            // loader object cache
            this.cache = new GLTFRegistry();
    
            // BufferGeometry caching
            this.primitiveCache = [];
    
            this.textureLoader = new THREE.TextureLoader( this.options.manager );
            this.textureLoader.setCrossOrigin( this.options.crossOrigin );
    
            this.fileLoader = new THREE.FileLoader( this.options.manager );
            this.fileLoader.setResponseType( 'arraybuffer' );
    
        }
    
        GLTFParser.prototype.parse = function ( onLoad, onError ) {
    
            var json = this.json;
    
            // Clear the loader cache
            this.cache.removeAll();
    
            // Mark the special nodes/meshes in json for efficient parse
            this.markDefs();
    
            // Fire the callback on complete
            this.getMultiDependencies( [
    
                'scene',
                'animation',
                'camera'
    
            ] ).then( function ( dependencies ) {
    
                var scenes = dependencies.scenes || [];
                var scene = scenes[ json.scene || 0 ];
                var animations = dependencies.animations || [];
                var asset = json.asset;
                var cameras = dependencies.cameras || [];
    
                onLoad( scene, scenes, cameras, animations, asset );
    
            } ).catch( onError );
    
        };
    
        /**
         * Marks the special nodes/meshes in json for efficient parse.
         */
        GLTFParser.prototype.markDefs = function () {
    
            var nodeDefs = this.json.nodes || [];
            var skinDefs = this.json.skins || [];
            var meshDefs = this.json.meshes || [];
    
            var meshReferences = {};
            var meshUses = {};
    
            // Nothing in the node definition indicates whether it is a Bone or an
            // Object3D. Use the skins' joint references to mark bones.
            for ( var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex ++ ) {
    
                var joints = skinDefs[ skinIndex ].joints;
    
                for ( var i = 0, il = joints.length; i < il; i ++ ) {
    
                    nodeDefs[ joints[ i ] ].isBone = true;
    
                }
    
            }
    
            // Meshes can (and should) be reused by multiple nodes in a glTF asset. To
            // avoid having more than one THREE.Mesh with the same name, count
            // references and rename instances below.
            //
            // Example: CesiumMilkTruck sample model reuses "Wheel" meshes.
            for ( var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex ++ ) {
    
                var nodeDef = nodeDefs[ nodeIndex ];
    
                if ( nodeDef.mesh !== undefined ) {
    
                    if ( meshReferences[ nodeDef.mesh ] === undefined ) {
    
                        meshReferences[ nodeDef.mesh ] = meshUses[ nodeDef.mesh ] = 0;
    
                    }
    
                    meshReferences[ nodeDef.mesh ] ++;
    
                    // Nothing in the mesh definition indicates whether it is
                    // a SkinnedMesh or Mesh. Use the node's mesh reference
                    // to mark SkinnedMesh if node has skin.
                    if ( nodeDef.skin !== undefined ) {
    
                        meshDefs[ nodeDef.mesh ].isSkinnedMesh = true;
    
                    }
    
                }
    
            }
    
            this.json.meshReferences = meshReferences;
            this.json.meshUses = meshUses;
    
        };
    
        /**
         * Requests the specified dependency asynchronously, with caching.
         * @param {string} type
         * @param {number} index
         * @return {Promise<Object>}
         */
        GLTFParser.prototype.getDependency = function ( type, index ) {
    
            var cacheKey = type + ':' + index;
            var dependency = this.cache.get( cacheKey );
    
            if ( ! dependency ) {
    
                var fnName = 'load' + type.charAt( 0 ).toUpperCase() + type.slice( 1 );
                dependency = this[ fnName ]( index );
                this.cache.add( cacheKey, dependency );
    
            }
    
            return dependency;
    
        };
    
        /**
         * Requests all dependencies of the specified type asynchronously, with caching.
         * @param {string} type
         * @return {Promise<Array<Object>>}
         */
        GLTFParser.prototype.getDependencies = function ( type ) {
    
            var dependencies = this.cache.get( type );
    
            if ( ! dependencies ) {
    
                var parser = this;
                var defs = this.json[ type + ( type === 'mesh' ? 'es' : 's' ) ] || [];
    
                dependencies = Promise.all( defs.map( function ( def, index ) {
    
                    return parser.getDependency( type, index );
    
                } ) );
    
                this.cache.add( type, dependencies );
    
            }
    
            return dependencies;
    
        };
    
        /**
         * Requests all multiple dependencies of the specified types asynchronously, with caching.
         * @param {Array<string>} types
         * @return {Promise<Object<Array<Object>>>}
         */
        GLTFParser.prototype.getMultiDependencies = function ( types ) {
    
            var results = {};
            var pendings = [];
    
            for ( var i = 0, il = types.length; i < il; i ++ ) {
    
                var type = types[ i ];
                var value = this.getDependencies( type );
    
                value = value.then( function ( key, value ) {
    
                    results[ key ] = value;
    
                }.bind( this, type + ( type === 'mesh' ? 'es' : 's' ) ) );
    
                pendings.push( value );
    
            }
    
            return Promise.all( pendings ).then( function () {
    
                return results;
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views
         * @param {number} bufferIndex
         * @return {Promise<ArrayBuffer>}
         */
        GLTFParser.prototype.loadBuffer = function ( bufferIndex ) {
    
            var bufferDef = this.json.buffers[ bufferIndex ];
            var loader = this.fileLoader;
    
            if ( bufferDef.type && bufferDef.type !== 'arraybuffer' ) {
    
                throw new Error( 'THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.' );
    
            }
    
            // If present, GLB container is required to be the first buffer.
            if ( bufferDef.uri === undefined && bufferIndex === 0 ) {
    
                return Promise.resolve( this.extensions[ EXTENSIONS.KHR_BINARY_GLTF ].body );
    
            }
    
            var options = this.options;
    
            return new Promise( function ( resolve, reject ) {
    
                loader.load( resolveURL( bufferDef.uri, options.path ), resolve, undefined, function () {
    
                    reject( new Error( 'THREE.GLTFLoader: Failed to load buffer "' + bufferDef.uri + '".' ) );
    
                } );
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views
         * @param {number} bufferViewIndex
         * @return {Promise<ArrayBuffer>}
         */
        GLTFParser.prototype.loadBufferView = function ( bufferViewIndex ) {
    
            var bufferViewDef = this.json.bufferViews[ bufferViewIndex ];
    
            return this.getDependency( 'buffer', bufferViewDef.buffer ).then( function ( buffer ) {
    
                var byteLength = bufferViewDef.byteLength || 0;
                var byteOffset = bufferViewDef.byteOffset || 0;
                return buffer.slice( byteOffset, byteOffset + byteLength );
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors
         * @param {number} accessorIndex
         * @return {Promise<THREE.BufferAttribute|THREE.InterleavedBufferAttribute>}
         */
        GLTFParser.prototype.loadAccessor = function ( accessorIndex ) {
    
            var parser = this;
            var json = this.json;
    
            var accessorDef = this.json.accessors[ accessorIndex ];
    
            var pendingBufferViews = [];
    
            if ( accessorDef.bufferView !== undefined ) {
    
                pendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.bufferView ) );
    
            } else {
    
                pendingBufferViews.push( null );
    
            }
    
            if ( accessorDef.sparse !== undefined ) {
    
                pendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.indices.bufferView ) );
                pendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.values.bufferView ) );
    
            }
    
            return Promise.all( pendingBufferViews ).then( function ( bufferViews ) {
    
                var bufferView = bufferViews[ 0 ];
    
                var itemSize = WEBGL_TYPE_SIZES[ accessorDef.type ];
                var TypedArray = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];
    
                // For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.
                var elementBytes = TypedArray.BYTES_PER_ELEMENT;
                var itemBytes = elementBytes * itemSize;
                var byteOffset = accessorDef.byteOffset || 0;
                var byteStride = json.bufferViews[ accessorDef.bufferView ].byteStride;
                var normalized = accessorDef.normalized === true;
                var array, bufferAttribute;
    
                // The buffer is not interleaved if the stride is the item size in bytes.
                if ( byteStride && byteStride !== itemBytes ) {
    
                    var ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType;
                    var ib = parser.cache.get( ibCacheKey );
    
                    if ( ! ib ) {
    
                        // Use the full buffer if it's interleaved.
                        array = new TypedArray( bufferView );
    
                        // Integer parameters to IB/IBA are in array elements, not bytes.
                        ib = new THREE.InterleavedBuffer( array, byteStride / elementBytes );
    
                        parser.cache.add( ibCacheKey, ib );
    
                    }
    
                    bufferAttribute = new THREE.InterleavedBufferAttribute( ib, itemSize, byteOffset / elementBytes, normalized );
    
                } else {
    
                    if ( bufferView === null ) {
    
                        array = new TypedArray( accessorDef.count * itemSize );
    
                    } else {
    
                        array = new TypedArray( bufferView, byteOffset, accessorDef.count * itemSize );
    
                    }
    
                    bufferAttribute = new THREE.BufferAttribute( array, itemSize, normalized );
    
                }
    
                // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors
                if ( accessorDef.sparse !== undefined ) {
    
                    var itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;
                    var TypedArrayIndices = WEBGL_COMPONENT_TYPES[ accessorDef.sparse.indices.componentType ];
    
                    var byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;
                    var byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;
    
                    var sparseIndices = new TypedArrayIndices( bufferViews[ 1 ], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices );
                    var sparseValues = new TypedArray( bufferViews[ 2 ], byteOffsetValues, accessorDef.sparse.count * itemSize );
    
                    if ( bufferView !== null ) {
    
                        // Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.
                        bufferAttribute.setArray( bufferAttribute.array.slice() );
    
                    }
    
                    for ( var i = 0, il = sparseIndices.length; i < il; i ++ ) {
    
                        var index = sparseIndices[ i ];
    
                        bufferAttribute.setX( index, sparseValues[ i * itemSize ] );
                        if ( itemSize >= 2 ) bufferAttribute.setY( index, sparseValues[ i * itemSize + 1 ] );
                        if ( itemSize >= 3 ) bufferAttribute.setZ( index, sparseValues[ i * itemSize + 2 ] );
                        if ( itemSize >= 4 ) bufferAttribute.setW( index, sparseValues[ i * itemSize + 3 ] );
                        if ( itemSize >= 5 ) throw new Error( 'THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.' );
    
                    }
    
                }
    
                return bufferAttribute;
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures
         * @param {number} textureIndex
         * @return {Promise<THREE.Texture>}
         */
        GLTFParser.prototype.loadTexture = function ( textureIndex ) {
    
            var parser = this;
            var json = this.json;
            var options = this.options;
            var textureLoader = this.textureLoader;
    
            var URL = window.URL || window.webkitURL;
    
            var textureDef = json.textures[ textureIndex ];
            var source = json.images[ textureDef.source ];
            var sourceURI = source.uri;
            var isObjectURL = false;
    
            if ( source.bufferView !== undefined ) {
    
                // Load binary image data from bufferView, if provided.
    
                sourceURI = parser.getDependency( 'bufferView', source.bufferView ).then( function ( bufferView ) {
    
                    isObjectURL = true;
                    var blob = new Blob( [ bufferView ], { type: source.mimeType } );
                    sourceURI = URL.createObjectURL( blob );
                    return sourceURI;
    
                } );
    
            }
    
            return Promise.resolve( sourceURI ).then( function ( sourceURI ) {
    
                // Load Texture resource.
    
                var loader = THREE.Loader.Handlers.get( sourceURI ) || textureLoader;
    
                return new Promise( function ( resolve, reject ) {
    
                    loader.load( resolveURL( sourceURI, options.path ), resolve, undefined, reject );
    
                } );
    
            } ).then( function ( texture ) {
    
                // Clean up resources and configure Texture.
    
                if ( isObjectURL === true ) {
    
                    URL.revokeObjectURL( sourceURI );
    
                }
    
                texture.flipY = false;
    
                if ( textureDef.name !== undefined ) texture.name = textureDef.name;
    
                texture.format = textureDef.format !== undefined ? WEBGL_TEXTURE_FORMATS[ textureDef.format ] : THREE.RGBAFormat;
    
                if ( textureDef.internalFormat !== undefined && texture.format !== WEBGL_TEXTURE_FORMATS[ textureDef.internalFormat ] ) {
    
                    console.warn( 'THREE.GLTFLoader: Three.js does not support texture internalFormat which is different from texture format. ' +
                                                'internalFormat will be forced to be the same value as format.' );
    
                }
    
                texture.type = textureDef.type !== undefined ? WEBGL_TEXTURE_DATATYPES[ textureDef.type ] : THREE.UnsignedByteType;
    
                var samplers = json.samplers || {};
                var sampler = samplers[ textureDef.sampler ] || {};
    
                texture.magFilter = WEBGL_FILTERS[ sampler.magFilter ] || THREE.LinearFilter;
                texture.minFilter = WEBGL_FILTERS[ sampler.minFilter ] || THREE.LinearMipMapLinearFilter;
                texture.wrapS = WEBGL_WRAPPINGS[ sampler.wrapS ] || THREE.RepeatWrapping;
                texture.wrapT = WEBGL_WRAPPINGS[ sampler.wrapT ] || THREE.RepeatWrapping;
    
                return texture;
    
            } );
    
        };
    
        /**
         * Asynchronously assigns a texture to the given material parameters.
         * @param {Object} materialParams
         * @param {string} textureName
         * @param {number} textureIndex
         * @return {Promise}
         */
        GLTFParser.prototype.assignTexture = function ( materialParams, textureName, textureIndex ) {
    
            return this.getDependency( 'texture', textureIndex ).then( function ( texture ) {
    
                materialParams[ textureName ] = texture;
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials
         * @param {number} materialIndex
         * @return {Promise<THREE.Material>}
         */
        GLTFParser.prototype.loadMaterial = function ( materialIndex ) {
    
            var parser = this;
            var json = this.json;
            var extensions = this.extensions;
            var materialDef = this.json.materials[ materialIndex ];
    
            var materialType;
            var materialParams = {};
            var materialExtensions = materialDef.extensions || {};
    
            var pending = [];
    
            if ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ] ) {
    
                var sgExtension = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ];
                materialType = sgExtension.getMaterialType( materialDef );
                pending.push( sgExtension.extendParams( materialParams, materialDef, parser ) );
    
            } else if ( materialDef.pbrMetallicRoughness !== undefined ) {
    
                // Specification:
                // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material
    
                materialType = THREE.MeshStandardMaterial;
    
                var metallicRoughness = materialDef.pbrMetallicRoughness;
    
                materialParams.color = new THREE.Color( 1.0, 1.0, 1.0 );
                materialParams.opacity = 1.0;
    
                if ( Array.isArray( metallicRoughness.baseColorFactor ) ) {
    
                    var array = metallicRoughness.baseColorFactor;
    
                    materialParams.color.fromArray( array );
                    materialParams.opacity = array[ 3 ];
    
                }
    
                if ( metallicRoughness.baseColorTexture !== undefined ) {
    
                    pending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture.index ) );
    
                }
    
                materialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1.0;
                materialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1.0;
    
                if ( metallicRoughness.metallicRoughnessTexture !== undefined ) {
    
                    var textureIndex = metallicRoughness.metallicRoughnessTexture.index;
                    pending.push( parser.assignTexture( materialParams, 'metalnessMap', textureIndex ) );
                    pending.push( parser.assignTexture( materialParams, 'roughnessMap', textureIndex ) );
    
                }
    
            } else {
    
                materialType = THREE.MeshPhongMaterial;
    
            }
    
            if ( materialDef.doubleSided === true ) {
    
                materialParams.side = THREE.DoubleSide;
    
            }
    
            var alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;
    
            if ( alphaMode === ALPHA_MODES.BLEND ) {
    
                materialParams.transparent = true;
    
            } else {
    
                materialParams.transparent = false;
    
                if ( alphaMode === ALPHA_MODES.MASK ) {
    
                    materialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;
    
                }
    
            }
    
            if ( materialDef.normalTexture !== undefined ) {
    
                pending.push( parser.assignTexture( materialParams, 'normalMap', materialDef.normalTexture.index ) );
    
                materialParams.normalScale = new THREE.Vector2( 1, 1 );
    
                if ( materialDef.normalTexture.scale !== undefined ) {
    
                    materialParams.normalScale.set( materialDef.normalTexture.scale, materialDef.normalTexture.scale );
    
                }
    
            }
    
            if ( materialDef.occlusionTexture !== undefined ) {
    
                pending.push( parser.assignTexture( materialParams, 'aoMap', materialDef.occlusionTexture.index ) );
    
                if ( materialDef.occlusionTexture.strength !== undefined ) {
    
                    materialParams.aoMapIntensity = materialDef.occlusionTexture.strength;
    
                }
    
            }
    
            if ( materialDef.emissiveFactor !== undefined ) {
    
                if ( materialType === THREE.MeshBasicMaterial ) {
    
                    materialParams.color = new THREE.Color().fromArray( materialDef.emissiveFactor );
    
                } else {
    
                    materialParams.emissive = new THREE.Color().fromArray( materialDef.emissiveFactor );
    
                }
    
            }
    
            if ( materialDef.emissiveTexture !== undefined ) {
    
                if ( materialType === THREE.MeshBasicMaterial ) {
    
                    pending.push( parser.assignTexture( materialParams, 'map', materialDef.emissiveTexture.index ) );
    
                } else {
    
                    pending.push( parser.assignTexture( materialParams, 'emissiveMap', materialDef.emissiveTexture.index ) );
    
                }
    
            }
    
            return Promise.all( pending ).then( function () {
    
                var material;
    
                if ( materialType === THREE.ShaderMaterial ) {
    
                    material = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].createMaterial( materialParams );
    
                } else {
    
                    material = new materialType( materialParams );
    
                }
    
                if ( materialDef.name !== undefined ) material.name = materialDef.name;
    
                // Normal map textures use OpenGL conventions:
                // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#materialnormaltexture
                if ( material.normalScale ) {
    
                    material.normalScale.x = - material.normalScale.x;
    
                }
    
                // emissiveTexture and baseColorTexture use sRGB encoding.
                if ( material.map ) material.map.encoding = THREE.sRGBEncoding;
                if ( material.emissiveMap ) material.emissiveMap.encoding = THREE.sRGBEncoding;
    
                if ( materialDef.extras ) material.userData = materialDef.extras;
    
                return material;
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry
         * @param {Array<Object>} primitives
         * @return {Promise<Array<THREE.BufferGeometry>>}
         */
        GLTFParser.prototype.loadGeometries = function ( primitives ) {
    
            var cache = this.primitiveCache;
    
            return this.getDependencies( 'accessor' ).then( function ( accessors ) {
    
                var geometries = [];
    
                for ( var i = 0, il = primitives.length; i < il; i ++ ) {
    
                    var primitive = primitives[ i ];
    
                    // See if we've already created this geometry
                    var cached = getCachedGeometry( cache, primitive );
    
                    if ( cached ) {
    
                        // Use the cached geometry if it exists
                        geometries.push( cached );
    
                    } else {
    
                        // Otherwise create a new geometry
                        var geometry = new THREE.BufferGeometry();
    
                        var attributes = primitive.attributes;
    
                        for ( var attributeId in attributes ) {
    
                            var attributeEntry = attributes[ attributeId ];
    
                            var bufferAttribute = accessors[ attributeEntry ];
    
                            switch ( attributeId ) {
    
                                case 'POSITION':
    
                                    geometry.addAttribute( 'position', bufferAttribute );
                                    break;
    
                                case 'NORMAL':
    
                                    geometry.addAttribute( 'normal', bufferAttribute );
                                    break;
    
                                case 'TEXCOORD_0':
                                case 'TEXCOORD0':
                                case 'TEXCOORD':
    
                                    geometry.addAttribute( 'uv', bufferAttribute );
                                    break;
    
                                case 'TEXCOORD_1':
    
                                    geometry.addAttribute( 'uv2', bufferAttribute );
                                    break;
    
                                case 'COLOR_0':
                                case 'COLOR0':
                                case 'COLOR':
    
                                    geometry.addAttribute( 'color', bufferAttribute );
                                    break;
    
                                case 'WEIGHTS_0':
                                case 'WEIGHT': // WEIGHT semantic deprecated.
    
                                    geometry.addAttribute( 'skinWeight', bufferAttribute );
                                    break;
    
                                case 'JOINTS_0':
                                case 'JOINT': // JOINT semantic deprecated.
    
                                    geometry.addAttribute( 'skinIndex', bufferAttribute );
                                    break;
    
                            }
    
                        }
    
                        if ( primitive.indices !== undefined ) {
    
                            geometry.setIndex( accessors[ primitive.indices ] );
    
                        }
    
                        // Cache this geometry
                        cache.push( {
    
                            primitive: primitive,
                            geometry: geometry
    
                        } );
    
                        geometries.push( geometry );
    
                    }
    
                }
    
                return geometries;
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes
         * @param {number} meshIndex
         * @return {Promise<THREE.Group|THREE.Mesh|THREE.SkinnedMesh>}
         */
        GLTFParser.prototype.loadMesh = function ( meshIndex ) {
    
            var scope = this;
            var json = this.json;
            var extensions = this.extensions;
    
            var meshDef = this.json.meshes[ meshIndex ];
    
            return this.getMultiDependencies( [
    
                'accessor',
                'material'
    
            ] ).then( function ( dependencies ) {
    
                var group = new THREE.Group();
    
                var primitives = meshDef.primitives;
    
                return scope.loadGeometries( primitives ).then( function ( geometries ) {
    
                    for ( var i = 0, il = primitives.length; i < il; i ++ ) {
    
                        var primitive = primitives[ i ];
                        var geometry = geometries[ i ];
    
                        var material = primitive.material === undefined
                            ? createDefaultMaterial()
                            : dependencies.materials[ primitive.material ];
    
                        if ( material.aoMap
                                && geometry.attributes.uv2 === undefined
                                && geometry.attributes.uv !== undefined ) {
    
                            console.log( 'THREE.GLTFLoader: Duplicating UVs to support aoMap.' );
                            geometry.addAttribute( 'uv2', new THREE.BufferAttribute( geometry.attributes.uv.array, 2 ) );
    
                        }
    
                        // If the material will be modified later on, clone it now.
                        var useVertexColors = geometry.attributes.color !== undefined;
                        var useFlatShading = geometry.attributes.normal === undefined;
                        var useSkinning = meshDef.isSkinnedMesh === true;
                        var useMorphTargets = primitive.targets !== undefined;
    
                        if ( useVertexColors || useFlatShading || useSkinning || useMorphTargets ) {
    
                            if ( material.isGLTFSpecularGlossinessMaterial ) {
    
                                var specGlossExtension = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ];
                                material = specGlossExtension.cloneMaterial( material );
    
                            } else {
    
                                material = material.clone();
    
                            }
    
                        }
    
                        if ( useVertexColors ) {
    
                            material.vertexColors = THREE.VertexColors;
                            material.needsUpdate = true;
    
                        }
    
                        if ( useFlatShading ) {
    
                            material.flatShading = true;
    
                        }
    
                        var mesh;
    
                        if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLES ||
                            primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ||
                            primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ||
                            primitive.mode === undefined ) {
    
                            if ( useSkinning ) {
    
                                mesh = new THREE.SkinnedMesh( geometry, material );
                                material.skinning = true;
    
                            } else {
    
                                mesh = new THREE.Mesh( geometry, material );
    
                            }
    
                            if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ) {
    
                                mesh.drawMode = THREE.TriangleStripDrawMode;
    
                            } else if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ) {
    
                                mesh.drawMode = THREE.TriangleFanDrawMode;
    
                            }
    
                        } else if ( primitive.mode === WEBGL_CONSTANTS.LINES ||
                            primitive.mode === WEBGL_CONSTANTS.LINE_STRIP ||
                            primitive.mode === WEBGL_CONSTANTS.LINE_LOOP ) {
    
                            var cacheKey = 'LineBasicMaterial:' + material.uuid;
    
                            var lineMaterial = scope.cache.get( cacheKey );
    
                            if ( ! lineMaterial ) {
    
                                lineMaterial = new THREE.LineBasicMaterial();
                                THREE.Material.prototype.copy.call( lineMaterial, material );
                                lineMaterial.color.copy( material.color );
                                lineMaterial.lights = false;  // LineBasicMaterial doesn't support lights yet
    
                                scope.cache.add( cacheKey, lineMaterial );
    
                            }
    
                            material = lineMaterial;
    
                            if ( primitive.mode === WEBGL_CONSTANTS.LINES ) {
    
                                mesh = new THREE.LineSegments( geometry, material );
    
                            } else if ( primitive.mode === WEBGL_CONSTANTS.LINE_STRIP ) {
    
                                mesh = new THREE.Line( geometry, material );
    
                            } else {
    
                                mesh = new THREE.LineLoop( geometry, material );
    
                            }
    
                        } else if ( primitive.mode === WEBGL_CONSTANTS.POINTS ) {
    
                            var cacheKey = 'PointsMaterial:' + material.uuid;
    
                            var pointsMaterial = scope.cache.get( cacheKey );
    
                            if ( ! pointsMaterial ) {
    
                                pointsMaterial = new THREE.PointsMaterial();
                                THREE.Material.prototype.copy.call( pointsMaterial, material );
                                pointsMaterial.color.copy( material.color );
                                pointsMaterial.map = material.map;
                                pointsMaterial.lights = false;  // PointsMaterial doesn't support lights yet
    
                                scope.cache.add( cacheKey, pointsMaterial );
    
                            }
    
                            material = pointsMaterial;
    
                            mesh = new THREE.Points( geometry, material );
    
                        } else {
    
                            throw new Error( 'THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode );
    
                        }
    
                        mesh.name = meshDef.name || ( 'mesh_' + meshIndex );
    
                        if ( useMorphTargets ) {
    
                            addMorphTargets( mesh, meshDef, primitive, dependencies.accessors );
    
                        }
    
                        if ( meshDef.extras !== undefined ) mesh.userData = meshDef.extras;
                        if ( primitive.extras !== undefined ) mesh.geometry.userData = primitive.extras;
    
                        // for Specular-Glossiness.
                        if ( material.isGLTFSpecularGlossinessMaterial === true ) {
    
                            mesh.onBeforeRender = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].refreshUniforms;
    
                        }
    
                        if ( primitives.length > 1 ) {
    
                            mesh.name += '_' + i;
    
                            group.add( mesh );
    
                        } else {
    
                            return mesh;
    
                        }
    
                    }
    
                    return group;
    
                } );
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras
         * @param {number} cameraIndex
         * @return {Promise<THREE.Camera>}
         */
        GLTFParser.prototype.loadCamera = function ( cameraIndex ) {
    
            var camera;
            var cameraDef = this.json.cameras[ cameraIndex ];
            var params = cameraDef[ cameraDef.type ];
    
            if ( ! params ) {
    
                console.warn( 'THREE.GLTFLoader: Missing camera parameters.' );
                return;
    
            }
    
            if ( cameraDef.type === 'perspective' ) {
    
                var aspectRatio = params.aspectRatio || 1;
                var xfov = params.yfov * aspectRatio;
    
                camera = new THREE.PerspectiveCamera( THREE.Math.radToDeg( xfov ), aspectRatio, params.znear || 1, params.zfar || 2e6 );
    
            } else if ( cameraDef.type === 'orthographic' ) {
    
                camera = new THREE.OrthographicCamera( params.xmag / - 2, params.xmag / 2, params.ymag / 2, params.ymag / - 2, params.znear, params.zfar );
    
            }
    
            if ( cameraDef.name !== undefined ) camera.name = cameraDef.name;
            if ( cameraDef.extras ) camera.userData = cameraDef.extras;
    
            return Promise.resolve( camera );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins
         * @param {number} skinIndex
         * @return {Promise<Object>}
         */
        GLTFParser.prototype.loadSkin = function ( skinIndex ) {
    
            var skinDef = this.json.skins[ skinIndex ];
    
            var skinEntry = { joints: skinDef.joints };
    
            if ( skinDef.inverseBindMatrices === undefined ) {
    
                return Promise.resolve( skinEntry );
    
            }
    
            return this.getDependency( 'accessor', skinDef.inverseBindMatrices ).then( function ( accessor ) {
    
                skinEntry.inverseBindMatrices = accessor;
    
                return skinEntry;
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations
         * @param {number} animationIndex
         * @return {Promise<THREE.AnimationClip>}
         */
        GLTFParser.prototype.loadAnimation = function ( animationIndex ) {
    
            var json = this.json;
    
            var animationDef = this.json.animations[ animationIndex ];
    
            return this.getMultiDependencies( [
    
                'accessor',
                'node'
    
            ] ).then( function ( dependencies ) {
    
                var tracks = [];
    
                for ( var i = 0, il = animationDef.channels.length; i < il; i ++ ) {
    
                    var channel = animationDef.channels[ i ];
                    var sampler = animationDef.samplers[ channel.sampler ];
    
                    if ( sampler ) {
    
                        var target = channel.target;
                        var name = target.node !== undefined ? target.node : target.id; // NOTE: target.id is deprecated.
                        var input = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.input ] : sampler.input;
                        var output = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.output ] : sampler.output;
    
                        var inputAccessor = dependencies.accessors[ input ];
                        var outputAccessor = dependencies.accessors[ output ];
    
                        var node = dependencies.nodes[ name ];
    
                        if ( node ) {
    
                            node.updateMatrix();
                            node.matrixAutoUpdate = true;
    
                            var TypedKeyframeTrack;
    
                            switch ( PATH_PROPERTIES[ target.path ] ) {
    
                                case PATH_PROPERTIES.weights:
    
                                    TypedKeyframeTrack = THREE.NumberKeyframeTrack;
                                    break;
    
                                case PATH_PROPERTIES.rotation:
    
                                    TypedKeyframeTrack = THREE.QuaternionKeyframeTrack;
                                    break;
    
                                case PATH_PROPERTIES.position:
                                case PATH_PROPERTIES.scale:
                                default:
    
                                    TypedKeyframeTrack = THREE.VectorKeyframeTrack;
                                    break;
    
                            }
    
                            var targetName = node.name ? node.name : node.uuid;
    
                            var interpolation = sampler.interpolation !== undefined ? INTERPOLATION[ sampler.interpolation ] : THREE.InterpolateLinear;
    
                            var targetNames = [];
    
                            if ( PATH_PROPERTIES[ target.path ] === PATH_PROPERTIES.weights ) {
    
                                // node should be THREE.Group here but
                                // PATH_PROPERTIES.weights(morphTargetInfluences) should be
                                // the property of a mesh object under node.
                                // So finding targets here.
    
                                node.traverse( function ( object ) {
    
                                    if ( object.isMesh === true && object.material.morphTargets === true ) {
    
                                        targetNames.push( object.name ? object.name : object.uuid );
    
                                    }
    
                                } );
    
                            } else {
    
                                targetNames.push( targetName );
    
                            }
    
                            // KeyframeTrack.optimize() will modify given 'times' and 'values'
                            // buffers before creating a truncated copy to keep. Because buffers may
                            // be reused by other tracks, make copies here.
                            for ( var j = 0, jl = targetNames.length; j < jl; j ++ ) {
    
                                var track = new TypedKeyframeTrack(
                                    targetNames[ j ] + '.' + PATH_PROPERTIES[ target.path ],
                                    THREE.AnimationUtils.arraySlice( inputAccessor.array, 0 ),
                                    THREE.AnimationUtils.arraySlice( outputAccessor.array, 0 ),
                                    interpolation
                                );
    
                                // Here is the trick to enable custom interpolation.
                                // Overrides .createInterpolant in a factory method which creates custom interpolation.
                                if ( sampler.interpolation === 'CUBICSPLINE' ) {
    
                                    track.createInterpolant = function ( result ) {
    
                                        // A CUBICSPLINE keyframe in glTF has three output values for each input value,
                                        // representing inTangent, splineVertex, and outTangent. As a result, track.getValueSize()
                                        // must be divided by three to get the interpolant's sampleSize argument.
    
                                        return new GLTFCubicSplineInterpolant( this.times, this.values, this.getValueSize() / 3, result );
    
                                    };
    
                                }
    
                                tracks.push( track );
    
                            }
    
                        }
    
                    }
    
                }
    
                var name = animationDef.name !== undefined ? animationDef.name : 'animation_' + animationIndex;
    
                return new THREE.AnimationClip( name, undefined, tracks );
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy
         * @param {number} nodeIndex
         * @return {Promise<THREE.Object3D>}
         */
        GLTFParser.prototype.loadNode = function ( nodeIndex ) {
    
            var json = this.json;
            var extensions = this.extensions;
    
            var meshReferences = this.json.meshReferences;
            var meshUses = this.json.meshUses;
    
            var nodeDef = this.json.nodes[ nodeIndex ];
    
            return this.getMultiDependencies( [
    
                'mesh',
                'skin',
                'camera'
    
            ] ).then( function ( dependencies ) {
    
                var node;
    
                if ( nodeDef.isBone === true ) {
    
                    node = new THREE.Bone();
    
                } else if ( nodeDef.mesh !== undefined ) {
    
                    var mesh = dependencies.meshes[ nodeDef.mesh ];
    
                    node = mesh.clone();
    
                    // for Specular-Glossiness
                    if ( mesh.isGroup === true ) {
    
                        for ( var i = 0, il = mesh.children.length; i < il; i ++ ) {
    
                            var child = mesh.children[ i ];
    
                            if ( child.material && child.material.isGLTFSpecularGlossinessMaterial === true ) {
    
                                node.children[ i ].onBeforeRender = child.onBeforeRender;
    
                            }
    
                        }
    
                    } else {
    
                        if ( mesh.material && mesh.material.isGLTFSpecularGlossinessMaterial === true ) {
    
                            node.onBeforeRender = mesh.onBeforeRender;
    
                        }
    
                    }
    
                    if ( meshReferences[ nodeDef.mesh ] > 1 ) {
    
                        node.name += '_instance_' + meshUses[ nodeDef.mesh ] ++;
    
                    }
    
                } else if ( nodeDef.camera !== undefined ) {
    
                    node = dependencies.cameras[ nodeDef.camera ];
    
                } else if ( nodeDef.extensions
                         && nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS ]
                         && nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS ].light !== undefined ) {
    
                    var lights = extensions[ EXTENSIONS.KHR_LIGHTS ].lights;
                    node = lights[ nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS ].light ];
    
                } else {
    
                    node = new THREE.Object3D();
    
                }
    
                if ( nodeDef.name !== undefined ) {
    
                    node.name = THREE.PropertyBinding.sanitizeNodeName( nodeDef.name );
    
                }
    
                if ( nodeDef.extras ) node.userData = nodeDef.extras;
    
                if ( nodeDef.matrix !== undefined ) {
    
                    var matrix = new THREE.Matrix4();
                    matrix.fromArray( nodeDef.matrix );
                    node.applyMatrix( matrix );
    
                } else {
    
                    if ( nodeDef.translation !== undefined ) {
    
                        node.position.fromArray( nodeDef.translation );
    
                    }
    
                    if ( nodeDef.rotation !== undefined ) {
    
                        node.quaternion.fromArray( nodeDef.rotation );
    
                    }
    
                    if ( nodeDef.scale !== undefined ) {
    
                        node.scale.fromArray( nodeDef.scale );
    
                    }
    
                }
    
                return node;
    
            } );
    
        };
    
        /**
         * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes
         * @param {number} sceneIndex
         * @return {Promise<THREE.Scene>}
         */
        GLTFParser.prototype.loadScene = function () {
    
            // scene node hierachy builder
    
            function buildNodeHierachy( nodeId, parentObject, json, allNodes, skins ) {
    
                var node = allNodes[ nodeId ];
                var nodeDef = json.nodes[ nodeId ];
    
                // build skeleton here as well
    
                if ( nodeDef.skin !== undefined ) {
    
                    var meshes = node.isGroup === true ? node.children : [ node ];
    
                    for ( var i = 0, il = meshes.length; i < il; i ++ ) {
    
                        var mesh = meshes[ i ];
                        var skinEntry = skins[ nodeDef.skin ];
    
                        var bones = [];
                        var boneInverses = [];
    
                        for ( var j = 0, jl = skinEntry.joints.length; j < jl; j ++ ) {
    
                            var jointId = skinEntry.joints[ j ];
                            var jointNode = allNodes[ jointId ];
    
                            if ( jointNode ) {
    
                                bones.push( jointNode );
    
                                var mat = new THREE.Matrix4();
    
                                if ( skinEntry.inverseBindMatrices !== undefined ) {
    
                                    mat.fromArray( skinEntry.inverseBindMatrices.array, j * 16 );
    
                                }
    
                                boneInverses.push( mat );
    
                            } else {
    
                                console.warn( 'THREE.GLTFLoader: Joint "%s" could not be found.', jointId );
    
                            }
    
                        }
    
                        mesh.bind( new THREE.Skeleton( bones, boneInverses ), mesh.matrixWorld );
    
                    }
    
                }
    
                // build node hierachy
    
                parentObject.add( node );
    
                if ( nodeDef.children ) {
    
                    var children = nodeDef.children;
    
                    for ( var i = 0, il = children.length; i < il; i ++ ) {
    
                        var child = children[ i ];
                        buildNodeHierachy( child, node, json, allNodes, skins );
    
                    }
    
                }
    
            }
    
            return function loadScene( sceneIndex ) {
    
                var json = this.json;
                var extensions = this.extensions;
                var sceneDef = this.json.scenes[ sceneIndex ];
    
                return this.getMultiDependencies( [
    
                    'node',
                    'skin'
    
                ] ).then( function ( dependencies ) {
    
                    var scene = new THREE.Scene();
                    if ( sceneDef.name !== undefined ) scene.name = sceneDef.name;
    
                    if ( sceneDef.extras ) scene.userData = sceneDef.extras;
    
                    var nodeIds = sceneDef.nodes || [];
    
                    for ( var i = 0, il = nodeIds.length; i < il; i ++ ) {
    
                        buildNodeHierachy( nodeIds[ i ], scene, json, dependencies.nodes, dependencies.skins );
    
                    }
    
                    // Ambient lighting, if present, is always attached to the scene root.
                    if ( sceneDef.extensions
                             && sceneDef.extensions[ EXTENSIONS.KHR_LIGHTS ]
                             && sceneDef.extensions[ EXTENSIONS.KHR_LIGHTS ].light !== undefined ) {
    
                        var lights = extensions[ EXTENSIONS.KHR_LIGHTS ].lights;
                        scene.add( lights[ sceneDef.extensions[ EXTENSIONS.KHR_LIGHTS ].light ] );
    
                    }
    
                    return scene;
    
                } );
    
            };
    
        }();
    
        return GLTFLoader;
    
    } )();
},{}],"form/lib/MTLLoader":[function(require,module,exports){
/**
 * Loads a Wavefront .mtl file specifying materials
 *
 * @author angelxuanchang
 */

THREE.MTLLoader = function ( manager ) {

	this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.MTLLoader.prototype = {

	constructor: THREE.MTLLoader,

	/**
	 * Loads and parses a MTL asset from a URL.
	 *
	 * @param {String} url - URL to the MTL file.
	 * @param {Function} [onLoad] - Callback invoked with the loaded object.
	 * @param {Function} [onProgress] - Callback for download progress.
	 * @param {Function} [onError] - Callback for download errors.
	 *
	 * @see setPath setTexturePath
	 *
	 * @note In order for relative texture references to resolve correctly
	 * you must call setPath and/or setTexturePath explicitly prior to load.
	 */
	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new THREE.FileLoader( this.manager );
		loader.setPath( this.path );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( text ) );

		}, onProgress, onError );

	},

	/**
	 * Set base path for resolving references.
	 * If set this path will be prepended to each loaded and found reference.
	 *
	 * @see setTexturePath
	 * @param {String} path
	 *
	 * @example
	 *     mtlLoader.setPath( 'assets/obj/' );
	 *     mtlLoader.load( 'my.mtl', ... );
	 */
	setPath: function ( path ) {

		this.path = path;

	},

	/**
	 * Set base path for resolving texture references.
	 * If set this path will be prepended found texture reference.
	 * If not set and setPath is, it will be used as texture base path.
	 *
	 * @see setPath
	 * @param {String} path
	 *
	 * @example
	 *     mtlLoader.setPath( 'assets/obj/' );
	 *     mtlLoader.setTexturePath( 'assets/textures/' );
	 *     mtlLoader.load( 'my.mtl', ... );
	 */
	setTexturePath: function ( path ) {

		this.texturePath = path;

	},

	setBaseUrl: function ( path ) {

		console.warn( 'THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead.' );

		this.setTexturePath( path );

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	},

	setMaterialOptions: function ( value ) {

		this.materialOptions = value;

	},

	/**
	 * Parses a MTL file.
	 *
	 * @param {String} text - Content of MTL file
	 * @return {THREE.MTLLoader.MaterialCreator}
	 *
	 * @see setPath setTexturePath
	 *
	 * @note In order for relative texture references to resolve correctly
	 * you must call setPath and/or setTexturePath explicitly prior to parse.
	 */
	parse: function ( text ) {

		var lines = text.split( '\n' );
		var info = {};
		var delimiter_pattern = /\s+/;
		var materialsInfo = {};

		for ( var i = 0; i < lines.length; i ++ ) {

			var line = lines[ i ];
			line = line.trim();

			if ( line.length === 0 || line.charAt( 0 ) === '#' ) {

				// Blank line or comment ignore
				continue;

			}

			var pos = line.indexOf( ' ' );

			var key = ( pos >= 0 ) ? line.substring( 0, pos ) : line;
			key = key.toLowerCase();

			var value = ( pos >= 0 ) ? line.substring( pos + 1 ) : '';
			value = value.trim();

			if ( key === 'newmtl' ) {

				// New material

				info = { name: value };
				materialsInfo[ value ] = info;

			} else if ( info ) {

				if ( key === 'ka' || key === 'kd' || key === 'ks' ) {

					var ss = value.split( delimiter_pattern, 3 );
					info[ key ] = [ parseFloat( ss[ 0 ] ), parseFloat( ss[ 1 ] ), parseFloat( ss[ 2 ] ) ];

				} else {

					info[ key ] = value;

				}

			}

		}

		var materialCreator = new THREE.MTLLoader.MaterialCreator( this.texturePath || this.path, this.materialOptions );
		materialCreator.setCrossOrigin( this.crossOrigin );
		materialCreator.setManager( this.manager );
		materialCreator.setMaterials( materialsInfo );
		return materialCreator;

	}

};

/**
 * Create a new THREE-MTLLoader.MaterialCreator
 * @param baseUrl - Url relative to which textures are loaded
 * @param options - Set of options on how to construct the materials
 *                  side: Which side to apply the material
 *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide
 *                  wrap: What type of wrapping to apply for textures
 *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping
 *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255
 *                                Default: false, assumed to be already normalized
 *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's
 *                                  Default: false
 * @constructor
 */

THREE.MTLLoader.MaterialCreator = function ( baseUrl, options ) {

	this.baseUrl = baseUrl || '';
	this.options = options;
	this.materialsInfo = {};
	this.materials = {};
	this.materialsArray = [];
	this.nameLookup = {};

	this.side = ( this.options && this.options.side ) ? this.options.side : THREE.FrontSide;
	this.wrap = ( this.options && this.options.wrap ) ? this.options.wrap : THREE.RepeatWrapping;

};

THREE.MTLLoader.MaterialCreator.prototype = {

	constructor: THREE.MTLLoader.MaterialCreator,

	crossOrigin: 'Anonymous',

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	},

	setManager: function ( value ) {

		this.manager = value;

	},

	setMaterials: function ( materialsInfo ) {

		this.materialsInfo = this.convert( materialsInfo );
		this.materials = {};
		this.materialsArray = [];
		this.nameLookup = {};

	},

	convert: function ( materialsInfo ) {

		if ( ! this.options ) return materialsInfo;

		var converted = {};

		for ( var mn in materialsInfo ) {

			// Convert materials info into normalized form based on options

			var mat = materialsInfo[ mn ];

			var covmat = {};

			converted[ mn ] = covmat;

			for ( var prop in mat ) {

				var save = true;
				var value = mat[ prop ];
				var lprop = prop.toLowerCase();

				switch ( lprop ) {

					case 'kd':
					case 'ka':
					case 'ks':

						// Diffuse color (color under white light) using RGB values

						if ( this.options && this.options.normalizeRGB ) {

							value = [ value[ 0 ] / 255, value[ 1 ] / 255, value[ 2 ] / 255 ];

						}

						if ( this.options && this.options.ignoreZeroRGBs ) {

							if ( value[ 0 ] === 0 && value[ 1 ] === 0 && value[ 2 ] === 0 ) {

								// ignore

								save = false;

							}

						}

						break;

					default:

						break;

				}

				if ( save ) {

					covmat[ lprop ] = value;

				}

			}

		}

		return converted;

	},

	preload: function () {

		for ( var mn in this.materialsInfo ) {

			this.create( mn );

		}

	},

	getIndex: function ( materialName ) {

		return this.nameLookup[ materialName ];

	},

	getAsArray: function () {

		var index = 0;

		for ( var mn in this.materialsInfo ) {

			this.materialsArray[ index ] = this.create( mn );
			this.nameLookup[ mn ] = index;
			index ++;

		}

		return this.materialsArray;

	},

	create: function ( materialName ) {

		if ( this.materials[ materialName ] === undefined ) {

			this.createMaterial_( materialName );

		}

		return this.materials[ materialName ];

	},

	createMaterial_: function ( materialName ) {

		// Create material

		var scope = this;
		var mat = this.materialsInfo[ materialName ];
		var params = {

			name: materialName,
			side: this.side

		};

		function resolveURL( baseUrl, url ) {

			if ( typeof url !== 'string' || url === '' )
				return '';

			// Absolute URL
			if ( /^https?:\/\//i.test( url ) ) return url;

			return baseUrl + url;

		}

		function setMapForType( mapType, value ) {

			if ( params[ mapType ] ) return; // Keep the first encountered texture

			var texParams = scope.getTextureParams( value, params );
			var map = scope.loadTexture( resolveURL( scope.baseUrl, texParams.url ) );

			map.repeat.copy( texParams.scale );
			map.offset.copy( texParams.offset );

			map.wrapS = scope.wrap;
			map.wrapT = scope.wrap;

			params[ mapType ] = map;

		}

		for ( var prop in mat ) {

			var value = mat[ prop ];
			var n;

			if ( value === '' ) continue;

			switch ( prop.toLowerCase() ) {

				// Ns is material specular exponent

				case 'kd':

					// Diffuse color (color under white light) using RGB values

					params.color = new THREE.Color().fromArray( value );

					break;

				case 'ks':

					// Specular color (color when light is reflected from shiny surface) using RGB values
					params.specular = new THREE.Color().fromArray( value );

					break;

				case 'map_kd':

					// Diffuse texture map

					setMapForType( "map", value );

					break;

				case 'map_ks':

					// Specular map

					setMapForType( "specularMap", value );

					break;

				case 'norm':

					setMapForType( "normalMap", value );

					break;

				case 'map_bump':
				case 'bump':

					// Bump texture map

					setMapForType( "bumpMap", value );

					break;

				case 'ns':

					// The specular exponent (defines the focus of the specular highlight)
					// A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.

					params.shininess = parseFloat( value );

					break;

				case 'd':
					n = parseFloat( value );

					if ( n < 1 ) {

						params.opacity = n;
						params.transparent = true;

					}

					break;

				case 'tr':
					n = parseFloat( value );

					if ( this.options && this.options.invertTrProperty ) n = 1 - n;

					if ( n < 1 ) {

						params.opacity = n;
						params.transparent = true;

					}

					break;

				default:
					break;

			}

		}

		this.materials[ materialName ] = new THREE.MeshPhongMaterial( params );
		return this.materials[ materialName ];

	},

	getTextureParams: function ( value, matParams ) {

		var texParams = {

			scale: new THREE.Vector2( 1, 1 ),
			offset: new THREE.Vector2( 0, 0 )

		 };

		var items = value.split( /\s+/ );
		var pos;

		pos = items.indexOf( '-bm' );

		if ( pos >= 0 ) {

			matParams.bumpScale = parseFloat( items[ pos + 1 ] );
			items.splice( pos, 2 );

		}

		pos = items.indexOf( '-s' );

		if ( pos >= 0 ) {

			texParams.scale.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );
			items.splice( pos, 4 ); // we expect 3 parameters here!

		}

		pos = items.indexOf( '-o' );

		if ( pos >= 0 ) {

			texParams.offset.set( parseFloat( items[ pos + 1 ] ), parseFloat( items[ pos + 2 ] ) );
			items.splice( pos, 4 ); // we expect 3 parameters here!

		}

		texParams.url = items.join( ' ' ).trim();
		return texParams;

	},

	loadTexture: function ( url, mapping, onLoad, onProgress, onError ) {

		var texture;
		var loader = THREE.Loader.Handlers.get( url );
		var manager = ( this.manager !== undefined ) ? this.manager : THREE.DefaultLoadingManager;

		if ( loader === null ) {

			loader = new THREE.TextureLoader( manager );

		}

		if ( loader.setCrossOrigin ) loader.setCrossOrigin( this.crossOrigin );
		texture = loader.load( url, onLoad, onProgress, onError );

		if ( mapping !== undefined ) texture.mapping = mapping;

		return texture;

	}

};

},{}],"form/lib/OBJLoader":[function(require,module,exports){
/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.OBJLoader = function ( manager ) {
    
        this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
    
        this.materials = null;
    
        this.regexp = {
            // v float float float
            vertex_pattern           : /^v\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,
            // vn float float float
            normal_pattern           : /^vn\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,
            // vt float float
            uv_pattern               : /^vt\s+([\d|\.|\+|\-|e|E]+)\s+([\d|\.|\+|\-|e|E]+)/,
            // f vertex vertex vertex
            face_vertex              : /^f\s+(-?\d+)\s+(-?\d+)\s+(-?\d+)(?:\s+(-?\d+))?/,
            // f vertex/uv vertex/uv vertex/uv
            face_vertex_uv           : /^f\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+))?/,
            // f vertex/uv/normal vertex/uv/normal vertex/uv/normal
            face_vertex_uv_normal    : /^f\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)\s+(-?\d+)\/(-?\d+)\/(-?\d+)(?:\s+(-?\d+)\/(-?\d+)\/(-?\d+))?/,
            // f vertex//normal vertex//normal vertex//normal
            face_vertex_normal       : /^f\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)\s+(-?\d+)\/\/(-?\d+)(?:\s+(-?\d+)\/\/(-?\d+))?/,
            // o object_name | g group_name
            object_pattern           : /^[og]\s*(.+)?/,
            // s boolean
            smoothing_pattern        : /^s\s+(\d+|on|off)/,
            // mtllib file_reference
            material_library_pattern : /^mtllib /,
            // usemtl material_name
            material_use_pattern     : /^usemtl /
        };
    
    };
    
    THREE.OBJLoader.prototype = {
    
        constructor: THREE.OBJLoader,
    
        load: function ( url, onLoad, onProgress, onError ) {
    
            var scope = this;
    
            var loader = new THREE.FileLoader( scope.manager );
            loader.setPath( this.path );
            loader.load( url, function ( text ) {
    
                onLoad( scope.parse( text ) );
    
            }, onProgress, onError );
    
        },
    
        setPath: function ( value ) {
    
            this.path = value;
    
        },
    
        setMaterials: function ( materials ) {
    
            this.materials = materials;
    
        },
    
        _createParserState : function () {
    
            var state = {
                objects  : [],
                object   : {},
    
                vertices : [],
                normals  : [],
                uvs      : [],
    
                materialLibraries : [],
    
                startObject: function ( name, fromDeclaration ) {
    
                    // If the current object (initial from reset) is not from a g/o declaration in the parsed
                    // file. We need to use it for the first parsed g/o to keep things in sync.
                    if ( this.object && this.object.fromDeclaration === false ) {
    
                        this.object.name = name;
                        this.object.fromDeclaration = ( fromDeclaration !== false );
                        return;
    
                    }
    
                    var previousMaterial = ( this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined );
    
                    if ( this.object && typeof this.object._finalize === 'function' ) {
    
                        this.object._finalize( true );
    
                    }
    
                    this.object = {
                        name : name || '',
                        fromDeclaration : ( fromDeclaration !== false ),
    
                        geometry : {
                            vertices : [],
                            normals  : [],
                            uvs      : []
                        },
                        materials : [],
                        smooth : true,
    
                        startMaterial : function( name, libraries ) {
    
                            var previous = this._finalize( false );
    
                            // New usemtl declaration overwrites an inherited material, except if faces were declared
                            // after the material, then it must be preserved for proper MultiMaterial continuation.
                            if ( previous && ( previous.inherited || previous.groupCount <= 0 ) ) {
    
                                this.materials.splice( previous.index, 1 );
    
                            }
    
                            var material = {
                                index      : this.materials.length,
                                name       : name || '',
                                mtllib     : ( Array.isArray( libraries ) && libraries.length > 0 ? libraries[ libraries.length - 1 ] : '' ),
                                smooth     : ( previous !== undefined ? previous.smooth : this.smooth ),
                                groupStart : ( previous !== undefined ? previous.groupEnd : 0 ),
                                groupEnd   : -1,
                                groupCount : -1,
                                inherited  : false,
    
                                clone : function( index ) {
                                    var cloned = {
                                        index      : ( typeof index === 'number' ? index : this.index ),
                                        name       : this.name,
                                        mtllib     : this.mtllib,
                                        smooth     : this.smooth,
                                        groupStart : 0,
                                        groupEnd   : -1,
                                        groupCount : -1,
                                        inherited  : false
                                    };
                                    cloned.clone = this.clone.bind(cloned);
                                    return cloned;
                                }
                            };
    
                            this.materials.push( material );
    
                            return material;
    
                        },
    
                        currentMaterial : function() {
    
                            if ( this.materials.length > 0 ) {
                                return this.materials[ this.materials.length - 1 ];
                            }
    
                            return undefined;
    
                        },
    
                        _finalize : function( end ) {
    
                            var lastMultiMaterial = this.currentMaterial();
                            if ( lastMultiMaterial && lastMultiMaterial.groupEnd === -1 ) {
    
                                lastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;
                                lastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;
                                lastMultiMaterial.inherited = false;
    
                            }
    
                            // Ignore objects tail materials if no face declarations followed them before a new o/g started.
                            if ( end && this.materials.length > 1 ) {
    
                                for ( var mi = this.materials.length - 1; mi >= 0; mi-- ) {
                                    if ( this.materials[mi].groupCount <= 0 ) {
                                        this.materials.splice( mi, 1 );
                                    }
                                }
    
                            }
    
                            // Guarantee at least one empty material, this makes the creation later more straight forward.
                            if ( end && this.materials.length === 0 ) {
    
                                this.materials.push({
                                    name   : '',
                                    smooth : this.smooth
                                });
    
                            }
    
                            return lastMultiMaterial;
    
                        }
                    };
    
                    // Inherit previous objects material.
                    // Spec tells us that a declared material must be set to all objects until a new material is declared.
                    // If a usemtl declaration is encountered while this new object is being parsed, it will
                    // overwrite the inherited material. Exception being that there was already face declarations
                    // to the inherited material, then it will be preserved for proper MultiMaterial continuation.
    
                    if ( previousMaterial && previousMaterial.name && typeof previousMaterial.clone === "function" ) {
    
                        var declared = previousMaterial.clone( 0 );
                        declared.inherited = true;
                        this.object.materials.push( declared );
    
                    }
    
                    this.objects.push( this.object );
    
                },
    
                finalize : function() {
    
                    if ( this.object && typeof this.object._finalize === 'function' ) {
    
                        this.object._finalize( true );
    
                    }
    
                },
    
                parseVertexIndex: function ( value, len ) {
    
                    var index = parseInt( value, 10 );
                    return ( index >= 0 ? index - 1 : index + len / 3 ) * 3;
    
                },
    
                parseNormalIndex: function ( value, len ) {
    
                    var index = parseInt( value, 10 );
                    return ( index >= 0 ? index - 1 : index + len / 3 ) * 3;
    
                },
    
                parseUVIndex: function ( value, len ) {
    
                    var index = parseInt( value, 10 );
                    return ( index >= 0 ? index - 1 : index + len / 2 ) * 2;
    
                },
    
                addVertex: function ( a, b, c ) {
    
                    var src = this.vertices;
                    var dst = this.object.geometry.vertices;
    
                    dst.push( src[ a + 0 ] );
                    dst.push( src[ a + 1 ] );
                    dst.push( src[ a + 2 ] );
                    dst.push( src[ b + 0 ] );
                    dst.push( src[ b + 1 ] );
                    dst.push( src[ b + 2 ] );
                    dst.push( src[ c + 0 ] );
                    dst.push( src[ c + 1 ] );
                    dst.push( src[ c + 2 ] );
    
                },
    
                addVertexLine: function ( a ) {
    
                    var src = this.vertices;
                    var dst = this.object.geometry.vertices;
    
                    dst.push( src[ a + 0 ] );
                    dst.push( src[ a + 1 ] );
                    dst.push( src[ a + 2 ] );
    
                },
    
                addNormal : function ( a, b, c ) {
    
                    var src = this.normals;
                    var dst = this.object.geometry.normals;
    
                    dst.push( src[ a + 0 ] );
                    dst.push( src[ a + 1 ] );
                    dst.push( src[ a + 2 ] );
                    dst.push( src[ b + 0 ] );
                    dst.push( src[ b + 1 ] );
                    dst.push( src[ b + 2 ] );
                    dst.push( src[ c + 0 ] );
                    dst.push( src[ c + 1 ] );
                    dst.push( src[ c + 2 ] );
    
                },
    
                addUV: function ( a, b, c ) {
    
                    var src = this.uvs;
                    var dst = this.object.geometry.uvs;
    
                    dst.push( src[ a + 0 ] );
                    dst.push( src[ a + 1 ] );
                    dst.push( src[ b + 0 ] );
                    dst.push( src[ b + 1 ] );
                    dst.push( src[ c + 0 ] );
                    dst.push( src[ c + 1 ] );
    
                },
    
                addUVLine: function ( a ) {
    
                    var src = this.uvs;
                    var dst = this.object.geometry.uvs;
    
                    dst.push( src[ a + 0 ] );
                    dst.push( src[ a + 1 ] );
    
                },
    
                addFace: function ( a, b, c, d, ua, ub, uc, ud, na, nb, nc, nd ) {
    
                    var vLen = this.vertices.length;
    
                    var ia = this.parseVertexIndex( a, vLen );
                    var ib = this.parseVertexIndex( b, vLen );
                    var ic = this.parseVertexIndex( c, vLen );
                    var id;
    
                    if ( d === undefined ) {
    
                        this.addVertex( ia, ib, ic );
    
                    } else {
    
                        id = this.parseVertexIndex( d, vLen );
    
                        this.addVertex( ia, ib, id );
                        this.addVertex( ib, ic, id );
    
                    }
    
                    if ( ua !== undefined ) {
    
                        var uvLen = this.uvs.length;
    
                        ia = this.parseUVIndex( ua, uvLen );
                        ib = this.parseUVIndex( ub, uvLen );
                        ic = this.parseUVIndex( uc, uvLen );
    
                        if ( d === undefined ) {
    
                            this.addUV( ia, ib, ic );
    
                        } else {
    
                            id = this.parseUVIndex( ud, uvLen );
    
                            this.addUV( ia, ib, id );
                            this.addUV( ib, ic, id );
    
                        }
    
                    }
    
                    if ( na !== undefined ) {
    
                        // Normals are many times the same. If so, skip function call and parseInt.
                        var nLen = this.normals.length;
                        ia = this.parseNormalIndex( na, nLen );
    
                        ib = na === nb ? ia : this.parseNormalIndex( nb, nLen );
                        ic = na === nc ? ia : this.parseNormalIndex( nc, nLen );
    
                        if ( d === undefined ) {
    
                            this.addNormal( ia, ib, ic );
    
                        } else {
    
                            id = this.parseNormalIndex( nd, nLen );
    
                            this.addNormal( ia, ib, id );
                            this.addNormal( ib, ic, id );
    
                        }
    
                    }
    
                },
    
                addLineGeometry: function ( vertices, uvs ) {
    
                    this.object.geometry.type = 'Line';
    
                    var vLen = this.vertices.length;
                    var uvLen = this.uvs.length;
    
                    for ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {
    
                        this.addVertexLine( this.parseVertexIndex( vertices[ vi ], vLen ) );
    
                    }
    
                    for ( var uvi = 0, l = uvs.length; uvi < l; uvi ++ ) {
    
                        this.addUVLine( this.parseUVIndex( uvs[ uvi ], uvLen ) );
    
                    }
    
                }
    
            };
    
            state.startObject( '', false );
    
            return state;
    
        },
    
        parse: function ( text ) {
    
            console.time( 'OBJLoader' );
    
            var state = this._createParserState();
    
            if ( text.indexOf( '\r\n' ) !== - 1 ) {
    
                // This is faster than String.split with regex that splits on both
                text = text.replace( /\r\n/g, '\n' );
    
            }
    
            if ( text.indexOf( '\\\n' ) !== - 1) {
    
                // join lines separated by a line continuation character (\)
                text = text.replace( /\\\n/g, '' );
    
            }
    
            var lines = text.split( '\n' );
            var line = '', lineFirstChar = '', lineSecondChar = '';
            var lineLength = 0;
            var result = [];
    
            // Faster to just trim left side of the line. Use if available.
            var trimLeft = ( typeof ''.trimLeft === 'function' );
    
            for ( var i = 0, l = lines.length; i < l; i ++ ) {
    
                line = lines[ i ];
    
                line = trimLeft ? line.trimLeft() : line.trim();
    
                lineLength = line.length;
    
                if ( lineLength === 0 ) continue;
    
                lineFirstChar = line.charAt( 0 );
    
                // @todo invoke passed in handler if any
                if ( lineFirstChar === '#' ) continue;
    
                if ( lineFirstChar === 'v' ) {
    
                    lineSecondChar = line.charAt( 1 );
    
                    if ( lineSecondChar === ' ' && ( result = this.regexp.vertex_pattern.exec( line ) ) !== null ) {
    
                        // 0                  1      2      3
                        // ["v 1.0 2.0 3.0", "1.0", "2.0", "3.0"]
    
                        state.vertices.push(
                            parseFloat( result[ 1 ] ),
                            parseFloat( result[ 2 ] ),
                            parseFloat( result[ 3 ] )
                        );
    
                    } else if ( lineSecondChar === 'n' && ( result = this.regexp.normal_pattern.exec( line ) ) !== null ) {
    
                        // 0                   1      2      3
                        // ["vn 1.0 2.0 3.0", "1.0", "2.0", "3.0"]
    
                        state.normals.push(
                            parseFloat( result[ 1 ] ),
                            parseFloat( result[ 2 ] ),
                            parseFloat( result[ 3 ] )
                        );
    
                    } else if ( lineSecondChar === 't' && ( result = this.regexp.uv_pattern.exec( line ) ) !== null ) {
    
                        // 0               1      2
                        // ["vt 0.1 0.2", "0.1", "0.2"]
    
                        state.uvs.push(
                            parseFloat( result[ 1 ] ),
                            parseFloat( result[ 2 ] )
                        );
    
                    } else {
    
                        throw new Error( "Unexpected vertex/normal/uv line: '" + line  + "'" );
    
                    }
    
                } else if ( lineFirstChar === "f" ) {
    
                    if ( ( result = this.regexp.face_vertex_uv_normal.exec( line ) ) !== null ) {
    
                        // f vertex/uv/normal vertex/uv/normal vertex/uv/normal
                        // 0                        1    2    3    4    5    6    7    8    9   10         11         12
                        // ["f 1/1/1 2/2/2 3/3/3", "1", "1", "1", "2", "2", "2", "3", "3", "3", undefined, undefined, undefined]
    
                        state.addFace(
                            result[ 1 ], result[ 4 ], result[ 7 ], result[ 10 ],
                            result[ 2 ], result[ 5 ], result[ 8 ], result[ 11 ],
                            result[ 3 ], result[ 6 ], result[ 9 ], result[ 12 ]
                        );
    
                    } else if ( ( result = this.regexp.face_vertex_uv.exec( line ) ) !== null ) {
    
                        // f vertex/uv vertex/uv vertex/uv
                        // 0                  1    2    3    4    5    6   7          8
                        // ["f 1/1 2/2 3/3", "1", "1", "2", "2", "3", "3", undefined, undefined]
    
                        state.addFace(
                            result[ 1 ], result[ 3 ], result[ 5 ], result[ 7 ],
                            result[ 2 ], result[ 4 ], result[ 6 ], result[ 8 ]
                        );
    
                    } else if ( ( result = this.regexp.face_vertex_normal.exec( line ) ) !== null ) {
    
                        // f vertex//normal vertex//normal vertex//normal
                        // 0                     1    2    3    4    5    6   7          8
                        // ["f 1//1 2//2 3//3", "1", "1", "2", "2", "3", "3", undefined, undefined]
    
                        state.addFace(
                            result[ 1 ], result[ 3 ], result[ 5 ], result[ 7 ],
                            undefined, undefined, undefined, undefined,
                            result[ 2 ], result[ 4 ], result[ 6 ], result[ 8 ]
                        );
    
                    } else if ( ( result = this.regexp.face_vertex.exec( line ) ) !== null ) {
    
                        // f vertex vertex vertex
                        // 0            1    2    3   4
                        // ["f 1 2 3", "1", "2", "3", undefined]
    
                        state.addFace(
                            result[ 1 ], result[ 2 ], result[ 3 ], result[ 4 ]
                        );
    
                    } else {
    
                        throw new Error( "Unexpected face line: '" + line  + "'" );
    
                    }
    
                } else if ( lineFirstChar === "l" ) {
    
                    var lineParts = line.substring( 1 ).trim().split( " " );
                    var lineVertices = [], lineUVs = [];
    
                    if ( line.indexOf( "/" ) === - 1 ) {
    
                        lineVertices = lineParts;
    
                    } else {
    
                        for ( var li = 0, llen = lineParts.length; li < llen; li ++ ) {
    
                            var parts = lineParts[ li ].split( "/" );
    
                            if ( parts[ 0 ] !== "" ) lineVertices.push( parts[ 0 ] );
                            if ( parts[ 1 ] !== "" ) lineUVs.push( parts[ 1 ] );
    
                        }
    
                    }
                    state.addLineGeometry( lineVertices, lineUVs );
    
                } else if ( ( result = this.regexp.object_pattern.exec( line ) ) !== null ) {
    
                    // o object_name
                    // or
                    // g group_name
    
                    // WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869
                    // var name = result[ 0 ].substr( 1 ).trim();
                    var name = ( " " + result[ 0 ].substr( 1 ).trim() ).substr( 1 );
    
                    state.startObject( name );
    
                } else if ( this.regexp.material_use_pattern.test( line ) ) {
    
                    // material
    
                    state.object.startMaterial( line.substring( 7 ).trim(), state.materialLibraries );
    
                } else if ( this.regexp.material_library_pattern.test( line ) ) {
    
                    // mtl file
    
                    state.materialLibraries.push( line.substring( 7 ).trim() );
    
                } else if ( ( result = this.regexp.smoothing_pattern.exec( line ) ) !== null ) {
    
                    // smooth shading
    
                    // @todo Handle files that have varying smooth values for a set of faces inside one geometry,
                    // but does not define a usemtl for each face set.
                    // This should be detected and a dummy material created (later MultiMaterial and geometry groups).
                    // This requires some care to not create extra material on each smooth value for "normal" obj files.
                    // where explicit usemtl defines geometry groups.
                    // Example asset: examples/models/obj/cerberus/Cerberus.obj
    
                    var value = result[ 1 ].trim().toLowerCase();
                    state.object.smooth = ( value === '1' || value === 'on' );
    
                    var material = state.object.currentMaterial();
                    if ( material ) {
    
                        material.smooth = state.object.smooth;
    
                    }
    
                } else {
    
                    // Handle null terminated files without exception
                    if ( line === '\0' ) continue;
    
                    throw new Error( "Unexpected line: '" + line  + "'" );
    
                }
    
            }
    
            state.finalize();
    
            var container = new THREE.Group();
            container.materialLibraries = [].concat( state.materialLibraries );
    
            for ( var i = 0, l = state.objects.length; i < l; i ++ ) {
    
                var object = state.objects[ i ];
                var geometry = object.geometry;
                var materials = object.materials;
                var isLine = ( geometry.type === 'Line' );
    
                // Skip o/g line declarations that did not follow with any faces
                if ( geometry.vertices.length === 0 ) continue;
    
                var buffergeometry = new THREE.BufferGeometry();
    
                buffergeometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( geometry.vertices ), 3 ) );
    
                if ( geometry.normals.length > 0 ) {
    
                    buffergeometry.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( geometry.normals ), 3 ) );
    
                } else {
    
                    buffergeometry.computeVertexNormals();
    
                }
    
                if ( geometry.uvs.length > 0 ) {
    
                    buffergeometry.addAttribute( 'uv', new THREE.BufferAttribute( new Float32Array( geometry.uvs ), 2 ) );
    
                }
    
                // Create materials
    
                var createdMaterials = [];
    
                for ( var mi = 0, miLen = materials.length; mi < miLen ; mi++ ) {
    
                    var sourceMaterial = materials[mi];
                    var material = undefined;
    
                    if ( this.materials !== null ) {
    
                        material = this.materials.create( sourceMaterial.name );
    
                        // mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.
                        if ( isLine && material && ! ( material instanceof THREE.LineBasicMaterial ) ) {
    
                            var materialLine = new THREE.LineBasicMaterial();
                            materialLine.copy( material );
                            material = materialLine;
    
                        }
    
                    }
    
                    if ( ! material ) {
    
                        material = ( ! isLine ? new THREE.MeshPhongMaterial() : new THREE.LineBasicMaterial() );
                        material.name = sourceMaterial.name;
    
                    }
    
                    material.shading = sourceMaterial.smooth ? THREE.SmoothShading : THREE.FlatShading;
    
                    createdMaterials.push(material);
    
                }
    
                // Create mesh
    
                var mesh;
    
                if ( createdMaterials.length > 1 ) {
    
                    for ( var mi = 0, miLen = materials.length; mi < miLen ; mi++ ) {
    
                        var sourceMaterial = materials[mi];
                        buffergeometry.addGroup( sourceMaterial.groupStart, sourceMaterial.groupCount, mi );
    
                    }
    
                    mesh = ( ! isLine ? new THREE.Mesh( buffergeometry, createdMaterials ) : new THREE.LineSegments( buffergeometry, createdMaterials ) );
    
                } else {
    
                    mesh = ( ! isLine ? new THREE.Mesh( buffergeometry, createdMaterials[ 0 ] ) : new THREE.LineSegments( buffergeometry, createdMaterials[ 0 ] ) );
                }
    
                mesh.name = object.name;
    
                container.add( mesh );
    
            }
    
            console.timeEnd( 'OBJLoader' );
    
            return container;
    
        }
    
    };    
},{}],"form/lib/OrbitControls":[function(require,module,exports){
/**
 * @author qiao / https://github.com/qiao
 * @author mrdoob / http://mrdoob.com
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author erich666 / http://erichaines.com
 */

// This set of controls performs orbiting, dollying (zooming), and panning.
// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
//
//    Orbit - left mouse / touch: one finger move
//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish
//    Pan - right mouse, or arrow keys / touch: three finger swipe

THREE.OrbitControls = function ( object, domElement ) {

	this.object = object;

	this.domElement = ( domElement !== undefined ) ? domElement : document;

	// Set to false to disable this control
	this.enabled = true;

	// "target" sets the location of focus, where the object orbits around
	this.target = new THREE.Vector3();

	// How far you can dolly in and out ( PerspectiveCamera only )
	this.minDistance = 0;
	this.maxDistance = Infinity;

	// How far you can zoom in and out ( OrthographicCamera only )
	this.minZoom = 0;
	this.maxZoom = Infinity;

	// How far you can orbit vertically, upper and lower limits.
	// Range is 0 to Math.PI radians.
	this.minPolarAngle = 0; // radians
	this.maxPolarAngle = Math.PI; // radians

	// How far you can orbit horizontally, upper and lower limits.
	// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].
	this.minAzimuthAngle = - Infinity; // radians
	this.maxAzimuthAngle = Infinity; // radians

	// Set to true to enable damping (inertia)
	// If damping is enabled, you must call controls.update() in your animation loop
	this.enableDamping = false;
	this.dampingFactor = 0.25;

	// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
	// Set to false to disable zooming
	this.enableZoom = true;
	this.zoomSpeed = 1.0;

	// Set to false to disable rotating
	this.enableRotate = true;
	this.rotateSpeed = 1.0;

	// Set to false to disable panning
	this.enablePan = true;
	this.keyPanSpeed = 7.0;	// pixels moved per arrow key push

	// Set to true to automatically rotate around the target
	// If auto-rotate is enabled, you must call controls.update() in your animation loop
	this.autoRotate = false;
	this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60

	// Set to false to disable use of the keys
	this.enableKeys = true;

	// The four arrow keys
	this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };

	// Mouse buttons
	this.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };

	// for reset
	this.target0 = this.target.clone();
	this.position0 = this.object.position.clone();
	this.zoom0 = this.object.zoom;

	//
	// public methods
	//

	this.getPolarAngle = function () {

		return spherical.phi;

	};

	this.getAzimuthalAngle = function () {

		return spherical.theta;

	};

	this.saveState = function () {

		scope.target0.copy( scope.target );
		scope.position0.copy( scope.object.position );
		scope.zoom0 = scope.object.zoom;

	};

	this.reset = function () {

		scope.target.copy( scope.target0 );
		scope.object.position.copy( scope.position0 );
		scope.object.zoom = scope.zoom0;

		scope.object.updateProjectionMatrix();
		scope.dispatchEvent( changeEvent );

		scope.update();

		state = STATE.NONE;

	};

	// this method is exposed, but perhaps it would be better if we can make it private...
	this.update = function () {

		var offset = new THREE.Vector3();

		// so camera.up is the orbit axis
		var quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );
		var quatInverse = quat.clone().inverse();

		var lastPosition = new THREE.Vector3();
		var lastQuaternion = new THREE.Quaternion();

		return function update() {

			var position = scope.object.position;

			offset.copy( position ).sub( scope.target );

			// rotate offset to "y-axis-is-up" space
			offset.applyQuaternion( quat );

			// angle from z-axis around y-axis
			spherical.setFromVector3( offset );

			if ( scope.autoRotate && state === STATE.NONE ) {

				rotateLeft( getAutoRotationAngle() );

			}

			spherical.theta += sphericalDelta.theta;
			spherical.phi += sphericalDelta.phi;

			// restrict theta to be between desired limits
			spherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );

			// restrict phi to be between desired limits
			spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );

			spherical.makeSafe();


			spherical.radius *= scale;

			// restrict radius to be between desired limits
			spherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );

			// move target to panned location
			scope.target.add( panOffset );

			offset.setFromSpherical( spherical );

			// rotate offset back to "camera-up-vector-is-up" space
			offset.applyQuaternion( quatInverse );

			position.copy( scope.target ).add( offset );

			scope.object.lookAt( scope.target );

			if ( scope.enableDamping === true ) {

				sphericalDelta.theta *= ( 1 - scope.dampingFactor );
				sphericalDelta.phi *= ( 1 - scope.dampingFactor );

			} else {

				sphericalDelta.set( 0, 0, 0 );

			}

			scale = 1;
			panOffset.set( 0, 0, 0 );

			// update condition is:
			// min(camera displacement, camera rotation in radians)^2 > EPS
			// using small-angle approximation cos(x/2) = 1 - x^2 / 8

			if ( zoomChanged ||
				lastPosition.distanceToSquared( scope.object.position ) > EPS ||
				8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {

				scope.dispatchEvent( changeEvent );

				lastPosition.copy( scope.object.position );
				lastQuaternion.copy( scope.object.quaternion );
				zoomChanged = false;

				return true;

			}

			return false;

		};

	}();

	this.dispose = function () {

		scope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );
		scope.domElement.removeEventListener( 'mousedown', onMouseDown, false );
		scope.domElement.removeEventListener( 'wheel', onMouseWheel, false );

		scope.domElement.removeEventListener( 'touchstart', onTouchStart, false );
		scope.domElement.removeEventListener( 'touchend', onTouchEnd, false );
		scope.domElement.removeEventListener( 'touchmove', onTouchMove, false );

		document.removeEventListener( 'mousemove', onMouseMove, false );
		document.removeEventListener( 'mouseup', onMouseUp, false );

		window.removeEventListener( 'keydown', onKeyDown, false );

		//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?

	};

	//
	// internals
	//

	var scope = this;

	var changeEvent = { type: 'change' };
	var startEvent = { type: 'start' };
	var endEvent = { type: 'end' };

	var STATE = { NONE: - 1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_DOLLY: 4, TOUCH_PAN: 5 };

	var state = STATE.NONE;

	var EPS = 0.000001;

	// current position in spherical coordinates
	var spherical = new THREE.Spherical();
	var sphericalDelta = new THREE.Spherical();

	var scale = 1;
	var panOffset = new THREE.Vector3();
	var zoomChanged = false;

	var rotateStart = new THREE.Vector2();
	var rotateEnd = new THREE.Vector2();
	var rotateDelta = new THREE.Vector2();

	var panStart = new THREE.Vector2();
	var panEnd = new THREE.Vector2();
	var panDelta = new THREE.Vector2();

	var dollyStart = new THREE.Vector2();
	var dollyEnd = new THREE.Vector2();
	var dollyDelta = new THREE.Vector2();

	function getAutoRotationAngle() {

		return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

	}

	function getZoomScale() {

		return Math.pow( 0.95, scope.zoomSpeed );

	}

	function rotateLeft( angle ) {

		sphericalDelta.theta -= angle;

	}

	function rotateUp( angle ) {

		sphericalDelta.phi -= angle;

	}

	var panLeft = function () {

		var v = new THREE.Vector3();

		return function panLeft( distance, objectMatrix ) {

			v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix
			v.multiplyScalar( - distance );

			panOffset.add( v );

		};

	}();

	var panUp = function () {

		var v = new THREE.Vector3();

		return function panUp( distance, objectMatrix ) {

			v.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix
			v.multiplyScalar( distance );

			panOffset.add( v );

		};

	}();

	// deltaX and deltaY are in pixels; right and down are positive
	var pan = function () {

		var offset = new THREE.Vector3();

		return function pan( deltaX, deltaY ) {

			var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

			if ( scope.object.isPerspectiveCamera ) {

				// perspective
				var position = scope.object.position;
				offset.copy( position ).sub( scope.target );
				var targetDistance = offset.length();

				// half of the fov is center to top of screen
				targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );

				// we actually don't use screenWidth, since perspective camera is fixed to screen height
				panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );
				panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );

			} else if ( scope.object.isOrthographicCamera ) {

				// orthographic
				panLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );
				panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );

			} else {

				// camera neither orthographic nor perspective
				console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );
				scope.enablePan = false;

			}

		};

	}();

	function dollyIn( dollyScale ) {

		if ( scope.object.isPerspectiveCamera ) {

			scale /= dollyScale;

		} else if ( scope.object.isOrthographicCamera ) {

			scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );
			scope.object.updateProjectionMatrix();
			zoomChanged = true;

		} else {

			console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
			scope.enableZoom = false;

		}

	}

	function dollyOut( dollyScale ) {

		if ( scope.object.isPerspectiveCamera ) {

			scale *= dollyScale;

		} else if ( scope.object.isOrthographicCamera ) {

			scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );
			scope.object.updateProjectionMatrix();
			zoomChanged = true;

		} else {

			console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
			scope.enableZoom = false;

		}

	}

	//
	// event callbacks - update the object state
	//

	function handleMouseDownRotate( event ) {

		//console.log( 'handleMouseDownRotate' );

		rotateStart.set( event.clientX, event.clientY );

	}

	function handleMouseDownDolly( event ) {

		//console.log( 'handleMouseDownDolly' );

		dollyStart.set( event.clientX, event.clientY );

	}

	function handleMouseDownPan( event ) {

		//console.log( 'handleMouseDownPan' );

		panStart.set( event.clientX, event.clientY );

	}

	function handleMouseMoveRotate( event ) {

		//console.log( 'handleMouseMoveRotate' );

		rotateEnd.set( event.clientX, event.clientY );
		rotateDelta.subVectors( rotateEnd, rotateStart );

		var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

		// rotating across whole screen goes 360 degrees around
		rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );

		// rotating up and down along whole screen attempts to go 360, but limited to 180
		rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

		rotateStart.copy( rotateEnd );

		scope.update();

	}

	function handleMouseMoveDolly( event ) {

		//console.log( 'handleMouseMoveDolly' );

		dollyEnd.set( event.clientX, event.clientY );

		dollyDelta.subVectors( dollyEnd, dollyStart );

		if ( dollyDelta.y > 0 ) {

			dollyIn( getZoomScale() );

		} else if ( dollyDelta.y < 0 ) {

			dollyOut( getZoomScale() );

		}

		dollyStart.copy( dollyEnd );

		scope.update();

	}

	function handleMouseMovePan( event ) {

		//console.log( 'handleMouseMovePan' );

		panEnd.set( event.clientX, event.clientY );

		panDelta.subVectors( panEnd, panStart );

		pan( panDelta.x, panDelta.y );

		panStart.copy( panEnd );

		scope.update();

	}

	function handleMouseUp( event ) {

		// console.log( 'handleMouseUp' );

	}

	function handleMouseWheel( event ) {

		// console.log( 'handleMouseWheel' );

		if ( event.deltaY < 0 ) {

			dollyOut( getZoomScale() );

		} else if ( event.deltaY > 0 ) {

			dollyIn( getZoomScale() );

		}

		scope.update();

	}

	function handleKeyDown( event ) {

		//console.log( 'handleKeyDown' );

		switch ( event.keyCode ) {

			case scope.keys.UP:
				pan( 0, scope.keyPanSpeed );
				scope.update();
				break;

			case scope.keys.BOTTOM:
				pan( 0, - scope.keyPanSpeed );
				scope.update();
				break;

			case scope.keys.LEFT:
				pan( scope.keyPanSpeed, 0 );
				scope.update();
				break;

			case scope.keys.RIGHT:
				pan( - scope.keyPanSpeed, 0 );
				scope.update();
				break;

		}

	}

	function handleTouchStartRotate( event ) {

		//console.log( 'handleTouchStartRotate' );

		rotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

	}

	function handleTouchStartDolly( event ) {

		//console.log( 'handleTouchStartDolly' );

		var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
		var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

		var distance = Math.sqrt( dx * dx + dy * dy );

		dollyStart.set( 0, distance );

	}

	function handleTouchStartPan( event ) {

		//console.log( 'handleTouchStartPan' );

		panStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

	}

	function handleTouchMoveRotate( event ) {

		//console.log( 'handleTouchMoveRotate' );

		rotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );
		rotateDelta.subVectors( rotateEnd, rotateStart );

		var element = scope.domElement === document ? scope.domElement.body : scope.domElement;

		// rotating across whole screen goes 360 degrees around
		rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );

		// rotating up and down along whole screen attempts to go 360, but limited to 180
		rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );

		rotateStart.copy( rotateEnd );

		scope.update();

	}

	function handleTouchMoveDolly( event ) {

		//console.log( 'handleTouchMoveDolly' );

		var dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;
		var dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;

		var distance = Math.sqrt( dx * dx + dy * dy );

		dollyEnd.set( 0, distance );

		dollyDelta.subVectors( dollyEnd, dollyStart );

		if ( dollyDelta.y > 0 ) {

			dollyOut( getZoomScale() );

		} else if ( dollyDelta.y < 0 ) {

			dollyIn( getZoomScale() );

		}

		dollyStart.copy( dollyEnd );

		scope.update();

	}

	function handleTouchMovePan( event ) {

		//console.log( 'handleTouchMovePan' );

		panEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );

		panDelta.subVectors( panEnd, panStart );

		pan( panDelta.x, panDelta.y );

		panStart.copy( panEnd );

		scope.update();

	}

	function handleTouchEnd( event ) {

		//console.log( 'handleTouchEnd' );

	}

	//
	// event handlers - FSM: listen for events and reset state
	//

	function onMouseDown( event ) {

		if ( scope.enabled === false ) return;

		event.preventDefault();

		switch ( event.button ) {

			case scope.mouseButtons.ORBIT:

				if ( scope.enableRotate === false ) return;

				handleMouseDownRotate( event );

				state = STATE.ROTATE;

				break;

			case scope.mouseButtons.ZOOM:

				if ( scope.enableZoom === false ) return;

				handleMouseDownDolly( event );

				state = STATE.DOLLY;

				break;

			case scope.mouseButtons.PAN:

				if ( scope.enablePan === false ) return;

				handleMouseDownPan( event );

				state = STATE.PAN;

				break;

		}

		if ( state !== STATE.NONE ) {

			document.addEventListener( 'mousemove', onMouseMove, false );
			document.addEventListener( 'mouseup', onMouseUp, false );

			scope.dispatchEvent( startEvent );

		}

	}

	function onMouseMove( event ) {

		if ( scope.enabled === false ) return;

		event.preventDefault();

		switch ( state ) {

			case STATE.ROTATE:

				if ( scope.enableRotate === false ) return;

				handleMouseMoveRotate( event );

				break;

			case STATE.DOLLY:

				if ( scope.enableZoom === false ) return;

				handleMouseMoveDolly( event );

				break;

			case STATE.PAN:

				if ( scope.enablePan === false ) return;

				handleMouseMovePan( event );

				break;

		}

	}

	function onMouseUp( event ) {

		if ( scope.enabled === false ) return;

		handleMouseUp( event );

		document.removeEventListener( 'mousemove', onMouseMove, false );
		document.removeEventListener( 'mouseup', onMouseUp, false );

		scope.dispatchEvent( endEvent );

		state = STATE.NONE;

	}

	function onMouseWheel( event ) {

		if ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;

		event.preventDefault();

		scope.dispatchEvent( startEvent );

		handleMouseWheel( event );

		scope.dispatchEvent( endEvent );

	}

	function onKeyDown( event ) {

		if ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;

		handleKeyDown( event );

	}

	function onTouchStart( event ) {

		if ( scope.enabled === false ) return;

		switch ( event.touches.length ) {

			case 1:	// one-fingered touch: rotate

				if ( scope.enableRotate === false ) return;

				handleTouchStartRotate( event );

				state = STATE.TOUCH_ROTATE;

				break;

			case 2:	// two-fingered touch: dolly

				if ( scope.enableZoom === false ) return;

				handleTouchStartDolly( event );

				state = STATE.TOUCH_DOLLY;

				break;

			case 3: // three-fingered touch: pan

				if ( scope.enablePan === false ) return;

				handleTouchStartPan( event );

				state = STATE.TOUCH_PAN;

				break;

			default:

				state = STATE.NONE;

		}

		if ( state !== STATE.NONE ) {

			scope.dispatchEvent( startEvent );

		}

	}

	function onTouchMove( event ) {

		if ( scope.enabled === false ) return;

		event.preventDefault();

		switch ( event.touches.length ) {

			case 1: // one-fingered touch: rotate

				if ( scope.enableRotate === false ) return;
				if ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...

				handleTouchMoveRotate( event );

				break;

			case 2: // two-fingered touch: dolly

				if ( scope.enableZoom === false ) return;
				if ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...

				handleTouchMoveDolly( event );

				break;

			case 3: // three-fingered touch: pan

				if ( scope.enablePan === false ) return;
				if ( state !== STATE.TOUCH_PAN ) return; // is this needed?...

				handleTouchMovePan( event );

				break;

			default:

				state = STATE.NONE;

		}

	}

	function onTouchEnd( event ) {

		if ( scope.enabled === false ) return;

		handleTouchEnd( event );

		scope.dispatchEvent( endEvent );

		state = STATE.NONE;

	}

	function onContextMenu( event ) {

		if ( scope.enabled === false ) return;

		event.preventDefault();

	}

	//

	scope.domElement.addEventListener( 'contextmenu', onContextMenu, false );

	scope.domElement.addEventListener( 'mousedown', onMouseDown, false );
	scope.domElement.addEventListener( 'wheel', onMouseWheel, false );

	scope.domElement.addEventListener( 'touchstart', onTouchStart, false );
	scope.domElement.addEventListener( 'touchend', onTouchEnd, false );
	scope.domElement.addEventListener( 'touchmove', onTouchMove, false );

	window.addEventListener( 'keydown', onKeyDown, false );

	// force an update at start

	this.update();

};

THREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );
THREE.OrbitControls.prototype.constructor = THREE.OrbitControls;

Object.defineProperties( THREE.OrbitControls.prototype, {

	center: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .center has been renamed to .target' );
			return this.target;

		}

	},

	// backward compatibility

	noZoom: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );
			return ! this.enableZoom;

		},

		set: function ( value ) {

			console.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );
			this.enableZoom = ! value;

		}

	},

	noRotate: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );
			return ! this.enableRotate;

		},

		set: function ( value ) {

			console.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );
			this.enableRotate = ! value;

		}

	},

	noPan: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );
			return ! this.enablePan;

		},

		set: function ( value ) {

			console.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );
			this.enablePan = ! value;

		}

	},

	noKeys: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );
			return ! this.enableKeys;

		},

		set: function ( value ) {

			console.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );
			this.enableKeys = ! value;

		}

	},

	staticMoving: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );
			return ! this.enableDamping;

		},

		set: function ( value ) {

			console.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );
			this.enableDamping = ! value;

		}

	},

	dynamicDampingFactor: {

		get: function () {

			console.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );
			return this.dampingFactor;

		},

		set: function ( value ) {

			console.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );
			this.dampingFactor = value;

		}

	}

} );

},{}],"form/lib/inflate-min":[function(require,module,exports){
/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */(function() {'use strict';var l=void 0,aa=this;function r(c,d){var a=c.split("."),b=aa;!(a[0]in b)&&b.execScript&&b.execScript("var "+a[0]);for(var e;a.length&&(e=a.shift());)!a.length&&d!==l?b[e]=d:b=b[e]?b[e]:b[e]={}};var t="undefined"!==typeof Uint8Array&&"undefined"!==typeof Uint16Array&&"undefined"!==typeof Uint32Array&&"undefined"!==typeof DataView;function v(c){var d=c.length,a=0,b=Number.POSITIVE_INFINITY,e,f,g,h,k,m,n,p,s,x;for(p=0;p<d;++p)c[p]>a&&(a=c[p]),c[p]<b&&(b=c[p]);e=1<<a;f=new (t?Uint32Array:Array)(e);g=1;h=0;for(k=2;g<=a;){for(p=0;p<d;++p)if(c[p]===g){m=0;n=h;for(s=0;s<g;++s)m=m<<1|n&1,n>>=1;x=g<<16|p;for(s=m;s<e;s+=k)f[s]=x;++h}++g;h<<=1;k<<=1}return[f,a,b]};function w(c,d){this.g=[];this.h=32768;this.d=this.f=this.a=this.l=0;this.input=t?new Uint8Array(c):c;this.m=!1;this.i=y;this.r=!1;if(d||!(d={}))d.index&&(this.a=d.index),d.bufferSize&&(this.h=d.bufferSize),d.bufferType&&(this.i=d.bufferType),d.resize&&(this.r=d.resize);switch(this.i){case A:this.b=32768;this.c=new (t?Uint8Array:Array)(32768+this.h+258);break;case y:this.b=0;this.c=new (t?Uint8Array:Array)(this.h);this.e=this.z;this.n=this.v;this.j=this.w;break;default:throw Error("invalid inflate mode");
}}var A=0,y=1,B={t:A,s:y};
w.prototype.k=function(){for(;!this.m;){var c=C(this,3);c&1&&(this.m=!0);c>>>=1;switch(c){case 0:var d=this.input,a=this.a,b=this.c,e=this.b,f=d.length,g=l,h=l,k=b.length,m=l;this.d=this.f=0;if(a+1>=f)throw Error("invalid uncompressed block header: LEN");g=d[a++]|d[a++]<<8;if(a+1>=f)throw Error("invalid uncompressed block header: NLEN");h=d[a++]|d[a++]<<8;if(g===~h)throw Error("invalid uncompressed block header: length verify");if(a+g>d.length)throw Error("input buffer is broken");switch(this.i){case A:for(;e+
g>b.length;){m=k-e;g-=m;if(t)b.set(d.subarray(a,a+m),e),e+=m,a+=m;else for(;m--;)b[e++]=d[a++];this.b=e;b=this.e();e=this.b}break;case y:for(;e+g>b.length;)b=this.e({p:2});break;default:throw Error("invalid inflate mode");}if(t)b.set(d.subarray(a,a+g),e),e+=g,a+=g;else for(;g--;)b[e++]=d[a++];this.a=a;this.b=e;this.c=b;break;case 1:this.j(ba,ca);break;case 2:for(var n=C(this,5)+257,p=C(this,5)+1,s=C(this,4)+4,x=new (t?Uint8Array:Array)(D.length),S=l,T=l,U=l,u=l,M=l,F=l,z=l,q=l,V=l,q=0;q<s;++q)x[D[q]]=
C(this,3);if(!t){q=s;for(s=x.length;q<s;++q)x[D[q]]=0}S=v(x);u=new (t?Uint8Array:Array)(n+p);q=0;for(V=n+p;q<V;)switch(M=E(this,S),M){case 16:for(z=3+C(this,2);z--;)u[q++]=F;break;case 17:for(z=3+C(this,3);z--;)u[q++]=0;F=0;break;case 18:for(z=11+C(this,7);z--;)u[q++]=0;F=0;break;default:F=u[q++]=M}T=t?v(u.subarray(0,n)):v(u.slice(0,n));U=t?v(u.subarray(n)):v(u.slice(n));this.j(T,U);break;default:throw Error("unknown BTYPE: "+c);}}return this.n()};
var G=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],D=t?new Uint16Array(G):G,H=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],I=t?new Uint16Array(H):H,J=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],K=t?new Uint8Array(J):J,L=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],da=t?new Uint16Array(L):L,ea=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,
13,13],N=t?new Uint8Array(ea):ea,O=new (t?Uint8Array:Array)(288),P,fa;P=0;for(fa=O.length;P<fa;++P)O[P]=143>=P?8:255>=P?9:279>=P?7:8;var ba=v(O),Q=new (t?Uint8Array:Array)(30),R,ga;R=0;for(ga=Q.length;R<ga;++R)Q[R]=5;var ca=v(Q);function C(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h;b<d;){if(f>=g)throw Error("input buffer is broken");a|=e[f++]<<b;b+=8}h=a&(1<<d)-1;c.f=a>>>d;c.d=b-d;c.a=f;return h}
function E(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h=d[0],k=d[1],m,n;b<k&&!(f>=g);)a|=e[f++]<<b,b+=8;m=h[a&(1<<k)-1];n=m>>>16;if(n>b)throw Error("invalid code length: "+n);c.f=a>>n;c.d=b-n;c.a=f;return m&65535}
w.prototype.j=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length-258,f,g,h,k;256!==(f=E(this,c));)if(256>f)b>=e&&(this.b=b,a=this.e(),b=this.b),a[b++]=f;else{g=f-257;k=I[g];0<K[g]&&(k+=C(this,K[g]));f=E(this,d);h=da[f];0<N[f]&&(h+=C(this,N[f]));b>=e&&(this.b=b,a=this.e(),b=this.b);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};
w.prototype.w=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length,f,g,h,k;256!==(f=E(this,c));)if(256>f)b>=e&&(a=this.e(),e=a.length),a[b++]=f;else{g=f-257;k=I[g];0<K[g]&&(k+=C(this,K[g]));f=E(this,d);h=da[f];0<N[f]&&(h+=C(this,N[f]));b+k>e&&(a=this.e(),e=a.length);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};
w.prototype.e=function(){var c=new (t?Uint8Array:Array)(this.b-32768),d=this.b-32768,a,b,e=this.c;if(t)c.set(e.subarray(32768,c.length));else{a=0;for(b=c.length;a<b;++a)c[a]=e[a+32768]}this.g.push(c);this.l+=c.length;if(t)e.set(e.subarray(d,d+32768));else for(a=0;32768>a;++a)e[a]=e[d+a];this.b=32768;return e};
w.prototype.z=function(c){var d,a=this.input.length/this.a+1|0,b,e,f,g=this.input,h=this.c;c&&("number"===typeof c.p&&(a=c.p),"number"===typeof c.u&&(a+=c.u));2>a?(b=(g.length-this.a)/this.o[2],f=258*(b/2)|0,e=f<h.length?h.length+f:h.length<<1):e=h.length*a;t?(d=new Uint8Array(e),d.set(h)):d=h;return this.c=d};
w.prototype.n=function(){var c=0,d=this.c,a=this.g,b,e=new (t?Uint8Array:Array)(this.l+(this.b-32768)),f,g,h,k;if(0===a.length)return t?this.c.subarray(32768,this.b):this.c.slice(32768,this.b);f=0;for(g=a.length;f<g;++f){b=a[f];h=0;for(k=b.length;h<k;++h)e[c++]=b[h]}f=32768;for(g=this.b;f<g;++f)e[c++]=d[f];this.g=[];return this.buffer=e};
w.prototype.v=function(){var c,d=this.b;t?this.r?(c=new Uint8Array(d),c.set(this.c.subarray(0,d))):c=this.c.subarray(0,d):(this.c.length>d&&(this.c.length=d),c=this.c);return this.buffer=c};function W(c,d){var a,b;this.input=c;this.a=0;if(d||!(d={}))d.index&&(this.a=d.index),d.verify&&(this.A=d.verify);a=c[this.a++];b=c[this.a++];switch(a&15){case ha:this.method=ha;break;default:throw Error("unsupported compression method");}if(0!==((a<<8)+b)%31)throw Error("invalid fcheck flag:"+((a<<8)+b)%31);if(b&32)throw Error("fdict flag is not supported");this.q=new w(c,{index:this.a,bufferSize:d.bufferSize,bufferType:d.bufferType,resize:d.resize})}
W.prototype.k=function(){var c=this.input,d,a;d=this.q.k();this.a=this.q.a;if(this.A){a=(c[this.a++]<<24|c[this.a++]<<16|c[this.a++]<<8|c[this.a++])>>>0;var b=d;if("string"===typeof b){var e=b.split(""),f,g;f=0;for(g=e.length;f<g;f++)e[f]=(e[f].charCodeAt(0)&255)>>>0;b=e}for(var h=1,k=0,m=b.length,n,p=0;0<m;){n=1024<m?1024:m;m-=n;do h+=b[p++],k+=h;while(--n);h%=65521;k%=65521}if(a!==(k<<16|h)>>>0)throw Error("invalid adler-32 checksum");}return d};var ha=8;r("Zlib.Inflate",W);r("Zlib.Inflate.prototype.decompress",W.prototype.k);var X={ADAPTIVE:B.s,BLOCK:B.t},Y,Z,$,ia;if(Object.keys)Y=Object.keys(X);else for(Z in Y=[],$=0,X)Y[$++]=Z;$=0;for(ia=Y.length;$<ia;++$)Z=Y[$],r("Zlib.Inflate.BufferType."+Z,X[Z]);}).call(this);
},{}],"form/lib/three-min":[function(require,module,exports){
// threejs.org/license
(function(l,za){"object"===typeof exports&&"undefined"!==typeof module?za(exports):"function"===typeof define&&define.amd?define(["exports"],za):za(l.THREE={})})(this,function(l){function za(){}function D(a,b){this.x=a||0;this.y=b||0}function O(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];0<arguments.length&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}function ha(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._w=void 0!==d?d:1}function p(a,
    b,c){this.x=a||0;this.y=b||0;this.z=c||0}function ma(){this.elements=[1,0,0,0,1,0,0,0,1];0<arguments.length&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}function U(a,b,c,d,e,f,g,h,k,m){Object.defineProperty(this,"id",{value:Af++});this.uuid=Q.generateUUID();this.name="";this.image=void 0!==a?a:U.DEFAULT_IMAGE;this.mipmaps=[];this.mapping=void 0!==b?b:U.DEFAULT_MAPPING;this.wrapS=void 0!==c?c:1001;this.wrapT=void 0!==d?d:1001;this.magFilter=void 0!==
    e?e:1006;this.minFilter=void 0!==f?f:1008;this.anisotropy=void 0!==k?k:1;this.format=void 0!==g?g:1023;this.type=void 0!==h?h:1009;this.offset=new D(0,0);this.repeat=new D(1,1);this.center=new D(0,0);this.rotation=0;this.matrixAutoUpdate=!0;this.matrix=new ma;this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.unpackAlignment=4;this.encoding=void 0!==m?m:3E3;this.version=0;this.onUpdate=null}function aa(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1}function kb(a,
    b,c){this.uuid=Q.generateUUID();this.width=a;this.height=b;this.scissor=new aa(0,0,a,b);this.scissorTest=!1;this.viewport=new aa(0,0,a,b);c=c||{};void 0===c.minFilter&&(c.minFilter=1006);this.texture=new U(void 0,void 0,c.wrapS,c.wrapT,c.magFilter,c.minFilter,c.format,c.type,c.anisotropy,c.encoding);this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:!0;this.depthTexture=void 0!==c.depthTexture?c.depthTexture:null}function Jb(a,b,c){kb.call(this,
    a,b,c);this.activeMipMapLevel=this.activeCubeFace=0}function lb(a,b,c,d,e,f,g,h,k,m,q,n){U.call(this,null,f,g,h,k,m,d,e,q,n);this.image={data:a,width:b,height:c};this.magFilter=void 0!==k?k:1003;this.minFilter=void 0!==m?m:1003;this.flipY=this.generateMipmaps=!1;this.unpackAlignment=1}function db(a,b,c,d,e,f,g,h,k,m){a=void 0!==a?a:[];U.call(this,a,void 0!==b?b:301,c,d,e,f,g,h,k,m);this.flipY=!1}function Kb(a,b,c){var d=a[0];if(0>=d||0<d)return a;var e=b*c,f=Ie[e];void 0===f&&(f=new Float32Array(e),
    Ie[e]=f);if(0!==b)for(d.toArray(f,0),d=1,e=0;d!==b;++d)e+=c,a[d].toArray(f,e);return f}function Je(a,b){var c=Ke[b];void 0===c&&(c=new Int32Array(b),Ke[b]=c);for(var d=0;d!==b;++d)c[d]=a.allocTextureUnit();return c}function Bf(a,b){a.uniform1f(this.addr,b)}function Cf(a,b){a.uniform1i(this.addr,b)}function Df(a,b){void 0===b.x?a.uniform2fv(this.addr,b):a.uniform2f(this.addr,b.x,b.y)}function Ef(a,b){void 0!==b.x?a.uniform3f(this.addr,b.x,b.y,b.z):void 0!==b.r?a.uniform3f(this.addr,b.r,b.g,b.b):a.uniform3fv(this.addr,
    b)}function Ff(a,b){void 0===b.x?a.uniform4fv(this.addr,b):a.uniform4f(this.addr,b.x,b.y,b.z,b.w)}function Gf(a,b){a.uniformMatrix2fv(this.addr,!1,b.elements||b)}function Hf(a,b){void 0===b.elements?a.uniformMatrix3fv(this.addr,!1,b):(Le.set(b.elements),a.uniformMatrix3fv(this.addr,!1,Le))}function If(a,b){void 0===b.elements?a.uniformMatrix4fv(this.addr,!1,b):(Me.set(b.elements),a.uniformMatrix4fv(this.addr,!1,Me))}function Jf(a,b,c){var d=c.allocTextureUnit();a.uniform1i(this.addr,d);c.setTexture2D(b||
    Ne,d)}function Kf(a,b,c){var d=c.allocTextureUnit();a.uniform1i(this.addr,d);c.setTextureCube(b||Oe,d)}function Pe(a,b){a.uniform2iv(this.addr,b)}function Qe(a,b){a.uniform3iv(this.addr,b)}function Re(a,b){a.uniform4iv(this.addr,b)}function Lf(a){switch(a){case 5126:return Bf;case 35664:return Df;case 35665:return Ef;case 35666:return Ff;case 35674:return Gf;case 35675:return Hf;case 35676:return If;case 35678:case 36198:return Jf;case 35680:return Kf;case 5124:case 35670:return Cf;case 35667:case 35671:return Pe;
    case 35668:case 35672:return Qe;case 35669:case 35673:return Re}}function Mf(a,b){a.uniform1fv(this.addr,b)}function Nf(a,b){a.uniform1iv(this.addr,b)}function Of(a,b){a.uniform2fv(this.addr,Kb(b,this.size,2))}function Pf(a,b){a.uniform3fv(this.addr,Kb(b,this.size,3))}function Qf(a,b){a.uniform4fv(this.addr,Kb(b,this.size,4))}function Rf(a,b){a.uniformMatrix2fv(this.addr,!1,Kb(b,this.size,4))}function Sf(a,b){a.uniformMatrix3fv(this.addr,!1,Kb(b,this.size,9))}function Tf(a,b){a.uniformMatrix4fv(this.addr,
    !1,Kb(b,this.size,16))}function Uf(a,b,c){var d=b.length,e=Je(c,d);a.uniform1iv(this.addr,e);for(a=0;a!==d;++a)c.setTexture2D(b[a]||Ne,e[a])}function Vf(a,b,c){var d=b.length,e=Je(c,d);a.uniform1iv(this.addr,e);for(a=0;a!==d;++a)c.setTextureCube(b[a]||Oe,e[a])}function Wf(a){switch(a){case 5126:return Mf;case 35664:return Of;case 35665:return Pf;case 35666:return Qf;case 35674:return Rf;case 35675:return Sf;case 35676:return Tf;case 35678:return Uf;case 35680:return Vf;case 5124:case 35670:return Nf;
    case 35667:case 35671:return Pe;case 35668:case 35672:return Qe;case 35669:case 35673:return Re}}function Xf(a,b,c){this.id=a;this.addr=c;this.setValue=Lf(b.type)}function Yf(a,b,c){this.id=a;this.addr=c;this.size=b.size;this.setValue=Wf(b.type)}function Se(a){this.id=a;this.seq=[];this.map={}}function mb(a,b,c){this.seq=[];this.map={};this.renderer=c;c=a.getProgramParameter(b,a.ACTIVE_UNIFORMS);for(var d=0;d<c;++d){var e=a.getActiveUniform(b,d),f=a.getUniformLocation(b,e.name),g=this,h=e.name,k=
    h.length;for(Vd.lastIndex=0;;){var m=Vd.exec(h),q=Vd.lastIndex,n=m[1],u=m[3];"]"===m[2]&&(n|=0);if(void 0===u||"["===u&&q+2===k){h=g;e=void 0===u?new Xf(n,e,f):new Yf(n,e,f);h.seq.push(e);h.map[e.id]=e;break}else u=g.map[n],void 0===u&&(u=new Se(n),n=g,g=u,n.seq.push(g),n.map[g.id]=g),g=u}}}function H(a,b,c){return void 0===b&&void 0===c?this.set(a):this.setRGB(a,b,c)}function od(a,b){this.min=void 0!==a?a:new D(Infinity,Infinity);this.max=void 0!==b?b:new D(-Infinity,-Infinity)}function Zf(a,b,c,
    d,e){var f,g,h,k,m,q,n,u,r,t,l,w,z,y,I,A;this.render=function(a,v,Da,na){if(0!==a.length){v=new p;var J=na.w/na.z,Ha=.5*na.z,pd=.5*na.w,la=16/na.w,S=new D(la*J,la),va=new p(1,1,0),N=new D(1,1),B=new od;B.min.set(na.x,na.y);B.max.set(na.x+(na.z-16),na.y+(na.w-16));if(void 0===y){var la=new Float32Array([-1,-1,0,0,1,-1,1,0,1,1,1,1,-1,1,0,1]),x=new Uint16Array([0,1,2,0,2,3]);l=b.createBuffer();w=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,l);b.bufferData(b.ARRAY_BUFFER,la,b.STATIC_DRAW);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,
    w);b.bufferData(b.ELEMENT_ARRAY_BUFFER,x,b.STATIC_DRAW);I=b.createTexture();A=b.createTexture();c.bindTexture(b.TEXTURE_2D,I);b.texImage2D(b.TEXTURE_2D,0,b.RGB,16,16,0,b.RGB,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);c.bindTexture(b.TEXTURE_2D,A);b.texImage2D(b.TEXTURE_2D,0,
    b.RGBA,16,16,0,b.RGBA,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);var la=z={vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\n\tvUV = uv;\n\tvec2 pos = position;\n\tif ( renderType == 2 ) {\n\t\tvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\n\t\tvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\n\t\tvVisibility =        visibility.r / 9.0;\n\t\tvVisibility *= 1.0 - visibility.g / 9.0;\n\t\tvVisibility *=       visibility.b / 9.0;\n\t\tvVisibility *= 1.0 - visibility.a / 9.0;\n\t\tpos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\n\t\tpos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n\t}\n\tgl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
    fragmentShader:"uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\n\tif ( renderType == 0 ) {\n\t\tgl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n\t} else if ( renderType == 1 ) {\n\t\tgl_FragColor = texture2D( map, vUV );\n\t} else {\n\t\tvec4 texture = texture2D( map, vUV );\n\t\ttexture.a *= opacity * vVisibility;\n\t\tgl_FragColor = texture;\n\t\tgl_FragColor.rgb *= color;\n\t}\n}"},x=b.createProgram(),
    E=b.createShader(b.FRAGMENT_SHADER),V=b.createShader(b.VERTEX_SHADER),H="precision "+e.precision+" float;\n";b.shaderSource(E,H+la.fragmentShader);b.shaderSource(V,H+la.vertexShader);b.compileShader(E);b.compileShader(V);b.attachShader(x,E);b.attachShader(x,V);b.linkProgram(x);y=x;r=b.getAttribLocation(y,"position");t=b.getAttribLocation(y,"uv");f=b.getUniformLocation(y,"renderType");g=b.getUniformLocation(y,"map");h=b.getUniformLocation(y,"occlusionMap");k=b.getUniformLocation(y,"opacity");m=b.getUniformLocation(y,
    "color");q=b.getUniformLocation(y,"scale");n=b.getUniformLocation(y,"rotation");u=b.getUniformLocation(y,"screenPosition")}c.useProgram(y);c.initAttributes();c.enableAttribute(r);c.enableAttribute(t);c.disableUnusedAttributes();b.uniform1i(h,0);b.uniform1i(g,1);b.bindBuffer(b.ARRAY_BUFFER,l);b.vertexAttribPointer(r,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(t,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,w);c.disable(b.CULL_FACE);c.buffers.depth.setMask(!1);x=0;for(E=a.length;x<E;x++)if(la=
    16/na.w,S.set(la*J,la),V=a[x],v.set(V.matrixWorld.elements[12],V.matrixWorld.elements[13],V.matrixWorld.elements[14]),v.applyMatrix4(Da.matrixWorldInverse),v.applyMatrix4(Da.projectionMatrix),va.copy(v),N.x=na.x+va.x*Ha+Ha-8,N.y=na.y+va.y*pd+pd-8,!0===B.containsPoint(N)){c.activeTexture(b.TEXTURE0);c.bindTexture(b.TEXTURE_2D,null);c.activeTexture(b.TEXTURE1);c.bindTexture(b.TEXTURE_2D,I);b.copyTexImage2D(b.TEXTURE_2D,0,b.RGB,N.x,N.y,16,16,0);b.uniform1i(f,0);b.uniform2f(q,S.x,S.y);b.uniform3f(u,va.x,
    va.y,va.z);c.disable(b.BLEND);c.enable(b.DEPTH_TEST);b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0);c.activeTexture(b.TEXTURE0);c.bindTexture(b.TEXTURE_2D,A);b.copyTexImage2D(b.TEXTURE_2D,0,b.RGBA,N.x,N.y,16,16,0);b.uniform1i(f,1);c.disable(b.DEPTH_TEST);c.activeTexture(b.TEXTURE1);c.bindTexture(b.TEXTURE_2D,I);b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0);V.positionScreen.copy(va);V.customUpdateCallback?V.customUpdateCallback(V):V.updateLensFlares();b.uniform1i(f,2);c.enable(b.BLEND);for(var H=
    0,K=V.lensFlares.length;H<K;H++){var C=V.lensFlares[H];.001<C.opacity&&.001<C.scale&&(va.x=C.x,va.y=C.y,va.z=C.z,la=C.size*C.scale/na.w,S.x=la*J,S.y=la,b.uniform3f(u,va.x,va.y,va.z),b.uniform2f(q,S.x,S.y),b.uniform1f(n,C.rotation),b.uniform1f(k,C.opacity),b.uniform3f(m,C.color.r,C.color.g,C.color.b),c.setBlending(C.blending,C.blendEquation,C.blendSrc,C.blendDst),d.setTexture2D(C.texture,1),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0))}}c.enable(b.CULL_FACE);c.enable(b.DEPTH_TEST);c.buffers.depth.setMask(!0);
    c.reset()}}}function tc(a,b,c,d,e,f,g,h,k){U.call(this,a,b,c,d,e,f,g,h,k);this.needsUpdate=!0}function $f(a,b,c,d,e){var f,g,h,k,m,q,n,u,r,t,l,w,z,y,I,A,J;function Ha(a,b){return a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:b.id-a.id}var Da,na,oa,Te,pd=new p,la=new ha,S=new p;this.render=function(v,p,D){if(0!==v.length){if(void 0===oa){var x=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),N=new Uint16Array([0,1,2,0,2,3]);Da=b.createBuffer();na=b.createBuffer();
    b.bindBuffer(b.ARRAY_BUFFER,Da);b.bufferData(b.ARRAY_BUFFER,x,b.STATIC_DRAW);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,na);b.bufferData(b.ELEMENT_ARRAY_BUFFER,N,b.STATIC_DRAW);x=b.createProgram();N=b.createShader(b.VERTEX_SHADER);var B=b.createShader(b.FRAGMENT_SHADER);b.shaderSource(N,["precision "+e.precision+" float;","#define SHADER_NAME SpriteMaterial\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float fogDepth;\nvoid main() {\n\tvUV = uvOffset + uv * uvScale;\n\tvec2 alignedPosition = position * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tvec4 mvPosition;\n\tmvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\tfogDepth = - mvPosition.z;\n}"].join("\n"));
    b.shaderSource(B,["precision "+e.precision+" float;","#define SHADER_NAME SpriteMaterial\nuniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvarying float fogDepth;\nvoid main() {\n\tvec4 texture = texture2D( map, vUV );\n\tgl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\n\tif ( gl_FragColor.a < alphaTest ) discard;\n\tif ( fogType > 0 ) {\n\t\tfloat fogFactor = 0.0;\n\t\tif ( fogType == 1 ) {\n\t\t\tfogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t\t} else {\n\t\t\tconst float LOG2 = 1.442695;\n\t\t\tfogFactor = exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 );\n\t\t\tfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n\t\t}\n\t\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n\t}\n}"].join("\n"));
    b.compileShader(N);b.compileShader(B);b.attachShader(x,N);b.attachShader(x,B);b.linkProgram(x);oa=x;A=b.getAttribLocation(oa,"position");J=b.getAttribLocation(oa,"uv");f=b.getUniformLocation(oa,"uvOffset");g=b.getUniformLocation(oa,"uvScale");h=b.getUniformLocation(oa,"rotation");k=b.getUniformLocation(oa,"scale");m=b.getUniformLocation(oa,"color");q=b.getUniformLocation(oa,"map");n=b.getUniformLocation(oa,"opacity");u=b.getUniformLocation(oa,"modelViewMatrix");r=b.getUniformLocation(oa,"projectionMatrix");
    t=b.getUniformLocation(oa,"fogType");l=b.getUniformLocation(oa,"fogDensity");w=b.getUniformLocation(oa,"fogNear");z=b.getUniformLocation(oa,"fogFar");y=b.getUniformLocation(oa,"fogColor");b.getUniformLocation(oa,"fogDepth");I=b.getUniformLocation(oa,"alphaTest");x=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");x.width=8;x.height=8;N=x.getContext("2d");N.fillStyle="white";N.fillRect(0,0,8,8);Te=new tc(x)}c.useProgram(oa);c.initAttributes();c.enableAttribute(A);c.enableAttribute(J);
    c.disableUnusedAttributes();c.disable(b.CULL_FACE);c.enable(b.BLEND);b.bindBuffer(b.ARRAY_BUFFER,Da);b.vertexAttribPointer(A,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(J,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,na);b.uniformMatrix4fv(r,!1,D.projectionMatrix.elements);c.activeTexture(b.TEXTURE0);b.uniform1i(q,0);N=x=0;(B=p.fog)?(b.uniform3f(y,B.color.r,B.color.g,B.color.b),B.isFog?(b.uniform1f(w,B.near),b.uniform1f(z,B.far),b.uniform1i(t,1),N=x=1):B.isFogExp2&&(b.uniform1f(l,B.density),
    b.uniform1i(t,2),N=x=2)):(b.uniform1i(t,0),N=x=0);for(var C=0,E=v.length;C<E;C++)B=v[C],B.modelViewMatrix.multiplyMatrices(D.matrixWorldInverse,B.matrixWorld),B.z=-B.modelViewMatrix.elements[14];v.sort(Ha);for(var va=[],C=0,E=v.length;C<E;C++){B=v[C];var G=B.material;if(!1!==G.visible){B.onBeforeRender(a,p,D,void 0,G,void 0);b.uniform1f(I,G.alphaTest);b.uniformMatrix4fv(u,!1,B.modelViewMatrix.elements);B.matrixWorld.decompose(pd,la,S);va[0]=S.x;va[1]=S.y;var qd=0;p.fog&&G.fog&&(qd=N);x!==qd&&(b.uniform1i(t,
    qd),x=qd);null!==G.map?(b.uniform2f(f,G.map.offset.x,G.map.offset.y),b.uniform2f(g,G.map.repeat.x,G.map.repeat.y)):(b.uniform2f(f,0,0),b.uniform2f(g,1,1));b.uniform1f(n,G.opacity);b.uniform3f(m,G.color.r,G.color.g,G.color.b);b.uniform1f(h,G.rotation);b.uniform2fv(k,va);c.setBlending(G.blending,G.blendEquation,G.blendSrc,G.blendDst,G.blendEquationAlpha,G.blendSrcAlpha,G.blendDstAlpha,G.premultipliedAlpha);c.buffers.depth.setTest(G.depthTest);c.buffers.depth.setMask(G.depthWrite);c.buffers.color.setMask(G.colorWrite);
    d.setTexture2D(G.map||Te,0);b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0);B.onAfterRender(a,p,D,void 0,G,void 0)}}c.enable(b.CULL_FACE);c.reset()}}}function P(){Object.defineProperty(this,"id",{value:ag++});this.uuid=Q.generateUUID();this.name="";this.type="Material";this.lights=this.fog=!0;this.blending=1;this.side=0;this.flatShading=!1;this.vertexColors=0;this.opacity=1;this.transparent=!1;this.blendSrc=204;this.blendDst=205;this.blendEquation=100;this.blendEquationAlpha=this.blendDstAlpha=this.blendSrcAlpha=
    null;this.depthFunc=3;this.depthWrite=this.depthTest=!0;this.clippingPlanes=null;this.clipShadows=this.clipIntersection=!1;this.colorWrite=!0;this.precision=null;this.polygonOffset=!1;this.polygonOffsetUnits=this.polygonOffsetFactor=0;this.dithering=!1;this.alphaTest=0;this.premultipliedAlpha=!1;this.overdraw=0;this.visible=!0;this.userData={};this.needsUpdate=!0}function eb(a){P.call(this);this.type="MeshDepthMaterial";this.depthPacking=3200;this.morphTargets=this.skinning=!1;this.displacementMap=
    this.alphaMap=this.map=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=!1;this.wireframeLinewidth=1;this.lights=this.fog=!1;this.setValues(a)}function fb(a){P.call(this);this.type="MeshDistanceMaterial";this.referencePosition=new p;this.nearDistance=1;this.farDistance=1E3;this.morphTargets=this.skinning=!1;this.displacementMap=this.alphaMap=this.map=null;this.displacementScale=1;this.displacementBias=0;this.lights=this.fog=!1;this.setValues(a)}function Xa(a,b){this.min=void 0!==
    a?a:new p(Infinity,Infinity,Infinity);this.max=void 0!==b?b:new p(-Infinity,-Infinity,-Infinity)}function Ia(a,b){this.center=void 0!==a?a:new p;this.radius=void 0!==b?b:0}function Ea(a,b){this.normal=void 0!==a?a:new p(1,0,0);this.constant=void 0!==b?b:0}function rd(a,b,c,d,e,f){this.planes=[void 0!==a?a:new Ea,void 0!==b?b:new Ea,void 0!==c?c:new Ea,void 0!==d?d:new Ea,void 0!==e?e:new Ea,void 0!==f?f:new Ea]}function Ue(a,b,c){function d(b,c,d,e,f,g){var h=b.geometry;var k=n;var m=b.customDepthMaterial;
    d&&(k=u,m=b.customDistanceMaterial);m?k=m:(m=!1,c.morphTargets&&(h&&h.isBufferGeometry?m=h.morphAttributes&&h.morphAttributes.position&&0<h.morphAttributes.position.length:h&&h.isGeometry&&(m=h.morphTargets&&0<h.morphTargets.length)),b.isSkinnedMesh&&!1===c.skinning&&console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",b),b=b.isSkinnedMesh&&c.skinning,h=0,m&&(h|=1),b&&(h|=2),k=k[h]);a.localClippingEnabled&&!0===c.clipShadows&&0!==c.clippingPlanes.length&&(h=
    k.uuid,m=c.uuid,b=r[h],void 0===b&&(b={},r[h]=b),h=b[m],void 0===h&&(h=k.clone(),b[m]=h),k=h);k.visible=c.visible;k.wireframe=c.wireframe;m=c.side;A.renderSingleSided&&2==m&&(m=0);A.renderReverseSided&&(0===m?m=1:1===m&&(m=0));k.side=m;k.clipShadows=c.clipShadows;k.clippingPlanes=c.clippingPlanes;k.clipIntersection=c.clipIntersection;k.wireframeLinewidth=c.wireframeLinewidth;k.linewidth=c.linewidth;d&&k.isMeshDistanceMaterial&&(k.referencePosition.copy(e),k.nearDistance=f,k.farDistance=g);return k}
    function e(c,h,g,k){var m;if(!1!==c.visible){if(c.layers.test(h.layers)&&(c.isMesh||c.isLine||c.isPoints)&&c.castShadow&&(!c.frustumCulled||f.intersectsObject(c))){c.modelViewMatrix.multiplyMatrices(g.matrixWorldInverse,c.matrixWorld);var n=b.update(c),u=c.material;if(Array.isArray(u))for(var r=n.groups,t=0,l=r.length;t<l;t++){var I=r[t];(m=u[I.materialIndex])&&m.visible&&(m=d(c,m,k,q,g.near,g.far),a.renderBufferDirect(g,null,n,m,c,I))}else u.visible&&(m=d(c,u,k,q,g.near,g.far),a.renderBufferDirect(g,
    null,n,m,c,null))}c=c.children;n=0;for(u=c.length;n<u;n++)e(c[n],h,g,k)}}var f=new rd,g=new O,h=new D,k=new D(c,c),m=new p,q=new p,n=Array(4),u=Array(4),r={},t=[new p(1,0,0),new p(-1,0,0),new p(0,0,1),new p(0,0,-1),new p(0,1,0),new p(0,-1,0)],l=[new p(0,1,0),new p(0,1,0),new p(0,1,0),new p(0,1,0),new p(0,0,1),new p(0,0,-1)],w=[new aa,new aa,new aa,new aa,new aa,new aa];for(c=0;4!==c;++c){var z=0!==(c&1),y=0!==(c&2),I=new eb({depthPacking:3201,morphTargets:z,skinning:y});n[c]=I;z=new fb({morphTargets:z,
    skinning:y});u[c]=z}var A=this;this.enabled=!1;this.autoUpdate=!0;this.needsUpdate=!1;this.type=1;this.renderSingleSided=this.renderReverseSided=!0;this.render=function(b,c,d){if(!1!==A.enabled&&(!1!==A.autoUpdate||!1!==A.needsUpdate)&&0!==b.length){var n=a.state;n.disable(a.context.BLEND);n.buffers.color.setClear(1,1,1,1);n.buffers.depth.setTest(!0);n.setScissorTest(!1);for(var u,r=0,I=b.length;r<I;r++){var v=b[r];u=v.shadow;var p=v&&v.isPointLight;if(void 0===u)console.warn("THREE.WebGLShadowMap:",
    v,"has no shadow.");else{var z=u.camera;h.copy(u.mapSize);h.min(k);if(p){var y=h.x,J=h.y;w[0].set(2*y,J,y,J);w[1].set(0,J,y,J);w[2].set(3*y,J,y,J);w[3].set(y,J,y,J);w[4].set(3*y,0,y,J);w[5].set(y,0,y,J);h.x*=4;h.y*=2}null===u.map&&(u.map=new kb(h.x,h.y,{minFilter:1003,magFilter:1003,format:1023}),u.map.texture.name=v.name+".shadowMap",z.updateProjectionMatrix());u.isSpotLightShadow&&u.update(v);y=u.map;J=u.matrix;q.setFromMatrixPosition(v.matrixWorld);z.position.copy(q);p?(u=6,J.makeTranslation(-q.x,
    -q.y,-q.z)):(u=1,m.setFromMatrixPosition(v.target.matrixWorld),z.lookAt(m),z.updateMatrixWorld(),J.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),J.multiply(z.projectionMatrix),J.multiply(z.matrixWorldInverse));a.setRenderTarget(y);a.clear();for(v=0;v<u;v++)p&&(m.copy(z.position),m.add(t[v]),z.up.copy(l[v]),z.lookAt(m),z.updateMatrixWorld(),n.viewport(w[v])),g.multiplyMatrices(z.projectionMatrix,z.matrixWorldInverse),f.setFromMatrix(g),e(c,d,z,p)}}A.needsUpdate=!1}}}function bg(a){var b={};return{get:function(a){a.isInterleavedBufferAttribute&&
    (a=a.data);return b[a.uuid]},remove:function(c){c.isInterleavedBufferAttribute&&(c=c.data);var d=b[c.uuid];d&&(a.deleteBuffer(d.buffer),delete b[c.uuid])},update:function(c,d){c.isInterleavedBufferAttribute&&(c=c.data);var e=b[c.uuid];if(void 0===e){var e=c.uuid,f=c.array,g=c.dynamic?a.DYNAMIC_DRAW:a.STATIC_DRAW,h=a.createBuffer();a.bindBuffer(d,h);a.bufferData(d,f,g);c.onUploadCallback();d=a.FLOAT;f instanceof Float32Array?d=a.FLOAT:f instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):
    f instanceof Uint16Array?d=a.UNSIGNED_SHORT:f instanceof Int16Array?d=a.SHORT:f instanceof Uint32Array?d=a.UNSIGNED_INT:f instanceof Int32Array?d=a.INT:f instanceof Int8Array?d=a.BYTE:f instanceof Uint8Array&&(d=a.UNSIGNED_BYTE);b[e]={buffer:h,type:d,bytesPerElement:f.BYTES_PER_ELEMENT,version:c.version}}else e.version<c.version&&(f=c,h=f.array,g=f.updateRange,a.bindBuffer(d,e.buffer),!1===f.dynamic?a.bufferData(d,h,a.STATIC_DRAW):-1===g.count?a.bufferSubData(d,0,h):0===g.count?console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."):
    (a.bufferSubData(d,g.offset*h.BYTES_PER_ELEMENT,h.subarray(g.offset,g.offset+g.count)),g.count=-1),e.version=c.version)}}}function gb(a,b,c,d){this._x=a||0;this._y=b||0;this._z=c||0;this._order=d||gb.DefaultOrder}function Wd(){this.mask=1}function x(){Object.defineProperty(this,"id",{value:cg++});this.uuid=Q.generateUUID();this.name="";this.type="Object3D";this.parent=null;this.children=[];this.up=x.DefaultUp.clone();var a=new p,b=new gb,c=new ha,d=new p(1,1,1);b.onChange(function(){c.setFromEuler(b,
    !1)});c.onChange(function(){b.setFromQuaternion(c,void 0,!1)});Object.defineProperties(this,{position:{enumerable:!0,value:a},rotation:{enumerable:!0,value:b},quaternion:{enumerable:!0,value:c},scale:{enumerable:!0,value:d},modelViewMatrix:{value:new O},normalMatrix:{value:new ma}});this.matrix=new O;this.matrixWorld=new O;this.matrixAutoUpdate=x.DefaultMatrixAutoUpdate;this.matrixWorldNeedsUpdate=!1;this.layers=new Wd;this.visible=!0;this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this.renderOrder=
    0;this.userData={}}function Ta(){x.call(this);this.type="Camera";this.matrixWorldInverse=new O;this.projectionMatrix=new O}function Lb(a,b,c,d,e,f){Ta.call(this);this.type="OrthographicCamera";this.zoom=1;this.view=null;this.left=a;this.right=b;this.top=c;this.bottom=d;this.near=void 0!==e?e:.1;this.far=void 0!==f?f:2E3;this.updateProjectionMatrix()}function Ya(a,b,c,d,e,f){this.a=a;this.b=b;this.c=c;this.normal=d&&d.isVector3?d:new p;this.vertexNormals=Array.isArray(d)?d:[];this.color=e&&e.isColor?
    e:new H;this.vertexColors=Array.isArray(e)?e:[];this.materialIndex=void 0!==f?f:0}function L(){Object.defineProperty(this,"id",{value:dg+=2});this.uuid=Q.generateUUID();this.name="";this.type="Geometry";this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.groupsNeedUpdate=this.lineDistancesNeedUpdate=this.colorsNeedUpdate=this.normalsNeedUpdate=
    this.uvsNeedUpdate=this.verticesNeedUpdate=this.elementsNeedUpdate=!1}function M(a,b,c){if(Array.isArray(a))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.uuid=Q.generateUUID();this.name="";this.array=a;this.itemSize=b;this.count=void 0!==a?a.length/b:0;this.normalized=!0===c;this.dynamic=!1;this.updateRange={offset:0,count:-1};this.onUploadCallback=function(){};this.version=0}function uc(a,b,c){M.call(this,new Int8Array(a),b,c)}function vc(a,b,c){M.call(this,new Uint8Array(a),
    b,c)}function wc(a,b,c){M.call(this,new Uint8ClampedArray(a),b,c)}function xc(a,b,c){M.call(this,new Int16Array(a),b,c)}function ob(a,b,c){M.call(this,new Uint16Array(a),b,c)}function yc(a,b,c){M.call(this,new Int32Array(a),b,c)}function pb(a,b,c){M.call(this,new Uint32Array(a),b,c)}function B(a,b,c){M.call(this,new Float32Array(a),b,c)}function zc(a,b,c){M.call(this,new Float64Array(a),b,c)}function Ve(){this.indices=[];this.vertices=[];this.normals=[];this.colors=[];this.uvs=[];this.uvs2=[];this.groups=
    [];this.morphTargets={};this.skinWeights=[];this.skinIndices=[];this.boundingSphere=this.boundingBox=null;this.groupsNeedUpdate=this.uvsNeedUpdate=this.colorsNeedUpdate=this.normalsNeedUpdate=this.verticesNeedUpdate=!1}function Xd(a){if(0===a.length)return-Infinity;for(var b=a[0],c=1,d=a.length;c<d;++c)a[c]>b&&(b=a[c]);return b}function E(){Object.defineProperty(this,"id",{value:eg+=2});this.uuid=Q.generateUUID();this.name="";this.type="BufferGeometry";this.index=null;this.attributes={};this.morphAttributes=
    {};this.groups=[];this.boundingSphere=this.boundingBox=null;this.drawRange={start:0,count:Infinity}}function Mb(a,b,c,d,e,f){L.call(this);this.type="BoxGeometry";this.parameters={width:a,height:b,depth:c,widthSegments:d,heightSegments:e,depthSegments:f};this.fromBufferGeometry(new qb(a,b,c,d,e,f));this.mergeVertices()}function qb(a,b,c,d,e,f){function g(a,b,c,d,e,f,g,l,Ha,Da,na){var t=f/Ha,v=g/Da,I=f/2,A=g/2,w=l/2;g=Ha+1;var z=Da+1,y=f=0,J,x,B=new p;for(x=0;x<z;x++){var D=x*v-A;for(J=0;J<g;J++)B[a]=
    (J*t-I)*d,B[b]=D*e,B[c]=w,m.push(B.x,B.y,B.z),B[a]=0,B[b]=0,B[c]=0<l?1:-1,q.push(B.x,B.y,B.z),n.push(J/Ha),n.push(1-x/Da),f+=1}for(x=0;x<Da;x++)for(J=0;J<Ha;J++)a=u+J+g*(x+1),b=u+(J+1)+g*(x+1),c=u+(J+1)+g*x,k.push(u+J+g*x,a,c),k.push(a,b,c),y+=6;h.addGroup(r,y,na);r+=y;u+=f}E.call(this);this.type="BoxBufferGeometry";this.parameters={width:a,height:b,depth:c,widthSegments:d,heightSegments:e,depthSegments:f};var h=this;a=a||1;b=b||1;c=c||1;d=Math.floor(d)||1;e=Math.floor(e)||1;f=Math.floor(f)||1;var k=
    [],m=[],q=[],n=[],u=0,r=0;g("z","y","x",-1,-1,c,b,a,f,e,0);g("z","y","x",1,-1,c,b,-a,f,e,1);g("x","z","y",1,1,a,c,b,d,f,2);g("x","z","y",1,-1,a,c,-b,d,f,3);g("x","y","z",1,-1,a,b,c,d,e,4);g("x","y","z",-1,-1,a,b,-c,d,e,5);this.setIndex(k);this.addAttribute("position",new B(m,3));this.addAttribute("normal",new B(q,3));this.addAttribute("uv",new B(n,2))}function Ac(a,b,c,d){L.call(this);this.type="PlaneGeometry";this.parameters={width:a,height:b,widthSegments:c,heightSegments:d};this.fromBufferGeometry(new rb(a,
    b,c,d));this.mergeVertices()}function rb(a,b,c,d){E.call(this);this.type="PlaneBufferGeometry";this.parameters={width:a,height:b,widthSegments:c,heightSegments:d};a=a||1;b=b||1;var e=a/2,f=b/2;c=Math.floor(c)||1;d=Math.floor(d)||1;var g=c+1,h=d+1,k=a/c,m=b/d,q=[],n=[],u=[],r=[];for(a=0;a<h;a++){var t=a*m-f;for(b=0;b<g;b++)n.push(b*k-e,-t,0),u.push(0,0,1),r.push(b/c),r.push(1-a/d)}for(a=0;a<d;a++)for(b=0;b<c;b++)e=b+g*(a+1),f=b+1+g*(a+1),h=b+1+g*a,q.push(b+g*a,e,h),q.push(e,f,h);this.setIndex(q);this.addAttribute("position",
    new B(n,3));this.addAttribute("normal",new B(u,3));this.addAttribute("uv",new B(r,2))}function Aa(a){P.call(this);this.type="MeshBasicMaterial";this.color=new H(16777215);this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.envMap=this.alphaMap=this.specularMap=null;this.combine=0;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.lights=this.morphTargets=this.skinning=
    !1;this.setValues(a)}function Fa(a){P.call(this);this.type="ShaderMaterial";this.defines={};this.uniforms={};this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";this.linewidth=1;this.wireframe=!1;this.wireframeLinewidth=1;this.morphNormals=this.morphTargets=this.skinning=this.clipping=this.lights=this.fog=!1;this.extensions={derivatives:!1,fragDepth:!1,
    drawBuffers:!1,shaderTextureLOD:!1};this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]};this.index0AttributeName=void 0;void 0!==a&&(void 0!==a.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(a))}function sb(a,b){this.origin=void 0!==a?a:new p;this.direction=void 0!==b?b:new p}function Nb(a,b){this.start=void 0!==a?a:new p;this.end=void 0!==b?b:new p}function Za(a,b,c){this.a=void 0!==a?a:new p;this.b=void 0!==
    b?b:new p;this.c=void 0!==c?c:new p}function ra(a,b){x.call(this);this.type="Mesh";this.geometry=void 0!==a?a:new E;this.material=void 0!==b?b:new Aa({color:16777215*Math.random()});this.drawMode=0;this.updateMorphTargets()}function fg(a,b,c,d){function e(a,c){b.buffers.color.setClear(a.r,a.g,a.b,c,d)}var f=new H(0),g=0,h,k,m;return{getClearColor:function(){return f},setClearColor:function(a,b){f.set(a);g=void 0!==b?b:1;e(f,g)},getClearAlpha:function(){return g},setClearAlpha:function(a){g=a;e(f,
    g)},render:function(b,d,u,r){d=d.background;null===d?e(f,g):d&&d.isColor&&(e(d,1),r=!0);(a.autoClear||r)&&a.clear(a.autoClearColor,a.autoClearDepth,a.autoClearStencil);d&&d.isCubeTexture?(void 0===m&&(m=new ra(new qb(1,1,1),new Fa({uniforms:tb.cube.uniforms,vertexShader:tb.cube.vertexShader,fragmentShader:tb.cube.fragmentShader,side:1,depthTest:!0,depthWrite:!1,fog:!1})),m.geometry.removeAttribute("normal"),m.geometry.removeAttribute("uv"),m.onBeforeRender=function(a,b,c){this.matrixWorld.copyPosition(c.matrixWorld)},
    c.update(m.geometry)),m.material.uniforms.tCube.value=d,b.push(m,m.geometry,m.material,0,null)):d&&d.isTexture&&(void 0===h&&(h=new Lb(-1,1,1,-1,0,1),k=new ra(new rb(2,2),new Aa({depthTest:!1,depthWrite:!1,fog:!1})),c.update(k.geometry)),k.material.map=d,a.renderBufferDirect(h,null,k.geometry,k.material,k,null))}}}function gg(a,b){return a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.program&&b.program&&a.program!==b.program?a.program.id-b.program.id:a.material.id!==b.material.id?a.material.id-
    b.material.id:a.z!==b.z?a.z-b.z:a.id-b.id}function hg(a,b){return a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:a.id-b.id}function ig(){var a=[],b=0,c=[],d=[];return{opaque:c,transparent:d,init:function(){b=0;c.length=0;d.length=0},push:function(e,f,g,h,k){var m=a[b];void 0===m?(m={id:e.id,object:e,geometry:f,material:g,program:g.program,renderOrder:e.renderOrder,z:h,group:k},a[b]=m):(m.id=e.id,m.object=e,m.geometry=f,m.material=g,m.program=g.program,m.renderOrder=e.renderOrder,
    m.z=h,m.group=k);(!0===g.transparent?d:c).push(m);b++},sort:function(){1<c.length&&c.sort(gg);1<d.length&&d.sort(hg)}}}function jg(){var a={};return{get:function(b,c){b=b.id+","+c.id;c=a[b];void 0===c&&(c=new ig,a[b]=c);return c},dispose:function(){a={}}}}function kg(a,b){return Math.abs(b[1])-Math.abs(a[1])}function lg(a){var b={},c=new Float32Array(8);return{update:function(d,e,f,g){var h=d.morphTargetInfluences,k=h.length;d=b[e.id];if(void 0===d){d=[];for(var m=0;m<k;m++)d[m]=[m,0];b[e.id]=d}var q=
    f.morphTargets&&e.morphAttributes.position;f=f.morphNormals&&e.morphAttributes.normal;for(m=0;m<k;m++){var n=d[m];0!==n[1]&&(q&&e.removeAttribute("morphTarget"+m),f&&e.removeAttribute("morphNormal"+m))}for(m=0;m<k;m++)n=d[m],n[0]=m,n[1]=h[m];d.sort(kg);for(m=0;8>m;m++){if(n=d[m])if(h=n[0],n=n[1]){q&&e.addAttribute("morphTarget"+m,q[h]);f&&e.addAttribute("morphNormal"+m,f[h]);c[m]=n;continue}c[m]=0}g.getUniforms().setValue(a,"morphTargetInfluences",c)}}}function mg(a,b,c){var d,e,f;this.setMode=function(a){d=
    a};this.setIndex=function(a){e=a.type;f=a.bytesPerElement};this.render=function(b,h){a.drawElements(d,h,e,b*f);c.calls++;c.vertices+=h;d===a.TRIANGLES?c.faces+=h/3:d===a.POINTS&&(c.points+=h)};this.renderInstances=function(g,h,k){var m=b.get("ANGLE_instanced_arrays");null===m?console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays."):(m.drawElementsInstancedANGLE(d,k,e,h*f,g.maxInstancedCount),c.calls++,c.vertices+=
    k*g.maxInstancedCount,d===a.TRIANGLES?c.faces+=g.maxInstancedCount*k/3:d===a.POINTS&&(c.points+=g.maxInstancedCount*k))}}function ng(a,b,c){var d;this.setMode=function(a){d=a};this.render=function(b,f){a.drawArrays(d,b,f);c.calls++;c.vertices+=f;d===a.TRIANGLES?c.faces+=f/3:d===a.POINTS&&(c.points+=f)};this.renderInstances=function(e,f,g){var h=b.get("ANGLE_instanced_arrays");if(null===h)console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
    else{var k=e.attributes.position;k.isInterleavedBufferAttribute?(g=k.data.count,h.drawArraysInstancedANGLE(d,0,g,e.maxInstancedCount)):h.drawArraysInstancedANGLE(d,f,g,e.maxInstancedCount);c.calls++;c.vertices+=g*e.maxInstancedCount;d===a.TRIANGLES?c.faces+=e.maxInstancedCount*g/3:d===a.POINTS&&(c.points+=e.maxInstancedCount*g)}}}function og(a,b,c){function d(a){a=a.target;var h=e[a.id];null!==h.index&&b.remove(h.index);for(var g in h.attributes)b.remove(h.attributes[g]);a.removeEventListener("dispose",
    d);delete e[a.id];if(g=f[a.id])b.remove(g),delete f[a.id];if(g=f[h.id])b.remove(g),delete f[h.id];c.geometries--}var e={},f={};return{get:function(a,b){var f=e[b.id];if(f)return f;b.addEventListener("dispose",d);b.isBufferGeometry?f=b:b.isGeometry&&(void 0===b._bufferGeometry&&(b._bufferGeometry=(new E).setFromObject(a)),f=b._bufferGeometry);e[b.id]=f;c.geometries++;return f},update:function(c){var d=c.index,e=c.attributes;null!==d&&b.update(d,a.ELEMENT_ARRAY_BUFFER);for(var f in e)b.update(e[f],
    a.ARRAY_BUFFER);c=c.morphAttributes;for(f in c)for(var d=c[f],e=0,g=d.length;e<g;e++)b.update(d[e],a.ARRAY_BUFFER)},getWireframeAttribute:function(c){var d=f[c.id];if(d)return d;d=[];var e=c.index;var g=c.attributes;if(null!==e){var q=e.array;for(var n=0,u=q.length;n<u;n+=3){var r=q[n+0];g=q[n+1];e=q[n+2];d.push(r,g,g,e,e,r)}}else for(q=g.position.array,n=0,u=q.length/3-1;n<u;n+=3)r=n+0,g=n+1,e=n+2,d.push(r,g,g,e,e,r);d=new (65535<Xd(d)?pb:ob)(d,1);b.update(d,a.ELEMENT_ARRAY_BUFFER);return f[c.id]=
    d}}}function pg(){var a={};return{get:function(b){if(void 0!==a[b.id])return a[b.id];switch(b.type){case "DirectionalLight":var c={direction:new p,color:new H,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new D};break;case "SpotLight":c={position:new p,direction:new p,color:new H,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new D};break;case "PointLight":c={position:new p,color:new H,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new D,
    shadowCameraNear:1,shadowCameraFar:1E3};break;case "HemisphereLight":c={direction:new p,skyColor:new H,groundColor:new H};break;case "RectAreaLight":c={color:new H,position:new p,halfWidth:new p,halfHeight:new p}}return a[b.id]=c}}}function qg(){var a=new pg,b={hash:"",ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]},c=new p,d=new O,e=new O;return{setup:function(f,
    g,h){for(var k,m=0,q=0,n=0,u=0,r=0,t=0,l=0,w=0,p=h.matrixWorldInverse,y=0,I=f.length;y<I;y++){var A=f[y];k=A.color;var J=A.intensity,Ha=A.distance,Da=A.shadow&&A.shadow.map?A.shadow.map.texture:null;if(A.isAmbientLight)m+=k.r*J,q+=k.g*J,n+=k.b*J;else if(A.isDirectionalLight){h=a.get(A);h.color.copy(A.color).multiplyScalar(A.intensity);h.direction.setFromMatrixPosition(A.matrixWorld);c.setFromMatrixPosition(A.target.matrixWorld);h.direction.sub(c);h.direction.transformDirection(p);if(h.shadow=A.castShadow)k=
    A.shadow,h.shadowBias=k.bias,h.shadowRadius=k.radius,h.shadowMapSize=k.mapSize;b.directionalShadowMap[u]=Da;b.directionalShadowMatrix[u]=A.shadow.matrix;b.directional[u]=h;u++}else if(A.isSpotLight){h=a.get(A);h.position.setFromMatrixPosition(A.matrixWorld);h.position.applyMatrix4(p);h.color.copy(k).multiplyScalar(J);h.distance=Ha;h.direction.setFromMatrixPosition(A.matrixWorld);c.setFromMatrixPosition(A.target.matrixWorld);h.direction.sub(c);h.direction.transformDirection(p);h.coneCos=Math.cos(A.angle);
    h.penumbraCos=Math.cos(A.angle*(1-A.penumbra));h.decay=0===A.distance?0:A.decay;if(h.shadow=A.castShadow)k=A.shadow,h.shadowBias=k.bias,h.shadowRadius=k.radius,h.shadowMapSize=k.mapSize;b.spotShadowMap[t]=Da;b.spotShadowMatrix[t]=A.shadow.matrix;b.spot[t]=h;t++}else if(A.isRectAreaLight)h=a.get(A),h.color.copy(k).multiplyScalar(J/(A.width*A.height)),h.position.setFromMatrixPosition(A.matrixWorld),h.position.applyMatrix4(p),e.identity(),d.copy(A.matrixWorld),d.premultiply(p),e.extractRotation(d),h.halfWidth.set(.5*
    A.width,0,0),h.halfHeight.set(0,.5*A.height,0),h.halfWidth.applyMatrix4(e),h.halfHeight.applyMatrix4(e),b.rectArea[l]=h,l++;else if(A.isPointLight){h=a.get(A);h.position.setFromMatrixPosition(A.matrixWorld);h.position.applyMatrix4(p);h.color.copy(A.color).multiplyScalar(A.intensity);h.distance=A.distance;h.decay=0===A.distance?0:A.decay;if(h.shadow=A.castShadow)k=A.shadow,h.shadowBias=k.bias,h.shadowRadius=k.radius,h.shadowMapSize=k.mapSize,h.shadowCameraNear=k.camera.near,h.shadowCameraFar=k.camera.far;
    b.pointShadowMap[r]=Da;b.pointShadowMatrix[r]=A.shadow.matrix;b.point[r]=h;r++}else A.isHemisphereLight&&(h=a.get(A),h.direction.setFromMatrixPosition(A.matrixWorld),h.direction.transformDirection(p),h.direction.normalize(),h.skyColor.copy(A.color).multiplyScalar(J),h.groundColor.copy(A.groundColor).multiplyScalar(J),b.hemi[w]=h,w++)}b.ambient[0]=m;b.ambient[1]=q;b.ambient[2]=n;b.directional.length=u;b.spot.length=t;b.rectArea.length=l;b.point.length=r;b.hemi.length=w;b.hash=u+","+r+","+t+","+l+","+
    w+","+g.length},state:b}}function rg(a,b){var c={};return{update:function(d){var e=b.frame,f=d.geometry,g=a.get(d,f);c[g.id]!==e&&(f.isGeometry&&g.updateFromObject(d),a.update(g),c[g.id]=e);return g},clear:function(){c={}}}}function sg(a){a=a.split("\n");for(var b=0;b<a.length;b++)a[b]=b+1+": "+a[b];return a.join("\n")}function We(a,b,c){var d=a.createShader(b);a.shaderSource(d,c);a.compileShader(d);!1===a.getShaderParameter(d,a.COMPILE_STATUS)&&console.error("THREE.WebGLShader: Shader couldn't compile.");
    ""!==a.getShaderInfoLog(d)&&console.warn("THREE.WebGLShader: gl.getShaderInfoLog()",b===a.VERTEX_SHADER?"vertex":"fragment",a.getShaderInfoLog(d),sg(c));return d}function Xe(a){switch(a){case 3E3:return["Linear","( value )"];case 3001:return["sRGB","( value )"];case 3002:return["RGBE","( value )"];case 3004:return["RGBM","( value, 7.0 )"];case 3005:return["RGBM","( value, 16.0 )"];case 3006:return["RGBD","( value, 256.0 )"];case 3007:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw Error("unsupported encoding: "+
    a);}}function Yd(a,b){b=Xe(b);return"vec4 "+a+"( vec4 value ) { return "+b[0]+"ToLinear"+b[1]+"; }"}function tg(a,b){b=Xe(b);return"vec4 "+a+"( vec4 value ) { return LinearTo"+b[0]+b[1]+"; }"}function ug(a,b){switch(b){case 1:b="Linear";break;case 2:b="Reinhard";break;case 3:b="Uncharted2";break;case 4:b="OptimizedCineon";break;default:throw Error("unsupported toneMapping: "+b);}return"vec3 "+a+"( vec3 color ) { return "+b+"ToneMapping( color ); }"}function vg(a,b,c){a=a||{};return[a.derivatives||
    b.envMapCubeUV||b.bumpMap||b.normalMap||b.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(a.fragDepth||b.logarithmicDepthBuffer)&&c.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",a.drawBuffers&&c.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(a.shaderTextureLOD||b.envMap)&&c.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""].filter(Bc).join("\n")}function wg(a){var b=[],c;for(c in a){var d=a[c];!1!==d&&b.push("#define "+
    c+" "+d)}return b.join("\n")}function Bc(a){return""!==a}function Ye(a,b){return a.replace(/NUM_DIR_LIGHTS/g,b.numDirLights).replace(/NUM_SPOT_LIGHTS/g,b.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,b.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,b.numPointLights).replace(/NUM_HEMI_LIGHTS/g,b.numHemiLights)}function Zd(a){return a.replace(/^[ \t]*#include +<([\w\d.]+)>/gm,function(a,c){a=R[c];if(void 0===a)throw Error("Can not resolve #include <"+c+">");return Zd(a)})}function Ze(a){return a.replace(/for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,
    function(a,c,d,e){a="";for(c=parseInt(c);c<parseInt(d);c++)a+=e.replace(/\[ i \]/g,"[ "+c+" ]");return a})}function xg(a,b,c,d,e,f){var g=a.context,h=d.defines,k=e.vertexShader,m=e.fragmentShader,q="SHADOWMAP_TYPE_BASIC";1===f.shadowMapType?q="SHADOWMAP_TYPE_PCF":2===f.shadowMapType&&(q="SHADOWMAP_TYPE_PCF_SOFT");var n="ENVMAP_TYPE_CUBE",u="ENVMAP_MODE_REFLECTION",r="ENVMAP_BLENDING_MULTIPLY";if(f.envMap){switch(d.envMap.mapping){case 301:case 302:n="ENVMAP_TYPE_CUBE";break;case 306:case 307:n="ENVMAP_TYPE_CUBE_UV";
    break;case 303:case 304:n="ENVMAP_TYPE_EQUIREC";break;case 305:n="ENVMAP_TYPE_SPHERE"}switch(d.envMap.mapping){case 302:case 304:u="ENVMAP_MODE_REFRACTION"}switch(d.combine){case 0:r="ENVMAP_BLENDING_MULTIPLY";break;case 1:r="ENVMAP_BLENDING_MIX";break;case 2:r="ENVMAP_BLENDING_ADD"}}var t=0<a.gammaFactor?a.gammaFactor:1,l=vg(d.extensions,f,b),p=wg(h),z=g.createProgram();d.isRawShaderMaterial?(h=[p].filter(Bc).join("\n"),0<h.length&&(h+="\n"),b=[l,p].filter(Bc).join("\n"),0<b.length&&(b+="\n")):(h=
    ["precision "+f.precision+" float;","precision "+f.precision+" int;","#define SHADER_NAME "+e.name,p,f.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+t,"#define MAX_BONES "+f.maxBones,f.useFog&&f.fog?"#define USE_FOG":"",f.useFog&&f.fogExp?"#define FOG_EXP2":"",f.map?"#define USE_MAP":"",f.envMap?"#define USE_ENVMAP":"",f.envMap?"#define "+u:"",f.lightMap?"#define USE_LIGHTMAP":"",f.aoMap?"#define USE_AOMAP":"",f.emissiveMap?"#define USE_EMISSIVEMAP":"",f.bumpMap?"#define USE_BUMPMAP":
    "",f.normalMap?"#define USE_NORMALMAP":"",f.displacementMap&&f.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",f.specularMap?"#define USE_SPECULARMAP":"",f.roughnessMap?"#define USE_ROUGHNESSMAP":"",f.metalnessMap?"#define USE_METALNESSMAP":"",f.alphaMap?"#define USE_ALPHAMAP":"",f.vertexColors?"#define USE_COLOR":"",f.flatShading?"#define FLAT_SHADED":"",f.skinning?"#define USE_SKINNING":"",f.useVertexTexture?"#define BONE_TEXTURE":"",f.morphTargets?"#define USE_MORPHTARGETS":"",f.morphNormals&&
    !1===f.flatShading?"#define USE_MORPHNORMALS":"",f.doubleSided?"#define DOUBLE_SIDED":"",f.flipSided?"#define FLIP_SIDED":"","#define NUM_CLIPPING_PLANES "+f.numClippingPlanes,f.shadowMapEnabled?"#define USE_SHADOWMAP":"",f.shadowMapEnabled?"#define "+q:"",f.sizeAttenuation?"#define USE_SIZEATTENUATION":"",f.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",f.logarithmicDepthBuffer&&b.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;",
    "uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;",
    "\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Bc).join("\n"),b=[l,"precision "+f.precision+" float;","precision "+f.precision+" int;","#define SHADER_NAME "+e.name,p,f.alphaTest?"#define ALPHATEST "+f.alphaTest:
    "","#define GAMMA_FACTOR "+t,f.useFog&&f.fog?"#define USE_FOG":"",f.useFog&&f.fogExp?"#define FOG_EXP2":"",f.map?"#define USE_MAP":"",f.envMap?"#define USE_ENVMAP":"",f.envMap?"#define "+n:"",f.envMap?"#define "+u:"",f.envMap?"#define "+r:"",f.lightMap?"#define USE_LIGHTMAP":"",f.aoMap?"#define USE_AOMAP":"",f.emissiveMap?"#define USE_EMISSIVEMAP":"",f.bumpMap?"#define USE_BUMPMAP":"",f.normalMap?"#define USE_NORMALMAP":"",f.specularMap?"#define USE_SPECULARMAP":"",f.roughnessMap?"#define USE_ROUGHNESSMAP":
    "",f.metalnessMap?"#define USE_METALNESSMAP":"",f.alphaMap?"#define USE_ALPHAMAP":"",f.vertexColors?"#define USE_COLOR":"",f.gradientMap?"#define USE_GRADIENTMAP":"",f.flatShading?"#define FLAT_SHADED":"",f.doubleSided?"#define DOUBLE_SIDED":"",f.flipSided?"#define FLIP_SIDED":"","#define NUM_CLIPPING_PLANES "+f.numClippingPlanes,"#define UNION_CLIPPING_PLANES "+(f.numClippingPlanes-f.numClipIntersection),f.shadowMapEnabled?"#define USE_SHADOWMAP":"",f.shadowMapEnabled?"#define "+q:"",f.premultipliedAlpha?
    "#define PREMULTIPLIED_ALPHA":"",f.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",f.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",f.logarithmicDepthBuffer&&b.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"",f.envMap&&b.get("EXT_shader_texture_lod")?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",0!==f.toneMapping?"#define TONE_MAPPING":"",0!==f.toneMapping?R.tonemapping_pars_fragment:"",0!==f.toneMapping?ug("toneMapping",f.toneMapping):
    "",f.dithering?"#define DITHERING":"",f.outputEncoding||f.mapEncoding||f.envMapEncoding||f.emissiveMapEncoding?R.encodings_pars_fragment:"",f.mapEncoding?Yd("mapTexelToLinear",f.mapEncoding):"",f.envMapEncoding?Yd("envMapTexelToLinear",f.envMapEncoding):"",f.emissiveMapEncoding?Yd("emissiveMapTexelToLinear",f.emissiveMapEncoding):"",f.outputEncoding?tg("linearToOutputTexel",f.outputEncoding):"",f.depthPacking?"#define DEPTH_PACKING "+d.depthPacking:"","\n"].filter(Bc).join("\n"));k=Zd(k);k=Ye(k,f);
    m=Zd(m);m=Ye(m,f);d.isShaderMaterial||(k=Ze(k),m=Ze(m));m=b+m;k=We(g,g.VERTEX_SHADER,h+k);m=We(g,g.FRAGMENT_SHADER,m);g.attachShader(z,k);g.attachShader(z,m);void 0!==d.index0AttributeName?g.bindAttribLocation(z,0,d.index0AttributeName):!0===f.morphTargets&&g.bindAttribLocation(z,0,"position");g.linkProgram(z);f=g.getProgramInfoLog(z);e=g.getShaderInfoLog(k);q=g.getShaderInfoLog(m);u=n=!0;if(!1===g.getProgramParameter(z,g.LINK_STATUS))n=!1,console.error("THREE.WebGLProgram: shader error: ",g.getError(),
    "gl.VALIDATE_STATUS",g.getProgramParameter(z,g.VALIDATE_STATUS),"gl.getProgramInfoLog",f,e,q);else if(""!==f)console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",f);else if(""===e||""===q)u=!1;u&&(this.diagnostics={runnable:n,material:d,programLog:f,vertexShader:{log:e,prefix:h},fragmentShader:{log:q,prefix:b}});g.deleteShader(k);g.deleteShader(m);var y;this.getUniforms=function(){void 0===y&&(y=new mb(g,z,a));return y};var I;this.getAttributes=function(){if(void 0===I){for(var a={},b=g.getProgramParameter(z,
    g.ACTIVE_ATTRIBUTES),c=0;c<b;c++){var d=g.getActiveAttrib(z,c).name;a[d]=g.getAttribLocation(z,d)}I=a}return I};this.destroy=function(){g.deleteProgram(z);this.program=void 0};Object.defineProperties(this,{uniforms:{get:function(){console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms().");return this.getUniforms()}},attributes:{get:function(){console.warn("THREE.WebGLProgram: .attributes is now .getAttributes().");return this.getAttributes()}}});this.id=yg++;this.code=c;this.usedTimes=1;
    this.program=z;this.vertexShader=k;this.fragmentShader=m;return this}function zg(a,b,c){function d(a,b){if(a)a.isTexture?c=a.encoding:a.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),c=a.texture.encoding);else var c=3E3;3E3===c&&b&&(c=3007);return c}var e=[],f={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",
    MeshPhongMaterial:"phong",MeshToonMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow"},g="precision supportsVertexTextures map mapEncoding envMap envMapMode envMapEncoding lightMap aoMap emissiveMap emissiveMapEncoding bumpMap normalMap displacementMap specularMap roughnessMap metalnessMap gradientMap alphaMap combine vertexColors fog useFog fogExp flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals premultipliedAlpha numDirLights numPointLights numSpotLights numHemiLights numRectAreaLights shadowMapEnabled shadowMapType toneMapping physicallyCorrectLights alphaTest doubleSided flipSided numClippingPlanes numClipIntersection depthPacking dithering".split(" ");
    this.getParameters=function(b,e,g,q,n,u,r){var h=f[b.type];if(r.isSkinnedMesh){var k=r.skeleton.bones;if(c.floatVertexTextures)k=1024;else{var m=Math.min(Math.floor((c.maxVertexUniforms-20)/4),k.length);m<k.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+k.length+" bones. This GPU supports "+m+"."),k=0):k=m}}else k=0;m=c.precision;null!==b.precision&&(m=c.getMaxPrecision(b.precision),m!==b.precision&&console.warn("THREE.WebGLProgram.getParameters:",b.precision,"not supported, using",m,"instead."));
    var l=a.getRenderTarget();return{shaderID:h,precision:m,supportsVertexTextures:c.vertexTextures,outputEncoding:d(l?l.texture:null,a.gammaOutput),map:!!b.map,mapEncoding:d(b.map,a.gammaInput),envMap:!!b.envMap,envMapMode:b.envMap&&b.envMap.mapping,envMapEncoding:d(b.envMap,a.gammaInput),envMapCubeUV:!!b.envMap&&(306===b.envMap.mapping||307===b.envMap.mapping),lightMap:!!b.lightMap,aoMap:!!b.aoMap,emissiveMap:!!b.emissiveMap,emissiveMapEncoding:d(b.emissiveMap,a.gammaInput),bumpMap:!!b.bumpMap,normalMap:!!b.normalMap,
    displacementMap:!!b.displacementMap,roughnessMap:!!b.roughnessMap,metalnessMap:!!b.metalnessMap,specularMap:!!b.specularMap,alphaMap:!!b.alphaMap,gradientMap:!!b.gradientMap,combine:b.combine,vertexColors:b.vertexColors,fog:!!q,useFog:b.fog,fogExp:q&&q.isFogExp2,flatShading:b.flatShading,sizeAttenuation:b.sizeAttenuation,logarithmicDepthBuffer:c.logarithmicDepthBuffer,skinning:b.skinning&&0<k,maxBones:k,useVertexTexture:c.floatVertexTextures,morphTargets:b.morphTargets,morphNormals:b.morphNormals,
    maxMorphTargets:a.maxMorphTargets,maxMorphNormals:a.maxMorphNormals,numDirLights:e.directional.length,numPointLights:e.point.length,numSpotLights:e.spot.length,numRectAreaLights:e.rectArea.length,numHemiLights:e.hemi.length,numClippingPlanes:n,numClipIntersection:u,dithering:b.dithering,shadowMapEnabled:a.shadowMap.enabled&&r.receiveShadow&&0<g.length,shadowMapType:a.shadowMap.type,toneMapping:a.toneMapping,physicallyCorrectLights:a.physicallyCorrectLights,premultipliedAlpha:b.premultipliedAlpha,
    alphaTest:b.alphaTest,doubleSided:2===b.side,flipSided:1===b.side,depthPacking:void 0!==b.depthPacking?b.depthPacking:!1}};this.getProgramCode=function(b,c){var d=[];c.shaderID?d.push(c.shaderID):(d.push(b.fragmentShader),d.push(b.vertexShader));if(void 0!==b.defines)for(var e in b.defines)d.push(e),d.push(b.defines[e]);for(e=0;e<g.length;e++)d.push(c[g[e]]);d.push(b.onBeforeCompile.toString());d.push(a.gammaOutput);return d.join()};this.acquireProgram=function(c,d,f,g){for(var h,k=0,m=e.length;k<
    m;k++){var q=e[k];if(q.code===g){h=q;++h.usedTimes;break}}void 0===h&&(h=new xg(a,b,g,c,d,f),e.push(h));return h};this.releaseProgram=function(a){if(0===--a.usedTimes){var b=e.indexOf(a);e[b]=e[e.length-1];e.pop();a.destroy()}};this.programs=e}function Ag(a,b,c,d,e,f,g){function h(a,b){if(a.width>b||a.height>b){b/=Math.max(a.width,a.height);var c=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");c.width=Math.floor(a.width*b);c.height=Math.floor(a.height*b);c.getContext("2d").drawImage(a,
    0,0,a.width,a.height,0,0,c.width,c.height);console.warn("THREE.WebGLRenderer: image is too big ("+a.width+"x"+a.height+"). Resized to "+c.width+"x"+c.height,a);return c}return a}function k(a){return Q.isPowerOfTwo(a.width)&&Q.isPowerOfTwo(a.height)}function m(a,b){return a.generateMipmaps&&b&&1003!==a.minFilter&&1006!==a.minFilter}function q(b){return 1003===b||1004===b||1005===b?a.NEAREST:a.LINEAR}function n(b){b=b.target;b.removeEventListener("dispose",n);a:{var c=d.get(b);if(b.image&&c.__image__webglTextureCube)a.deleteTexture(c.__image__webglTextureCube);
    else{if(void 0===c.__webglInit)break a;a.deleteTexture(c.__webglTexture)}d.remove(b)}b.isVideoTexture&&delete y[b.id];g.textures--}function u(b){b=b.target;b.removeEventListener("dispose",u);var c=d.get(b),e=d.get(b.texture);if(b){void 0!==e.__webglTexture&&a.deleteTexture(e.__webglTexture);b.depthTexture&&b.depthTexture.dispose();if(b.isWebGLRenderTargetCube)for(e=0;6>e;e++)a.deleteFramebuffer(c.__webglFramebuffer[e]),c.__webglDepthbuffer&&a.deleteRenderbuffer(c.__webglDepthbuffer[e]);else a.deleteFramebuffer(c.__webglFramebuffer),
    c.__webglDepthbuffer&&a.deleteRenderbuffer(c.__webglDepthbuffer);d.remove(b.texture);d.remove(b)}g.textures--}function r(b,q){var u=d.get(b);if(0<b.version&&u.__version!==b.version){var r=b.image;if(void 0===r)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined",b);else if(!1===r.complete)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete",b);else{void 0===u.__webglInit&&(u.__webglInit=!0,b.addEventListener("dispose",n),u.__webglTexture=
    a.createTexture(),b.isVideoTexture&&(y[b.id]=b),g.textures++);c.activeTexture(a.TEXTURE0+q);c.bindTexture(a.TEXTURE_2D,u.__webglTexture);a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,b.flipY);a.pixelStorei(a.UNPACK_PREMULTIPLY_ALPHA_WEBGL,b.premultiplyAlpha);a.pixelStorei(a.UNPACK_ALIGNMENT,b.unpackAlignment);var l=h(b.image,e.maxTextureSize);(1001!==b.wrapS||1001!==b.wrapT||1003!==b.minFilter&&1006!==b.minFilter)&&!1===k(l)&&(q=l,q instanceof HTMLImageElement||q instanceof HTMLCanvasElement||q instanceof ImageBitmap?
    (r=document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),r.width=Q.floorPowerOfTwo(q.width),r.height=Q.floorPowerOfTwo(q.height),r.getContext("2d").drawImage(q,0,0,r.width,r.height),console.warn("THREE.WebGLRenderer: image is not power of two ("+q.width+"x"+q.height+"). Resized to "+r.width+"x"+r.height,q),l=r):l=q);q=k(l);var r=f.convert(b.format),v=f.convert(b.type);t(a.TEXTURE_2D,b,q);var p=b.mipmaps;if(b.isDepthTexture){p=a.DEPTH_COMPONENT;if(1015===b.type){if(!z)throw Error("Float Depth Texture only supported in WebGL2.0");
    p=a.DEPTH_COMPONENT32F}else z&&(p=a.DEPTH_COMPONENT16);1026===b.format&&p===a.DEPTH_COMPONENT&&1012!==b.type&&1014!==b.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),b.type=1012,v=f.convert(b.type));1027===b.format&&(p=a.DEPTH_STENCIL,1020!==b.type&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),b.type=1020,v=f.convert(b.type)));c.texImage2D(a.TEXTURE_2D,0,p,l.width,l.height,0,r,
    v,null)}else if(b.isDataTexture)if(0<p.length&&q){for(var A=0,w=p.length;A<w;A++)l=p[A],c.texImage2D(a.TEXTURE_2D,A,r,l.width,l.height,0,r,v,l.data);b.generateMipmaps=!1}else c.texImage2D(a.TEXTURE_2D,0,r,l.width,l.height,0,r,v,l.data);else if(b.isCompressedTexture)for(A=0,w=p.length;A<w;A++)l=p[A],1023!==b.format&&1022!==b.format?-1<c.getCompressedTextureFormats().indexOf(r)?c.compressedTexImage2D(a.TEXTURE_2D,A,r,l.width,l.height,0,l.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):
    c.texImage2D(a.TEXTURE_2D,A,r,l.width,l.height,0,r,v,l.data);else if(0<p.length&&q){A=0;for(w=p.length;A<w;A++)l=p[A],c.texImage2D(a.TEXTURE_2D,A,r,r,v,l);b.generateMipmaps=!1}else c.texImage2D(a.TEXTURE_2D,0,r,r,v,l);m(b,q)&&a.generateMipmap(a.TEXTURE_2D);u.__version=b.version;if(b.onUpdate)b.onUpdate(b);return}}c.activeTexture(a.TEXTURE0+q);c.bindTexture(a.TEXTURE_2D,u.__webglTexture)}function t(c,g,h){h?(a.texParameteri(c,a.TEXTURE_WRAP_S,f.convert(g.wrapS)),a.texParameteri(c,a.TEXTURE_WRAP_T,
    f.convert(g.wrapT)),a.texParameteri(c,a.TEXTURE_MAG_FILTER,f.convert(g.magFilter)),a.texParameteri(c,a.TEXTURE_MIN_FILTER,f.convert(g.minFilter))):(a.texParameteri(c,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE),a.texParameteri(c,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE),1001===g.wrapS&&1001===g.wrapT||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.",g),a.texParameteri(c,a.TEXTURE_MAG_FILTER,q(g.magFilter)),a.texParameteri(c,
    a.TEXTURE_MIN_FILTER,q(g.minFilter)),1003!==g.minFilter&&1006!==g.minFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.",g));!(h=b.get("EXT_texture_filter_anisotropic"))||1015===g.type&&null===b.get("OES_texture_float_linear")||1016===g.type&&null===b.get("OES_texture_half_float_linear")||!(1<g.anisotropy||d.get(g).__currentAnisotropy)||(a.texParameterf(c,h.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(g.anisotropy,
    e.getMaxAnisotropy())),d.get(g).__currentAnisotropy=g.anisotropy)}function l(b,e,g,h){var k=f.convert(e.texture.format),m=f.convert(e.texture.type);c.texImage2D(h,0,k,e.width,e.height,0,k,m,null);a.bindFramebuffer(a.FRAMEBUFFER,b);a.framebufferTexture2D(a.FRAMEBUFFER,g,h,d.get(e.texture).__webglTexture,0);a.bindFramebuffer(a.FRAMEBUFFER,null)}function p(b,c){a.bindRenderbuffer(a.RENDERBUFFER,b);c.depthBuffer&&!c.stencilBuffer?(a.renderbufferStorage(a.RENDERBUFFER,a.DEPTH_COMPONENT16,c.width,c.height),
    a.framebufferRenderbuffer(a.FRAMEBUFFER,a.DEPTH_ATTACHMENT,a.RENDERBUFFER,b)):c.depthBuffer&&c.stencilBuffer?(a.renderbufferStorage(a.RENDERBUFFER,a.DEPTH_STENCIL,c.width,c.height),a.framebufferRenderbuffer(a.FRAMEBUFFER,a.DEPTH_STENCIL_ATTACHMENT,a.RENDERBUFFER,b)):a.renderbufferStorage(a.RENDERBUFFER,a.RGBA4,c.width,c.height);a.bindRenderbuffer(a.RENDERBUFFER,null)}var z="undefined"!==typeof WebGL2RenderingContext&&a instanceof window.WebGL2RenderingContext,y={};this.setTexture2D=r;this.setTextureCube=
    function(b,q){var u=d.get(b);if(6===b.image.length)if(0<b.version&&u.__version!==b.version){u.__image__webglTextureCube||(b.addEventListener("dispose",n),u.__image__webglTextureCube=a.createTexture(),g.textures++);c.activeTexture(a.TEXTURE0+q);c.bindTexture(a.TEXTURE_CUBE_MAP,u.__image__webglTextureCube);a.pixelStorei(a.UNPACK_FLIP_Y_WEBGL,b.flipY);q=b&&b.isCompressedTexture;for(var r=b.image[0]&&b.image[0].isDataTexture,l=[],v=0;6>v;v++)l[v]=q||r?r?b.image[v].image:b.image[v]:h(b.image[v],e.maxCubemapSize);
    var p=k(l[0]),w=f.convert(b.format),A=f.convert(b.type);t(a.TEXTURE_CUBE_MAP,b,p);for(v=0;6>v;v++)if(q)for(var y,I=l[v].mipmaps,z=0,x=I.length;z<x;z++)y=I[z],1023!==b.format&&1022!==b.format?-1<c.getCompressedTextureFormats().indexOf(w)?c.compressedTexImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+v,z,w,y.width,y.height,0,y.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):c.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+v,z,w,y.width,y.height,
    0,w,A,y.data);else r?c.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+v,0,w,l[v].width,l[v].height,0,w,A,l[v].data):c.texImage2D(a.TEXTURE_CUBE_MAP_POSITIVE_X+v,0,w,w,A,l[v]);m(b,p)&&a.generateMipmap(a.TEXTURE_CUBE_MAP);u.__version=b.version;if(b.onUpdate)b.onUpdate(b)}else c.activeTexture(a.TEXTURE0+q),c.bindTexture(a.TEXTURE_CUBE_MAP,u.__image__webglTextureCube)};this.setTextureCubeDynamic=function(b,e){c.activeTexture(a.TEXTURE0+e);c.bindTexture(a.TEXTURE_CUBE_MAP,d.get(b).__webglTexture)};this.setupRenderTarget=
    function(b){var e=d.get(b),f=d.get(b.texture);b.addEventListener("dispose",u);f.__webglTexture=a.createTexture();g.textures++;var h=!0===b.isWebGLRenderTargetCube,n=k(b);if(h){e.__webglFramebuffer=[];for(var q=0;6>q;q++)e.__webglFramebuffer[q]=a.createFramebuffer()}else e.__webglFramebuffer=a.createFramebuffer();if(h){c.bindTexture(a.TEXTURE_CUBE_MAP,f.__webglTexture);t(a.TEXTURE_CUBE_MAP,b.texture,n);for(q=0;6>q;q++)l(e.__webglFramebuffer[q],b,a.COLOR_ATTACHMENT0,a.TEXTURE_CUBE_MAP_POSITIVE_X+q);
    m(b.texture,n)&&a.generateMipmap(a.TEXTURE_CUBE_MAP);c.bindTexture(a.TEXTURE_CUBE_MAP,null)}else c.bindTexture(a.TEXTURE_2D,f.__webglTexture),t(a.TEXTURE_2D,b.texture,n),l(e.__webglFramebuffer,b,a.COLOR_ATTACHMENT0,a.TEXTURE_2D),m(b.texture,n)&&a.generateMipmap(a.TEXTURE_2D),c.bindTexture(a.TEXTURE_2D,null);if(b.depthBuffer){e=d.get(b);f=!0===b.isWebGLRenderTargetCube;if(b.depthTexture){if(f)throw Error("target.depthTexture not supported in Cube render targets");if(b&&b.isWebGLRenderTargetCube)throw Error("Depth Texture with cube render targets is not supported");
    a.bindFramebuffer(a.FRAMEBUFFER,e.__webglFramebuffer);if(!b.depthTexture||!b.depthTexture.isDepthTexture)throw Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");d.get(b.depthTexture).__webglTexture&&b.depthTexture.image.width===b.width&&b.depthTexture.image.height===b.height||(b.depthTexture.image.width=b.width,b.depthTexture.image.height=b.height,b.depthTexture.needsUpdate=!0);r(b.depthTexture,0);e=d.get(b.depthTexture).__webglTexture;if(1026===b.depthTexture.format)a.framebufferTexture2D(a.FRAMEBUFFER,
    a.DEPTH_ATTACHMENT,a.TEXTURE_2D,e,0);else if(1027===b.depthTexture.format)a.framebufferTexture2D(a.FRAMEBUFFER,a.DEPTH_STENCIL_ATTACHMENT,a.TEXTURE_2D,e,0);else throw Error("Unknown depthTexture format");}else if(f)for(e.__webglDepthbuffer=[],f=0;6>f;f++)a.bindFramebuffer(a.FRAMEBUFFER,e.__webglFramebuffer[f]),e.__webglDepthbuffer[f]=a.createRenderbuffer(),p(e.__webglDepthbuffer[f],b);else a.bindFramebuffer(a.FRAMEBUFFER,e.__webglFramebuffer),e.__webglDepthbuffer=a.createRenderbuffer(),p(e.__webglDepthbuffer,
    b);a.bindFramebuffer(a.FRAMEBUFFER,null)}};this.updateRenderTargetMipmap=function(b){var e=b.texture,f=k(b);m(e,f)&&(b=b.isWebGLRenderTargetCube?a.TEXTURE_CUBE_MAP:a.TEXTURE_2D,e=d.get(e).__webglTexture,c.bindTexture(b,e),a.generateMipmap(b),c.bindTexture(b,null))};this.updateVideoTextures=function(){for(var a in y)y[a].update()}}function Bg(){var a={};return{get:function(b){b=b.uuid;var c=a[b];void 0===c&&(c={},a[b]=c);return c},remove:function(b){delete a[b.uuid]},clear:function(){a={}}}}function Cg(a,
    b,c){function d(b,c,d){var e=new Uint8Array(4),f=a.createTexture();a.bindTexture(b,f);a.texParameteri(b,a.TEXTURE_MIN_FILTER,a.NEAREST);a.texParameteri(b,a.TEXTURE_MAG_FILTER,a.NEAREST);for(b=0;b<d;b++)a.texImage2D(c+b,0,a.RGBA,1,1,0,a.RGBA,a.UNSIGNED_BYTE,e);return f}function e(b){!0!==y[b]&&(a.enable(b),y[b]=!0)}function f(b){!1!==y[b]&&(a.disable(b),y[b]=!1)}function g(b,d,g,h,k,m,q,n){0!==b?e(a.BLEND):f(a.BLEND);if(5!==b){if(b!==J||n!==la)switch(b){case 2:n?(a.blendEquationSeparate(a.FUNC_ADD,
    a.FUNC_ADD),a.blendFuncSeparate(a.ONE,a.ONE,a.ONE,a.ONE)):(a.blendEquation(a.FUNC_ADD),a.blendFunc(a.SRC_ALPHA,a.ONE));break;case 3:n?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ZERO,a.ZERO,a.ONE_MINUS_SRC_COLOR,a.ONE_MINUS_SRC_ALPHA)):(a.blendEquation(a.FUNC_ADD),a.blendFunc(a.ZERO,a.ONE_MINUS_SRC_COLOR));break;case 4:n?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ZERO,a.SRC_COLOR,a.ZERO,a.SRC_ALPHA)):(a.blendEquation(a.FUNC_ADD),a.blendFunc(a.ZERO,
    a.SRC_COLOR));break;default:n?(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.ONE,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA)):(a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(a.SRC_ALPHA,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA))}H=E=C=D=B=x=null}else{k=k||d;m=m||g;q=q||h;if(d!==x||k!==C)a.blendEquationSeparate(c.convert(d),c.convert(k)),x=d,C=k;if(g!==B||h!==D||m!==E||q!==H)a.blendFuncSeparate(c.convert(g),c.convert(h),c.convert(m),c.convert(q)),
    B=g,D=h,E=m,H=q}J=b;la=n}function h(b){S!==b&&(b?a.frontFace(a.CW):a.frontFace(a.CCW),S=b)}function k(b){0!==b?(e(a.CULL_FACE),b!==K&&(1===b?a.cullFace(a.BACK):2===b?a.cullFace(a.FRONT):a.cullFace(a.FRONT_AND_BACK))):f(a.CULL_FACE);K=b}function m(b,c,d){if(b){if(e(a.POLYGON_OFFSET_FILL),L!==c||O!==d)a.polygonOffset(c,d),L=c,O=d}else f(a.POLYGON_OFFSET_FILL)}function q(b){void 0===b&&(b=a.TEXTURE0+Q-1);M!==b&&(a.activeTexture(b),M=b)}var n=new function(){var b=!1,c=new aa,d=null,e=new aa(0,0,0,0);
    return{setMask:function(c){d===c||b||(a.colorMask(c,c,c,c),d=c)},setLocked:function(a){b=a},setClear:function(b,d,f,g,h){!0===h&&(b*=g,d*=g,f*=g);c.set(b,d,f,g);!1===e.equals(c)&&(a.clearColor(b,d,f,g),e.copy(c))},reset:function(){b=!1;d=null;e.set(-1,0,0,0)}}},u=new function(){var b=!1,c=null,d=null,g=null;return{setTest:function(b){b?e(a.DEPTH_TEST):f(a.DEPTH_TEST)},setMask:function(d){c===d||b||(a.depthMask(d),c=d)},setFunc:function(b){if(d!==b){if(b)switch(b){case 0:a.depthFunc(a.NEVER);break;
    case 1:a.depthFunc(a.ALWAYS);break;case 2:a.depthFunc(a.LESS);break;case 3:a.depthFunc(a.LEQUAL);break;case 4:a.depthFunc(a.EQUAL);break;case 5:a.depthFunc(a.GEQUAL);break;case 6:a.depthFunc(a.GREATER);break;case 7:a.depthFunc(a.NOTEQUAL);break;default:a.depthFunc(a.LEQUAL)}else a.depthFunc(a.LEQUAL);d=b}},setLocked:function(a){b=a},setClear:function(b){g!==b&&(a.clearDepth(b),g=b)},reset:function(){b=!1;g=d=c=null}}},r=new function(){var b=!1,c=null,d=null,g=null,h=null,k=null,m=null,n=null,q=null;
    return{setTest:function(b){b?e(a.STENCIL_TEST):f(a.STENCIL_TEST)},setMask:function(d){c===d||b||(a.stencilMask(d),c=d)},setFunc:function(b,c,e){if(d!==b||g!==c||h!==e)a.stencilFunc(b,c,e),d=b,g=c,h=e},setOp:function(b,c,d){if(k!==b||m!==c||n!==d)a.stencilOp(b,c,d),k=b,m=c,n=d},setLocked:function(a){b=a},setClear:function(b){q!==b&&(a.clearStencil(b),q=b)},reset:function(){b=!1;q=n=m=k=h=g=d=c=null}}},l=a.getParameter(a.MAX_VERTEX_ATTRIBS),v=new Uint8Array(l),p=new Uint8Array(l),z=new Uint8Array(l),
    y={},I=null,A=null,J=null,x=null,B=null,D=null,C=null,E=null,H=null,la=!1,S=null,K=null,N=null,L=null,O=null,Q=a.getParameter(a.MAX_COMBINED_TEXTURE_IMAGE_UNITS),l=parseFloat(/^WebGL\ ([0-9])/.exec(a.getParameter(a.VERSION))[1]),V=1<=parseFloat(l),M=null,P={},R=new aa,G=new aa,Y={};Y[a.TEXTURE_2D]=d(a.TEXTURE_2D,a.TEXTURE_2D,1);Y[a.TEXTURE_CUBE_MAP]=d(a.TEXTURE_CUBE_MAP,a.TEXTURE_CUBE_MAP_POSITIVE_X,6);n.setClear(0,0,0,1);u.setClear(1);r.setClear(0);e(a.DEPTH_TEST);u.setFunc(3);h(!1);k(1);e(a.CULL_FACE);
    e(a.BLEND);g(1);return{buffers:{color:n,depth:u,stencil:r},initAttributes:function(){for(var a=0,b=v.length;a<b;a++)v[a]=0},enableAttribute:function(c){v[c]=1;0===p[c]&&(a.enableVertexAttribArray(c),p[c]=1);0!==z[c]&&(b.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(c,0),z[c]=0)},enableAttributeAndDivisor:function(c,d){v[c]=1;0===p[c]&&(a.enableVertexAttribArray(c),p[c]=1);z[c]!==d&&(b.get("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(c,d),z[c]=d)},disableUnusedAttributes:function(){for(var b=
    0,c=p.length;b!==c;++b)p[b]!==v[b]&&(a.disableVertexAttribArray(b),p[b]=0)},enable:e,disable:f,getCompressedTextureFormats:function(){if(null===I&&(I=[],b.get("WEBGL_compressed_texture_pvrtc")||b.get("WEBGL_compressed_texture_s3tc")||b.get("WEBGL_compressed_texture_etc1")))for(var c=a.getParameter(a.COMPRESSED_TEXTURE_FORMATS),d=0;d<c.length;d++)I.push(c[d]);return I},useProgram:function(b){return A!==b?(a.useProgram(b),A=b,!0):!1},setBlending:g,setMaterial:function(b,c){2===b.side?f(a.CULL_FACE):
    e(a.CULL_FACE);var d=1===b.side;c&&(d=!d);h(d);!0===b.transparent?g(b.blending,b.blendEquation,b.blendSrc,b.blendDst,b.blendEquationAlpha,b.blendSrcAlpha,b.blendDstAlpha,b.premultipliedAlpha):g(0);u.setFunc(b.depthFunc);u.setTest(b.depthTest);u.setMask(b.depthWrite);n.setMask(b.colorWrite);m(b.polygonOffset,b.polygonOffsetFactor,b.polygonOffsetUnits)},setFlipSided:h,setCullFace:k,setLineWidth:function(b){b!==N&&(V&&a.lineWidth(b),N=b)},setPolygonOffset:m,setScissorTest:function(b){b?e(a.SCISSOR_TEST):
    f(a.SCISSOR_TEST)},activeTexture:q,bindTexture:function(b,c){null===M&&q();var d=P[M];void 0===d&&(d={type:void 0,texture:void 0},P[M]=d);if(d.type!==b||d.texture!==c)a.bindTexture(b,c||Y[b]),d.type=b,d.texture=c},compressedTexImage2D:function(){try{a.compressedTexImage2D.apply(a,arguments)}catch(ea){console.error("THREE.WebGLState:",ea)}},texImage2D:function(){try{a.texImage2D.apply(a,arguments)}catch(ea){console.error("THREE.WebGLState:",ea)}},scissor:function(b){!1===R.equals(b)&&(a.scissor(b.x,
    b.y,b.z,b.w),R.copy(b))},viewport:function(b){!1===G.equals(b)&&(a.viewport(b.x,b.y,b.z,b.w),G.copy(b))},reset:function(){for(var b=0;b<p.length;b++)1===p[b]&&(a.disableVertexAttribArray(b),p[b]=0);y={};M=I=null;P={};K=S=J=A=null;n.reset();u.reset();r.reset()}}}function Dg(a,b,c){function d(b){if("highp"===b){if(0<a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.HIGH_FLOAT).precision&&0<a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.HIGH_FLOAT).precision)return"highp";b="mediump"}return"mediump"===b&&
    0<a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.MEDIUM_FLOAT).precision&&0<a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.MEDIUM_FLOAT).precision?"mediump":"lowp"}var e,f=void 0!==c.precision?c.precision:"highp",g=d(f);g!==f&&(console.warn("THREE.WebGLRenderer:",f,"not supported, using",g,"instead."),f=g);c=!0===c.logarithmicDepthBuffer;var g=a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS),h=a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS),k=a.getParameter(a.MAX_TEXTURE_SIZE),m=a.getParameter(a.MAX_CUBE_MAP_TEXTURE_SIZE),
    q=a.getParameter(a.MAX_VERTEX_ATTRIBS),n=a.getParameter(a.MAX_VERTEX_UNIFORM_VECTORS),u=a.getParameter(a.MAX_VARYING_VECTORS),r=a.getParameter(a.MAX_FRAGMENT_UNIFORM_VECTORS),l=0<h,v=!!b.get("OES_texture_float");return{getMaxAnisotropy:function(){if(void 0!==e)return e;var c=b.get("EXT_texture_filter_anisotropic");return e=null!==c?a.getParameter(c.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:d,precision:f,logarithmicDepthBuffer:c,maxTextures:g,maxVertexTextures:h,maxTextureSize:k,maxCubemapSize:m,
    maxAttributes:q,maxVertexUniforms:n,maxVaryings:u,maxFragmentUniforms:r,vertexTextures:l,floatFragmentTextures:v,floatVertexTextures:l&&v}}function ba(a,b,c,d){Ta.call(this);this.type="PerspectiveCamera";this.fov=void 0!==a?a:50;this.zoom=1;this.near=void 0!==c?c:.1;this.far=void 0!==d?d:2E3;this.focus=10;this.aspect=void 0!==b?b:1;this.view=null;this.filmGauge=35;this.filmOffset=0;this.updateProjectionMatrix()}function ud(a){ba.call(this);this.cameras=a||[]}function be(a){function b(){if(null!==
    d&&d.isPresenting){var b=d.getEyeParameters("left"),e=b.renderWidth,b=b.renderHeight;n=a.getPixelRatio();q=a.getSize();a.setDrawingBufferSize(2*e,b,1)}else c.enabled&&a.setDrawingBufferSize(q.width,q.height,n)}var c=this,d=null,e=null,f=null;"undefined"!==typeof window&&"VRFrameData"in window&&(e=new window.VRFrameData);var g=new O,h=new ba;h.bounds=new aa(0,0,.5,1);h.layers.enable(1);var k=new ba;k.bounds=new aa(.5,0,.5,1);k.layers.enable(2);var m=new ud([h,k]);m.layers.enable(1);m.layers.enable(2);
    var q,n;"undefined"!==typeof window&&window.addEventListener("vrdisplaypresentchange",b,!1);this.enabled=!1;this.getDevice=function(){return d};this.setDevice=function(a){void 0!==a&&(d=a)};this.setPoseTarget=function(a){void 0!==a&&(f=a)};this.getCamera=function(a){if(null===d)return a;d.depthNear=a.near;d.depthFar=a.far;d.getFrameData(e);var b=e.pose,c=null!==f?f:a;null!==b.position?c.position.fromArray(b.position):c.position.set(0,0,0);null!==b.orientation&&c.quaternion.fromArray(b.orientation);
    c.updateMatrixWorld();if(!1===d.isPresenting)return a;h.near=a.near;k.near=a.near;h.far=a.far;k.far=a.far;m.matrixWorld.copy(a.matrixWorld);m.matrixWorldInverse.copy(a.matrixWorldInverse);h.matrixWorldInverse.fromArray(e.leftViewMatrix);k.matrixWorldInverse.fromArray(e.rightViewMatrix);a=c.parent;null!==a&&(g.getInverse(a.matrixWorld),h.matrixWorldInverse.multiply(g),k.matrixWorldInverse.multiply(g));h.matrixWorld.getInverse(h.matrixWorldInverse);k.matrixWorld.getInverse(k.matrixWorldInverse);h.projectionMatrix.fromArray(e.leftProjectionMatrix);
    k.projectionMatrix.fromArray(e.rightProjectionMatrix);m.projectionMatrix.copy(h.projectionMatrix);a=d.getLayers();a.length&&(a=a[0],null!==a.leftBounds&&4===a.leftBounds.length&&h.bounds.fromArray(a.leftBounds),null!==a.rightBounds&&4===a.rightBounds.length&&k.bounds.fromArray(a.rightBounds));return m};this.submitFrame=function(){d&&d.isPresenting&&d.submitFrame()};this.dispose=function(){"undefined"!==typeof window&&window.removeEventListener("vrdisplaypresentchange",b)}}function Eg(a){var b={};
    return{get:function(c){if(void 0!==b[c])return b[c];switch(c){case "WEBGL_depth_texture":var d=a.getExtension("WEBGL_depth_texture")||a.getExtension("MOZ_WEBGL_depth_texture")||a.getExtension("WEBKIT_WEBGL_depth_texture");break;case "EXT_texture_filter_anisotropic":d=a.getExtension("EXT_texture_filter_anisotropic")||a.getExtension("MOZ_EXT_texture_filter_anisotropic")||a.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case "WEBGL_compressed_texture_s3tc":d=a.getExtension("WEBGL_compressed_texture_s3tc")||
    a.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case "WEBGL_compressed_texture_pvrtc":d=a.getExtension("WEBGL_compressed_texture_pvrtc")||a.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;case "WEBGL_compressed_texture_etc1":d=a.getExtension("WEBGL_compressed_texture_etc1");break;default:d=a.getExtension(c)}null===d&&console.warn("THREE.WebGLRenderer: "+c+" extension not supported.");return b[c]=d}}}function Fg(){function a(){m.value!==
    d&&(m.value=d,m.needsUpdate=0<e);c.numPlanes=e;c.numIntersection=0}function b(a,b,d,e){var f=null!==a?a.length:0,g=null;if(0!==f){g=m.value;if(!0!==e||null===g){e=d+4*f;b=b.matrixWorldInverse;k.getNormalMatrix(b);if(null===g||g.length<e)g=new Float32Array(e);for(e=0;e!==f;++e,d+=4)h.copy(a[e]).applyMatrix4(b,k),h.normal.toArray(g,d),g[d+3]=h.constant}m.value=g;m.needsUpdate=!0}c.numPlanes=f;return g}var c=this,d=null,e=0,f=!1,g=!1,h=new Ea,k=new ma,m={value:null,needsUpdate:!1};this.uniform=m;this.numIntersection=
    this.numPlanes=0;this.init=function(a,c,g){var h=0!==a.length||c||0!==e||f;f=c;d=b(a,g,0);e=a.length;return h};this.beginShadows=function(){g=!0;b(null)};this.endShadows=function(){g=!1;a()};this.setState=function(c,h,k,l,t,v){if(!f||null===c||0===c.length||g&&!k)g?b(null):a();else{k=g?0:e;var n=4*k,q=t.clippingState||null;m.value=q;q=b(c,l,n,v);for(c=0;c!==n;++c)q[c]=d[c];t.clippingState=q;this.numIntersection=h?this.numPlanes:0;this.numPlanes+=k}}}function af(a,b){return{convert:function(c){if(1E3===
    c)return a.REPEAT;if(1001===c)return a.CLAMP_TO_EDGE;if(1002===c)return a.MIRRORED_REPEAT;if(1003===c)return a.NEAREST;if(1004===c)return a.NEAREST_MIPMAP_NEAREST;if(1005===c)return a.NEAREST_MIPMAP_LINEAR;if(1006===c)return a.LINEAR;if(1007===c)return a.LINEAR_MIPMAP_NEAREST;if(1008===c)return a.LINEAR_MIPMAP_LINEAR;if(1009===c)return a.UNSIGNED_BYTE;if(1017===c)return a.UNSIGNED_SHORT_4_4_4_4;if(1018===c)return a.UNSIGNED_SHORT_5_5_5_1;if(1019===c)return a.UNSIGNED_SHORT_5_6_5;if(1010===c)return a.BYTE;
    if(1011===c)return a.SHORT;if(1012===c)return a.UNSIGNED_SHORT;if(1013===c)return a.INT;if(1014===c)return a.UNSIGNED_INT;if(1015===c)return a.FLOAT;if(1016===c){var d=b.get("OES_texture_half_float");if(null!==d)return d.HALF_FLOAT_OES}if(1021===c)return a.ALPHA;if(1022===c)return a.RGB;if(1023===c)return a.RGBA;if(1024===c)return a.LUMINANCE;if(1025===c)return a.LUMINANCE_ALPHA;if(1026===c)return a.DEPTH_COMPONENT;if(1027===c)return a.DEPTH_STENCIL;if(100===c)return a.FUNC_ADD;if(101===c)return a.FUNC_SUBTRACT;
    if(102===c)return a.FUNC_REVERSE_SUBTRACT;if(200===c)return a.ZERO;if(201===c)return a.ONE;if(202===c)return a.SRC_COLOR;if(203===c)return a.ONE_MINUS_SRC_COLOR;if(204===c)return a.SRC_ALPHA;if(205===c)return a.ONE_MINUS_SRC_ALPHA;if(206===c)return a.DST_ALPHA;if(207===c)return a.ONE_MINUS_DST_ALPHA;if(208===c)return a.DST_COLOR;if(209===c)return a.ONE_MINUS_DST_COLOR;if(210===c)return a.SRC_ALPHA_SATURATE;if(2001===c||2002===c||2003===c||2004===c)if(d=b.get("WEBGL_compressed_texture_s3tc"),null!==
    d){if(2001===c)return d.COMPRESSED_RGB_S3TC_DXT1_EXT;if(2002===c)return d.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(2003===c)return d.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(2004===c)return d.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(2100===c||2101===c||2102===c||2103===c)if(d=b.get("WEBGL_compressed_texture_pvrtc"),null!==d){if(2100===c)return d.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(2101===c)return d.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(2102===c)return d.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(2103===c)return d.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(2151===
    c&&(d=b.get("WEBGL_compressed_texture_etc1"),null!==d))return d.COMPRESSED_RGB_ETC1_WEBGL;if(103===c||104===c)if(d=b.get("EXT_blend_minmax"),null!==d){if(103===c)return d.MIN_EXT;if(104===c)return d.MAX_EXT}return 1020===c&&(d=b.get("WEBGL_depth_texture"),null!==d)?d.UNSIGNED_INT_24_8_WEBGL:0}}}function ce(a){function b(){ia=new Eg(F);ia.get("WEBGL_depth_texture");ia.get("OES_texture_float");ia.get("OES_texture_float_linear");ia.get("OES_texture_half_float");ia.get("OES_texture_half_float_linear");
    ia.get("OES_standard_derivatives");ia.get("OES_element_index_uint");ia.get("ANGLE_instanced_arrays");pa=new af(F,ia);T=new Dg(F,ia,a);Z=new Cg(F,ia,pa);Z.scissor(X.copy(fa).multiplyScalar(wa));Z.viewport(nb.copy(da).multiplyScalar(wa));ca=new Bg;ga=new Ag(F,ia,Z,ca,T,pa,ha);qa=new bg(F);ra=new og(F,qa,ha);ta=new rg(ra,ba);xa=new lg(F);ma=new zg(S,ia,T);ua=new qg;sa=new jg;ja=new fg(S,Z,ra,J);ya=new ng(F,ia,ba);za=new mg(F,ia,ba);Aa=new Zf(S,F,Z,ga,T);Ba=new $f(S,F,Z,ga,T);S.info.programs=ma.programs;
    S.context=F;S.capabilities=T;S.extensions=ia;S.properties=ca;S.renderLists=sa;S.state=Z}function c(a){a.preventDefault();console.log("THREE.WebGLRenderer: Context Lost.");L=!0}function d(){console.log("THREE.WebGLRenderer: Context Restored.");L=!1;b()}function e(a){a=a.target;a.removeEventListener("dispose",e);f(a);ca.remove(a)}function f(a){var b=ca.get(a).program;a.program=void 0;void 0!==b&&ma.releaseProgram(b)}function g(a,b,c){a.render(function(a){S.renderBufferImmediate(a,b,c)})}function h(a){null!==
    Ca&&Ca(a);(a=ka.getDevice())&&a.isPresenting?a.requestAnimationFrame(h):window.requestAnimationFrame(h)}function k(a,b,c){if(!1!==a.visible){if(a.layers.test(b.layers))if(a.isLight)D.push(a),a.castShadow&&C.push(a);else if(a.isSprite)a.frustumCulled&&!$d.intersectsSprite(a)||H.push(a);else if(a.isLensFlare)la.push(a);else if(a.isImmediateRenderObject)c&&Ob.setFromMatrixPosition(a.matrixWorld).applyMatrix4(td),E.push(a,null,a.material,Ob.z,null);else if(a.isMesh||a.isLine||a.isPoints)if(a.isSkinnedMesh&&
    a.skeleton.update(),!a.frustumCulled||$d.intersectsObject(a)){c&&Ob.setFromMatrixPosition(a.matrixWorld).applyMatrix4(td);var d=ta.update(a),e=a.material;if(Array.isArray(e))for(var f=d.groups,g=0,h=f.length;g<h;g++){var m=f[g],n=e[m.materialIndex];n&&n.visible&&E.push(a,d,n,Ob.z,m)}else e.visible&&E.push(a,d,e,Ob.z,null)}a=a.children;g=0;for(h=a.length;g<h;g++)k(a[g],b,c)}}function m(a,b,c,d){for(var e=0,f=a.length;e<f;e++){var g=a[e],h=g.object,k=g.geometry,m=void 0===d?g.material:d,g=g.group;if(c.isArrayCamera){W=
    c;for(var n=c.cameras,u=0,l=n.length;u<l;u++){var r=n[u];if(h.layers.test(r.layers)){var t=r.bounds;Z.viewport(nb.set(t.x*ea,t.y*U,t.z*ea,t.w*U).multiplyScalar(wa));q(h,b,r,k,m,g)}}}else W=null,q(h,b,c,k,m,g)}}function q(a,b,c,d,e,f){a.onBeforeRender(S,b,c,d,e,f);a.modelViewMatrix.multiplyMatrices(c.matrixWorldInverse,a.matrixWorld);a.normalMatrix.getNormalMatrix(a.modelViewMatrix);if(a.isImmediateRenderObject){var h=a.isMesh&&0>a.matrixWorld.determinant();Z.setMaterial(e,h);h=u(c,b.fog,e,a);R="";
    g(a,h,e)}else S.renderBufferDirect(c,b.fog,d,e,a,f);a.onAfterRender(S,b,c,d,e,f)}function n(a,b,c){var d=ca.get(a);c=ma.getParameters(a,ua.state,C,b,Ja.numPlanes,Ja.numIntersection,c);var g=ma.getProgramCode(a,c),h=d.program,k=!0;if(void 0===h)a.addEventListener("dispose",e);else if(h.code!==g)f(a);else{if(void 0!==c.shaderID)return;k=!1}k&&(c.shaderID?(h=tb[c.shaderID],d.shader={name:a.type,uniforms:Ga.clone(h.uniforms),vertexShader:h.vertexShader,fragmentShader:h.fragmentShader}):d.shader={name:a.type,
    uniforms:a.uniforms,vertexShader:a.vertexShader,fragmentShader:a.fragmentShader},a.onBeforeCompile(d.shader),h=ma.acquireProgram(a,d.shader,c,g),d.program=h,a.program=h);c=h.getAttributes();if(a.morphTargets)for(g=a.numSupportedMorphTargets=0;g<S.maxMorphTargets;g++)0<=c["morphTarget"+g]&&a.numSupportedMorphTargets++;if(a.morphNormals)for(g=a.numSupportedMorphNormals=0;g<S.maxMorphNormals;g++)0<=c["morphNormal"+g]&&a.numSupportedMorphNormals++;c=d.shader.uniforms;if(!a.isShaderMaterial&&!a.isRawShaderMaterial||
    !0===a.clipping)d.numClippingPlanes=Ja.numPlanes,d.numIntersection=Ja.numIntersection,c.clippingPlanes=Ja.uniform;d.fog=b;d.lightsHash=ua.state.hash;a.lights&&(c.ambientLightColor.value=ua.state.ambient,c.directionalLights.value=ua.state.directional,c.spotLights.value=ua.state.spot,c.rectAreaLights.value=ua.state.rectArea,c.pointLights.value=ua.state.point,c.hemisphereLights.value=ua.state.hemi,c.directionalShadowMap.value=ua.state.directionalShadowMap,c.directionalShadowMatrix.value=ua.state.directionalShadowMatrix,
    c.spotShadowMap.value=ua.state.spotShadowMap,c.spotShadowMatrix.value=ua.state.spotShadowMatrix,c.pointShadowMap.value=ua.state.pointShadowMap,c.pointShadowMatrix.value=ua.state.pointShadowMatrix);a=d.program.getUniforms();a=mb.seqWithValue(a.seq,c);d.uniformsList=a}function u(a,b,c,d){Y=0;var e=ca.get(c);sd&&(ae||a!==V)&&Ja.setState(c.clippingPlanes,c.clipIntersection,c.clipShadows,a,e,a===V&&c.id===P);!1===c.needsUpdate&&(void 0===e.program?c.needsUpdate=!0:c.fog&&e.fog!==b?c.needsUpdate=!0:c.lights&&
    e.lightsHash!==ua.state.hash?c.needsUpdate=!0:void 0===e.numClippingPlanes||e.numClippingPlanes===Ja.numPlanes&&e.numIntersection===Ja.numIntersection||(c.needsUpdate=!0));c.needsUpdate&&(n(c,b,d),c.needsUpdate=!1);var f=!1,g=!1,h=!1,k=e.program,m=k.getUniforms(),q=e.shader.uniforms;Z.useProgram(k.program)&&(h=g=f=!0);c.id!==P&&(P=c.id,g=!0);if(f||a!==V){m.setValue(F,"projectionMatrix",a.projectionMatrix);T.logarithmicDepthBuffer&&m.setValue(F,"logDepthBufFC",2/(Math.log(a.far+1)/Math.LN2));V!==(W||
    a)&&(V=W||a,h=g=!0);if(c.isShaderMaterial||c.isMeshPhongMaterial||c.isMeshStandardMaterial||c.envMap)f=m.map.cameraPosition,void 0!==f&&f.setValue(F,Ob.setFromMatrixPosition(a.matrixWorld));(c.isMeshPhongMaterial||c.isMeshLambertMaterial||c.isMeshBasicMaterial||c.isMeshStandardMaterial||c.isShaderMaterial||c.skinning)&&m.setValue(F,"viewMatrix",a.matrixWorldInverse)}if(c.skinning&&(m.setOptional(F,d,"bindMatrix"),m.setOptional(F,d,"bindMatrixInverse"),a=d.skeleton))if(f=a.bones,T.floatVertexTextures){if(void 0===
    a.boneTexture){var f=Math.sqrt(4*f.length),f=Q.ceilPowerOfTwo(f),f=Math.max(f,4),u=new Float32Array(f*f*4);u.set(a.boneMatrices);var r=new lb(u,f,f,1023,1015);a.boneMatrices=u;a.boneTexture=r;a.boneTextureSize=f}m.setValue(F,"boneTexture",a.boneTexture);m.setValue(F,"boneTextureSize",a.boneTextureSize)}else m.setOptional(F,a,"boneMatrices");g&&(m.setValue(F,"toneMappingExposure",S.toneMappingExposure),m.setValue(F,"toneMappingWhitePoint",S.toneMappingWhitePoint),c.lights&&(g=h,q.ambientLightColor.needsUpdate=
    g,q.directionalLights.needsUpdate=g,q.pointLights.needsUpdate=g,q.spotLights.needsUpdate=g,q.rectAreaLights.needsUpdate=g,q.hemisphereLights.needsUpdate=g),b&&c.fog&&(q.fogColor.value=b.color,b.isFog?(q.fogNear.value=b.near,q.fogFar.value=b.far):b.isFogExp2&&(q.fogDensity.value=b.density)),c.isMeshBasicMaterial?l(q,c):c.isMeshLambertMaterial?(l(q,c),c.emissiveMap&&(q.emissiveMap.value=c.emissiveMap)):c.isMeshPhongMaterial?(l(q,c),c.isMeshToonMaterial?(t(q,c),c.gradientMap&&(q.gradientMap.value=c.gradientMap)):
    t(q,c)):c.isMeshStandardMaterial?(l(q,c),c.isMeshPhysicalMaterial&&(q.clearCoat.value=c.clearCoat,q.clearCoatRoughness.value=c.clearCoatRoughness),q.roughness.value=c.roughness,q.metalness.value=c.metalness,c.roughnessMap&&(q.roughnessMap.value=c.roughnessMap),c.metalnessMap&&(q.metalnessMap.value=c.metalnessMap),c.emissiveMap&&(q.emissiveMap.value=c.emissiveMap),c.bumpMap&&(q.bumpMap.value=c.bumpMap,q.bumpScale.value=c.bumpScale),c.normalMap&&(q.normalMap.value=c.normalMap,q.normalScale.value.copy(c.normalScale)),
    c.displacementMap&&(q.displacementMap.value=c.displacementMap,q.displacementScale.value=c.displacementScale,q.displacementBias.value=c.displacementBias),c.envMap&&(q.envMapIntensity.value=c.envMapIntensity)):c.isMeshDepthMaterial?(l(q,c),c.displacementMap&&(q.displacementMap.value=c.displacementMap,q.displacementScale.value=c.displacementScale,q.displacementBias.value=c.displacementBias)):c.isMeshDistanceMaterial?(l(q,c),c.displacementMap&&(q.displacementMap.value=c.displacementMap,q.displacementScale.value=
    c.displacementScale,q.displacementBias.value=c.displacementBias),q.referencePosition.value.copy(c.referencePosition),q.nearDistance.value=c.nearDistance,q.farDistance.value=c.farDistance):c.isMeshNormalMaterial?(l(q,c),c.bumpMap&&(q.bumpMap.value=c.bumpMap,q.bumpScale.value=c.bumpScale),c.normalMap&&(q.normalMap.value=c.normalMap,q.normalScale.value.copy(c.normalScale)),c.displacementMap&&(q.displacementMap.value=c.displacementMap,q.displacementScale.value=c.displacementScale,q.displacementBias.value=
    c.displacementBias)):c.isLineBasicMaterial?(q.diffuse.value=c.color,q.opacity.value=c.opacity,c.isLineDashedMaterial&&(q.dashSize.value=c.dashSize,q.totalSize.value=c.dashSize+c.gapSize,q.scale.value=c.scale)):c.isPointsMaterial?(q.diffuse.value=c.color,q.opacity.value=c.opacity,q.size.value=c.size*wa,q.scale.value=.5*U,q.map.value=c.map,null!==c.map&&(!0===c.map.matrixAutoUpdate&&(b=c.map.offset,g=c.map.repeat,h=c.map.center,c.map.matrix.setUvTransform(b.x,b.y,g.x,g.y,c.map.rotation,h.x,h.y)),q.uvTransform.value.copy(c.map.matrix))):
    c.isShadowMaterial&&(q.color.value=c.color,q.opacity.value=c.opacity),void 0!==q.ltcMat&&(q.ltcMat.value=K.LTC_MAT_TEXTURE),void 0!==q.ltcMag&&(q.ltcMag.value=K.LTC_MAG_TEXTURE),mb.upload(F,e.uniformsList,q,S));m.setValue(F,"modelViewMatrix",d.modelViewMatrix);m.setValue(F,"normalMatrix",d.normalMatrix);m.setValue(F,"modelMatrix",d.matrixWorld);return k}function l(a,b){a.opacity.value=b.opacity;b.color&&(a.diffuse.value=b.color);b.emissive&&a.emissive.value.copy(b.emissive).multiplyScalar(b.emissiveIntensity);
    b.map&&(a.map.value=b.map);b.alphaMap&&(a.alphaMap.value=b.alphaMap);b.specularMap&&(a.specularMap.value=b.specularMap);b.envMap&&(a.envMap.value=b.envMap,a.flipEnvMap.value=b.envMap&&b.envMap.isCubeTexture?-1:1,a.reflectivity.value=b.reflectivity,a.refractionRatio.value=b.refractionRatio);b.lightMap&&(a.lightMap.value=b.lightMap,a.lightMapIntensity.value=b.lightMapIntensity);b.aoMap&&(a.aoMap.value=b.aoMap,a.aoMapIntensity.value=b.aoMapIntensity);if(b.map)var c=b.map;else b.specularMap?c=b.specularMap:
    b.displacementMap?c=b.displacementMap:b.normalMap?c=b.normalMap:b.bumpMap?c=b.bumpMap:b.roughnessMap?c=b.roughnessMap:b.metalnessMap?c=b.metalnessMap:b.alphaMap?c=b.alphaMap:b.emissiveMap&&(c=b.emissiveMap);if(void 0!==c){c.isWebGLRenderTarget&&(c=c.texture);if(!0===c.matrixAutoUpdate){b=c.offset;var d=c.repeat,e=c.center;c.matrix.setUvTransform(b.x,b.y,d.x,d.y,c.rotation,e.x,e.y)}a.uvTransform.value.copy(c.matrix)}}function t(a,b){a.specular.value=b.specular;a.shininess.value=Math.max(b.shininess,
    1E-4);b.emissiveMap&&(a.emissiveMap.value=b.emissiveMap);b.bumpMap&&(a.bumpMap.value=b.bumpMap,a.bumpScale.value=b.bumpScale);b.normalMap&&(a.normalMap.value=b.normalMap,a.normalScale.value.copy(b.normalScale));b.displacementMap&&(a.displacementMap.value=b.displacementMap,a.displacementScale.value=b.displacementScale,a.displacementBias.value=b.displacementBias)}console.log("THREE.WebGLRenderer","89");a=a||{};var v=void 0!==a.canvas?a.canvas:document.createElementNS("http://www.w3.org/1999/xhtml",
    "canvas"),w=void 0!==a.context?a.context:null,z=void 0!==a.alpha?a.alpha:!1,y=void 0!==a.depth?a.depth:!0,I=void 0!==a.stencil?a.stencil:!0,A=void 0!==a.antialias?a.antialias:!1,J=void 0!==a.premultipliedAlpha?a.premultipliedAlpha:!0,x=void 0!==a.preserveDrawingBuffer?a.preserveDrawingBuffer:!1,B=void 0!==a.powerPreference?a.powerPreference:"default",D=[],C=[],E=null,H=[],la=[];this.domElement=v;this.context=null;this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=
    !0;this.clippingPlanes=[];this.localClippingEnabled=!1;this.gammaFactor=2;this.physicallyCorrectLights=this.gammaOutput=this.gammaInput=!1;this.toneMappingWhitePoint=this.toneMappingExposure=this.toneMapping=1;this.maxMorphTargets=8;this.maxMorphNormals=4;var S=this,L=!1,N=null,M=null,P=-1,R="",V=null,W=null,nb=new aa,X=new aa,G=null,Y=0,ea=v.width,U=v.height,wa=1,da=new aa(0,0,ea,U),fa=new aa(0,0,ea,U),$e=!1,$d=new rd,Ja=new Fg,sd=!1,ae=!1,td=new O,Ob=new p,ha={geometries:0,textures:0},ba={frame:0,
    calls:0,vertices:0,faces:0,points:0};this.info={render:ba,memory:ha,programs:null};try{z={alpha:z,depth:y,stencil:I,antialias:A,premultipliedAlpha:J,preserveDrawingBuffer:x,powerPreference:B};v.addEventListener("webglcontextlost",c,!1);v.addEventListener("webglcontextrestored",d,!1);var F=w||v.getContext("webgl",z)||v.getContext("experimental-webgl",z);if(null===F){if(null!==v.getContext("webgl"))throw Error("Error creating WebGL context with your selected attributes.");throw Error("Error creating WebGL context.");
    }void 0===F.getShaderPrecisionFormat&&(F.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(Gg){console.error("THREE.WebGLRenderer: "+Gg.message)}var ia,T,Z,ca,ga,qa,ra,ta,ua,ma,sa,ja,xa,ya,za,Aa,Ba,pa;b();var ka=new be(S);this.vr=ka;var Ea=new Ue(S,ta,T.maxTextureSize);this.shadowMap=Ea;this.getContext=function(){return F};this.getContextAttributes=function(){return F.getContextAttributes()};this.forceContextLoss=function(){var a=ia.get("WEBGL_lose_context");a&&
    a.loseContext()};this.forceContextRestore=function(){var a=ia.get("WEBGL_lose_context");a&&a.restoreContext()};this.getPixelRatio=function(){return wa};this.setPixelRatio=function(a){void 0!==a&&(wa=a,this.setSize(ea,U,!1))};this.getSize=function(){return{width:ea,height:U}};this.setSize=function(a,b,c){var d=ka.getDevice();d&&d.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(ea=a,U=b,v.width=a*wa,v.height=b*wa,!1!==c&&(v.style.width=a+"px",v.style.height=
    b+"px"),this.setViewport(0,0,a,b))};this.getDrawingBufferSize=function(){return{width:ea*wa,height:U*wa}};this.setDrawingBufferSize=function(a,b,c){ea=a;U=b;wa=c;v.width=a*c;v.height=b*c;this.setViewport(0,0,a,b)};this.setViewport=function(a,b,c,d){da.set(a,U-b-d,c,d);Z.viewport(nb.copy(da).multiplyScalar(wa))};this.setScissor=function(a,b,c,d){fa.set(a,U-b-d,c,d);Z.scissor(X.copy(fa).multiplyScalar(wa))};this.setScissorTest=function(a){Z.setScissorTest($e=a)};this.getClearColor=function(){return ja.getClearColor()};
    this.setClearColor=function(){ja.setClearColor.apply(ja,arguments)};this.getClearAlpha=function(){return ja.getClearAlpha()};this.setClearAlpha=function(){ja.setClearAlpha.apply(ja,arguments)};this.clear=function(a,b,c){var d=0;if(void 0===a||a)d|=F.COLOR_BUFFER_BIT;if(void 0===b||b)d|=F.DEPTH_BUFFER_BIT;if(void 0===c||c)d|=F.STENCIL_BUFFER_BIT;F.clear(d)};this.clearColor=function(){this.clear(!0,!1,!1)};this.clearDepth=function(){this.clear(!1,!0,!1)};this.clearStencil=function(){this.clear(!1,!1,
    !0)};this.clearTarget=function(a,b,c,d){this.setRenderTarget(a);this.clear(b,c,d)};this.dispose=function(){v.removeEventListener("webglcontextlost",c,!1);v.removeEventListener("webglcontextrestored",d,!1);sa.dispose();ka.dispose()};this.renderBufferImmediate=function(a,b,c){Z.initAttributes();var d=ca.get(a);a.hasPositions&&!d.position&&(d.position=F.createBuffer());a.hasNormals&&!d.normal&&(d.normal=F.createBuffer());a.hasUvs&&!d.uv&&(d.uv=F.createBuffer());a.hasColors&&!d.color&&(d.color=F.createBuffer());
    b=b.getAttributes();a.hasPositions&&(F.bindBuffer(F.ARRAY_BUFFER,d.position),F.bufferData(F.ARRAY_BUFFER,a.positionArray,F.DYNAMIC_DRAW),Z.enableAttribute(b.position),F.vertexAttribPointer(b.position,3,F.FLOAT,!1,0,0));if(a.hasNormals){F.bindBuffer(F.ARRAY_BUFFER,d.normal);if(!c.isMeshPhongMaterial&&!c.isMeshStandardMaterial&&!c.isMeshNormalMaterial&&!0===c.flatShading)for(var e=0,f=3*a.count;e<f;e+=9){var g=a.normalArray,h=(g[e+0]+g[e+3]+g[e+6])/3,k=(g[e+1]+g[e+4]+g[e+7])/3,m=(g[e+2]+g[e+5]+g[e+
    8])/3;g[e+0]=h;g[e+1]=k;g[e+2]=m;g[e+3]=h;g[e+4]=k;g[e+5]=m;g[e+6]=h;g[e+7]=k;g[e+8]=m}F.bufferData(F.ARRAY_BUFFER,a.normalArray,F.DYNAMIC_DRAW);Z.enableAttribute(b.normal);F.vertexAttribPointer(b.normal,3,F.FLOAT,!1,0,0)}a.hasUvs&&c.map&&(F.bindBuffer(F.ARRAY_BUFFER,d.uv),F.bufferData(F.ARRAY_BUFFER,a.uvArray,F.DYNAMIC_DRAW),Z.enableAttribute(b.uv),F.vertexAttribPointer(b.uv,2,F.FLOAT,!1,0,0));a.hasColors&&0!==c.vertexColors&&(F.bindBuffer(F.ARRAY_BUFFER,d.color),F.bufferData(F.ARRAY_BUFFER,a.colorArray,
    F.DYNAMIC_DRAW),Z.enableAttribute(b.color),F.vertexAttribPointer(b.color,3,F.FLOAT,!1,0,0));Z.disableUnusedAttributes();F.drawArrays(F.TRIANGLES,0,a.count);a.count=0};this.renderBufferDirect=function(a,b,c,d,e,f){var g=e.isMesh&&0>e.matrixWorld.determinant();Z.setMaterial(d,g);var h=u(a,b,d,e);a=c.id+"_"+h.id+"_"+(!0===d.wireframe);var k=!1;a!==R&&(R=a,k=!0);e.morphTargetInfluences&&(xa.update(e,c,d,h),k=!0);var g=c.index,m=c.attributes.position;b=1;!0===d.wireframe&&(g=ra.getWireframeAttribute(c),
    b=2);a=ya;if(null!==g){var q=qa.get(g);a=za;a.setIndex(q)}if(k){k=void 0;if(c&&c.isInstancedBufferGeometry&&null===ia.get("ANGLE_instanced_arrays"))console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");else{void 0===k&&(k=0);Z.initAttributes();var n=c.attributes,h=h.getAttributes(),l=d.defaultAttributeValues;for(J in h){var r=h[J];if(0<=r){var t=n[J];if(void 0!==t){var v=t.normalized,p=t.itemSize,
    w=qa.get(t);if(void 0!==w){var A=w.buffer,y=w.type,w=w.bytesPerElement;if(t.isInterleavedBufferAttribute){var z=t.data,I=z.stride,t=t.offset;z&&z.isInstancedInterleavedBuffer?(Z.enableAttributeAndDivisor(r,z.meshPerAttribute),void 0===c.maxInstancedCount&&(c.maxInstancedCount=z.meshPerAttribute*z.count)):Z.enableAttribute(r);F.bindBuffer(F.ARRAY_BUFFER,A);F.vertexAttribPointer(r,p,y,v,I*w,(k*I+t)*w)}else t.isInstancedBufferAttribute?(Z.enableAttributeAndDivisor(r,t.meshPerAttribute),void 0===c.maxInstancedCount&&
    (c.maxInstancedCount=t.meshPerAttribute*t.count)):Z.enableAttribute(r),F.bindBuffer(F.ARRAY_BUFFER,A),F.vertexAttribPointer(r,p,y,v,0,k*p*w)}}else if(void 0!==l&&(v=l[J],void 0!==v))switch(v.length){case 2:F.vertexAttrib2fv(r,v);break;case 3:F.vertexAttrib3fv(r,v);break;case 4:F.vertexAttrib4fv(r,v);break;default:F.vertexAttrib1fv(r,v)}}}Z.disableUnusedAttributes()}null!==g&&F.bindBuffer(F.ELEMENT_ARRAY_BUFFER,q.buffer)}q=0;null!==g?q=g.count:void 0!==m&&(q=m.count);g=c.drawRange.start*b;m=null!==
    f?f.start*b:0;var J=Math.max(g,m);f=Math.max(0,Math.min(q,g+c.drawRange.count*b,m+(null!==f?f.count*b:Infinity))-1-J+1);if(0!==f){if(e.isMesh)if(!0===d.wireframe)Z.setLineWidth(d.wireframeLinewidth*(null===N?wa:1)),a.setMode(F.LINES);else switch(e.drawMode){case 0:a.setMode(F.TRIANGLES);break;case 1:a.setMode(F.TRIANGLE_STRIP);break;case 2:a.setMode(F.TRIANGLE_FAN)}else e.isLine?(d=d.linewidth,void 0===d&&(d=1),Z.setLineWidth(d*(null===N?wa:1)),e.isLineSegments?a.setMode(F.LINES):e.isLineLoop?a.setMode(F.LINE_LOOP):
    a.setMode(F.LINE_STRIP)):e.isPoints&&a.setMode(F.POINTS);c&&c.isInstancedBufferGeometry?0<c.maxInstancedCount&&a.renderInstances(c,J,f):a.render(J,f)}};this.compile=function(a,b){D.length=0;C.length=0;a.traverse(function(a){a.isLight&&(D.push(a),a.castShadow&&C.push(a))});ua.setup(D,C,b);a.traverse(function(b){if(b.material)if(Array.isArray(b.material))for(var c=0;c<b.material.length;c++)n(b.material[c],a.fog,b);else n(b.material,a.fog,b)})};var Fa=!1,Ca=null;this.animate=function(a){Ca=a;Fa||((a=
    ka.getDevice())&&a.isPresenting?a.requestAnimationFrame(h):window.requestAnimationFrame(h),Fa=!0)};this.render=function(a,b,c,d){if(!b||!b.isCamera)console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");else if(!L){R="";P=-1;V=null;!0===a.autoUpdate&&a.updateMatrixWorld();null===b.parent&&b.updateMatrixWorld();ka.enabled&&(b=ka.getCamera(b));td.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);$d.setFromMatrix(td);D.length=0;C.length=0;H.length=0;la.length=
    0;ae=this.localClippingEnabled;sd=Ja.init(this.clippingPlanes,ae,b);E=sa.get(a,b);E.init();k(a,b,S.sortObjects);!0===S.sortObjects&&E.sort();ga.updateVideoTextures();sd&&Ja.beginShadows();Ea.render(C,a,b);ua.setup(D,C,b);sd&&Ja.endShadows();ba.frame++;ba.calls=0;ba.vertices=0;ba.faces=0;ba.points=0;void 0===c&&(c=null);this.setRenderTarget(c);ja.render(E,a,b,d);d=E.opaque;var e=E.transparent;if(a.overrideMaterial){var f=a.overrideMaterial;d.length&&m(d,a,b,f);e.length&&m(e,a,b,f)}else d.length&&m(d,
    a,b),e.length&&m(e,a,b);Ba.render(H,a,b);Aa.render(la,a,b,nb);c&&ga.updateRenderTargetMipmap(c);Z.buffers.depth.setTest(!0);Z.buffers.depth.setMask(!0);Z.buffers.color.setMask(!0);Z.setPolygonOffset(!1);ka.enabled&&ka.submitFrame()}};this.setFaceCulling=function(a,b){Z.setCullFace(a);Z.setFlipSided(0===b)};this.allocTextureUnit=function(){var a=Y;a>=T.maxTextures&&console.warn("THREE.WebGLRenderer: Trying to use "+a+" texture units while this GPU supports only "+T.maxTextures);Y+=1;return a};this.setTexture2D=
    function(){var a=!1;return function(b,c){b&&b.isWebGLRenderTarget&&(a||(console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."),a=!0),b=b.texture);ga.setTexture2D(b,c)}}();this.setTexture=function(){var a=!1;return function(b,c){a||(console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."),a=!0);ga.setTexture2D(b,c)}}();this.setTextureCube=function(){var a=!1;return function(b,c){b&&b.isWebGLRenderTargetCube&&
    (a||(console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."),a=!0),b=b.texture);b&&b.isCubeTexture||Array.isArray(b.image)&&6===b.image.length?ga.setTextureCube(b,c):ga.setTextureCubeDynamic(b,c)}}();this.getRenderTarget=function(){return N};this.setRenderTarget=function(a){(N=a)&&void 0===ca.get(a).__webglFramebuffer&&ga.setupRenderTarget(a);var b=null,c=!1;a?(b=ca.get(a).__webglFramebuffer,a.isWebGLRenderTargetCube&&(b=
    b[a.activeCubeFace],c=!0),nb.copy(a.viewport),X.copy(a.scissor),G=a.scissorTest):(nb.copy(da).multiplyScalar(wa),X.copy(fa).multiplyScalar(wa),G=$e);M!==b&&(F.bindFramebuffer(F.FRAMEBUFFER,b),M=b);Z.viewport(nb);Z.scissor(X);Z.setScissorTest(G);c&&(c=ca.get(a.texture),F.framebufferTexture2D(F.FRAMEBUFFER,F.COLOR_ATTACHMENT0,F.TEXTURE_CUBE_MAP_POSITIVE_X+a.activeCubeFace,c.__webglTexture,a.activeMipMapLevel))};this.readRenderTargetPixels=function(a,b,c,d,e,f){if(a&&a.isWebGLRenderTarget){var g=ca.get(a).__webglFramebuffer;
    if(g){var h=!1;g!==M&&(F.bindFramebuffer(F.FRAMEBUFFER,g),h=!0);try{var k=a.texture,m=k.format,q=k.type;1023!==m&&pa.convert(m)!==F.getParameter(F.IMPLEMENTATION_COLOR_READ_FORMAT)?console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format."):1009===q||pa.convert(q)===F.getParameter(F.IMPLEMENTATION_COLOR_READ_TYPE)||1015===q&&(ia.get("OES_texture_float")||ia.get("WEBGL_color_buffer_float"))||1016===q&&ia.get("EXT_color_buffer_half_float")?
    F.checkFramebufferStatus(F.FRAMEBUFFER)===F.FRAMEBUFFER_COMPLETE?0<=b&&b<=a.width-d&&0<=c&&c<=a.height-e&&F.readPixels(b,c,d,e,pa.convert(m),pa.convert(q),f):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete."):console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.")}finally{h&&F.bindFramebuffer(F.FRAMEBUFFER,M)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")}}
    function Pb(a,b){this.name="";this.color=new H(a);this.density=void 0!==b?b:2.5E-4}function Qb(a,b,c){this.name="";this.color=new H(a);this.near=void 0!==b?b:1;this.far=void 0!==c?c:1E3}function vd(){x.call(this);this.type="Scene";this.overrideMaterial=this.fog=this.background=null;this.autoUpdate=!0}function de(a,b,c,d,e){x.call(this);this.lensFlares=[];this.positionScreen=new p;this.customUpdateCallback=void 0;void 0!==a&&this.add(a,b,c,d,e)}function hb(a){P.call(this);this.type="SpriteMaterial";
    this.color=new H(16777215);this.map=null;this.rotation=0;this.lights=this.fog=!1;this.setValues(a)}function Cc(a){x.call(this);this.type="Sprite";this.material=void 0!==a?a:new hb}function Dc(){x.call(this);this.type="LOD";Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})}function Ec(a,b){a=a||[];this.bones=a.slice(0);this.boneMatrices=new Float32Array(16*this.bones.length);if(void 0===b)this.calculateInverses();else if(this.bones.length===b.length)this.boneInverses=b.slice(0);else for(console.warn("THREE.Skeleton boneInverses is the wrong length."),
    this.boneInverses=[],a=0,b=this.bones.length;a<b;a++)this.boneInverses.push(new O)}function wd(){x.call(this);this.type="Bone"}function xd(a,b){ra.call(this,a,b);this.type="SkinnedMesh";this.bindMode="attached";this.bindMatrix=new O;this.bindMatrixInverse=new O;a=this.initBones();a=new Ec(a);this.bind(a,this.matrixWorld);this.normalizeSkinWeights()}function W(a){P.call(this);this.type="LineBasicMaterial";this.color=new H(16777215);this.linewidth=1;this.linejoin=this.linecap="round";this.lights=!1;
    this.setValues(a)}function sa(a,b,c){if(1===c)return console.warn("THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead."),new X(a,b);x.call(this);this.type="Line";this.geometry=void 0!==a?a:new E;this.material=void 0!==b?b:new W({color:16777215*Math.random()})}function X(a,b){sa.call(this,a,b);this.type="LineSegments"}function yd(a,b){sa.call(this,a,b);this.type="LineLoop"}function Ka(a){P.call(this);this.type="PointsMaterial";this.color=new H(16777215);
    this.map=null;this.size=1;this.sizeAttenuation=!0;this.lights=!1;this.setValues(a)}function Rb(a,b){x.call(this);this.type="Points";this.geometry=void 0!==a?a:new E;this.material=void 0!==b?b:new Ka({color:16777215*Math.random()})}function Fc(){x.call(this);this.type="Group"}function ee(a,b,c,d,e,f,g,h,k){function m(){a.removeEventListener("loadeddata",m,!1);q.needsUpdate=!0}U.call(this,a,b,c,d,e,f,g,h,k);this.generateMipmaps=!1;var q=this;a.addEventListener("loadeddata",m,!1)}function Sb(a,b,c,d,
    e,f,g,h,k,m,q,n){U.call(this,null,f,g,h,k,m,d,e,q,n);this.image={width:b,height:c};this.mipmaps=a;this.generateMipmaps=this.flipY=!1}function Gc(a,b,c,d,e,f,g,h,k,m){m=void 0!==m?m:1026;if(1026!==m&&1027!==m)throw Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===c&&1026===m&&(c=1012);void 0===c&&1027===m&&(c=1020);U.call(this,null,d,e,f,g,h,m,c,k);this.image={width:a,height:b};this.magFilter=void 0!==g?g:1003;this.minFilter=void 0!==h?h:1003;this.generateMipmaps=
    this.flipY=!1}function Tb(a){E.call(this);this.type="WireframeGeometry";var b=[],c,d,e,f=[0,0],g={},h=["a","b","c"];if(a&&a.isGeometry){var k=a.faces;var m=0;for(d=k.length;m<d;m++){var q=k[m];for(c=0;3>c;c++){var n=q[h[c]];var u=q[h[(c+1)%3]];f[0]=Math.min(n,u);f[1]=Math.max(n,u);n=f[0]+","+f[1];void 0===g[n]&&(g[n]={index1:f[0],index2:f[1]})}}for(n in g)m=g[n],h=a.vertices[m.index1],b.push(h.x,h.y,h.z),h=a.vertices[m.index2],b.push(h.x,h.y,h.z)}else if(a&&a.isBufferGeometry){var h=new p;if(null!==
    a.index){k=a.attributes.position;q=a.index;var l=a.groups;0===l.length&&(l=[{start:0,count:q.count,materialIndex:0}]);a=0;for(e=l.length;a<e;++a)for(m=l[a],c=m.start,d=m.count,m=c,d=c+d;m<d;m+=3)for(c=0;3>c;c++)n=q.getX(m+c),u=q.getX(m+(c+1)%3),f[0]=Math.min(n,u),f[1]=Math.max(n,u),n=f[0]+","+f[1],void 0===g[n]&&(g[n]={index1:f[0],index2:f[1]});for(n in g)m=g[n],h.fromBufferAttribute(k,m.index1),b.push(h.x,h.y,h.z),h.fromBufferAttribute(k,m.index2),b.push(h.x,h.y,h.z)}else for(k=a.attributes.position,
    m=0,d=k.count/3;m<d;m++)for(c=0;3>c;c++)g=3*m+c,h.fromBufferAttribute(k,g),b.push(h.x,h.y,h.z),g=3*m+(c+1)%3,h.fromBufferAttribute(k,g),b.push(h.x,h.y,h.z)}this.addAttribute("position",new B(b,3))}function Hc(a,b,c){L.call(this);this.type="ParametricGeometry";this.parameters={func:a,slices:b,stacks:c};this.fromBufferGeometry(new Ub(a,b,c));this.mergeVertices()}function Ub(a,b,c){E.call(this);this.type="ParametricBufferGeometry";this.parameters={func:a,slices:b,stacks:c};var d=[],e=[],f=[],g=[],h=
    new p,k=new p,m=new p,q=new p,n=new p,u,l,t=b+1;for(u=0;u<=c;u++){var v=u/c;for(l=0;l<=b;l++){var w=l/b,k=a(w,v,k);e.push(k.x,k.y,k.z);0<=w-1E-5?(m=a(w-1E-5,v,m),q.subVectors(k,m)):(m=a(w+1E-5,v,m),q.subVectors(m,k));0<=v-1E-5?(m=a(w,v-1E-5,m),n.subVectors(k,m)):(m=a(w,v+1E-5,m),n.subVectors(m,k));h.crossVectors(q,n).normalize();f.push(h.x,h.y,h.z);g.push(w,v)}}for(u=0;u<c;u++)for(l=0;l<b;l++)a=u*t+l+1,h=(u+1)*t+l+1,k=(u+1)*t+l,d.push(u*t+l,a,k),d.push(a,h,k);this.setIndex(d);this.addAttribute("position",
    new B(e,3));this.addAttribute("normal",new B(f,3));this.addAttribute("uv",new B(g,2))}function Ic(a,b,c,d){L.call(this);this.type="PolyhedronGeometry";this.parameters={vertices:a,indices:b,radius:c,detail:d};this.fromBufferGeometry(new ja(a,b,c,d));this.mergeVertices()}function ja(a,b,c,d){function e(a){h.push(a.x,a.y,a.z)}function f(b,c){b*=3;c.x=a[b+0];c.y=a[b+1];c.z=a[b+2]}function g(a,b,c,d){0>d&&1===a.x&&(k[b]=a.x-1);0===c.x&&0===c.z&&(k[b]=d/2/Math.PI+.5)}E.call(this);this.type="PolyhedronBufferGeometry";
    this.parameters={vertices:a,indices:b,radius:c,detail:d};c=c||1;d=d||0;var h=[],k=[];(function(a){for(var c=new p,d=new p,g=new p,h=0;h<b.length;h+=3){f(b[h+0],c);f(b[h+1],d);f(b[h+2],g);var k,m,l=c,z=d,y=g,I=Math.pow(2,a),A=[];for(m=0;m<=I;m++){A[m]=[];var J=l.clone().lerp(y,m/I),x=z.clone().lerp(y,m/I),B=I-m;for(k=0;k<=B;k++)A[m][k]=0===k&&m===I?J:J.clone().lerp(x,k/B)}for(m=0;m<I;m++)for(k=0;k<2*(I-m)-1;k++)l=Math.floor(k/2),0===k%2?(e(A[m][l+1]),e(A[m+1][l]),e(A[m][l])):(e(A[m][l+1]),e(A[m+1][l+
    1]),e(A[m+1][l]))}})(d);(function(a){for(var b=new p,c=0;c<h.length;c+=3)b.x=h[c+0],b.y=h[c+1],b.z=h[c+2],b.normalize().multiplyScalar(a),h[c+0]=b.x,h[c+1]=b.y,h[c+2]=b.z})(c);(function(){for(var a=new p,b=0;b<h.length;b+=3)a.x=h[b+0],a.y=h[b+1],a.z=h[b+2],k.push(Math.atan2(a.z,-a.x)/2/Math.PI+.5,1-(Math.atan2(-a.y,Math.sqrt(a.x*a.x+a.z*a.z))/Math.PI+.5));for(var a=new p,b=new p,c=new p,d=new p,e=new D,f=new D,l=new D,w=0,z=0;w<h.length;w+=9,z+=6){a.set(h[w+0],h[w+1],h[w+2]);b.set(h[w+3],h[w+4],h[w+
    5]);c.set(h[w+6],h[w+7],h[w+8]);e.set(k[z+0],k[z+1]);f.set(k[z+2],k[z+3]);l.set(k[z+4],k[z+5]);d.copy(a).add(b).add(c).divideScalar(3);var y=Math.atan2(d.z,-d.x);g(e,z+0,a,y);g(f,z+2,b,y);g(l,z+4,c,y)}for(a=0;a<k.length;a+=6)b=k[a+0],c=k[a+2],d=k[a+4],e=Math.min(b,c,d),.9<Math.max(b,c,d)&&.1>e&&(.2>b&&(k[a+0]+=1),.2>c&&(k[a+2]+=1),.2>d&&(k[a+4]+=1))})();this.addAttribute("position",new B(h,3));this.addAttribute("normal",new B(h.slice(),3));this.addAttribute("uv",new B(k,2));0===d?this.computeVertexNormals():
    this.normalizeNormals()}function Jc(a,b){L.call(this);this.type="TetrahedronGeometry";this.parameters={radius:a,detail:b};this.fromBufferGeometry(new Vb(a,b));this.mergeVertices()}function Vb(a,b){ja.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],a,b);this.type="TetrahedronBufferGeometry";this.parameters={radius:a,detail:b}}function Kc(a,b){L.call(this);this.type="OctahedronGeometry";this.parameters={radius:a,detail:b};this.fromBufferGeometry(new ub(a,b));this.mergeVertices()}
    function ub(a,b){ja.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],a,b);this.type="OctahedronBufferGeometry";this.parameters={radius:a,detail:b}}function Lc(a,b){L.call(this);this.type="IcosahedronGeometry";this.parameters={radius:a,detail:b};this.fromBufferGeometry(new Wb(a,b));this.mergeVertices()}function Wb(a,b){var c=(1+Math.sqrt(5))/2;ja.call(this,[-1,c,0,1,c,0,-1,-c,0,1,-c,0,0,-1,c,0,1,c,0,-1,-c,0,1,-c,c,0,-1,c,0,1,-c,0,-1,-c,0,1],[0,11,
    5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],a,b);this.type="IcosahedronBufferGeometry";this.parameters={radius:a,detail:b}}function Mc(a,b){L.call(this);this.type="DodecahedronGeometry";this.parameters={radius:a,detail:b};this.fromBufferGeometry(new Xb(a,b));this.mergeVertices()}function Xb(a,b){var c=(1+Math.sqrt(5))/2,d=1/c;ja.call(this,[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-d,-c,0,-d,c,0,
    d,-c,0,d,c,-d,-c,0,-d,c,0,d,-c,0,d,c,0,-c,0,-d,c,0,-d,-c,0,d,c,0,d],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],a,b);this.type="DodecahedronBufferGeometry";this.parameters={radius:a,detail:b}}function Nc(a,b,c,d,e,f){L.call(this);this.type="TubeGeometry";this.parameters={path:a,
    tubularSegments:b,radius:c,radialSegments:d,closed:e};void 0!==f&&console.warn("THREE.TubeGeometry: taper has been removed.");a=new Yb(a,b,c,d,e);this.tangents=a.tangents;this.normals=a.normals;this.binormals=a.binormals;this.fromBufferGeometry(a);this.mergeVertices()}function Yb(a,b,c,d,e){function f(e){q=a.getPointAt(e/b,q);var f=g.normals[e];e=g.binormals[e];for(l=0;l<=d;l++){var m=l/d*Math.PI*2,n=Math.sin(m),m=-Math.cos(m);k.x=m*f.x+n*e.x;k.y=m*f.y+n*e.y;k.z=m*f.z+n*e.z;k.normalize();t.push(k.x,
    k.y,k.z);h.x=q.x+c*k.x;h.y=q.y+c*k.y;h.z=q.z+c*k.z;r.push(h.x,h.y,h.z)}}E.call(this);this.type="TubeBufferGeometry";this.parameters={path:a,tubularSegments:b,radius:c,radialSegments:d,closed:e};b=b||64;c=c||1;d=d||8;e=e||!1;var g=a.computeFrenetFrames(b,e);this.tangents=g.tangents;this.normals=g.normals;this.binormals=g.binormals;var h=new p,k=new p,m=new D,q=new p,n,l,r=[],t=[],v=[],w=[];for(n=0;n<b;n++)f(n);f(!1===e?b:0);for(n=0;n<=b;n++)for(l=0;l<=d;l++)m.x=n/b,m.y=l/d,v.push(m.x,m.y);(function(){for(l=
    1;l<=b;l++)for(n=1;n<=d;n++){var a=(d+1)*l+(n-1),c=(d+1)*l+n,e=(d+1)*(l-1)+n;w.push((d+1)*(l-1)+(n-1),a,e);w.push(a,c,e)}})();this.setIndex(w);this.addAttribute("position",new B(r,3));this.addAttribute("normal",new B(t,3));this.addAttribute("uv",new B(v,2))}function Oc(a,b,c,d,e,f,g){L.call(this);this.type="TorusKnotGeometry";this.parameters={radius:a,tube:b,tubularSegments:c,radialSegments:d,p:e,q:f};void 0!==g&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.");
    this.fromBufferGeometry(new Zb(a,b,c,d,e,f));this.mergeVertices()}function Zb(a,b,c,d,e,f){function g(a,b,c,d,e){var f=Math.sin(a);b=c/b*a;c=Math.cos(b);e.x=d*(2+c)*.5*Math.cos(a);e.y=d*(2+c)*f*.5;e.z=d*Math.sin(b)*.5}E.call(this);this.type="TorusKnotBufferGeometry";this.parameters={radius:a,tube:b,tubularSegments:c,radialSegments:d,p:e,q:f};a=a||1;b=b||.4;c=Math.floor(c)||64;d=Math.floor(d)||8;e=e||2;f=f||3;var h=[],k=[],m=[],q=[],n,l=new p,r=new p,t=new p,v=new p,w=new p,z=new p,y=new p;for(n=0;n<=
    c;++n){var I=n/c*e*Math.PI*2;g(I,e,f,a,t);g(I+.01,e,f,a,v);z.subVectors(v,t);y.addVectors(v,t);w.crossVectors(z,y);y.crossVectors(w,z);w.normalize();y.normalize();for(I=0;I<=d;++I){var A=I/d*Math.PI*2,J=-b*Math.cos(A),A=b*Math.sin(A);l.x=t.x+(J*y.x+A*w.x);l.y=t.y+(J*y.y+A*w.y);l.z=t.z+(J*y.z+A*w.z);k.push(l.x,l.y,l.z);r.subVectors(l,t).normalize();m.push(r.x,r.y,r.z);q.push(n/c);q.push(I/d)}}for(I=1;I<=c;I++)for(n=1;n<=d;n++)a=(d+1)*I+(n-1),b=(d+1)*I+n,e=(d+1)*(I-1)+n,h.push((d+1)*(I-1)+(n-1),a,e),
    h.push(a,b,e);this.setIndex(h);this.addAttribute("position",new B(k,3));this.addAttribute("normal",new B(m,3));this.addAttribute("uv",new B(q,2))}function Pc(a,b,c,d,e){L.call(this);this.type="TorusGeometry";this.parameters={radius:a,tube:b,radialSegments:c,tubularSegments:d,arc:e};this.fromBufferGeometry(new $b(a,b,c,d,e));this.mergeVertices()}function $b(a,b,c,d,e){E.call(this);this.type="TorusBufferGeometry";this.parameters={radius:a,tube:b,radialSegments:c,tubularSegments:d,arc:e};a=a||1;b=b||
    .4;c=Math.floor(c)||8;d=Math.floor(d)||6;e=e||2*Math.PI;var f=[],g=[],h=[],k=[],m=new p,q=new p,n=new p,l,r;for(l=0;l<=c;l++)for(r=0;r<=d;r++){var t=r/d*e,v=l/c*Math.PI*2;q.x=(a+b*Math.cos(v))*Math.cos(t);q.y=(a+b*Math.cos(v))*Math.sin(t);q.z=b*Math.sin(v);g.push(q.x,q.y,q.z);m.x=a*Math.cos(t);m.y=a*Math.sin(t);n.subVectors(q,m).normalize();h.push(n.x,n.y,n.z);k.push(r/d);k.push(l/c)}for(l=1;l<=c;l++)for(r=1;r<=d;r++)a=(d+1)*(l-1)+r-1,b=(d+1)*(l-1)+r,e=(d+1)*l+r,f.push((d+1)*l+r-1,a,e),f.push(a,b,
    e);this.setIndex(f);this.addAttribute("position",new B(g,3));this.addAttribute("normal",new B(h,3));this.addAttribute("uv",new B(k,2))}function bf(a,b,c,d,e){for(var f,g=0,h=b,k=c-d;h<c;h+=d)g+=(a[k]-a[h])*(a[h+1]+a[k+1]),k=h;if(e===0<g)for(e=b;e<c;e+=d)f=cf(e,a[e],a[e+1],f);else for(e=c-d;e>=b;e-=d)f=cf(e,a[e],a[e+1],f);f&&vb(f,f.next)&&(Qc(f),f=f.next);return f}function Rc(a,b){if(!a)return a;b||(b=a);do{var c=!1;if(a.steiner||!vb(a,a.next)&&0!==ta(a.prev,a,a.next))a=a.next;else{Qc(a);a=b=a.prev;
    if(a===a.next)break;c=!0}}while(c||a!==b);return b}function Sc(a,b,c,d,e,f,g){if(a){if(!g&&f){var h=a,k=h;do null===k.z&&(k.z=fe(k.x,k.y,d,e,f)),k.prevZ=k.prev,k=k.nextZ=k.next;while(k!==h);k.prevZ.nextZ=null;k.prevZ=null;var h=k,m,q,n,l,r=1;do{k=h;var t=h=null;for(q=0;k;){q++;var p=k;for(m=n=0;m<r&&(n++,p=p.nextZ,p);m++);for(l=r;0<n||0<l&&p;)0!==n&&(0===l||!p||k.z<=p.z)?(m=k,k=k.nextZ,n--):(m=p,p=p.nextZ,l--),t?t.nextZ=m:h=m,m.prevZ=t,t=m;k=p}t.nextZ=null;r*=2}while(1<q)}for(h=a;a.prev!==a.next;){k=
    a.prev;p=a.next;if(f)a:{t=a;l=d;var w=e,z=f;q=t.prev;n=t;r=t.next;if(0<=ta(q,n,r))t=!1;else{var y=q.x>n.x?q.x>r.x?q.x:r.x:n.x>r.x?n.x:r.x,I=q.y>n.y?q.y>r.y?q.y:r.y:n.y>r.y?n.y:r.y;m=fe(q.x<n.x?q.x<r.x?q.x:r.x:n.x<r.x?n.x:r.x,q.y<n.y?q.y<r.y?q.y:r.y:n.y<r.y?n.y:r.y,l,w,z);l=fe(y,I,l,w,z);for(w=t.nextZ;w&&w.z<=l;){if(w!==t.prev&&w!==t.next&&zd(q.x,q.y,n.x,n.y,r.x,r.y,w.x,w.y)&&0<=ta(w.prev,w,w.next)){t=!1;break a}w=w.nextZ}for(w=t.prevZ;w&&w.z>=m;){if(w!==t.prev&&w!==t.next&&zd(q.x,q.y,n.x,n.y,r.x,
    r.y,w.x,w.y)&&0<=ta(w.prev,w,w.next)){t=!1;break a}w=w.prevZ}t=!0}}else a:if(t=a,q=t.prev,n=t,r=t.next,0<=ta(q,n,r))t=!1;else{for(m=t.next.next;m!==t.prev;){if(zd(q.x,q.y,n.x,n.y,r.x,r.y,m.x,m.y)&&0<=ta(m.prev,m,m.next)){t=!1;break a}m=m.next}t=!0}if(t)b.push(k.i/c),b.push(a.i/c),b.push(p.i/c),Qc(a),h=a=p.next;else if(a=p,a===h){if(!g)Sc(Rc(a),b,c,d,e,f,1);else if(1===g){g=b;h=c;k=a;do p=k.prev,t=k.next.next,!vb(p,t)&&df(p,k,k.next,t)&&Tc(p,t)&&Tc(t,p)&&(g.push(p.i/h),g.push(k.i/h),g.push(t.i/h),
    Qc(k),Qc(k.next),k=a=t),k=k.next;while(k!==a);a=k;Sc(a,b,c,d,e,f,2)}else if(2===g)a:{g=a;do{for(h=g.next.next;h!==g.prev;){if(k=g.i!==h.i){k=g;p=h;if(t=k.next.i!==p.i&&k.prev.i!==p.i){b:{t=k;do{if(t.i!==k.i&&t.next.i!==k.i&&t.i!==p.i&&t.next.i!==p.i&&df(t,t.next,k,p)){t=!0;break b}t=t.next}while(t!==k);t=!1}t=!t}if(t=t&&Tc(k,p)&&Tc(p,k)){t=k;q=!1;n=(k.x+p.x)/2;p=(k.y+p.y)/2;do t.y>p!==t.next.y>p&&t.next.y!==t.y&&n<(t.next.x-t.x)*(p-t.y)/(t.next.y-t.y)+t.x&&(q=!q),t=t.next;while(t!==k);t=q}k=t}if(k){a=
    ef(g,h);g=Rc(g,g.next);a=Rc(a,a.next);Sc(g,b,c,d,e,f);Sc(a,b,c,d,e,f);break a}h=h.next}g=g.next}while(g!==a)}break}}}}function Hg(a,b){return a.x-b.x}function Ig(a,b){var c=b,d=a.x,e=a.y,f=-Infinity;do{if(e<=c.y&&e>=c.next.y&&c.next.y!==c.y){var g=c.x+(e-c.y)*(c.next.x-c.x)/(c.next.y-c.y);if(g<=d&&g>f){f=g;if(g===d){if(e===c.y)return c;if(e===c.next.y)return c.next}var h=c.x<c.next.x?c:c.next}}c=c.next}while(c!==b);if(!h)return null;if(d===f)return h.prev;b=h;for(var g=h.x,k=h.y,m=Infinity,q,c=h.next;c!==
    b;)d>=c.x&&c.x>=g&&d!==c.x&&zd(e<k?d:f,e,g,k,e<k?f:d,e,c.x,c.y)&&(q=Math.abs(e-c.y)/(d-c.x),(q<m||q===m&&c.x>h.x)&&Tc(c,a)&&(h=c,m=q)),c=c.next;return h}function fe(a,b,c,d,e){a=32767*(a-c)*e;b=32767*(b-d)*e;a=(a|a<<8)&16711935;a=(a|a<<4)&252645135;a=(a|a<<2)&858993459;b=(b|b<<8)&16711935;b=(b|b<<4)&252645135;b=(b|b<<2)&858993459;return(a|a<<1)&1431655765|((b|b<<1)&1431655765)<<1}function Jg(a){var b=a,c=a;do b.x<c.x&&(c=b),b=b.next;while(b!==a);return c}function zd(a,b,c,d,e,f,g,h){return 0<=(e-
    g)*(b-h)-(a-g)*(f-h)&&0<=(a-g)*(d-h)-(c-g)*(b-h)&&0<=(c-g)*(f-h)-(e-g)*(d-h)}function ta(a,b,c){return(b.y-a.y)*(c.x-b.x)-(b.x-a.x)*(c.y-b.y)}function vb(a,b){return a.x===b.x&&a.y===b.y}function df(a,b,c,d){return vb(a,b)&&vb(c,d)||vb(a,d)&&vb(c,b)?!0:0<ta(a,b,c)!==0<ta(a,b,d)&&0<ta(c,d,a)!==0<ta(c,d,b)}function Tc(a,b){return 0>ta(a.prev,a,a.next)?0<=ta(a,b,a.next)&&0<=ta(a,a.prev,b):0>ta(a,b,a.prev)||0>ta(a,a.next,b)}function ef(a,b){var c=new ge(a.i,a.x,a.y),d=new ge(b.i,b.x,b.y),e=a.next,f=b.prev;
    a.next=b;b.prev=a;c.next=e;e.prev=c;d.next=c;c.prev=d;f.next=d;d.prev=f;return d}function cf(a,b,c,d){a=new ge(a,b,c);d?(a.next=d.next,a.prev=d,d.next.prev=a,d.next=a):(a.prev=a,a.next=a);return a}function Qc(a){a.next.prev=a.prev;a.prev.next=a.next;a.prevZ&&(a.prevZ.nextZ=a.nextZ);a.nextZ&&(a.nextZ.prevZ=a.prevZ)}function ge(a,b,c){this.i=a;this.x=b;this.y=c;this.nextZ=this.prevZ=this.z=this.next=this.prev=null;this.steiner=!1}function ib(a,b){L.call(this);this.type="ExtrudeGeometry";this.parameters=
    {shapes:a,options:b};this.fromBufferGeometry(new La(a,b));this.mergeVertices()}function La(a,b){"undefined"!==typeof a&&(E.call(this),this.type="ExtrudeBufferGeometry",a=Array.isArray(a)?a:[a],this.addShapeList(a,b),this.computeVertexNormals())}function Uc(a,b){L.call(this);this.type="TextGeometry";this.parameters={text:a,parameters:b};this.fromBufferGeometry(new ac(a,b));this.mergeVertices()}function ac(a,b){b=b||{};var c=b.font;if(!c||!c.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),
    new L;a=c.generateShapes(a,b.size,b.curveSegments);b.amount=void 0!==b.height?b.height:50;void 0===b.bevelThickness&&(b.bevelThickness=10);void 0===b.bevelSize&&(b.bevelSize=8);void 0===b.bevelEnabled&&(b.bevelEnabled=!1);La.call(this,a,b);this.type="TextBufferGeometry"}function Vc(a,b,c,d,e,f,g){L.call(this);this.type="SphereGeometry";this.parameters={radius:a,widthSegments:b,heightSegments:c,phiStart:d,phiLength:e,thetaStart:f,thetaLength:g};this.fromBufferGeometry(new wb(a,b,c,d,e,f,g));this.mergeVertices()}
    function wb(a,b,c,d,e,f,g){E.call(this);this.type="SphereBufferGeometry";this.parameters={radius:a,widthSegments:b,heightSegments:c,phiStart:d,phiLength:e,thetaStart:f,thetaLength:g};a=a||1;b=Math.max(3,Math.floor(b)||8);c=Math.max(2,Math.floor(c)||6);d=void 0!==d?d:0;e=void 0!==e?e:2*Math.PI;f=void 0!==f?f:0;g=void 0!==g?g:Math.PI;var h=f+g,k,m,q=0,n=[],l=new p,r=new p,t=[],v=[],w=[],z=[];for(m=0;m<=c;m++){var y=[],I=m/c;for(k=0;k<=b;k++){var A=k/b;l.x=-a*Math.cos(d+A*e)*Math.sin(f+I*g);l.y=a*Math.cos(f+
    I*g);l.z=a*Math.sin(d+A*e)*Math.sin(f+I*g);v.push(l.x,l.y,l.z);r.set(l.x,l.y,l.z).normalize();w.push(r.x,r.y,r.z);z.push(A,1-I);y.push(q++)}n.push(y)}for(m=0;m<c;m++)for(k=0;k<b;k++)a=n[m][k+1],d=n[m][k],e=n[m+1][k],g=n[m+1][k+1],(0!==m||0<f)&&t.push(a,d,g),(m!==c-1||h<Math.PI)&&t.push(d,e,g);this.setIndex(t);this.addAttribute("position",new B(v,3));this.addAttribute("normal",new B(w,3));this.addAttribute("uv",new B(z,2))}function Wc(a,b,c,d,e,f){L.call(this);this.type="RingGeometry";this.parameters=
    {innerRadius:a,outerRadius:b,thetaSegments:c,phiSegments:d,thetaStart:e,thetaLength:f};this.fromBufferGeometry(new bc(a,b,c,d,e,f));this.mergeVertices()}function bc(a,b,c,d,e,f){E.call(this);this.type="RingBufferGeometry";this.parameters={innerRadius:a,outerRadius:b,thetaSegments:c,phiSegments:d,thetaStart:e,thetaLength:f};a=a||.5;b=b||1;e=void 0!==e?e:0;f=void 0!==f?f:2*Math.PI;c=void 0!==c?Math.max(3,c):8;d=void 0!==d?Math.max(1,d):1;var g=[],h=[],k=[],m=[],q=a,n=(b-a)/d,l=new p,r=new D,t,v;for(t=
    0;t<=d;t++){for(v=0;v<=c;v++)a=e+v/c*f,l.x=q*Math.cos(a),l.y=q*Math.sin(a),h.push(l.x,l.y,l.z),k.push(0,0,1),r.x=(l.x/b+1)/2,r.y=(l.y/b+1)/2,m.push(r.x,r.y);q+=n}for(t=0;t<d;t++)for(b=t*(c+1),v=0;v<c;v++)a=v+b,e=a+c+1,f=a+c+2,q=a+1,g.push(a,e,q),g.push(e,f,q);this.setIndex(g);this.addAttribute("position",new B(h,3));this.addAttribute("normal",new B(k,3));this.addAttribute("uv",new B(m,2))}function Xc(a,b,c,d){L.call(this);this.type="LatheGeometry";this.parameters={points:a,segments:b,phiStart:c,phiLength:d};
    this.fromBufferGeometry(new cc(a,b,c,d));this.mergeVertices()}function cc(a,b,c,d){E.call(this);this.type="LatheBufferGeometry";this.parameters={points:a,segments:b,phiStart:c,phiLength:d};b=Math.floor(b)||12;c=c||0;d=d||2*Math.PI;d=Q.clamp(d,0,2*Math.PI);var e=[],f=[],g=[],h=1/b,k=new p,m=new D,q;for(q=0;q<=b;q++){var n=c+q*h*d;var l=Math.sin(n),r=Math.cos(n);for(n=0;n<=a.length-1;n++)k.x=a[n].x*l,k.y=a[n].y,k.z=a[n].x*r,f.push(k.x,k.y,k.z),m.x=q/b,m.y=n/(a.length-1),g.push(m.x,m.y)}for(q=0;q<b;q++)for(n=
    0;n<a.length-1;n++)c=n+q*a.length,h=c+a.length,k=c+a.length+1,m=c+1,e.push(c,h,m),e.push(h,k,m);this.setIndex(e);this.addAttribute("position",new B(f,3));this.addAttribute("uv",new B(g,2));this.computeVertexNormals();if(d===2*Math.PI)for(d=this.attributes.normal.array,e=new p,f=new p,g=new p,c=b*a.length*3,n=q=0;q<a.length;q++,n+=3)e.x=d[n+0],e.y=d[n+1],e.z=d[n+2],f.x=d[c+n+0],f.y=d[c+n+1],f.z=d[c+n+2],g.addVectors(e,f).normalize(),d[n+0]=d[c+n+0]=g.x,d[n+1]=d[c+n+1]=g.y,d[n+2]=d[c+n+2]=g.z}function xb(a,
    b){L.call(this);this.type="ShapeGeometry";"object"===typeof b&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),b=b.curveSegments);this.parameters={shapes:a,curveSegments:b};this.fromBufferGeometry(new yb(a,b));this.mergeVertices()}function yb(a,b){function c(a){var c,h=e.length/3;a=a.extractPoints(b);var m=a.shape,q=a.holes;if(!1===$a.isClockWise(m))for(m=m.reverse(),a=0,c=q.length;a<c;a++){var l=q[a];!0===$a.isClockWise(l)&&(q[a]=l.reverse())}var p=$a.triangulateShape(m,
    q);a=0;for(c=q.length;a<c;a++)l=q[a],m=m.concat(l);a=0;for(c=m.length;a<c;a++)l=m[a],e.push(l.x,l.y,0),f.push(0,0,1),g.push(l.x,l.y);a=0;for(c=p.length;a<c;a++)m=p[a],d.push(m[0]+h,m[1]+h,m[2]+h),k+=3}E.call(this);this.type="ShapeBufferGeometry";this.parameters={shapes:a,curveSegments:b};b=b||12;var d=[],e=[],f=[],g=[],h=0,k=0;if(!1===Array.isArray(a))c(a);else for(var m=0;m<a.length;m++)c(a[m]),this.addGroup(h,k,m),h+=k,k=0;this.setIndex(d);this.addAttribute("position",new B(e,3));this.addAttribute("normal",
    new B(f,3));this.addAttribute("uv",new B(g,2))}function ff(a,b){b.shapes=[];if(Array.isArray(a))for(var c=0,d=a.length;c<d;c++)b.shapes.push(a[c].uuid);else b.shapes.push(a.uuid);return b}function dc(a,b){E.call(this);this.type="EdgesGeometry";this.parameters={thresholdAngle:b};var c=[];b=Math.cos(Q.DEG2RAD*(void 0!==b?b:1));var d=[0,0],e={},f=["a","b","c"];if(a.isBufferGeometry){var g=new L;g.fromBufferGeometry(a)}else g=a.clone();g.mergeVertices();g.computeFaceNormals();a=g.vertices;g=g.faces;for(var h=
    0,k=g.length;h<k;h++)for(var m=g[h],q=0;3>q;q++){var n=m[f[q]];var l=m[f[(q+1)%3]];d[0]=Math.min(n,l);d[1]=Math.max(n,l);n=d[0]+","+d[1];void 0===e[n]?e[n]={index1:d[0],index2:d[1],face1:h,face2:void 0}:e[n].face2=h}for(n in e)if(d=e[n],void 0===d.face2||g[d.face1].normal.dot(g[d.face2].normal)<=b)f=a[d.index1],c.push(f.x,f.y,f.z),f=a[d.index2],c.push(f.x,f.y,f.z);this.addAttribute("position",new B(c,3))}function zb(a,b,c,d,e,f,g,h){L.call(this);this.type="CylinderGeometry";this.parameters={radiusTop:a,
    radiusBottom:b,height:c,radialSegments:d,heightSegments:e,openEnded:f,thetaStart:g,thetaLength:h};this.fromBufferGeometry(new ab(a,b,c,d,e,f,g,h));this.mergeVertices()}function ab(a,b,c,d,e,f,g,h){function k(c){var e,f=new D,k=new p,u=0,v=!0===c?a:b,y=!0===c?1:-1;var x=t;for(e=1;e<=d;e++)n.push(0,w*y,0),l.push(0,y,0),r.push(.5,.5),t++;var B=t;for(e=0;e<=d;e++){var C=e/d*h+g,E=Math.cos(C),C=Math.sin(C);k.x=v*C;k.y=w*y;k.z=v*E;n.push(k.x,k.y,k.z);l.push(0,y,0);f.x=.5*E+.5;f.y=.5*C*y+.5;r.push(f.x,f.y);
    t++}for(e=0;e<d;e++)f=x+e,k=B+e,!0===c?q.push(k,k+1,f):q.push(k+1,k,f),u+=3;m.addGroup(z,u,!0===c?1:2);z+=u}E.call(this);this.type="CylinderBufferGeometry";this.parameters={radiusTop:a,radiusBottom:b,height:c,radialSegments:d,heightSegments:e,openEnded:f,thetaStart:g,thetaLength:h};var m=this;a=void 0!==a?a:1;b=void 0!==b?b:1;c=c||1;d=Math.floor(d)||8;e=Math.floor(e)||1;f=void 0!==f?f:!1;g=void 0!==g?g:0;h=void 0!==h?h:2*Math.PI;var q=[],n=[],l=[],r=[],t=0,v=[],w=c/2,z=0;(function(){var f,k,u=new p,
    J=new p,x=0,B=(b-a)/c;for(k=0;k<=e;k++){var D=[],C=k/e,E=C*(b-a)+a;for(f=0;f<=d;f++){var H=f/d,K=H*h+g,S=Math.sin(K),K=Math.cos(K);J.x=E*S;J.y=-C*c+w;J.z=E*K;n.push(J.x,J.y,J.z);u.set(S,B,K).normalize();l.push(u.x,u.y,u.z);r.push(H,1-C);D.push(t++)}v.push(D)}for(f=0;f<d;f++)for(k=0;k<e;k++)u=v[k+1][f],J=v[k+1][f+1],B=v[k][f+1],q.push(v[k][f],u,B),q.push(u,J,B),x+=6;m.addGroup(z,x,0);z+=x})();!1===f&&(0<a&&k(!0),0<b&&k(!1));this.setIndex(q);this.addAttribute("position",new B(n,3));this.addAttribute("normal",
    new B(l,3));this.addAttribute("uv",new B(r,2))}function Yc(a,b,c,d,e,f,g){zb.call(this,0,a,b,c,d,e,f,g);this.type="ConeGeometry";this.parameters={radius:a,height:b,radialSegments:c,heightSegments:d,openEnded:e,thetaStart:f,thetaLength:g}}function Zc(a,b,c,d,e,f,g){ab.call(this,0,a,b,c,d,e,f,g);this.type="ConeBufferGeometry";this.parameters={radius:a,height:b,radialSegments:c,heightSegments:d,openEnded:e,thetaStart:f,thetaLength:g}}function $c(a,b,c,d){L.call(this);this.type="CircleGeometry";this.parameters=
    {radius:a,segments:b,thetaStart:c,thetaLength:d};this.fromBufferGeometry(new ec(a,b,c,d));this.mergeVertices()}function ec(a,b,c,d){E.call(this);this.type="CircleBufferGeometry";this.parameters={radius:a,segments:b,thetaStart:c,thetaLength:d};a=a||1;b=void 0!==b?Math.max(3,b):8;c=void 0!==c?c:0;d=void 0!==d?d:2*Math.PI;var e=[],f=[],g=[],h=[],k,m=new p,q=new D;f.push(0,0,0);g.push(0,0,1);h.push(.5,.5);var n=0;for(k=3;n<=b;n++,k+=3){var l=c+n/b*d;m.x=a*Math.cos(l);m.y=a*Math.sin(l);f.push(m.x,m.y,
    m.z);g.push(0,0,1);q.x=(f[k]/a+1)/2;q.y=(f[k+1]/a+1)/2;h.push(q.x,q.y)}for(k=1;k<=b;k++)e.push(k,k+1,0);this.setIndex(e);this.addAttribute("position",new B(f,3));this.addAttribute("normal",new B(g,3));this.addAttribute("uv",new B(h,2))}function fc(a){P.call(this);this.type="ShadowMaterial";this.color=new H(0);this.opacity=1;this.transparent=this.lights=!0;this.setValues(a)}function gc(a){Fa.call(this,a);this.type="RawShaderMaterial"}function Ua(a){P.call(this);this.defines={STANDARD:""};this.type=
    "MeshStandardMaterial";this.color=new H(16777215);this.metalness=this.roughness=.5;this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new H(0);this.emissiveIntensity=1;this.bumpMap=this.emissiveMap=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new D(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.envMap=this.alphaMap=this.metalnessMap=this.roughnessMap=null;this.envMapIntensity=1;this.refractionRatio=
    .98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)}function Ab(a){Ua.call(this);this.defines={PHYSICAL:""};this.type="MeshPhysicalMaterial";this.reflectivity=.5;this.clearCoatRoughness=this.clearCoat=0;this.setValues(a)}function Ma(a){P.call(this);this.type="MeshPhongMaterial";this.color=new H(16777215);this.specular=new H(1118481);this.shininess=30;this.lightMap=this.map=null;
    this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new H(0);this.emissiveIntensity=1;this.bumpMap=this.emissiveMap=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new D(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.envMap=this.alphaMap=this.specularMap=null;this.combine=0;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.morphNormals=
    this.morphTargets=this.skinning=!1;this.setValues(a)}function Bb(a){Ma.call(this);this.defines={TOON:""};this.type="MeshToonMaterial";this.gradientMap=null;this.setValues(a)}function Cb(a){P.call(this);this.type="MeshNormalMaterial";this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new D(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=!1;this.wireframeLinewidth=1;this.morphNormals=this.morphTargets=this.skinning=this.lights=this.fog=
    !1;this.setValues(a)}function Db(a){P.call(this);this.type="MeshLambertMaterial";this.color=new H(16777215);this.lightMap=this.map=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new H(0);this.emissiveIntensity=1;this.envMap=this.alphaMap=this.specularMap=this.emissiveMap=null;this.combine=0;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.morphNormals=this.morphTargets=
    this.skinning=!1;this.setValues(a)}function Eb(a){W.call(this);this.type="LineDashedMaterial";this.scale=1;this.dashSize=3;this.gapSize=1;this.setValues(a)}function he(a,b,c){var d=this,e=!1,f=0,g=0,h=void 0;this.onStart=void 0;this.onLoad=a;this.onProgress=b;this.onError=c;this.itemStart=function(a){g++;if(!1===e&&void 0!==d.onStart)d.onStart(a,f,g);e=!0};this.itemEnd=function(a){f++;if(void 0!==d.onProgress)d.onProgress(a,f,g);if(f===g&&(e=!1,void 0!==d.onLoad))d.onLoad()};this.itemError=function(a){if(void 0!==
    d.onError)d.onError(a)};this.resolveURL=function(a){return h?h(a):a};this.setURLModifier=function(a){h=a;return this}}function Na(a){this.manager=void 0!==a?a:xa}function gf(a){this.manager=void 0!==a?a:xa;this._parser=null}function ie(a){this.manager=void 0!==a?a:xa;this._parser=null}function ad(a){this.manager=void 0!==a?a:xa}function je(a){this.manager=void 0!==a?a:xa}function Ad(a){this.manager=void 0!==a?a:xa}function C(){this.type="Curve";this.arcLengthDivisions=200}function Ba(a,b,c,d,e,f,
    g,h){C.call(this);this.type="EllipseCurve";this.aX=a||0;this.aY=b||0;this.xRadius=c||1;this.yRadius=d||1;this.aStartAngle=e||0;this.aEndAngle=f||2*Math.PI;this.aClockwise=g||!1;this.aRotation=h||0}function hc(a,b,c,d,e,f){Ba.call(this,a,b,c,c,d,e,f);this.type="ArcCurve"}function ke(){var a=0,b=0,c=0,d=0;return{initCatmullRom:function(e,f,g,h,k){e=k*(g-e);h=k*(h-f);a=f;b=e;c=-3*f+3*g-2*e-h;d=2*f-2*g+e+h},initNonuniformCatmullRom:function(e,f,g,h,k,m,q){e=((f-e)/k-(g-e)/(k+m)+(g-f)/m)*m;h=((g-f)/m-
    (h-f)/(m+q)+(h-g)/q)*m;a=f;b=e;c=-3*f+3*g-2*e-h;d=2*f-2*g+e+h},calc:function(e){var f=e*e;return a+b*e+c*f+d*f*e}}}function ca(a,b,c,d){C.call(this);this.type="CatmullRomCurve3";this.points=a||[];this.closed=b||!1;this.curveType=c||"centripetal";this.tension=d||.5}function hf(a,b,c,d,e){b=.5*(d-b);e=.5*(e-c);var f=a*a;return(2*c-2*d+b+e)*a*f+(-3*c+3*d-2*b-e)*f+b*a+c}function bd(a,b,c,d){var e=1-a;return e*e*b+2*(1-a)*a*c+a*a*d}function cd(a,b,c,d,e){var f=1-a,g=1-a;return f*f*f*b+3*g*g*a*c+3*(1-a)*
    a*a*d+a*a*a*e}function Oa(a,b,c,d){C.call(this);this.type="CubicBezierCurve";this.v0=a||new D;this.v1=b||new D;this.v2=c||new D;this.v3=d||new D}function Va(a,b,c,d){C.call(this);this.type="CubicBezierCurve3";this.v0=a||new p;this.v1=b||new p;this.v2=c||new p;this.v3=d||new p}function ya(a,b){C.call(this);this.type="LineCurve";this.v1=a||new D;this.v2=b||new D}function Pa(a,b){C.call(this);this.type="LineCurve3";this.v1=a||new p;this.v2=b||new p}function Qa(a,b,c){C.call(this);this.type="QuadraticBezierCurve";
    this.v0=a||new D;this.v1=b||new D;this.v2=c||new D}function Wa(a,b,c){C.call(this);this.type="QuadraticBezierCurve3";this.v0=a||new p;this.v1=b||new p;this.v2=c||new p}function Ra(a){C.call(this);this.type="SplineCurve";this.points=a||[]}function bb(){C.call(this);this.type="CurvePath";this.curves=[];this.autoClose=!1}function Sa(a){bb.call(this);this.type="Path";this.currentPoint=new D;a&&this.setFromPoints(a)}function jb(a){Sa.call(this,a);this.uuid=Q.generateUUID();this.type="Shape";this.holes=
    []}function da(a,b){x.call(this);this.type="Light";this.color=new H(a);this.intensity=void 0!==b?b:1;this.receiveShadow=void 0}function Bd(a,b,c){da.call(this,a,c);this.type="HemisphereLight";this.castShadow=void 0;this.position.copy(x.DefaultUp);this.updateMatrix();this.groundColor=new H(b)}function Fb(a){this.camera=a;this.bias=0;this.radius=1;this.mapSize=new D(512,512);this.map=null;this.matrix=new O}function Cd(){Fb.call(this,new ba(50,1,.5,500))}function Dd(a,b,c,d,e,f){da.call(this,a,b);this.type=
    "SpotLight";this.position.copy(x.DefaultUp);this.updateMatrix();this.target=new x;Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(a){this.intensity=a/Math.PI}});this.distance=void 0!==c?c:0;this.angle=void 0!==d?d:Math.PI/3;this.penumbra=void 0!==e?e:0;this.decay=void 0!==f?f:1;this.shadow=new Cd}function Ed(a,b,c,d){da.call(this,a,b);this.type="PointLight";Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(a){this.intensity=
    a/(4*Math.PI)}});this.distance=void 0!==c?c:0;this.decay=void 0!==d?d:1;this.shadow=new Fb(new ba(90,1,.5,500))}function Fd(){Fb.call(this,new Lb(-5,5,5,-5,.5,500))}function Gd(a,b){da.call(this,a,b);this.type="DirectionalLight";this.position.copy(x.DefaultUp);this.updateMatrix();this.target=new x;this.shadow=new Fd}function Hd(a,b){da.call(this,a,b);this.type="AmbientLight";this.castShadow=void 0}function Id(a,b,c,d){da.call(this,a,b);this.type="RectAreaLight";this.position.set(0,1,0);this.updateMatrix();
    this.width=void 0!==c?c:10;this.height=void 0!==d?d:10}function Jd(a,b,c,d){T.call(this,a,b,c,d)}function Kd(a,b,c){T.call(this,a,b,c)}function pa(a,b,c,d){this.parameterPositions=a;this._cachedIndex=0;this.resultBuffer=void 0!==d?d:new b.constructor(c);this.sampleValues=b;this.valueSize=c}function Ld(a,b,c,d){pa.call(this,a,b,c,d)}function dd(a,b,c,d){T.call(this,a,b,c,d)}function Md(a,b,c,d){T.call(this,a,b,c,d)}function ic(a,b,c,d){T.call(this,a,b,c,d)}function Nd(a,b,c,d){pa.call(this,a,b,c,d);
    this._offsetNext=this._weightNext=this._offsetPrev=this._weightPrev=-0}function ed(a,b,c,d){pa.call(this,a,b,c,d)}function Od(a,b,c,d){pa.call(this,a,b,c,d)}function T(a,b,c,d){if(void 0===a)throw Error("THREE.KeyframeTrack: track name is undefined");if(void 0===b||0===b.length)throw Error("THREE.KeyframeTrack: no keyframes in track named "+a);this.name=a;this.times=ga.convertArray(b,this.TimeBufferType);this.values=ga.convertArray(c,this.ValueBufferType);this.setInterpolation(d||this.DefaultInterpolation);
    this.validate();this.optimize()}function jc(a,b,c,d){T.call(this,a,b,c,d)}function Ca(a,b,c){this.name=a;this.tracks=c;this.duration=void 0!==b?b:-1;this.uuid=Q.generateUUID();0>this.duration&&this.resetDuration();this.optimize()}function Pd(a){this.manager=void 0!==a?a:xa;this.textures={}}function le(a){this.manager=void 0!==a?a:xa}function kc(){this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){}}function me(a){"boolean"===typeof a&&(console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."),
    a=void 0);this.manager=void 0!==a?a:xa;this.withCredentials=!1}function jf(a){this.manager=void 0!==a?a:xa;this.texturePath=""}function ne(a){"undefined"===typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.");"undefined"===typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported.");this.manager=void 0!==a?a:xa;this.options=void 0}function oe(){this.type="ShapePath";this.subPaths=[];this.currentPath=null}function pe(a){this.type="Font";
    this.data=a}function kf(a){this.manager=void 0!==a?a:xa}function qe(a){this.manager=void 0!==a?a:xa}function lf(){this.type="StereoCamera";this.aspect=1;this.eyeSep=.064;this.cameraL=new ba;this.cameraL.layers.enable(1);this.cameraL.matrixAutoUpdate=!1;this.cameraR=new ba;this.cameraR.layers.enable(2);this.cameraR.matrixAutoUpdate=!1}function fd(a,b,c){x.call(this);this.type="CubeCamera";var d=new ba(90,1,a,b);d.up.set(0,-1,0);d.lookAt(new p(1,0,0));this.add(d);var e=new ba(90,1,a,b);e.up.set(0,-1,
    0);e.lookAt(new p(-1,0,0));this.add(e);var f=new ba(90,1,a,b);f.up.set(0,0,1);f.lookAt(new p(0,1,0));this.add(f);var g=new ba(90,1,a,b);g.up.set(0,0,-1);g.lookAt(new p(0,-1,0));this.add(g);var h=new ba(90,1,a,b);h.up.set(0,-1,0);h.lookAt(new p(0,0,1));this.add(h);var k=new ba(90,1,a,b);k.up.set(0,-1,0);k.lookAt(new p(0,0,-1));this.add(k);this.renderTarget=new Jb(c,c,{format:1022,magFilter:1006,minFilter:1006});this.renderTarget.texture.name="CubeCamera";this.update=function(a,b){null===this.parent&&
    this.updateMatrixWorld();var c=this.renderTarget,m=c.texture.generateMipmaps;c.texture.generateMipmaps=!1;c.activeCubeFace=0;a.render(b,d,c);c.activeCubeFace=1;a.render(b,e,c);c.activeCubeFace=2;a.render(b,f,c);c.activeCubeFace=3;a.render(b,g,c);c.activeCubeFace=4;a.render(b,h,c);c.texture.generateMipmaps=m;c.activeCubeFace=5;a.render(b,k,c);a.setRenderTarget(null)};this.clear=function(a,b,c,d){for(var e=this.renderTarget,f=0;6>f;f++)e.activeCubeFace=f,a.setRenderTarget(e),a.clear(b,c,d);a.setRenderTarget(null)}}
    function re(){x.call(this);this.type="AudioListener";this.context=se.getContext();this.gain=this.context.createGain();this.gain.connect(this.context.destination);this.filter=null}function lc(a){x.call(this);this.type="Audio";this.context=a.context;this.gain=this.context.createGain();this.gain.connect(a.getInput());this.autoplay=!1;this.buffer=null;this.loop=!1;this.offset=this.startTime=0;this.playbackRate=1;this.isPlaying=!1;this.hasPlaybackControl=!0;this.sourceType="empty";this.filters=[]}function te(a){lc.call(this,
    a);this.panner=this.context.createPanner();this.panner.connect(this.gain)}function ue(a,b){this.analyser=a.context.createAnalyser();this.analyser.fftSize=void 0!==b?b:2048;this.data=new Uint8Array(this.analyser.frequencyBinCount);a.getOutput().connect(this.analyser)}function ve(a,b,c){this.binding=a;this.valueSize=c;a=Float64Array;switch(b){case "quaternion":b=this._slerp;break;case "string":case "bool":a=Array;b=this._select;break;default:b=this._lerp}this.buffer=new a(4*c);this._mixBufferRegion=
    b;this.referenceCount=this.useCount=this.cumulativeWeight=0}function mf(a,b,c){c=c||qa.parseTrackName(b);this._targetGroup=a;this._bindings=a.subscribe_(b,c)}function qa(a,b,c){this.path=b;this.parsedPath=c||qa.parseTrackName(b);this.node=qa.findNode(a,this.parsedPath.nodeName)||a;this.rootNode=a}function nf(){this.uuid=Q.generateUUID();this._objects=Array.prototype.slice.call(arguments);this.nCachedObjects_=0;var a={};this._indicesByUUID=a;for(var b=0,c=arguments.length;b!==c;++b)a[arguments[b].uuid]=
    b;this._paths=[];this._parsedPaths=[];this._bindings=[];this._bindingsIndicesByPath={};var d=this;this.stats={objects:{get total(){return d._objects.length},get inUse(){return this.total-d.nCachedObjects_}},get bindingsPerObject(){return d._bindings.length}}}function of(a,b,c){this._mixer=a;this._clip=b;this._localRoot=c||null;a=b.tracks;b=a.length;c=Array(b);for(var d={endingStart:2400,endingEnd:2400},e=0;e!==b;++e){var f=a[e].createInterpolant(null);c[e]=f;f.settings=d}this._interpolantSettings=
    d;this._interpolants=c;this._propertyBindings=Array(b);this._weightInterpolant=this._timeScaleInterpolant=this._byClipCacheIndex=this._cacheIndex=null;this.loop=2201;this._loopCount=-1;this._startTime=null;this.time=0;this._effectiveWeight=this.weight=this._effectiveTimeScale=this.timeScale=1;this.repetitions=Infinity;this.paused=!1;this.enabled=!0;this.clampWhenFinished=!1;this.zeroSlopeAtEnd=this.zeroSlopeAtStart=!0}function we(a){this._root=a;this._initMemoryManager();this.time=this._accuIndex=
    0;this.timeScale=1}function Qd(a,b){"string"===typeof a&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),a=b);this.value=a}function xe(){E.call(this);this.type="InstancedBufferGeometry";this.maxInstancedCount=void 0}function ye(a,b,c,d){this.uuid=Q.generateUUID();this.data=a;this.itemSize=b;this.offset=c;this.normalized=!0===d}function mc(a,b){this.uuid=Q.generateUUID();this.array=a;this.stride=b;this.count=void 0!==a?a.length/b:0;this.dynamic=!1;this.updateRange={offset:0,count:-1};
    this.onUploadCallback=function(){};this.version=0}function ze(a,b,c){mc.call(this,a,b);this.meshPerAttribute=c||1}function Ae(a,b,c){M.call(this,a,b);this.meshPerAttribute=c||1}function pf(a,b,c,d){this.ray=new sb(a,b);this.near=c||0;this.far=d||Infinity;this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}};Object.defineProperties(this.params,{PointCloud:{get:function(){console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points.");return this.Points}}})}function qf(a,
    b){return a.distance-b.distance}function Be(a,b,c,d){if(!1!==a.visible&&(a.raycast(b,c),!0===d)){a=a.children;d=0;for(var e=a.length;d<e;d++)Be(a[d],b,c,!0)}}function rf(a){this.autoStart=void 0!==a?a:!0;this.elapsedTime=this.oldTime=this.startTime=0;this.running=!1}function sf(a,b,c){this.radius=void 0!==a?a:1;this.phi=void 0!==b?b:0;this.theta=void 0!==c?c:0;return this}function tf(a,b,c){this.radius=void 0!==a?a:1;this.theta=void 0!==b?b:0;this.y=void 0!==c?c:0;return this}function gd(a){x.call(this);
    this.material=a;this.render=function(){}}function hd(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;a=void 0!==c?c:16711680;d=void 0!==d?d:1;b=0;(c=this.object.geometry)&&c.isGeometry?b=3*c.faces.length:c&&c.isBufferGeometry&&(b=c.attributes.normal.count);c=new E;b=new B(6*b,3);c.addAttribute("position",b);X.call(this,c,new W({color:a,linewidth:d}));this.matrixAutoUpdate=!1;this.update()}function nc(a,b){x.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=
    !1;this.color=b;a=new E;b=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(var c=0,d=1;32>c;c++,d++){var e=c/32*Math.PI*2,f=d/32*Math.PI*2;b.push(Math.cos(e),Math.sin(e),1,Math.cos(f),Math.sin(f),1)}a.addAttribute("position",new B(b,3));b=new W({fog:!1});this.cone=new X(a,b);this.add(this.cone);this.update()}function uf(a){var b=[];a&&a.isBone&&b.push(a);for(var c=0;c<a.children.length;c++)b.push.apply(b,uf(a.children[c]));return b}function oc(a){for(var b=uf(a),c=new E,d=[],e=
    [],f=new H(0,0,1),g=new H(0,1,0),h=0;h<b.length;h++){var k=b[h];k.parent&&k.parent.isBone&&(d.push(0,0,0),d.push(0,0,0),e.push(f.r,f.g,f.b),e.push(g.r,g.g,g.b))}c.addAttribute("position",new B(d,3));c.addAttribute("color",new B(e,3));d=new W({vertexColors:2,depthTest:!1,depthWrite:!1,transparent:!0});X.call(this,c,d);this.root=a;this.bones=b;this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1}function pc(a,b,c){this.light=a;this.light.updateMatrixWorld();this.color=c;a=new wb(b,4,2);b=new Aa({wireframe:!0,
    fog:!1});ra.call(this,a,b);this.matrix=this.light.matrixWorld;this.matrixAutoUpdate=!1;this.update()}function qc(a,b){x.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.color=b;a=new W({fog:!1});b=new E;b.addAttribute("position",new M(new Float32Array(15),3));this.line=new sa(b,a);this.add(this.line);this.update()}function rc(a,b,c){x.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=
    !1;this.color=c;a=new ub(b);a.rotateY(.5*Math.PI);this.material=new Aa({wireframe:!0,fog:!1});void 0===this.color&&(this.material.vertexColors=2);b=a.getAttribute("position");b=new Float32Array(3*b.count);a.addAttribute("color",new M(b,3));this.add(new ra(a,this.material));this.update()}function id(a,b,c,d){a=a||10;b=b||10;c=new H(void 0!==c?c:4473924);d=new H(void 0!==d?d:8947848);var e=b/2,f=a/b,g=a/2;a=[];for(var h=[],k=0,m=0,q=-g;k<=b;k++,q+=f){a.push(-g,0,q,g,0,q);a.push(q,0,-g,q,0,g);var n=
    k===e?c:d;n.toArray(h,m);m+=3;n.toArray(h,m);m+=3;n.toArray(h,m);m+=3;n.toArray(h,m);m+=3}b=new E;b.addAttribute("position",new B(a,3));b.addAttribute("color",new B(h,3));c=new W({vertexColors:2});X.call(this,b,c)}function Rd(a,b,c,d,e,f){a=a||10;b=b||16;c=c||8;d=d||64;e=new H(void 0!==e?e:4473924);f=new H(void 0!==f?f:8947848);var g=[],h=[],k;for(k=0;k<=b;k++){var m=k/b*2*Math.PI;var q=Math.sin(m)*a;m=Math.cos(m)*a;g.push(0,0,0);g.push(q,0,m);var n=k&1?e:f;h.push(n.r,n.g,n.b);h.push(n.r,n.g,n.b)}for(k=
    0;k<=c;k++){n=k&1?e:f;var l=a-a/c*k;for(b=0;b<d;b++)m=b/d*2*Math.PI,q=Math.sin(m)*l,m=Math.cos(m)*l,g.push(q,0,m),h.push(n.r,n.g,n.b),m=(b+1)/d*2*Math.PI,q=Math.sin(m)*l,m=Math.cos(m)*l,g.push(q,0,m),h.push(n.r,n.g,n.b)}a=new E;a.addAttribute("position",new B(g,3));a.addAttribute("color",new B(h,3));g=new W({vertexColors:2});X.call(this,a,g)}function jd(a,b,c,d){this.object=a;this.size=void 0!==b?b:1;a=void 0!==c?c:16776960;d=void 0!==d?d:1;b=0;(c=this.object.geometry)&&c.isGeometry?b=c.faces.length:
    console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");c=new E;b=new B(6*b,3);c.addAttribute("position",b);X.call(this,c,new W({color:a,linewidth:d}));this.matrixAutoUpdate=!1;this.update()}function sc(a,b,c){x.call(this);this.light=a;this.light.updateMatrixWorld();this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.color=c;void 0===b&&(b=1);a=new E;a.addAttribute("position",new B([-b,b,0,b,b,0,b,-b,0,-b,-b,0,-b,b,0],3));b=new W({fog:!1});
    this.lightPlane=new sa(a,b);this.add(this.lightPlane);a=new E;a.addAttribute("position",new B([0,0,0,0,0,1],3));this.targetLine=new sa(a,b);this.add(this.targetLine);this.update()}function kd(a){function b(a,b,d){c(a,d);c(b,d)}function c(a,b){f.push(0,0,0);g.push(b.r,b.g,b.b);void 0===h[a]&&(h[a]=[]);h[a].push(f.length/3-1)}var d=new E,e=new W({color:16777215,vertexColors:1}),f=[],g=[],h={},k=new H(16755200),m=new H(16711680),q=new H(43775),l=new H(16777215),u=new H(3355443);b("n1","n2",k);b("n2",
    "n4",k);b("n4","n3",k);b("n3","n1",k);b("f1","f2",k);b("f2","f4",k);b("f4","f3",k);b("f3","f1",k);b("n1","f1",k);b("n2","f2",k);b("n3","f3",k);b("n4","f4",k);b("p","n1",m);b("p","n2",m);b("p","n3",m);b("p","n4",m);b("u1","u2",q);b("u2","u3",q);b("u3","u1",q);b("c","t",l);b("p","c",u);b("cn1","cn2",u);b("cn3","cn4",u);b("cf1","cf2",u);b("cf3","cf4",u);d.addAttribute("position",new B(f,3));d.addAttribute("color",new B(g,3));X.call(this,d,e);this.camera=a;this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix();
    this.matrix=a.matrixWorld;this.matrixAutoUpdate=!1;this.pointMap=h;this.update()}function Gb(a,b){this.object=a;void 0===b&&(b=16776960);a=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);var c=new Float32Array(24),d=new E;d.setIndex(new M(a,1));d.addAttribute("position",new M(c,3));X.call(this,d,new W({color:b}));this.matrixAutoUpdate=!1;this.update()}function ld(a,b){this.type="Box3Helper";this.box=a;a=void 0!==b?b:16776960;b=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,
    4,1,5,2,6,3,7]);var c=new E;c.setIndex(new M(b,1));c.addAttribute("position",new B([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3));X.call(this,c,new W({color:a}));this.geometry.computeBoundingSphere()}function md(a,b,c){this.type="PlaneHelper";this.plane=a;this.size=void 0===b?1:b;a=void 0!==c?c:16776960;b=new E;b.addAttribute("position",new B([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3));b.computeBoundingSphere();sa.call(this,b,new W({color:a}));b=new E;
    b.addAttribute("position",new B([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3));b.computeBoundingSphere();this.add(new ra(b,new Aa({color:a,opacity:.2,transparent:!0,depthWrite:!1})))}function Hb(a,b,c,d,e,f){x.call(this);void 0===d&&(d=16776960);void 0===c&&(c=1);void 0===e&&(e=.2*c);void 0===f&&(f=.2*e);void 0===Sd&&(Sd=new E,Sd.addAttribute("position",new B([0,0,0,0,1,0],3)),Ce=new ab(0,.5,1,5,1),Ce.translate(0,-.5,0));this.position.copy(b);this.line=new sa(Sd,new W({color:d}));this.line.matrixAutoUpdate=
    !1;this.add(this.line);this.cone=new ra(Ce,new Aa({color:d}));this.cone.matrixAutoUpdate=!1;this.add(this.cone);this.setDirection(a);this.setLength(c,e,f)}function nd(a){a=a||1;var b=[0,0,0,a,0,0,0,0,0,0,a,0,0,0,0,0,0,a];a=new E;a.addAttribute("position",new B(b,3));a.addAttribute("color",new B([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));b=new W({vertexColors:2});X.call(this,a,b)}function vf(a){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");ca.call(this,
    a);this.type="catmullrom";this.closed=!0}function wf(a){console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.");ca.call(this,a);this.type="catmullrom"}function De(a){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.");ca.call(this,a);this.type="catmullrom"}void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52));void 0===Number.isInteger&&(Number.isInteger=function(a){return"number"===typeof a&&isFinite(a)&&Math.floor(a)===a});void 0===
    Math.sign&&(Math.sign=function(a){return 0>a?-1:0<a?1:+a});!1==="name"in Function.prototype&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}});void 0===Object.assign&&function(){Object.assign=function(a){if(void 0===a||null===a)throw new TypeError("Cannot convert undefined or null to object");for(var b=Object(a),c=1;c<arguments.length;c++){var d=arguments[c];if(void 0!==d&&null!==d)for(var e in d)Object.prototype.hasOwnProperty.call(d,
    e)&&(b[e]=d[e])}return b}}();Object.assign(za.prototype,{addEventListener:function(a,b){void 0===this._listeners&&(this._listeners={});var c=this._listeners;void 0===c[a]&&(c[a]=[]);-1===c[a].indexOf(b)&&c[a].push(b)},hasEventListener:function(a,b){if(void 0===this._listeners)return!1;var c=this._listeners;return void 0!==c[a]&&-1!==c[a].indexOf(b)},removeEventListener:function(a,b){void 0!==this._listeners&&(a=this._listeners[a],void 0!==a&&(b=a.indexOf(b),-1!==b&&a.splice(b,1)))},dispatchEvent:function(a){if(void 0!==
    this._listeners){var b=this._listeners[a.type];if(void 0!==b){a.target=this;for(var b=b.slice(0),c=0,d=b.length;c<d;c++)b[c].call(this,a)}}}});var Q={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){for(var a=[],b=0;256>b;b++)a[b]=(16>b?"0":"")+b.toString(16).toUpperCase();return function(){var b=4294967295*Math.random()|0,d=4294967295*Math.random()|0,e=4294967295*Math.random()|0,f=4294967295*Math.random()|0;return a[b&255]+a[b>>8&255]+a[b>>16&255]+a[b>>24&255]+"-"+a[d&255]+a[d>>8&
    255]+"-"+a[d>>16&15|64]+a[d>>24&255]+"-"+a[e&63|128]+a[e>>8&255]+"-"+a[e>>16&255]+a[e>>24&255]+a[f&255]+a[f>>8&255]+a[f>>16&255]+a[f>>24&255]}}(),clamp:function(a,b,c){return Math.max(b,Math.min(c,a))},euclideanModulo:function(a,b){return(a%b+b)%b},mapLinear:function(a,b,c,d,e){return d+(a-b)*(e-d)/(c-b)},lerp:function(a,b,c){return(1-c)*a+c*b},smoothstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*(3-2*a)},smootherstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;
    a=(a-b)/(c-b);return a*a*a*(a*(6*a-15)+10)},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*(.5-Math.random())},degToRad:function(a){return a*Q.DEG2RAD},radToDeg:function(a){return a*Q.RAD2DEG},isPowerOfTwo:function(a){return 0===(a&a-1)&&0!==a},ceilPowerOfTwo:function(a){return Math.pow(2,Math.ceil(Math.log(a)/Math.LN2))},floorPowerOfTwo:function(a){return Math.pow(2,Math.floor(Math.log(a)/
    Math.LN2))}};Object.defineProperties(D.prototype,{width:{get:function(){return this.x},set:function(a){this.x=a}},height:{get:function(){return this.y},set:function(a){this.y=a}}});Object.assign(D.prototype,{isVector2:!0,set:function(a,b){this.x=a;this.y=b;return this},setScalar:function(a){this.y=this.x=a;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;default:throw Error("index is out of range: "+
    a);}return this},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;default:throw Error("index is out of range: "+a);}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(a){this.x=a.x;this.y=a.y;return this},add:function(a,b){if(void 0!==b)return console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;return this},addScalar:function(a){this.x+=a;this.y+=a;return this},
    addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this},addScaledVector:function(a,b){this.x+=a.x*b;this.y+=a.y*b;return this},sub:function(a,b){if(void 0!==b)return console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;return this},subScalar:function(a){this.x-=a;this.y-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this},multiply:function(a){this.x*=a.x;this.y*=
    a.y;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;return this},divide:function(a){this.x/=a.x;this.y/=a.y;return this},divideScalar:function(a){return this.multiplyScalar(1/a)},applyMatrix3:function(a){var b=this.x,c=this.y;a=a.elements;this.x=a[0]*b+a[3]*c+a[6];this.y=a[1]*b+a[4]*c+a[7];return this},min:function(a){this.x=Math.min(this.x,a.x);this.y=Math.min(this.y,a.y);return this},max:function(a){this.x=Math.max(this.x,a.x);this.y=Math.max(this.y,a.y);return this},clamp:function(a,
    b){this.x=Math.max(a.x,Math.min(b.x,this.x));this.y=Math.max(a.y,Math.min(b.y,this.y));return this},clampScalar:function(){var a=new D,b=new D;return function(c,d){a.set(c,c);b.set(d,d);return this.clamp(a,b)}}(),clampLength:function(a,b){var c=this.length();return this.divideScalar(c||1).multiplyScalar(Math.max(a,Math.min(b,c)))},floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this},round:function(){this.x=
    Math.round(this.x);this.y=Math.round(this.y);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);return this},negate:function(){this.x=-this.x;this.y=-this.y;return this},dot:function(a){return this.x*a.x+this.y*a.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||
    1)},angle:function(){var a=Math.atan2(this.y,this.x);0>a&&(a+=2*Math.PI);return a},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x;a=this.y-a.y;return b*b+a*a},manhattanDistanceTo:function(a){return Math.abs(this.x-a.x)+Math.abs(this.y-a.y)},setLength:function(a){return this.normalize().multiplyScalar(a)},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;return this},lerpVectors:function(a,b,c){return this.subVectors(b,
    a).multiplyScalar(c).add(a)},equals:function(a){return a.x===this.x&&a.y===this.y},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;return a},fromBufferAttribute:function(a,b,c){void 0!==c&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().");this.x=a.getX(b);this.y=a.getY(b);return this},rotateAround:function(a,b){var c=Math.cos(b);b=Math.sin(b);var d=
    this.x-a.x,e=this.y-a.y;this.x=d*c-e*b+a.x;this.y=d*b+e*c+a.y;return this}});Object.assign(O.prototype,{isMatrix4:!0,set:function(a,b,c,d,e,f,g,h,k,m,q,l,u,r,t,p){var n=this.elements;n[0]=a;n[4]=b;n[8]=c;n[12]=d;n[1]=e;n[5]=f;n[9]=g;n[13]=h;n[2]=k;n[6]=m;n[10]=q;n[14]=l;n[3]=u;n[7]=r;n[11]=t;n[15]=p;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},clone:function(){return(new O).fromArray(this.elements)},copy:function(a){var b=this.elements;a=a.elements;b[0]=
    a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=a[12];b[13]=a[13];b[14]=a[14];b[15]=a[15];return this},copyPosition:function(a){var b=this.elements;a=a.elements;b[12]=a[12];b[13]=a[13];b[14]=a[14];return this},extractBasis:function(a,b,c){a.setFromMatrixColumn(this,0);b.setFromMatrixColumn(this,1);c.setFromMatrixColumn(this,2);return this},makeBasis:function(a,b,c){this.set(a.x,b.x,c.x,0,a.y,b.y,c.y,0,a.z,b.z,c.z,0,0,0,0,
    1);return this},extractRotation:function(){var a=new p;return function(b){var c=this.elements,d=b.elements,e=1/a.setFromMatrixColumn(b,0).length(),f=1/a.setFromMatrixColumn(b,1).length();b=1/a.setFromMatrixColumn(b,2).length();c[0]=d[0]*e;c[1]=d[1]*e;c[2]=d[2]*e;c[4]=d[4]*f;c[5]=d[5]*f;c[6]=d[6]*f;c[8]=d[8]*b;c[9]=d[9]*b;c[10]=d[10]*b;return this}}(),makeRotationFromEuler:function(a){a&&a.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
    var b=this.elements,c=a.x,d=a.y,e=a.z,f=Math.cos(c),c=Math.sin(c),g=Math.cos(d),d=Math.sin(d),h=Math.cos(e),e=Math.sin(e);if("XYZ"===a.order){var k=f*h;var m=f*e;var q=c*h;a=c*e;b[0]=g*h;b[4]=-g*e;b[8]=d;b[1]=m+q*d;b[5]=k-a*d;b[9]=-c*g;b[2]=a-k*d;b[6]=q+m*d;b[10]=f*g}else"YXZ"===a.order?(k=g*h,m=g*e,q=d*h,a=d*e,b[0]=k+a*c,b[4]=q*c-m,b[8]=f*d,b[1]=f*e,b[5]=f*h,b[9]=-c,b[2]=m*c-q,b[6]=a+k*c,b[10]=f*g):"ZXY"===a.order?(k=g*h,m=g*e,q=d*h,a=d*e,b[0]=k-a*c,b[4]=-f*e,b[8]=q+m*c,b[1]=m+q*c,b[5]=f*h,b[9]=
    a-k*c,b[2]=-f*d,b[6]=c,b[10]=f*g):"ZYX"===a.order?(k=f*h,m=f*e,q=c*h,a=c*e,b[0]=g*h,b[4]=q*d-m,b[8]=k*d+a,b[1]=g*e,b[5]=a*d+k,b[9]=m*d-q,b[2]=-d,b[6]=c*g,b[10]=f*g):"YZX"===a.order?(k=f*g,m=f*d,q=c*g,a=c*d,b[0]=g*h,b[4]=a-k*e,b[8]=q*e+m,b[1]=e,b[5]=f*h,b[9]=-c*h,b[2]=-d*h,b[6]=m*e+q,b[10]=k-a*e):"XZY"===a.order&&(k=f*g,m=f*d,q=c*g,a=c*d,b[0]=g*h,b[4]=-e,b[8]=d*h,b[1]=k*e+a,b[5]=f*h,b[9]=m*e-q,b[2]=q*e-m,b[6]=c*h,b[10]=a*e+k);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},makeRotationFromQuaternion:function(a){var b=
    this.elements,c=a._x,d=a._y,e=a._z,f=a._w,g=c+c,h=d+d,k=e+e;a=c*g;var m=c*h,c=c*k,q=d*h,d=d*k,e=e*k,g=f*g,h=f*h,f=f*k;b[0]=1-(q+e);b[4]=m-f;b[8]=c+h;b[1]=m+f;b[5]=1-(a+e);b[9]=d-g;b[2]=c-h;b[6]=d+g;b[10]=1-(a+q);b[3]=0;b[7]=0;b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return this},lookAt:function(){var a=new p,b=new p,c=new p;return function(d,e,f){var g=this.elements;c.subVectors(d,e);0===c.lengthSq()&&(c.z=1);c.normalize();a.crossVectors(f,c);0===a.lengthSq()&&(1===Math.abs(f.z)?c.x+=1E-4:c.z+=1E-4,
    c.normalize(),a.crossVectors(f,c));a.normalize();b.crossVectors(c,a);g[0]=a.x;g[4]=b.x;g[8]=c.x;g[1]=a.y;g[5]=b.y;g[9]=c.y;g[2]=a.z;g[6]=b.z;g[10]=c.z;return this}}(),multiply:function(a,b){return void 0!==b?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(a,b)):this.multiplyMatrices(this,a)},premultiply:function(a){return this.multiplyMatrices(a,this)},multiplyMatrices:function(a,b){var c=a.elements,d=b.elements;
    b=this.elements;a=c[0];var e=c[4],f=c[8],g=c[12],h=c[1],k=c[5],m=c[9],q=c[13],n=c[2],l=c[6],r=c[10],t=c[14],p=c[3],w=c[7],z=c[11],c=c[15],y=d[0],I=d[4],A=d[8],J=d[12],x=d[1],B=d[5],D=d[9],C=d[13],E=d[2],H=d[6],K=d[10],S=d[14],L=d[3],N=d[7],M=d[11],d=d[15];b[0]=a*y+e*x+f*E+g*L;b[4]=a*I+e*B+f*H+g*N;b[8]=a*A+e*D+f*K+g*M;b[12]=a*J+e*C+f*S+g*d;b[1]=h*y+k*x+m*E+q*L;b[5]=h*I+k*B+m*H+q*N;b[9]=h*A+k*D+m*K+q*M;b[13]=h*J+k*C+m*S+q*d;b[2]=n*y+l*x+r*E+t*L;b[6]=n*I+l*B+r*H+t*N;b[10]=n*A+l*D+r*K+t*M;b[14]=n*J+l*
    C+r*S+t*d;b[3]=p*y+w*x+z*E+c*L;b[7]=p*I+w*B+z*H+c*N;b[11]=p*A+w*D+z*K+c*M;b[15]=p*J+w*C+z*S+c*d;return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[4]*=a;b[8]*=a;b[12]*=a;b[1]*=a;b[5]*=a;b[9]*=a;b[13]*=a;b[2]*=a;b[6]*=a;b[10]*=a;b[14]*=a;b[3]*=a;b[7]*=a;b[11]*=a;b[15]*=a;return this},applyToBufferAttribute:function(){var a=new p;return function(b){for(var c=0,d=b.count;c<d;c++)a.x=b.getX(c),a.y=b.getY(c),a.z=b.getZ(c),a.applyMatrix4(this),b.setXYZ(c,a.x,a.y,a.z);return b}}(),determinant:function(){var a=
    this.elements,b=a[0],c=a[4],d=a[8],e=a[12],f=a[1],g=a[5],h=a[9],k=a[13],m=a[2],q=a[6],n=a[10],l=a[14];return a[3]*(+e*h*q-d*k*q-e*g*n+c*k*n+d*g*l-c*h*l)+a[7]*(+b*h*l-b*k*n+e*f*n-d*f*l+d*k*m-e*h*m)+a[11]*(+b*k*q-b*g*l-e*f*q+c*f*l+e*g*m-c*k*m)+a[15]*(-d*g*m-b*h*q+b*g*n+d*f*q-c*f*n+c*h*m)},transpose:function(){var a=this.elements;var b=a[1];a[1]=a[4];a[4]=b;b=a[2];a[2]=a[8];a[8]=b;b=a[6];a[6]=a[9];a[9]=b;b=a[3];a[3]=a[12];a[12]=b;b=a[7];a[7]=a[13];a[13]=b;b=a[11];a[11]=a[14];a[14]=b;return this},setPosition:function(a){var b=
    this.elements;b[12]=a.x;b[13]=a.y;b[14]=a.z;return this},getInverse:function(a,b){var c=this.elements,d=a.elements;a=d[0];var e=d[1],f=d[2],g=d[3],h=d[4],k=d[5],m=d[6],q=d[7],l=d[8],u=d[9],r=d[10],t=d[11],p=d[12],w=d[13],z=d[14],d=d[15],y=u*z*q-w*r*q+w*m*t-k*z*t-u*m*d+k*r*d,x=p*r*q-l*z*q-p*m*t+h*z*t+l*m*d-h*r*d,A=l*w*q-p*u*q+p*k*t-h*w*t-l*k*d+h*u*d,J=p*u*m-l*w*m-p*k*r+h*w*r+l*k*z-h*u*z,B=a*y+e*x+f*A+g*J;if(0===B){if(!0===b)throw Error("THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0");
    console.warn("THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0");return this.identity()}b=1/B;c[0]=y*b;c[1]=(w*r*g-u*z*g-w*f*t+e*z*t+u*f*d-e*r*d)*b;c[2]=(k*z*g-w*m*g+w*f*q-e*z*q-k*f*d+e*m*d)*b;c[3]=(u*m*g-k*r*g-u*f*q+e*r*q+k*f*t-e*m*t)*b;c[4]=x*b;c[5]=(l*z*g-p*r*g+p*f*t-a*z*t-l*f*d+a*r*d)*b;c[6]=(p*m*g-h*z*g-p*f*q+a*z*q+h*f*d-a*m*d)*b;c[7]=(h*r*g-l*m*g+l*f*q-a*r*q-h*f*t+a*m*t)*b;c[8]=A*b;c[9]=(p*u*g-l*w*g-p*e*t+a*w*t+l*e*d-a*u*d)*b;c[10]=(h*w*g-p*k*g+p*e*q-a*w*q-h*e*d+a*k*d)*b;c[11]=
    (l*k*g-h*u*g-l*e*q+a*u*q+h*e*t-a*k*t)*b;c[12]=J*b;c[13]=(l*w*f-p*u*f+p*e*r-a*w*r-l*e*z+a*u*z)*b;c[14]=(p*k*f-h*w*f-p*e*m+a*w*m+h*e*z-a*k*z)*b;c[15]=(h*u*f-l*k*f+l*e*m-a*u*m-h*e*r+a*k*r)*b;return this},scale:function(a){var b=this.elements,c=a.x,d=a.y;a=a.z;b[0]*=c;b[4]*=d;b[8]*=a;b[1]*=c;b[5]*=d;b[9]*=a;b[2]*=c;b[6]*=d;b[10]*=a;b[3]*=c;b[7]*=d;b[11]*=a;return this},getMaxScaleOnAxis:function(){var a=this.elements;return Math.sqrt(Math.max(a[0]*a[0]+a[1]*a[1]+a[2]*a[2],a[4]*a[4]+a[5]*a[5]+a[6]*a[6],
    a[8]*a[8]+a[9]*a[9]+a[10]*a[10]))},makeTranslation:function(a,b,c){this.set(1,0,0,a,0,1,0,b,0,0,1,c,0,0,0,1);return this},makeRotationX:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(1,0,0,0,0,b,-a,0,0,a,b,0,0,0,0,1);return this},makeRotationY:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,0,a,0,0,1,0,0,-a,0,b,0,0,0,0,1);return this},makeRotationZ:function(a){var b=Math.cos(a);a=Math.sin(a);this.set(b,-a,0,0,a,b,0,0,0,0,1,0,0,0,0,1);return this},makeRotationAxis:function(a,b){var c=
    Math.cos(b);b=Math.sin(b);var d=1-c,e=a.x,f=a.y;a=a.z;var g=d*e,h=d*f;this.set(g*e+c,g*f-b*a,g*a+b*f,0,g*f+b*a,h*f+c,h*a-b*e,0,g*a-b*f,h*a+b*e,d*a*a+c,0,0,0,0,1);return this},makeScale:function(a,b,c){this.set(a,0,0,0,0,b,0,0,0,0,c,0,0,0,0,1);return this},makeShear:function(a,b,c){this.set(1,b,c,0,a,1,c,0,a,b,1,0,0,0,0,1);return this},compose:function(a,b,c){this.makeRotationFromQuaternion(b);this.scale(c);this.setPosition(a);return this},decompose:function(){var a=new p,b=new O;return function(c,
    d,e){var f=this.elements,g=a.set(f[0],f[1],f[2]).length(),h=a.set(f[4],f[5],f[6]).length(),k=a.set(f[8],f[9],f[10]).length();0>this.determinant()&&(g=-g);c.x=f[12];c.y=f[13];c.z=f[14];b.copy(this);c=1/g;var f=1/h,m=1/k;b.elements[0]*=c;b.elements[1]*=c;b.elements[2]*=c;b.elements[4]*=f;b.elements[5]*=f;b.elements[6]*=f;b.elements[8]*=m;b.elements[9]*=m;b.elements[10]*=m;d.setFromRotationMatrix(b);e.x=g;e.y=h;e.z=k;return this}}(),makePerspective:function(a,b,c,d,e,f){void 0===f&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
    var g=this.elements;g[0]=2*e/(b-a);g[4]=0;g[8]=(b+a)/(b-a);g[12]=0;g[1]=0;g[5]=2*e/(c-d);g[9]=(c+d)/(c-d);g[13]=0;g[2]=0;g[6]=0;g[10]=-(f+e)/(f-e);g[14]=-2*f*e/(f-e);g[3]=0;g[7]=0;g[11]=-1;g[15]=0;return this},makeOrthographic:function(a,b,c,d,e,f){var g=this.elements,h=1/(b-a),k=1/(c-d),m=1/(f-e);g[0]=2*h;g[4]=0;g[8]=0;g[12]=-((b+a)*h);g[1]=0;g[5]=2*k;g[9]=0;g[13]=-((c+d)*k);g[2]=0;g[6]=0;g[10]=-2*m;g[14]=-((f+e)*m);g[3]=0;g[7]=0;g[11]=0;g[15]=1;return this},equals:function(a){var b=this.elements;
    a=a.elements;for(var c=0;16>c;c++)if(b[c]!==a[c])return!1;return!0},fromArray:function(a,b){void 0===b&&(b=0);for(var c=0;16>c;c++)this.elements[c]=a[c+b];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];a[b+9]=c[9];a[b+10]=c[10];a[b+11]=c[11];a[b+12]=c[12];a[b+13]=c[13];a[b+14]=c[14];a[b+15]=c[15];return a}});Object.assign(ha,{slerp:function(a,b,c,d){return c.copy(a).slerp(b,
    d)},slerpFlat:function(a,b,c,d,e,f,g){var h=c[d+0],k=c[d+1],m=c[d+2];c=c[d+3];d=e[f+0];var q=e[f+1],l=e[f+2];e=e[f+3];if(c!==e||h!==d||k!==q||m!==l){f=1-g;var u=h*d+k*q+m*l+c*e,r=0<=u?1:-1,p=1-u*u;p>Number.EPSILON&&(p=Math.sqrt(p),u=Math.atan2(p,u*r),f=Math.sin(f*u)/p,g=Math.sin(g*u)/p);r*=g;h=h*f+d*r;k=k*f+q*r;m=m*f+l*r;c=c*f+e*r;f===1-g&&(g=1/Math.sqrt(h*h+k*k+m*m+c*c),h*=g,k*=g,m*=g,c*=g)}a[b]=h;a[b+1]=k;a[b+2]=m;a[b+3]=c}});Object.defineProperties(ha.prototype,{x:{get:function(){return this._x},
    set:function(a){this._x=a;this.onChangeCallback()}},y:{get:function(){return this._y},set:function(a){this._y=a;this.onChangeCallback()}},z:{get:function(){return this._z},set:function(a){this._z=a;this.onChangeCallback()}},w:{get:function(){return this._w},set:function(a){this._w=a;this.onChangeCallback()}}});Object.assign(ha.prototype,{set:function(a,b,c,d){this._x=a;this._y=b;this._z=c;this._w=d;this.onChangeCallback();return this},clone:function(){return new this.constructor(this._x,this._y,this._z,
    this._w)},copy:function(a){this._x=a.x;this._y=a.y;this._z=a.z;this._w=a.w;this.onChangeCallback();return this},setFromEuler:function(a,b){if(!a||!a.isEuler)throw Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var c=a._x,d=a._y,e=a._z;a=a.order;var f=Math.cos,g=Math.sin,h=f(c/2),k=f(d/2),f=f(e/2),c=g(c/2),d=g(d/2),e=g(e/2);"XYZ"===a?(this._x=c*k*f+h*d*e,this._y=h*d*f-c*k*e,this._z=h*k*e+c*d*f,this._w=h*k*f-c*d*e):"YXZ"===a?(this._x=c*k*f+
    h*d*e,this._y=h*d*f-c*k*e,this._z=h*k*e-c*d*f,this._w=h*k*f+c*d*e):"ZXY"===a?(this._x=c*k*f-h*d*e,this._y=h*d*f+c*k*e,this._z=h*k*e+c*d*f,this._w=h*k*f-c*d*e):"ZYX"===a?(this._x=c*k*f-h*d*e,this._y=h*d*f+c*k*e,this._z=h*k*e-c*d*f,this._w=h*k*f+c*d*e):"YZX"===a?(this._x=c*k*f+h*d*e,this._y=h*d*f+c*k*e,this._z=h*k*e-c*d*f,this._w=h*k*f-c*d*e):"XZY"===a&&(this._x=c*k*f-h*d*e,this._y=h*d*f-c*k*e,this._z=h*k*e+c*d*f,this._w=h*k*f+c*d*e);if(!1!==b)this.onChangeCallback();return this},setFromAxisAngle:function(a,
    b){b/=2;var c=Math.sin(b);this._x=a.x*c;this._y=a.y*c;this._z=a.z*c;this._w=Math.cos(b);this.onChangeCallback();return this},setFromRotationMatrix:function(a){var b=a.elements,c=b[0];a=b[4];var d=b[8],e=b[1],f=b[5],g=b[9],h=b[2],k=b[6],b=b[10],m=c+f+b;0<m?(c=.5/Math.sqrt(m+1),this._w=.25/c,this._x=(k-g)*c,this._y=(d-h)*c,this._z=(e-a)*c):c>f&&c>b?(c=2*Math.sqrt(1+c-f-b),this._w=(k-g)/c,this._x=.25*c,this._y=(a+e)/c,this._z=(d+h)/c):f>b?(c=2*Math.sqrt(1+f-c-b),this._w=(d-h)/c,this._x=(a+e)/c,this._y=
    .25*c,this._z=(g+k)/c):(c=2*Math.sqrt(1+b-c-f),this._w=(e-a)/c,this._x=(d+h)/c,this._y=(g+k)/c,this._z=.25*c);this.onChangeCallback();return this},setFromUnitVectors:function(){var a=new p,b;return function(c,d){void 0===a&&(a=new p);b=c.dot(d)+1;1E-6>b?(b=0,Math.abs(c.x)>Math.abs(c.z)?a.set(-c.y,c.x,0):a.set(0,-c.z,c.y)):a.crossVectors(c,d);this._x=a.x;this._y=a.y;this._z=a.z;this._w=b;return this.normalize()}}(),inverse:function(){return this.conjugate().normalize()},conjugate:function(){this._x*=
    -1;this._y*=-1;this._z*=-1;this.onChangeCallback();return this},dot:function(a){return this._x*a._x+this._y*a._y+this._z*a._z+this._w*a._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var a=this.length();0===a?(this._z=this._y=this._x=0,this._w=1):(a=1/a,this._x*=a,this._y*=a,this._z*=a,this._w*=a);this.onChangeCallback();return this},
    multiply:function(a,b){return void 0!==b?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(a,b)):this.multiplyQuaternions(this,a)},premultiply:function(a){return this.multiplyQuaternions(a,this)},multiplyQuaternions:function(a,b){var c=a._x,d=a._y,e=a._z;a=a._w;var f=b._x,g=b._y,h=b._z;b=b._w;this._x=c*b+a*f+d*h-e*g;this._y=d*b+a*g+e*f-c*h;this._z=e*b+a*h+c*g-d*f;this._w=a*b-c*f-d*g-e*h;this.onChangeCallback();
    return this},slerp:function(a,b){if(0===b)return this;if(1===b)return this.copy(a);var c=this._x,d=this._y,e=this._z,f=this._w,g=f*a._w+c*a._x+d*a._y+e*a._z;0>g?(this._w=-a._w,this._x=-a._x,this._y=-a._y,this._z=-a._z,g=-g):this.copy(a);if(1<=g)return this._w=f,this._x=c,this._y=d,this._z=e,this;a=Math.sqrt(1-g*g);if(.001>Math.abs(a))return this._w=.5*(f+this._w),this._x=.5*(c+this._x),this._y=.5*(d+this._y),this._z=.5*(e+this._z),this;var h=Math.atan2(a,g),g=Math.sin((1-b)*h)/a;b=Math.sin(b*h)/a;
    this._w=f*g+this._w*b;this._x=c*g+this._x*b;this._y=d*g+this._y*b;this._z=e*g+this._z*b;this.onChangeCallback();return this},equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._w===this._w},fromArray:function(a,b){void 0===b&&(b=0);this._x=a[b];this._y=a[b+1];this._z=a[b+2];this._w=a[b+3];this.onChangeCallback();return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this._x;a[b+1]=this._y;a[b+2]=this._z;a[b+3]=this._w;return a},onChange:function(a){this.onChangeCallback=
    a;return this},onChangeCallback:function(){}});Object.assign(p.prototype,{isVector3:!0,set:function(a,b,c){this.x=a;this.y=b;this.z=c;return this},setScalar:function(a){this.z=this.y=this.x=a;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;default:throw Error("index is out of range: "+a);}return this},getComponent:function(a){switch(a){case 0:return this.x;
    case 1:return this.y;case 2:return this.z;default:throw Error("index is out of range: "+a);}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this},add:function(a,b){if(void 0!==b)return console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;return this},
    addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this},addScaledVector:function(a,b){this.x+=a.x*b;this.y+=a.y*b;this.z+=a.z*b;return this},sub:function(a,b){if(void 0!==b)return console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;return this},subScalar:function(a){this.x-=a;this.y-=a;this.z-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=
    a.z-b.z;return this},multiply:function(a,b){if(void 0!==b)return console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(a,b);this.x*=a.x;this.y*=a.y;this.z*=a.z;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;return this},multiplyVectors:function(a,b){this.x=a.x*b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this},applyEuler:function(){var a=new ha;return function(b){b&&b.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.");
    return this.applyQuaternion(a.setFromEuler(b))}}(),applyAxisAngle:function(){var a=new ha;return function(b,c){return this.applyQuaternion(a.setFromAxisAngle(b,c))}}(),applyMatrix3:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[3]*c+a[6]*d;this.y=a[1]*b+a[4]*c+a[7]*d;this.z=a[2]*b+a[5]*c+a[8]*d;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;var e=1/(a[3]*b+a[7]*c+a[11]*d+a[15]);this.x=(a[0]*b+a[4]*c+a[8]*d+a[12])*e;this.y=(a[1]*b+a[5]*c+
    a[9]*d+a[13])*e;this.z=(a[2]*b+a[6]*c+a[10]*d+a[14])*e;return this},applyQuaternion:function(a){var b=this.x,c=this.y,d=this.z,e=a.x,f=a.y,g=a.z;a=a.w;var h=a*b+f*d-g*c,k=a*c+g*b-e*d,m=a*d+e*c-f*b,b=-e*b-f*c-g*d;this.x=h*a+b*-e+k*-g-m*-f;this.y=k*a+b*-f+m*-e-h*-g;this.z=m*a+b*-g+h*-f-k*-e;return this},project:function(){var a=new O;return function(b){a.multiplyMatrices(b.projectionMatrix,a.getInverse(b.matrixWorld));return this.applyMatrix4(a)}}(),unproject:function(){var a=new O;return function(b){a.multiplyMatrices(b.matrixWorld,
    a.getInverse(b.projectionMatrix));return this.applyMatrix4(a)}}(),transformDirection:function(a){var b=this.x,c=this.y,d=this.z;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d;this.y=a[1]*b+a[5]*c+a[9]*d;this.z=a[2]*b+a[6]*c+a[10]*d;return this.normalize()},divide:function(a){this.x/=a.x;this.y/=a.y;this.z/=a.z;return this},divideScalar:function(a){return this.multiplyScalar(1/a)},min:function(a){this.x=Math.min(this.x,a.x);this.y=Math.min(this.y,a.y);this.z=Math.min(this.z,a.z);return this},max:function(a){this.x=
    Math.max(this.x,a.x);this.y=Math.max(this.y,a.y);this.z=Math.max(this.z,a.z);return this},clamp:function(a,b){this.x=Math.max(a.x,Math.min(b.x,this.x));this.y=Math.max(a.y,Math.min(b.y,this.y));this.z=Math.max(a.z,Math.min(b.z,this.z));return this},clampScalar:function(){var a=new p,b=new p;return function(c,d){a.set(c,c,c);b.set(d,d,d);return this.clamp(a,b)}}(),clampLength:function(a,b){var c=this.length();return this.divideScalar(c||1).multiplyScalar(Math.max(a,Math.min(b,c)))},floor:function(){this.x=
    Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);return this},negate:function(){this.x=
    -this.x;this.y=-this.y;this.z=-this.z;return this},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(a){return this.normalize().multiplyScalar(a)},lerp:function(a,b){this.x+=(a.x-
    this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;return this},lerpVectors:function(a,b,c){return this.subVectors(b,a).multiplyScalar(c).add(a)},cross:function(a,b){return void 0!==b?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(a,b)):this.crossVectors(this,a)},crossVectors:function(a,b){var c=a.x,d=a.y;a=a.z;var e=b.x,f=b.y;b=b.z;this.x=d*b-a*f;this.y=a*e-c*b;this.z=c*f-d*e;return this},projectOnVector:function(a){var b=
    a.dot(this)/a.lengthSq();return this.copy(a).multiplyScalar(b)},projectOnPlane:function(){var a=new p;return function(b){a.copy(this).projectOnVector(b);return this.sub(a)}}(),reflect:function(){var a=new p;return function(b){return this.sub(a.copy(b).multiplyScalar(2*this.dot(b)))}}(),angleTo:function(a){a=this.dot(a)/Math.sqrt(this.lengthSq()*a.lengthSq());return Math.acos(Q.clamp(a,-1,1))},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-
    a.x,c=this.y-a.y;a=this.z-a.z;return b*b+c*c+a*a},manhattanDistanceTo:function(a){return Math.abs(this.x-a.x)+Math.abs(this.y-a.y)+Math.abs(this.z-a.z)},setFromSpherical:function(a){var b=Math.sin(a.phi)*a.radius;this.x=b*Math.sin(a.theta);this.y=Math.cos(a.phi)*a.radius;this.z=b*Math.cos(a.theta);return this},setFromCylindrical:function(a){this.x=a.radius*Math.sin(a.theta);this.y=a.y;this.z=a.radius*Math.cos(a.theta);return this},setFromMatrixPosition:function(a){a=a.elements;this.x=a[12];this.y=
    a[13];this.z=a[14];return this},setFromMatrixScale:function(a){var b=this.setFromMatrixColumn(a,0).length(),c=this.setFromMatrixColumn(a,1).length();a=this.setFromMatrixColumn(a,2).length();this.x=b;this.y=c;this.z=a;return this},setFromMatrixColumn:function(a,b){return this.fromArray(a.elements,4*b)},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];this.z=a[b+2];return this},toArray:function(a,b){void 0===a&&(a=
    []);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;a[b+2]=this.z;return a},fromBufferAttribute:function(a,b,c){void 0!==c&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().");this.x=a.getX(b);this.y=a.getY(b);this.z=a.getZ(b);return this}});Object.assign(ma.prototype,{isMatrix3:!0,set:function(a,b,c,d,e,f,g,h,k){var m=this.elements;m[0]=a;m[1]=d;m[2]=g;m[3]=b;m[4]=e;m[5]=h;m[6]=c;m[7]=f;m[8]=k;return this},identity:function(){this.set(1,0,0,0,1,0,0,0,1);return this},clone:function(){return(new this.constructor).fromArray(this.elements)},
    copy:function(a){var b=this.elements;a=a.elements;b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];return this},setFromMatrix4:function(a){a=a.elements;this.set(a[0],a[4],a[8],a[1],a[5],a[9],a[2],a[6],a[10]);return this},applyToBufferAttribute:function(){var a=new p;return function(b){for(var c=0,d=b.count;c<d;c++)a.x=b.getX(c),a.y=b.getY(c),a.z=b.getZ(c),a.applyMatrix3(this),b.setXYZ(c,a.x,a.y,a.z);return b}}(),multiply:function(a){return this.multiplyMatrices(this,
    a)},premultiply:function(a){return this.multiplyMatrices(a,this)},multiplyMatrices:function(a,b){var c=a.elements,d=b.elements;b=this.elements;a=c[0];var e=c[3],f=c[6],g=c[1],h=c[4],k=c[7],m=c[2],q=c[5],c=c[8],l=d[0],p=d[3],r=d[6],t=d[1],v=d[4],w=d[7],z=d[2],y=d[5],d=d[8];b[0]=a*l+e*t+f*z;b[3]=a*p+e*v+f*y;b[6]=a*r+e*w+f*d;b[1]=g*l+h*t+k*z;b[4]=g*p+h*v+k*y;b[7]=g*r+h*w+k*d;b[2]=m*l+q*t+c*z;b[5]=m*p+q*v+c*y;b[8]=m*r+q*w+c*d;return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[3]*=a;
    b[6]*=a;b[1]*=a;b[4]*=a;b[7]*=a;b[2]*=a;b[5]*=a;b[8]*=a;return this},determinant:function(){var a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],f=a[4],g=a[5],h=a[6],k=a[7],a=a[8];return b*f*a-b*g*k-c*e*a+c*g*h+d*e*k-d*f*h},getInverse:function(a,b){a&&a.isMatrix4&&console.error("THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.");var c=a.elements;a=this.elements;var d=c[0],e=c[1],f=c[2],g=c[3],h=c[4],k=c[5],m=c[6],q=c[7],c=c[8],l=c*h-k*q,p=k*m-c*g,r=q*g-h*m,t=d*l+e*p+f*r;if(0===t){if(!0===
    b)throw Error("THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0");console.warn("THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0");return this.identity()}b=1/t;a[0]=l*b;a[1]=(f*q-c*e)*b;a[2]=(k*e-f*h)*b;a[3]=p*b;a[4]=(c*d-f*m)*b;a[5]=(f*g-k*d)*b;a[6]=r*b;a[7]=(e*m-q*d)*b;a[8]=(h*d-e*g)*b;return this},transpose:function(){var a=this.elements;var b=a[1];a[1]=a[3];a[3]=b;b=a[2];a[2]=a[6];a[6]=b;b=a[5];a[5]=a[7];a[7]=b;return this},getNormalMatrix:function(a){return this.setFromMatrix4(a).getInverse(this).transpose()},
    transposeIntoArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[3];a[2]=b[6];a[3]=b[1];a[4]=b[4];a[5]=b[7];a[6]=b[2];a[7]=b[5];a[8]=b[8];return this},setUvTransform:function(a,b,c,d,e,f,g){var h=Math.cos(e);e=Math.sin(e);this.set(c*h,c*e,-c*(h*f+e*g)+f+a,-d*e,d*h,-d*(-e*f+h*g)+g+b,0,0,1)},scale:function(a,b){var c=this.elements;c[0]*=a;c[3]*=a;c[6]*=a;c[1]*=b;c[4]*=b;c[7]*=b;return this},rotate:function(a){var b=Math.cos(a);a=Math.sin(a);var c=this.elements,d=c[0],e=c[3],f=c[6],g=c[1],h=c[4],
    k=c[7];c[0]=b*d+a*g;c[3]=b*e+a*h;c[6]=b*f+a*k;c[1]=-a*d+b*g;c[4]=-a*e+b*h;c[7]=-a*f+b*k;return this},translate:function(a,b){var c=this.elements;c[0]+=a*c[2];c[3]+=a*c[5];c[6]+=a*c[8];c[1]+=b*c[2];c[4]+=b*c[5];c[7]+=b*c[8];return this},equals:function(a){var b=this.elements;a=a.elements;for(var c=0;9>c;c++)if(b[c]!==a[c])return!1;return!0},fromArray:function(a,b){void 0===b&&(b=0);for(var c=0;9>c;c++)this.elements[c]=a[c+b];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);var c=
    this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];return a}});var Af=0;U.DEFAULT_IMAGE=void 0;U.DEFAULT_MAPPING=300;U.prototype=Object.assign(Object.create(za.prototype),{constructor:U,isTexture:!0,clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.name=a.name;this.image=a.image;this.mipmaps=a.mipmaps.slice(0);this.mapping=a.mapping;this.wrapS=a.wrapS;this.wrapT=a.wrapT;this.magFilter=a.magFilter;this.minFilter=
    a.minFilter;this.anisotropy=a.anisotropy;this.format=a.format;this.type=a.type;this.offset.copy(a.offset);this.repeat.copy(a.repeat);this.center.copy(a.center);this.rotation=a.rotation;this.matrixAutoUpdate=a.matrixAutoUpdate;this.matrix.copy(a.matrix);this.generateMipmaps=a.generateMipmaps;this.premultiplyAlpha=a.premultiplyAlpha;this.flipY=a.flipY;this.unpackAlignment=a.unpackAlignment;this.encoding=a.encoding;return this},toJSON:function(a){var b=void 0===a||"string"===typeof a;if(!b&&void 0!==
    a.textures[this.uuid])return a.textures[this.uuid];var c={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY};if(void 0!==this.image){var d=this.image;void 0===d.uuid&&(d.uuid=Q.generateUUID());
    if(!b&&void 0===a.images[d.uuid]){var e=a.images,f=d.uuid,g=d.uuid;if(d instanceof HTMLCanvasElement)var h=d;else{h=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");h.width=d.width;h.height=d.height;var k=h.getContext("2d");d instanceof ImageData?k.putImageData(d,0,0):k.drawImage(d,0,0,d.width,d.height)}h=2048<h.width||2048<h.height?h.toDataURL("image/jpeg",.6):h.toDataURL("image/png");e[f]={uuid:g,url:h}}c.image=d.uuid}b||(a.textures[this.uuid]=c);return c},dispose:function(){this.dispatchEvent({type:"dispose"})},
    transformUv:function(a){if(300===this.mapping){a.applyMatrix3(this.matrix);if(0>a.x||1<a.x)switch(this.wrapS){case 1E3:a.x-=Math.floor(a.x);break;case 1001:a.x=0>a.x?0:1;break;case 1002:a.x=1===Math.abs(Math.floor(a.x)%2)?Math.ceil(a.x)-a.x:a.x-Math.floor(a.x)}if(0>a.y||1<a.y)switch(this.wrapT){case 1E3:a.y-=Math.floor(a.y);break;case 1001:a.y=0>a.y?0:1;break;case 1002:a.y=1===Math.abs(Math.floor(a.y)%2)?Math.ceil(a.y)-a.y:a.y-Math.floor(a.y)}this.flipY&&(a.y=1-a.y)}}});Object.defineProperty(U.prototype,
    "needsUpdate",{set:function(a){!0===a&&this.version++}});Object.assign(aa.prototype,{isVector4:!0,set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},setScalar:function(a){this.w=this.z=this.y=this.x=a;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setW:function(a){this.w=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;case 3:this.w=
    b;break;default:throw Error("index is out of range: "+a);}return this},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw Error("index is out of range: "+a);}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=void 0!==a.w?a.w:1;return this},add:function(a,b){if(void 0!==b)return console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
    this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;this.w+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this},addScaledVector:function(a,b){this.x+=a.x*b;this.y+=a.y*b;this.z+=a.z*b;this.w+=a.w*b;return this},sub:function(a,b){if(void 0!==b)return console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,
    b);this.x-=a.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;return this},subScalar:function(a){this.x-=a;this.y-=a;this.z-=a;this.w-=a;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;this.w*=a;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z,e=this.w;a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12]*e;this.y=a[1]*b+a[5]*c+a[9]*d+a[13]*e;this.z=a[2]*b+a[6]*c+a[10]*d+a[14]*
    e;this.w=a[3]*b+a[7]*c+a[11]*d+a[15]*e;return this},divideScalar:function(a){return this.multiplyScalar(1/a)},setAxisAngleFromQuaternion:function(a){this.w=2*Math.acos(a.w);var b=Math.sqrt(1-a.w*a.w);1E-4>b?(this.x=1,this.z=this.y=0):(this.x=a.x/b,this.y=a.y/b,this.z=a.z/b);return this},setAxisAngleFromRotationMatrix:function(a){a=a.elements;var b=a[0];var c=a[4];var d=a[8],e=a[1],f=a[5],g=a[9];var h=a[2];var k=a[6];var m=a[10];if(.01>Math.abs(c-e)&&.01>Math.abs(d-h)&&.01>Math.abs(g-k)){if(.1>Math.abs(c+
    e)&&.1>Math.abs(d+h)&&.1>Math.abs(g+k)&&.1>Math.abs(b+f+m-3))return this.set(1,0,0,0),this;a=Math.PI;b=(b+1)/2;f=(f+1)/2;m=(m+1)/2;c=(c+e)/4;d=(d+h)/4;g=(g+k)/4;b>f&&b>m?.01>b?(k=0,c=h=.707106781):(k=Math.sqrt(b),h=c/k,c=d/k):f>m?.01>f?(k=.707106781,h=0,c=.707106781):(h=Math.sqrt(f),k=c/h,c=g/h):.01>m?(h=k=.707106781,c=0):(c=Math.sqrt(m),k=d/c,h=g/c);this.set(k,h,c,a);return this}a=Math.sqrt((k-g)*(k-g)+(d-h)*(d-h)+(e-c)*(e-c));.001>Math.abs(a)&&(a=1);this.x=(k-g)/a;this.y=(d-h)/a;this.z=(e-c)/a;
    this.w=Math.acos((b+f+m-1)/2);return this},min:function(a){this.x=Math.min(this.x,a.x);this.y=Math.min(this.y,a.y);this.z=Math.min(this.z,a.z);this.w=Math.min(this.w,a.w);return this},max:function(a){this.x=Math.max(this.x,a.x);this.y=Math.max(this.y,a.y);this.z=Math.max(this.z,a.z);this.w=Math.max(this.w,a.w);return this},clamp:function(a,b){this.x=Math.max(a.x,Math.min(b.x,this.x));this.y=Math.max(a.y,Math.min(b.y,this.y));this.z=Math.max(a.z,Math.min(b.z,this.z));this.w=Math.max(a.w,Math.min(b.w,
    this.w));return this},clampScalar:function(){var a,b;return function(c,d){void 0===a&&(a=new aa,b=new aa);a.set(c,c,c,c);b.set(d,d,d,d);return this.clamp(a,b)}}(),clampLength:function(a,b){var c=this.length();return this.divideScalar(c||1).multiplyScalar(Math.max(a,Math.min(b,c)))},floor:function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this},ceil:function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);
    this.w=Math.ceil(this.w);return this},round:function(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this},roundToZero:function(){this.x=0>this.x?Math.ceil(this.x):Math.floor(this.x);this.y=0>this.y?Math.ceil(this.y):Math.floor(this.y);this.z=0>this.z?Math.ceil(this.z):Math.floor(this.z);this.w=0>this.w?Math.ceil(this.w):Math.floor(this.w);return this},negate:function(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this},
    dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(a){return this.normalize().multiplyScalar(a)},lerp:function(a,b){this.x+=
    (a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;this.w+=(a.w-this.w)*b;return this},lerpVectors:function(a,b,c){return this.subVectors(b,a).multiplyScalar(c).add(a)},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z&&a.w===this.w},fromArray:function(a,b){void 0===b&&(b=0);this.x=a[b];this.y=a[b+1];this.z=a[b+2];this.w=a[b+3];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.x;a[b+1]=this.y;a[b+2]=this.z;a[b+3]=this.w;return a},fromBufferAttribute:function(a,
    b,c){void 0!==c&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().");this.x=a.getX(b);this.y=a.getY(b);this.z=a.getZ(b);this.w=a.getW(b);return this}});kb.prototype=Object.assign(Object.create(za.prototype),{constructor:kb,isWebGLRenderTarget:!0,setSize:function(a,b){if(this.width!==a||this.height!==b)this.width=a,this.height=b,this.dispose();this.viewport.set(0,0,a,b);this.scissor.set(0,0,a,b)},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.width=
    a.width;this.height=a.height;this.viewport.copy(a.viewport);this.texture=a.texture.clone();this.depthBuffer=a.depthBuffer;this.stencilBuffer=a.stencilBuffer;this.depthTexture=a.depthTexture;return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});Jb.prototype=Object.create(kb.prototype);Jb.prototype.constructor=Jb;Jb.prototype.isWebGLRenderTargetCube=!0;lb.prototype=Object.create(U.prototype);lb.prototype.constructor=lb;lb.prototype.isDataTexture=!0;db.prototype=Object.create(U.prototype);
    db.prototype.constructor=db;db.prototype.isCubeTexture=!0;Object.defineProperty(db.prototype,"images",{get:function(){return this.image},set:function(a){this.image=a}});var Ne=new U,Oe=new db,Ie=[],Ke=[],Me=new Float32Array(16),Le=new Float32Array(9);Se.prototype.setValue=function(a,b){for(var c=this.seq,d=0,e=c.length;d!==e;++d){var f=c[d];f.setValue(a,b[f.id])}};var Vd=/([\w\d_]+)(\])?(\[|\.)?/g;mb.prototype.setValue=function(a,b,c){b=this.map[b];void 0!==b&&b.setValue(a,c,this.renderer)};mb.prototype.setOptional=
    function(a,b,c){b=b[c];void 0!==b&&this.setValue(a,c,b)};mb.upload=function(a,b,c,d){for(var e=0,f=b.length;e!==f;++e){var g=b[e],h=c[g.id];!1!==h.needsUpdate&&g.setValue(a,h.value,d)}};mb.seqWithValue=function(a,b){for(var c=[],d=0,e=a.length;d!==e;++d){var f=a[d];f.id in b&&c.push(f)}return c};var Kg={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,
    cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,
    deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,
    lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,
    mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,
    royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};Object.assign(H.prototype,{isColor:!0,r:1,g:1,b:1,set:function(a){a&&
    a.isColor?this.copy(a):"number"===typeof a?this.setHex(a):"string"===typeof a&&this.setStyle(a);return this},setScalar:function(a){this.b=this.g=this.r=a;return this},setHex:function(a){a=Math.floor(a);this.r=(a>>16&255)/255;this.g=(a>>8&255)/255;this.b=(a&255)/255;return this},setRGB:function(a,b,c){this.r=a;this.g=b;this.b=c;return this},setHSL:function(){function a(a,c,d){0>d&&(d+=1);1<d&&--d;return d<1/6?a+6*(c-a)*d:.5>d?c:d<2/3?a+6*(c-a)*(2/3-d):a}return function(b,c,d){b=Q.euclideanModulo(b,
    1);c=Q.clamp(c,0,1);d=Q.clamp(d,0,1);0===c?this.r=this.g=this.b=d:(c=.5>=d?d*(1+c):d+c-d*c,d=2*d-c,this.r=a(d,c,b+1/3),this.g=a(d,c,b),this.b=a(d,c,b-1/3));return this}}(),setStyle:function(a){function b(b){void 0!==b&&1>parseFloat(b)&&console.warn("THREE.Color: Alpha component of "+a+" will be ignored.")}var c;if(c=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(a)){var d=c[2];switch(c[1]){case "rgb":case "rgba":if(c=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d))return this.r=Math.min(255,
    parseInt(c[1],10))/255,this.g=Math.min(255,parseInt(c[2],10))/255,this.b=Math.min(255,parseInt(c[3],10))/255,b(c[5]),this;if(c=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d))return this.r=Math.min(100,parseInt(c[1],10))/100,this.g=Math.min(100,parseInt(c[2],10))/100,this.b=Math.min(100,parseInt(c[3],10))/100,b(c[5]),this;break;case "hsl":case "hsla":if(c=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(d)){var d=parseFloat(c[1])/360,
    e=parseInt(c[2],10)/100,f=parseInt(c[3],10)/100;b(c[5]);return this.setHSL(d,e,f)}}}else if(c=/^\#([A-Fa-f0-9]+)$/.exec(a)){c=c[1];d=c.length;if(3===d)return this.r=parseInt(c.charAt(0)+c.charAt(0),16)/255,this.g=parseInt(c.charAt(1)+c.charAt(1),16)/255,this.b=parseInt(c.charAt(2)+c.charAt(2),16)/255,this;if(6===d)return this.r=parseInt(c.charAt(0)+c.charAt(1),16)/255,this.g=parseInt(c.charAt(2)+c.charAt(3),16)/255,this.b=parseInt(c.charAt(4)+c.charAt(5),16)/255,this}a&&0<a.length&&(c=Kg[a],void 0!==
    c?this.setHex(c):console.warn("THREE.Color: Unknown color "+a));return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(a){this.r=a.r;this.g=a.g;this.b=a.b;return this},copyGammaToLinear:function(a,b){void 0===b&&(b=2);this.r=Math.pow(a.r,b);this.g=Math.pow(a.g,b);this.b=Math.pow(a.b,b);return this},copyLinearToGamma:function(a,b){void 0===b&&(b=2);b=0<b?1/b:1;this.r=Math.pow(a.r,b);this.g=Math.pow(a.g,b);this.b=Math.pow(a.b,b);return this},convertGammaToLinear:function(){var a=
    this.r,b=this.g,c=this.b;this.r=a*a;this.g=b*b;this.b=c*c;return this},convertLinearToGamma:function(){this.r=Math.sqrt(this.r);this.g=Math.sqrt(this.g);this.b=Math.sqrt(this.b);return this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(a){a=a||{h:0,s:0,l:0};var b=this.r,c=this.g,d=this.b,e=Math.max(b,c,d),f=Math.min(b,c,d),g,h=(f+e)/2;if(f===e)f=g=0;else{var k=e-f,f=.5>=h?k/(e+f):
    k/(2-e-f);switch(e){case b:g=(c-d)/k+(c<d?6:0);break;case c:g=(d-b)/k+2;break;case d:g=(b-c)/k+4}g/=6}a.h=g;a.s=f;a.l=h;return a},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(a,b,c){var d=this.getHSL();d.h+=a;d.s+=b;d.l+=c;this.setHSL(d.h,d.s,d.l);return this},add:function(a){this.r+=a.r;this.g+=a.g;this.b+=a.b;return this},addColors:function(a,b){this.r=a.r+b.r;this.g=a.g+b.g;this.b=a.b+b.b;return this},addScalar:function(a){this.r+=
    a;this.g+=a;this.b+=a;return this},sub:function(a){this.r=Math.max(0,this.r-a.r);this.g=Math.max(0,this.g-a.g);this.b=Math.max(0,this.b-a.b);return this},multiply:function(a){this.r*=a.r;this.g*=a.g;this.b*=a.b;return this},multiplyScalar:function(a){this.r*=a;this.g*=a;this.b*=a;return this},lerp:function(a,b){this.r+=(a.r-this.r)*b;this.g+=(a.g-this.g)*b;this.b+=(a.b-this.b)*b;return this},equals:function(a){return a.r===this.r&&a.g===this.g&&a.b===this.b},fromArray:function(a,b){void 0===b&&(b=
    0);this.r=a[b];this.g=a[b+1];this.b=a[b+2];return this},toArray:function(a,b){void 0===a&&(a=[]);void 0===b&&(b=0);a[b]=this.r;a[b+1]=this.g;a[b+2]=this.b;return a},toJSON:function(){return this.getHex()}});var K={common:{diffuse:{value:new H(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new ma},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},
    aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new D(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:2.5E-4},fogNear:{value:1},
    fogFar:{value:2E3},fogColor:{value:new H(16777215)}},lights:{ambientLightColor:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},
    pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new H(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},uvTransform:{value:new ma}}},
    Ga={merge:function(a){for(var b={},c=0;c<a.length;c++){var d=this.clone(a[c]),e;for(e in d)b[e]=d[e]}return b},clone:function(a){var b={},c;for(c in a){b[c]={};for(var d in a[c]){var e=a[c][d];e&&(e.isColor||e.isMatrix3||e.isMatrix4||e.isVector2||e.isVector3||e.isVector4||e.isTexture)?b[c][d]=e.clone():Array.isArray(e)?b[c][d]=e.slice():b[c][d]=e}}return b}},R={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n",
    alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n",
    aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"\nvec3 transformed = vec3( position );\n",beginnormal_vertex:"\nvec3 objectNormal = vec3( normal );\n",bsdfs:"float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat theta = acos( dot( N, V ) );\n\tvec2 uv = vec2(\n\t\tsqrt( saturate( roughness ) ),\n\t\tsaturate( theta / ( 0.5 * PI ) ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\n\tfloat b = 3.45068 + (4.18814 + y) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\n\treturn result;\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n",
    bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n",
    clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n",
    clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n",
    color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n",color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\n",
    cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n",
    defaultnormal_vertex:"vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n",
    emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n",encodings_fragment:"  gl_FragColor = linearToOutputTexel( gl_FragColor );\n",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n",
    envmap_fragment:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n",
    envmap_pars_fragment:"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n",
    envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n",envmap_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n",
    fog_vertex:"\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n",
    gradientmap_pars_fragment:"#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n",
    lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n",
    lights_pars:"uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltcMat;\tuniform sampler2D ltcMag;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n",
    lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n",
    lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n",
    lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tfloat norm = texture2D( ltcMag, uv ).a;\n\t\tvec4 t = texture2D( ltcMat, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3(   1,   0, t.y ),\n\t\t\tvec3(   0, t.z,   0 ),\n\t\t\tvec3( t.w,   0, t.x )\n\t\t);\n\t\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n",
    lights_template:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n",
    logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\tgl_Position.z *= gl_Position.w;\n\t#endif\n#endif\n",
    map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n",map_particle_fragment:"#ifdef USE_MAP\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n",map_particle_pars_fragment:"#ifdef USE_MAP\n\tuniform mat3 uvTransform;\n\tuniform sampler2D map;\n#endif\n",
    metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n",
    morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n",
    normal_fragment:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n",
    normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n",
    packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",
    premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n",project_vertex:"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n",dithering_fragment:"#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n",dithering_pars_fragment:"#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n",
    roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n",
    shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n",
    shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n",
    shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n",
    skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n",
    skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n",
    specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n",tonemapping_pars_fragment:"#ifndef saturate\n\t#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n",
    uv_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\n",
    uv_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif",
    uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n",
    cube_vert:"varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}\n",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n",
    depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n",
    distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n",
    distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n",
    equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n",equirect_vert:"varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n",
    linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
    linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n",
    meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
    meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n",
    meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
    meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
    meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
    meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
    meshphysical_frag:"#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
    meshphysical_vert:"#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
    normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n",
    normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n",
    points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",
    points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
    shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <fog_fragment>\n}\n",shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n"},
    tb={basic:{uniforms:Ga.merge([K.common,K.specularmap,K.envmap,K.aomap,K.lightmap,K.fog]),vertexShader:R.meshbasic_vert,fragmentShader:R.meshbasic_frag},lambert:{uniforms:Ga.merge([K.common,K.specularmap,K.envmap,K.aomap,K.lightmap,K.emissivemap,K.fog,K.lights,{emissive:{value:new H(0)}}]),vertexShader:R.meshlambert_vert,fragmentShader:R.meshlambert_frag},phong:{uniforms:Ga.merge([K.common,K.specularmap,K.envmap,K.aomap,K.lightmap,K.emissivemap,K.bumpmap,K.normalmap,K.displacementmap,K.gradientmap,
    K.fog,K.lights,{emissive:{value:new H(0)},specular:{value:new H(1118481)},shininess:{value:30}}]),vertexShader:R.meshphong_vert,fragmentShader:R.meshphong_frag},standard:{uniforms:Ga.merge([K.common,K.envmap,K.aomap,K.lightmap,K.emissivemap,K.bumpmap,K.normalmap,K.displacementmap,K.roughnessmap,K.metalnessmap,K.fog,K.lights,{emissive:{value:new H(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:R.meshphysical_vert,fragmentShader:R.meshphysical_frag},points:{uniforms:Ga.merge([K.points,
    K.fog]),vertexShader:R.points_vert,fragmentShader:R.points_frag},dashed:{uniforms:Ga.merge([K.common,K.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:R.linedashed_vert,fragmentShader:R.linedashed_frag},depth:{uniforms:Ga.merge([K.common,K.displacementmap]),vertexShader:R.depth_vert,fragmentShader:R.depth_frag},normal:{uniforms:Ga.merge([K.common,K.bumpmap,K.normalmap,K.displacementmap,{opacity:{value:1}}]),vertexShader:R.normal_vert,fragmentShader:R.normal_frag},cube:{uniforms:{tCube:{value:null},
    tFlip:{value:-1},opacity:{value:1}},vertexShader:R.cube_vert,fragmentShader:R.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:R.equirect_vert,fragmentShader:R.equirect_frag},distanceRGBA:{uniforms:Ga.merge([K.common,K.displacementmap,{referencePosition:{value:new p},nearDistance:{value:1},farDistance:{value:1E3}}]),vertexShader:R.distanceRGBA_vert,fragmentShader:R.distanceRGBA_frag},shadow:{uniforms:Ga.merge([K.lights,K.fog,{color:{value:new H(0)},opacity:{value:1}}]),vertexShader:R.shadow_vert,
    fragmentShader:R.shadow_frag}};tb.physical={uniforms:Ga.merge([tb.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:R.meshphysical_vert,fragmentShader:R.meshphysical_frag};Object.assign(od.prototype,{set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){this.makeEmpty();for(var b=0,c=a.length;b<c;b++)this.expandByPoint(a[b]);return this},setFromCenterAndSize:function(){var a=new D;return function(b,c){c=a.copy(c).multiplyScalar(.5);
    this.min.copy(b).sub(c);this.max.copy(b).add(c);return this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=Infinity;this.max.x=this.max.y=-Infinity;return this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(a){a=a||new D;return this.isEmpty()?a.set(0,0):a.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(a){a=
    a||new D;return this.isEmpty()?a.set(0,0):a.subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=
    this.max.y},getParameter:function(a,b){return(b||new D).set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y?!1:!0},clampPoint:function(a,b){return(b||new D).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new D;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),intersect:function(a){this.min.max(a.min);
    this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)}});tc.prototype=Object.create(U.prototype);tc.prototype.constructor=tc;var ag=0;P.prototype=Object.assign(Object.create(za.prototype),{constructor:P,isMaterial:!0,onBeforeCompile:function(){},setValues:function(a){if(void 0!==a)for(var b in a){var c=a[b];if(void 0===
    c)console.warn("THREE.Material: '"+b+"' parameter is undefined.");else if("shading"===b)console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===c?!0:!1;else{var d=this[b];void 0===d?console.warn("THREE."+this.type+": '"+b+"' is not a property of this material."):d&&d.isColor?d.set(c):d&&d.isVector3&&c&&c.isVector3?d.copy(c):this[b]="overdraw"===b?Number(c):c}}},toJSON:function(a){function b(a){var b=[],c;for(c in a){var d=a[c];delete d.metadata;
    b.push(d)}return b}var c=void 0===a||"string"===typeof a;c&&(a={textures:{},images:{}});var d={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};d.uuid=this.uuid;d.type=this.type;""!==this.name&&(d.name=this.name);this.color&&this.color.isColor&&(d.color=this.color.getHex());void 0!==this.roughness&&(d.roughness=this.roughness);void 0!==this.metalness&&(d.metalness=this.metalness);this.emissive&&this.emissive.isColor&&(d.emissive=this.emissive.getHex());1!==this.emissiveIntensity&&
    (d.emissiveIntensity=this.emissiveIntensity);this.specular&&this.specular.isColor&&(d.specular=this.specular.getHex());void 0!==this.shininess&&(d.shininess=this.shininess);void 0!==this.clearCoat&&(d.clearCoat=this.clearCoat);void 0!==this.clearCoatRoughness&&(d.clearCoatRoughness=this.clearCoatRoughness);this.map&&this.map.isTexture&&(d.map=this.map.toJSON(a).uuid);this.alphaMap&&this.alphaMap.isTexture&&(d.alphaMap=this.alphaMap.toJSON(a).uuid);this.lightMap&&this.lightMap.isTexture&&(d.lightMap=
    this.lightMap.toJSON(a).uuid);this.bumpMap&&this.bumpMap.isTexture&&(d.bumpMap=this.bumpMap.toJSON(a).uuid,d.bumpScale=this.bumpScale);this.normalMap&&this.normalMap.isTexture&&(d.normalMap=this.normalMap.toJSON(a).uuid,d.normalScale=this.normalScale.toArray());this.displacementMap&&this.displacementMap.isTexture&&(d.displacementMap=this.displacementMap.toJSON(a).uuid,d.displacementScale=this.displacementScale,d.displacementBias=this.displacementBias);this.roughnessMap&&this.roughnessMap.isTexture&&
    (d.roughnessMap=this.roughnessMap.toJSON(a).uuid);this.metalnessMap&&this.metalnessMap.isTexture&&(d.metalnessMap=this.metalnessMap.toJSON(a).uuid);this.emissiveMap&&this.emissiveMap.isTexture&&(d.emissiveMap=this.emissiveMap.toJSON(a).uuid);this.specularMap&&this.specularMap.isTexture&&(d.specularMap=this.specularMap.toJSON(a).uuid);this.envMap&&this.envMap.isTexture&&(d.envMap=this.envMap.toJSON(a).uuid,d.reflectivity=this.reflectivity);this.gradientMap&&this.gradientMap.isTexture&&(d.gradientMap=
    this.gradientMap.toJSON(a).uuid);void 0!==this.size&&(d.size=this.size);void 0!==this.sizeAttenuation&&(d.sizeAttenuation=this.sizeAttenuation);1!==this.blending&&(d.blending=this.blending);!0===this.flatShading&&(d.flatShading=this.flatShading);0!==this.side&&(d.side=this.side);0!==this.vertexColors&&(d.vertexColors=this.vertexColors);1>this.opacity&&(d.opacity=this.opacity);!0===this.transparent&&(d.transparent=this.transparent);d.depthFunc=this.depthFunc;d.depthTest=this.depthTest;d.depthWrite=
    this.depthWrite;0!==this.rotation&&(d.rotation=this.rotation);1!==this.linewidth&&(d.linewidth=this.linewidth);void 0!==this.dashSize&&(d.dashSize=this.dashSize);void 0!==this.gapSize&&(d.gapSize=this.gapSize);void 0!==this.scale&&(d.scale=this.scale);!0===this.dithering&&(d.dithering=!0);0<this.alphaTest&&(d.alphaTest=this.alphaTest);!0===this.premultipliedAlpha&&(d.premultipliedAlpha=this.premultipliedAlpha);!0===this.wireframe&&(d.wireframe=this.wireframe);1<this.wireframeLinewidth&&(d.wireframeLinewidth=
    this.wireframeLinewidth);"round"!==this.wireframeLinecap&&(d.wireframeLinecap=this.wireframeLinecap);"round"!==this.wireframeLinejoin&&(d.wireframeLinejoin=this.wireframeLinejoin);!0===this.morphTargets&&(d.morphTargets=!0);!0===this.skinning&&(d.skinning=!0);!1===this.visible&&(d.visible=!1);"{}"!==JSON.stringify(this.userData)&&(d.userData=this.userData);c&&(c=b(a.textures),a=b(a.images),0<c.length&&(d.textures=c),0<a.length&&(d.images=a));return d},clone:function(){return(new this.constructor).copy(this)},
    copy:function(a){this.name=a.name;this.fog=a.fog;this.lights=a.lights;this.blending=a.blending;this.side=a.side;this.flatShading=a.flatShading;this.vertexColors=a.vertexColors;this.opacity=a.opacity;this.transparent=a.transparent;this.blendSrc=a.blendSrc;this.blendDst=a.blendDst;this.blendEquation=a.blendEquation;this.blendSrcAlpha=a.blendSrcAlpha;this.blendDstAlpha=a.blendDstAlpha;this.blendEquationAlpha=a.blendEquationAlpha;this.depthFunc=a.depthFunc;this.depthTest=a.depthTest;this.depthWrite=a.depthWrite;
    this.colorWrite=a.colorWrite;this.precision=a.precision;this.polygonOffset=a.polygonOffset;this.polygonOffsetFactor=a.polygonOffsetFactor;this.polygonOffsetUnits=a.polygonOffsetUnits;this.dithering=a.dithering;this.alphaTest=a.alphaTest;this.premultipliedAlpha=a.premultipliedAlpha;this.overdraw=a.overdraw;this.visible=a.visible;this.userData=JSON.parse(JSON.stringify(a.userData));this.clipShadows=a.clipShadows;this.clipIntersection=a.clipIntersection;a=a.clippingPlanes;var b=null;if(null!==a)for(var c=
    a.length,b=Array(c),d=0;d!==c;++d)b[d]=a[d].clone();this.clippingPlanes=b;return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});eb.prototype=Object.create(P.prototype);eb.prototype.constructor=eb;eb.prototype.isMeshDepthMaterial=!0;eb.prototype.copy=function(a){P.prototype.copy.call(this,a);this.depthPacking=a.depthPacking;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.map=a.map;this.alphaMap=a.alphaMap;this.displacementMap=a.displacementMap;this.displacementScale=
    a.displacementScale;this.displacementBias=a.displacementBias;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;return this};fb.prototype=Object.create(P.prototype);fb.prototype.constructor=fb;fb.prototype.isMeshDistanceMaterial=!0;fb.prototype.copy=function(a){P.prototype.copy.call(this,a);this.referencePosition.copy(a.referencePosition);this.nearDistance=a.nearDistance;this.farDistance=a.farDistance;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.map=a.map;this.alphaMap=
    a.alphaMap;this.displacementMap=a.displacementMap;this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;return this};Object.assign(Xa.prototype,{isBox3:!0,set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromArray:function(a){for(var b=Infinity,c=Infinity,d=Infinity,e=-Infinity,f=-Infinity,g=-Infinity,h=0,k=a.length;h<k;h+=3){var m=a[h],q=a[h+1],l=a[h+2];m<b&&(b=m);q<c&&(c=q);l<d&&(d=l);m>e&&(e=m);q>f&&(f=q);l>g&&(g=l)}this.min.set(b,c,d);this.max.set(e,
    f,g);return this},setFromBufferAttribute:function(a){for(var b=Infinity,c=Infinity,d=Infinity,e=-Infinity,f=-Infinity,g=-Infinity,h=0,k=a.count;h<k;h++){var m=a.getX(h),q=a.getY(h),l=a.getZ(h);m<b&&(b=m);q<c&&(c=q);l<d&&(d=l);m>e&&(e=m);q>f&&(f=q);l>g&&(g=l)}this.min.set(b,c,d);this.max.set(e,f,g);return this},setFromPoints:function(a){this.makeEmpty();for(var b=0,c=a.length;b<c;b++)this.expandByPoint(a[b]);return this},setFromCenterAndSize:function(){var a=new p;return function(b,c){c=a.copy(c).multiplyScalar(.5);
    this.min.copy(b).sub(c);this.max.copy(b).add(c);return this}}(),setFromObject:function(a){this.makeEmpty();return this.expandByObject(a)},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(a){a=
    a||new p;return this.isEmpty()?a.set(0,0,0):a.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(a){a=a||new p;return this.isEmpty()?a.set(0,0,0):a.subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},expandByObject:function(){function a(a){var f=a.geometry;if(void 0!==f)if(f.isGeometry)for(f=
    f.vertices,c=0,d=f.length;c<d;c++)e.copy(f[c]),e.applyMatrix4(a.matrixWorld),b.expandByPoint(e);else if(f.isBufferGeometry&&(f=f.attributes.position,void 0!==f))for(c=0,d=f.count;c<d;c++)e.fromBufferAttribute(f,c).applyMatrix4(a.matrixWorld),b.expandByPoint(e)}var b,c,d,e=new p;return function(c){b=this;c.updateMatrixWorld(!0);c.traverse(a);return this}}(),containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y||a.z<this.min.z||a.z>this.max.z?!1:!0},containsBox:function(a){return this.min.x<=
    a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y&&this.min.z<=a.min.z&&a.max.z<=this.max.z},getParameter:function(a,b){return(b||new p).set((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y),(a.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y||a.max.z<this.min.z||a.min.z>this.max.z?!1:!0},intersectsSphere:function(){var a=new p;return function(b){this.clampPoint(b.center,
    a);return a.distanceToSquared(b.center)<=b.radius*b.radius}}(),intersectsPlane:function(a){if(0<a.normal.x){var b=a.normal.x*this.min.x;var c=a.normal.x*this.max.x}else b=a.normal.x*this.max.x,c=a.normal.x*this.min.x;0<a.normal.y?(b+=a.normal.y*this.min.y,c+=a.normal.y*this.max.y):(b+=a.normal.y*this.max.y,c+=a.normal.y*this.min.y);0<a.normal.z?(b+=a.normal.z*this.min.z,c+=a.normal.z*this.max.z):(b+=a.normal.z*this.max.z,c+=a.normal.z*this.min.z);return b<=a.constant&&c>=a.constant},clampPoint:function(a,
    b){return(b||new p).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new p;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),getBoundingSphere:function(){var a=new p;return function(b){b=b||new Ia;this.getCenter(b.center);b.radius=.5*this.getSize(a).length();return b}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);this.isEmpty()&&this.makeEmpty();return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},applyMatrix4:function(){var a=
    [new p,new p,new p,new p,new p,new p,new p,new p];return function(b){if(this.isEmpty())return this;a[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(b);a[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(b);a[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(b);a[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(b);a[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(b);a[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(b);a[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(b);
    a[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(b);this.setFromPoints(a);return this}}(),translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)}});Object.assign(Ia.prototype,{set:function(a,b){this.center.copy(a);this.radius=b;return this},setFromPoints:function(){var a=new Xa;return function(b,c){var d=this.center;void 0!==c?d.copy(c):a.setFromPoints(b).getCenter(d);for(var e=c=0,f=b.length;e<f;e++)c=Math.max(c,
    d.distanceToSquared(b[e]));this.radius=Math.sqrt(c);return this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.center.copy(a.center);this.radius=a.radius;return this},empty:function(){return 0>=this.radius},containsPoint:function(a){return a.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(a){return a.distanceTo(this.center)-this.radius},intersectsSphere:function(a){var b=this.radius+a.radius;return a.center.distanceToSquared(this.center)<=
    b*b},intersectsBox:function(a){return a.intersectsSphere(this)},intersectsPlane:function(a){return Math.abs(a.distanceToPoint(this.center))<=this.radius},clampPoint:function(a,b){var c=this.center.distanceToSquared(a);b=b||new p;b.copy(a);c>this.radius*this.radius&&(b.sub(this.center).normalize(),b.multiplyScalar(this.radius).add(this.center));return b},getBoundingBox:function(a){a=a||new Xa;a.set(this.center,this.center);a.expandByScalar(this.radius);return a},applyMatrix4:function(a){this.center.applyMatrix4(a);
    this.radius*=a.getMaxScaleOnAxis();return this},translate:function(a){this.center.add(a);return this},equals:function(a){return a.center.equals(this.center)&&a.radius===this.radius}});Object.assign(Ea.prototype,{set:function(a,b){this.normal.copy(a);this.constant=b;return this},setComponents:function(a,b,c,d){this.normal.set(a,b,c);this.constant=d;return this},setFromNormalAndCoplanarPoint:function(a,b){this.normal.copy(a);this.constant=-b.dot(this.normal);return this},setFromCoplanarPoints:function(){var a=
    new p,b=new p;return function(c,d,e){d=a.subVectors(e,d).cross(b.subVectors(c,d)).normalize();this.setFromNormalAndCoplanarPoint(d,c);return this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.normal.copy(a.normal);this.constant=a.constant;return this},normalize:function(){var a=1/this.normal.length();this.normal.multiplyScalar(a);this.constant*=a;return this},negate:function(){this.constant*=-1;this.normal.negate();return this},distanceToPoint:function(a){return this.normal.dot(a)+
    this.constant},distanceToSphere:function(a){return this.distanceToPoint(a.center)-a.radius},projectPoint:function(a,b){return(b||new p).copy(this.normal).multiplyScalar(-this.distanceToPoint(a)).add(a)},intersectLine:function(){var a=new p;return function(b,c){c=c||new p;var d=b.delta(a),e=this.normal.dot(d);if(0===e){if(0===this.distanceToPoint(b.start))return c.copy(b.start)}else if(e=-(b.start.dot(this.normal)+this.constant)/e,!(0>e||1<e))return c.copy(d).multiplyScalar(e).add(b.start)}}(),intersectsLine:function(a){var b=
    this.distanceToPoint(a.start);a=this.distanceToPoint(a.end);return 0>b&&0<a||0>a&&0<b},intersectsBox:function(a){return a.intersectsPlane(this)},intersectsSphere:function(a){return a.intersectsPlane(this)},coplanarPoint:function(a){return(a||new p).copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var a=new p,b=new ma;return function(c,d){d=d||b.getNormalMatrix(c);c=this.coplanarPoint(a).applyMatrix4(c);d=this.normal.applyMatrix3(d).normalize();this.constant=-c.dot(d);return this}}(),
    translate:function(a){this.constant-=a.dot(this.normal);return this},equals:function(a){return a.normal.equals(this.normal)&&a.constant===this.constant}});Object.assign(rd.prototype,{set:function(a,b,c,d,e,f){var g=this.planes;g[0].copy(a);g[1].copy(b);g[2].copy(c);g[3].copy(d);g[4].copy(e);g[5].copy(f);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){for(var b=this.planes,c=0;6>c;c++)b[c].copy(a.planes[c]);return this},setFromMatrix:function(a){var b=this.planes,
    c=a.elements;a=c[0];var d=c[1],e=c[2],f=c[3],g=c[4],h=c[5],k=c[6],m=c[7],q=c[8],l=c[9],p=c[10],r=c[11],t=c[12],v=c[13],w=c[14],c=c[15];b[0].setComponents(f-a,m-g,r-q,c-t).normalize();b[1].setComponents(f+a,m+g,r+q,c+t).normalize();b[2].setComponents(f+d,m+h,r+l,c+v).normalize();b[3].setComponents(f-d,m-h,r-l,c-v).normalize();b[4].setComponents(f-e,m-k,r-p,c-w).normalize();b[5].setComponents(f+e,m+k,r+p,c+w).normalize();return this},intersectsObject:function(){var a=new Ia;return function(b){var c=
    b.geometry;null===c.boundingSphere&&c.computeBoundingSphere();a.copy(c.boundingSphere).applyMatrix4(b.matrixWorld);return this.intersectsSphere(a)}}(),intersectsSprite:function(){var a=new Ia;return function(b){a.center.set(0,0,0);a.radius=.7071067811865476;a.applyMatrix4(b.matrixWorld);return this.intersectsSphere(a)}}(),intersectsSphere:function(a){var b=this.planes,c=a.center;a=-a.radius;for(var d=0;6>d;d++)if(b[d].distanceToPoint(c)<a)return!1;return!0},intersectsBox:function(){var a=new p,b=
    new p;return function(c){for(var d=this.planes,e=0;6>e;e++){var f=d[e];a.x=0<f.normal.x?c.min.x:c.max.x;b.x=0<f.normal.x?c.max.x:c.min.x;a.y=0<f.normal.y?c.min.y:c.max.y;b.y=0<f.normal.y?c.max.y:c.min.y;a.z=0<f.normal.z?c.min.z:c.max.z;b.z=0<f.normal.z?c.max.z:c.min.z;var g=f.distanceToPoint(a),f=f.distanceToPoint(b);if(0>g&&0>f)return!1}return!0}}(),containsPoint:function(a){for(var b=this.planes,c=0;6>c;c++)if(0>b[c].distanceToPoint(a))return!1;return!0}});gb.RotationOrders="XYZ YZX ZXY XZY YXZ ZYX".split(" ");
    gb.DefaultOrder="XYZ";Object.defineProperties(gb.prototype,{x:{get:function(){return this._x},set:function(a){this._x=a;this.onChangeCallback()}},y:{get:function(){return this._y},set:function(a){this._y=a;this.onChangeCallback()}},z:{get:function(){return this._z},set:function(a){this._z=a;this.onChangeCallback()}},order:{get:function(){return this._order},set:function(a){this._order=a;this.onChangeCallback()}}});Object.assign(gb.prototype,{isEuler:!0,set:function(a,b,c,d){this._x=a;this._y=b;this._z=
    c;this._order=d||this._order;this.onChangeCallback();return this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(a){this._x=a._x;this._y=a._y;this._z=a._z;this._order=a._order;this.onChangeCallback();return this},setFromRotationMatrix:function(a,b,c){var d=Q.clamp,e=a.elements;a=e[0];var f=e[4],g=e[8],h=e[1],k=e[5],m=e[9],l=e[2],n=e[6],e=e[10];b=b||this._order;"XYZ"===b?(this._y=Math.asin(d(g,-1,1)),.99999>Math.abs(g)?(this._x=Math.atan2(-m,e),this._z=
    Math.atan2(-f,a)):(this._x=Math.atan2(n,k),this._z=0)):"YXZ"===b?(this._x=Math.asin(-d(m,-1,1)),.99999>Math.abs(m)?(this._y=Math.atan2(g,e),this._z=Math.atan2(h,k)):(this._y=Math.atan2(-l,a),this._z=0)):"ZXY"===b?(this._x=Math.asin(d(n,-1,1)),.99999>Math.abs(n)?(this._y=Math.atan2(-l,e),this._z=Math.atan2(-f,k)):(this._y=0,this._z=Math.atan2(h,a))):"ZYX"===b?(this._y=Math.asin(-d(l,-1,1)),.99999>Math.abs(l)?(this._x=Math.atan2(n,e),this._z=Math.atan2(h,a)):(this._x=0,this._z=Math.atan2(-f,k))):"YZX"===
    b?(this._z=Math.asin(d(h,-1,1)),.99999>Math.abs(h)?(this._x=Math.atan2(-m,k),this._y=Math.atan2(-l,a)):(this._x=0,this._y=Math.atan2(g,e))):"XZY"===b?(this._z=Math.asin(-d(f,-1,1)),.99999>Math.abs(f)?(this._x=Math.atan2(n,k),this._y=Math.atan2(g,a)):(this._x=Math.atan2(-m,e),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+b);this._order=b;if(!1!==c)this.onChangeCallback();return this},setFromQuaternion:function(){var a=new O;return function(b,c,d){a.makeRotationFromQuaternion(b);
    return this.setFromRotationMatrix(a,c,d)}}(),setFromVector3:function(a,b){return this.set(a.x,a.y,a.z,b||this._order)},reorder:function(){var a=new ha;return function(b){a.setFromEuler(this);return this.setFromQuaternion(a,b)}}(),equals:function(a){return a._x===this._x&&a._y===this._y&&a._z===this._z&&a._order===this._order},fromArray:function(a){this._x=a[0];this._y=a[1];this._z=a[2];void 0!==a[3]&&(this._order=a[3]);this.onChangeCallback();return this},toArray:function(a,b){void 0===a&&(a=[]);
    void 0===b&&(b=0);a[b]=this._x;a[b+1]=this._y;a[b+2]=this._z;a[b+3]=this._order;return a},toVector3:function(a){return a?a.set(this._x,this._y,this._z):new p(this._x,this._y,this._z)},onChange:function(a){this.onChangeCallback=a;return this},onChangeCallback:function(){}});Object.assign(Wd.prototype,{set:function(a){this.mask=1<<a|0},enable:function(a){this.mask=this.mask|1<<a|0},toggle:function(a){this.mask^=1<<a|0},disable:function(a){this.mask&=~(1<<a|0)},test:function(a){return 0!==(this.mask&
    a.mask)}});var cg=0;x.DefaultUp=new p(0,1,0);x.DefaultMatrixAutoUpdate=!0;x.prototype=Object.assign(Object.create(za.prototype),{constructor:x,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(a){this.matrix.multiplyMatrices(a,this.matrix);this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(a){this.quaternion.premultiply(a);return this},setRotationFromAxisAngle:function(a,b){this.quaternion.setFromAxisAngle(a,b)},setRotationFromEuler:function(a){this.quaternion.setFromEuler(a,
    !0)},setRotationFromMatrix:function(a){this.quaternion.setFromRotationMatrix(a)},setRotationFromQuaternion:function(a){this.quaternion.copy(a)},rotateOnAxis:function(){var a=new ha;return function(b,c){a.setFromAxisAngle(b,c);this.quaternion.multiply(a);return this}}(),rotateOnWorldAxis:function(){var a=new ha;return function(b,c){a.setFromAxisAngle(b,c);this.quaternion.premultiply(a);return this}}(),rotateX:function(){var a=new p(1,0,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateY:function(){var a=
    new p(0,1,0);return function(b){return this.rotateOnAxis(a,b)}}(),rotateZ:function(){var a=new p(0,0,1);return function(b){return this.rotateOnAxis(a,b)}}(),translateOnAxis:function(){var a=new p;return function(b,c){a.copy(b).applyQuaternion(this.quaternion);this.position.add(a.multiplyScalar(c));return this}}(),translateX:function(){var a=new p(1,0,0);return function(b){return this.translateOnAxis(a,b)}}(),translateY:function(){var a=new p(0,1,0);return function(b){return this.translateOnAxis(a,
    b)}}(),translateZ:function(){var a=new p(0,0,1);return function(b){return this.translateOnAxis(a,b)}}(),localToWorld:function(a){return a.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var a=new O;return function(b){return b.applyMatrix4(a.getInverse(this.matrixWorld))}}(),lookAt:function(){var a=new O,b=new p;return function(c,d,e){c.isVector3?b.copy(c):b.set(c,d,e);this.isCamera?a.lookAt(this.position,b,this.up):a.lookAt(b,this.position,this.up);this.quaternion.setFromRotationMatrix(a)}}(),
    add:function(a){if(1<arguments.length){for(var b=0;b<arguments.length;b++)this.add(arguments[b]);return this}if(a===this)return console.error("THREE.Object3D.add: object can't be added as a child of itself.",a),this;a&&a.isObject3D?(null!==a.parent&&a.parent.remove(a),a.parent=this,a.dispatchEvent({type:"added"}),this.children.push(a)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",a);return this},remove:function(a){if(1<arguments.length){for(var b=0;b<arguments.length;b++)this.remove(arguments[b]);
    return this}b=this.children.indexOf(a);-1!==b&&(a.parent=null,a.dispatchEvent({type:"removed"}),this.children.splice(b,1));return this},getObjectById:function(a){return this.getObjectByProperty("id",a)},getObjectByName:function(a){return this.getObjectByProperty("name",a)},getObjectByProperty:function(a,b){if(this[a]===b)return this;for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c].getObjectByProperty(a,b);if(void 0!==e)return e}},getWorldPosition:function(a){a=a||new p;this.updateMatrixWorld(!0);
    return a.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(){var a=new p,b=new p;return function(c){c=c||new ha;this.updateMatrixWorld(!0);this.matrixWorld.decompose(a,c,b);return c}}(),getWorldRotation:function(){var a=new ha;return function(b){b=b||new gb;this.getWorldQuaternion(a);return b.setFromQuaternion(a,this.rotation.order,!1)}}(),getWorldScale:function(){var a=new p,b=new ha;return function(c){c=c||new p;this.updateMatrixWorld(!0);this.matrixWorld.decompose(a,b,c);return c}}(),
    getWorldDirection:function(){var a=new ha;return function(b){b=b||new p;this.getWorldQuaternion(a);return b.set(0,0,1).applyQuaternion(a)}}(),raycast:function(){},traverse:function(a){a(this);for(var b=this.children,c=0,d=b.length;c<d;c++)b[c].traverse(a)},traverseVisible:function(a){if(!1!==this.visible){a(this);for(var b=this.children,c=0,d=b.length;c<d;c++)b[c].traverseVisible(a)}},traverseAncestors:function(a){var b=this.parent;null!==b&&(a(b),b.traverseAncestors(a))},updateMatrix:function(){this.matrix.compose(this.position,
    this.quaternion,this.scale);this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=this.children,c=0,d=b.length;c<d;c++)b[c].updateMatrixWorld(a)},toJSON:function(a){function b(b,c){void 0===b[c.uuid]&&(b[c.uuid]=c.toJSON(a));return c.uuid}function c(a){var b=
    [],c;for(c in a){var d=a[c];delete d.metadata;b.push(d)}return b}var d=void 0===a||"string"===typeof a,e={};d&&(a={geometries:{},materials:{},textures:{},images:{},shapes:{}},e.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var f={};f.uuid=this.uuid;f.type=this.type;""!==this.name&&(f.name=this.name);!0===this.castShadow&&(f.castShadow=!0);!0===this.receiveShadow&&(f.receiveShadow=!0);!1===this.visible&&(f.visible=!1);"{}"!==JSON.stringify(this.userData)&&(f.userData=this.userData);
    f.matrix=this.matrix.toArray();if(void 0!==this.geometry){f.geometry=b(a.geometries,this.geometry);var g=this.geometry.parameters;if(void 0!==g&&void 0!==g.shapes)if(g=g.shapes,Array.isArray(g))for(var h=0,k=g.length;h<k;h++)b(a.shapes,g[h]);else b(a.shapes,g)}if(void 0!==this.material)if(Array.isArray(this.material)){g=[];h=0;for(k=this.material.length;h<k;h++)g.push(b(a.materials,this.material[h]));f.material=g}else f.material=b(a.materials,this.material);if(0<this.children.length)for(f.children=
    [],h=0;h<this.children.length;h++)f.children.push(this.children[h].toJSON(a).object);if(d){var d=c(a.geometries),h=c(a.materials),k=c(a.textures),m=c(a.images);g=c(a.shapes);0<d.length&&(e.geometries=d);0<h.length&&(e.materials=h);0<k.length&&(e.textures=k);0<m.length&&(e.images=m);0<g.length&&(e.shapes=g)}e.object=f;return e},clone:function(a){return(new this.constructor).copy(this,a)},copy:function(a,b){void 0===b&&(b=!0);this.name=a.name;this.up.copy(a.up);this.position.copy(a.position);this.quaternion.copy(a.quaternion);
    this.scale.copy(a.scale);this.matrix.copy(a.matrix);this.matrixWorld.copy(a.matrixWorld);this.matrixAutoUpdate=a.matrixAutoUpdate;this.matrixWorldNeedsUpdate=a.matrixWorldNeedsUpdate;this.layers.mask=a.layers.mask;this.visible=a.visible;this.castShadow=a.castShadow;this.receiveShadow=a.receiveShadow;this.frustumCulled=a.frustumCulled;this.renderOrder=a.renderOrder;this.userData=JSON.parse(JSON.stringify(a.userData));if(!0===b)for(b=0;b<a.children.length;b++)this.add(a.children[b].clone());return this}});
    Ta.prototype=Object.assign(Object.create(x.prototype),{constructor:Ta,isCamera:!0,copy:function(a,b){x.prototype.copy.call(this,a,b);this.matrixWorldInverse.copy(a.matrixWorldInverse);this.projectionMatrix.copy(a.projectionMatrix);return this},getWorldDirection:function(){var a=new ha;return function(b){b=b||new p;this.getWorldQuaternion(a);return b.set(0,0,-1).applyQuaternion(a)}}(),updateMatrixWorld:function(a){x.prototype.updateMatrixWorld.call(this,a);this.matrixWorldInverse.getInverse(this.matrixWorld)},
    clone:function(){return(new this.constructor).copy(this)}});Lb.prototype=Object.assign(Object.create(Ta.prototype),{constructor:Lb,isOrthographicCamera:!0,copy:function(a,b){Ta.prototype.copy.call(this,a,b);this.left=a.left;this.right=a.right;this.top=a.top;this.bottom=a.bottom;this.near=a.near;this.far=a.far;this.zoom=a.zoom;this.view=null===a.view?null:Object.assign({},a.view);return this},setViewOffset:function(a,b,c,d,e,f){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,
    offsetY:0,width:1,height:1});this.view.enabled=!0;this.view.fullWidth=a;this.view.fullHeight=b;this.view.offsetX=c;this.view.offsetY=d;this.view.width=e;this.view.height=f;this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1);this.updateProjectionMatrix()},updateProjectionMatrix:function(){var a=(this.right-this.left)/(2*this.zoom),b=(this.top-this.bottom)/(2*this.zoom),c=(this.right+this.left)/2,d=(this.top+this.bottom)/2,e=c-a,c=c+a,a=d+b,b=d-b;if(null!==
    this.view&&this.view.enabled)var c=this.zoom/(this.view.width/this.view.fullWidth),b=this.zoom/(this.view.height/this.view.fullHeight),f=(this.right-this.left)/this.view.width,d=(this.top-this.bottom)/this.view.height,e=e+this.view.offsetX/c*f,c=e+this.view.width/c*f,a=a-this.view.offsetY/b*d,b=a-this.view.height/b*d;this.projectionMatrix.makeOrthographic(e,c,a,b,this.near,this.far)},toJSON:function(a){a=x.prototype.toJSON.call(this,a);a.object.zoom=this.zoom;a.object.left=this.left;a.object.right=
    this.right;a.object.top=this.top;a.object.bottom=this.bottom;a.object.near=this.near;a.object.far=this.far;null!==this.view&&(a.object.view=Object.assign({},this.view));return a}});Object.assign(Ya.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.a=a.a;this.b=a.b;this.c=a.c;this.normal.copy(a.normal);this.color.copy(a.color);this.materialIndex=a.materialIndex;for(var b=0,c=a.vertexNormals.length;b<c;b++)this.vertexNormals[b]=a.vertexNormals[b].clone();b=0;
    for(c=a.vertexColors.length;b<c;b++)this.vertexColors[b]=a.vertexColors[b].clone();return this}});var dg=0;L.prototype=Object.assign(Object.create(za.prototype),{constructor:L,isGeometry:!0,applyMatrix:function(a){for(var b=(new ma).getNormalMatrix(a),c=0,d=this.vertices.length;c<d;c++)this.vertices[c].applyMatrix4(a);c=0;for(d=this.faces.length;c<d;c++){a=this.faces[c];a.normal.applyMatrix3(b).normalize();for(var e=0,f=a.vertexNormals.length;e<f;e++)a.vertexNormals[e].applyMatrix3(b).normalize()}null!==
    this.boundingBox&&this.computeBoundingBox();null!==this.boundingSphere&&this.computeBoundingSphere();this.normalsNeedUpdate=this.verticesNeedUpdate=!0;return this},rotateX:function(){var a=new O;return function(b){a.makeRotationX(b);this.applyMatrix(a);return this}}(),rotateY:function(){var a=new O;return function(b){a.makeRotationY(b);this.applyMatrix(a);return this}}(),rotateZ:function(){var a=new O;return function(b){a.makeRotationZ(b);this.applyMatrix(a);return this}}(),translate:function(){var a=
    new O;return function(b,c,d){a.makeTranslation(b,c,d);this.applyMatrix(a);return this}}(),scale:function(){var a=new O;return function(b,c,d){a.makeScale(b,c,d);this.applyMatrix(a);return this}}(),lookAt:function(){var a=new x;return function(b){a.lookAt(b);a.updateMatrix();this.applyMatrix(a.matrix)}}(),fromBufferGeometry:function(a){function b(a,b,d,e){var f=void 0!==g?[l[a].clone(),l[b].clone(),l[d].clone()]:[],q=void 0!==h?[c.colors[a].clone(),c.colors[b].clone(),c.colors[d].clone()]:[];e=new Ya(a,
    b,d,f,q,e);c.faces.push(e);void 0!==k&&c.faceVertexUvs[0].push([n[a].clone(),n[b].clone(),n[d].clone()]);void 0!==m&&c.faceVertexUvs[1].push([u[a].clone(),u[b].clone(),u[d].clone()])}var c=this,d=null!==a.index?a.index.array:void 0,e=a.attributes,f=e.position.array,g=void 0!==e.normal?e.normal.array:void 0,h=void 0!==e.color?e.color.array:void 0,k=void 0!==e.uv?e.uv.array:void 0,m=void 0!==e.uv2?e.uv2.array:void 0;void 0!==m&&(this.faceVertexUvs[1]=[]);for(var l=[],n=[],u=[],r=e=0;e<f.length;e+=3,
    r+=2)c.vertices.push(new p(f[e],f[e+1],f[e+2])),void 0!==g&&l.push(new p(g[e],g[e+1],g[e+2])),void 0!==h&&c.colors.push(new H(h[e],h[e+1],h[e+2])),void 0!==k&&n.push(new D(k[r],k[r+1])),void 0!==m&&u.push(new D(m[r],m[r+1]));var t=a.groups;if(0<t.length)for(e=0;e<t.length;e++)for(var f=t[e],v=f.start,w=f.count,r=v,v=v+w;r<v;r+=3)void 0!==d?b(d[r],d[r+1],d[r+2],f.materialIndex):b(r,r+1,r+2,f.materialIndex);else if(void 0!==d)for(e=0;e<d.length;e+=3)b(d[e],d[e+1],d[e+2]);else for(e=0;e<f.length/3;e+=
    3)b(e,e+1,e+2);this.computeFaceNormals();null!==a.boundingBox&&(this.boundingBox=a.boundingBox.clone());null!==a.boundingSphere&&(this.boundingSphere=a.boundingSphere.clone());return this},center:function(){this.computeBoundingBox();var a=this.boundingBox.getCenter().negate();this.translate(a.x,a.y,a.z);return a},normalize:function(){this.computeBoundingSphere();var a=this.boundingSphere.center,b=this.boundingSphere.radius,b=0===b?1:1/b,c=new O;c.set(b,0,0,-b*a.x,0,b,0,-b*a.y,0,0,b,-b*a.z,0,0,0,1);
    this.applyMatrix(c);return this},computeFaceNormals:function(){for(var a=new p,b=new p,c=0,d=this.faces.length;c<d;c++){var e=this.faces[c],f=this.vertices[e.a],g=this.vertices[e.b];a.subVectors(this.vertices[e.c],g);b.subVectors(f,g);a.cross(b);a.normalize();e.normal.copy(a)}},computeVertexNormals:function(a){void 0===a&&(a=!0);var b;var c=Array(this.vertices.length);var d=0;for(b=this.vertices.length;d<b;d++)c[d]=new p;if(a){var e=new p,f=new p;a=0;for(d=this.faces.length;a<d;a++){b=this.faces[a];
    var g=this.vertices[b.a];var h=this.vertices[b.b];var k=this.vertices[b.c];e.subVectors(k,h);f.subVectors(g,h);e.cross(f);c[b.a].add(e);c[b.b].add(e);c[b.c].add(e)}}else for(this.computeFaceNormals(),a=0,d=this.faces.length;a<d;a++)b=this.faces[a],c[b.a].add(b.normal),c[b.b].add(b.normal),c[b.c].add(b.normal);d=0;for(b=this.vertices.length;d<b;d++)c[d].normalize();a=0;for(d=this.faces.length;a<d;a++)b=this.faces[a],g=b.vertexNormals,3===g.length?(g[0].copy(c[b.a]),g[1].copy(c[b.b]),g[2].copy(c[b.c])):
    (g[0]=c[b.a].clone(),g[1]=c[b.b].clone(),g[2]=c[b.c].clone());0<this.faces.length&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var a;this.computeFaceNormals();var b=0;for(a=this.faces.length;b<a;b++){var c=this.faces[b];var d=c.vertexNormals;3===d.length?(d[0].copy(c.normal),d[1].copy(c.normal),d[2].copy(c.normal)):(d[0]=c.normal.clone(),d[1]=c.normal.clone(),d[2]=c.normal.clone())}0<this.faces.length&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var a,b;var c=
    0;for(b=this.faces.length;c<b;c++){var d=this.faces[c];d.__originalFaceNormal?d.__originalFaceNormal.copy(d.normal):d.__originalFaceNormal=d.normal.clone();d.__originalVertexNormals||(d.__originalVertexNormals=[]);var e=0;for(a=d.vertexNormals.length;e<a;e++)d.__originalVertexNormals[e]?d.__originalVertexNormals[e].copy(d.vertexNormals[e]):d.__originalVertexNormals[e]=d.vertexNormals[e].clone()}var f=new L;f.faces=this.faces;e=0;for(a=this.morphTargets.length;e<a;e++){if(!this.morphNormals[e]){this.morphNormals[e]=
    {};this.morphNormals[e].faceNormals=[];this.morphNormals[e].vertexNormals=[];d=this.morphNormals[e].faceNormals;var g=this.morphNormals[e].vertexNormals;c=0;for(b=this.faces.length;c<b;c++){var h=new p;var k={a:new p,b:new p,c:new p};d.push(h);g.push(k)}}g=this.morphNormals[e];f.vertices=this.morphTargets[e].vertices;f.computeFaceNormals();f.computeVertexNormals();c=0;for(b=this.faces.length;c<b;c++)d=this.faces[c],h=g.faceNormals[c],k=g.vertexNormals[c],h.copy(d.normal),k.a.copy(d.vertexNormals[0]),
    k.b.copy(d.vertexNormals[1]),k.c.copy(d.vertexNormals[2])}c=0;for(b=this.faces.length;c<b;c++)d=this.faces[c],d.normal=d.__originalFaceNormal,d.vertexNormals=d.__originalVertexNormals},computeLineDistances:function(){for(var a=0,b=this.vertices,c=0,d=b.length;c<d;c++)0<c&&(a+=b[c].distanceTo(b[c-1])),this.lineDistances[c]=a},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new Xa);this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&
    (this.boundingSphere=new Ia);this.boundingSphere.setFromPoints(this.vertices)},merge:function(a,b,c){if(a&&a.isGeometry){var d,e=this.vertices.length,f=this.vertices,g=a.vertices,h=this.faces,k=a.faces,m=this.faceVertexUvs[0],l=a.faceVertexUvs[0],n=this.colors,p=a.colors;void 0===c&&(c=0);void 0!==b&&(d=(new ma).getNormalMatrix(b));a=0;for(var r=g.length;a<r;a++){var t=g[a].clone();void 0!==b&&t.applyMatrix4(b);f.push(t)}a=0;for(r=p.length;a<r;a++)n.push(p[a].clone());a=0;for(r=k.length;a<r;a++){var g=
    k[a],v=g.vertexNormals,p=g.vertexColors,n=new Ya(g.a+e,g.b+e,g.c+e);n.normal.copy(g.normal);void 0!==d&&n.normal.applyMatrix3(d).normalize();b=0;for(f=v.length;b<f;b++)t=v[b].clone(),void 0!==d&&t.applyMatrix3(d).normalize(),n.vertexNormals.push(t);n.color.copy(g.color);b=0;for(f=p.length;b<f;b++)t=p[b],n.vertexColors.push(t.clone());n.materialIndex=g.materialIndex+c;h.push(n)}a=0;for(r=l.length;a<r;a++)if(c=l[a],d=[],void 0!==c){b=0;for(f=c.length;b<f;b++)d.push(c[b].clone());m.push(d)}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",
    a)},mergeMesh:function(a){a&&a.isMesh?(a.matrixAutoUpdate&&a.updateMatrix(),this.merge(a.geometry,a.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",a)},mergeVertices:function(){var a={},b=[],c=[],d=Math.pow(10,4),e;var f=0;for(e=this.vertices.length;f<e;f++){var g=this.vertices[f];g=Math.round(g.x*d)+"_"+Math.round(g.y*d)+"_"+Math.round(g.z*d);void 0===a[g]?(a[g]=f,b.push(this.vertices[f]),c[f]=b.length-1):c[f]=c[a[g]]}a=[];f=0;for(e=this.faces.length;f<e;f++)for(d=
    this.faces[f],d.a=c[d.a],d.b=c[d.b],d.c=c[d.c],d=[d.a,d.b,d.c],g=0;3>g;g++)if(d[g]===d[(g+1)%3]){a.push(f);break}for(f=a.length-1;0<=f;f--)for(d=a[f],this.faces.splice(d,1),c=0,e=this.faceVertexUvs.length;c<e;c++)this.faceVertexUvs[c].splice(d,1);f=this.vertices.length-b.length;this.vertices=b;return f},setFromPoints:function(a){this.vertices=[];for(var b=0,c=a.length;b<c;b++){var d=a[b];this.vertices.push(new p(d.x,d.y,d.z||0))}return this},sortFacesByMaterialIndex:function(){for(var a=this.faces,
    b=a.length,c=0;c<b;c++)a[c]._id=c;a.sort(function(a,b){return a.materialIndex-b.materialIndex});var d=this.faceVertexUvs[0],e=this.faceVertexUvs[1],f,g;d&&d.length===b&&(f=[]);e&&e.length===b&&(g=[]);for(c=0;c<b;c++){var h=a[c]._id;f&&f.push(d[h]);g&&g.push(e[h])}f&&(this.faceVertexUvs[0]=f);g&&(this.faceVertexUvs[1]=g)},toJSON:function(){function a(a,b,c){return c?a|1<<b:a&~(1<<b)}function b(a){var b=a.x.toString()+a.y.toString()+a.z.toString();if(void 0!==m[b])return m[b];m[b]=k.length/3;k.push(a.x,
    a.y,a.z);return m[b]}function c(a){var b=a.r.toString()+a.g.toString()+a.b.toString();if(void 0!==n[b])return n[b];n[b]=l.length;l.push(a.getHex());return n[b]}function d(a){var b=a.x.toString()+a.y.toString();if(void 0!==r[b])return r[b];r[b]=p.length/2;p.push(a.x,a.y);return r[b]}var e={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};e.uuid=this.uuid;e.type=this.type;""!==this.name&&(e.name=this.name);if(void 0!==this.parameters){var f=this.parameters,g;for(g in f)void 0!==f[g]&&
    (e[g]=f[g]);return e}f=[];for(g=0;g<this.vertices.length;g++){var h=this.vertices[g];f.push(h.x,h.y,h.z)}var h=[],k=[],m={},l=[],n={},p=[],r={};for(g=0;g<this.faces.length;g++){var t=this.faces[g],v=void 0!==this.faceVertexUvs[0][g],w=0<t.normal.length(),z=0<t.vertexNormals.length,y=1!==t.color.r||1!==t.color.g||1!==t.color.b,x=0<t.vertexColors.length,A=0,A=a(A,0,0),A=a(A,1,!0),A=a(A,2,!1),A=a(A,3,v),A=a(A,4,w),A=a(A,5,z),A=a(A,6,y),A=a(A,7,x);h.push(A);h.push(t.a,t.b,t.c);h.push(t.materialIndex);
    v&&(v=this.faceVertexUvs[0][g],h.push(d(v[0]),d(v[1]),d(v[2])));w&&h.push(b(t.normal));z&&(w=t.vertexNormals,h.push(b(w[0]),b(w[1]),b(w[2])));y&&h.push(c(t.color));x&&(t=t.vertexColors,h.push(c(t[0]),c(t[1]),c(t[2])))}e.data={};e.data.vertices=f;e.data.normals=k;0<l.length&&(e.data.colors=l);0<p.length&&(e.data.uvs=[p]);e.data.faces=h;return e},clone:function(){return(new L).copy(this)},copy:function(a){var b,c,d;this.vertices=[];this.colors=[];this.faces=[];this.faceVertexUvs=[[]];this.morphTargets=
    [];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.name=a.name;var e=a.vertices;var f=0;for(b=e.length;f<b;f++)this.vertices.push(e[f].clone());e=a.colors;f=0;for(b=e.length;f<b;f++)this.colors.push(e[f].clone());e=a.faces;f=0;for(b=e.length;f<b;f++)this.faces.push(e[f].clone());f=0;for(b=a.faceVertexUvs.length;f<b;f++){var g=a.faceVertexUvs[f];void 0===this.faceVertexUvs[f]&&(this.faceVertexUvs[f]=[]);e=0;for(c=g.length;e<
    c;e++){var h=g[e],k=[];var m=0;for(d=h.length;m<d;m++)k.push(h[m].clone());this.faceVertexUvs[f].push(k)}}m=a.morphTargets;f=0;for(b=m.length;f<b;f++){d={};d.name=m[f].name;if(void 0!==m[f].vertices)for(d.vertices=[],e=0,c=m[f].vertices.length;e<c;e++)d.vertices.push(m[f].vertices[e].clone());if(void 0!==m[f].normals)for(d.normals=[],e=0,c=m[f].normals.length;e<c;e++)d.normals.push(m[f].normals[e].clone());this.morphTargets.push(d)}m=a.morphNormals;f=0;for(b=m.length;f<b;f++){d={};if(void 0!==m[f].vertexNormals)for(d.vertexNormals=
    [],e=0,c=m[f].vertexNormals.length;e<c;e++)g=m[f].vertexNormals[e],h={},h.a=g.a.clone(),h.b=g.b.clone(),h.c=g.c.clone(),d.vertexNormals.push(h);if(void 0!==m[f].faceNormals)for(d.faceNormals=[],e=0,c=m[f].faceNormals.length;e<c;e++)d.faceNormals.push(m[f].faceNormals[e].clone());this.morphNormals.push(d)}e=a.skinWeights;f=0;for(b=e.length;f<b;f++)this.skinWeights.push(e[f].clone());e=a.skinIndices;f=0;for(b=e.length;f<b;f++)this.skinIndices.push(e[f].clone());e=a.lineDistances;f=0;for(b=e.length;f<
    b;f++)this.lineDistances.push(e[f]);f=a.boundingBox;null!==f&&(this.boundingBox=f.clone());f=a.boundingSphere;null!==f&&(this.boundingSphere=f.clone());this.elementsNeedUpdate=a.elementsNeedUpdate;this.verticesNeedUpdate=a.verticesNeedUpdate;this.uvsNeedUpdate=a.uvsNeedUpdate;this.normalsNeedUpdate=a.normalsNeedUpdate;this.colorsNeedUpdate=a.colorsNeedUpdate;this.lineDistancesNeedUpdate=a.lineDistancesNeedUpdate;this.groupsNeedUpdate=a.groupsNeedUpdate;return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});
    Object.defineProperty(M.prototype,"needsUpdate",{set:function(a){!0===a&&this.version++}});Object.assign(M.prototype,{isBufferAttribute:!0,setArray:function(a){if(Array.isArray(a))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.count=void 0!==a?a.length/this.itemSize:0;this.array=a},setDynamic:function(a){this.dynamic=a;return this},copy:function(a){this.array=new a.array.constructor(a.array);this.itemSize=a.itemSize;this.count=a.count;this.normalized=a.normalized;
    this.dynamic=a.dynamic;return this},copyAt:function(a,b,c){a*=this.itemSize;c*=b.itemSize;for(var d=0,e=this.itemSize;d<e;d++)this.array[a+d]=b.array[c+d];return this},copyArray:function(a){this.array.set(a);return this},copyColorsArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",d),f=new H);b[c++]=f.r;b[c++]=f.g;b[c++]=f.b}return this},copyIndicesArray:function(a){for(var b=this.array,
    c=0,d=0,e=a.length;d<e;d++){var f=a[d];b[c++]=f.a;b[c++]=f.b;b[c++]=f.c}return this},copyVector2sArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",d),f=new D);b[c++]=f.x;b[c++]=f.y}return this},copyVector3sArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",d),f=new p);
    b[c++]=f.x;b[c++]=f.y;b[c++]=f.z}return this},copyVector4sArray:function(a){for(var b=this.array,c=0,d=0,e=a.length;d<e;d++){var f=a[d];void 0===f&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",d),f=new aa);b[c++]=f.x;b[c++]=f.y;b[c++]=f.z;b[c++]=f.w}return this},set:function(a,b){void 0===b&&(b=0);this.array.set(a,b);return this},getX:function(a){return this.array[a*this.itemSize]},setX:function(a,b){this.array[a*this.itemSize]=b;return this},getY:function(a){return this.array[a*
    this.itemSize+1]},setY:function(a,b){this.array[a*this.itemSize+1]=b;return this},getZ:function(a){return this.array[a*this.itemSize+2]},setZ:function(a,b){this.array[a*this.itemSize+2]=b;return this},getW:function(a){return this.array[a*this.itemSize+3]},setW:function(a,b){this.array[a*this.itemSize+3]=b;return this},setXY:function(a,b,c){a*=this.itemSize;this.array[a+0]=b;this.array[a+1]=c;return this},setXYZ:function(a,b,c,d){a*=this.itemSize;this.array[a+0]=b;this.array[a+1]=c;this.array[a+2]=
    d;return this},setXYZW:function(a,b,c,d,e){a*=this.itemSize;this.array[a+0]=b;this.array[a+1]=c;this.array[a+2]=d;this.array[a+3]=e;return this},onUpload:function(a){this.onUploadCallback=a;return this},clone:function(){return(new this.constructor(this.array,this.itemSize)).copy(this)}});uc.prototype=Object.create(M.prototype);uc.prototype.constructor=uc;vc.prototype=Object.create(M.prototype);vc.prototype.constructor=vc;wc.prototype=Object.create(M.prototype);wc.prototype.constructor=wc;xc.prototype=
    Object.create(M.prototype);xc.prototype.constructor=xc;ob.prototype=Object.create(M.prototype);ob.prototype.constructor=ob;yc.prototype=Object.create(M.prototype);yc.prototype.constructor=yc;pb.prototype=Object.create(M.prototype);pb.prototype.constructor=pb;B.prototype=Object.create(M.prototype);B.prototype.constructor=B;zc.prototype=Object.create(M.prototype);zc.prototype.constructor=zc;Object.assign(Ve.prototype,{computeGroups:function(a){var b=[],c=void 0;a=a.faces;for(var d=0;d<a.length;d++){var e=
    a[d];if(e.materialIndex!==c){c=e.materialIndex;void 0!==f&&(f.count=3*d-f.start,b.push(f));var f={start:3*d,materialIndex:c}}}void 0!==f&&(f.count=3*d-f.start,b.push(f));this.groups=b},fromGeometry:function(a){var b=a.faces,c=a.vertices,d=a.faceVertexUvs,e=d[0]&&0<d[0].length,f=d[1]&&0<d[1].length,g=a.morphTargets,h=g.length;if(0<h){var k=[];for(var m=0;m<h;m++)k[m]=[];this.morphTargets.position=k}var l=a.morphNormals,n=l.length;if(0<n){var p=[];for(m=0;m<n;m++)p[m]=[];this.morphTargets.normal=p}for(var r=
    a.skinIndices,t=a.skinWeights,v=r.length===c.length,w=t.length===c.length,m=0;m<b.length;m++){var z=b[m];this.vertices.push(c[z.a],c[z.b],c[z.c]);var y=z.vertexNormals;3===y.length?this.normals.push(y[0],y[1],y[2]):(y=z.normal,this.normals.push(y,y,y));y=z.vertexColors;3===y.length?this.colors.push(y[0],y[1],y[2]):(y=z.color,this.colors.push(y,y,y));!0===e&&(y=d[0][m],void 0!==y?this.uvs.push(y[0],y[1],y[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",m),this.uvs.push(new D,
    new D,new D)));!0===f&&(y=d[1][m],void 0!==y?this.uvs2.push(y[0],y[1],y[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",m),this.uvs2.push(new D,new D,new D)));for(y=0;y<h;y++){var x=g[y].vertices;k[y].push(x[z.a],x[z.b],x[z.c])}for(y=0;y<n;y++)x=l[y].vertexNormals[m],p[y].push(x.a,x.b,x.c);v&&this.skinIndices.push(r[z.a],r[z.b],r[z.c]);w&&this.skinWeights.push(t[z.a],t[z.b],t[z.c])}this.computeGroups(a);this.verticesNeedUpdate=a.verticesNeedUpdate;this.normalsNeedUpdate=
    a.normalsNeedUpdate;this.colorsNeedUpdate=a.colorsNeedUpdate;this.uvsNeedUpdate=a.uvsNeedUpdate;this.groupsNeedUpdate=a.groupsNeedUpdate;return this}});var eg=1;E.prototype=Object.assign(Object.create(za.prototype),{constructor:E,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(a){Array.isArray(a)?this.index=new (65535<Xd(a)?pb:ob)(a,1):this.index=a},addAttribute:function(a,b,c){if(b&&b.isBufferAttribute||b&&b.isInterleavedBufferAttribute)if("index"===a)console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),
    this.setIndex(b);else return this.attributes[a]=b,this;else console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.addAttribute(a,new M(b,c))},getAttribute:function(a){return this.attributes[a]},removeAttribute:function(a){delete this.attributes[a];return this},addGroup:function(a,b,c){this.groups.push({start:a,count:b,materialIndex:void 0!==c?c:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(a,b){this.drawRange.start=a;this.drawRange.count=b},
    applyMatrix:function(a){var b=this.attributes.position;void 0!==b&&(a.applyToBufferAttribute(b),b.needsUpdate=!0);b=this.attributes.normal;void 0!==b&&((new ma).getNormalMatrix(a).applyToBufferAttribute(b),b.needsUpdate=!0);null!==this.boundingBox&&this.computeBoundingBox();null!==this.boundingSphere&&this.computeBoundingSphere();return this},rotateX:function(){var a=new O;return function(b){a.makeRotationX(b);this.applyMatrix(a);return this}}(),rotateY:function(){var a=new O;return function(b){a.makeRotationY(b);
    this.applyMatrix(a);return this}}(),rotateZ:function(){var a=new O;return function(b){a.makeRotationZ(b);this.applyMatrix(a);return this}}(),translate:function(){var a=new O;return function(b,c,d){a.makeTranslation(b,c,d);this.applyMatrix(a);return this}}(),scale:function(){var a=new O;return function(b,c,d){a.makeScale(b,c,d);this.applyMatrix(a);return this}}(),lookAt:function(){var a=new x;return function(b){a.lookAt(b);a.updateMatrix();this.applyMatrix(a.matrix)}}(),center:function(){this.computeBoundingBox();
    var a=this.boundingBox.getCenter().negate();this.translate(a.x,a.y,a.z);return a},setFromObject:function(a){var b=a.geometry;if(a.isPoints||a.isLine){a=new B(3*b.vertices.length,3);var c=new B(3*b.colors.length,3);this.addAttribute("position",a.copyVector3sArray(b.vertices));this.addAttribute("color",c.copyColorsArray(b.colors));b.lineDistances&&b.lineDistances.length===b.vertices.length&&(a=new B(b.lineDistances.length,1),this.addAttribute("lineDistance",a.copyArray(b.lineDistances)));null!==b.boundingSphere&&
    (this.boundingSphere=b.boundingSphere.clone());null!==b.boundingBox&&(this.boundingBox=b.boundingBox.clone())}else a.isMesh&&b&&b.isGeometry&&this.fromGeometry(b);return this},setFromPoints:function(a){for(var b=[],c=0,d=a.length;c<d;c++){var e=a[c];b.push(e.x,e.y,e.z||0)}this.addAttribute("position",new B(b,3));return this},updateFromObject:function(a){var b=a.geometry;if(a.isMesh){var c=b.__directGeometry;!0===b.elementsNeedUpdate&&(c=void 0,b.elementsNeedUpdate=!1);if(void 0===c)return this.fromGeometry(b);
    c.verticesNeedUpdate=b.verticesNeedUpdate;c.normalsNeedUpdate=b.normalsNeedUpdate;c.colorsNeedUpdate=b.colorsNeedUpdate;c.uvsNeedUpdate=b.uvsNeedUpdate;c.groupsNeedUpdate=b.groupsNeedUpdate;b.verticesNeedUpdate=!1;b.normalsNeedUpdate=!1;b.colorsNeedUpdate=!1;b.uvsNeedUpdate=!1;b.groupsNeedUpdate=!1;b=c}!0===b.verticesNeedUpdate&&(c=this.attributes.position,void 0!==c&&(c.copyVector3sArray(b.vertices),c.needsUpdate=!0),b.verticesNeedUpdate=!1);!0===b.normalsNeedUpdate&&(c=this.attributes.normal,void 0!==
    c&&(c.copyVector3sArray(b.normals),c.needsUpdate=!0),b.normalsNeedUpdate=!1);!0===b.colorsNeedUpdate&&(c=this.attributes.color,void 0!==c&&(c.copyColorsArray(b.colors),c.needsUpdate=!0),b.colorsNeedUpdate=!1);b.uvsNeedUpdate&&(c=this.attributes.uv,void 0!==c&&(c.copyVector2sArray(b.uvs),c.needsUpdate=!0),b.uvsNeedUpdate=!1);b.lineDistancesNeedUpdate&&(c=this.attributes.lineDistance,void 0!==c&&(c.copyArray(b.lineDistances),c.needsUpdate=!0),b.lineDistancesNeedUpdate=!1);b.groupsNeedUpdate&&(b.computeGroups(a.geometry),
    this.groups=b.groups,b.groupsNeedUpdate=!1);return this},fromGeometry:function(a){a.__directGeometry=(new Ve).fromGeometry(a);return this.fromDirectGeometry(a.__directGeometry)},fromDirectGeometry:function(a){var b=new Float32Array(3*a.vertices.length);this.addAttribute("position",(new M(b,3)).copyVector3sArray(a.vertices));0<a.normals.length&&(b=new Float32Array(3*a.normals.length),this.addAttribute("normal",(new M(b,3)).copyVector3sArray(a.normals)));0<a.colors.length&&(b=new Float32Array(3*a.colors.length),
    this.addAttribute("color",(new M(b,3)).copyColorsArray(a.colors)));0<a.uvs.length&&(b=new Float32Array(2*a.uvs.length),this.addAttribute("uv",(new M(b,2)).copyVector2sArray(a.uvs)));0<a.uvs2.length&&(b=new Float32Array(2*a.uvs2.length),this.addAttribute("uv2",(new M(b,2)).copyVector2sArray(a.uvs2)));0<a.indices.length&&(b=new (65535<Xd(a.indices)?Uint32Array:Uint16Array)(3*a.indices.length),this.setIndex((new M(b,1)).copyIndicesArray(a.indices)));this.groups=a.groups;for(var c in a.morphTargets){for(var b=
    [],d=a.morphTargets[c],e=0,f=d.length;e<f;e++){var g=d[e],h=new B(3*g.length,3);b.push(h.copyVector3sArray(g))}this.morphAttributes[c]=b}0<a.skinIndices.length&&(c=new B(4*a.skinIndices.length,4),this.addAttribute("skinIndex",c.copyVector4sArray(a.skinIndices)));0<a.skinWeights.length&&(c=new B(4*a.skinWeights.length,4),this.addAttribute("skinWeight",c.copyVector4sArray(a.skinWeights)));null!==a.boundingSphere&&(this.boundingSphere=a.boundingSphere.clone());null!==a.boundingBox&&(this.boundingBox=
    a.boundingBox.clone());return this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new Xa);var a=this.attributes.position;void 0!==a?this.boundingBox.setFromBufferAttribute(a):this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){var a=
    new Xa,b=new p;return function(){null===this.boundingSphere&&(this.boundingSphere=new Ia);var c=this.attributes.position;if(c){var d=this.boundingSphere.center;a.setFromBufferAttribute(c);a.getCenter(d);for(var e=0,f=0,g=c.count;f<g;f++)b.x=c.getX(f),b.y=c.getY(f),b.z=c.getZ(f),e=Math.max(e,d.distanceToSquared(b));this.boundingSphere.radius=Math.sqrt(e);isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',
    this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var a=this.index,b=this.attributes,c=this.groups;if(b.position){var d=b.position.array;if(void 0===b.normal)this.addAttribute("normal",new M(new Float32Array(d.length),3));else for(var e=b.normal.array,f=0,g=e.length;f<g;f++)e[f]=0;var e=b.normal.array,h=new p,k=new p,m=new p,l=new p,n=new p;if(a){a=a.array;0===c.length&&this.addGroup(0,a.length);for(var u=0,r=c.length;u<r;++u){f=c[u];g=f.start;var t=f.count;f=g;for(g+=t;f<
    g;f+=3){t=3*a[f+0];var v=3*a[f+1];var w=3*a[f+2];h.fromArray(d,t);k.fromArray(d,v);m.fromArray(d,w);l.subVectors(m,k);n.subVectors(h,k);l.cross(n);e[t]+=l.x;e[t+1]+=l.y;e[t+2]+=l.z;e[v]+=l.x;e[v+1]+=l.y;e[v+2]+=l.z;e[w]+=l.x;e[w+1]+=l.y;e[w+2]+=l.z}}}else for(f=0,g=d.length;f<g;f+=9)h.fromArray(d,f),k.fromArray(d,f+3),m.fromArray(d,f+6),l.subVectors(m,k),n.subVectors(h,k),l.cross(n),e[f]=l.x,e[f+1]=l.y,e[f+2]=l.z,e[f+3]=l.x,e[f+4]=l.y,e[f+5]=l.z,e[f+6]=l.x,e[f+7]=l.y,e[f+8]=l.z;this.normalizeNormals();
    b.normal.needsUpdate=!0}},merge:function(a,b){if(a&&a.isBufferGeometry){void 0===b&&(b=0);var c=this.attributes,d;for(d in c)if(void 0!==a.attributes[d])for(var e=c[d].array,f=a.attributes[d],g=f.array,h=0,f=f.itemSize*b;h<g.length;h++,f++)e[f]=g[h];return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",a)},normalizeNormals:function(){var a=new p;return function(){for(var b=this.attributes.normal,c=0,d=b.count;c<d;c++)a.x=b.getX(c),a.y=b.getY(c),
    a.z=b.getZ(c),a.normalize(),b.setXYZ(c,a.x,a.y,a.z)}}(),toNonIndexed:function(){if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var a=new E,b=this.index.array,c=this.attributes,d;for(d in c){for(var e=c[d],f=e.array,e=e.itemSize,g=new f.constructor(b.length*e),h,k=0,m=0,l=b.length;m<l;m++){h=b[m]*e;for(var n=0;n<e;n++)g[k++]=f[h++]}a.addAttribute(d,new M(g,e))}return a},toJSON:function(){var a={metadata:{version:4.5,type:"BufferGeometry",
    generator:"BufferGeometry.toJSON"}};a.uuid=this.uuid;a.type=this.type;""!==this.name&&(a.name=this.name);if(void 0!==this.parameters){var b=this.parameters;for(var c in b)void 0!==b[c]&&(a[c]=b[c]);return a}a.data={attributes:{}};var d=this.index;null!==d&&(b=Array.prototype.slice.call(d.array),a.data.index={type:d.array.constructor.name,array:b});d=this.attributes;for(c in d){var e=d[c];b=Array.prototype.slice.call(e.array);a.data.attributes[c]={itemSize:e.itemSize,type:e.array.constructor.name,
    array:b,normalized:e.normalized}}c=this.groups;0<c.length&&(a.data.groups=JSON.parse(JSON.stringify(c)));c=this.boundingSphere;null!==c&&(a.data.boundingSphere={center:c.center.toArray(),radius:c.radius});return a},clone:function(){return(new E).copy(this)},copy:function(a){var b;this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingSphere=this.boundingBox=null;this.name=a.name;var c=a.index;null!==c&&this.setIndex(c.clone());c=a.attributes;for(g in c)this.addAttribute(g,
    c[g].clone());var d=a.morphAttributes;for(g in d){var e=[],f=d[g];c=0;for(b=f.length;c<b;c++)e.push(f[c].clone());this.morphAttributes[g]=e}var g=a.groups;c=0;for(b=g.length;c<b;c++)d=g[c],this.addGroup(d.start,d.count,d.materialIndex);g=a.boundingBox;null!==g&&(this.boundingBox=g.clone());g=a.boundingSphere;null!==g&&(this.boundingSphere=g.clone());this.drawRange.start=a.drawRange.start;this.drawRange.count=a.drawRange.count;return this},dispose:function(){this.dispatchEvent({type:"dispose"})}});
    Mb.prototype=Object.create(L.prototype);Mb.prototype.constructor=Mb;qb.prototype=Object.create(E.prototype);qb.prototype.constructor=qb;Ac.prototype=Object.create(L.prototype);Ac.prototype.constructor=Ac;rb.prototype=Object.create(E.prototype);rb.prototype.constructor=rb;Aa.prototype=Object.create(P.prototype);Aa.prototype.constructor=Aa;Aa.prototype.isMeshBasicMaterial=!0;Aa.prototype.copy=function(a){P.prototype.copy.call(this,a);this.color.copy(a.color);this.map=a.map;this.lightMap=a.lightMap;
    this.lightMapIntensity=a.lightMapIntensity;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.specularMap=a.specularMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.combine=a.combine;this.reflectivity=a.reflectivity;this.refractionRatio=a.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;this.skinning=a.skinning;this.morphTargets=a.morphTargets;return this};Fa.prototype=
    Object.create(P.prototype);Fa.prototype.constructor=Fa;Fa.prototype.isShaderMaterial=!0;Fa.prototype.copy=function(a){P.prototype.copy.call(this,a);this.fragmentShader=a.fragmentShader;this.vertexShader=a.vertexShader;this.uniforms=Ga.clone(a.uniforms);this.defines=a.defines;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.lights=a.lights;this.clipping=a.clipping;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;this.extensions=
    a.extensions;return this};Fa.prototype.toJSON=function(a){a=P.prototype.toJSON.call(this,a);a.uniforms=this.uniforms;a.vertexShader=this.vertexShader;a.fragmentShader=this.fragmentShader;return a};Object.assign(sb.prototype,{set:function(a,b){this.origin.copy(a);this.direction.copy(b);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.origin.copy(a.origin);this.direction.copy(a.direction);return this},at:function(a,b){return(b||new p).copy(this.direction).multiplyScalar(a).add(this.origin)},
    lookAt:function(a){this.direction.copy(a).sub(this.origin).normalize();return this},recast:function(){var a=new p;return function(b){this.origin.copy(this.at(b,a));return this}}(),closestPointToPoint:function(a,b){b=b||new p;b.subVectors(a,this.origin);a=b.dot(this.direction);return 0>a?b.copy(this.origin):b.copy(this.direction).multiplyScalar(a).add(this.origin)},distanceToPoint:function(a){return Math.sqrt(this.distanceSqToPoint(a))},distanceSqToPoint:function(){var a=new p;return function(b){var c=
    a.subVectors(b,this.origin).dot(this.direction);if(0>c)return this.origin.distanceToSquared(b);a.copy(this.direction).multiplyScalar(c).add(this.origin);return a.distanceToSquared(b)}}(),distanceSqToSegment:function(){var a=new p,b=new p,c=new p;return function(d,e,f,g){a.copy(d).add(e).multiplyScalar(.5);b.copy(e).sub(d).normalize();c.copy(this.origin).sub(a);var h=.5*d.distanceTo(e),k=-this.direction.dot(b),m=c.dot(this.direction),l=-c.dot(b),n=c.lengthSq(),p=Math.abs(1-k*k);if(0<p){d=k*l-m;e=k*
    m-l;var r=h*p;0<=d?e>=-r?e<=r?(h=1/p,d*=h,e*=h,k=d*(d+k*e+2*m)+e*(k*d+e+2*l)+n):(e=h,d=Math.max(0,-(k*e+m)),k=-d*d+e*(e+2*l)+n):(e=-h,d=Math.max(0,-(k*e+m)),k=-d*d+e*(e+2*l)+n):e<=-r?(d=Math.max(0,-(-k*h+m)),e=0<d?-h:Math.min(Math.max(-h,-l),h),k=-d*d+e*(e+2*l)+n):e<=r?(d=0,e=Math.min(Math.max(-h,-l),h),k=e*(e+2*l)+n):(d=Math.max(0,-(k*h+m)),e=0<d?h:Math.min(Math.max(-h,-l),h),k=-d*d+e*(e+2*l)+n)}else e=0<k?-h:h,d=Math.max(0,-(k*e+m)),k=-d*d+e*(e+2*l)+n;f&&f.copy(this.direction).multiplyScalar(d).add(this.origin);
    g&&g.copy(b).multiplyScalar(e).add(a);return k}}(),intersectSphere:function(){var a=new p;return function(b,c){a.subVectors(b.center,this.origin);var d=a.dot(this.direction),e=a.dot(a)-d*d;b=b.radius*b.radius;if(e>b)return null;b=Math.sqrt(b-e);e=d-b;d+=b;return 0>e&&0>d?null:0>e?this.at(d,c):this.at(e,c)}}(),intersectsSphere:function(a){return this.distanceToPoint(a.center)<=a.radius},distanceToPlane:function(a){var b=a.normal.dot(this.direction);if(0===b)return 0===a.distanceToPoint(this.origin)?
    0:null;a=-(this.origin.dot(a.normal)+a.constant)/b;return 0<=a?a:null},intersectPlane:function(a,b){a=this.distanceToPlane(a);return null===a?null:this.at(a,b)},intersectsPlane:function(a){var b=a.distanceToPoint(this.origin);return 0===b||0>a.normal.dot(this.direction)*b?!0:!1},intersectBox:function(a,b){var c=1/this.direction.x;var d=1/this.direction.y;var e=1/this.direction.z,f=this.origin;if(0<=c){var g=(a.min.x-f.x)*c;c*=a.max.x-f.x}else g=(a.max.x-f.x)*c,c*=a.min.x-f.x;if(0<=d){var h=(a.min.y-
    f.y)*d;d*=a.max.y-f.y}else h=(a.max.y-f.y)*d,d*=a.min.y-f.y;if(g>d||h>c)return null;if(h>g||g!==g)g=h;if(d<c||c!==c)c=d;0<=e?(h=(a.min.z-f.z)*e,a=(a.max.z-f.z)*e):(h=(a.max.z-f.z)*e,a=(a.min.z-f.z)*e);if(g>a||h>c)return null;if(h>g||g!==g)g=h;if(a<c||c!==c)c=a;return 0>c?null:this.at(0<=g?g:c,b)},intersectsBox:function(){var a=new p;return function(b){return null!==this.intersectBox(b,a)}}(),intersectTriangle:function(){var a=new p,b=new p,c=new p,d=new p;return function(e,f,g,h,k){b.subVectors(f,
    e);c.subVectors(g,e);d.crossVectors(b,c);f=this.direction.dot(d);if(0<f){if(h)return null;h=1}else if(0>f)h=-1,f=-f;else return null;a.subVectors(this.origin,e);e=h*this.direction.dot(c.crossVectors(a,c));if(0>e)return null;g=h*this.direction.dot(b.cross(a));if(0>g||e+g>f)return null;e=-h*a.dot(d);return 0>e?null:this.at(e/f,k)}}(),applyMatrix4:function(a){this.origin.applyMatrix4(a);this.direction.transformDirection(a);return this},equals:function(a){return a.origin.equals(this.origin)&&a.direction.equals(this.direction)}});
    Object.assign(Nb.prototype,{set:function(a,b){this.start.copy(a);this.end.copy(b);return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.start.copy(a.start);this.end.copy(a.end);return this},getCenter:function(a){return(a||new p).addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(a){return(a||new p).subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},
    at:function(a,b){b=b||new p;return this.delta(b).multiplyScalar(a).add(this.start)},closestPointToPointParameter:function(){var a=new p,b=new p;return function(c,d){a.subVectors(c,this.start);b.subVectors(this.end,this.start);c=b.dot(b);c=b.dot(a)/c;d&&(c=Q.clamp(c,0,1));return c}}(),closestPointToPoint:function(a,b,c){a=this.closestPointToPointParameter(a,b);c=c||new p;return this.delta(c).multiplyScalar(a).add(this.start)},applyMatrix4:function(a){this.start.applyMatrix4(a);this.end.applyMatrix4(a);
    return this},equals:function(a){return a.start.equals(this.start)&&a.end.equals(this.end)}});Object.assign(Za,{normal:function(){var a=new p;return function(b,c,d,e){e=e||new p;e.subVectors(d,c);a.subVectors(b,c);e.cross(a);b=e.lengthSq();return 0<b?e.multiplyScalar(1/Math.sqrt(b)):e.set(0,0,0)}}(),barycoordFromPoint:function(){var a=new p,b=new p,c=new p;return function(d,e,f,g,h){a.subVectors(g,e);b.subVectors(f,e);c.subVectors(d,e);d=a.dot(a);e=a.dot(b);f=a.dot(c);var k=b.dot(b);g=b.dot(c);var m=
    d*k-e*e;h=h||new p;if(0===m)return h.set(-2,-1,-1);m=1/m;k=(k*f-e*g)*m;d=(d*g-e*f)*m;return h.set(1-k-d,d,k)}}(),containsPoint:function(){var a=new p;return function(b,c,d,e){b=Za.barycoordFromPoint(b,c,d,e,a);return 0<=b.x&&0<=b.y&&1>=b.x+b.y}}()});Object.assign(Za.prototype,{set:function(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this},setFromPointsAndIndices:function(a,b,c,d){this.a.copy(a[b]);this.b.copy(a[c]);this.c.copy(a[d]);return this},clone:function(){return(new this.constructor).copy(this)},
    copy:function(a){this.a.copy(a.a);this.b.copy(a.b);this.c.copy(a.c);return this},area:function(){var a=new p,b=new p;return function(){a.subVectors(this.c,this.b);b.subVectors(this.a,this.b);return.5*a.cross(b).length()}}(),midpoint:function(a){return(a||new p).addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(a){return Za.normal(this.a,this.b,this.c,a)},plane:function(a){return(a||new Ea).setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(a,b){return Za.barycoordFromPoint(a,
    this.a,this.b,this.c,b)},containsPoint:function(a){return Za.containsPoint(a,this.a,this.b,this.c)},closestPointToPoint:function(){var a=new Ea,b=[new Nb,new Nb,new Nb],c=new p,d=new p;return function(e,f){f=f||new p;var g=Infinity;a.setFromCoplanarPoints(this.a,this.b,this.c);a.projectPoint(e,c);if(!0===this.containsPoint(c))f.copy(c);else for(b[0].set(this.a,this.b),b[1].set(this.b,this.c),b[2].set(this.c,this.a),e=0;e<b.length;e++){b[e].closestPointToPoint(c,!0,d);var h=c.distanceToSquared(d);
    h<g&&(g=h,f.copy(d))}return f}}(),equals:function(a){return a.a.equals(this.a)&&a.b.equals(this.b)&&a.c.equals(this.c)}});ra.prototype=Object.assign(Object.create(x.prototype),{constructor:ra,isMesh:!0,setDrawMode:function(a){this.drawMode=a},copy:function(a){x.prototype.copy.call(this,a);this.drawMode=a.drawMode;void 0!==a.morphTargetInfluences&&(this.morphTargetInfluences=a.morphTargetInfluences.slice());void 0!==a.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},a.morphTargetDictionary));
    return this},updateMorphTargets:function(){var a=this.geometry;if(a.isBufferGeometry){a=a.morphAttributes;var b=Object.keys(a);if(0<b.length){var c=a[b[0]];if(void 0!==c)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},a=0,b=c.length;a<b;a++){var d=c[a].name||String(a);this.morphTargetInfluences.push(0);this.morphTargetDictionary[d]=a}}}else if(c=a.morphTargets,void 0!==c&&0<c.length)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},a=0,b=c.length;a<b;a++)d=c[a].name||
    String(a),this.morphTargetInfluences.push(0),this.morphTargetDictionary[d]=a},raycast:function(){function a(a,b,c,d,e,f,g){Za.barycoordFromPoint(a,b,c,d,v);e.multiplyScalar(v.x);f.multiplyScalar(v.y);g.multiplyScalar(v.z);e.add(f).add(g);return e.clone()}function b(a,b,c,d,e,f,g,h){if(null===(1===b.side?d.intersectTriangle(g,f,e,!0,h):d.intersectTriangle(e,f,g,2!==b.side,h)))return null;z.copy(h);z.applyMatrix4(a.matrixWorld);b=c.ray.origin.distanceTo(z);return b<c.near||b>c.far?null:{distance:b,
    point:z.clone(),object:a}}function c(c,d,e,f,m,l,q,n){g.fromBufferAttribute(f,l);h.fromBufferAttribute(f,q);k.fromBufferAttribute(f,n);if(c=b(c,c.material,d,e,g,h,k,w))m&&(u.fromBufferAttribute(m,l),r.fromBufferAttribute(m,q),t.fromBufferAttribute(m,n),c.uv=a(w,g,h,k,u,r,t)),c.face=new Ya(l,q,n,Za.normal(g,h,k)),c.faceIndex=l;return c}var d=new O,e=new sb,f=new Ia,g=new p,h=new p,k=new p,m=new p,l=new p,n=new p,u=new D,r=new D,t=new D,v=new p,w=new p,z=new p;return function(q,p){var v=this.geometry,
    z=this.material,y=this.matrixWorld;if(void 0!==z&&(null===v.boundingSphere&&v.computeBoundingSphere(),f.copy(v.boundingSphere),f.applyMatrix4(y),!1!==q.ray.intersectsSphere(f)&&(d.getInverse(y),e.copy(q.ray).applyMatrix4(d),null===v.boundingBox||!1!==e.intersectsBox(v.boundingBox)))){var x;if(v.isBufferGeometry){var z=v.index,B=v.attributes.position,y=v.attributes.uv,D;if(null!==z){var C=0;for(D=z.count;C<D;C+=3){v=z.getX(C);var I=z.getX(C+1);var E=z.getX(C+2);if(x=c(this,q,e,B,y,v,I,E))x.faceIndex=
    Math.floor(C/3),p.push(x)}}else if(void 0!==B)for(C=0,D=B.count;C<D;C+=3)if(v=C,I=C+1,E=C+2,x=c(this,q,e,B,y,v,I,E))x.index=v,p.push(x)}else if(v.isGeometry){var y=Array.isArray(z);C=v.vertices;D=v.faces;I=v.faceVertexUvs[0];0<I.length&&(B=I);for(var H=0,K=D.length;H<K;H++){var N=D[H];x=y?z[N.materialIndex]:z;if(void 0!==x){I=C[N.a];E=C[N.b];var L=C[N.c];if(!0===x.morphTargets){var M=v.morphTargets,O=this.morphTargetInfluences;g.set(0,0,0);h.set(0,0,0);k.set(0,0,0);for(var P=0,Q=M.length;P<Q;P++){var R=
    O[P];if(0!==R){var U=M[P].vertices;g.addScaledVector(m.subVectors(U[N.a],I),R);h.addScaledVector(l.subVectors(U[N.b],E),R);k.addScaledVector(n.subVectors(U[N.c],L),R)}}g.add(I);h.add(E);k.add(L);I=g;E=h;L=k}if(x=b(this,x,q,e,I,E,L,w))B&&B[H]&&(M=B[H],u.copy(M[0]),r.copy(M[1]),t.copy(M[2]),x.uv=a(w,I,E,L,u,r,t)),x.face=N,x.faceIndex=H,p.push(x)}}}}}}(),clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});var yg=0;ba.prototype=Object.assign(Object.create(Ta.prototype),
    {constructor:ba,isPerspectiveCamera:!0,copy:function(a,b){Ta.prototype.copy.call(this,a,b);this.fov=a.fov;this.zoom=a.zoom;this.near=a.near;this.far=a.far;this.focus=a.focus;this.aspect=a.aspect;this.view=null===a.view?null:Object.assign({},a.view);this.filmGauge=a.filmGauge;this.filmOffset=a.filmOffset;return this},setFocalLength:function(a){a=.5*this.getFilmHeight()/a;this.fov=2*Q.RAD2DEG*Math.atan(a);this.updateProjectionMatrix()},getFocalLength:function(){var a=Math.tan(.5*Q.DEG2RAD*this.fov);
    return.5*this.getFilmHeight()/a},getEffectiveFOV:function(){return 2*Q.RAD2DEG*Math.atan(Math.tan(.5*Q.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(a,b,c,d,e,f){this.aspect=a/b;null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1});this.view.enabled=!0;this.view.fullWidth=a;this.view.fullHeight=b;this.view.offsetX=
    c;this.view.offsetY=d;this.view.width=e;this.view.height=f;this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1);this.updateProjectionMatrix()},updateProjectionMatrix:function(){var a=this.near,b=a*Math.tan(.5*Q.DEG2RAD*this.fov)/this.zoom,c=2*b,d=this.aspect*c,e=-.5*d,f=this.view;if(null!==this.view&&this.view.enabled)var g=f.fullWidth,h=f.fullHeight,e=e+f.offsetX*d/g,b=b-f.offsetY*c/h,d=f.width/g*d,c=f.height/h*c;f=this.filmOffset;0!==f&&(e+=a*f/this.getFilmWidth());
    this.projectionMatrix.makePerspective(e,e+d,b,b-c,a,this.far)},toJSON:function(a){a=x.prototype.toJSON.call(this,a);a.object.fov=this.fov;a.object.zoom=this.zoom;a.object.near=this.near;a.object.far=this.far;a.object.focus=this.focus;a.object.aspect=this.aspect;null!==this.view&&(a.object.view=Object.assign({},this.view));a.object.filmGauge=this.filmGauge;a.object.filmOffset=this.filmOffset;return a}});ud.prototype=Object.assign(Object.create(ba.prototype),{constructor:ud,isArrayCamera:!0});Pb.prototype.isFogExp2=
    !0;Pb.prototype.clone=function(){return new Pb(this.color.getHex(),this.density)};Pb.prototype.toJSON=function(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}};Qb.prototype.isFog=!0;Qb.prototype.clone=function(){return new Qb(this.color.getHex(),this.near,this.far)};Qb.prototype.toJSON=function(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}};vd.prototype=Object.assign(Object.create(x.prototype),{constructor:vd,copy:function(a,b){x.prototype.copy.call(this,
    a,b);null!==a.background&&(this.background=a.background.clone());null!==a.fog&&(this.fog=a.fog.clone());null!==a.overrideMaterial&&(this.overrideMaterial=a.overrideMaterial.clone());this.autoUpdate=a.autoUpdate;this.matrixAutoUpdate=a.matrixAutoUpdate;return this},toJSON:function(a){var b=x.prototype.toJSON.call(this,a);null!==this.background&&(b.object.background=this.background.toJSON(a));null!==this.fog&&(b.object.fog=this.fog.toJSON());return b}});de.prototype=Object.assign(Object.create(x.prototype),
    {constructor:de,isLensFlare:!0,copy:function(a){x.prototype.copy.call(this,a);this.positionScreen.copy(a.positionScreen);this.customUpdateCallback=a.customUpdateCallback;for(var b=0,c=a.lensFlares.length;b<c;b++)this.lensFlares.push(a.lensFlares[b]);return this},add:function(a,b,c,d,e,f){void 0===b&&(b=-1);void 0===c&&(c=0);void 0===f&&(f=1);void 0===e&&(e=new H(16777215));void 0===d&&(d=1);c=Math.min(c,Math.max(0,c));this.lensFlares.push({texture:a,size:b,distance:c,x:0,y:0,z:0,scale:1,rotation:0,
    opacity:f,color:e,blending:d})},updateLensFlares:function(){var a,b=this.lensFlares.length,c=2*-this.positionScreen.x,d=2*-this.positionScreen.y;for(a=0;a<b;a++){var e=this.lensFlares[a];e.x=this.positionScreen.x+c*e.distance;e.y=this.positionScreen.y+d*e.distance;e.wantedRotation=e.x*Math.PI*.25;e.rotation+=.25*(e.wantedRotation-e.rotation)}}});hb.prototype=Object.create(P.prototype);hb.prototype.constructor=hb;hb.prototype.isSpriteMaterial=!0;hb.prototype.copy=function(a){P.prototype.copy.call(this,
    a);this.color.copy(a.color);this.map=a.map;this.rotation=a.rotation;return this};Cc.prototype=Object.assign(Object.create(x.prototype),{constructor:Cc,isSprite:!0,raycast:function(){var a=new p,b=new p,c=new p;return function(d,e){b.setFromMatrixPosition(this.matrixWorld);d.ray.closestPointToPoint(b,a);c.setFromMatrixScale(this.matrixWorld);var f=c.x*c.y/4;b.distanceToSquared(a)>f||(f=d.ray.origin.distanceTo(a),f<d.near||f>d.far||e.push({distance:f,point:a.clone(),face:null,object:this}))}}(),clone:function(){return(new this.constructor(this.material)).copy(this)}});
    Dc.prototype=Object.assign(Object.create(x.prototype),{constructor:Dc,copy:function(a){x.prototype.copy.call(this,a,!1);a=a.levels;for(var b=0,c=a.length;b<c;b++){var d=a[b];this.addLevel(d.object.clone(),d.distance)}return this},addLevel:function(a,b){void 0===b&&(b=0);b=Math.abs(b);for(var c=this.levels,d=0;d<c.length&&!(b<c[d].distance);d++);c.splice(d,0,{distance:b,object:a});this.add(a)},getObjectForDistance:function(a){for(var b=this.levels,c=1,d=b.length;c<d&&!(a<b[c].distance);c++);return b[c-
    1].object},raycast:function(){var a=new p;return function(b,c){a.setFromMatrixPosition(this.matrixWorld);var d=b.ray.origin.distanceTo(a);this.getObjectForDistance(d).raycast(b,c)}}(),update:function(){var a=new p,b=new p;return function(c){var d=this.levels;if(1<d.length){a.setFromMatrixPosition(c.matrixWorld);b.setFromMatrixPosition(this.matrixWorld);c=a.distanceTo(b);d[0].object.visible=!0;for(var e=1,f=d.length;e<f;e++)if(c>=d[e].distance)d[e-1].object.visible=!1,d[e].object.visible=!0;else break;
    for(;e<f;e++)d[e].object.visible=!1}}}(),toJSON:function(a){a=x.prototype.toJSON.call(this,a);a.object.levels=[];for(var b=this.levels,c=0,d=b.length;c<d;c++){var e=b[c];a.object.levels.push({object:e.object.uuid,distance:e.distance})}return a}});Object.assign(Ec.prototype,{calculateInverses:function(){this.boneInverses=[];for(var a=0,b=this.bones.length;a<b;a++){var c=new O;this.bones[a]&&c.getInverse(this.bones[a].matrixWorld);this.boneInverses.push(c)}},pose:function(){var a,b;var c=0;for(b=this.bones.length;c<
    b;c++)(a=this.bones[c])&&a.matrixWorld.getInverse(this.boneInverses[c]);c=0;for(b=this.bones.length;c<b;c++)if(a=this.bones[c])a.parent&&a.parent.isBone?(a.matrix.getInverse(a.parent.matrixWorld),a.matrix.multiply(a.matrixWorld)):a.matrix.copy(a.matrixWorld),a.matrix.decompose(a.position,a.quaternion,a.scale)},update:function(){var a=new O,b=new O;return function(){for(var c=this.bones,d=this.boneInverses,e=this.boneMatrices,f=this.boneTexture,g=0,h=c.length;g<h;g++)a.multiplyMatrices(c[g]?c[g].matrixWorld:
    b,d[g]),a.toArray(e,16*g);void 0!==f&&(f.needsUpdate=!0)}}(),clone:function(){return new Ec(this.bones,this.boneInverses)}});wd.prototype=Object.assign(Object.create(x.prototype),{constructor:wd,isBone:!0});xd.prototype=Object.assign(Object.create(ra.prototype),{constructor:xd,isSkinnedMesh:!0,initBones:function(){var a=[],b;if(this.geometry&&void 0!==this.geometry.bones){var c=0;for(b=this.geometry.bones.length;c<b;c++){var d=this.geometry.bones[c];var e=new wd;a.push(e);e.name=d.name;e.position.fromArray(d.pos);
    e.quaternion.fromArray(d.rotq);void 0!==d.scl&&e.scale.fromArray(d.scl)}c=0;for(b=this.geometry.bones.length;c<b;c++)d=this.geometry.bones[c],-1!==d.parent&&null!==d.parent&&void 0!==a[d.parent]?a[d.parent].add(a[c]):this.add(a[c])}this.updateMatrixWorld(!0);return a},bind:function(a,b){this.skeleton=a;void 0===b&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),b=this.matrixWorld);this.bindMatrix.copy(b);this.bindMatrixInverse.getInverse(b)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){var a;
    if(this.geometry&&this.geometry.isGeometry)for(a=0;a<this.geometry.skinWeights.length;a++){var b=this.geometry.skinWeights[a];var c=1/b.manhattanLength();Infinity!==c?b.multiplyScalar(c):b.set(1,0,0,0)}else if(this.geometry&&this.geometry.isBufferGeometry){var b=new aa,d=this.geometry.attributes.skinWeight;for(a=0;a<d.count;a++)b.x=d.getX(a),b.y=d.getY(a),b.z=d.getZ(a),b.w=d.getW(a),c=1/b.manhattanLength(),Infinity!==c?b.multiplyScalar(c):b.set(1,0,0,0),d.setXYZW(a,b.x,b.y,b.z,b.w)}},updateMatrixWorld:function(a){ra.prototype.updateMatrixWorld.call(this,
    a);"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});W.prototype=Object.create(P.prototype);W.prototype.constructor=W;W.prototype.isLineBasicMaterial=!0;W.prototype.copy=function(a){P.prototype.copy.call(this,a);this.color.copy(a.color);
    this.linewidth=a.linewidth;this.linecap=a.linecap;this.linejoin=a.linejoin;return this};sa.prototype=Object.assign(Object.create(x.prototype),{constructor:sa,isLine:!0,raycast:function(){var a=new O,b=new sb,c=new Ia;return function(d,e){var f=d.linePrecision,f=f*f,g=this.geometry,h=this.matrixWorld;null===g.boundingSphere&&g.computeBoundingSphere();c.copy(g.boundingSphere);c.applyMatrix4(h);if(!1!==d.ray.intersectsSphere(c)){a.getInverse(h);b.copy(d.ray).applyMatrix4(a);var k=new p,m=new p,h=new p,
    l=new p,n=this&&this.isLineSegments?2:1;if(g.isBufferGeometry){var u=g.index;var r=g.attributes.position.array;if(null!==u)for(var t=u.array,g=0,v=t.length-1;g<v;g+=n)u=t[g+1],k.fromArray(r,3*t[g]),m.fromArray(r,3*u),u=b.distanceSqToSegment(k,m,l,h),u>f||(l.applyMatrix4(this.matrixWorld),u=d.ray.origin.distanceTo(l),u<d.near||u>d.far||e.push({distance:u,point:h.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this}));else for(g=0,v=r.length/3-1;g<v;g+=n)k.fromArray(r,
    3*g),m.fromArray(r,3*g+3),u=b.distanceSqToSegment(k,m,l,h),u>f||(l.applyMatrix4(this.matrixWorld),u=d.ray.origin.distanceTo(l),u<d.near||u>d.far||e.push({distance:u,point:h.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this}))}else if(g.isGeometry)for(k=g.vertices,m=k.length,g=0;g<m-1;g+=n)u=b.distanceSqToSegment(k[g],k[g+1],l,h),u>f||(l.applyMatrix4(this.matrixWorld),u=d.ray.origin.distanceTo(l),u<d.near||u>d.far||e.push({distance:u,point:h.clone().applyMatrix4(this.matrixWorld),
    index:g,face:null,faceIndex:null,object:this}))}}}(),clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});X.prototype=Object.assign(Object.create(sa.prototype),{constructor:X,isLineSegments:!0});yd.prototype=Object.assign(Object.create(sa.prototype),{constructor:yd,isLineLoop:!0});Ka.prototype=Object.create(P.prototype);Ka.prototype.constructor=Ka;Ka.prototype.isPointsMaterial=!0;Ka.prototype.copy=function(a){P.prototype.copy.call(this,a);this.color.copy(a.color);
    this.map=a.map;this.size=a.size;this.sizeAttenuation=a.sizeAttenuation;return this};Rb.prototype=Object.assign(Object.create(x.prototype),{constructor:Rb,isPoints:!0,raycast:function(){var a=new O,b=new sb,c=new Ia;return function(d,e){function f(a,c){var f=b.distanceSqToPoint(a);if(f<l){a=b.closestPointToPoint(a);a.applyMatrix4(k);var h=d.ray.origin.distanceTo(a);h<d.near||h>d.far||e.push({distance:h,distanceToRay:Math.sqrt(f),point:a.clone(),index:c,face:null,object:g})}}var g=this,h=this.geometry,
    k=this.matrixWorld,m=d.params.Points.threshold;null===h.boundingSphere&&h.computeBoundingSphere();c.copy(h.boundingSphere);c.applyMatrix4(k);c.radius+=m;if(!1!==d.ray.intersectsSphere(c)){a.getInverse(k);b.copy(d.ray).applyMatrix4(a);var m=m/((this.scale.x+this.scale.y+this.scale.z)/3),l=m*m,m=new p;if(h.isBufferGeometry){var n=h.index,h=h.attributes.position.array;if(null!==n)for(var u=n.array,n=0,r=u.length;n<r;n++){var t=u[n];m.fromArray(h,3*t);f(m,t)}else for(n=0,u=h.length/3;n<u;n++)m.fromArray(h,
    3*n),f(m,n)}else for(m=h.vertices,n=0,u=m.length;n<u;n++)f(m[n],n)}}}(),clone:function(){return(new this.constructor(this.geometry,this.material)).copy(this)}});Fc.prototype=Object.assign(Object.create(x.prototype),{constructor:Fc,isGroup:!0});ee.prototype=Object.assign(Object.create(U.prototype),{constructor:ee,isVideoTexture:!0,update:function(){var a=this.image;a.readyState>=a.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}});Sb.prototype=Object.create(U.prototype);Sb.prototype.constructor=Sb;Sb.prototype.isCompressedTexture=
    !0;Gc.prototype=Object.create(U.prototype);Gc.prototype.constructor=Gc;Gc.prototype.isDepthTexture=!0;Tb.prototype=Object.create(E.prototype);Tb.prototype.constructor=Tb;Hc.prototype=Object.create(L.prototype);Hc.prototype.constructor=Hc;Ub.prototype=Object.create(E.prototype);Ub.prototype.constructor=Ub;Ic.prototype=Object.create(L.prototype);Ic.prototype.constructor=Ic;ja.prototype=Object.create(E.prototype);ja.prototype.constructor=ja;Jc.prototype=Object.create(L.prototype);Jc.prototype.constructor=
    Jc;Vb.prototype=Object.create(ja.prototype);Vb.prototype.constructor=Vb;Kc.prototype=Object.create(L.prototype);Kc.prototype.constructor=Kc;ub.prototype=Object.create(ja.prototype);ub.prototype.constructor=ub;Lc.prototype=Object.create(L.prototype);Lc.prototype.constructor=Lc;Wb.prototype=Object.create(ja.prototype);Wb.prototype.constructor=Wb;Mc.prototype=Object.create(L.prototype);Mc.prototype.constructor=Mc;Xb.prototype=Object.create(ja.prototype);Xb.prototype.constructor=Xb;Nc.prototype=Object.create(L.prototype);
    Nc.prototype.constructor=Nc;Yb.prototype=Object.create(E.prototype);Yb.prototype.constructor=Yb;Oc.prototype=Object.create(L.prototype);Oc.prototype.constructor=Oc;Zb.prototype=Object.create(E.prototype);Zb.prototype.constructor=Zb;Pc.prototype=Object.create(L.prototype);Pc.prototype.constructor=Pc;$b.prototype=Object.create(E.prototype);$b.prototype.constructor=$b;var Lg={triangulate:function(a,b,c){c=c||2;var d=b&&b.length,e=d?b[0]*c:a.length,f=bf(a,0,e,c,!0),g=[];if(!f)return g;var h;if(d){var k=
    c,d=[],m;var l=0;for(m=b.length;l<m;l++){var n=b[l]*k;var p=l<m-1?b[l+1]*k:a.length;n=bf(a,n,p,k,!1);n===n.next&&(n.steiner=!0);d.push(Jg(n))}d.sort(Hg);for(l=0;l<d.length;l++){b=d[l];k=f;if(k=Ig(b,k))b=ef(k,b),Rc(b,b.next);f=Rc(f,f.next)}}if(a.length>80*c){var r=h=a[0];var t=d=a[1];for(k=c;k<e;k+=c)l=a[k],b=a[k+1],l<r&&(r=l),b<t&&(t=b),l>h&&(h=l),b>d&&(d=b);h=Math.max(h-r,d-t);h=0!==h?1/h:0}Sc(f,g,c,r,t,h);return g}},$a={area:function(a){for(var b=a.length,c=0,d=b-1,e=0;e<b;d=e++)c+=a[d].x*a[e].y-
    a[e].x*a[d].y;return.5*c},isClockWise:function(a){return 0>$a.area(a)},triangulateShape:function(a,b){function c(a){var b=a.length;2<b&&a[b-1].equals(a[0])&&a.pop()}function d(a,b){for(var c=0;c<b.length;c++)a.push(b[c].x),a.push(b[c].y)}var e=[],f=[],g=[];c(a);d(e,a);var h=a.length;b.forEach(c);for(a=0;a<b.length;a++)f.push(h),h+=b[a].length,d(e,b[a]);b=Lg.triangulate(e,f);for(a=0;a<b.length;a+=3)g.push(b.slice(a,a+3));return g}};ib.prototype=Object.create(L.prototype);ib.prototype.constructor=ib;
    La.prototype=Object.create(E.prototype);La.prototype.constructor=La;La.prototype.getArrays=function(){var a=this.getAttribute("position"),a=a?Array.prototype.slice.call(a.array):[],b=this.getAttribute("uv"),b=b?Array.prototype.slice.call(b.array):[],c=this.index,c=c?Array.prototype.slice.call(c.array):[];return{position:a,uv:b,index:c}};La.prototype.addShapeList=function(a,b){var c=a.length;b.arrays=this.getArrays();for(var d=0;d<c;d++)this.addShape(a[d],b);this.setIndex(b.arrays.index);this.addAttribute("position",
    new B(b.arrays.position,3));this.addAttribute("uv",new B(b.arrays.uv,2))};La.prototype.addShape=function(a,b){function c(a,b,c){b||console.error("THREE.ExtrudeGeometry: vec does not exist");return b.clone().multiplyScalar(c).add(a)}function d(a,b,c){var d=a.x-b.x;var e=a.y-b.y;var f=c.x-a.x;var g=c.y-a.y,h=d*d+e*e;if(Math.abs(d*g-e*f)>Number.EPSILON){var k=Math.sqrt(h),m=Math.sqrt(f*f+g*g),h=b.x-e/k;b=b.y+d/k;g=((c.x-g/m-h)*g-(c.y+f/m-b)*f)/(d*g-e*f);f=h+d*g-a.x;d=b+e*g-a.y;e=f*f+d*d;if(2>=e)return new D(f,
    d);e=Math.sqrt(e/2)}else a=!1,d>Number.EPSILON?f>Number.EPSILON&&(a=!0):d<-Number.EPSILON?f<-Number.EPSILON&&(a=!0):Math.sign(e)===Math.sign(g)&&(a=!0),a?(f=-e,e=Math.sqrt(h)):(f=d,d=e,e=Math.sqrt(h/2));return new D(f/e,d/e)}function e(a,b){for(G=a.length;0<=--G;){var c=G;var d=G-1;0>d&&(d=a.length-1);var e,f=x+2*w;for(e=0;e<f;e++){var g=X*e,m=X*(e+1),n=b+d+g,q=b+d+m,m=b+c+m;h(b+c+g);h(n);h(m);h(n);h(q);h(m);g=l.length/3;g=E.generateSideWallUV(S,l,g-6,g-3,g-2,g-1);k(g[0]);k(g[1]);k(g[3]);k(g[1]);
    k(g[2]);k(g[3])}}}function f(a,b,c){r.push(a);r.push(b);r.push(c)}function g(a,b,c){h(a);h(b);h(c);a=l.length/3;a=E.generateTopUV(S,l,a-3,a-2,a-1);k(a[0]);k(a[1]);k(a[2])}function h(a){n.push(l.length/3);l.push(r[3*a+0]);l.push(r[3*a+1]);l.push(r[3*a+2])}function k(a){u.push(a.x);u.push(a.y)}var m=b.arrays?b.arrays:this.getArrays(),l=m.position,n=m.index,u=m.uv,r=[],m=void 0!==b.amount?b.amount:100,t=void 0!==b.bevelThickness?b.bevelThickness:6,v=void 0!==b.bevelSize?b.bevelSize:t-2,w=void 0!==b.bevelSegments?
    b.bevelSegments:3,z=void 0!==b.bevelEnabled?b.bevelEnabled:!0,y=void 0!==b.curveSegments?b.curveSegments:12,x=void 0!==b.steps?b.steps:1,A=b.extrudePath,C=!1,E=void 0!==b.UVGenerator?b.UVGenerator:ib.WorldUVGenerator;if(A){var H=A.getSpacedPoints(x);C=!0;z=!1;var K=void 0!==b.frames?b.frames:A.computeFrenetFrames(x,!1);var L=new p;var M=new p;var P=new p}z||(v=t=w=0);var O,S=this,y=a.extractPoints(y);a=y.shape;var Q=y.holes;if(!$a.isClockWise(a)){a=a.reverse();var N=0;for(O=Q.length;N<O;N++){var R=
    Q[N];$a.isClockWise(R)&&(Q[N]=R.reverse())}}var U=$a.triangulateShape(a,Q),W=a;N=0;for(O=Q.length;N<O;N++)R=Q[N],a=a.concat(R);var V,X=a.length,T,ba=U.length,y=[],G=0;var Y=W.length;var ea=Y-1;for(V=G+1;G<Y;G++,ea++,V++)ea===Y&&(ea=0),V===Y&&(V=0),y[G]=d(W[G],W[ea],W[V]);var A=[],ca=y.concat();N=0;for(O=Q.length;N<O;N++){R=Q[N];var aa=[];G=0;Y=R.length;ea=Y-1;for(V=G+1;G<Y;G++,ea++,V++)ea===Y&&(ea=0),V===Y&&(V=0),aa[G]=d(R[G],R[ea],R[V]);A.push(aa);ca=ca.concat(aa)}for(ea=0;ea<w;ea++){Y=ea/w;var da=
    t*Math.cos(Y*Math.PI/2);V=v*Math.sin(Y*Math.PI/2);G=0;for(Y=W.length;G<Y;G++){var fa=c(W[G],y[G],V);f(fa.x,fa.y,-da)}N=0;for(O=Q.length;N<O;N++)for(R=Q[N],aa=A[N],G=0,Y=R.length;G<Y;G++)fa=c(R[G],aa[G],V),f(fa.x,fa.y,-da)}V=v;for(G=0;G<X;G++)fa=z?c(a[G],ca[G],V):a[G],C?(M.copy(K.normals[0]).multiplyScalar(fa.x),L.copy(K.binormals[0]).multiplyScalar(fa.y),P.copy(H[0]).add(M).add(L),f(P.x,P.y,P.z)):f(fa.x,fa.y,0);for(Y=1;Y<=x;Y++)for(G=0;G<X;G++)fa=z?c(a[G],ca[G],V):a[G],C?(M.copy(K.normals[Y]).multiplyScalar(fa.x),
    L.copy(K.binormals[Y]).multiplyScalar(fa.y),P.copy(H[Y]).add(M).add(L),f(P.x,P.y,P.z)):f(fa.x,fa.y,m/x*Y);for(ea=w-1;0<=ea;ea--){Y=ea/w;da=t*Math.cos(Y*Math.PI/2);V=v*Math.sin(Y*Math.PI/2);G=0;for(Y=W.length;G<Y;G++)fa=c(W[G],y[G],V),f(fa.x,fa.y,m+da);N=0;for(O=Q.length;N<O;N++)for(R=Q[N],aa=A[N],G=0,Y=R.length;G<Y;G++)fa=c(R[G],aa[G],V),C?f(fa.x,fa.y+H[x-1].y,H[x-1].x+da):f(fa.x,fa.y,m+da)}(function(){var a=l.length/3;if(z){var c=0*X;for(G=0;G<ba;G++)T=U[G],g(T[2]+c,T[1]+c,T[0]+c);c=X*(x+2*w);for(G=
    0;G<ba;G++)T=U[G],g(T[0]+c,T[1]+c,T[2]+c)}else{for(G=0;G<ba;G++)T=U[G],g(T[2],T[1],T[0]);for(G=0;G<ba;G++)T=U[G],g(T[0]+X*x,T[1]+X*x,T[2]+X*x)}S.addGroup(a,l.length/3-a,void 0!==b.material?b.material:0)})();(function(){var a=l.length/3,c=0;e(W,c);c+=W.length;N=0;for(O=Q.length;N<O;N++)R=Q[N],e(R,c),c+=R.length;S.addGroup(a,l.length/3-a,void 0!==b.extrudeMaterial?b.extrudeMaterial:1)})();b.arrays||(this.setIndex(n),this.addAttribute("position",new B(l,3)),this.addAttribute("uv",new B(u,2)))};ib.WorldUVGenerator=
    {generateTopUV:function(a,b,c,d,e){a=b[3*d];d=b[3*d+1];var f=b[3*e];e=b[3*e+1];return[new D(b[3*c],b[3*c+1]),new D(a,d),new D(f,e)]},generateSideWallUV:function(a,b,c,d,e,f){a=b[3*c];var g=b[3*c+1];c=b[3*c+2];var h=b[3*d],k=b[3*d+1];d=b[3*d+2];var m=b[3*e],l=b[3*e+1];e=b[3*e+2];var n=b[3*f],p=b[3*f+1];b=b[3*f+2];return.01>Math.abs(g-k)?[new D(a,1-c),new D(h,1-d),new D(m,1-e),new D(n,1-b)]:[new D(g,1-c),new D(k,1-d),new D(l,1-e),new D(p,1-b)]}};Uc.prototype=Object.create(L.prototype);Uc.prototype.constructor=
    Uc;ac.prototype=Object.create(La.prototype);ac.prototype.constructor=ac;Vc.prototype=Object.create(L.prototype);Vc.prototype.constructor=Vc;wb.prototype=Object.create(E.prototype);wb.prototype.constructor=wb;Wc.prototype=Object.create(L.prototype);Wc.prototype.constructor=Wc;bc.prototype=Object.create(E.prototype);bc.prototype.constructor=bc;Xc.prototype=Object.create(L.prototype);Xc.prototype.constructor=Xc;cc.prototype=Object.create(E.prototype);cc.prototype.constructor=cc;xb.prototype=Object.create(L.prototype);
    xb.prototype.constructor=xb;xb.prototype.toJSON=function(){var a=L.prototype.toJSON.call(this);return ff(this.parameters.shapes,a)};yb.prototype=Object.create(E.prototype);yb.prototype.constructor=yb;yb.prototype.toJSON=function(){var a=E.prototype.toJSON.call(this);return ff(this.parameters.shapes,a)};dc.prototype=Object.create(E.prototype);dc.prototype.constructor=dc;zb.prototype=Object.create(L.prototype);zb.prototype.constructor=zb;ab.prototype=Object.create(E.prototype);ab.prototype.constructor=
    ab;Yc.prototype=Object.create(zb.prototype);Yc.prototype.constructor=Yc;Zc.prototype=Object.create(ab.prototype);Zc.prototype.constructor=Zc;$c.prototype=Object.create(L.prototype);$c.prototype.constructor=$c;ec.prototype=Object.create(E.prototype);ec.prototype.constructor=ec;var ka=Object.freeze({WireframeGeometry:Tb,ParametricGeometry:Hc,ParametricBufferGeometry:Ub,TetrahedronGeometry:Jc,TetrahedronBufferGeometry:Vb,OctahedronGeometry:Kc,OctahedronBufferGeometry:ub,IcosahedronGeometry:Lc,IcosahedronBufferGeometry:Wb,
    DodecahedronGeometry:Mc,DodecahedronBufferGeometry:Xb,PolyhedronGeometry:Ic,PolyhedronBufferGeometry:ja,TubeGeometry:Nc,TubeBufferGeometry:Yb,TorusKnotGeometry:Oc,TorusKnotBufferGeometry:Zb,TorusGeometry:Pc,TorusBufferGeometry:$b,TextGeometry:Uc,TextBufferGeometry:ac,SphereGeometry:Vc,SphereBufferGeometry:wb,RingGeometry:Wc,RingBufferGeometry:bc,PlaneGeometry:Ac,PlaneBufferGeometry:rb,LatheGeometry:Xc,LatheBufferGeometry:cc,ShapeGeometry:xb,ShapeBufferGeometry:yb,ExtrudeGeometry:ib,ExtrudeBufferGeometry:La,
    EdgesGeometry:dc,ConeGeometry:Yc,ConeBufferGeometry:Zc,CylinderGeometry:zb,CylinderBufferGeometry:ab,CircleGeometry:$c,CircleBufferGeometry:ec,BoxGeometry:Mb,BoxBufferGeometry:qb});fc.prototype=Object.create(P.prototype);fc.prototype.constructor=fc;fc.prototype.isShadowMaterial=!0;gc.prototype=Object.create(Fa.prototype);gc.prototype.constructor=gc;gc.prototype.isRawShaderMaterial=!0;Ua.prototype=Object.create(P.prototype);Ua.prototype.constructor=Ua;Ua.prototype.isMeshStandardMaterial=!0;Ua.prototype.copy=
    function(a){P.prototype.copy.call(this,a);this.defines={STANDARD:""};this.color.copy(a.color);this.roughness=a.roughness;this.metalness=a.metalness;this.map=a.map;this.lightMap=a.lightMap;this.lightMapIntensity=a.lightMapIntensity;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap=a.emissiveMap;this.emissiveIntensity=a.emissiveIntensity;this.bumpMap=a.bumpMap;this.bumpScale=a.bumpScale;this.normalMap=a.normalMap;this.normalScale.copy(a.normalScale);
    this.displacementMap=a.displacementMap;this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;this.roughnessMap=a.roughnessMap;this.metalnessMap=a.metalnessMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.envMapIntensity=a.envMapIntensity;this.refractionRatio=a.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;this.skinning=a.skinning;this.morphTargets=
    a.morphTargets;this.morphNormals=a.morphNormals;return this};Ab.prototype=Object.create(Ua.prototype);Ab.prototype.constructor=Ab;Ab.prototype.isMeshPhysicalMaterial=!0;Ab.prototype.copy=function(a){Ua.prototype.copy.call(this,a);this.defines={PHYSICAL:""};this.reflectivity=a.reflectivity;this.clearCoat=a.clearCoat;this.clearCoatRoughness=a.clearCoatRoughness;return this};Ma.prototype=Object.create(P.prototype);Ma.prototype.constructor=Ma;Ma.prototype.isMeshPhongMaterial=!0;Ma.prototype.copy=function(a){P.prototype.copy.call(this,
    a);this.color.copy(a.color);this.specular.copy(a.specular);this.shininess=a.shininess;this.map=a.map;this.lightMap=a.lightMap;this.lightMapIntensity=a.lightMapIntensity;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap=a.emissiveMap;this.emissiveIntensity=a.emissiveIntensity;this.bumpMap=a.bumpMap;this.bumpScale=a.bumpScale;this.normalMap=a.normalMap;this.normalScale.copy(a.normalScale);this.displacementMap=a.displacementMap;this.displacementScale=
    a.displacementScale;this.displacementBias=a.displacementBias;this.specularMap=a.specularMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.combine=a.combine;this.reflectivity=a.reflectivity;this.refractionRatio=a.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;return this};Bb.prototype=
    Object.create(Ma.prototype);Bb.prototype.constructor=Bb;Bb.prototype.isMeshToonMaterial=!0;Bb.prototype.copy=function(a){Ma.prototype.copy.call(this,a);this.gradientMap=a.gradientMap;return this};Cb.prototype=Object.create(P.prototype);Cb.prototype.constructor=Cb;Cb.prototype.isMeshNormalMaterial=!0;Cb.prototype.copy=function(a){P.prototype.copy.call(this,a);this.bumpMap=a.bumpMap;this.bumpScale=a.bumpScale;this.normalMap=a.normalMap;this.normalScale.copy(a.normalScale);this.displacementMap=a.displacementMap;
    this.displacementScale=a.displacementScale;this.displacementBias=a.displacementBias;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;return this};Db.prototype=Object.create(P.prototype);Db.prototype.constructor=Db;Db.prototype.isMeshLambertMaterial=!0;Db.prototype.copy=function(a){P.prototype.copy.call(this,a);this.color.copy(a.color);this.map=a.map;this.lightMap=a.lightMap;this.lightMapIntensity=
    a.lightMapIntensity;this.aoMap=a.aoMap;this.aoMapIntensity=a.aoMapIntensity;this.emissive.copy(a.emissive);this.emissiveMap=a.emissiveMap;this.emissiveIntensity=a.emissiveIntensity;this.specularMap=a.specularMap;this.alphaMap=a.alphaMap;this.envMap=a.envMap;this.combine=a.combine;this.reflectivity=a.reflectivity;this.refractionRatio=a.refractionRatio;this.wireframe=a.wireframe;this.wireframeLinewidth=a.wireframeLinewidth;this.wireframeLinecap=a.wireframeLinecap;this.wireframeLinejoin=a.wireframeLinejoin;
    this.skinning=a.skinning;this.morphTargets=a.morphTargets;this.morphNormals=a.morphNormals;return this};Eb.prototype=Object.create(W.prototype);Eb.prototype.constructor=Eb;Eb.prototype.isLineDashedMaterial=!0;Eb.prototype.copy=function(a){W.prototype.copy.call(this,a);this.scale=a.scale;this.dashSize=a.dashSize;this.gapSize=a.gapSize;return this};var Mg=Object.freeze({ShadowMaterial:fc,SpriteMaterial:hb,RawShaderMaterial:gc,ShaderMaterial:Fa,PointsMaterial:Ka,MeshPhysicalMaterial:Ab,MeshStandardMaterial:Ua,
    MeshPhongMaterial:Ma,MeshToonMaterial:Bb,MeshNormalMaterial:Cb,MeshLambertMaterial:Db,MeshDepthMaterial:eb,MeshDistanceMaterial:fb,MeshBasicMaterial:Aa,LineDashedMaterial:Eb,LineBasicMaterial:W,Material:P}),Ib={enabled:!1,files:{},add:function(a,b){!1!==this.enabled&&(this.files[a]=b)},get:function(a){if(!1!==this.enabled)return this.files[a]},remove:function(a){delete this.files[a]},clear:function(){this.files={}}},xa=new he,cb={};Object.assign(Na.prototype,{load:function(a,b,c,d){void 0===a&&(a=
    "");void 0!==this.path&&(a=this.path+a);a=this.manager.resolveURL(a);var e=this,f=Ib.get(a);if(void 0!==f)return e.manager.itemStart(a),setTimeout(function(){b&&b(f);e.manager.itemEnd(a)},0),f;if(void 0!==cb[a])cb[a].push({onLoad:b,onProgress:c,onError:d});else{var g=a.match(/^data:(.*?)(;base64)?,(.*)$/);if(g){c=g[1];var h=!!g[2],g=g[3],g=window.decodeURIComponent(g);h&&(g=window.atob(g));try{var k=(this.responseType||"").toLowerCase();switch(k){case "arraybuffer":case "blob":for(var m=new Uint8Array(g.length),
    h=0;h<g.length;h++)m[h]=g.charCodeAt(h);var l="blob"===k?new Blob([m.buffer],{type:c}):m.buffer;break;case "document":l=(new DOMParser).parseFromString(g,c);break;case "json":l=JSON.parse(g);break;default:l=g}window.setTimeout(function(){b&&b(l);e.manager.itemEnd(a)},0)}catch(u){window.setTimeout(function(){d&&d(u);e.manager.itemEnd(a);e.manager.itemError(a)},0)}}else{cb[a]=[];cb[a].push({onLoad:b,onProgress:c,onError:d});var n=new XMLHttpRequest;n.open("GET",a,!0);n.addEventListener("load",function(b){var c=
    this.response;Ib.add(a,c);var d=cb[a];delete cb[a];if(200===this.status){for(var f=0,g=d.length;f<g;f++){var h=d[f];if(h.onLoad)h.onLoad(c)}e.manager.itemEnd(a)}else if(0===this.status){console.warn("THREE.FileLoader: HTTP Status 0 received.");f=0;for(g=d.length;f<g;f++)if(h=d[f],h.onLoad)h.onLoad(c);e.manager.itemEnd(a)}else{f=0;for(g=d.length;f<g;f++)if(h=d[f],h.onError)h.onError(b);e.manager.itemEnd(a);e.manager.itemError(a)}},!1);n.addEventListener("progress",function(b){for(var c=cb[a],d=0,e=
    c.length;d<e;d++){var f=c[d];if(f.onProgress)f.onProgress(b)}},!1);n.addEventListener("error",function(b){var c=cb[a];delete cb[a];for(var d=0,f=c.length;d<f;d++){var g=c[d];if(g.onError)g.onError(b)}e.manager.itemEnd(a);e.manager.itemError(a)},!1);void 0!==this.responseType&&(n.responseType=this.responseType);void 0!==this.withCredentials&&(n.withCredentials=this.withCredentials);n.overrideMimeType&&n.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain");for(h in this.requestHeader)n.setRequestHeader(h,
    this.requestHeader[h]);n.send(null)}e.manager.itemStart(a);return n}},setPath:function(a){this.path=a;return this},setResponseType:function(a){this.responseType=a;return this},setWithCredentials:function(a){this.withCredentials=a;return this},setMimeType:function(a){this.mimeType=a;return this},setRequestHeader:function(a){this.requestHeader=a;return this}});Object.assign(gf.prototype,{load:function(a,b,c,d){function e(e){m.load(a[e],function(a){a=g._parser(a,!0);h[e]={width:a.width,height:a.height,
    format:a.format,mipmaps:a.mipmaps};f+=1;6===f&&(1===a.mipmapCount&&(k.minFilter=1006),k.format=a.format,k.needsUpdate=!0,b&&b(k))},c,d)}var f,g=this,h=[],k=new Sb;k.image=h;var m=new Na(this.manager);m.setPath(this.path);m.setResponseType("arraybuffer");if(Array.isArray(a))for(var l=f=0,n=a.length;l<n;++l)e(l);else m.load(a,function(a){a=g._parser(a,!0);if(a.isCubemap)for(var c=a.mipmaps.length/a.mipmapCount,d=0;d<c;d++){h[d]={mipmaps:[]};for(var e=0;e<a.mipmapCount;e++)h[d].mipmaps.push(a.mipmaps[d*
    a.mipmapCount+e]),h[d].format=a.format,h[d].width=a.width,h[d].height=a.height}else k.image.width=a.width,k.image.height=a.height,k.mipmaps=a.mipmaps;1===a.mipmapCount&&(k.minFilter=1006);k.format=a.format;k.needsUpdate=!0;b&&b(k)},c,d);return k},setPath:function(a){this.path=a;return this}});Object.assign(ie.prototype,{load:function(a,b,c,d){var e=this,f=new lb,g=new Na(this.manager);g.setResponseType("arraybuffer");g.load(a,function(a){if(a=e._parser(a))void 0!==a.image?f.image=a.image:void 0!==
    a.data&&(f.image.width=a.width,f.image.height=a.height,f.image.data=a.data),f.wrapS=void 0!==a.wrapS?a.wrapS:1001,f.wrapT=void 0!==a.wrapT?a.wrapT:1001,f.magFilter=void 0!==a.magFilter?a.magFilter:1006,f.minFilter=void 0!==a.minFilter?a.minFilter:1008,f.anisotropy=void 0!==a.anisotropy?a.anisotropy:1,void 0!==a.format&&(f.format=a.format),void 0!==a.type&&(f.type=a.type),void 0!==a.mipmaps&&(f.mipmaps=a.mipmaps),1===a.mipmapCount&&(f.minFilter=1006),f.needsUpdate=!0,b&&b(f,a)},c,d);return f}});Object.assign(ad.prototype,
    {crossOrigin:"Anonymous",load:function(a,b,c,d){void 0===a&&(a="");void 0!==this.path&&(a=this.path+a);a=this.manager.resolveURL(a);var e=this,f=Ib.get(a);if(void 0!==f)return e.manager.itemStart(a),setTimeout(function(){b&&b(f);e.manager.itemEnd(a)},0),f;c=document.createElementNS("http://www.w3.org/1999/xhtml","img");c.addEventListener("load",function(){Ib.add(a,this);b&&b(this);e.manager.itemEnd(a)},!1);c.addEventListener("error",function(b){d&&d(b);e.manager.itemEnd(a);e.manager.itemError(a)},
    !1);"data:"!==a.substr(0,5)&&void 0!==this.crossOrigin&&(c.crossOrigin=this.crossOrigin);e.manager.itemStart(a);c.src=a;return c},setCrossOrigin:function(a){this.crossOrigin=a;return this},setPath:function(a){this.path=a;return this}});Object.assign(je.prototype,{crossOrigin:"Anonymous",load:function(a,b,c,d){function e(c){g.load(a[c],function(a){f.images[c]=a;h++;6===h&&(f.needsUpdate=!0,b&&b(f))},void 0,d)}var f=new db,g=new ad(this.manager);g.setCrossOrigin(this.crossOrigin);g.setPath(this.path);
    var h=0;for(c=0;c<a.length;++c)e(c);return f},setCrossOrigin:function(a){this.crossOrigin=a;return this},setPath:function(a){this.path=a;return this}});Object.assign(Ad.prototype,{crossOrigin:"Anonymous",load:function(a,b,c,d){var e=new U,f=new ad(this.manager);f.setCrossOrigin(this.crossOrigin);f.setPath(this.path);f.load(a,function(c){e.image=c;c=0<a.search(/\.(jpg|jpeg)$/)||0===a.search(/^data\:image\/jpeg/);e.format=c?1022:1023;e.needsUpdate=!0;void 0!==b&&b(e)},c,d);return e},setCrossOrigin:function(a){this.crossOrigin=
    a;return this},setPath:function(a){this.path=a;return this}});Object.assign(C.prototype,{getPoint:function(){console.warn("THREE.Curve: .getPoint() not implemented.");return null},getPointAt:function(a,b){a=this.getUtoTmapping(a);return this.getPoint(a,b)},getPoints:function(a){void 0===a&&(a=5);for(var b=[],c=0;c<=a;c++)b.push(this.getPoint(c/a));return b},getSpacedPoints:function(a){void 0===a&&(a=5);for(var b=[],c=0;c<=a;c++)b.push(this.getPointAt(c/a));return b},getLength:function(){var a=this.getLengths();
    return a[a.length-1]},getLengths:function(a){void 0===a&&(a=this.arcLengthDivisions);if(this.cacheArcLengths&&this.cacheArcLengths.length===a+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var b=[],c=this.getPoint(0),d,e=0;b.push(0);for(d=1;d<=a;d++){var f=this.getPoint(d/a);e+=f.distanceTo(c);b.push(e);c=f}return this.cacheArcLengths=b},updateArcLengths:function(){this.needsUpdate=!0;this.getLengths()},getUtoTmapping:function(a,b){var c=this.getLengths(),d=c.length;b=b?b:a*
    c[d-1];for(var e=0,f=d-1,g;e<=f;)if(a=Math.floor(e+(f-e)/2),g=c[a]-b,0>g)e=a+1;else if(0<g)f=a-1;else{f=a;break}a=f;if(c[a]===b)return a/(d-1);e=c[a];return(a+(b-e)/(c[a+1]-e))/(d-1)},getTangent:function(a){var b=a-1E-4;a+=1E-4;0>b&&(b=0);1<a&&(a=1);b=this.getPoint(b);return this.getPoint(a).clone().sub(b).normalize()},getTangentAt:function(a){a=this.getUtoTmapping(a);return this.getTangent(a)},computeFrenetFrames:function(a,b){var c=new p,d=[],e=[],f=[],g=new p,h=new O,k;for(k=0;k<=a;k++){var m=
    k/a;d[k]=this.getTangentAt(m);d[k].normalize()}e[0]=new p;f[0]=new p;k=Number.MAX_VALUE;m=Math.abs(d[0].x);var l=Math.abs(d[0].y),n=Math.abs(d[0].z);m<=k&&(k=m,c.set(1,0,0));l<=k&&(k=l,c.set(0,1,0));n<=k&&c.set(0,0,1);g.crossVectors(d[0],c).normalize();e[0].crossVectors(d[0],g);f[0].crossVectors(d[0],e[0]);for(k=1;k<=a;k++)e[k]=e[k-1].clone(),f[k]=f[k-1].clone(),g.crossVectors(d[k-1],d[k]),g.length()>Number.EPSILON&&(g.normalize(),c=Math.acos(Q.clamp(d[k-1].dot(d[k]),-1,1)),e[k].applyMatrix4(h.makeRotationAxis(g,
    c))),f[k].crossVectors(d[k],e[k]);if(!0===b)for(c=Math.acos(Q.clamp(e[0].dot(e[a]),-1,1)),c/=a,0<d[0].dot(g.crossVectors(e[0],e[a]))&&(c=-c),k=1;k<=a;k++)e[k].applyMatrix4(h.makeRotationAxis(d[k],c*k)),f[k].crossVectors(d[k],e[k]);return{tangents:d,normals:e,binormals:f}},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.arcLengthDivisions=a.arcLengthDivisions;return this},toJSON:function(){var a={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};a.arcLengthDivisions=
    this.arcLengthDivisions;a.type=this.type;return a},fromJSON:function(a){this.arcLengthDivisions=a.arcLengthDivisions;return this}});Ba.prototype=Object.create(C.prototype);Ba.prototype.constructor=Ba;Ba.prototype.isEllipseCurve=!0;Ba.prototype.getPoint=function(a,b){b=b||new D;for(var c=2*Math.PI,d=this.aEndAngle-this.aStartAngle,e=Math.abs(d)<Number.EPSILON;0>d;)d+=c;for(;d>c;)d-=c;d<Number.EPSILON&&(d=e?0:c);!0!==this.aClockwise||e||(d=d===c?-c:d-c);c=this.aStartAngle+a*d;a=this.aX+this.xRadius*
    Math.cos(c);var f=this.aY+this.yRadius*Math.sin(c);0!==this.aRotation&&(c=Math.cos(this.aRotation),d=Math.sin(this.aRotation),e=a-this.aX,f-=this.aY,a=e*c-f*d+this.aX,f=e*d+f*c+this.aY);return b.set(a,f)};Ba.prototype.copy=function(a){C.prototype.copy.call(this,a);this.aX=a.aX;this.aY=a.aY;this.xRadius=a.xRadius;this.yRadius=a.yRadius;this.aStartAngle=a.aStartAngle;this.aEndAngle=a.aEndAngle;this.aClockwise=a.aClockwise;this.aRotation=a.aRotation;return this};Ba.prototype.toJSON=function(){var a=
    C.prototype.toJSON.call(this);a.aX=this.aX;a.aY=this.aY;a.xRadius=this.xRadius;a.yRadius=this.yRadius;a.aStartAngle=this.aStartAngle;a.aEndAngle=this.aEndAngle;a.aClockwise=this.aClockwise;a.aRotation=this.aRotation;return a};Ba.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.aX=a.aX;this.aY=a.aY;this.xRadius=a.xRadius;this.yRadius=a.yRadius;this.aStartAngle=a.aStartAngle;this.aEndAngle=a.aEndAngle;this.aClockwise=a.aClockwise;this.aRotation=a.aRotation;return this};hc.prototype=
    Object.create(Ba.prototype);hc.prototype.constructor=hc;hc.prototype.isArcCurve=!0;var Td=new p,Ee=new ke,Fe=new ke,Ge=new ke;ca.prototype=Object.create(C.prototype);ca.prototype.constructor=ca;ca.prototype.isCatmullRomCurve3=!0;ca.prototype.getPoint=function(a,b){b=b||new p;var c=this.points,d=c.length;a*=d-(this.closed?0:1);var e=Math.floor(a);a-=e;this.closed?e+=0<e?0:(Math.floor(Math.abs(e)/c.length)+1)*c.length:0===a&&e===d-1&&(e=d-2,a=1);if(this.closed||0<e)var f=c[(e-1)%d];else Td.subVectors(c[0],
    c[1]).add(c[0]),f=Td;var g=c[e%d];var h=c[(e+1)%d];this.closed||e+2<d?c=c[(e+2)%d]:(Td.subVectors(c[d-1],c[d-2]).add(c[d-1]),c=Td);if("centripetal"===this.curveType||"chordal"===this.curveType){var k="chordal"===this.curveType?.5:.25,d=Math.pow(f.distanceToSquared(g),k),e=Math.pow(g.distanceToSquared(h),k),k=Math.pow(h.distanceToSquared(c),k);1E-4>e&&(e=1);1E-4>d&&(d=e);1E-4>k&&(k=e);Ee.initNonuniformCatmullRom(f.x,g.x,h.x,c.x,d,e,k);Fe.initNonuniformCatmullRom(f.y,g.y,h.y,c.y,d,e,k);Ge.initNonuniformCatmullRom(f.z,
    g.z,h.z,c.z,d,e,k)}else"catmullrom"===this.curveType&&(Ee.initCatmullRom(f.x,g.x,h.x,c.x,this.tension),Fe.initCatmullRom(f.y,g.y,h.y,c.y,this.tension),Ge.initCatmullRom(f.z,g.z,h.z,c.z,this.tension));b.set(Ee.calc(a),Fe.calc(a),Ge.calc(a));return b};ca.prototype.copy=function(a){C.prototype.copy.call(this,a);this.points=[];for(var b=0,c=a.points.length;b<c;b++)this.points.push(a.points[b].clone());this.closed=a.closed;this.curveType=a.curveType;this.tension=a.tension;return this};ca.prototype.toJSON=
    function(){var a=C.prototype.toJSON.call(this);a.points=[];for(var b=0,c=this.points.length;b<c;b++)a.points.push(this.points[b].toArray());a.closed=this.closed;a.curveType=this.curveType;a.tension=this.tension;return a};ca.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.points=[];for(var b=0,c=a.points.length;b<c;b++){var d=a.points[b];this.points.push((new p).fromArray(d))}this.closed=a.closed;this.curveType=a.curveType;this.tension=a.tension;return this};Oa.prototype=Object.create(C.prototype);
    Oa.prototype.constructor=Oa;Oa.prototype.isCubicBezierCurve=!0;Oa.prototype.getPoint=function(a,b){b=b||new D;var c=this.v0,d=this.v1,e=this.v2,f=this.v3;b.set(cd(a,c.x,d.x,e.x,f.x),cd(a,c.y,d.y,e.y,f.y));return b};Oa.prototype.copy=function(a){C.prototype.copy.call(this,a);this.v0.copy(a.v0);this.v1.copy(a.v1);this.v2.copy(a.v2);this.v3.copy(a.v3);return this};Oa.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.v0=this.v0.toArray();a.v1=this.v1.toArray();a.v2=this.v2.toArray();a.v3=
    this.v3.toArray();return a};Oa.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.v0.fromArray(a.v0);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);this.v3.fromArray(a.v3);return this};Va.prototype=Object.create(C.prototype);Va.prototype.constructor=Va;Va.prototype.isCubicBezierCurve3=!0;Va.prototype.getPoint=function(a,b){b=b||new p;var c=this.v0,d=this.v1,e=this.v2,f=this.v3;b.set(cd(a,c.x,d.x,e.x,f.x),cd(a,c.y,d.y,e.y,f.y),cd(a,c.z,d.z,e.z,f.z));return b};Va.prototype.copy=
    function(a){C.prototype.copy.call(this,a);this.v0.copy(a.v0);this.v1.copy(a.v1);this.v2.copy(a.v2);this.v3.copy(a.v3);return this};Va.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.v0=this.v0.toArray();a.v1=this.v1.toArray();a.v2=this.v2.toArray();a.v3=this.v3.toArray();return a};Va.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.v0.fromArray(a.v0);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);this.v3.fromArray(a.v3);return this};ya.prototype=Object.create(C.prototype);
    ya.prototype.constructor=ya;ya.prototype.isLineCurve=!0;ya.prototype.getPoint=function(a,b){b=b||new D;1===a?b.copy(this.v2):(b.copy(this.v2).sub(this.v1),b.multiplyScalar(a).add(this.v1));return b};ya.prototype.getPointAt=function(a,b){return this.getPoint(a,b)};ya.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()};ya.prototype.copy=function(a){C.prototype.copy.call(this,a);this.v1.copy(a.v1);this.v2.copy(a.v2);return this};ya.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);
    a.v1=this.v1.toArray();a.v2=this.v2.toArray();return a};ya.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);return this};Pa.prototype=Object.create(C.prototype);Pa.prototype.constructor=Pa;Pa.prototype.isLineCurve3=!0;Pa.prototype.getPoint=function(a,b){b=b||new p;1===a?b.copy(this.v2):(b.copy(this.v2).sub(this.v1),b.multiplyScalar(a).add(this.v1));return b};Pa.prototype.getPointAt=function(a,b){return this.getPoint(a,b)};Pa.prototype.copy=
    function(a){C.prototype.copy.call(this,a);this.v1.copy(a.v1);this.v2.copy(a.v2);return this};Pa.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.v1=this.v1.toArray();a.v2=this.v2.toArray();return a};Pa.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);return this};Qa.prototype=Object.create(C.prototype);Qa.prototype.constructor=Qa;Qa.prototype.isQuadraticBezierCurve=!0;Qa.prototype.getPoint=function(a,b){b=b||new D;var c=
    this.v0,d=this.v1,e=this.v2;b.set(bd(a,c.x,d.x,e.x),bd(a,c.y,d.y,e.y));return b};Qa.prototype.copy=function(a){C.prototype.copy.call(this,a);this.v0.copy(a.v0);this.v1.copy(a.v1);this.v2.copy(a.v2);return this};Qa.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.v0=this.v0.toArray();a.v1=this.v1.toArray();a.v2=this.v2.toArray();return a};Qa.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.v0.fromArray(a.v0);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);return this};
    Wa.prototype=Object.create(C.prototype);Wa.prototype.constructor=Wa;Wa.prototype.isQuadraticBezierCurve3=!0;Wa.prototype.getPoint=function(a,b){b=b||new p;var c=this.v0,d=this.v1,e=this.v2;b.set(bd(a,c.x,d.x,e.x),bd(a,c.y,d.y,e.y),bd(a,c.z,d.z,e.z));return b};Wa.prototype.copy=function(a){C.prototype.copy.call(this,a);this.v0.copy(a.v0);this.v1.copy(a.v1);this.v2.copy(a.v2);return this};Wa.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.v0=this.v0.toArray();a.v1=this.v1.toArray();
    a.v2=this.v2.toArray();return a};Wa.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.v0.fromArray(a.v0);this.v1.fromArray(a.v1);this.v2.fromArray(a.v2);return this};Ra.prototype=Object.create(C.prototype);Ra.prototype.constructor=Ra;Ra.prototype.isSplineCurve=!0;Ra.prototype.getPoint=function(a,b){b=b||new D;var c=this.points,d=(c.length-1)*a;a=Math.floor(d);var d=d-a,e=c[0===a?a:a-1],f=c[a],g=c[a>c.length-2?c.length-1:a+1],c=c[a>c.length-3?c.length-1:a+2];b.set(hf(d,e.x,f.x,
    g.x,c.x),hf(d,e.y,f.y,g.y,c.y));return b};Ra.prototype.copy=function(a){C.prototype.copy.call(this,a);this.points=[];for(var b=0,c=a.points.length;b<c;b++)this.points.push(a.points[b].clone());return this};Ra.prototype.toJSON=function(){var a=C.prototype.toJSON.call(this);a.points=[];for(var b=0,c=this.points.length;b<c;b++)a.points.push(this.points[b].toArray());return a};Ra.prototype.fromJSON=function(a){C.prototype.fromJSON.call(this,a);this.points=[];for(var b=0,c=a.points.length;b<c;b++){var d=
    a.points[b];this.points.push((new D).fromArray(d))}return this};var Ng=Object.freeze({ArcCurve:hc,CatmullRomCurve3:ca,CubicBezierCurve:Oa,CubicBezierCurve3:Va,EllipseCurve:Ba,LineCurve:ya,LineCurve3:Pa,QuadraticBezierCurve:Qa,QuadraticBezierCurve3:Wa,SplineCurve:Ra});bb.prototype=Object.assign(Object.create(C.prototype),{constructor:bb,add:function(a){this.curves.push(a)},closePath:function(){var a=this.curves[0].getPoint(0),b=this.curves[this.curves.length-1].getPoint(1);a.equals(b)||this.curves.push(new ya(b,
    a))},getPoint:function(a){var b=a*this.getLength(),c=this.getCurveLengths();for(a=0;a<c.length;){if(c[a]>=b)return b=c[a]-b,a=this.curves[a],c=a.getLength(),a.getPointAt(0===c?0:1-b/c);a++}return null},getLength:function(){var a=this.getCurveLengths();return a[a.length-1]},updateArcLengths:function(){this.needsUpdate=!0;this.cacheLengths=null;this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var a=[],
    b=0,c=0,d=this.curves.length;c<d;c++)b+=this.curves[c].getLength(),a.push(b);return this.cacheLengths=a},getSpacedPoints:function(a){void 0===a&&(a=40);for(var b=[],c=0;c<=a;c++)b.push(this.getPoint(c/a));this.autoClose&&b.push(b[0]);return b},getPoints:function(a){a=a||12;for(var b=[],c,d=0,e=this.curves;d<e.length;d++)for(var f=e[d],f=f.getPoints(f&&f.isEllipseCurve?2*a:f&&f.isLineCurve?1:f&&f.isSplineCurve?a*f.points.length:a),g=0;g<f.length;g++){var h=f[g];c&&c.equals(h)||(b.push(h),c=h)}this.autoClose&&
    1<b.length&&!b[b.length-1].equals(b[0])&&b.push(b[0]);return b},copy:function(a){C.prototype.copy.call(this,a);this.curves=[];for(var b=0,c=a.curves.length;b<c;b++)this.curves.push(a.curves[b].clone());this.autoClose=a.autoClose;return this},toJSON:function(){var a=C.prototype.toJSON.call(this);a.autoClose=this.autoClose;a.curves=[];for(var b=0,c=this.curves.length;b<c;b++)a.curves.push(this.curves[b].toJSON());return a},fromJSON:function(a){C.prototype.fromJSON.call(this,a);this.autoClose=a.autoClose;
    this.curves=[];for(var b=0,c=a.curves.length;b<c;b++){var d=a.curves[b];this.curves.push((new Ng[d.type]).fromJSON(d))}return this}});Sa.prototype=Object.assign(Object.create(bb.prototype),{constructor:Sa,setFromPoints:function(a){this.moveTo(a[0].x,a[0].y);for(var b=1,c=a.length;b<c;b++)this.lineTo(a[b].x,a[b].y)},moveTo:function(a,b){this.currentPoint.set(a,b)},lineTo:function(a,b){var c=new ya(this.currentPoint.clone(),new D(a,b));this.curves.push(c);this.currentPoint.set(a,b)},quadraticCurveTo:function(a,
    b,c,d){a=new Qa(this.currentPoint.clone(),new D(a,b),new D(c,d));this.curves.push(a);this.currentPoint.set(c,d)},bezierCurveTo:function(a,b,c,d,e,f){a=new Oa(this.currentPoint.clone(),new D(a,b),new D(c,d),new D(e,f));this.curves.push(a);this.currentPoint.set(e,f)},splineThru:function(a){var b=[this.currentPoint.clone()].concat(a),b=new Ra(b);this.curves.push(b);this.currentPoint.copy(a[a.length-1])},arc:function(a,b,c,d,e,f){this.absarc(a+this.currentPoint.x,b+this.currentPoint.y,c,d,e,f)},absarc:function(a,
    b,c,d,e,f){this.absellipse(a,b,c,c,d,e,f)},ellipse:function(a,b,c,d,e,f,g,h){this.absellipse(a+this.currentPoint.x,b+this.currentPoint.y,c,d,e,f,g,h)},absellipse:function(a,b,c,d,e,f,g,h){a=new Ba(a,b,c,d,e,f,g,h);0<this.curves.length&&(b=a.getPoint(0),b.equals(this.currentPoint)||this.lineTo(b.x,b.y));this.curves.push(a);a=a.getPoint(1);this.currentPoint.copy(a)},copy:function(a){bb.prototype.copy.call(this,a);this.currentPoint.copy(a.currentPoint);return this},toJSON:function(){var a=bb.prototype.toJSON.call(this);
    a.currentPoint=this.currentPoint.toArray();return a},fromJSON:function(a){bb.prototype.fromJSON.call(this,a);this.currentPoint.fromArray(a.currentPoint);return this}});jb.prototype=Object.assign(Object.create(Sa.prototype),{constructor:jb,getPointsHoles:function(a){for(var b=[],c=0,d=this.holes.length;c<d;c++)b[c]=this.holes[c].getPoints(a);return b},extractPoints:function(a){return{shape:this.getPoints(a),holes:this.getPointsHoles(a)}},copy:function(a){Sa.prototype.copy.call(this,a);this.holes=[];
    for(var b=0,c=a.holes.length;b<c;b++)this.holes.push(a.holes[b].clone());return this},toJSON:function(){var a=Sa.prototype.toJSON.call(this);a.uuid=this.uuid;a.holes=[];for(var b=0,c=this.holes.length;b<c;b++)a.holes.push(this.holes[b].toJSON());return a},fromJSON:function(a){Sa.prototype.fromJSON.call(this,a);this.uuid=a.uuid;this.holes=[];for(var b=0,c=a.holes.length;b<c;b++){var d=a.holes[b];this.holes.push((new Sa).fromJSON(d))}return this}});da.prototype=Object.assign(Object.create(x.prototype),
    {constructor:da,isLight:!0,copy:function(a){x.prototype.copy.call(this,a);this.color.copy(a.color);this.intensity=a.intensity;return this},toJSON:function(a){a=x.prototype.toJSON.call(this,a);a.object.color=this.color.getHex();a.object.intensity=this.intensity;void 0!==this.groundColor&&(a.object.groundColor=this.groundColor.getHex());void 0!==this.distance&&(a.object.distance=this.distance);void 0!==this.angle&&(a.object.angle=this.angle);void 0!==this.decay&&(a.object.decay=this.decay);void 0!==
    this.penumbra&&(a.object.penumbra=this.penumbra);void 0!==this.shadow&&(a.object.shadow=this.shadow.toJSON());return a}});Bd.prototype=Object.assign(Object.create(da.prototype),{constructor:Bd,isHemisphereLight:!0,copy:function(a){da.prototype.copy.call(this,a);this.groundColor.copy(a.groundColor);return this}});Object.assign(Fb.prototype,{copy:function(a){this.camera=a.camera.clone();this.bias=a.bias;this.radius=a.radius;this.mapSize.copy(a.mapSize);return this},clone:function(){return(new this.constructor).copy(this)},
    toJSON:function(){var a={};0!==this.bias&&(a.bias=this.bias);1!==this.radius&&(a.radius=this.radius);if(512!==this.mapSize.x||512!==this.mapSize.y)a.mapSize=this.mapSize.toArray();a.camera=this.camera.toJSON(!1).object;delete a.camera.matrix;return a}});Cd.prototype=Object.assign(Object.create(Fb.prototype),{constructor:Cd,isSpotLightShadow:!0,update:function(a){var b=this.camera,c=2*Q.RAD2DEG*a.angle,d=this.mapSize.width/this.mapSize.height;a=a.distance||b.far;if(c!==b.fov||d!==b.aspect||a!==b.far)b.fov=
    c,b.aspect=d,b.far=a,b.updateProjectionMatrix()}});Dd.prototype=Object.assign(Object.create(da.prototype),{constructor:Dd,isSpotLight:!0,copy:function(a){da.prototype.copy.call(this,a);this.distance=a.distance;this.angle=a.angle;this.penumbra=a.penumbra;this.decay=a.decay;this.target=a.target.clone();this.shadow=a.shadow.clone();return this}});Ed.prototype=Object.assign(Object.create(da.prototype),{constructor:Ed,isPointLight:!0,copy:function(a){da.prototype.copy.call(this,a);this.distance=a.distance;
    this.decay=a.decay;this.shadow=a.shadow.clone();return this}});Fd.prototype=Object.assign(Object.create(Fb.prototype),{constructor:Fd});Gd.prototype=Object.assign(Object.create(da.prototype),{constructor:Gd,isDirectionalLight:!0,copy:function(a){da.prototype.copy.call(this,a);this.target=a.target.clone();this.shadow=a.shadow.clone();return this}});Hd.prototype=Object.assign(Object.create(da.prototype),{constructor:Hd,isAmbientLight:!0});Id.prototype=Object.assign(Object.create(da.prototype),{constructor:Id,
    isRectAreaLight:!0,copy:function(a){da.prototype.copy.call(this,a);this.width=a.width;this.height=a.height;return this},toJSON:function(a){a=da.prototype.toJSON.call(this,a);a.object.width=this.width;a.object.height=this.height;return a}});Jd.prototype=Object.assign(Object.create(T.prototype),{constructor:Jd,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0});Kd.prototype=Object.assign(Object.create(T.prototype),
    {constructor:Kd,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:2300,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0});Object.assign(pa.prototype,{evaluate:function(a){var b=this.parameterPositions,c=this._cachedIndex,d=b[c],e=b[c-1];a:{b:{c:{d:if(!(a<d)){for(var f=c+2;;){if(void 0===d){if(a<e)break d;this._cachedIndex=c=b.length;return this.afterEnd_(c-1,a,e)}if(c===f)break;e=d;d=b[++c];if(a<d)break b}d=b.length;break c}if(a>=e)break a;else{f=b[1];a<f&&
    (c=2,e=f);for(f=c-2;;){if(void 0===e)return this._cachedIndex=0,this.beforeStart_(0,a,d);if(c===f)break;d=e;e=b[--c-1];if(a>=e)break b}d=c;c=0}}for(;c<d;)e=c+d>>>1,a<b[e]?d=e:c=e+1;d=b[c];e=b[c-1];if(void 0===e)return this._cachedIndex=0,this.beforeStart_(0,a,d);if(void 0===d)return this._cachedIndex=c=b.length,this.afterEnd_(c-1,e,a)}this._cachedIndex=c;this.intervalChanged_(c,e,d)}return this.interpolate_(c,e,a,d)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||
    this.DefaultSettings_},copySampleValue_:function(a){var b=this.resultBuffer,c=this.sampleValues,d=this.valueSize;a*=d;for(var e=0;e!==d;++e)b[e]=c[a+e];return b},interpolate_:function(){throw Error("call to abstract method");},intervalChanged_:function(){}});Object.assign(pa.prototype,{beforeStart_:pa.prototype.copySampleValue_,afterEnd_:pa.prototype.copySampleValue_});Ld.prototype=Object.assign(Object.create(pa.prototype),{constructor:Ld,interpolate_:function(a,b,c,d){var e=this.resultBuffer,f=this.sampleValues,
    g=this.valueSize;a*=g;b=(c-b)/(d-b);for(c=a+g;a!==c;a+=4)ha.slerpFlat(e,0,f,a-g,f,a,b);return e}});dd.prototype=Object.assign(Object.create(T.prototype),{constructor:dd,ValueTypeName:"quaternion",DefaultInterpolation:2301,InterpolantFactoryMethodLinear:function(a){return new Ld(this.times,this.values,this.getValueSize(),a)},InterpolantFactoryMethodSmooth:void 0});Md.prototype=Object.assign(Object.create(T.prototype),{constructor:Md,ValueTypeName:"color"});ic.prototype=Object.assign(Object.create(T.prototype),
    {constructor:ic,ValueTypeName:"number"});Nd.prototype=Object.assign(Object.create(pa.prototype),{constructor:Nd,DefaultSettings_:{endingStart:2400,endingEnd:2400},intervalChanged_:function(a,b,c){var d=this.parameterPositions,e=a-2,f=a+1,g=d[e],h=d[f];if(void 0===g)switch(this.getSettings_().endingStart){case 2401:e=a;g=2*b-c;break;case 2402:e=d.length-2;g=b+d[e]-d[e+1];break;default:e=a,g=c}if(void 0===h)switch(this.getSettings_().endingEnd){case 2401:f=a;h=2*c-b;break;case 2402:f=1;h=c+d[1]-d[0];
    break;default:f=a-1,h=b}a=.5*(c-b);d=this.valueSize;this._weightPrev=a/(b-g);this._weightNext=a/(h-c);this._offsetPrev=e*d;this._offsetNext=f*d},interpolate_:function(a,b,c,d){var e=this.resultBuffer,f=this.sampleValues,g=this.valueSize;a*=g;var h=a-g,k=this._offsetPrev,m=this._offsetNext,l=this._weightPrev,n=this._weightNext,p=(c-b)/(d-b);c=p*p;d=c*p;b=-l*d+2*l*c-l*p;l=(1+l)*d+(-1.5-2*l)*c+(-.5+l)*p+1;p=(-1-n)*d+(1.5+n)*c+.5*p;n=n*d-n*c;for(c=0;c!==g;++c)e[c]=b*f[k+c]+l*f[h+c]+p*f[a+c]+n*f[m+c];
    return e}});ed.prototype=Object.assign(Object.create(pa.prototype),{constructor:ed,interpolate_:function(a,b,c,d){var e=this.resultBuffer,f=this.sampleValues,g=this.valueSize;a*=g;var h=a-g;b=(c-b)/(d-b);c=1-b;for(d=0;d!==g;++d)e[d]=f[h+d]*c+f[a+d]*b;return e}});Od.prototype=Object.assign(Object.create(pa.prototype),{constructor:Od,interpolate_:function(a){return this.copySampleValue_(a-1)}});var ga={arraySlice:function(a,b,c){return ga.isTypedArray(a)?new a.constructor(a.subarray(b,void 0!==c?c:
    a.length)):a.slice(b,c)},convertArray:function(a,b,c){return!a||!c&&a.constructor===b?a:"number"===typeof b.BYTES_PER_ELEMENT?new b(a):Array.prototype.slice.call(a)},isTypedArray:function(a){return ArrayBuffer.isView(a)&&!(a instanceof DataView)},getKeyframeOrder:function(a){for(var b=a.length,c=Array(b),d=0;d!==b;++d)c[d]=d;c.sort(function(b,c){return a[b]-a[c]});return c},sortedArray:function(a,b,c){for(var d=a.length,e=new a.constructor(d),f=0,g=0;g!==d;++f)for(var h=c[f]*b,k=0;k!==b;++k)e[g++]=
    a[h+k];return e},flattenJSON:function(a,b,c,d){for(var e=1,f=a[0];void 0!==f&&void 0===f[d];)f=a[e++];if(void 0!==f){var g=f[d];if(void 0!==g)if(Array.isArray(g)){do g=f[d],void 0!==g&&(b.push(f.time),c.push.apply(c,g)),f=a[e++];while(void 0!==f)}else if(void 0!==g.toArray){do g=f[d],void 0!==g&&(b.push(f.time),g.toArray(c,c.length)),f=a[e++];while(void 0!==f)}else{do g=f[d],void 0!==g&&(b.push(f.time),c.push(g)),f=a[e++];while(void 0!==f)}}}};Object.assign(T,{parse:function(a){if(void 0===a.type)throw Error("THREE.KeyframeTrack: track type undefined, can not parse");
    var b=T._getTrackTypeForValueTypeName(a.type);if(void 0===a.times){var c=[],d=[];ga.flattenJSON(a.keys,c,d,"value");a.times=c;a.values=d}return void 0!==b.parse?b.parse(a):new b(a.name,a.times,a.values,a.interpolation)},toJSON:function(a){var b=a.constructor;if(void 0!==b.toJSON)b=b.toJSON(a);else{var b={name:a.name,times:ga.convertArray(a.times,Array),values:ga.convertArray(a.values,Array)},c=a.getInterpolation();c!==a.DefaultInterpolation&&(b.interpolation=c)}b.type=a.ValueTypeName;return b},_getTrackTypeForValueTypeName:function(a){switch(a.toLowerCase()){case "scalar":case "double":case "float":case "number":case "integer":return ic;
    case "vector":case "vector2":case "vector3":case "vector4":return jc;case "color":return Md;case "quaternion":return dd;case "bool":case "boolean":return Kd;case "string":return Jd}throw Error("THREE.KeyframeTrack: Unsupported typeName: "+a);}});Object.assign(T.prototype,{constructor:T,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:2301,InterpolantFactoryMethodDiscrete:function(a){return new Od(this.times,this.values,this.getValueSize(),a)},InterpolantFactoryMethodLinear:function(a){return new ed(this.times,
    this.values,this.getValueSize(),a)},InterpolantFactoryMethodSmooth:function(a){return new Nd(this.times,this.values,this.getValueSize(),a)},setInterpolation:function(a){switch(a){case 2300:var b=this.InterpolantFactoryMethodDiscrete;break;case 2301:b=this.InterpolantFactoryMethodLinear;break;case 2302:b=this.InterpolantFactoryMethodSmooth}if(void 0===b){b="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant)if(a!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);
    else throw Error(b);console.warn("THREE.KeyframeTrack:",b)}else this.createInterpolant=b},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return 2300;case this.InterpolantFactoryMethodLinear:return 2301;case this.InterpolantFactoryMethodSmooth:return 2302}},getValueSize:function(){return this.values.length/this.times.length},shift:function(a){if(0!==a)for(var b=this.times,c=0,d=b.length;c!==d;++c)b[c]+=a;return this},scale:function(a){if(1!==a)for(var b=
    this.times,c=0,d=b.length;c!==d;++c)b[c]*=a;return this},trim:function(a,b){for(var c=this.times,d=c.length,e=0,f=d-1;e!==d&&c[e]<a;)++e;for(;-1!==f&&c[f]>b;)--f;++f;if(0!==e||f!==d)e>=f&&(f=Math.max(f,1),e=f-1),a=this.getValueSize(),this.times=ga.arraySlice(c,e,f),this.values=ga.arraySlice(this.values,e*a,f*a);return this},validate:function(){var a=!0,b=this.getValueSize();0!==b-Math.floor(b)&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),a=!1);var c=this.times,b=this.values,
    d=c.length;0===d&&(console.error("THREE.KeyframeTrack: Track is empty.",this),a=!1);for(var e=null,f=0;f!==d;f++){var g=c[f];if("number"===typeof g&&isNaN(g)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,f,g);a=!1;break}if(null!==e&&e>g){console.error("THREE.KeyframeTrack: Out of order keys.",this,f,g,e);a=!1;break}e=g}if(void 0!==b&&ga.isTypedArray(b))for(f=0,c=b.length;f!==c;++f)if(d=b[f],isNaN(d)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,f,
    d);a=!1;break}return a},optimize:function(){for(var a,b,c=this.times,d=this.values,e=this.getValueSize(),f=2302===this.getInterpolation(),g=1,h=c.length-1,k=1;k<h;++k){a=!1;var m=c[k];if(m!==c[k+1]&&(1!==k||m!==m[0]))if(f)a=!0;else{b=k*e;for(var l=b-e,n=b+e,m=0;m!==e;++m){var p=d[b+m];if(p!==d[l+m]||p!==d[n+m]){a=!0;break}}}if(a){if(k!==g)for(c[g]=c[k],b=k*e,a=g*e,m=0;m!==e;++m)d[a+m]=d[b+m];++g}}if(0<h){c[g]=c[h];b=h*e;a=g*e;for(m=0;m!==e;++m)d[a+m]=d[b+m];++g}g!==c.length&&(this.times=ga.arraySlice(c,
    0,g),this.values=ga.arraySlice(d,0,g*e));return this}});jc.prototype=Object.assign(Object.create(T.prototype),{constructor:jc,ValueTypeName:"vector"});Object.assign(Ca,{parse:function(a){for(var b=[],c=a.tracks,d=1/(a.fps||1),e=0,f=c.length;e!==f;++e)b.push(T.parse(c[e]).scale(d));return new Ca(a.name,a.duration,b)},toJSON:function(a){var b=[],c=a.tracks;a={name:a.name,duration:a.duration,tracks:b};for(var d=0,e=c.length;d!==e;++d)b.push(T.toJSON(c[d]));return a},CreateFromMorphTargetSequence:function(a,
    b,c,d){for(var e=b.length,f=[],g=0;g<e;g++){var h=[],k=[];h.push((g+e-1)%e,g,(g+1)%e);k.push(0,1,0);var m=ga.getKeyframeOrder(h),h=ga.sortedArray(h,1,m),k=ga.sortedArray(k,1,m);d||0!==h[0]||(h.push(e),k.push(k[0]));f.push((new ic(".morphTargetInfluences["+b[g].name+"]",h,k)).scale(1/c))}return new Ca(a,-1,f)},findByName:function(a,b){var c=a;Array.isArray(a)||(c=a.geometry&&a.geometry.animations||a.animations);for(a=0;a<c.length;a++)if(c[a].name===b)return c[a];return null},CreateClipsFromMorphTargetSequences:function(a,
    b,c){for(var d,e={},f=/^([\w-]*?)([\d]+)$/,g=0,h=a.length;g<h;g++){var k=a[g],m=k.name.match(f);m&&1<m.length&&(d=m[1],(m=e[d])||(e[d]=m=[]),m.push(k))}a=[];for(d in e)a.push(Ca.CreateFromMorphTargetSequence(d,e[d],b,c));return a},parseAnimation:function(a,b){if(!a)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;var c=function(a,b,c,d,e){if(0!==c.length){var f=[],g=[];ga.flattenJSON(c,f,g,d);0!==f.length&&e.push(new a(b,f,g))}},d=[],e=a.name||"default",f=a.length||
    -1,g=a.fps||30;a=a.hierarchy||[];for(var h=0;h<a.length;h++){var k=a[h].keys;if(k&&0!==k.length)if(k[0].morphTargets){for(var f={},m=0;m<k.length;m++)if(k[m].morphTargets)for(var l=0;l<k[m].morphTargets.length;l++)f[k[m].morphTargets[l]]=-1;for(var n in f){for(var p=[],r=[],l=0;l!==k[m].morphTargets.length;++l){var t=k[m];p.push(t.time);r.push(t.morphTarget===n?1:0)}d.push(new ic(".morphTargetInfluence["+n+"]",p,r))}f=f.length*(g||1)}else m=".bones["+b[h].name+"]",c(jc,m+".position",k,"pos",d),c(dd,
    m+".quaternion",k,"rot",d),c(jc,m+".scale",k,"scl",d)}return 0===d.length?null:new Ca(e,f,d)}});Object.assign(Ca.prototype,{resetDuration:function(){for(var a=0,b=0,c=this.tracks.length;b!==c;++b)var d=this.tracks[b],a=Math.max(a,d.times[d.times.length-1]);this.duration=a},trim:function(){for(var a=0;a<this.tracks.length;a++)this.tracks[a].trim(0,this.duration);return this},optimize:function(){for(var a=0;a<this.tracks.length;a++)this.tracks[a].optimize();return this}});Object.assign(Pd.prototype,
    {load:function(a,b,c,d){var e=this;(new Na(e.manager)).load(a,function(a){b(e.parse(JSON.parse(a)))},c,d)},setTextures:function(a){this.textures=a},parse:function(a){function b(a){void 0===c[a]&&console.warn("THREE.MaterialLoader: Undefined texture",a);return c[a]}var c=this.textures,d=new Mg[a.type];void 0!==a.uuid&&(d.uuid=a.uuid);void 0!==a.name&&(d.name=a.name);void 0!==a.color&&d.color.setHex(a.color);void 0!==a.roughness&&(d.roughness=a.roughness);void 0!==a.metalness&&(d.metalness=a.metalness);
    void 0!==a.emissive&&d.emissive.setHex(a.emissive);void 0!==a.specular&&d.specular.setHex(a.specular);void 0!==a.shininess&&(d.shininess=a.shininess);void 0!==a.clearCoat&&(d.clearCoat=a.clearCoat);void 0!==a.clearCoatRoughness&&(d.clearCoatRoughness=a.clearCoatRoughness);void 0!==a.uniforms&&(d.uniforms=a.uniforms);void 0!==a.vertexShader&&(d.vertexShader=a.vertexShader);void 0!==a.fragmentShader&&(d.fragmentShader=a.fragmentShader);void 0!==a.vertexColors&&(d.vertexColors=a.vertexColors);void 0!==
    a.fog&&(d.fog=a.fog);void 0!==a.flatShading&&(d.flatShading=a.flatShading);void 0!==a.blending&&(d.blending=a.blending);void 0!==a.side&&(d.side=a.side);void 0!==a.opacity&&(d.opacity=a.opacity);void 0!==a.transparent&&(d.transparent=a.transparent);void 0!==a.alphaTest&&(d.alphaTest=a.alphaTest);void 0!==a.depthTest&&(d.depthTest=a.depthTest);void 0!==a.depthWrite&&(d.depthWrite=a.depthWrite);void 0!==a.colorWrite&&(d.colorWrite=a.colorWrite);void 0!==a.wireframe&&(d.wireframe=a.wireframe);void 0!==
    a.wireframeLinewidth&&(d.wireframeLinewidth=a.wireframeLinewidth);void 0!==a.wireframeLinecap&&(d.wireframeLinecap=a.wireframeLinecap);void 0!==a.wireframeLinejoin&&(d.wireframeLinejoin=a.wireframeLinejoin);void 0!==a.rotation&&(d.rotation=a.rotation);1!==a.linewidth&&(d.linewidth=a.linewidth);void 0!==a.dashSize&&(d.dashSize=a.dashSize);void 0!==a.gapSize&&(d.gapSize=a.gapSize);void 0!==a.scale&&(d.scale=a.scale);void 0!==a.skinning&&(d.skinning=a.skinning);void 0!==a.morphTargets&&(d.morphTargets=
    a.morphTargets);void 0!==a.dithering&&(d.dithering=a.dithering);void 0!==a.visible&&(d.visible=a.visible);void 0!==a.userData&&(d.userData=a.userData);void 0!==a.shading&&(d.flatShading=1===a.shading);void 0!==a.size&&(d.size=a.size);void 0!==a.sizeAttenuation&&(d.sizeAttenuation=a.sizeAttenuation);void 0!==a.map&&(d.map=b(a.map));void 0!==a.alphaMap&&(d.alphaMap=b(a.alphaMap),d.transparent=!0);void 0!==a.bumpMap&&(d.bumpMap=b(a.bumpMap));void 0!==a.bumpScale&&(d.bumpScale=a.bumpScale);void 0!==a.normalMap&&
    (d.normalMap=b(a.normalMap));if(void 0!==a.normalScale){var e=a.normalScale;!1===Array.isArray(e)&&(e=[e,e]);d.normalScale=(new D).fromArray(e)}void 0!==a.displacementMap&&(d.displacementMap=b(a.displacementMap));void 0!==a.displacementScale&&(d.displacementScale=a.displacementScale);void 0!==a.displacementBias&&(d.displacementBias=a.displacementBias);void 0!==a.roughnessMap&&(d.roughnessMap=b(a.roughnessMap));void 0!==a.metalnessMap&&(d.metalnessMap=b(a.metalnessMap));void 0!==a.emissiveMap&&(d.emissiveMap=
    b(a.emissiveMap));void 0!==a.emissiveIntensity&&(d.emissiveIntensity=a.emissiveIntensity);void 0!==a.specularMap&&(d.specularMap=b(a.specularMap));void 0!==a.envMap&&(d.envMap=b(a.envMap));void 0!==a.reflectivity&&(d.reflectivity=a.reflectivity);void 0!==a.lightMap&&(d.lightMap=b(a.lightMap));void 0!==a.lightMapIntensity&&(d.lightMapIntensity=a.lightMapIntensity);void 0!==a.aoMap&&(d.aoMap=b(a.aoMap));void 0!==a.aoMapIntensity&&(d.aoMapIntensity=a.aoMapIntensity);void 0!==a.gradientMap&&(d.gradientMap=
    b(a.gradientMap));return d}});Object.assign(le.prototype,{load:function(a,b,c,d){var e=this;(new Na(e.manager)).load(a,function(a){b(e.parse(JSON.parse(a)))},c,d)},parse:function(a){var b=new E;var c=a.data.index;void 0!==c&&(c=new xf[c.type](c.array),b.setIndex(new M(c,1)));var d=a.data.attributes;for(f in d){var e=d[f];c=new xf[e.type](e.array);b.addAttribute(f,new M(c,e.itemSize,e.normalized))}var f=a.data.groups||a.data.drawcalls||a.data.offsets;if(void 0!==f)for(c=0,d=f.length;c!==d;++c)e=f[c],
    b.addGroup(e.start,e.count,e.materialIndex);a=a.data.boundingSphere;void 0!==a&&(f=new p,void 0!==a.center&&f.fromArray(a.center),b.boundingSphere=new Ia(f,a.radius));return b}});var xf={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:"undefined"!==typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};kc.Handlers={handlers:[],add:function(a,b){this.handlers.push(a,
    b)},get:function(a){for(var b=this.handlers,c=0,d=b.length;c<d;c+=2){var e=b[c+1];if(b[c].test(a))return e}return null}};Object.assign(kc.prototype,{crossOrigin:void 0,initMaterials:function(a,b,c){for(var d=[],e=0;e<a.length;++e)d[e]=this.createMaterial(a[e],b,c);return d},createMaterial:function(){var a={NoBlending:0,NormalBlending:1,AdditiveBlending:2,SubtractiveBlending:3,MultiplyBlending:4,CustomBlending:5},b=new H,c=new Ad,d=new Pd;return function(e,f,g){function h(a,b,d,e,h){a=f+a;var m=kc.Handlers.get(a);
    null!==m?a=m.load(a):(c.setCrossOrigin(g),a=c.load(a));void 0!==b&&(a.repeat.fromArray(b),1!==b[0]&&(a.wrapS=1E3),1!==b[1]&&(a.wrapT=1E3));void 0!==d&&a.offset.fromArray(d);void 0!==e&&("repeat"===e[0]&&(a.wrapS=1E3),"mirror"===e[0]&&(a.wrapS=1002),"repeat"===e[1]&&(a.wrapT=1E3),"mirror"===e[1]&&(a.wrapT=1002));void 0!==h&&(a.anisotropy=h);b=Q.generateUUID();k[b]=a;return b}var k={},m={uuid:Q.generateUUID(),type:"MeshLambertMaterial"},l;for(l in e){var n=e[l];switch(l){case "DbgColor":case "DbgIndex":case "opticalDensity":case "illumination":break;
    case "DbgName":m.name=n;break;case "blending":m.blending=a[n];break;case "colorAmbient":case "mapAmbient":console.warn("THREE.Loader.createMaterial:",l,"is no longer supported.");break;case "colorDiffuse":m.color=b.fromArray(n).getHex();break;case "colorSpecular":m.specular=b.fromArray(n).getHex();break;case "colorEmissive":m.emissive=b.fromArray(n).getHex();break;case "specularCoef":m.shininess=n;break;case "shading":"basic"===n.toLowerCase()&&(m.type="MeshBasicMaterial");"phong"===n.toLowerCase()&&
    (m.type="MeshPhongMaterial");"standard"===n.toLowerCase()&&(m.type="MeshStandardMaterial");break;case "mapDiffuse":m.map=h(n,e.mapDiffuseRepeat,e.mapDiffuseOffset,e.mapDiffuseWrap,e.mapDiffuseAnisotropy);break;case "mapDiffuseRepeat":case "mapDiffuseOffset":case "mapDiffuseWrap":case "mapDiffuseAnisotropy":break;case "mapEmissive":m.emissiveMap=h(n,e.mapEmissiveRepeat,e.mapEmissiveOffset,e.mapEmissiveWrap,e.mapEmissiveAnisotropy);break;case "mapEmissiveRepeat":case "mapEmissiveOffset":case "mapEmissiveWrap":case "mapEmissiveAnisotropy":break;
    case "mapLight":m.lightMap=h(n,e.mapLightRepeat,e.mapLightOffset,e.mapLightWrap,e.mapLightAnisotropy);break;case "mapLightRepeat":case "mapLightOffset":case "mapLightWrap":case "mapLightAnisotropy":break;case "mapAO":m.aoMap=h(n,e.mapAORepeat,e.mapAOOffset,e.mapAOWrap,e.mapAOAnisotropy);break;case "mapAORepeat":case "mapAOOffset":case "mapAOWrap":case "mapAOAnisotropy":break;case "mapBump":m.bumpMap=h(n,e.mapBumpRepeat,e.mapBumpOffset,e.mapBumpWrap,e.mapBumpAnisotropy);break;case "mapBumpScale":m.bumpScale=
    n;break;case "mapBumpRepeat":case "mapBumpOffset":case "mapBumpWrap":case "mapBumpAnisotropy":break;case "mapNormal":m.normalMap=h(n,e.mapNormalRepeat,e.mapNormalOffset,e.mapNormalWrap,e.mapNormalAnisotropy);break;case "mapNormalFactor":m.normalScale=[n,n];break;case "mapNormalRepeat":case "mapNormalOffset":case "mapNormalWrap":case "mapNormalAnisotropy":break;case "mapSpecular":m.specularMap=h(n,e.mapSpecularRepeat,e.mapSpecularOffset,e.mapSpecularWrap,e.mapSpecularAnisotropy);break;case "mapSpecularRepeat":case "mapSpecularOffset":case "mapSpecularWrap":case "mapSpecularAnisotropy":break;
    case "mapMetalness":m.metalnessMap=h(n,e.mapMetalnessRepeat,e.mapMetalnessOffset,e.mapMetalnessWrap,e.mapMetalnessAnisotropy);break;case "mapMetalnessRepeat":case "mapMetalnessOffset":case "mapMetalnessWrap":case "mapMetalnessAnisotropy":break;case "mapRoughness":m.roughnessMap=h(n,e.mapRoughnessRepeat,e.mapRoughnessOffset,e.mapRoughnessWrap,e.mapRoughnessAnisotropy);break;case "mapRoughnessRepeat":case "mapRoughnessOffset":case "mapRoughnessWrap":case "mapRoughnessAnisotropy":break;case "mapAlpha":m.alphaMap=
    h(n,e.mapAlphaRepeat,e.mapAlphaOffset,e.mapAlphaWrap,e.mapAlphaAnisotropy);break;case "mapAlphaRepeat":case "mapAlphaOffset":case "mapAlphaWrap":case "mapAlphaAnisotropy":break;case "flipSided":m.side=1;break;case "doubleSided":m.side=2;break;case "transparency":console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity");m.opacity=n;break;case "depthTest":case "depthWrite":case "colorWrite":case "opacity":case "reflectivity":case "transparent":case "visible":case "wireframe":m[l]=
    n;break;case "vertexColors":!0===n&&(m.vertexColors=2);"face"===n&&(m.vertexColors=1);break;default:console.error("THREE.Loader.createMaterial: Unsupported",l,n)}}"MeshBasicMaterial"===m.type&&delete m.emissive;"MeshPhongMaterial"!==m.type&&delete m.specular;1>m.opacity&&(m.transparent=!0);d.setTextures(k);return d.parse(m)}}()});var He={decodeText:function(a){if("undefined"!==typeof TextDecoder)return(new TextDecoder).decode(a);for(var b="",c=0,d=a.length;c<d;c++)b+=String.fromCharCode(a[c]);return b},
    extractUrlBase:function(a){a=a.split("/");if(1===a.length)return"./";a.pop();return a.join("/")+"/"}};Object.assign(me.prototype,{load:function(a,b,c,d){var e=this,f=this.texturePath&&"string"===typeof this.texturePath?this.texturePath:He.extractUrlBase(a),g=new Na(this.manager);g.setWithCredentials(this.withCredentials);g.load(a,function(c){c=JSON.parse(c);var d=c.metadata;if(void 0!==d&&(d=d.type,void 0!==d)){if("object"===d.toLowerCase()){console.error("THREE.JSONLoader: "+a+" should be loaded with THREE.ObjectLoader instead.");
    return}if("scene"===d.toLowerCase()){console.error("THREE.JSONLoader: "+a+" should be loaded with THREE.SceneLoader instead.");return}}c=e.parse(c,f);b(c.geometry,c.materials)},c,d)},setTexturePath:function(a){this.texturePath=a},parse:function(){return function(a,b){void 0!==a.data&&(a=a.data);a.scale=void 0!==a.scale?1/a.scale:1;var c=new L,d=a,e,f,g,h=d.faces;var k=d.vertices;var m=d.normals,l=d.colors;var n=d.scale;var u=0;if(void 0!==d.uvs){for(e=0;e<d.uvs.length;e++)d.uvs[e].length&&u++;for(e=
    0;e<u;e++)c.faceVertexUvs[e]=[]}var r=0;for(g=k.length;r<g;)e=new p,e.x=k[r++]*n,e.y=k[r++]*n,e.z=k[r++]*n,c.vertices.push(e);r=0;for(g=h.length;r<g;){k=h[r++];var t=k&1;var v=k&2;e=k&8;var w=k&16;var z=k&32;n=k&64;k&=128;if(t){t=new Ya;t.a=h[r];t.b=h[r+1];t.c=h[r+3];var y=new Ya;y.a=h[r+1];y.b=h[r+2];y.c=h[r+3];r+=4;v&&(v=h[r++],t.materialIndex=v,y.materialIndex=v);v=c.faces.length;if(e)for(e=0;e<u;e++){var x=d.uvs[e];c.faceVertexUvs[e][v]=[];c.faceVertexUvs[e][v+1]=[];for(f=0;4>f;f++){var A=h[r++];
    var B=x[2*A];A=x[2*A+1];B=new D(B,A);2!==f&&c.faceVertexUvs[e][v].push(B);0!==f&&c.faceVertexUvs[e][v+1].push(B)}}w&&(w=3*h[r++],t.normal.set(m[w++],m[w++],m[w]),y.normal.copy(t.normal));if(z)for(e=0;4>e;e++)w=3*h[r++],z=new p(m[w++],m[w++],m[w]),2!==e&&t.vertexNormals.push(z),0!==e&&y.vertexNormals.push(z);n&&(n=h[r++],n=l[n],t.color.setHex(n),y.color.setHex(n));if(k)for(e=0;4>e;e++)n=h[r++],n=l[n],2!==e&&t.vertexColors.push(new H(n)),0!==e&&y.vertexColors.push(new H(n));c.faces.push(t);c.faces.push(y)}else{t=
    new Ya;t.a=h[r++];t.b=h[r++];t.c=h[r++];v&&(v=h[r++],t.materialIndex=v);v=c.faces.length;if(e)for(e=0;e<u;e++)for(x=d.uvs[e],c.faceVertexUvs[e][v]=[],f=0;3>f;f++)A=h[r++],B=x[2*A],A=x[2*A+1],B=new D(B,A),c.faceVertexUvs[e][v].push(B);w&&(w=3*h[r++],t.normal.set(m[w++],m[w++],m[w]));if(z)for(e=0;3>e;e++)w=3*h[r++],z=new p(m[w++],m[w++],m[w]),t.vertexNormals.push(z);n&&(n=h[r++],t.color.setHex(l[n]));if(k)for(e=0;3>e;e++)n=h[r++],t.vertexColors.push(new H(l[n]));c.faces.push(t)}}d=a;r=void 0!==d.influencesPerVertex?
    d.influencesPerVertex:2;if(d.skinWeights)for(g=0,h=d.skinWeights.length;g<h;g+=r)c.skinWeights.push(new aa(d.skinWeights[g],1<r?d.skinWeights[g+1]:0,2<r?d.skinWeights[g+2]:0,3<r?d.skinWeights[g+3]:0));if(d.skinIndices)for(g=0,h=d.skinIndices.length;g<h;g+=r)c.skinIndices.push(new aa(d.skinIndices[g],1<r?d.skinIndices[g+1]:0,2<r?d.skinIndices[g+2]:0,3<r?d.skinIndices[g+3]:0));c.bones=d.bones;c.bones&&0<c.bones.length&&(c.skinWeights.length!==c.skinIndices.length||c.skinIndices.length!==c.vertices.length)&&
    console.warn("When skinning, number of vertices ("+c.vertices.length+"), skinIndices ("+c.skinIndices.length+"), and skinWeights ("+c.skinWeights.length+") should match.");g=a;h=g.scale;if(void 0!==g.morphTargets)for(d=0,r=g.morphTargets.length;d<r;d++)for(c.morphTargets[d]={},c.morphTargets[d].name=g.morphTargets[d].name,c.morphTargets[d].vertices=[],m=c.morphTargets[d].vertices,l=g.morphTargets[d].vertices,u=0,k=l.length;u<k;u+=3)n=new p,n.x=l[u]*h,n.y=l[u+1]*h,n.z=l[u+2]*h,m.push(n);if(void 0!==
    g.morphColors&&0<g.morphColors.length)for(console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.'),h=c.faces,g=g.morphColors[0].colors,d=0,r=h.length;d<r;d++)h[d].color.fromArray(g,3*d);g=a;d=[];r=[];void 0!==g.animation&&r.push(g.animation);void 0!==g.animations&&(g.animations.length?r=r.concat(g.animations):r.push(g.animations));for(g=0;g<r.length;g++)(h=Ca.parseAnimation(r[g],c.bones))&&d.push(h);c.morphTargets&&(r=Ca.CreateClipsFromMorphTargetSequences(c.morphTargets,
    10),d=d.concat(r));0<d.length&&(c.animations=d);c.computeFaceNormals();c.computeBoundingSphere();if(void 0===a.materials||0===a.materials.length)return{geometry:c};a=kc.prototype.initMaterials(a.materials,b,this.crossOrigin);return{geometry:c,materials:a}}}()});Object.assign(jf.prototype,{load:function(a,b,c,d){""===this.texturePath&&(this.texturePath=a.substring(0,a.lastIndexOf("/")+1));var e=this;(new Na(e.manager)).load(a,function(c){var f=null;try{f=JSON.parse(c)}catch(h){void 0!==d&&d(h);console.error("THREE:ObjectLoader: Can't parse "+
    a+".",h.message);return}c=f.metadata;void 0===c||void 0===c.type||"geometry"===c.type.toLowerCase()?console.error("THREE.ObjectLoader: Can't load "+a+". Use THREE.JSONLoader instead."):e.parse(f,b)},c,d)},setTexturePath:function(a){this.texturePath=a},setCrossOrigin:function(a){this.crossOrigin=a},parse:function(a,b){var c=this.parseShape(a.shapes),c=this.parseGeometries(a.geometries,c),d=this.parseImages(a.images,function(){void 0!==b&&b(e)}),d=this.parseTextures(a.textures,d),d=this.parseMaterials(a.materials,
    d),e=this.parseObject(a.object,c,d);a.animations&&(e.animations=this.parseAnimations(a.animations));void 0!==a.images&&0!==a.images.length||void 0===b||b(e);return e},parseShape:function(a){var b={};if(void 0!==a)for(var c=0,d=a.length;c<d;c++){var e=(new jb).fromJSON(a[c]);b[e.uuid]=e}return b},parseGeometries:function(a,b){var c={};if(void 0!==a)for(var d=new me,e=new le,f=0,g=a.length;f<g;f++){var h=a[f];switch(h.type){case "PlaneGeometry":case "PlaneBufferGeometry":var k=new ka[h.type](h.width,
    h.height,h.widthSegments,h.heightSegments);break;case "BoxGeometry":case "BoxBufferGeometry":case "CubeGeometry":k=new ka[h.type](h.width,h.height,h.depth,h.widthSegments,h.heightSegments,h.depthSegments);break;case "CircleGeometry":case "CircleBufferGeometry":k=new ka[h.type](h.radius,h.segments,h.thetaStart,h.thetaLength);break;case "CylinderGeometry":case "CylinderBufferGeometry":k=new ka[h.type](h.radiusTop,h.radiusBottom,h.height,h.radialSegments,h.heightSegments,h.openEnded,h.thetaStart,h.thetaLength);
    break;case "ConeGeometry":case "ConeBufferGeometry":k=new ka[h.type](h.radius,h.height,h.radialSegments,h.heightSegments,h.openEnded,h.thetaStart,h.thetaLength);break;case "SphereGeometry":case "SphereBufferGeometry":k=new ka[h.type](h.radius,h.widthSegments,h.heightSegments,h.phiStart,h.phiLength,h.thetaStart,h.thetaLength);break;case "DodecahedronGeometry":case "DodecahedronBufferGeometry":case "IcosahedronGeometry":case "IcosahedronBufferGeometry":case "OctahedronGeometry":case "OctahedronBufferGeometry":case "TetrahedronGeometry":case "TetrahedronBufferGeometry":k=
    new ka[h.type](h.radius,h.detail);break;case "RingGeometry":case "RingBufferGeometry":k=new ka[h.type](h.innerRadius,h.outerRadius,h.thetaSegments,h.phiSegments,h.thetaStart,h.thetaLength);break;case "TorusGeometry":case "TorusBufferGeometry":k=new ka[h.type](h.radius,h.tube,h.radialSegments,h.tubularSegments,h.arc);break;case "TorusKnotGeometry":case "TorusKnotBufferGeometry":k=new ka[h.type](h.radius,h.tube,h.tubularSegments,h.radialSegments,h.p,h.q);break;case "LatheGeometry":case "LatheBufferGeometry":k=
    new ka[h.type](h.points,h.segments,h.phiStart,h.phiLength);break;case "PolyhedronGeometry":case "PolyhedronBufferGeometry":k=new ka[h.type](h.vertices,h.indices,h.radius,h.details);break;case "ShapeGeometry":case "ShapeBufferGeometry":k=[];f=0;for(g=h.shapes.length;f<g;f++)k.push(b[h.shapes[f]]);k=new ka[h.type](k,h.curveSegments);break;case "BufferGeometry":k=e.parse(h);break;case "Geometry":k=d.parse(h,this.texturePath).geometry;break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+
    h.type+'"');continue}k.uuid=h.uuid;void 0!==h.name&&(k.name=h.name);c[h.uuid]=k}return c},parseMaterials:function(a,b){var c={};if(void 0!==a){var d=new Pd;d.setTextures(b);b=0;for(var e=a.length;b<e;b++){var f=a[b];if("MultiMaterial"===f.type){for(var g=[],h=0;h<f.materials.length;h++)g.push(d.parse(f.materials[h]));c[f.uuid]=g}else c[f.uuid]=d.parse(f)}}return c},parseAnimations:function(a){for(var b=[],c=0;c<a.length;c++){var d=Ca.parse(a[c]);b.push(d)}return b},parseImages:function(a,b){function c(a){d.manager.itemStart(a);
    return f.load(a,function(){d.manager.itemEnd(a)},void 0,function(){d.manager.itemEnd(a);d.manager.itemError(a)})}var d=this,e={};if(void 0!==a&&0<a.length){b=new he(b);var f=new ad(b);f.setCrossOrigin(this.crossOrigin);b=0;for(var g=a.length;b<g;b++){var h=a[b],k=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(h.url)?h.url:d.texturePath+h.url;e[h.uuid]=c(k)}}return e},parseTextures:function(a,b){function c(a,b){if("number"===typeof a)return a;console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",
    a);return b[a]}var d={};if(void 0!==a)for(var e=0,f=a.length;e<f;e++){var g=a[e];void 0===g.image&&console.warn('THREE.ObjectLoader: No "image" specified for',g.uuid);void 0===b[g.image]&&console.warn("THREE.ObjectLoader: Undefined image",g.image);var h=new U(b[g.image]);h.needsUpdate=!0;h.uuid=g.uuid;void 0!==g.name&&(h.name=g.name);void 0!==g.mapping&&(h.mapping=c(g.mapping,Og));void 0!==g.offset&&h.offset.fromArray(g.offset);void 0!==g.repeat&&h.repeat.fromArray(g.repeat);void 0!==g.center&&h.center.fromArray(g.center);
    void 0!==g.rotation&&(h.rotation=g.rotation);void 0!==g.wrap&&(h.wrapS=c(g.wrap[0],yf),h.wrapT=c(g.wrap[1],yf));void 0!==g.minFilter&&(h.minFilter=c(g.minFilter,zf));void 0!==g.magFilter&&(h.magFilter=c(g.magFilter,zf));void 0!==g.anisotropy&&(h.anisotropy=g.anisotropy);void 0!==g.flipY&&(h.flipY=g.flipY);d[g.uuid]=h}return d},parseObject:function(){var a=new O;return function(b,c,d){function e(a){void 0===c[a]&&console.warn("THREE.ObjectLoader: Undefined geometry",a);return c[a]}function f(a){if(void 0!==
    a){if(Array.isArray(a)){for(var b=[],c=0,e=a.length;c<e;c++){var f=a[c];void 0===d[f]&&console.warn("THREE.ObjectLoader: Undefined material",f);b.push(d[f])}return b}void 0===d[a]&&console.warn("THREE.ObjectLoader: Undefined material",a);return d[a]}}switch(b.type){case "Scene":var g=new vd;void 0!==b.background&&Number.isInteger(b.background)&&(g.background=new H(b.background));void 0!==b.fog&&("Fog"===b.fog.type?g.fog=new Qb(b.fog.color,b.fog.near,b.fog.far):"FogExp2"===b.fog.type&&(g.fog=new Pb(b.fog.color,
    b.fog.density)));break;case "PerspectiveCamera":g=new ba(b.fov,b.aspect,b.near,b.far);void 0!==b.focus&&(g.focus=b.focus);void 0!==b.zoom&&(g.zoom=b.zoom);void 0!==b.filmGauge&&(g.filmGauge=b.filmGauge);void 0!==b.filmOffset&&(g.filmOffset=b.filmOffset);void 0!==b.view&&(g.view=Object.assign({},b.view));break;case "OrthographicCamera":g=new Lb(b.left,b.right,b.top,b.bottom,b.near,b.far);break;case "AmbientLight":g=new Hd(b.color,b.intensity);break;case "DirectionalLight":g=new Gd(b.color,b.intensity);
    break;case "PointLight":g=new Ed(b.color,b.intensity,b.distance,b.decay);break;case "RectAreaLight":g=new Id(b.color,b.intensity,b.width,b.height);break;case "SpotLight":g=new Dd(b.color,b.intensity,b.distance,b.angle,b.penumbra,b.decay);break;case "HemisphereLight":g=new Bd(b.color,b.groundColor,b.intensity);break;case "SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case "Mesh":g=e(b.geometry);var h=f(b.material);g=g.bones&&0<g.bones.length?new xd(g,
    h):new ra(g,h);break;case "LOD":g=new Dc;break;case "Line":g=new sa(e(b.geometry),f(b.material),b.mode);break;case "LineLoop":g=new yd(e(b.geometry),f(b.material));break;case "LineSegments":g=new X(e(b.geometry),f(b.material));break;case "PointCloud":case "Points":g=new Rb(e(b.geometry),f(b.material));break;case "Sprite":g=new Cc(f(b.material));break;case "Group":g=new Fc;break;default:g=new x}g.uuid=b.uuid;void 0!==b.name&&(g.name=b.name);void 0!==b.matrix?(a.fromArray(b.matrix),a.decompose(g.position,
    g.quaternion,g.scale)):(void 0!==b.position&&g.position.fromArray(b.position),void 0!==b.rotation&&g.rotation.fromArray(b.rotation),void 0!==b.quaternion&&g.quaternion.fromArray(b.quaternion),void 0!==b.scale&&g.scale.fromArray(b.scale));void 0!==b.castShadow&&(g.castShadow=b.castShadow);void 0!==b.receiveShadow&&(g.receiveShadow=b.receiveShadow);b.shadow&&(void 0!==b.shadow.bias&&(g.shadow.bias=b.shadow.bias),void 0!==b.shadow.radius&&(g.shadow.radius=b.shadow.radius),void 0!==b.shadow.mapSize&&
    g.shadow.mapSize.fromArray(b.shadow.mapSize),void 0!==b.shadow.camera&&(g.shadow.camera=this.parseObject(b.shadow.camera)));void 0!==b.visible&&(g.visible=b.visible);void 0!==b.userData&&(g.userData=b.userData);if(void 0!==b.children)for(var h=b.children,k=0;k<h.length;k++)g.add(this.parseObject(h[k],c,d));if("LOD"===b.type)for(b=b.levels,h=0;h<b.length;h++){var k=b[h],m=g.getObjectByProperty("uuid",k.object);void 0!==m&&g.addLevel(m,k.distance)}return g}}()});var Og={UVMapping:300,CubeReflectionMapping:301,
    CubeRefractionMapping:302,EquirectangularReflectionMapping:303,EquirectangularRefractionMapping:304,SphericalReflectionMapping:305,CubeUVReflectionMapping:306,CubeUVRefractionMapping:307},yf={RepeatWrapping:1E3,ClampToEdgeWrapping:1001,MirroredRepeatWrapping:1002},zf={NearestFilter:1003,NearestMipMapNearestFilter:1004,NearestMipMapLinearFilter:1005,LinearFilter:1006,LinearMipMapNearestFilter:1007,LinearMipMapLinearFilter:1008};ne.prototype={constructor:ne,setOptions:function(a){this.options=a;return this},
    load:function(a,b,c,d){void 0===a&&(a="");void 0!==this.path&&(a=this.path+a);var e=this,f=Ib.get(a);if(void 0!==f)return e.manager.itemStart(a),setTimeout(function(){b&&b(f);e.manager.itemEnd(a)},0),f;fetch(a).then(function(a){return a.blob()}).then(function(a){return createImageBitmap(a,e.options)}).then(function(c){Ib.add(a,c);b&&b(c);e.manager.itemEnd(a)}).catch(function(b){d&&d(b);e.manager.itemEnd(a);e.manager.itemError(a)})},setCrossOrigin:function(){return this},setPath:function(a){this.path=
    a;return this}};Object.assign(oe.prototype,{moveTo:function(a,b){this.currentPath=new Sa;this.subPaths.push(this.currentPath);this.currentPath.moveTo(a,b)},lineTo:function(a,b){this.currentPath.lineTo(a,b)},quadraticCurveTo:function(a,b,c,d){this.currentPath.quadraticCurveTo(a,b,c,d)},bezierCurveTo:function(a,b,c,d,e,f){this.currentPath.bezierCurveTo(a,b,c,d,e,f)},splineThru:function(a){this.currentPath.splineThru(a)},toShapes:function(a,b){function c(a){for(var b=[],c=0,d=a.length;c<d;c++){var e=
    a[c],f=new jb;f.curves=e.curves;b.push(f)}return b}function d(a,b){for(var c=b.length,d=!1,e=c-1,f=0;f<c;e=f++){var g=b[e],h=b[f],k=h.x-g.x,m=h.y-g.y;if(Math.abs(m)>Number.EPSILON){if(0>m&&(g=b[f],k=-k,h=b[e],m=-m),!(a.y<g.y||a.y>h.y))if(a.y===g.y){if(a.x===g.x)return!0}else{e=m*(a.x-g.x)-k*(a.y-g.y);if(0===e)return!0;0>e||(d=!d)}}else if(a.y===g.y&&(h.x<=a.x&&a.x<=g.x||g.x<=a.x&&a.x<=h.x))return!0}return d}var e=$a.isClockWise,f=this.subPaths;if(0===f.length)return[];if(!0===b)return c(f);b=[];if(1===
    f.length){var g=f[0];var h=new jb;h.curves=g.curves;b.push(h);return b}var k=!e(f[0].getPoints()),k=a?!k:k;h=[];var m=[],l=[],n=0;m[n]=void 0;l[n]=[];for(var p=0,r=f.length;p<r;p++){g=f[p];var t=g.getPoints();var v=e(t);(v=a?!v:v)?(!k&&m[n]&&n++,m[n]={s:new jb,p:t},m[n].s.curves=g.curves,k&&n++,l[n]=[]):l[n].push({h:g,p:t[0]})}if(!m[0])return c(f);if(1<m.length){p=!1;a=[];e=0;for(f=m.length;e<f;e++)h[e]=[];e=0;for(f=m.length;e<f;e++)for(g=l[e],v=0;v<g.length;v++){k=g[v];n=!0;for(t=0;t<m.length;t++)d(k.p,
    m[t].p)&&(e!==t&&a.push({froms:e,tos:t,hole:v}),n?(n=!1,h[t].push(k)):p=!0);n&&h[e].push(k)}0<a.length&&(p||(l=h))}p=0;for(e=m.length;p<e;p++)for(h=m[p].s,b.push(h),a=l[p],f=0,g=a.length;f<g;f++)h.holes.push(a[f].h);return b}});Object.assign(pe.prototype,{isFont:!0,generateShapes:function(a,b,c){void 0===b&&(b=100);c=this.data;a=String(a).split("");var d=b/c.resolution,e=(c.boundingBox.yMax-c.boundingBox.yMin+c.underlineThickness)*d,f=0,g=0;b=[];for(var h=0;h<a.length;h++){var k=a[h];if("\n"===k)f=
    0,g-=e;else{var m=d;var l=f,n=g;if(k=c.glyphs[k]||c.glyphs["?"]){var p=new oe;if(k.o)for(var r=k._cachedOutline||(k._cachedOutline=k.o.split(" ")),t=0,v=r.length;t<v;)switch(r[t++]){case "m":var w=r[t++]*m+l;var x=r[t++]*m+n;p.moveTo(w,x);break;case "l":w=r[t++]*m+l;x=r[t++]*m+n;p.lineTo(w,x);break;case "q":var y=r[t++]*m+l;var B=r[t++]*m+n;var A=r[t++]*m+l;var C=r[t++]*m+n;p.quadraticCurveTo(A,C,y,B);break;case "b":y=r[t++]*m+l,B=r[t++]*m+n,A=r[t++]*m+l,C=r[t++]*m+n,w=r[t++]*m+l,x=r[t++]*m+n,p.bezierCurveTo(A,
    C,w,x,y,B)}m={offsetX:k.ha*m,path:p}}else m=void 0;f+=m.offsetX;b.push(m.path)}}c=[];a=0;for(d=b.length;a<d;a++)Array.prototype.push.apply(c,b[a].toShapes());return c}});Object.assign(kf.prototype,{load:function(a,b,c,d){var e=this,f=new Na(this.manager);f.setPath(this.path);f.load(a,function(a){try{var c=JSON.parse(a)}catch(k){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),c=JSON.parse(a.substring(65,a.length-2))}a=e.parse(c);b&&b(a)},c,d)},
    parse:function(a){return new pe(a)},setPath:function(a){this.path=a;return this}});var Ud,se={getContext:function(){void 0===Ud&&(Ud=new (window.AudioContext||window.webkitAudioContext));return Ud},setContext:function(a){Ud=a}};Object.assign(qe.prototype,{load:function(a,b,c,d){var e=new Na(this.manager);e.setResponseType("arraybuffer");e.load(a,function(a){se.getContext().decodeAudioData(a,function(a){b(a)})},c,d)}});Object.assign(lf.prototype,{update:function(){var a,b,c,d,e,f,g,h,k=new O,m=new O;
    return function(l){if(a!==this||b!==l.focus||c!==l.fov||d!==l.aspect*this.aspect||e!==l.near||f!==l.far||g!==l.zoom||h!==this.eyeSep){a=this;b=l.focus;c=l.fov;d=l.aspect*this.aspect;e=l.near;f=l.far;g=l.zoom;var n=l.projectionMatrix.clone();h=this.eyeSep/2;var p=h*e/b,q=e*Math.tan(Q.DEG2RAD*c*.5)/g;m.elements[12]=-h;k.elements[12]=h;var t=-q*d+p;var v=q*d+p;n.elements[0]=2*e/(v-t);n.elements[8]=(v+t)/(v-t);this.cameraL.projectionMatrix.copy(n);t=-q*d-p;v=q*d-p;n.elements[0]=2*e/(v-t);n.elements[8]=
    (v+t)/(v-t);this.cameraR.projectionMatrix.copy(n)}this.cameraL.matrixWorld.copy(l.matrixWorld).multiply(m);this.cameraR.matrixWorld.copy(l.matrixWorld).multiply(k)}}()});fd.prototype=Object.create(x.prototype);fd.prototype.constructor=fd;re.prototype=Object.assign(Object.create(x.prototype),{constructor:re,getInput:function(){return this.gain},removeFilter:function(){null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),
    this.filter=null)},getFilter:function(){return this.filter},setFilter:function(a){null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination);this.filter=a;this.gain.connect(this.filter);this.filter.connect(this.context.destination)},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(a){this.gain.gain.value=a},updateMatrixWorld:function(){var a=new p,b=new ha,c=new p,d=new p;return function(e){x.prototype.updateMatrixWorld.call(this,
    e);e=this.context.listener;var f=this.up;this.matrixWorld.decompose(a,b,c);d.set(0,0,-1).applyQuaternion(b);e.positionX?(e.positionX.setValueAtTime(a.x,this.context.currentTime),e.positionY.setValueAtTime(a.y,this.context.currentTime),e.positionZ.setValueAtTime(a.z,this.context.currentTime),e.forwardX.setValueAtTime(d.x,this.context.currentTime),e.forwardY.setValueAtTime(d.y,this.context.currentTime),e.forwardZ.setValueAtTime(d.z,this.context.currentTime),e.upX.setValueAtTime(f.x,this.context.currentTime),
    e.upY.setValueAtTime(f.y,this.context.currentTime),e.upZ.setValueAtTime(f.z,this.context.currentTime)):(e.setPosition(a.x,a.y,a.z),e.setOrientation(d.x,d.y,d.z,f.x,f.y,f.z))}}()});lc.prototype=Object.assign(Object.create(x.prototype),{constructor:lc,getOutput:function(){return this.gain},setNodeSource:function(a){this.hasPlaybackControl=!1;this.sourceType="audioNode";this.source=a;this.connect();return this},setBuffer:function(a){this.buffer=a;this.sourceType="buffer";this.autoplay&&this.play();return this},
    play:function(){if(!0===this.isPlaying)console.warn("THREE.Audio: Audio is already playing.");else if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");else{var a=this.context.createBufferSource();a.buffer=this.buffer;a.loop=this.loop;a.onended=this.onEnded.bind(this);a.playbackRate.setValueAtTime(this.playbackRate,this.startTime);this.startTime=this.context.currentTime;a.start(this.startTime,this.offset);this.isPlaying=!0;this.source=a;return this.connect()}},
    pause:function(){if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");else return!0===this.isPlaying&&(this.source.stop(),this.offset+=(this.context.currentTime-this.startTime)*this.playbackRate,this.isPlaying=!1),this},stop:function(){if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");else return this.source.stop(),this.offset=0,this.isPlaying=!1,this},connect:function(){if(0<this.filters.length){this.source.connect(this.filters[0]);
    for(var a=1,b=this.filters.length;a<b;a++)this.filters[a-1].connect(this.filters[a]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(0<this.filters.length){this.source.disconnect(this.filters[0]);for(var a=1,b=this.filters.length;a<b;a++)this.filters[a-1].disconnect(this.filters[a]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},
    getFilters:function(){return this.filters},setFilters:function(a){a||(a=[]);!0===this.isPlaying?(this.disconnect(),this.filters=a,this.connect()):this.filters=a;return this},getFilter:function(){return this.getFilters()[0]},setFilter:function(a){return this.setFilters(a?[a]:[])},setPlaybackRate:function(a){if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");else return this.playbackRate=a,!0===this.isPlaying&&this.source.playbackRate.setValueAtTime(this.playbackRate,
    this.context.currentTime),this},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop},setLoop:function(a){if(!1===this.hasPlaybackControl)console.warn("THREE.Audio: this Audio has no playback control.");else return this.loop=a,!0===this.isPlaying&&(this.source.loop=this.loop),this},getVolume:function(){return this.gain.gain.value},
    setVolume:function(a){this.gain.gain.value=a;return this}});te.prototype=Object.assign(Object.create(lc.prototype),{constructor:te,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(a){this.panner.refDistance=a},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(a){this.panner.rolloffFactor=a},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(a){this.panner.distanceModel=
    a},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(a){this.panner.maxDistance=a},updateMatrixWorld:function(){var a=new p;return function(b){x.prototype.updateMatrixWorld.call(this,b);a.setFromMatrixPosition(this.matrixWorld);this.panner.setPosition(a.x,a.y,a.z)}}()});Object.assign(ue.prototype,{getFrequencyData:function(){this.analyser.getByteFrequencyData(this.data);return this.data},getAverageFrequency:function(){for(var a=0,b=this.getFrequencyData(),c=0;c<b.length;c++)a+=
    b[c];return a/b.length}});Object.assign(ve.prototype,{accumulate:function(a,b){var c=this.buffer,d=this.valueSize;a=a*d+d;var e=this.cumulativeWeight;if(0===e){for(e=0;e!==d;++e)c[a+e]=c[e];e=b}else e+=b,this._mixBufferRegion(c,a,0,b/e,d);this.cumulativeWeight=e},apply:function(a){var b=this.valueSize,c=this.buffer;a=a*b+b;var d=this.cumulativeWeight,e=this.binding;this.cumulativeWeight=0;1>d&&this._mixBufferRegion(c,a,3*b,1-d,b);for(var d=b,f=b+b;d!==f;++d)if(c[d]!==c[d+b]){e.setValue(c,a);break}},
    saveOriginalState:function(){var a=this.buffer,b=this.valueSize,c=3*b;this.binding.getValue(a,c);for(var d=b;d!==c;++d)a[d]=a[c+d%b];this.cumulativeWeight=0},restoreOriginalState:function(){this.binding.setValue(this.buffer,3*this.valueSize)},_select:function(a,b,c,d,e){if(.5<=d)for(d=0;d!==e;++d)a[b+d]=a[c+d]},_slerp:function(a,b,c,d){ha.slerpFlat(a,b,a,b,a,c,d)},_lerp:function(a,b,c,d,e){for(var f=1-d,g=0;g!==e;++g){var h=b+g;a[h]=a[h]*f+a[c+g]*d}}});Object.assign(mf.prototype,{getValue:function(a,
    b){this.bind();var c=this._bindings[this._targetGroup.nCachedObjects_];void 0!==c&&c.getValue(a,b)},setValue:function(a,b){for(var c=this._bindings,d=this._targetGroup.nCachedObjects_,e=c.length;d!==e;++d)c[d].setValue(a,b)},bind:function(){for(var a=this._bindings,b=this._targetGroup.nCachedObjects_,c=a.length;b!==c;++b)a[b].bind()},unbind:function(){for(var a=this._bindings,b=this._targetGroup.nCachedObjects_,c=a.length;b!==c;++b)a[b].unbind()}});Object.assign(qa,{Composite:mf,create:function(a,
    b,c){return a&&a.isAnimationObjectGroup?new qa.Composite(a,b,c):new qa(a,b,c)},sanitizeNodeName:function(a){return a.replace(/\s/g,"_").replace(/[^\w-]/g,"")},parseTrackName:function(){var a=new RegExp("^"+/((?:[\w-]+[\/:])*)/.source+/([\w-\.]+)?/.source+/(?:\.([\w-]+)(?:\[(.+)\])?)?/.source+/\.([\w-]+)(?:\[(.+)\])?/.source+"$"),b=["material","materials","bones"];return function(c){var d=a.exec(c);if(!d)throw Error("PropertyBinding: Cannot parse trackName: "+c);var d={nodeName:d[2],objectName:d[3],
    objectIndex:d[4],propertyName:d[5],propertyIndex:d[6]},e=d.nodeName&&d.nodeName.lastIndexOf(".");if(void 0!==e&&-1!==e){var f=d.nodeName.substring(e+1);-1!==b.indexOf(f)&&(d.nodeName=d.nodeName.substring(0,e),d.objectName=f)}if(null===d.propertyName||0===d.propertyName.length)throw Error("PropertyBinding: can not parse propertyName from trackName: "+c);return d}}(),findNode:function(a,b){if(!b||""===b||"root"===b||"."===b||-1===b||b===a.name||b===a.uuid)return a;if(a.skeleton){var c=function(a){for(var c=
    0;c<a.bones.length;c++){var d=a.bones[c];if(d.name===b)return d}return null}(a.skeleton);if(c)return c}if(a.children){var d=function(a){for(var c=0;c<a.length;c++){var e=a[c];if(e.name===b||e.uuid===b||(e=d(e.children)))return e}return null};if(a=d(a.children))return a}return null}});Object.assign(qa.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},
    GetterByBindingType:[function(a,b){a[b]=this.node[this.propertyName]},function(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)a[b++]=c[d]},function(a,b){a[b]=this.resolvedProperty[this.propertyIndex]},function(a,b){this.resolvedProperty.toArray(a,b)}],SetterByBindingTypeAndVersioning:[[function(a,b){this.targetObject[this.propertyName]=a[b]},function(a,b){this.targetObject[this.propertyName]=a[b];this.targetObject.needsUpdate=!0},function(a,b){this.targetObject[this.propertyName]=a[b];
    this.targetObject.matrixWorldNeedsUpdate=!0}],[function(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[b++]},function(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[b++];this.targetObject.needsUpdate=!0},function(a,b){for(var c=this.resolvedProperty,d=0,e=c.length;d!==e;++d)c[d]=a[b++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(a,b){this.resolvedProperty[this.propertyIndex]=a[b]},function(a,b){this.resolvedProperty[this.propertyIndex]=a[b];
    this.targetObject.needsUpdate=!0},function(a,b){this.resolvedProperty[this.propertyIndex]=a[b];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(a,b){this.resolvedProperty.fromArray(a,b)},function(a,b){this.resolvedProperty.fromArray(a,b);this.targetObject.needsUpdate=!0},function(a,b){this.resolvedProperty.fromArray(a,b);this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(a,b){this.bind();this.getValue(a,b)},setValue:function(a,b){this.bind();this.setValue(a,b)},bind:function(){var a=
    this.node,b=this.parsedPath,c=b.objectName,d=b.propertyName,e=b.propertyIndex;a||(this.node=a=qa.findNode(this.rootNode,b.nodeName)||this.rootNode);this.getValue=this._getValue_unavailable;this.setValue=this._setValue_unavailable;if(a){if(c){var f=b.objectIndex;switch(c){case "materials":if(!a.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!a.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",
    this);return}a=a.material.materials;break;case "bones":if(!a.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}a=a.skeleton.bones;for(c=0;c<a.length;c++)if(a[c].name===f){f=c;break}break;default:if(void 0===a[c]){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}a=a[c]}if(void 0!==f){if(void 0===a[f]){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",
    this,a);return}a=a[f]}}f=a[d];if(void 0===f)console.error("THREE.PropertyBinding: Trying to update property for track: "+b.nodeName+"."+d+" but it wasn't found.",a);else{b=this.Versioning.None;void 0!==a.needsUpdate?(b=this.Versioning.NeedsUpdate,this.targetObject=a):void 0!==a.matrixWorldNeedsUpdate&&(b=this.Versioning.MatrixWorldNeedsUpdate,this.targetObject=a);c=this.BindingType.Direct;if(void 0!==e){if("morphTargetInfluences"===d){if(!a.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",
    this);return}if(a.geometry.isBufferGeometry){if(!a.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}for(c=0;c<this.node.geometry.morphAttributes.position.length;c++)if(a.geometry.morphAttributes.position[c].name===e){e=c;break}}else{if(!a.geometry.morphTargets){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.",
    this);return}for(c=0;c<this.node.geometry.morphTargets.length;c++)if(a.geometry.morphTargets[c].name===e){e=c;break}}}c=this.BindingType.ArrayElement;this.resolvedProperty=f;this.propertyIndex=e}else void 0!==f.fromArray&&void 0!==f.toArray?(c=this.BindingType.HasFromToArray,this.resolvedProperty=f):Array.isArray(f)?(c=this.BindingType.EntireArray,this.resolvedProperty=f):this.propertyName=d;this.getValue=this.GetterByBindingType[c];this.setValue=this.SetterByBindingTypeAndVersioning[c][b]}}else console.error("THREE.PropertyBinding: Trying to update node for track: "+
    this.path+" but it wasn't found.")},unbind:function(){this.node=null;this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound}});Object.assign(qa.prototype,{_getValue_unbound:qa.prototype.getValue,_setValue_unbound:qa.prototype.setValue});Object.assign(nf.prototype,{isAnimationObjectGroup:!0,add:function(){for(var a=this._objects,b=a.length,c=this.nCachedObjects_,d=this._indicesByUUID,e=this._paths,f=this._parsedPaths,g=this._bindings,h=g.length,k=0,m=arguments.length;k!==m;++k){var l=
    arguments[k],n=l.uuid,p=d[n];if(void 0===p){p=b++;d[n]=p;a.push(l);for(var n=0,r=h;n!==r;++n)g[n].push(new qa(l,e[n],f[n]))}else if(p<c){var t=--c,r=a[t];d[r.uuid]=p;a[p]=r;d[n]=t;a[t]=l;n=0;for(r=h;n!==r;++n){var v=g[n],w=v[p];v[p]=v[t];void 0===w&&(w=new qa(l,e[n],f[n]));v[t]=w}}else void 0!==a[p]&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=c},remove:function(){for(var a=
    this._objects,b=this.nCachedObjects_,c=this._indicesByUUID,d=this._bindings,e=d.length,f=0,g=arguments.length;f!==g;++f){var h=arguments[f],k=h.uuid,m=c[k];if(void 0!==m&&m>=b){var l=b++,n=a[l];c[n.uuid]=m;a[m]=n;c[k]=l;a[l]=h;h=0;for(k=e;h!==k;++h){var n=d[h],p=n[m];n[m]=n[l];n[l]=p}}}this.nCachedObjects_=b},uncache:function(){for(var a,b,c=this._objects,d=c.length,e=this.nCachedObjects_,f=this._indicesByUUID,g=this._bindings,h=g.length,k=0,m=arguments.length;k!==m;++k){b=arguments[k].uuid;var l=
    f[b];if(void 0!==l)if(delete f[b],l<e){var n=--e,p=c[n];b=--d;a=c[b];f[p.uuid]=l;c[l]=p;f[a.uuid]=n;c[n]=a;c.pop();for(var p=0,r=h;p!==r;++p){a=g[p];var t=a[b];a[l]=a[n];a[n]=t;a.pop()}}else for(b=--d,a=c[b],f[a.uuid]=l,c[l]=a,c.pop(),p=0,r=h;p!==r;++p)a=g[p],a[l]=a[b],a.pop()}this.nCachedObjects_=e},subscribe_:function(a,b){var c=this._bindingsIndicesByPath,d=c[a],e=this._bindings;if(void 0!==d)return e[d];var f=this._paths,g=this._parsedPaths,h=this._objects,k=this.nCachedObjects_,m=Array(h.length),
    d=e.length;c[a]=d;f.push(a);g.push(b);e.push(m);c=k;for(d=h.length;c!==d;++c)m[c]=new qa(h[c],a,b);return m},unsubscribe_:function(a){var b=this._bindingsIndicesByPath,c=b[a];if(void 0!==c){var d=this._paths,e=this._parsedPaths,f=this._bindings,g=f.length-1,h=f[g];b[a[g]]=c;f[c]=h;f.pop();e[c]=e[g];e.pop();d[c]=d[g];d.pop()}}});Object.assign(of.prototype,{play:function(){this._mixer._activateAction(this);return this},stop:function(){this._mixer._deactivateAction(this);return this.reset()},reset:function(){this.paused=
    !1;this.enabled=!0;this.time=0;this._loopCount=-1;this._startTime=null;return this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(a){this._startTime=a;return this},setLoop:function(a,b){this.loop=a;this.repetitions=b;return this},setEffectiveWeight:function(a){this.weight=a;this._effectiveWeight=this.enabled?
    a:0;return this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(a){return this._scheduleFading(a,0,1)},fadeOut:function(a){return this._scheduleFading(a,1,0)},crossFadeFrom:function(a,b,c){a.fadeOut(b);this.fadeIn(b);if(c){c=this._clip.duration;var d=a._clip.duration,e=c/d;a.warp(1,d/c,b);this.warp(e,1,b)}return this},crossFadeTo:function(a,b,c){return a.crossFadeFrom(this,b,c)},stopFading:function(){var a=this._weightInterpolant;null!==a&&(this._weightInterpolant=
    null,this._mixer._takeBackControlInterpolant(a));return this},setEffectiveTimeScale:function(a){this.timeScale=a;this._effectiveTimeScale=this.paused?0:a;return this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(a){this.timeScale=this._clip.duration/a;return this.stopWarping()},syncWith:function(a){this.time=a.time;this.timeScale=a.timeScale;return this.stopWarping()},halt:function(a){return this.warp(this._effectiveTimeScale,0,a)},warp:function(a,
    b,c){var d=this._mixer,e=d.time,f=this._timeScaleInterpolant,g=this.timeScale;null===f&&(this._timeScaleInterpolant=f=d._lendControlInterpolant());d=f.parameterPositions;f=f.sampleValues;d[0]=e;d[1]=e+c;f[0]=a/g;f[1]=b/g;return this},stopWarping:function(){var a=this._timeScaleInterpolant;null!==a&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(a));return this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||
    this._mixer._root},_update:function(a,b,c,d){if(this.enabled){var e=this._startTime;if(null!==e){b=(a-e)*c;if(0>b||0===c)return;this._startTime=null;b*=c}b*=this._updateTimeScale(a);c=this._updateTime(b);a=this._updateWeight(a);if(0<a){b=this._interpolants;for(var e=this._propertyBindings,f=0,g=b.length;f!==g;++f)b[f].evaluate(c),e[f].accumulate(d,a)}}else this._updateWeight(a)},_updateWeight:function(a){var b=0;if(this.enabled){var b=this.weight,c=this._weightInterpolant;if(null!==c){var d=c.evaluate(a)[0],
    b=b*d;a>c.parameterPositions[1]&&(this.stopFading(),0===d&&(this.enabled=!1))}}return this._effectiveWeight=b},_updateTimeScale:function(a){var b=0;if(!this.paused){var b=this.timeScale,c=this._timeScaleInterpolant;if(null!==c){var d=c.evaluate(a)[0],b=b*d;a>c.parameterPositions[1]&&(this.stopWarping(),0===b?this.paused=!0:this.timeScale=b)}}return this._effectiveTimeScale=b},_updateTime:function(a){var b=this.time+a;if(0===a)return b;var c=this._clip.duration,d=this.loop,e=this._loopCount;if(2200===
    d)a:{if(-1===e&&(this._loopCount=0,this._setEndings(!0,!0,!1)),b>=c)b=c;else if(0>b)b=0;else break a;this.clampWhenFinished?this.paused=!0:this.enabled=!1;this._mixer.dispatchEvent({type:"finished",action:this,direction:0>a?-1:1})}else{d=2202===d;-1===e&&(0<=a?(e=0,this._setEndings(!0,0===this.repetitions,d)):this._setEndings(0===this.repetitions,!0,d));if(b>=c||0>b){var f=Math.floor(b/c),b=b-c*f,e=e+Math.abs(f),g=this.repetitions-e;0>g?(this.clampWhenFinished?this.paused=!0:this.enabled=!1,b=0<a?
    c:0,this._mixer.dispatchEvent({type:"finished",action:this,direction:0<a?1:-1})):(0===g?(a=0>a,this._setEndings(a,!a,d)):this._setEndings(!1,!1,d),this._loopCount=e,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:f}))}if(d&&1===(e&1))return this.time=b,c-b}return this.time=b},_setEndings:function(a,b,c){var d=this._interpolantSettings;c?(d.endingStart=2401,d.endingEnd=2401):(d.endingStart=a?this.zeroSlopeAtStart?2401:2400:2402,d.endingEnd=b?this.zeroSlopeAtEnd?2401:2400:2402)},_scheduleFading:function(a,
    b,c){var d=this._mixer,e=d.time,f=this._weightInterpolant;null===f&&(this._weightInterpolant=f=d._lendControlInterpolant());d=f.parameterPositions;f=f.sampleValues;d[0]=e;f[0]=b;d[1]=e+a;f[1]=c;return this}});we.prototype=Object.assign(Object.create(za.prototype),{constructor:we,_bindAction:function(a,b){var c=a._localRoot||this._root,d=a._clip.tracks,e=d.length,f=a._propertyBindings;a=a._interpolants;var g=c.uuid,h=this._bindingsByRootAndName,k=h[g];void 0===k&&(k={},h[g]=k);for(h=0;h!==e;++h){var m=
    d[h],l=m.name,n=k[l];if(void 0===n){n=f[h];if(void 0!==n){null===n._cacheIndex&&(++n.referenceCount,this._addInactiveBinding(n,g,l));continue}n=new ve(qa.create(c,l,b&&b._propertyBindings[h].binding.parsedPath),m.ValueTypeName,m.getValueSize());++n.referenceCount;this._addInactiveBinding(n,g,l)}f[h]=n;a[h].resultBuffer=n.buffer}},_activateAction:function(a){if(!this._isActiveAction(a)){if(null===a._cacheIndex){var b=(a._localRoot||this._root).uuid,c=a._clip.uuid,d=this._actionsByClip[c];this._bindAction(a,
    d&&d.knownActions[0]);this._addInactiveAction(a,c,b)}b=a._propertyBindings;c=0;for(d=b.length;c!==d;++c){var e=b[c];0===e.useCount++&&(this._lendBinding(e),e.saveOriginalState())}this._lendAction(a)}},_deactivateAction:function(a){if(this._isActiveAction(a)){for(var b=a._propertyBindings,c=0,d=b.length;c!==d;++c){var e=b[c];0===--e.useCount&&(e.restoreOriginalState(),this._takeBackBinding(e))}this._takeBackAction(a)}},_initMemoryManager:function(){this._actions=[];this._nActiveActions=0;this._actionsByClip=
    {};this._bindings=[];this._nActiveBindings=0;this._bindingsByRootAndName={};this._controlInterpolants=[];this._nActiveControlInterpolants=0;var a=this;this.stats={actions:{get total(){return a._actions.length},get inUse(){return a._nActiveActions}},bindings:{get total(){return a._bindings.length},get inUse(){return a._nActiveBindings}},controlInterpolants:{get total(){return a._controlInterpolants.length},get inUse(){return a._nActiveControlInterpolants}}}},_isActiveAction:function(a){a=a._cacheIndex;
    return null!==a&&a<this._nActiveActions},_addInactiveAction:function(a,b,c){var d=this._actions,e=this._actionsByClip,f=e[b];void 0===f?(f={knownActions:[a],actionByRoot:{}},a._byClipCacheIndex=0,e[b]=f):(b=f.knownActions,a._byClipCacheIndex=b.length,b.push(a));a._cacheIndex=d.length;d.push(a);f.actionByRoot[c]=a},_removeInactiveAction:function(a){var b=this._actions,c=b[b.length-1],d=a._cacheIndex;c._cacheIndex=d;b[d]=c;b.pop();a._cacheIndex=null;var b=a._clip.uuid,c=this._actionsByClip,d=c[b],e=
    d.knownActions,f=e[e.length-1],g=a._byClipCacheIndex;f._byClipCacheIndex=g;e[g]=f;e.pop();a._byClipCacheIndex=null;delete d.actionByRoot[(a._localRoot||this._root).uuid];0===e.length&&delete c[b];this._removeInactiveBindingsForAction(a)},_removeInactiveBindingsForAction:function(a){a=a._propertyBindings;for(var b=0,c=a.length;b!==c;++b){var d=a[b];0===--d.referenceCount&&this._removeInactiveBinding(d)}},_lendAction:function(a){var b=this._actions,c=a._cacheIndex,d=this._nActiveActions++,e=b[d];a._cacheIndex=
    d;b[d]=a;e._cacheIndex=c;b[c]=e},_takeBackAction:function(a){var b=this._actions,c=a._cacheIndex,d=--this._nActiveActions,e=b[d];a._cacheIndex=d;b[d]=a;e._cacheIndex=c;b[c]=e},_addInactiveBinding:function(a,b,c){var d=this._bindingsByRootAndName,e=d[b],f=this._bindings;void 0===e&&(e={},d[b]=e);e[c]=a;a._cacheIndex=f.length;f.push(a)},_removeInactiveBinding:function(a){var b=this._bindings,c=a.binding,d=c.rootNode.uuid,c=c.path,e=this._bindingsByRootAndName,f=e[d],g=b[b.length-1];a=a._cacheIndex;
    g._cacheIndex=a;b[a]=g;b.pop();delete f[c];a:{for(var h in f)break a;delete e[d]}},_lendBinding:function(a){var b=this._bindings,c=a._cacheIndex,d=this._nActiveBindings++,e=b[d];a._cacheIndex=d;b[d]=a;e._cacheIndex=c;b[c]=e},_takeBackBinding:function(a){var b=this._bindings,c=a._cacheIndex,d=--this._nActiveBindings,e=b[d];a._cacheIndex=d;b[d]=a;e._cacheIndex=c;b[c]=e},_lendControlInterpolant:function(){var a=this._controlInterpolants,b=this._nActiveControlInterpolants++,c=a[b];void 0===c&&(c=new ed(new Float32Array(2),
    new Float32Array(2),1,this._controlInterpolantsResultBuffer),c.__cacheIndex=b,a[b]=c);return c},_takeBackControlInterpolant:function(a){var b=this._controlInterpolants,c=a.__cacheIndex,d=--this._nActiveControlInterpolants,e=b[d];a.__cacheIndex=d;b[d]=a;e.__cacheIndex=c;b[c]=e},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(a,b){var c=b||this._root,d=c.uuid,c="string"===typeof a?Ca.findByName(c,a):a;a=null!==c?c.uuid:a;var e=this._actionsByClip[a],f=null;if(void 0!==e){f=
    e.actionByRoot[d];if(void 0!==f)return f;f=e.knownActions[0];null===c&&(c=f._clip)}if(null===c)return null;b=new of(this,c,b);this._bindAction(b,f);this._addInactiveAction(b,a,d);return b},existingAction:function(a,b){var c=b||this._root;b=c.uuid;c="string"===typeof a?Ca.findByName(c,a):a;a=this._actionsByClip[c?c.uuid:a];return void 0!==a?a.actionByRoot[b]||null:null},stopAllAction:function(){for(var a=this._actions,b=this._nActiveActions,c=this._bindings,d=this._nActiveBindings,e=this._nActiveBindings=
    this._nActiveActions=0;e!==b;++e)a[e].reset();for(e=0;e!==d;++e)c[e].useCount=0;return this},update:function(a){a*=this.timeScale;for(var b=this._actions,c=this._nActiveActions,d=this.time+=a,e=Math.sign(a),f=this._accuIndex^=1,g=0;g!==c;++g)b[g]._update(d,a,e,f);a=this._bindings;b=this._nActiveBindings;for(g=0;g!==b;++g)a[g].apply(f);return this},getRoot:function(){return this._root},uncacheClip:function(a){var b=this._actions;a=a.uuid;var c=this._actionsByClip,d=c[a];if(void 0!==d){for(var d=d.knownActions,
    e=0,f=d.length;e!==f;++e){var g=d[e];this._deactivateAction(g);var h=g._cacheIndex,k=b[b.length-1];g._cacheIndex=null;g._byClipCacheIndex=null;k._cacheIndex=h;b[h]=k;b.pop();this._removeInactiveBindingsForAction(g)}delete c[a]}},uncacheRoot:function(a){a=a.uuid;var b=this._actionsByClip;for(d in b){var c=b[d].actionByRoot[a];void 0!==c&&(this._deactivateAction(c),this._removeInactiveAction(c))}var d=this._bindingsByRootAndName[a];if(void 0!==d)for(var e in d)a=d[e],a.restoreOriginalState(),this._removeInactiveBinding(a)},
    uncacheAction:function(a,b){a=this.existingAction(a,b);null!==a&&(this._deactivateAction(a),this._removeInactiveAction(a))}});Qd.prototype.clone=function(){return new Qd(void 0===this.value.clone?this.value:this.value.clone())};xe.prototype=Object.assign(Object.create(E.prototype),{constructor:xe,isInstancedBufferGeometry:!0,copy:function(a){E.prototype.copy.call(this,a);this.maxInstancedCount=a.maxInstancedCount;return this},clone:function(){return(new this.constructor).copy(this)}});Object.defineProperties(ye.prototype,
    {count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}});Object.assign(ye.prototype,{isInterleavedBufferAttribute:!0,setX:function(a,b){this.data.array[a*this.data.stride+this.offset]=b;return this},setY:function(a,b){this.data.array[a*this.data.stride+this.offset+1]=b;return this},setZ:function(a,b){this.data.array[a*this.data.stride+this.offset+2]=b;return this},setW:function(a,b){this.data.array[a*this.data.stride+this.offset+3]=b;return this},getX:function(a){return this.data.array[a*
    this.data.stride+this.offset]},getY:function(a){return this.data.array[a*this.data.stride+this.offset+1]},getZ:function(a){return this.data.array[a*this.data.stride+this.offset+2]},getW:function(a){return this.data.array[a*this.data.stride+this.offset+3]},setXY:function(a,b,c){a=a*this.data.stride+this.offset;this.data.array[a+0]=b;this.data.array[a+1]=c;return this},setXYZ:function(a,b,c,d){a=a*this.data.stride+this.offset;this.data.array[a+0]=b;this.data.array[a+1]=c;this.data.array[a+2]=d;return this},
    setXYZW:function(a,b,c,d,e){a=a*this.data.stride+this.offset;this.data.array[a+0]=b;this.data.array[a+1]=c;this.data.array[a+2]=d;this.data.array[a+3]=e;return this}});Object.defineProperty(mc.prototype,"needsUpdate",{set:function(a){!0===a&&this.version++}});Object.assign(mc.prototype,{isInterleavedBuffer:!0,setArray:function(a){if(Array.isArray(a))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.count=void 0!==a?a.length/this.stride:0;this.array=a},setDynamic:function(a){this.dynamic=
    a;return this},copy:function(a){this.array=new a.array.constructor(a.array);this.count=a.count;this.stride=a.stride;this.dynamic=a.dynamic;return this},copyAt:function(a,b,c){a*=this.stride;c*=b.stride;for(var d=0,e=this.stride;d<e;d++)this.array[a+d]=b.array[c+d];return this},set:function(a,b){void 0===b&&(b=0);this.array.set(a,b);return this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(a){this.onUploadCallback=a;return this}});ze.prototype=Object.assign(Object.create(mc.prototype),
    {constructor:ze,isInstancedInterleavedBuffer:!0,copy:function(a){mc.prototype.copy.call(this,a);this.meshPerAttribute=a.meshPerAttribute;return this}});Ae.prototype=Object.assign(Object.create(M.prototype),{constructor:Ae,isInstancedBufferAttribute:!0,copy:function(a){M.prototype.copy.call(this,a);this.meshPerAttribute=a.meshPerAttribute;return this}});Object.assign(pf.prototype,{linePrecision:1,set:function(a,b){this.ray.set(a,b)},setFromCamera:function(a,b){b&&b.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(b.matrixWorld),
    this.ray.direction.set(a.x,a.y,.5).unproject(b).sub(this.ray.origin).normalize()):b&&b.isOrthographicCamera?(this.ray.origin.set(a.x,a.y,(b.near+b.far)/(b.near-b.far)).unproject(b),this.ray.direction.set(0,0,-1).transformDirection(b.matrixWorld)):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(a,b){var c=[];Be(a,this,c,b);c.sort(qf);return c},intersectObjects:function(a,b){var c=[];if(!1===Array.isArray(a))return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),
    c;for(var d=0,e=a.length;d<e;d++)Be(a[d],this,c,b);c.sort(qf);return c}});Object.assign(rf.prototype,{start:function(){this.oldTime=this.startTime=("undefined"===typeof performance?Date:performance).now();this.elapsedTime=0;this.running=!0},stop:function(){this.getElapsedTime();this.autoStart=this.running=!1},getElapsedTime:function(){this.getDelta();return this.elapsedTime},getDelta:function(){var a=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var b=("undefined"===typeof performance?
    Date:performance).now(),a=(b-this.oldTime)/1E3;this.oldTime=b;this.elapsedTime+=a}return a}});Object.assign(sf.prototype,{set:function(a,b,c){this.radius=a;this.phi=b;this.theta=c;return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.radius=a.radius;this.phi=a.phi;this.theta=a.theta;return this},makeSafe:function(){this.phi=Math.max(1E-6,Math.min(Math.PI-1E-6,this.phi));return this},setFromVector3:function(a){this.radius=a.length();0===this.radius?this.phi=this.theta=
    0:(this.theta=Math.atan2(a.x,a.z),this.phi=Math.acos(Q.clamp(a.y/this.radius,-1,1)));return this}});Object.assign(tf.prototype,{set:function(a,b,c){this.radius=a;this.theta=b;this.y=c;return this},clone:function(){return(new this.constructor).copy(this)},copy:function(a){this.radius=a.radius;this.theta=a.theta;this.y=a.y;return this},setFromVector3:function(a){this.radius=Math.sqrt(a.x*a.x+a.z*a.z);this.theta=Math.atan2(a.x,a.z);this.y=a.y;return this}});gd.prototype=Object.create(x.prototype);gd.prototype.constructor=
    gd;gd.prototype.isImmediateRenderObject=!0;hd.prototype=Object.create(X.prototype);hd.prototype.constructor=hd;hd.prototype.update=function(){var a=new p,b=new p,c=new ma;return function(){var d,e=["a","b","c"];this.object.updateMatrixWorld(!0);c.getNormalMatrix(this.object.matrixWorld);var f=this.object.matrixWorld,g=this.geometry.attributes.position;if((d=this.object.geometry)&&d.isGeometry)for(var h=d.vertices,k=d.faces,l=d=0,p=k.length;l<p;l++)for(var n=k[l],u=0,r=n.vertexNormals.length;u<r;u++){var t=
    n.vertexNormals[u];a.copy(h[n[e[u]]]).applyMatrix4(f);b.copy(t).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);g.setXYZ(d,a.x,a.y,a.z);d+=1;g.setXYZ(d,b.x,b.y,b.z);d+=1}else if(d&&d.isBufferGeometry)for(e=d.attributes.position,h=d.attributes.normal,u=d=0,r=e.count;u<r;u++)a.set(e.getX(u),e.getY(u),e.getZ(u)).applyMatrix4(f),b.set(h.getX(u),h.getY(u),h.getZ(u)),b.applyMatrix3(c).normalize().multiplyScalar(this.size).add(a),g.setXYZ(d,a.x,a.y,a.z),d+=1,g.setXYZ(d,b.x,b.y,b.z),d+=1;g.needsUpdate=
    !0}}();nc.prototype=Object.create(x.prototype);nc.prototype.constructor=nc;nc.prototype.dispose=function(){this.cone.geometry.dispose();this.cone.material.dispose()};nc.prototype.update=function(){var a=new p,b=new p;return function(){this.light.updateMatrixWorld();var c=this.light.distance?this.light.distance:1E3,d=c*Math.tan(this.light.angle);this.cone.scale.set(d,d,c);a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(b.sub(a));
    void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}();oc.prototype=Object.create(X.prototype);oc.prototype.constructor=oc;oc.prototype.updateMatrixWorld=function(){var a=new p,b=new O,c=new O;return function(d){var e=this.bones,f=this.geometry,g=f.getAttribute("position");c.getInverse(this.root.matrixWorld);for(var h=0,k=0;h<e.length;h++){var l=e[h];l.parent&&l.parent.isBone&&(b.multiplyMatrices(c,l.matrixWorld),a.setFromMatrixPosition(b),
    g.setXYZ(k,a.x,a.y,a.z),b.multiplyMatrices(c,l.parent.matrixWorld),a.setFromMatrixPosition(b),g.setXYZ(k+1,a.x,a.y,a.z),k+=2)}f.getAttribute("position").needsUpdate=!0;x.prototype.updateMatrixWorld.call(this,d)}}();pc.prototype=Object.create(ra.prototype);pc.prototype.constructor=pc;pc.prototype.dispose=function(){this.geometry.dispose();this.material.dispose()};pc.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)};qc.prototype=
    Object.create(x.prototype);qc.prototype.constructor=qc;qc.prototype.dispose=function(){this.children[0].geometry.dispose();this.children[0].material.dispose()};qc.prototype.update=function(){var a=.5*this.light.width,b=.5*this.light.height,c=this.line.geometry.attributes.position,d=c.array;d[0]=a;d[1]=-b;d[2]=0;d[3]=a;d[4]=b;d[5]=0;d[6]=-a;d[7]=b;d[8]=0;d[9]=-a;d[10]=-b;d[11]=0;d[12]=a;d[13]=-b;d[14]=0;c.needsUpdate=!0;void 0!==this.color?this.line.material.color.set(this.color):this.line.material.color.copy(this.light.color)};
    rc.prototype=Object.create(x.prototype);rc.prototype.constructor=rc;rc.prototype.dispose=function(){this.children[0].geometry.dispose();this.children[0].material.dispose()};rc.prototype.update=function(){var a=new p,b=new H,c=new H;return function(){var d=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var e=d.geometry.getAttribute("color");b.copy(this.light.color);c.copy(this.light.groundColor);for(var f=0,g=e.count;f<g;f++){var h=f<g/2?b:c;e.setXYZ(f,h.r,h.g,h.b)}e.needsUpdate=
    !0}d.lookAt(a.setFromMatrixPosition(this.light.matrixWorld).negate())}}();id.prototype=Object.create(X.prototype);id.prototype.constructor=id;Rd.prototype=Object.create(X.prototype);Rd.prototype.constructor=Rd;jd.prototype=Object.create(X.prototype);jd.prototype.constructor=jd;jd.prototype.update=function(){var a=new p,b=new p,c=new ma;return function(){this.object.updateMatrixWorld(!0);c.getNormalMatrix(this.object.matrixWorld);for(var d=this.object.matrixWorld,e=this.geometry.attributes.position,
    f=this.object.geometry,g=f.vertices,f=f.faces,h=0,k=0,l=f.length;k<l;k++){var p=f[k],n=p.normal;a.copy(g[p.a]).add(g[p.b]).add(g[p.c]).divideScalar(3).applyMatrix4(d);b.copy(n).applyMatrix3(c).normalize().multiplyScalar(this.size).add(a);e.setXYZ(h,a.x,a.y,a.z);h+=1;e.setXYZ(h,b.x,b.y,b.z);h+=1}e.needsUpdate=!0}}();sc.prototype=Object.create(x.prototype);sc.prototype.constructor=sc;sc.prototype.dispose=function(){this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();
    this.targetLine.material.dispose()};sc.prototype.update=function(){var a=new p,b=new p,c=new p;return function(){a.setFromMatrixPosition(this.light.matrixWorld);b.setFromMatrixPosition(this.light.target.matrixWorld);c.subVectors(b,a);this.lightPlane.lookAt(c);void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color));this.targetLine.lookAt(c);
    this.targetLine.scale.z=c.length()}}();kd.prototype=Object.create(X.prototype);kd.prototype.constructor=kd;kd.prototype.update=function(){function a(a,g,h,k){d.set(g,h,k).unproject(e);a=c[a];if(void 0!==a)for(g=b.getAttribute("position"),h=0,k=a.length;h<k;h++)g.setXYZ(a[h],d.x,d.y,d.z)}var b,c,d=new p,e=new Ta;return function(){b=this.geometry;c=this.pointMap;e.projectionMatrix.copy(this.camera.projectionMatrix);a("c",0,0,-1);a("t",0,0,1);a("n1",-1,-1,-1);a("n2",1,-1,-1);a("n3",-1,1,-1);a("n4",1,
    1,-1);a("f1",-1,-1,1);a("f2",1,-1,1);a("f3",-1,1,1);a("f4",1,1,1);a("u1",.7,1.1,-1);a("u2",-.7,1.1,-1);a("u3",0,2,-1);a("cf1",-1,0,1);a("cf2",1,0,1);a("cf3",0,-1,1);a("cf4",0,1,1);a("cn1",-1,0,-1);a("cn2",1,0,-1);a("cn3",0,-1,-1);a("cn4",0,1,-1);b.getAttribute("position").needsUpdate=!0}}();Gb.prototype=Object.create(X.prototype);Gb.prototype.constructor=Gb;Gb.prototype.update=function(){var a=new Xa;return function(b){void 0!==b&&console.warn("THREE.BoxHelper: .update() has no longer arguments.");
    void 0!==this.object&&a.setFromObject(this.object);if(!a.isEmpty()){b=a.min;var c=a.max,d=this.geometry.attributes.position,e=d.array;e[0]=c.x;e[1]=c.y;e[2]=c.z;e[3]=b.x;e[4]=c.y;e[5]=c.z;e[6]=b.x;e[7]=b.y;e[8]=c.z;e[9]=c.x;e[10]=b.y;e[11]=c.z;e[12]=c.x;e[13]=c.y;e[14]=b.z;e[15]=b.x;e[16]=c.y;e[17]=b.z;e[18]=b.x;e[19]=b.y;e[20]=b.z;e[21]=c.x;e[22]=b.y;e[23]=b.z;d.needsUpdate=!0;this.geometry.computeBoundingSphere()}}}();Gb.prototype.setFromObject=function(a){this.object=a;this.update();return this};
    ld.prototype=Object.create(X.prototype);ld.prototype.constructor=ld;ld.prototype.updateMatrixWorld=function(a){var b=this.box;b.isEmpty()||(b.getCenter(this.position),b.getSize(this.scale),this.scale.multiplyScalar(.5),x.prototype.updateMatrixWorld.call(this,a))};md.prototype=Object.create(sa.prototype);md.prototype.constructor=md;md.prototype.updateMatrixWorld=function(a){var b=-this.plane.constant;1E-8>Math.abs(b)&&(b=1E-8);this.scale.set(.5*this.size,.5*this.size,b);this.lookAt(this.plane.normal);
    x.prototype.updateMatrixWorld.call(this,a)};var Sd,Ce;Hb.prototype=Object.create(x.prototype);Hb.prototype.constructor=Hb;Hb.prototype.setDirection=function(){var a=new p,b;return function(c){.99999<c.y?this.quaternion.set(0,0,0,1):-.99999>c.y?this.quaternion.set(1,0,0,0):(a.set(c.z,0,-c.x).normalize(),b=Math.acos(c.y),this.quaternion.setFromAxisAngle(a,b))}}();Hb.prototype.setLength=function(a,b,c){void 0===b&&(b=.2*a);void 0===c&&(c=.2*b);this.line.scale.set(1,Math.max(0,a-b),1);this.line.updateMatrix();
    this.cone.scale.set(c,b,c);this.cone.position.y=a;this.cone.updateMatrix()};Hb.prototype.setColor=function(a){this.line.material.color.copy(a);this.cone.material.color.copy(a)};nd.prototype=Object.create(X.prototype);nd.prototype.constructor=nd;C.create=function(a,b){console.log("THREE.Curve.create() has been deprecated");a.prototype=Object.create(C.prototype);a.prototype.constructor=a;a.prototype.getPoint=b;return a};Object.assign(bb.prototype,{createPointsGeometry:function(a){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");
    a=this.getPoints(a);return this.createGeometry(a)},createSpacedPointsGeometry:function(a){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");a=this.getSpacedPoints(a);return this.createGeometry(a)},createGeometry:function(a){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");for(var b=new L,c=0,d=a.length;c<d;c++){var e=a[c];b.vertices.push(new p(e.x,
    e.y,e.z||0))}return b}});Object.assign(Sa.prototype,{fromPoints:function(a){console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");this.setFromPoints(a)}});vf.prototype=Object.create(ca.prototype);wf.prototype=Object.create(ca.prototype);De.prototype=Object.create(ca.prototype);Object.assign(De.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},
    reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}});id.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")};oc.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")};Object.assign(kc.prototype,{extractUrlBase:function(a){console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");
    return He.extractUrlBase(a)}});Object.assign(od.prototype,{center:function(a){console.warn("THREE.Box2: .center() has been renamed to .getCenter().");return this.getCenter(a)},empty:function(){console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");return this.isEmpty()},isIntersectionBox:function(a){console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(a)},size:function(a){console.warn("THREE.Box2: .size() has been renamed to .getSize().");
    return this.getSize(a)}});Object.assign(Xa.prototype,{center:function(a){console.warn("THREE.Box3: .center() has been renamed to .getCenter().");return this.getCenter(a)},empty:function(){console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");return this.isEmpty()},isIntersectionBox:function(a){console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(a)},isIntersectionSphere:function(a){console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");
    return this.intersectsSphere(a)},size:function(a){console.warn("THREE.Box3: .size() has been renamed to .getSize().");return this.getSize(a)}});Nb.prototype.center=function(a){console.warn("THREE.Line3: .center() has been renamed to .getCenter().");return this.getCenter(a)};Object.assign(Q,{random16:function(){console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead.");return Math.random()},nearestPowerOfTwo:function(a){console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().");
    return Q.floorPowerOfTwo(a)},nextPowerOfTwo:function(a){console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().");return Q.ceilPowerOfTwo(a)}});Object.assign(ma.prototype,{flattenToArrayOffset:function(a,b){console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(a,b)},multiplyVector3:function(a){console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");return a.applyMatrix3(this)},
    multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBuffer:function(a){console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");return this.applyToBufferAttribute(a)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}});Object.assign(O.prototype,{extractPosition:function(a){console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");
    return this.copyPosition(a)},flattenToArrayOffset:function(a,b){console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(a,b)},getPosition:function(){var a;return function(){void 0===a&&(a=new p);console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");return a.setFromMatrixColumn(this,3)}}(),setRotationFromQuaternion:function(a){console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");
    return this.makeRotationFromQuaternion(a)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(a){console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},multiplyVector4:function(a){console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},
    rotateAxis:function(a){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");a.transformDirection(this)},crossVector:function(a){console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},
    rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBuffer:function(a){console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.");return this.applyToBufferAttribute(a)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(a,b,c,d,e,f){console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");
    return this.makePerspective(a,b,d,c,e,f)}});Ea.prototype.isIntersectionLine=function(a){console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");return this.intersectsLine(a)};ha.prototype.multiplyVector3=function(a){console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");return a.applyQuaternion(this)};Object.assign(sb.prototype,{isIntersectionBox:function(a){console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");
    return this.intersectsBox(a)},isIntersectionPlane:function(a){console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");return this.intersectsPlane(a)},isIntersectionSphere:function(a){console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");return this.intersectsSphere(a)}});Object.assign(jb.prototype,{extractAllPoints:function(a){console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");return this.extractPoints(a)},
    extrude:function(a){console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");return new ib(this,a)},makeGeometry:function(a){console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");return new xb(this,a)}});Object.assign(D.prototype,{fromAttribute:function(a,b,c){console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(a,b,c)},distanceToManhattan:function(a){console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");
    return this.manhattanDistanceTo(a)},lengthManhattan:function(){console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");return this.manhattanLength()}});Object.assign(p.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},
    getPositionFromMatrix:function(a){console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");return this.setFromMatrixPosition(a)},getScaleFromMatrix:function(a){console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");return this.setFromMatrixScale(a)},getColumnFromMatrix:function(a,b){console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");return this.setFromMatrixColumn(b,
    a)},applyProjection:function(a){console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");return this.applyMatrix4(a)},fromAttribute:function(a,b,c){console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(a,b,c)},distanceToManhattan:function(a){console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");return this.manhattanDistanceTo(a)},lengthManhattan:function(){console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");
    return this.manhattanLength()}});Object.assign(aa.prototype,{fromAttribute:function(a,b,c){console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(a,b,c)},lengthManhattan:function(){console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");return this.manhattanLength()}});L.prototype.computeTangents=function(){console.warn("THREE.Geometry: .computeTangents() has been removed.")};Object.assign(x.prototype,
    {getChildByName:function(a){console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");return this.getObjectByName(a)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(a,b){console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");return this.translateOnAxis(b,a)}});Object.defineProperties(x.prototype,{eulerOrder:{get:function(){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");
    return this.rotation.order},set:function(a){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");this.rotation.order=a}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}});Object.defineProperties(Dc.prototype,{objects:{get:function(){console.warn("THREE.LOD: .objects has been renamed to .levels.");
    return this.levels}}});Object.defineProperty(Ec.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}});Object.defineProperty(C.prototype,"__arcLengthDivisions",{get:function(){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");return this.arcLengthDivisions},set:function(a){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.");
    this.arcLengthDivisions=a}});ba.prototype.setLens=function(a,b){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.");void 0!==b&&(this.filmGauge=b);this.setFocalLength(a)};Object.defineProperties(da.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(a){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");this.shadow.camera.fov=a}},
    shadowCameraLeft:{set:function(a){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");this.shadow.camera.left=a}},shadowCameraRight:{set:function(a){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");this.shadow.camera.right=a}},shadowCameraTop:{set:function(a){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");this.shadow.camera.top=a}},shadowCameraBottom:{set:function(a){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");
    this.shadow.camera.bottom=a}},shadowCameraNear:{set:function(a){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");this.shadow.camera.near=a}},shadowCameraFar:{set:function(a){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");this.shadow.camera.far=a}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(a){console.warn("THREE.Light: .shadowBias is now .shadow.bias.");
    this.shadow.bias=a}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(a){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");this.shadow.mapSize.width=a}},shadowMapHeight:{set:function(a){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");this.shadow.mapSize.height=a}}});Object.defineProperties(M.prototype,{length:{get:function(){console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");
    return this.array.length}}});Object.assign(E.prototype,{addIndex:function(a){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");this.setIndex(a)},addDrawCall:function(a,b,c){void 0!==c&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.");console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");this.addGroup(a,b)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");
    this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")}});Object.defineProperties(E.prototype,{drawcalls:{get:function(){console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");return this.groups}},offsets:{get:function(){console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");return this.groups}}});
    Object.defineProperties(Qd.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");return this}}});Object.defineProperties(P.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},
    wrapRGB:{get:function(){console.warn("THREE.Material: .wrapRGB has been removed.");return new H}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(a){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.");this.flatShading=1===a}}});Object.defineProperties(Ma.prototype,{metal:{get:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.");
    return!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}});Object.defineProperties(Fa.prototype,{derivatives:{get:function(){console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");return this.extensions.derivatives},set:function(a){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");this.extensions.derivatives=a}}});Object.assign(ce.prototype,
    {getCurrentRenderTarget:function(){console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");return this.getRenderTarget()},getMaxAnisotropy:function(){console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");return this.capabilities.getMaxAnisotropy()},getPrecision:function(){console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");return this.capabilities.precision},resetGLState:function(){console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");
    return this.state.reset()},supportsFloatTextures:function(){console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");return this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");return this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");
    return this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");return this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");return this.extensions.get("WEBGL_compressed_texture_pvrtc")},
    supportsBlendMinMax:function(){console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");return this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");return this.capabilities.vertexTextures},supportsInstancedArrays:function(){console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");
    return this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(a){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");this.setScissorTest(a)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")}});
    Object.defineProperties(ce.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");this.shadowMap.enabled=a}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");this.shadowMap.type=a}},shadowMapCullFace:{get:function(){return this.shadowMap.cullFace},set:function(a){console.warn("THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.");
    this.shadowMap.cullFace=a}}});Object.defineProperties(Ue.prototype,{cullFace:{get:function(){return this.renderReverseSided?2:1},set:function(a){a=1!==a;console.warn("WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to "+a+".");this.renderReverseSided=a}}});Object.defineProperties(kb.prototype,{wrapS:{get:function(){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");return this.texture.wrapS},set:function(a){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");
    this.texture.wrapS=a}},wrapT:{get:function(){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");return this.texture.wrapT},set:function(a){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");this.texture.wrapT=a}},magFilter:{get:function(){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");return this.texture.magFilter},set:function(a){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");this.texture.magFilter=
    a}},minFilter:{get:function(){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");return this.texture.minFilter},set:function(a){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");this.texture.minFilter=a}},anisotropy:{get:function(){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");return this.texture.anisotropy},set:function(a){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");this.texture.anisotropy=
    a}},offset:{get:function(){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");return this.texture.offset},set:function(a){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");this.texture.offset=a}},repeat:{get:function(){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");return this.texture.repeat},set:function(a){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");this.texture.repeat=a}},format:{get:function(){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");
    return this.texture.format},set:function(a){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");this.texture.format=a}},type:{get:function(){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");return this.texture.type},set:function(a){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");this.texture.type=a}},generateMipmaps:{get:function(){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");return this.texture.generateMipmaps},
    set:function(a){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");this.texture.generateMipmaps=a}}});Object.assign(be.prototype,{getStandingMatrix:function(){console.warn("THREE.WebVRManager: .getStandingMatrix() has been removed.")}});Object.defineProperties(be.prototype,{standing:{set:function(){console.warn("THREE.WebVRManager: .standing has been removed.")}}});lc.prototype.load=function(a){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
    var b=this;(new qe).load(a,function(a){b.setBuffer(a)});return this};ue.prototype.getData=function(){console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");return this.getFrequencyData()};fd.prototype.updateCubeMap=function(a,b){console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");return this.update(a,b)};l.WebGLRenderTargetCube=Jb;l.WebGLRenderTarget=kb;l.WebGLRenderer=ce;l.ShaderLib=tb;l.UniformsLib=K;l.UniformsUtils=Ga;l.ShaderChunk=R;l.FogExp2=Pb;l.Fog=Qb;
    l.Scene=vd;l.LensFlare=de;l.Sprite=Cc;l.LOD=Dc;l.SkinnedMesh=xd;l.Skeleton=Ec;l.Bone=wd;l.Mesh=ra;l.LineSegments=X;l.LineLoop=yd;l.Line=sa;l.Points=Rb;l.Group=Fc;l.VideoTexture=ee;l.DataTexture=lb;l.CompressedTexture=Sb;l.CubeTexture=db;l.CanvasTexture=tc;l.DepthTexture=Gc;l.Texture=U;l.CompressedTextureLoader=gf;l.DataTextureLoader=ie;l.CubeTextureLoader=je;l.TextureLoader=Ad;l.ObjectLoader=jf;l.MaterialLoader=Pd;l.BufferGeometryLoader=le;l.DefaultLoadingManager=xa;l.LoadingManager=he;l.JSONLoader=
    me;l.ImageLoader=ad;l.ImageBitmapLoader=ne;l.FontLoader=kf;l.FileLoader=Na;l.Loader=kc;l.LoaderUtils=He;l.Cache=Ib;l.AudioLoader=qe;l.SpotLightShadow=Cd;l.SpotLight=Dd;l.PointLight=Ed;l.RectAreaLight=Id;l.HemisphereLight=Bd;l.DirectionalLightShadow=Fd;l.DirectionalLight=Gd;l.AmbientLight=Hd;l.LightShadow=Fb;l.Light=da;l.StereoCamera=lf;l.PerspectiveCamera=ba;l.OrthographicCamera=Lb;l.CubeCamera=fd;l.ArrayCamera=ud;l.Camera=Ta;l.AudioListener=re;l.PositionalAudio=te;l.AudioContext=se;l.AudioAnalyser=
    ue;l.Audio=lc;l.VectorKeyframeTrack=jc;l.StringKeyframeTrack=Jd;l.QuaternionKeyframeTrack=dd;l.NumberKeyframeTrack=ic;l.ColorKeyframeTrack=Md;l.BooleanKeyframeTrack=Kd;l.PropertyMixer=ve;l.PropertyBinding=qa;l.KeyframeTrack=T;l.AnimationUtils=ga;l.AnimationObjectGroup=nf;l.AnimationMixer=we;l.AnimationClip=Ca;l.Uniform=Qd;l.InstancedBufferGeometry=xe;l.BufferGeometry=E;l.Geometry=L;l.InterleavedBufferAttribute=ye;l.InstancedInterleavedBuffer=ze;l.InterleavedBuffer=mc;l.InstancedBufferAttribute=Ae;
    l.Face3=Ya;l.Object3D=x;l.Raycaster=pf;l.Layers=Wd;l.EventDispatcher=za;l.Clock=rf;l.QuaternionLinearInterpolant=Ld;l.LinearInterpolant=ed;l.DiscreteInterpolant=Od;l.CubicInterpolant=Nd;l.Interpolant=pa;l.Triangle=Za;l.Math=Q;l.Spherical=sf;l.Cylindrical=tf;l.Plane=Ea;l.Frustum=rd;l.Sphere=Ia;l.Ray=sb;l.Matrix4=O;l.Matrix3=ma;l.Box3=Xa;l.Box2=od;l.Line3=Nb;l.Euler=gb;l.Vector4=aa;l.Vector3=p;l.Vector2=D;l.Quaternion=ha;l.Color=H;l.ImmediateRenderObject=gd;l.VertexNormalsHelper=hd;l.SpotLightHelper=
    nc;l.SkeletonHelper=oc;l.PointLightHelper=pc;l.RectAreaLightHelper=qc;l.HemisphereLightHelper=rc;l.GridHelper=id;l.PolarGridHelper=Rd;l.FaceNormalsHelper=jd;l.DirectionalLightHelper=sc;l.CameraHelper=kd;l.BoxHelper=Gb;l.Box3Helper=ld;l.PlaneHelper=md;l.ArrowHelper=Hb;l.AxesHelper=nd;l.Shape=jb;l.Path=Sa;l.ShapePath=oe;l.Font=pe;l.CurvePath=bb;l.Curve=C;l.ShapeUtils=$a;l.SceneUtils={createMultiMaterialObject:function(a,b){for(var c=new Fc,d=0,e=b.length;d<e;d++)c.add(new ra(a,b[d]));return c},detach:function(a,
    b,c){a.applyMatrix(b.matrixWorld);b.remove(a);c.add(a)},attach:function(a,b,c){a.applyMatrix((new O).getInverse(c.matrixWorld));b.remove(a);c.add(a)}};l.WebGLUtils=af;l.WireframeGeometry=Tb;l.ParametricGeometry=Hc;l.ParametricBufferGeometry=Ub;l.TetrahedronGeometry=Jc;l.TetrahedronBufferGeometry=Vb;l.OctahedronGeometry=Kc;l.OctahedronBufferGeometry=ub;l.IcosahedronGeometry=Lc;l.IcosahedronBufferGeometry=Wb;l.DodecahedronGeometry=Mc;l.DodecahedronBufferGeometry=Xb;l.PolyhedronGeometry=Ic;l.PolyhedronBufferGeometry=
    ja;l.TubeGeometry=Nc;l.TubeBufferGeometry=Yb;l.TorusKnotGeometry=Oc;l.TorusKnotBufferGeometry=Zb;l.TorusGeometry=Pc;l.TorusBufferGeometry=$b;l.TextGeometry=Uc;l.TextBufferGeometry=ac;l.SphereGeometry=Vc;l.SphereBufferGeometry=wb;l.RingGeometry=Wc;l.RingBufferGeometry=bc;l.PlaneGeometry=Ac;l.PlaneBufferGeometry=rb;l.LatheGeometry=Xc;l.LatheBufferGeometry=cc;l.ShapeGeometry=xb;l.ShapeBufferGeometry=yb;l.ExtrudeGeometry=ib;l.ExtrudeBufferGeometry=La;l.EdgesGeometry=dc;l.ConeGeometry=Yc;l.ConeBufferGeometry=
    Zc;l.CylinderGeometry=zb;l.CylinderBufferGeometry=ab;l.CircleGeometry=$c;l.CircleBufferGeometry=ec;l.BoxGeometry=Mb;l.BoxBufferGeometry=qb;l.ShadowMaterial=fc;l.SpriteMaterial=hb;l.RawShaderMaterial=gc;l.ShaderMaterial=Fa;l.PointsMaterial=Ka;l.MeshPhysicalMaterial=Ab;l.MeshStandardMaterial=Ua;l.MeshPhongMaterial=Ma;l.MeshToonMaterial=Bb;l.MeshNormalMaterial=Cb;l.MeshLambertMaterial=Db;l.MeshDepthMaterial=eb;l.MeshDistanceMaterial=fb;l.MeshBasicMaterial=Aa;l.LineDashedMaterial=Eb;l.LineBasicMaterial=
    W;l.Material=P;l.Float64BufferAttribute=zc;l.Float32BufferAttribute=B;l.Uint32BufferAttribute=pb;l.Int32BufferAttribute=yc;l.Uint16BufferAttribute=ob;l.Int16BufferAttribute=xc;l.Uint8ClampedBufferAttribute=wc;l.Uint8BufferAttribute=vc;l.Int8BufferAttribute=uc;l.BufferAttribute=M;l.ArcCurve=hc;l.CatmullRomCurve3=ca;l.CubicBezierCurve=Oa;l.CubicBezierCurve3=Va;l.EllipseCurve=Ba;l.LineCurve=ya;l.LineCurve3=Pa;l.QuadraticBezierCurve=Qa;l.QuadraticBezierCurve3=Wa;l.SplineCurve=Ra;l.REVISION="89";l.MOUSE=
    {LEFT:0,MIDDLE:1,RIGHT:2};l.CullFaceNone=0;l.CullFaceBack=1;l.CullFaceFront=2;l.CullFaceFrontBack=3;l.FrontFaceDirectionCW=0;l.FrontFaceDirectionCCW=1;l.BasicShadowMap=0;l.PCFShadowMap=1;l.PCFSoftShadowMap=2;l.FrontSide=0;l.BackSide=1;l.DoubleSide=2;l.FlatShading=1;l.SmoothShading=2;l.NoColors=0;l.FaceColors=1;l.VertexColors=2;l.NoBlending=0;l.NormalBlending=1;l.AdditiveBlending=2;l.SubtractiveBlending=3;l.MultiplyBlending=4;l.CustomBlending=5;l.AddEquation=100;l.SubtractEquation=101;l.ReverseSubtractEquation=
    102;l.MinEquation=103;l.MaxEquation=104;l.ZeroFactor=200;l.OneFactor=201;l.SrcColorFactor=202;l.OneMinusSrcColorFactor=203;l.SrcAlphaFactor=204;l.OneMinusSrcAlphaFactor=205;l.DstAlphaFactor=206;l.OneMinusDstAlphaFactor=207;l.DstColorFactor=208;l.OneMinusDstColorFactor=209;l.SrcAlphaSaturateFactor=210;l.NeverDepth=0;l.AlwaysDepth=1;l.LessDepth=2;l.LessEqualDepth=3;l.EqualDepth=4;l.GreaterEqualDepth=5;l.GreaterDepth=6;l.NotEqualDepth=7;l.MultiplyOperation=0;l.MixOperation=1;l.AddOperation=2;l.NoToneMapping=
    0;l.LinearToneMapping=1;l.ReinhardToneMapping=2;l.Uncharted2ToneMapping=3;l.CineonToneMapping=4;l.UVMapping=300;l.CubeReflectionMapping=301;l.CubeRefractionMapping=302;l.EquirectangularReflectionMapping=303;l.EquirectangularRefractionMapping=304;l.SphericalReflectionMapping=305;l.CubeUVReflectionMapping=306;l.CubeUVRefractionMapping=307;l.RepeatWrapping=1E3;l.ClampToEdgeWrapping=1001;l.MirroredRepeatWrapping=1002;l.NearestFilter=1003;l.NearestMipMapNearestFilter=1004;l.NearestMipMapLinearFilter=1005;
    l.LinearFilter=1006;l.LinearMipMapNearestFilter=1007;l.LinearMipMapLinearFilter=1008;l.UnsignedByteType=1009;l.ByteType=1010;l.ShortType=1011;l.UnsignedShortType=1012;l.IntType=1013;l.UnsignedIntType=1014;l.FloatType=1015;l.HalfFloatType=1016;l.UnsignedShort4444Type=1017;l.UnsignedShort5551Type=1018;l.UnsignedShort565Type=1019;l.UnsignedInt248Type=1020;l.AlphaFormat=1021;l.RGBFormat=1022;l.RGBAFormat=1023;l.LuminanceFormat=1024;l.LuminanceAlphaFormat=1025;l.RGBEFormat=1023;l.DepthFormat=1026;l.DepthStencilFormat=
    1027;l.RGB_S3TC_DXT1_Format=2001;l.RGBA_S3TC_DXT1_Format=2002;l.RGBA_S3TC_DXT3_Format=2003;l.RGBA_S3TC_DXT5_Format=2004;l.RGB_PVRTC_4BPPV1_Format=2100;l.RGB_PVRTC_2BPPV1_Format=2101;l.RGBA_PVRTC_4BPPV1_Format=2102;l.RGBA_PVRTC_2BPPV1_Format=2103;l.RGB_ETC1_Format=2151;l.LoopOnce=2200;l.LoopRepeat=2201;l.LoopPingPong=2202;l.InterpolateDiscrete=2300;l.InterpolateLinear=2301;l.InterpolateSmooth=2302;l.ZeroCurvatureEnding=2400;l.ZeroSlopeEnding=2401;l.WrapAroundEnding=2402;l.TrianglesDrawMode=0;l.TriangleStripDrawMode=
    1;l.TriangleFanDrawMode=2;l.LinearEncoding=3E3;l.sRGBEncoding=3001;l.GammaEncoding=3007;l.RGBEEncoding=3002;l.LogLuvEncoding=3003;l.RGBM7Encoding=3004;l.RGBM16Encoding=3005;l.RGBDEncoding=3006;l.BasicDepthPacking=3200;l.RGBADepthPacking=3201;l.CubeGeometry=Mb;l.Face4=function(a,b,c,d,e,f,g){console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead.");return new Ya(a,b,c,e,f,g)};l.LineStrip=0;l.LinePieces=1;l.MeshFaceMaterial=function(a){console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead.");
    return a};l.MultiMaterial=function(a){void 0===a&&(a=[]);console.warn("THREE.MultiMaterial has been removed. Use an Array instead.");a.isMultiMaterial=!0;a.materials=a;a.clone=function(){return a.slice()};return a};l.PointCloud=function(a,b){console.warn("THREE.PointCloud has been renamed to THREE.Points.");return new Rb(a,b)};l.Particle=function(a){console.warn("THREE.Particle has been renamed to THREE.Sprite.");return new Cc(a)};l.ParticleSystem=function(a,b){console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");
    return new Rb(a,b)};l.PointCloudMaterial=function(a){console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");return new Ka(a)};l.ParticleBasicMaterial=function(a){console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");return new Ka(a)};l.ParticleSystemMaterial=function(a){console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");return new Ka(a)};l.Vertex=function(a,b,c){console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");
    return new p(a,b,c)};l.DynamicBufferAttribute=function(a,b){console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.");return(new M(a,b)).setDynamic(!0)};l.Int8Attribute=function(a,b){console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.");return new uc(a,b)};l.Uint8Attribute=function(a,b){console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.");return new vc(a,
    b)};l.Uint8ClampedAttribute=function(a,b){console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.");return new wc(a,b)};l.Int16Attribute=function(a,b){console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.");return new xc(a,b)};l.Uint16Attribute=function(a,b){console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.");return new ob(a,b)};l.Int32Attribute=
    function(a,b){console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.");return new yc(a,b)};l.Uint32Attribute=function(a,b){console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.");return new pb(a,b)};l.Float32Attribute=function(a,b){console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.");return new B(a,b)};l.Float64Attribute=function(a,b){console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.");
    return new zc(a,b)};l.ClosedSplineCurve3=vf;l.SplineCurve3=wf;l.Spline=De;l.AxisHelper=function(a){console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper.");return new nd(a)};l.BoundingBoxHelper=function(a,b){console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.");return new Gb(a,b)};l.EdgesHelper=function(a,b){console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");return new X(new dc(a.geometry),new W({color:void 0!==
    b?b:16777215}))};l.WireframeHelper=function(a,b){console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");return new X(new Tb(a.geometry),new W({color:void 0!==b?b:16777215}))};l.XHRLoader=function(a){console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader.");return new Na(a)};l.BinaryTextureLoader=function(a){console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.");return new ie(a)};l.GeometryUtils={merge:function(a,b,c){console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");
    if(b.isMesh){b.matrixAutoUpdate&&b.updateMatrix();var d=b.matrix;b=b.geometry}a.merge(b,d,c)},center:function(a){console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.");return a.center()}};l.ImageUtils={crossOrigin:void 0,loadTexture:function(a,b,c,d){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var e=new Ad;e.setCrossOrigin(this.crossOrigin);a=e.load(a,c,void 0,d);b&&(a.mapping=b);return a},
    loadTextureCube:function(a,b,c,d){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var e=new je;e.setCrossOrigin(this.crossOrigin);a=e.load(a,c,void 0,d);b&&(a.mapping=b);return a},loadCompressedTexture:function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},loadCompressedTextureCube:function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")}};
    l.Projector=function(){console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js.");this.projectVector=function(a,b){console.warn("THREE.Projector: .projectVector() is now vector.project().");a.project(b)};this.unprojectVector=function(a,b){console.warn("THREE.Projector: .unprojectVector() is now vector.unproject().");a.unproject(b)};this.pickingRay=function(){console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")}};l.CanvasRenderer=function(){console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js");
    this.domElement=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");this.clear=function(){};this.render=function(){};this.setClearColor=function(){};this.setSize=function(){}};Object.defineProperty(l,"__esModule",{value:!0})});
},{}],"form/loaders/Collada":[function(require,module,exports){
require('../lib/ColladaLoader.js');

exports.Collada = (function() {
  function Collada(properties, cb) {
    this.modelLoader = new THREE.ColladaLoader;
    this.modelLoader.load(properties.path, (function(_this) {
      return function(collada) {
        collada.scene.animations = collada.animations;
        return cb(collada.scene);
      };
    })(this), null, function(e) {
      return console.log(e);
    });
  }

  return Collada;

})();


},{"../lib/ColladaLoader.js":"form/lib/ColladaLoader"}],"form/loaders/FBX":[function(require,module,exports){
require('../lib/FBXLoader.js');

window.Zlib = require('../lib/inflate.min.js').Zlib;

exports.FBX = (function() {
  function FBX(properties, cb) {
    this.modelLoader = new THREE.FBXLoader;
    this.modelLoader.load(properties.path, (function(_this) {
      return function(model) {
        return cb(model);
      };
    })(this), null, function(e) {
      return console.log(e);
    });
  }

  return FBX;

})();


},{"../lib/FBXLoader.js":"form/lib/FBXLoader","../lib/inflate.min.js":"form/lib/inflate-min"}],"form/loaders/GLTF":[function(require,module,exports){
require('../lib/GLTFLoader.js');

exports.GLTF = (function() {
  function GLTF(properties, cb) {
    this.modelLoader = new THREE.GLTFLoader;
    this.modelLoader.load(properties.path, function(model) {
      model.scene.animations = model.animations;
      return cb(model.scene);
    }, null, function(e) {
      return console.log(e);
    });
  }

  return GLTF;

})();


},{"../lib/GLTFLoader.js":"form/lib/GLTFLoader"}],"form/loaders/JSONObject":[function(require,module,exports){
exports.JSONObject = (function() {
  function JSONObject(properties, cb) {
    this.readJSON(properties.path, (function(_this) {
      return function(json) {
        var metadata;
        metadata = JSON.parse(json).metadata;
        if (metadata.type === 'Object') {
          return _this.loadObject(properties, cb);
        } else {
          return _this.loadGeometry(properties, cb);
        }
      };
    })(this));
  }

  JSONObject.prototype.loadObject = function(properties, cb) {
    this.modelLoader = new THREE.ObjectLoader;
    return this.modelLoader.load(properties.path, (function(_this) {
      return function(model) {
        return cb(model);
      };
    })(this), null, function(e) {
      return console.log(e);
    });
  };

  JSONObject.prototype.loadGeometry = function(properties, cb) {
    this.modelLoader = new THREE.JSONLoader;
    return this.modelLoader.load(properties.path, (function(_this) {
      return function(geometry, materials) {
        var material, model;
        material = materials[0];
        model = new THREE.Mesh(geometry, material);
        model.animations = geometry.animations;
        return cb(model);
      };
    })(this), null, function(e) {
      return console.log(e);
    });
  };

  JSONObject.prototype.readJSON = function(path, cb) {
    var rawFile;
    rawFile = new XMLHttpRequest;
    rawFile.overrideMimeType('application/json');
    rawFile.open('GET', path, true);
    rawFile.onreadystatechange = function() {
      if (rawFile.readyState === 4 && rawFile.status === 200) {
        return cb(rawFile.responseText);
      }
    };
    return rawFile.send(null);
  };

  return JSONObject;

})();


},{}],"form/loaders/OBJ":[function(require,module,exports){
require('../lib/OBJLoader.js');

require('../lib/MTLLoader.js');

exports.OBJ = (function() {
  function OBJ(properties, cb) {
    var path;
    path = properties.path;
    this.dirPath = path.substring(0, path.indexOf(path.split('/').pop()));
    this.modelPath = path.split('/').pop();
    this.materialPath = this.modelPath.replace('.obj', '.mtl');
    this.materialLoader = new THREE.MTLLoader;
    this.modelLoader = new THREE.OBJLoader;
    this.materialLoader.setPath(this.dirPath);
    this.materialLoader.load(this.materialPath, (function(_this) {
      return function(materials) {
        materials.preload();
        _this.modelLoader.setMaterials(materials);
        _this.modelLoader.setPath(_this.dirPath);
        return _this.modelLoader.load(_this.modelPath, function(model) {
          return cb(model);
        });
      };
    })(this));
  }

  return OBJ;

})();


},{"../lib/MTLLoader.js":"form/lib/MTLLoader","../lib/OBJLoader.js":"form/lib/OBJLoader"}],"form":[function(require,module,exports){
var Light, Mesh, Model, Scene, Studio;

window.THREE = require('./form/lib/three.min.js');

require('./form/GA.coffee');

Scene = require('./form/Scene.coffee').Scene;

Studio = require('./form/Studio.coffee').Studio;

Model = require('./form/Model.coffee').Model;

Mesh = require('./form/Mesh.coffee').Mesh;

Light = require('./form/Light.coffee').Light;

module.exports = {
  Scene: Scene,
  Studio: Studio,
  Model: Model,
  Mesh: Mesh,
  Light: Light,
  MeshPhongMaterial: THREE.MeshPhongMaterial,
  MeshNormalMaterial: THREE.MeshNormalMaterial,
  MeshStandardMaterial: THREE.MeshStandardMaterial,
  LineBasicMaterial: THREE.LineBasicMaterial,
  LineDashedMaterial: THREE.LineDashedMaterial,
  MeshBasicMaterial: THREE.MeshBasicMaterial,
  MeshDepthMaterial: THREE.MeshDepthMaterial,
  MeshLambertMaterial: THREE.MeshLambertMaterial,
  MeshPhysicalMaterial: THREE.MeshPhysicalMaterial,
  MeshToonMaterial: THREE.MeshToonMaterial,
  PointsMaterial: THREE.PointsMaterial,
  RawShaderMaterial: THREE.RawShaderMaterial,
  ShaderMaterial: THREE.ShaderMaterial,
  ShadowMaterial: THREE.ShadowMaterial,
  SpriteMaterial: THREE.SpriteMaterial
};


},{"./form/GA.coffee":"form/GA","./form/Light.coffee":"form/Light","./form/Mesh.coffee":"form/Mesh","./form/Model.coffee":"form/Model","./form/Scene.coffee":"form/Scene","./form/Studio.coffee":"form/Studio","./form/lib/three.min.js":"form/lib/three-min"}],"myModule":[function(require,module,exports){
exports.myVar = "myVariable";

exports.myFunction = function() {
  return print("myFunction is running");
};

exports.myArray = [1, 2, 3];


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWVyLm1vZHVsZXMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL1VzZXJzL3NoaW5ha2FqL0Rlc2t0b3AvRHJpYmJibGUvRGFpbHlfVUkvIzAxMiBFIENvbW1lcmNlLyMwMTIgRSBDb21tZXJjZS5mcmFtZXIvbW9kdWxlcy9teU1vZHVsZS5jb2ZmZWUiLCIuLi8uLi8uLi8uLi8uLi9Vc2Vycy9zaGluYWthai9EZXNrdG9wL0RyaWJiYmxlL0RhaWx5X1VJLyMwMTIgRSBDb21tZXJjZS8jMDEyIEUgQ29tbWVyY2UuZnJhbWVyL21vZHVsZXMvZm9ybS5jb2ZmZWUiLCIuLi8uLi8uLi8uLi8uLi9Vc2Vycy9zaGluYWthai9EZXNrdG9wL0RyaWJiYmxlL0RhaWx5X1VJLyMwMTIgRSBDb21tZXJjZS8jMDEyIEUgQ29tbWVyY2UuZnJhbWVyL21vZHVsZXMvZm9ybS9sb2FkZXJzL09CSi5jb2ZmZWUiLCIuLi8uLi8uLi8uLi8uLi9Vc2Vycy9zaGluYWthai9EZXNrdG9wL0RyaWJiYmxlL0RhaWx5X1VJLyMwMTIgRSBDb21tZXJjZS8jMDEyIEUgQ29tbWVyY2UuZnJhbWVyL21vZHVsZXMvZm9ybS9sb2FkZXJzL0pTT05PYmplY3QuY29mZmVlIiwiLi4vLi4vLi4vLi4vLi4vVXNlcnMvc2hpbmFrYWovRGVza3RvcC9EcmliYmJsZS9EYWlseV9VSS8jMDEyIEUgQ29tbWVyY2UvIzAxMiBFIENvbW1lcmNlLmZyYW1lci9tb2R1bGVzL2Zvcm0vbG9hZGVycy9HTFRGLmNvZmZlZSIsIi4uLy4uLy4uLy4uLy4uL1VzZXJzL3NoaW5ha2FqL0Rlc2t0b3AvRHJpYmJibGUvRGFpbHlfVUkvIzAxMiBFIENvbW1lcmNlLyMwMTIgRSBDb21tZXJjZS5mcmFtZXIvbW9kdWxlcy9mb3JtL2xvYWRlcnMvRkJYLmNvZmZlZSIsIi4uLy4uLy4uLy4uLy4uL1VzZXJzL3NoaW5ha2FqL0Rlc2t0b3AvRHJpYmJibGUvRGFpbHlfVUkvIzAxMiBFIENvbW1lcmNlLyMwMTIgRSBDb21tZXJjZS5mcmFtZXIvbW9kdWxlcy9mb3JtL2xvYWRlcnMvQ29sbGFkYS5jb2ZmZWUiLCIuLi8uLi8uLi8uLi8uLi9Vc2Vycy9zaGluYWthai9EZXNrdG9wL0RyaWJiYmxlL0RhaWx5X1VJLyMwMTIgRSBDb21tZXJjZS8jMDEyIEUgQ29tbWVyY2UuZnJhbWVyL21vZHVsZXMvZm9ybS9saWIvdGhyZWUubWluLmpzIiwiLi4vLi4vLi4vLi4vLi4vVXNlcnMvc2hpbmFrYWovRGVza3RvcC9EcmliYmJsZS9EYWlseV9VSS8jMDEyIEUgQ29tbWVyY2UvIzAxMiBFIENvbW1lcmNlLmZyYW1lci9tb2R1bGVzL2Zvcm0vbGliL2luZmxhdGUubWluLmpzIiwiLi4vLi4vLi4vLi4vLi4vVXNlcnMvc2hpbmFrYWovRGVza3RvcC9EcmliYmJsZS9EYWlseV9VSS8jMDEyIEUgQ29tbWVyY2UvIzAxMiBFIENvbW1lcmNlLmZyYW1lci9tb2R1bGVzL2Zvcm0vbGliL09yYml0Q29udHJvbHMuanMiLCIuLi8uLi8uLi8uLi8uLi9Vc2Vycy9zaGluYWthai9EZXNrdG9wL0RyaWJiYmxlL0RhaWx5X1VJLyMwMTIgRSBDb21tZXJjZS8jMDEyIEUgQ29tbWVyY2UuZnJhbWVyL21vZHVsZXMvZm9ybS9saWIvT0JKTG9hZGVyLmpzIiwiLi4vLi4vLi4vLi4vLi4vVXNlcnMvc2hpbmFrYWovRGVza3RvcC9EcmliYmJsZS9EYWlseV9VSS8jMDEyIEUgQ29tbWVyY2UvIzAxMiBFIENvbW1lcmNlLmZyYW1lci9tb2R1bGVzL2Zvcm0vbGliL01UTExvYWRlci5qcyIsIi4uLy4uLy4uLy4uLy4uL1VzZXJzL3NoaW5ha2FqL0Rlc2t0b3AvRHJpYmJibGUvRGFpbHlfVUkvIzAxMiBFIENvbW1lcmNlLyMwMTIgRSBDb21tZXJjZS5mcmFtZXIvbW9kdWxlcy9mb3JtL2xpYi9HTFRGTG9hZGVyLmpzIiwiLi4vLi4vLi4vLi4vLi4vVXNlcnMvc2hpbmFrYWovRGVza3RvcC9EcmliYmJsZS9EYWlseV9VSS8jMDEyIEUgQ29tbWVyY2UvIzAxMiBFIENvbW1lcmNlLmZyYW1lci9tb2R1bGVzL2Zvcm0vbGliL0ZCWExvYWRlci5qcyIsIi4uLy4uLy4uLy4uLy4uL1VzZXJzL3NoaW5ha2FqL0Rlc2t0b3AvRHJpYmJibGUvRGFpbHlfVUkvIzAxMiBFIENvbW1lcmNlLyMwMTIgRSBDb21tZXJjZS5mcmFtZXIvbW9kdWxlcy9mb3JtL2xpYi9Db2xsYWRhTG9hZGVyLmpzIiwiLi4vLi4vLi4vLi4vLi4vVXNlcnMvc2hpbmFrYWovRGVza3RvcC9EcmliYmJsZS9EYWlseV9VSS8jMDEyIEUgQ29tbWVyY2UvIzAxMiBFIENvbW1lcmNlLmZyYW1lci9tb2R1bGVzL2Zvcm0vX1N0YXRlcy5jb2ZmZWUiLCIuLi8uLi8uLi8uLi8uLi9Vc2Vycy9zaGluYWthai9EZXNrdG9wL0RyaWJiYmxlL0RhaWx5X1VJLyMwMTIgRSBDb21tZXJjZS8jMDEyIEUgQ29tbWVyY2UuZnJhbWVyL21vZHVsZXMvZm9ybS9fQ2FtZXJhLmNvZmZlZSIsIi4uLy4uLy4uLy4uLy4uL1VzZXJzL3NoaW5ha2FqL0Rlc2t0b3AvRHJpYmJibGUvRGFpbHlfVUkvIzAxMiBFIENvbW1lcmNlLyMwMTIgRSBDb21tZXJjZS5mcmFtZXIvbW9kdWxlcy9mb3JtL19CYXNlQ2xhc3MuY29mZmVlIiwiLi4vLi4vLi4vLi4vLi4vVXNlcnMvc2hpbmFrYWovRGVza3RvcC9EcmliYmJsZS9EYWlseV9VSS8jMDEyIEUgQ29tbWVyY2UvIzAxMiBFIENvbW1lcmNlLmZyYW1lci9tb2R1bGVzL2Zvcm0vX0FuaW1hdGlvbi5jb2ZmZWUiLCIuLi8uLi8uLi8uLi8uLi9Vc2Vycy9zaGluYWthai9EZXNrdG9wL0RyaWJiYmxlL0RhaWx5X1VJLyMwMTIgRSBDb21tZXJjZS8jMDEyIEUgQ29tbWVyY2UuZnJhbWVyL21vZHVsZXMvZm9ybS9TdHVkaW8uY29mZmVlIiwiLi4vLi4vLi4vLi4vLi4vVXNlcnMvc2hpbmFrYWovRGVza3RvcC9EcmliYmJsZS9EYWlseV9VSS8jMDEyIEUgQ29tbWVyY2UvIzAxMiBFIENvbW1lcmNlLmZyYW1lci9tb2R1bGVzL2Zvcm0vU2NlbmUuY29mZmVlIiwiLi4vLi4vLi4vLi4vLi4vVXNlcnMvc2hpbmFrYWovRGVza3RvcC9EcmliYmJsZS9EYWlseV9VSS8jMDEyIEUgQ29tbWVyY2UvIzAxMiBFIENvbW1lcmNlLmZyYW1lci9tb2R1bGVzL2Zvcm0vTW9kZWwuY29mZmVlIiwiLi4vLi4vLi4vLi4vLi4vVXNlcnMvc2hpbmFrYWovRGVza3RvcC9EcmliYmJsZS9EYWlseV9VSS8jMDEyIEUgQ29tbWVyY2UvIzAxMiBFIENvbW1lcmNlLmZyYW1lci9tb2R1bGVzL2Zvcm0vTWVzaC5jb2ZmZWUiLCIuLi8uLi8uLi8uLi8uLi9Vc2Vycy9zaGluYWthai9EZXNrdG9wL0RyaWJiYmxlL0RhaWx5X1VJLyMwMTIgRSBDb21tZXJjZS8jMDEyIEUgQ29tbWVyY2UuZnJhbWVyL21vZHVsZXMvZm9ybS9MaWdodC5jb2ZmZWUiLCIuLi8uLi8uLi8uLi8uLi9Vc2Vycy9zaGluYWthai9EZXNrdG9wL0RyaWJiYmxlL0RhaWx5X1VJLyMwMTIgRSBDb21tZXJjZS8jMDEyIEUgQ29tbWVyY2UuZnJhbWVyL21vZHVsZXMvZm9ybS9HQS5jb2ZmZWUiLCJub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIiMgQWRkIHRoZSBmb2xsb3dpbmcgbGluZSB0byB5b3VyIHByb2plY3QgaW4gRnJhbWVyIFN0dWRpby4gXG4jIG15TW9kdWxlID0gcmVxdWlyZSBcIm15TW9kdWxlXCJcbiMgUmVmZXJlbmNlIHRoZSBjb250ZW50cyBieSBuYW1lLCBsaWtlIG15TW9kdWxlLm15RnVuY3Rpb24oKSBvciBteU1vZHVsZS5teVZhclxuXG5leHBvcnRzLm15VmFyID0gXCJteVZhcmlhYmxlXCJcblxuZXhwb3J0cy5teUZ1bmN0aW9uID0gLT5cblx0cHJpbnQgXCJteUZ1bmN0aW9uIGlzIHJ1bm5pbmdcIlxuXG5leHBvcnRzLm15QXJyYXkgPSBbMSwgMiwgM10iLCJ3aW5kb3cuVEhSRUUgPSByZXF1aXJlICcuL2Zvcm0vbGliL3RocmVlLm1pbi5qcydcbnJlcXVpcmUgJy4vZm9ybS9HQS5jb2ZmZWUnXG5cbntTY2VuZX0gPSByZXF1aXJlICcuL2Zvcm0vU2NlbmUuY29mZmVlJ1xue1N0dWRpb30gPSByZXF1aXJlICcuL2Zvcm0vU3R1ZGlvLmNvZmZlZSdcbntNb2RlbH0gPSByZXF1aXJlICcuL2Zvcm0vTW9kZWwuY29mZmVlJ1xue01lc2h9ID0gcmVxdWlyZSAnLi9mb3JtL01lc2guY29mZmVlJ1xue0xpZ2h0fSA9IHJlcXVpcmUgJy4vZm9ybS9MaWdodC5jb2ZmZWUnXG5cbm1vZHVsZS5leHBvcnRzID1cbiAgICBTY2VuZTogU2NlbmVcbiAgICBTdHVkaW86IFN0dWRpb1xuICAgIE1vZGVsOiBNb2RlbFxuICAgIE1lc2g6IE1lc2hcbiAgICBMaWdodDogTGlnaHRcblxuICAgICMgTUFURVJJQUxTXG5cbiAgICBNZXNoUGhvbmdNYXRlcmlhbDogVEhSRUUuTWVzaFBob25nTWF0ZXJpYWxcbiAgICBNZXNoTm9ybWFsTWF0ZXJpYWw6IFRIUkVFLk1lc2hOb3JtYWxNYXRlcmlhbFxuICAgIE1lc2hTdGFuZGFyZE1hdGVyaWFsOiBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbFxuICAgIExpbmVCYXNpY01hdGVyaWFsOiBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbFxuICAgIExpbmVEYXNoZWRNYXRlcmlhbDogVEhSRUUuTGluZURhc2hlZE1hdGVyaWFsXG4gICAgTWVzaEJhc2ljTWF0ZXJpYWw6IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsXG4gICAgTWVzaERlcHRoTWF0ZXJpYWw6IFRIUkVFLk1lc2hEZXB0aE1hdGVyaWFsXG4gICAgTWVzaExhbWJlcnRNYXRlcmlhbDogVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbFxuICAgIE1lc2hQaHlzaWNhbE1hdGVyaWFsOiBUSFJFRS5NZXNoUGh5c2ljYWxNYXRlcmlhbFxuICAgIE1lc2hUb29uTWF0ZXJpYWw6IFRIUkVFLk1lc2hUb29uTWF0ZXJpYWxcbiAgICBQb2ludHNNYXRlcmlhbDogVEhSRUUuUG9pbnRzTWF0ZXJpYWxcbiAgICBSYXdTaGFkZXJNYXRlcmlhbDogVEhSRUUuUmF3U2hhZGVyTWF0ZXJpYWxcbiAgICBTaGFkZXJNYXRlcmlhbDogVEhSRUUuU2hhZGVyTWF0ZXJpYWxcbiAgICBTaGFkb3dNYXRlcmlhbDogVEhSRUUuU2hhZG93TWF0ZXJpYWxcbiAgICBTcHJpdGVNYXRlcmlhbDogVEhSRUUuU3ByaXRlTWF0ZXJpYWwiLCJyZXF1aXJlICcuLi9saWIvT0JKTG9hZGVyLmpzJ1xucmVxdWlyZSAnLi4vbGliL01UTExvYWRlci5qcydcblxuY2xhc3MgZXhwb3J0cy5PQkpcbiAgICBjb25zdHJ1Y3RvcjogKHByb3BlcnRpZXMsIGNiKSAtPlxuICAgICAgICBwYXRoID0gcHJvcGVydGllcy5wYXRoXG4gICAgICAgIEBkaXJQYXRoID0gcGF0aC5zdWJzdHJpbmcgMCwgcGF0aC5pbmRleE9mKHBhdGguc3BsaXQoJy8nKS5wb3AoKSlcbiAgICAgICAgQG1vZGVsUGF0aCA9IHBhdGguc3BsaXQoJy8nKS5wb3AoKVxuICAgICAgICBAbWF0ZXJpYWxQYXRoID0gQG1vZGVsUGF0aC5yZXBsYWNlICcub2JqJywgJy5tdGwnXG4gICAgICAgIFxuICAgICAgICBAbWF0ZXJpYWxMb2FkZXIgPSBuZXcgVEhSRUUuTVRMTG9hZGVyXG4gICAgICAgIEBtb2RlbExvYWRlciA9IG5ldyBUSFJFRS5PQkpMb2FkZXJcblxuICAgICAgICBAbWF0ZXJpYWxMb2FkZXIuc2V0UGF0aCBAZGlyUGF0aFxuICAgICAgICBAbWF0ZXJpYWxMb2FkZXIubG9hZCBAbWF0ZXJpYWxQYXRoLCAobWF0ZXJpYWxzKSA9PlxuICAgICAgICAgICAgbWF0ZXJpYWxzLnByZWxvYWQoKVxuXG4gICAgICAgICAgICBAbW9kZWxMb2FkZXIuc2V0TWF0ZXJpYWxzIG1hdGVyaWFsc1xuICAgICAgICAgICAgQG1vZGVsTG9hZGVyLnNldFBhdGggQGRpclBhdGhcbiAgICAgICAgICAgIEBtb2RlbExvYWRlci5sb2FkIEBtb2RlbFBhdGgsIChtb2RlbCkgPT5cbiAgICAgICAgICAgICAgICBjYiBtb2RlbCIsImNsYXNzIGV4cG9ydHMuSlNPTk9iamVjdFxuICAgIGNvbnN0cnVjdG9yOiAocHJvcGVydGllcywgY2IpIC0+XG5cbiAgICAgICAgQHJlYWRKU09OIHByb3BlcnRpZXMucGF0aCwgKGpzb24pID0+IFxuICAgICAgICAgICAgbWV0YWRhdGEgPSBKU09OLnBhcnNlKGpzb24pLm1ldGFkYXRhXG5cbiAgICAgICAgICAgIGlmIG1ldGFkYXRhLnR5cGUgPT0gJ09iamVjdCcgdGhlbiBAbG9hZE9iamVjdCBwcm9wZXJ0aWVzLCBjYlxuICAgICAgICAgICAgZWxzZSBAbG9hZEdlb21ldHJ5IHByb3BlcnRpZXMsIGNiXG5cblxuICAgIGxvYWRPYmplY3Q6IChwcm9wZXJ0aWVzLCBjYikgLT5cbiAgICAgICAgQG1vZGVsTG9hZGVyID0gbmV3IFRIUkVFLk9iamVjdExvYWRlclxuICAgICAgICBAbW9kZWxMb2FkZXIubG9hZCBwcm9wZXJ0aWVzLnBhdGgsIChtb2RlbCkgPT5cbiAgICAgICAgICAgIGNiIG1vZGVsXG4gICAgICAgICwgbnVsbCwgKGUpIC0+IGNvbnNvbGUubG9nIGVcbiAgICBcbiAgICBsb2FkR2VvbWV0cnk6IChwcm9wZXJ0aWVzLCBjYikgLT5cbiAgICAgICAgQG1vZGVsTG9hZGVyID0gbmV3IFRIUkVFLkpTT05Mb2FkZXJcbiAgICAgICAgQG1vZGVsTG9hZGVyLmxvYWQgcHJvcGVydGllcy5wYXRoLCAoZ2VvbWV0cnksIG1hdGVyaWFscykgPT5cbiAgICAgICAgICAgIG1hdGVyaWFsID0gbWF0ZXJpYWxzWzBdXG4gICAgICAgICAgICBtb2RlbCA9IG5ldyBUSFJFRS5NZXNoIGdlb21ldHJ5LCBtYXRlcmlhbFxuICAgICAgICAgICAgbW9kZWwuYW5pbWF0aW9ucyA9IGdlb21ldHJ5LmFuaW1hdGlvbnNcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY2IgbW9kZWxcbiAgICAgICAgLCBudWxsLCAoZSkgLT4gY29uc29sZS5sb2cgZVxuXG4gICAgcmVhZEpTT046IChwYXRoLCBjYikgLT5cbiAgICAgICAgcmF3RmlsZSA9IG5ldyBYTUxIdHRwUmVxdWVzdFxuICAgICAgICByYXdGaWxlLm92ZXJyaWRlTWltZVR5cGUgJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIHJhd0ZpbGUub3BlbiAnR0VUJywgcGF0aCwgdHJ1ZVxuICAgICAgICByYXdGaWxlLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpIC0+XG4gICAgICAgICAgICBpZiByYXdGaWxlLnJlYWR5U3RhdGUgPT0gNCAmJiByYXdGaWxlLnN0YXR1cyA9PSAyMDBcbiAgICAgICAgICAgICAgICBjYiByYXdGaWxlLnJlc3BvbnNlVGV4dFxuICAgICAgICByYXdGaWxlLnNlbmQgbnVsbCIsInJlcXVpcmUgJy4uL2xpYi9HTFRGTG9hZGVyLmpzJ1xuXG5jbGFzcyBleHBvcnRzLkdMVEZcbiAgICBjb25zdHJ1Y3RvcjogKHByb3BlcnRpZXMsIGNiKSAtPlxuICAgICAgICBAbW9kZWxMb2FkZXIgPSBuZXcgVEhSRUUuR0xURkxvYWRlclxuICAgICAgICBAbW9kZWxMb2FkZXIubG9hZCBwcm9wZXJ0aWVzLnBhdGgsIChtb2RlbCkgLT5cbiAgICAgICAgICAgIG1vZGVsLnNjZW5lLmFuaW1hdGlvbnMgPSBtb2RlbC5hbmltYXRpb25zXG4gICAgICAgICAgICBjYiBtb2RlbC5zY2VuZVxuICAgICAgICAsIG51bGwsIChlKSAtPiBjb25zb2xlLmxvZyBlIiwicmVxdWlyZSAnLi4vbGliL0ZCWExvYWRlci5qcydcbndpbmRvdy5abGliID0gcmVxdWlyZSgnLi4vbGliL2luZmxhdGUubWluLmpzJykuWmxpYlxuXG5jbGFzcyBleHBvcnRzLkZCWFxuICAgIGNvbnN0cnVjdG9yOiAocHJvcGVydGllcywgY2IpIC0+XG4gICAgICAgIEBtb2RlbExvYWRlciA9IG5ldyBUSFJFRS5GQlhMb2FkZXJcbiAgICAgICAgQG1vZGVsTG9hZGVyLmxvYWQgcHJvcGVydGllcy5wYXRoLCAobW9kZWwpID0+XG4gICAgICAgICAgICBjYiBtb2RlbFxuICAgICAgICAsIG51bGwsIChlKSAtPiBjb25zb2xlLmxvZyBlIiwicmVxdWlyZSAnLi4vbGliL0NvbGxhZGFMb2FkZXIuanMnXG5cbmNsYXNzIGV4cG9ydHMuQ29sbGFkYVxuICAgIGNvbnN0cnVjdG9yOiAocHJvcGVydGllcywgY2IpIC0+XG4gICAgICAgIEBtb2RlbExvYWRlciA9IG5ldyBUSFJFRS5Db2xsYWRhTG9hZGVyXG4gICAgICAgIEBtb2RlbExvYWRlci5sb2FkIHByb3BlcnRpZXMucGF0aCwgKGNvbGxhZGEpID0+XG4gICAgICAgICAgICBjb2xsYWRhLnNjZW5lLmFuaW1hdGlvbnMgPSBjb2xsYWRhLmFuaW1hdGlvbnNcbiAgICAgICAgICAgIGNiIGNvbGxhZGEuc2NlbmVcbiAgICAgICAgLCBudWxsLCAoZSkgLT4gY29uc29sZS5sb2cgZSIsIi8vIHRocmVlanMub3JnL2xpY2Vuc2VcbihmdW5jdGlvbihsLHphKXtcIm9iamVjdFwiPT09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgbW9kdWxlP3phKGV4cG9ydHMpOlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImV4cG9ydHNcIl0semEpOnphKGwuVEhSRUU9e30pfSkodGhpcyxmdW5jdGlvbihsKXtmdW5jdGlvbiB6YSgpe31mdW5jdGlvbiBEKGEsYil7dGhpcy54PWF8fDA7dGhpcy55PWJ8fDB9ZnVuY3Rpb24gTygpe3RoaXMuZWxlbWVudHM9WzEsMCwwLDAsMCwxLDAsMCwwLDAsMSwwLDAsMCwwLDFdOzA8YXJndW1lbnRzLmxlbmd0aCYmY29uc29sZS5lcnJvcihcIlRIUkVFLk1hdHJpeDQ6IHRoZSBjb25zdHJ1Y3RvciBubyBsb25nZXIgcmVhZHMgYXJndW1lbnRzLiB1c2UgLnNldCgpIGluc3RlYWQuXCIpfWZ1bmN0aW9uIGhhKGEsYixjLGQpe3RoaXMuX3g9YXx8MDt0aGlzLl95PWJ8fDA7dGhpcy5fej1jfHwwO3RoaXMuX3c9dm9pZCAwIT09ZD9kOjF9ZnVuY3Rpb24gcChhLFxuICAgIGIsYyl7dGhpcy54PWF8fDA7dGhpcy55PWJ8fDA7dGhpcy56PWN8fDB9ZnVuY3Rpb24gbWEoKXt0aGlzLmVsZW1lbnRzPVsxLDAsMCwwLDEsMCwwLDAsMV07MDxhcmd1bWVudHMubGVuZ3RoJiZjb25zb2xlLmVycm9yKFwiVEhSRUUuTWF0cml4MzogdGhlIGNvbnN0cnVjdG9yIG5vIGxvbmdlciByZWFkcyBhcmd1bWVudHMuIHVzZSAuc2V0KCkgaW5zdGVhZC5cIil9ZnVuY3Rpb24gVShhLGIsYyxkLGUsZixnLGgsayxtKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImlkXCIse3ZhbHVlOkFmKyt9KTt0aGlzLnV1aWQ9US5nZW5lcmF0ZVVVSUQoKTt0aGlzLm5hbWU9XCJcIjt0aGlzLmltYWdlPXZvaWQgMCE9PWE/YTpVLkRFRkFVTFRfSU1BR0U7dGhpcy5taXBtYXBzPVtdO3RoaXMubWFwcGluZz12b2lkIDAhPT1iP2I6VS5ERUZBVUxUX01BUFBJTkc7dGhpcy53cmFwUz12b2lkIDAhPT1jP2M6MTAwMTt0aGlzLndyYXBUPXZvaWQgMCE9PWQ/ZDoxMDAxO3RoaXMubWFnRmlsdGVyPXZvaWQgMCE9PVxuICAgIGU/ZToxMDA2O3RoaXMubWluRmlsdGVyPXZvaWQgMCE9PWY/ZjoxMDA4O3RoaXMuYW5pc290cm9weT12b2lkIDAhPT1rP2s6MTt0aGlzLmZvcm1hdD12b2lkIDAhPT1nP2c6MTAyMzt0aGlzLnR5cGU9dm9pZCAwIT09aD9oOjEwMDk7dGhpcy5vZmZzZXQ9bmV3IEQoMCwwKTt0aGlzLnJlcGVhdD1uZXcgRCgxLDEpO3RoaXMuY2VudGVyPW5ldyBEKDAsMCk7dGhpcy5yb3RhdGlvbj0wO3RoaXMubWF0cml4QXV0b1VwZGF0ZT0hMDt0aGlzLm1hdHJpeD1uZXcgbWE7dGhpcy5nZW5lcmF0ZU1pcG1hcHM9ITA7dGhpcy5wcmVtdWx0aXBseUFscGhhPSExO3RoaXMuZmxpcFk9ITA7dGhpcy51bnBhY2tBbGlnbm1lbnQ9NDt0aGlzLmVuY29kaW5nPXZvaWQgMCE9PW0/bTozRTM7dGhpcy52ZXJzaW9uPTA7dGhpcy5vblVwZGF0ZT1udWxsfWZ1bmN0aW9uIGFhKGEsYixjLGQpe3RoaXMueD1hfHwwO3RoaXMueT1ifHwwO3RoaXMuej1jfHwwO3RoaXMudz12b2lkIDAhPT1kP2Q6MX1mdW5jdGlvbiBrYihhLFxuICAgIGIsYyl7dGhpcy51dWlkPVEuZ2VuZXJhdGVVVUlEKCk7dGhpcy53aWR0aD1hO3RoaXMuaGVpZ2h0PWI7dGhpcy5zY2lzc29yPW5ldyBhYSgwLDAsYSxiKTt0aGlzLnNjaXNzb3JUZXN0PSExO3RoaXMudmlld3BvcnQ9bmV3IGFhKDAsMCxhLGIpO2M9Y3x8e307dm9pZCAwPT09Yy5taW5GaWx0ZXImJihjLm1pbkZpbHRlcj0xMDA2KTt0aGlzLnRleHR1cmU9bmV3IFUodm9pZCAwLHZvaWQgMCxjLndyYXBTLGMud3JhcFQsYy5tYWdGaWx0ZXIsYy5taW5GaWx0ZXIsYy5mb3JtYXQsYy50eXBlLGMuYW5pc290cm9weSxjLmVuY29kaW5nKTt0aGlzLmRlcHRoQnVmZmVyPXZvaWQgMCE9PWMuZGVwdGhCdWZmZXI/Yy5kZXB0aEJ1ZmZlcjohMDt0aGlzLnN0ZW5jaWxCdWZmZXI9dm9pZCAwIT09Yy5zdGVuY2lsQnVmZmVyP2Muc3RlbmNpbEJ1ZmZlcjohMDt0aGlzLmRlcHRoVGV4dHVyZT12b2lkIDAhPT1jLmRlcHRoVGV4dHVyZT9jLmRlcHRoVGV4dHVyZTpudWxsfWZ1bmN0aW9uIEpiKGEsYixjKXtrYi5jYWxsKHRoaXMsXG4gICAgYSxiLGMpO3RoaXMuYWN0aXZlTWlwTWFwTGV2ZWw9dGhpcy5hY3RpdmVDdWJlRmFjZT0wfWZ1bmN0aW9uIGxiKGEsYixjLGQsZSxmLGcsaCxrLG0scSxuKXtVLmNhbGwodGhpcyxudWxsLGYsZyxoLGssbSxkLGUscSxuKTt0aGlzLmltYWdlPXtkYXRhOmEsd2lkdGg6YixoZWlnaHQ6Y307dGhpcy5tYWdGaWx0ZXI9dm9pZCAwIT09az9rOjEwMDM7dGhpcy5taW5GaWx0ZXI9dm9pZCAwIT09bT9tOjEwMDM7dGhpcy5mbGlwWT10aGlzLmdlbmVyYXRlTWlwbWFwcz0hMTt0aGlzLnVucGFja0FsaWdubWVudD0xfWZ1bmN0aW9uIGRiKGEsYixjLGQsZSxmLGcsaCxrLG0pe2E9dm9pZCAwIT09YT9hOltdO1UuY2FsbCh0aGlzLGEsdm9pZCAwIT09Yj9iOjMwMSxjLGQsZSxmLGcsaCxrLG0pO3RoaXMuZmxpcFk9ITF9ZnVuY3Rpb24gS2IoYSxiLGMpe3ZhciBkPWFbMF07aWYoMD49ZHx8MDxkKXJldHVybiBhO3ZhciBlPWIqYyxmPUllW2VdO3ZvaWQgMD09PWYmJihmPW5ldyBGbG9hdDMyQXJyYXkoZSksXG4gICAgSWVbZV09Zik7aWYoMCE9PWIpZm9yKGQudG9BcnJheShmLDApLGQ9MSxlPTA7ZCE9PWI7KytkKWUrPWMsYVtkXS50b0FycmF5KGYsZSk7cmV0dXJuIGZ9ZnVuY3Rpb24gSmUoYSxiKXt2YXIgYz1LZVtiXTt2b2lkIDA9PT1jJiYoYz1uZXcgSW50MzJBcnJheShiKSxLZVtiXT1jKTtmb3IodmFyIGQ9MDtkIT09YjsrK2QpY1tkXT1hLmFsbG9jVGV4dHVyZVVuaXQoKTtyZXR1cm4gY31mdW5jdGlvbiBCZihhLGIpe2EudW5pZm9ybTFmKHRoaXMuYWRkcixiKX1mdW5jdGlvbiBDZihhLGIpe2EudW5pZm9ybTFpKHRoaXMuYWRkcixiKX1mdW5jdGlvbiBEZihhLGIpe3ZvaWQgMD09PWIueD9hLnVuaWZvcm0yZnYodGhpcy5hZGRyLGIpOmEudW5pZm9ybTJmKHRoaXMuYWRkcixiLngsYi55KX1mdW5jdGlvbiBFZihhLGIpe3ZvaWQgMCE9PWIueD9hLnVuaWZvcm0zZih0aGlzLmFkZHIsYi54LGIueSxiLnopOnZvaWQgMCE9PWIucj9hLnVuaWZvcm0zZih0aGlzLmFkZHIsYi5yLGIuZyxiLmIpOmEudW5pZm9ybTNmdih0aGlzLmFkZHIsXG4gICAgYil9ZnVuY3Rpb24gRmYoYSxiKXt2b2lkIDA9PT1iLng/YS51bmlmb3JtNGZ2KHRoaXMuYWRkcixiKTphLnVuaWZvcm00Zih0aGlzLmFkZHIsYi54LGIueSxiLnosYi53KX1mdW5jdGlvbiBHZihhLGIpe2EudW5pZm9ybU1hdHJpeDJmdih0aGlzLmFkZHIsITEsYi5lbGVtZW50c3x8Yil9ZnVuY3Rpb24gSGYoYSxiKXt2b2lkIDA9PT1iLmVsZW1lbnRzP2EudW5pZm9ybU1hdHJpeDNmdih0aGlzLmFkZHIsITEsYik6KExlLnNldChiLmVsZW1lbnRzKSxhLnVuaWZvcm1NYXRyaXgzZnYodGhpcy5hZGRyLCExLExlKSl9ZnVuY3Rpb24gSWYoYSxiKXt2b2lkIDA9PT1iLmVsZW1lbnRzP2EudW5pZm9ybU1hdHJpeDRmdih0aGlzLmFkZHIsITEsYik6KE1lLnNldChiLmVsZW1lbnRzKSxhLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5hZGRyLCExLE1lKSl9ZnVuY3Rpb24gSmYoYSxiLGMpe3ZhciBkPWMuYWxsb2NUZXh0dXJlVW5pdCgpO2EudW5pZm9ybTFpKHRoaXMuYWRkcixkKTtjLnNldFRleHR1cmUyRChifHxcbiAgICBOZSxkKX1mdW5jdGlvbiBLZihhLGIsYyl7dmFyIGQ9Yy5hbGxvY1RleHR1cmVVbml0KCk7YS51bmlmb3JtMWkodGhpcy5hZGRyLGQpO2Muc2V0VGV4dHVyZUN1YmUoYnx8T2UsZCl9ZnVuY3Rpb24gUGUoYSxiKXthLnVuaWZvcm0yaXYodGhpcy5hZGRyLGIpfWZ1bmN0aW9uIFFlKGEsYil7YS51bmlmb3JtM2l2KHRoaXMuYWRkcixiKX1mdW5jdGlvbiBSZShhLGIpe2EudW5pZm9ybTRpdih0aGlzLmFkZHIsYil9ZnVuY3Rpb24gTGYoYSl7c3dpdGNoKGEpe2Nhc2UgNTEyNjpyZXR1cm4gQmY7Y2FzZSAzNTY2NDpyZXR1cm4gRGY7Y2FzZSAzNTY2NTpyZXR1cm4gRWY7Y2FzZSAzNTY2NjpyZXR1cm4gRmY7Y2FzZSAzNTY3NDpyZXR1cm4gR2Y7Y2FzZSAzNTY3NTpyZXR1cm4gSGY7Y2FzZSAzNTY3NjpyZXR1cm4gSWY7Y2FzZSAzNTY3ODpjYXNlIDM2MTk4OnJldHVybiBKZjtjYXNlIDM1NjgwOnJldHVybiBLZjtjYXNlIDUxMjQ6Y2FzZSAzNTY3MDpyZXR1cm4gQ2Y7Y2FzZSAzNTY2NzpjYXNlIDM1NjcxOnJldHVybiBQZTtcbiAgICBjYXNlIDM1NjY4OmNhc2UgMzU2NzI6cmV0dXJuIFFlO2Nhc2UgMzU2Njk6Y2FzZSAzNTY3MzpyZXR1cm4gUmV9fWZ1bmN0aW9uIE1mKGEsYil7YS51bmlmb3JtMWZ2KHRoaXMuYWRkcixiKX1mdW5jdGlvbiBOZihhLGIpe2EudW5pZm9ybTFpdih0aGlzLmFkZHIsYil9ZnVuY3Rpb24gT2YoYSxiKXthLnVuaWZvcm0yZnYodGhpcy5hZGRyLEtiKGIsdGhpcy5zaXplLDIpKX1mdW5jdGlvbiBQZihhLGIpe2EudW5pZm9ybTNmdih0aGlzLmFkZHIsS2IoYix0aGlzLnNpemUsMykpfWZ1bmN0aW9uIFFmKGEsYil7YS51bmlmb3JtNGZ2KHRoaXMuYWRkcixLYihiLHRoaXMuc2l6ZSw0KSl9ZnVuY3Rpb24gUmYoYSxiKXthLnVuaWZvcm1NYXRyaXgyZnYodGhpcy5hZGRyLCExLEtiKGIsdGhpcy5zaXplLDQpKX1mdW5jdGlvbiBTZihhLGIpe2EudW5pZm9ybU1hdHJpeDNmdih0aGlzLmFkZHIsITEsS2IoYix0aGlzLnNpemUsOSkpfWZ1bmN0aW9uIFRmKGEsYil7YS51bmlmb3JtTWF0cml4NGZ2KHRoaXMuYWRkcixcbiAgICAhMSxLYihiLHRoaXMuc2l6ZSwxNikpfWZ1bmN0aW9uIFVmKGEsYixjKXt2YXIgZD1iLmxlbmd0aCxlPUplKGMsZCk7YS51bmlmb3JtMWl2KHRoaXMuYWRkcixlKTtmb3IoYT0wO2EhPT1kOysrYSljLnNldFRleHR1cmUyRChiW2FdfHxOZSxlW2FdKX1mdW5jdGlvbiBWZihhLGIsYyl7dmFyIGQ9Yi5sZW5ndGgsZT1KZShjLGQpO2EudW5pZm9ybTFpdih0aGlzLmFkZHIsZSk7Zm9yKGE9MDthIT09ZDsrK2EpYy5zZXRUZXh0dXJlQ3ViZShiW2FdfHxPZSxlW2FdKX1mdW5jdGlvbiBXZihhKXtzd2l0Y2goYSl7Y2FzZSA1MTI2OnJldHVybiBNZjtjYXNlIDM1NjY0OnJldHVybiBPZjtjYXNlIDM1NjY1OnJldHVybiBQZjtjYXNlIDM1NjY2OnJldHVybiBRZjtjYXNlIDM1Njc0OnJldHVybiBSZjtjYXNlIDM1Njc1OnJldHVybiBTZjtjYXNlIDM1Njc2OnJldHVybiBUZjtjYXNlIDM1Njc4OnJldHVybiBVZjtjYXNlIDM1NjgwOnJldHVybiBWZjtjYXNlIDUxMjQ6Y2FzZSAzNTY3MDpyZXR1cm4gTmY7XG4gICAgY2FzZSAzNTY2NzpjYXNlIDM1NjcxOnJldHVybiBQZTtjYXNlIDM1NjY4OmNhc2UgMzU2NzI6cmV0dXJuIFFlO2Nhc2UgMzU2Njk6Y2FzZSAzNTY3MzpyZXR1cm4gUmV9fWZ1bmN0aW9uIFhmKGEsYixjKXt0aGlzLmlkPWE7dGhpcy5hZGRyPWM7dGhpcy5zZXRWYWx1ZT1MZihiLnR5cGUpfWZ1bmN0aW9uIFlmKGEsYixjKXt0aGlzLmlkPWE7dGhpcy5hZGRyPWM7dGhpcy5zaXplPWIuc2l6ZTt0aGlzLnNldFZhbHVlPVdmKGIudHlwZSl9ZnVuY3Rpb24gU2UoYSl7dGhpcy5pZD1hO3RoaXMuc2VxPVtdO3RoaXMubWFwPXt9fWZ1bmN0aW9uIG1iKGEsYixjKXt0aGlzLnNlcT1bXTt0aGlzLm1hcD17fTt0aGlzLnJlbmRlcmVyPWM7Yz1hLmdldFByb2dyYW1QYXJhbWV0ZXIoYixhLkFDVElWRV9VTklGT1JNUyk7Zm9yKHZhciBkPTA7ZDxjOysrZCl7dmFyIGU9YS5nZXRBY3RpdmVVbmlmb3JtKGIsZCksZj1hLmdldFVuaWZvcm1Mb2NhdGlvbihiLGUubmFtZSksZz10aGlzLGg9ZS5uYW1lLGs9XG4gICAgaC5sZW5ndGg7Zm9yKFZkLmxhc3RJbmRleD0wOzspe3ZhciBtPVZkLmV4ZWMoaCkscT1WZC5sYXN0SW5kZXgsbj1tWzFdLHU9bVszXTtcIl1cIj09PW1bMl0mJihufD0wKTtpZih2b2lkIDA9PT11fHxcIltcIj09PXUmJnErMj09PWspe2g9ZztlPXZvaWQgMD09PXU/bmV3IFhmKG4sZSxmKTpuZXcgWWYobixlLGYpO2guc2VxLnB1c2goZSk7aC5tYXBbZS5pZF09ZTticmVha31lbHNlIHU9Zy5tYXBbbl0sdm9pZCAwPT09dSYmKHU9bmV3IFNlKG4pLG49ZyxnPXUsbi5zZXEucHVzaChnKSxuLm1hcFtnLmlkXT1nKSxnPXV9fX1mdW5jdGlvbiBIKGEsYixjKXtyZXR1cm4gdm9pZCAwPT09YiYmdm9pZCAwPT09Yz90aGlzLnNldChhKTp0aGlzLnNldFJHQihhLGIsYyl9ZnVuY3Rpb24gb2QoYSxiKXt0aGlzLm1pbj12b2lkIDAhPT1hP2E6bmV3IEQoSW5maW5pdHksSW5maW5pdHkpO3RoaXMubWF4PXZvaWQgMCE9PWI/YjpuZXcgRCgtSW5maW5pdHksLUluZmluaXR5KX1mdW5jdGlvbiBaZihhLGIsYyxcbiAgICBkLGUpe3ZhciBmLGcsaCxrLG0scSxuLHUscix0LGwsdyx6LHksSSxBO3RoaXMucmVuZGVyPWZ1bmN0aW9uKGEsdixEYSxuYSl7aWYoMCE9PWEubGVuZ3RoKXt2PW5ldyBwO3ZhciBKPW5hLncvbmEueixIYT0uNSpuYS56LHBkPS41Km5hLncsbGE9MTYvbmEudyxTPW5ldyBEKGxhKkosbGEpLHZhPW5ldyBwKDEsMSwwKSxOPW5ldyBEKDEsMSksQj1uZXcgb2Q7Qi5taW4uc2V0KG5hLngsbmEueSk7Qi5tYXguc2V0KG5hLngrKG5hLnotMTYpLG5hLnkrKG5hLnctMTYpKTtpZih2b2lkIDA9PT15KXt2YXIgbGE9bmV3IEZsb2F0MzJBcnJheShbLTEsLTEsMCwwLDEsLTEsMSwwLDEsMSwxLDEsLTEsMSwwLDFdKSx4PW5ldyBVaW50MTZBcnJheShbMCwxLDIsMCwyLDNdKTtsPWIuY3JlYXRlQnVmZmVyKCk7dz1iLmNyZWF0ZUJ1ZmZlcigpO2IuYmluZEJ1ZmZlcihiLkFSUkFZX0JVRkZFUixsKTtiLmJ1ZmZlckRhdGEoYi5BUlJBWV9CVUZGRVIsbGEsYi5TVEFUSUNfRFJBVyk7Yi5iaW5kQnVmZmVyKGIuRUxFTUVOVF9BUlJBWV9CVUZGRVIsXG4gICAgdyk7Yi5idWZmZXJEYXRhKGIuRUxFTUVOVF9BUlJBWV9CVUZGRVIseCxiLlNUQVRJQ19EUkFXKTtJPWIuY3JlYXRlVGV4dHVyZSgpO0E9Yi5jcmVhdGVUZXh0dXJlKCk7Yy5iaW5kVGV4dHVyZShiLlRFWFRVUkVfMkQsSSk7Yi50ZXhJbWFnZTJEKGIuVEVYVFVSRV8yRCwwLGIuUkdCLDE2LDE2LDAsYi5SR0IsYi5VTlNJR05FRF9CWVRFLG51bGwpO2IudGV4UGFyYW1ldGVyaShiLlRFWFRVUkVfMkQsYi5URVhUVVJFX1dSQVBfUyxiLkNMQU1QX1RPX0VER0UpO2IudGV4UGFyYW1ldGVyaShiLlRFWFRVUkVfMkQsYi5URVhUVVJFX1dSQVBfVCxiLkNMQU1QX1RPX0VER0UpO2IudGV4UGFyYW1ldGVyaShiLlRFWFRVUkVfMkQsYi5URVhUVVJFX01BR19GSUxURVIsYi5ORUFSRVNUKTtiLnRleFBhcmFtZXRlcmkoYi5URVhUVVJFXzJELGIuVEVYVFVSRV9NSU5fRklMVEVSLGIuTkVBUkVTVCk7Yy5iaW5kVGV4dHVyZShiLlRFWFRVUkVfMkQsQSk7Yi50ZXhJbWFnZTJEKGIuVEVYVFVSRV8yRCwwLFxuICAgIGIuUkdCQSwxNiwxNiwwLGIuUkdCQSxiLlVOU0lHTkVEX0JZVEUsbnVsbCk7Yi50ZXhQYXJhbWV0ZXJpKGIuVEVYVFVSRV8yRCxiLlRFWFRVUkVfV1JBUF9TLGIuQ0xBTVBfVE9fRURHRSk7Yi50ZXhQYXJhbWV0ZXJpKGIuVEVYVFVSRV8yRCxiLlRFWFRVUkVfV1JBUF9ULGIuQ0xBTVBfVE9fRURHRSk7Yi50ZXhQYXJhbWV0ZXJpKGIuVEVYVFVSRV8yRCxiLlRFWFRVUkVfTUFHX0ZJTFRFUixiLk5FQVJFU1QpO2IudGV4UGFyYW1ldGVyaShiLlRFWFRVUkVfMkQsYi5URVhUVVJFX01JTl9GSUxURVIsYi5ORUFSRVNUKTt2YXIgbGE9ej17dmVydGV4U2hhZGVyOlwidW5pZm9ybSBsb3dwIGludCByZW5kZXJUeXBlO1xcbnVuaWZvcm0gdmVjMyBzY3JlZW5Qb3NpdGlvbjtcXG51bmlmb3JtIHZlYzIgc2NhbGU7XFxudW5pZm9ybSBmbG9hdCByb3RhdGlvbjtcXG51bmlmb3JtIHNhbXBsZXIyRCBvY2NsdXNpb25NYXA7XFxuYXR0cmlidXRlIHZlYzIgcG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzIgdXY7XFxudmFyeWluZyB2ZWMyIHZVVjtcXG52YXJ5aW5nIGZsb2F0IHZWaXNpYmlsaXR5O1xcbnZvaWQgbWFpbigpIHtcXG5cXHR2VVYgPSB1djtcXG5cXHR2ZWMyIHBvcyA9IHBvc2l0aW9uO1xcblxcdGlmICggcmVuZGVyVHlwZSA9PSAyICkge1xcblxcdFxcdHZlYzQgdmlzaWJpbGl0eSA9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjEsIDAuMSApICk7XFxuXFx0XFx0dmlzaWJpbGl0eSArPSB0ZXh0dXJlMkQoIG9jY2x1c2lvbk1hcCwgdmVjMiggMC41LCAwLjEgKSApO1xcblxcdFxcdHZpc2liaWxpdHkgKz0gdGV4dHVyZTJEKCBvY2NsdXNpb25NYXAsIHZlYzIoIDAuOSwgMC4xICkgKTtcXG5cXHRcXHR2aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjksIDAuNSApICk7XFxuXFx0XFx0dmlzaWJpbGl0eSArPSB0ZXh0dXJlMkQoIG9jY2x1c2lvbk1hcCwgdmVjMiggMC45LCAwLjkgKSApO1xcblxcdFxcdHZpc2liaWxpdHkgKz0gdGV4dHVyZTJEKCBvY2NsdXNpb25NYXAsIHZlYzIoIDAuNSwgMC45ICkgKTtcXG5cXHRcXHR2aXNpYmlsaXR5ICs9IHRleHR1cmUyRCggb2NjbHVzaW9uTWFwLCB2ZWMyKCAwLjEsIDAuOSApICk7XFxuXFx0XFx0dmlzaWJpbGl0eSArPSB0ZXh0dXJlMkQoIG9jY2x1c2lvbk1hcCwgdmVjMiggMC4xLCAwLjUgKSApO1xcblxcdFxcdHZpc2liaWxpdHkgKz0gdGV4dHVyZTJEKCBvY2NsdXNpb25NYXAsIHZlYzIoIDAuNSwgMC41ICkgKTtcXG5cXHRcXHR2VmlzaWJpbGl0eSA9ICAgICAgICB2aXNpYmlsaXR5LnIgLyA5LjA7XFxuXFx0XFx0dlZpc2liaWxpdHkgKj0gMS4wIC0gdmlzaWJpbGl0eS5nIC8gOS4wO1xcblxcdFxcdHZWaXNpYmlsaXR5ICo9ICAgICAgIHZpc2liaWxpdHkuYiAvIDkuMDtcXG5cXHRcXHR2VmlzaWJpbGl0eSAqPSAxLjAgLSB2aXNpYmlsaXR5LmEgLyA5LjA7XFxuXFx0XFx0cG9zLnggPSBjb3MoIHJvdGF0aW9uICkgKiBwb3NpdGlvbi54IC0gc2luKCByb3RhdGlvbiApICogcG9zaXRpb24ueTtcXG5cXHRcXHRwb3MueSA9IHNpbiggcm90YXRpb24gKSAqIHBvc2l0aW9uLnggKyBjb3MoIHJvdGF0aW9uICkgKiBwb3NpdGlvbi55O1xcblxcdH1cXG5cXHRnbF9Qb3NpdGlvbiA9IHZlYzQoICggcG9zICogc2NhbGUgKyBzY3JlZW5Qb3NpdGlvbi54eSApLnh5LCBzY3JlZW5Qb3NpdGlvbi56LCAxLjAgKTtcXG59XCIsXG4gICAgZnJhZ21lbnRTaGFkZXI6XCJ1bmlmb3JtIGxvd3AgaW50IHJlbmRlclR5cGU7XFxudW5pZm9ybSBzYW1wbGVyMkQgbWFwO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG51bmlmb3JtIHZlYzMgY29sb3I7XFxudmFyeWluZyB2ZWMyIHZVVjtcXG52YXJ5aW5nIGZsb2F0IHZWaXNpYmlsaXR5O1xcbnZvaWQgbWFpbigpIHtcXG5cXHRpZiAoIHJlbmRlclR5cGUgPT0gMCApIHtcXG5cXHRcXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCAxLjAsIDAuMCwgMS4wLCAwLjAgKTtcXG5cXHR9IGVsc2UgaWYgKCByZW5kZXJUeXBlID09IDEgKSB7XFxuXFx0XFx0Z2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKCBtYXAsIHZVViApO1xcblxcdH0gZWxzZSB7XFxuXFx0XFx0dmVjNCB0ZXh0dXJlID0gdGV4dHVyZTJEKCBtYXAsIHZVViApO1xcblxcdFxcdHRleHR1cmUuYSAqPSBvcGFjaXR5ICogdlZpc2liaWxpdHk7XFxuXFx0XFx0Z2xfRnJhZ0NvbG9yID0gdGV4dHVyZTtcXG5cXHRcXHRnbF9GcmFnQ29sb3IucmdiICo9IGNvbG9yO1xcblxcdH1cXG59XCJ9LHg9Yi5jcmVhdGVQcm9ncmFtKCksXG4gICAgRT1iLmNyZWF0ZVNoYWRlcihiLkZSQUdNRU5UX1NIQURFUiksVj1iLmNyZWF0ZVNoYWRlcihiLlZFUlRFWF9TSEFERVIpLEg9XCJwcmVjaXNpb24gXCIrZS5wcmVjaXNpb24rXCIgZmxvYXQ7XFxuXCI7Yi5zaGFkZXJTb3VyY2UoRSxIK2xhLmZyYWdtZW50U2hhZGVyKTtiLnNoYWRlclNvdXJjZShWLEgrbGEudmVydGV4U2hhZGVyKTtiLmNvbXBpbGVTaGFkZXIoRSk7Yi5jb21waWxlU2hhZGVyKFYpO2IuYXR0YWNoU2hhZGVyKHgsRSk7Yi5hdHRhY2hTaGFkZXIoeCxWKTtiLmxpbmtQcm9ncmFtKHgpO3k9eDtyPWIuZ2V0QXR0cmliTG9jYXRpb24oeSxcInBvc2l0aW9uXCIpO3Q9Yi5nZXRBdHRyaWJMb2NhdGlvbih5LFwidXZcIik7Zj1iLmdldFVuaWZvcm1Mb2NhdGlvbih5LFwicmVuZGVyVHlwZVwiKTtnPWIuZ2V0VW5pZm9ybUxvY2F0aW9uKHksXCJtYXBcIik7aD1iLmdldFVuaWZvcm1Mb2NhdGlvbih5LFwib2NjbHVzaW9uTWFwXCIpO2s9Yi5nZXRVbmlmb3JtTG9jYXRpb24oeSxcIm9wYWNpdHlcIik7bT1iLmdldFVuaWZvcm1Mb2NhdGlvbih5LFxuICAgIFwiY29sb3JcIik7cT1iLmdldFVuaWZvcm1Mb2NhdGlvbih5LFwic2NhbGVcIik7bj1iLmdldFVuaWZvcm1Mb2NhdGlvbih5LFwicm90YXRpb25cIik7dT1iLmdldFVuaWZvcm1Mb2NhdGlvbih5LFwic2NyZWVuUG9zaXRpb25cIil9Yy51c2VQcm9ncmFtKHkpO2MuaW5pdEF0dHJpYnV0ZXMoKTtjLmVuYWJsZUF0dHJpYnV0ZShyKTtjLmVuYWJsZUF0dHJpYnV0ZSh0KTtjLmRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCk7Yi51bmlmb3JtMWkoaCwwKTtiLnVuaWZvcm0xaShnLDEpO2IuYmluZEJ1ZmZlcihiLkFSUkFZX0JVRkZFUixsKTtiLnZlcnRleEF0dHJpYlBvaW50ZXIociwyLGIuRkxPQVQsITEsMTYsMCk7Yi52ZXJ0ZXhBdHRyaWJQb2ludGVyKHQsMixiLkZMT0FULCExLDE2LDgpO2IuYmluZEJ1ZmZlcihiLkVMRU1FTlRfQVJSQVlfQlVGRkVSLHcpO2MuZGlzYWJsZShiLkNVTExfRkFDRSk7Yy5idWZmZXJzLmRlcHRoLnNldE1hc2soITEpO3g9MDtmb3IoRT1hLmxlbmd0aDt4PEU7eCsrKWlmKGxhPVxuICAgIDE2L25hLncsUy5zZXQobGEqSixsYSksVj1hW3hdLHYuc2V0KFYubWF0cml4V29ybGQuZWxlbWVudHNbMTJdLFYubWF0cml4V29ybGQuZWxlbWVudHNbMTNdLFYubWF0cml4V29ybGQuZWxlbWVudHNbMTRdKSx2LmFwcGx5TWF0cml4NChEYS5tYXRyaXhXb3JsZEludmVyc2UpLHYuYXBwbHlNYXRyaXg0KERhLnByb2plY3Rpb25NYXRyaXgpLHZhLmNvcHkodiksTi54PW5hLngrdmEueCpIYStIYS04LE4ueT1uYS55K3ZhLnkqcGQrcGQtOCwhMD09PUIuY29udGFpbnNQb2ludChOKSl7Yy5hY3RpdmVUZXh0dXJlKGIuVEVYVFVSRTApO2MuYmluZFRleHR1cmUoYi5URVhUVVJFXzJELG51bGwpO2MuYWN0aXZlVGV4dHVyZShiLlRFWFRVUkUxKTtjLmJpbmRUZXh0dXJlKGIuVEVYVFVSRV8yRCxJKTtiLmNvcHlUZXhJbWFnZTJEKGIuVEVYVFVSRV8yRCwwLGIuUkdCLE4ueCxOLnksMTYsMTYsMCk7Yi51bmlmb3JtMWkoZiwwKTtiLnVuaWZvcm0yZihxLFMueCxTLnkpO2IudW5pZm9ybTNmKHUsdmEueCxcbiAgICB2YS55LHZhLnopO2MuZGlzYWJsZShiLkJMRU5EKTtjLmVuYWJsZShiLkRFUFRIX1RFU1QpO2IuZHJhd0VsZW1lbnRzKGIuVFJJQU5HTEVTLDYsYi5VTlNJR05FRF9TSE9SVCwwKTtjLmFjdGl2ZVRleHR1cmUoYi5URVhUVVJFMCk7Yy5iaW5kVGV4dHVyZShiLlRFWFRVUkVfMkQsQSk7Yi5jb3B5VGV4SW1hZ2UyRChiLlRFWFRVUkVfMkQsMCxiLlJHQkEsTi54LE4ueSwxNiwxNiwwKTtiLnVuaWZvcm0xaShmLDEpO2MuZGlzYWJsZShiLkRFUFRIX1RFU1QpO2MuYWN0aXZlVGV4dHVyZShiLlRFWFRVUkUxKTtjLmJpbmRUZXh0dXJlKGIuVEVYVFVSRV8yRCxJKTtiLmRyYXdFbGVtZW50cyhiLlRSSUFOR0xFUyw2LGIuVU5TSUdORURfU0hPUlQsMCk7Vi5wb3NpdGlvblNjcmVlbi5jb3B5KHZhKTtWLmN1c3RvbVVwZGF0ZUNhbGxiYWNrP1YuY3VzdG9tVXBkYXRlQ2FsbGJhY2soVik6Vi51cGRhdGVMZW5zRmxhcmVzKCk7Yi51bmlmb3JtMWkoZiwyKTtjLmVuYWJsZShiLkJMRU5EKTtmb3IodmFyIEg9XG4gICAgMCxLPVYubGVuc0ZsYXJlcy5sZW5ndGg7SDxLO0grKyl7dmFyIEM9Vi5sZW5zRmxhcmVzW0hdOy4wMDE8Qy5vcGFjaXR5JiYuMDAxPEMuc2NhbGUmJih2YS54PUMueCx2YS55PUMueSx2YS56PUMueixsYT1DLnNpemUqQy5zY2FsZS9uYS53LFMueD1sYSpKLFMueT1sYSxiLnVuaWZvcm0zZih1LHZhLngsdmEueSx2YS56KSxiLnVuaWZvcm0yZihxLFMueCxTLnkpLGIudW5pZm9ybTFmKG4sQy5yb3RhdGlvbiksYi51bmlmb3JtMWYoayxDLm9wYWNpdHkpLGIudW5pZm9ybTNmKG0sQy5jb2xvci5yLEMuY29sb3IuZyxDLmNvbG9yLmIpLGMuc2V0QmxlbmRpbmcoQy5ibGVuZGluZyxDLmJsZW5kRXF1YXRpb24sQy5ibGVuZFNyYyxDLmJsZW5kRHN0KSxkLnNldFRleHR1cmUyRChDLnRleHR1cmUsMSksYi5kcmF3RWxlbWVudHMoYi5UUklBTkdMRVMsNixiLlVOU0lHTkVEX1NIT1JULDApKX19Yy5lbmFibGUoYi5DVUxMX0ZBQ0UpO2MuZW5hYmxlKGIuREVQVEhfVEVTVCk7Yy5idWZmZXJzLmRlcHRoLnNldE1hc2soITApO1xuICAgIGMucmVzZXQoKX19fWZ1bmN0aW9uIHRjKGEsYixjLGQsZSxmLGcsaCxrKXtVLmNhbGwodGhpcyxhLGIsYyxkLGUsZixnLGgsayk7dGhpcy5uZWVkc1VwZGF0ZT0hMH1mdW5jdGlvbiAkZihhLGIsYyxkLGUpe3ZhciBmLGcsaCxrLG0scSxuLHUscix0LGwsdyx6LHksSSxBLEo7ZnVuY3Rpb24gSGEoYSxiKXtyZXR1cm4gYS5yZW5kZXJPcmRlciE9PWIucmVuZGVyT3JkZXI/YS5yZW5kZXJPcmRlci1iLnJlbmRlck9yZGVyOmEueiE9PWIuej9iLnotYS56OmIuaWQtYS5pZH12YXIgRGEsbmEsb2EsVGUscGQ9bmV3IHAsbGE9bmV3IGhhLFM9bmV3IHA7dGhpcy5yZW5kZXI9ZnVuY3Rpb24odixwLEQpe2lmKDAhPT12Lmxlbmd0aCl7aWYodm9pZCAwPT09b2Epe3ZhciB4PW5ldyBGbG9hdDMyQXJyYXkoWy0uNSwtLjUsMCwwLC41LC0uNSwxLDAsLjUsLjUsMSwxLC0uNSwuNSwwLDFdKSxOPW5ldyBVaW50MTZBcnJheShbMCwxLDIsMCwyLDNdKTtEYT1iLmNyZWF0ZUJ1ZmZlcigpO25hPWIuY3JlYXRlQnVmZmVyKCk7XG4gICAgYi5iaW5kQnVmZmVyKGIuQVJSQVlfQlVGRkVSLERhKTtiLmJ1ZmZlckRhdGEoYi5BUlJBWV9CVUZGRVIseCxiLlNUQVRJQ19EUkFXKTtiLmJpbmRCdWZmZXIoYi5FTEVNRU5UX0FSUkFZX0JVRkZFUixuYSk7Yi5idWZmZXJEYXRhKGIuRUxFTUVOVF9BUlJBWV9CVUZGRVIsTixiLlNUQVRJQ19EUkFXKTt4PWIuY3JlYXRlUHJvZ3JhbSgpO049Yi5jcmVhdGVTaGFkZXIoYi5WRVJURVhfU0hBREVSKTt2YXIgQj1iLmNyZWF0ZVNoYWRlcihiLkZSQUdNRU5UX1NIQURFUik7Yi5zaGFkZXJTb3VyY2UoTixbXCJwcmVjaXNpb24gXCIrZS5wcmVjaXNpb24rXCIgZmxvYXQ7XCIsXCIjZGVmaW5lIFNIQURFUl9OQU1FIFNwcml0ZU1hdGVyaWFsXFxudW5pZm9ybSBtYXQ0IG1vZGVsVmlld01hdHJpeDtcXG51bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDtcXG51bmlmb3JtIGZsb2F0IHJvdGF0aW9uO1xcbnVuaWZvcm0gdmVjMiBzY2FsZTtcXG51bmlmb3JtIHZlYzIgdXZPZmZzZXQ7XFxudW5pZm9ybSB2ZWMyIHV2U2NhbGU7XFxuYXR0cmlidXRlIHZlYzIgcG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzIgdXY7XFxudmFyeWluZyB2ZWMyIHZVVjtcXG52YXJ5aW5nIGZsb2F0IGZvZ0RlcHRoO1xcbnZvaWQgbWFpbigpIHtcXG5cXHR2VVYgPSB1dk9mZnNldCArIHV2ICogdXZTY2FsZTtcXG5cXHR2ZWMyIGFsaWduZWRQb3NpdGlvbiA9IHBvc2l0aW9uICogc2NhbGU7XFxuXFx0dmVjMiByb3RhdGVkUG9zaXRpb247XFxuXFx0cm90YXRlZFBvc2l0aW9uLnggPSBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueCAtIHNpbiggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi55O1xcblxcdHJvdGF0ZWRQb3NpdGlvbi55ID0gc2luKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnggKyBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueTtcXG5cXHR2ZWM0IG12UG9zaXRpb247XFxuXFx0bXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIDAuMCwgMC4wLCAwLjAsIDEuMCApO1xcblxcdG12UG9zaXRpb24ueHkgKz0gcm90YXRlZFBvc2l0aW9uO1xcblxcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XFxuXFx0Zm9nRGVwdGggPSAtIG12UG9zaXRpb24uejtcXG59XCJdLmpvaW4oXCJcXG5cIikpO1xuICAgIGIuc2hhZGVyU291cmNlKEIsW1wicHJlY2lzaW9uIFwiK2UucHJlY2lzaW9uK1wiIGZsb2F0O1wiLFwiI2RlZmluZSBTSEFERVJfTkFNRSBTcHJpdGVNYXRlcmlhbFxcbnVuaWZvcm0gdmVjMyBjb2xvcjtcXG51bmlmb3JtIHNhbXBsZXIyRCBtYXA7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnVuaWZvcm0gaW50IGZvZ1R5cGU7XFxudW5pZm9ybSB2ZWMzIGZvZ0NvbG9yO1xcbnVuaWZvcm0gZmxvYXQgZm9nRGVuc2l0eTtcXG51bmlmb3JtIGZsb2F0IGZvZ05lYXI7XFxudW5pZm9ybSBmbG9hdCBmb2dGYXI7XFxudW5pZm9ybSBmbG9hdCBhbHBoYVRlc3Q7XFxudmFyeWluZyB2ZWMyIHZVVjtcXG52YXJ5aW5nIGZsb2F0IGZvZ0RlcHRoO1xcbnZvaWQgbWFpbigpIHtcXG5cXHR2ZWM0IHRleHR1cmUgPSB0ZXh0dXJlMkQoIG1hcCwgdlVWICk7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggY29sb3IgKiB0ZXh0dXJlLnh5eiwgdGV4dHVyZS5hICogb3BhY2l0eSApO1xcblxcdGlmICggZ2xfRnJhZ0NvbG9yLmEgPCBhbHBoYVRlc3QgKSBkaXNjYXJkO1xcblxcdGlmICggZm9nVHlwZSA+IDAgKSB7XFxuXFx0XFx0ZmxvYXQgZm9nRmFjdG9yID0gMC4wO1xcblxcdFxcdGlmICggZm9nVHlwZSA9PSAxICkge1xcblxcdFxcdFxcdGZvZ0ZhY3RvciA9IHNtb290aHN0ZXAoIGZvZ05lYXIsIGZvZ0ZhciwgZm9nRGVwdGggKTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdGNvbnN0IGZsb2F0IExPRzIgPSAxLjQ0MjY5NTtcXG5cXHRcXHRcXHRmb2dGYWN0b3IgPSBleHAyKCAtIGZvZ0RlbnNpdHkgKiBmb2dEZW5zaXR5ICogZm9nRGVwdGggKiBmb2dEZXB0aCAqIExPRzIgKTtcXG5cXHRcXHRcXHRmb2dGYWN0b3IgPSAxLjAgLSBjbGFtcCggZm9nRmFjdG9yLCAwLjAsIDEuMCApO1xcblxcdFxcdH1cXG5cXHRcXHRnbF9GcmFnQ29sb3IucmdiID0gbWl4KCBnbF9GcmFnQ29sb3IucmdiLCBmb2dDb2xvciwgZm9nRmFjdG9yICk7XFxuXFx0fVxcbn1cIl0uam9pbihcIlxcblwiKSk7XG4gICAgYi5jb21waWxlU2hhZGVyKE4pO2IuY29tcGlsZVNoYWRlcihCKTtiLmF0dGFjaFNoYWRlcih4LE4pO2IuYXR0YWNoU2hhZGVyKHgsQik7Yi5saW5rUHJvZ3JhbSh4KTtvYT14O0E9Yi5nZXRBdHRyaWJMb2NhdGlvbihvYSxcInBvc2l0aW9uXCIpO0o9Yi5nZXRBdHRyaWJMb2NhdGlvbihvYSxcInV2XCIpO2Y9Yi5nZXRVbmlmb3JtTG9jYXRpb24ob2EsXCJ1dk9mZnNldFwiKTtnPWIuZ2V0VW5pZm9ybUxvY2F0aW9uKG9hLFwidXZTY2FsZVwiKTtoPWIuZ2V0VW5pZm9ybUxvY2F0aW9uKG9hLFwicm90YXRpb25cIik7az1iLmdldFVuaWZvcm1Mb2NhdGlvbihvYSxcInNjYWxlXCIpO209Yi5nZXRVbmlmb3JtTG9jYXRpb24ob2EsXCJjb2xvclwiKTtxPWIuZ2V0VW5pZm9ybUxvY2F0aW9uKG9hLFwibWFwXCIpO249Yi5nZXRVbmlmb3JtTG9jYXRpb24ob2EsXCJvcGFjaXR5XCIpO3U9Yi5nZXRVbmlmb3JtTG9jYXRpb24ob2EsXCJtb2RlbFZpZXdNYXRyaXhcIik7cj1iLmdldFVuaWZvcm1Mb2NhdGlvbihvYSxcInByb2plY3Rpb25NYXRyaXhcIik7XG4gICAgdD1iLmdldFVuaWZvcm1Mb2NhdGlvbihvYSxcImZvZ1R5cGVcIik7bD1iLmdldFVuaWZvcm1Mb2NhdGlvbihvYSxcImZvZ0RlbnNpdHlcIik7dz1iLmdldFVuaWZvcm1Mb2NhdGlvbihvYSxcImZvZ05lYXJcIik7ej1iLmdldFVuaWZvcm1Mb2NhdGlvbihvYSxcImZvZ0ZhclwiKTt5PWIuZ2V0VW5pZm9ybUxvY2F0aW9uKG9hLFwiZm9nQ29sb3JcIik7Yi5nZXRVbmlmb3JtTG9jYXRpb24ob2EsXCJmb2dEZXB0aFwiKTtJPWIuZ2V0VW5pZm9ybUxvY2F0aW9uKG9hLFwiYWxwaGFUZXN0XCIpO3g9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLFwiY2FudmFzXCIpO3gud2lkdGg9ODt4LmhlaWdodD04O049eC5nZXRDb250ZXh0KFwiMmRcIik7Ti5maWxsU3R5bGU9XCJ3aGl0ZVwiO04uZmlsbFJlY3QoMCwwLDgsOCk7VGU9bmV3IHRjKHgpfWMudXNlUHJvZ3JhbShvYSk7Yy5pbml0QXR0cmlidXRlcygpO2MuZW5hYmxlQXR0cmlidXRlKEEpO2MuZW5hYmxlQXR0cmlidXRlKEopO1xuICAgIGMuZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKTtjLmRpc2FibGUoYi5DVUxMX0ZBQ0UpO2MuZW5hYmxlKGIuQkxFTkQpO2IuYmluZEJ1ZmZlcihiLkFSUkFZX0JVRkZFUixEYSk7Yi52ZXJ0ZXhBdHRyaWJQb2ludGVyKEEsMixiLkZMT0FULCExLDE2LDApO2IudmVydGV4QXR0cmliUG9pbnRlcihKLDIsYi5GTE9BVCwhMSwxNiw4KTtiLmJpbmRCdWZmZXIoYi5FTEVNRU5UX0FSUkFZX0JVRkZFUixuYSk7Yi51bmlmb3JtTWF0cml4NGZ2KHIsITEsRC5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzKTtjLmFjdGl2ZVRleHR1cmUoYi5URVhUVVJFMCk7Yi51bmlmb3JtMWkocSwwKTtOPXg9MDsoQj1wLmZvZyk/KGIudW5pZm9ybTNmKHksQi5jb2xvci5yLEIuY29sb3IuZyxCLmNvbG9yLmIpLEIuaXNGb2c/KGIudW5pZm9ybTFmKHcsQi5uZWFyKSxiLnVuaWZvcm0xZih6LEIuZmFyKSxiLnVuaWZvcm0xaSh0LDEpLE49eD0xKTpCLmlzRm9nRXhwMiYmKGIudW5pZm9ybTFmKGwsQi5kZW5zaXR5KSxcbiAgICBiLnVuaWZvcm0xaSh0LDIpLE49eD0yKSk6KGIudW5pZm9ybTFpKHQsMCksTj14PTApO2Zvcih2YXIgQz0wLEU9di5sZW5ndGg7QzxFO0MrKylCPXZbQ10sQi5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyhELm1hdHJpeFdvcmxkSW52ZXJzZSxCLm1hdHJpeFdvcmxkKSxCLno9LUIubW9kZWxWaWV3TWF0cml4LmVsZW1lbnRzWzE0XTt2LnNvcnQoSGEpO2Zvcih2YXIgdmE9W10sQz0wLEU9di5sZW5ndGg7QzxFO0MrKyl7Qj12W0NdO3ZhciBHPUIubWF0ZXJpYWw7aWYoITEhPT1HLnZpc2libGUpe0Iub25CZWZvcmVSZW5kZXIoYSxwLEQsdm9pZCAwLEcsdm9pZCAwKTtiLnVuaWZvcm0xZihJLEcuYWxwaGFUZXN0KTtiLnVuaWZvcm1NYXRyaXg0ZnYodSwhMSxCLm1vZGVsVmlld01hdHJpeC5lbGVtZW50cyk7Qi5tYXRyaXhXb3JsZC5kZWNvbXBvc2UocGQsbGEsUyk7dmFbMF09Uy54O3ZhWzFdPVMueTt2YXIgcWQ9MDtwLmZvZyYmRy5mb2cmJihxZD1OKTt4IT09cWQmJihiLnVuaWZvcm0xaSh0LFxuICAgIHFkKSx4PXFkKTtudWxsIT09Ry5tYXA/KGIudW5pZm9ybTJmKGYsRy5tYXAub2Zmc2V0LngsRy5tYXAub2Zmc2V0LnkpLGIudW5pZm9ybTJmKGcsRy5tYXAucmVwZWF0LngsRy5tYXAucmVwZWF0LnkpKTooYi51bmlmb3JtMmYoZiwwLDApLGIudW5pZm9ybTJmKGcsMSwxKSk7Yi51bmlmb3JtMWYobixHLm9wYWNpdHkpO2IudW5pZm9ybTNmKG0sRy5jb2xvci5yLEcuY29sb3IuZyxHLmNvbG9yLmIpO2IudW5pZm9ybTFmKGgsRy5yb3RhdGlvbik7Yi51bmlmb3JtMmZ2KGssdmEpO2Muc2V0QmxlbmRpbmcoRy5ibGVuZGluZyxHLmJsZW5kRXF1YXRpb24sRy5ibGVuZFNyYyxHLmJsZW5kRHN0LEcuYmxlbmRFcXVhdGlvbkFscGhhLEcuYmxlbmRTcmNBbHBoYSxHLmJsZW5kRHN0QWxwaGEsRy5wcmVtdWx0aXBsaWVkQWxwaGEpO2MuYnVmZmVycy5kZXB0aC5zZXRUZXN0KEcuZGVwdGhUZXN0KTtjLmJ1ZmZlcnMuZGVwdGguc2V0TWFzayhHLmRlcHRoV3JpdGUpO2MuYnVmZmVycy5jb2xvci5zZXRNYXNrKEcuY29sb3JXcml0ZSk7XG4gICAgZC5zZXRUZXh0dXJlMkQoRy5tYXB8fFRlLDApO2IuZHJhd0VsZW1lbnRzKGIuVFJJQU5HTEVTLDYsYi5VTlNJR05FRF9TSE9SVCwwKTtCLm9uQWZ0ZXJSZW5kZXIoYSxwLEQsdm9pZCAwLEcsdm9pZCAwKX19Yy5lbmFibGUoYi5DVUxMX0ZBQ0UpO2MucmVzZXQoKX19fWZ1bmN0aW9uIFAoKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImlkXCIse3ZhbHVlOmFnKyt9KTt0aGlzLnV1aWQ9US5nZW5lcmF0ZVVVSUQoKTt0aGlzLm5hbWU9XCJcIjt0aGlzLnR5cGU9XCJNYXRlcmlhbFwiO3RoaXMubGlnaHRzPXRoaXMuZm9nPSEwO3RoaXMuYmxlbmRpbmc9MTt0aGlzLnNpZGU9MDt0aGlzLmZsYXRTaGFkaW5nPSExO3RoaXMudmVydGV4Q29sb3JzPTA7dGhpcy5vcGFjaXR5PTE7dGhpcy50cmFuc3BhcmVudD0hMTt0aGlzLmJsZW5kU3JjPTIwNDt0aGlzLmJsZW5kRHN0PTIwNTt0aGlzLmJsZW5kRXF1YXRpb249MTAwO3RoaXMuYmxlbmRFcXVhdGlvbkFscGhhPXRoaXMuYmxlbmREc3RBbHBoYT10aGlzLmJsZW5kU3JjQWxwaGE9XG4gICAgbnVsbDt0aGlzLmRlcHRoRnVuYz0zO3RoaXMuZGVwdGhXcml0ZT10aGlzLmRlcHRoVGVzdD0hMDt0aGlzLmNsaXBwaW5nUGxhbmVzPW51bGw7dGhpcy5jbGlwU2hhZG93cz10aGlzLmNsaXBJbnRlcnNlY3Rpb249ITE7dGhpcy5jb2xvcldyaXRlPSEwO3RoaXMucHJlY2lzaW9uPW51bGw7dGhpcy5wb2x5Z29uT2Zmc2V0PSExO3RoaXMucG9seWdvbk9mZnNldFVuaXRzPXRoaXMucG9seWdvbk9mZnNldEZhY3Rvcj0wO3RoaXMuZGl0aGVyaW5nPSExO3RoaXMuYWxwaGFUZXN0PTA7dGhpcy5wcmVtdWx0aXBsaWVkQWxwaGE9ITE7dGhpcy5vdmVyZHJhdz0wO3RoaXMudmlzaWJsZT0hMDt0aGlzLnVzZXJEYXRhPXt9O3RoaXMubmVlZHNVcGRhdGU9ITB9ZnVuY3Rpb24gZWIoYSl7UC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIk1lc2hEZXB0aE1hdGVyaWFsXCI7dGhpcy5kZXB0aFBhY2tpbmc9MzIwMDt0aGlzLm1vcnBoVGFyZ2V0cz10aGlzLnNraW5uaW5nPSExO3RoaXMuZGlzcGxhY2VtZW50TWFwPVxuICAgIHRoaXMuYWxwaGFNYXA9dGhpcy5tYXA9bnVsbDt0aGlzLmRpc3BsYWNlbWVudFNjYWxlPTE7dGhpcy5kaXNwbGFjZW1lbnRCaWFzPTA7dGhpcy53aXJlZnJhbWU9ITE7dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg9MTt0aGlzLmxpZ2h0cz10aGlzLmZvZz0hMTt0aGlzLnNldFZhbHVlcyhhKX1mdW5jdGlvbiBmYihhKXtQLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiTWVzaERpc3RhbmNlTWF0ZXJpYWxcIjt0aGlzLnJlZmVyZW5jZVBvc2l0aW9uPW5ldyBwO3RoaXMubmVhckRpc3RhbmNlPTE7dGhpcy5mYXJEaXN0YW5jZT0xRTM7dGhpcy5tb3JwaFRhcmdldHM9dGhpcy5za2lubmluZz0hMTt0aGlzLmRpc3BsYWNlbWVudE1hcD10aGlzLmFscGhhTWFwPXRoaXMubWFwPW51bGw7dGhpcy5kaXNwbGFjZW1lbnRTY2FsZT0xO3RoaXMuZGlzcGxhY2VtZW50Qmlhcz0wO3RoaXMubGlnaHRzPXRoaXMuZm9nPSExO3RoaXMuc2V0VmFsdWVzKGEpfWZ1bmN0aW9uIFhhKGEsYil7dGhpcy5taW49dm9pZCAwIT09XG4gICAgYT9hOm5ldyBwKEluZmluaXR5LEluZmluaXR5LEluZmluaXR5KTt0aGlzLm1heD12b2lkIDAhPT1iP2I6bmV3IHAoLUluZmluaXR5LC1JbmZpbml0eSwtSW5maW5pdHkpfWZ1bmN0aW9uIElhKGEsYil7dGhpcy5jZW50ZXI9dm9pZCAwIT09YT9hOm5ldyBwO3RoaXMucmFkaXVzPXZvaWQgMCE9PWI/YjowfWZ1bmN0aW9uIEVhKGEsYil7dGhpcy5ub3JtYWw9dm9pZCAwIT09YT9hOm5ldyBwKDEsMCwwKTt0aGlzLmNvbnN0YW50PXZvaWQgMCE9PWI/YjowfWZ1bmN0aW9uIHJkKGEsYixjLGQsZSxmKXt0aGlzLnBsYW5lcz1bdm9pZCAwIT09YT9hOm5ldyBFYSx2b2lkIDAhPT1iP2I6bmV3IEVhLHZvaWQgMCE9PWM/YzpuZXcgRWEsdm9pZCAwIT09ZD9kOm5ldyBFYSx2b2lkIDAhPT1lP2U6bmV3IEVhLHZvaWQgMCE9PWY/ZjpuZXcgRWFdfWZ1bmN0aW9uIFVlKGEsYixjKXtmdW5jdGlvbiBkKGIsYyxkLGUsZixnKXt2YXIgaD1iLmdlb21ldHJ5O3ZhciBrPW47dmFyIG09Yi5jdXN0b21EZXB0aE1hdGVyaWFsO1xuICAgIGQmJihrPXUsbT1iLmN1c3RvbURpc3RhbmNlTWF0ZXJpYWwpO20/az1tOihtPSExLGMubW9ycGhUYXJnZXRzJiYoaCYmaC5pc0J1ZmZlckdlb21ldHJ5P209aC5tb3JwaEF0dHJpYnV0ZXMmJmgubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uJiYwPGgubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uLmxlbmd0aDpoJiZoLmlzR2VvbWV0cnkmJihtPWgubW9ycGhUYXJnZXRzJiYwPGgubW9ycGhUYXJnZXRzLmxlbmd0aCkpLGIuaXNTa2lubmVkTWVzaCYmITE9PT1jLnNraW5uaW5nJiZjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFNoYWRvd01hcDogVEhSRUUuU2tpbm5lZE1lc2ggd2l0aCBtYXRlcmlhbC5za2lubmluZyBzZXQgdG8gZmFsc2U6XCIsYiksYj1iLmlzU2tpbm5lZE1lc2gmJmMuc2tpbm5pbmcsaD0wLG0mJihofD0xKSxiJiYoaHw9Miksaz1rW2hdKTthLmxvY2FsQ2xpcHBpbmdFbmFibGVkJiYhMD09PWMuY2xpcFNoYWRvd3MmJjAhPT1jLmNsaXBwaW5nUGxhbmVzLmxlbmd0aCYmKGg9XG4gICAgay51dWlkLG09Yy51dWlkLGI9cltoXSx2b2lkIDA9PT1iJiYoYj17fSxyW2hdPWIpLGg9YlttXSx2b2lkIDA9PT1oJiYoaD1rLmNsb25lKCksYlttXT1oKSxrPWgpO2sudmlzaWJsZT1jLnZpc2libGU7ay53aXJlZnJhbWU9Yy53aXJlZnJhbWU7bT1jLnNpZGU7QS5yZW5kZXJTaW5nbGVTaWRlZCYmMj09bSYmKG09MCk7QS5yZW5kZXJSZXZlcnNlU2lkZWQmJigwPT09bT9tPTE6MT09PW0mJihtPTApKTtrLnNpZGU9bTtrLmNsaXBTaGFkb3dzPWMuY2xpcFNoYWRvd3M7ay5jbGlwcGluZ1BsYW5lcz1jLmNsaXBwaW5nUGxhbmVzO2suY2xpcEludGVyc2VjdGlvbj1jLmNsaXBJbnRlcnNlY3Rpb247ay53aXJlZnJhbWVMaW5ld2lkdGg9Yy53aXJlZnJhbWVMaW5ld2lkdGg7ay5saW5ld2lkdGg9Yy5saW5ld2lkdGg7ZCYmay5pc01lc2hEaXN0YW5jZU1hdGVyaWFsJiYoay5yZWZlcmVuY2VQb3NpdGlvbi5jb3B5KGUpLGsubmVhckRpc3RhbmNlPWYsay5mYXJEaXN0YW5jZT1nKTtyZXR1cm4ga31cbiAgICBmdW5jdGlvbiBlKGMsaCxnLGspe3ZhciBtO2lmKCExIT09Yy52aXNpYmxlKXtpZihjLmxheWVycy50ZXN0KGgubGF5ZXJzKSYmKGMuaXNNZXNofHxjLmlzTGluZXx8Yy5pc1BvaW50cykmJmMuY2FzdFNoYWRvdyYmKCFjLmZydXN0dW1DdWxsZWR8fGYuaW50ZXJzZWN0c09iamVjdChjKSkpe2MubW9kZWxWaWV3TWF0cml4Lm11bHRpcGx5TWF0cmljZXMoZy5tYXRyaXhXb3JsZEludmVyc2UsYy5tYXRyaXhXb3JsZCk7dmFyIG49Yi51cGRhdGUoYyksdT1jLm1hdGVyaWFsO2lmKEFycmF5LmlzQXJyYXkodSkpZm9yKHZhciByPW4uZ3JvdXBzLHQ9MCxsPXIubGVuZ3RoO3Q8bDt0Kyspe3ZhciBJPXJbdF07KG09dVtJLm1hdGVyaWFsSW5kZXhdKSYmbS52aXNpYmxlJiYobT1kKGMsbSxrLHEsZy5uZWFyLGcuZmFyKSxhLnJlbmRlckJ1ZmZlckRpcmVjdChnLG51bGwsbixtLGMsSSkpfWVsc2UgdS52aXNpYmxlJiYobT1kKGMsdSxrLHEsZy5uZWFyLGcuZmFyKSxhLnJlbmRlckJ1ZmZlckRpcmVjdChnLFxuICAgIG51bGwsbixtLGMsbnVsbCkpfWM9Yy5jaGlsZHJlbjtuPTA7Zm9yKHU9Yy5sZW5ndGg7bjx1O24rKyllKGNbbl0saCxnLGspfX12YXIgZj1uZXcgcmQsZz1uZXcgTyxoPW5ldyBELGs9bmV3IEQoYyxjKSxtPW5ldyBwLHE9bmV3IHAsbj1BcnJheSg0KSx1PUFycmF5KDQpLHI9e30sdD1bbmV3IHAoMSwwLDApLG5ldyBwKC0xLDAsMCksbmV3IHAoMCwwLDEpLG5ldyBwKDAsMCwtMSksbmV3IHAoMCwxLDApLG5ldyBwKDAsLTEsMCldLGw9W25ldyBwKDAsMSwwKSxuZXcgcCgwLDEsMCksbmV3IHAoMCwxLDApLG5ldyBwKDAsMSwwKSxuZXcgcCgwLDAsMSksbmV3IHAoMCwwLC0xKV0sdz1bbmV3IGFhLG5ldyBhYSxuZXcgYWEsbmV3IGFhLG5ldyBhYSxuZXcgYWFdO2ZvcihjPTA7NCE9PWM7KytjKXt2YXIgej0wIT09KGMmMSkseT0wIT09KGMmMiksST1uZXcgZWIoe2RlcHRoUGFja2luZzozMjAxLG1vcnBoVGFyZ2V0czp6LHNraW5uaW5nOnl9KTtuW2NdPUk7ej1uZXcgZmIoe21vcnBoVGFyZ2V0czp6LFxuICAgIHNraW5uaW5nOnl9KTt1W2NdPXp9dmFyIEE9dGhpczt0aGlzLmVuYWJsZWQ9ITE7dGhpcy5hdXRvVXBkYXRlPSEwO3RoaXMubmVlZHNVcGRhdGU9ITE7dGhpcy50eXBlPTE7dGhpcy5yZW5kZXJTaW5nbGVTaWRlZD10aGlzLnJlbmRlclJldmVyc2VTaWRlZD0hMDt0aGlzLnJlbmRlcj1mdW5jdGlvbihiLGMsZCl7aWYoITEhPT1BLmVuYWJsZWQmJighMSE9PUEuYXV0b1VwZGF0ZXx8ITEhPT1BLm5lZWRzVXBkYXRlKSYmMCE9PWIubGVuZ3RoKXt2YXIgbj1hLnN0YXRlO24uZGlzYWJsZShhLmNvbnRleHQuQkxFTkQpO24uYnVmZmVycy5jb2xvci5zZXRDbGVhcigxLDEsMSwxKTtuLmJ1ZmZlcnMuZGVwdGguc2V0VGVzdCghMCk7bi5zZXRTY2lzc29yVGVzdCghMSk7Zm9yKHZhciB1LHI9MCxJPWIubGVuZ3RoO3I8STtyKyspe3ZhciB2PWJbcl07dT12LnNoYWRvdzt2YXIgcD12JiZ2LmlzUG9pbnRMaWdodDtpZih2b2lkIDA9PT11KWNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMU2hhZG93TWFwOlwiLFxuICAgIHYsXCJoYXMgbm8gc2hhZG93LlwiKTtlbHNle3ZhciB6PXUuY2FtZXJhO2guY29weSh1Lm1hcFNpemUpO2gubWluKGspO2lmKHApe3ZhciB5PWgueCxKPWgueTt3WzBdLnNldCgyKnksSix5LEopO3dbMV0uc2V0KDAsSix5LEopO3dbMl0uc2V0KDMqeSxKLHksSik7d1szXS5zZXQoeSxKLHksSik7d1s0XS5zZXQoMyp5LDAseSxKKTt3WzVdLnNldCh5LDAseSxKKTtoLngqPTQ7aC55Kj0yfW51bGw9PT11Lm1hcCYmKHUubWFwPW5ldyBrYihoLngsaC55LHttaW5GaWx0ZXI6MTAwMyxtYWdGaWx0ZXI6MTAwMyxmb3JtYXQ6MTAyM30pLHUubWFwLnRleHR1cmUubmFtZT12Lm5hbWUrXCIuc2hhZG93TWFwXCIsei51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCkpO3UuaXNTcG90TGlnaHRTaGFkb3cmJnUudXBkYXRlKHYpO3k9dS5tYXA7Sj11Lm1hdHJpeDtxLnNldEZyb21NYXRyaXhQb3NpdGlvbih2Lm1hdHJpeFdvcmxkKTt6LnBvc2l0aW9uLmNvcHkocSk7cD8odT02LEoubWFrZVRyYW5zbGF0aW9uKC1xLngsXG4gICAgLXEueSwtcS56KSk6KHU9MSxtLnNldEZyb21NYXRyaXhQb3NpdGlvbih2LnRhcmdldC5tYXRyaXhXb3JsZCksei5sb29rQXQobSksei51cGRhdGVNYXRyaXhXb3JsZCgpLEouc2V0KC41LDAsMCwuNSwwLC41LDAsLjUsMCwwLC41LC41LDAsMCwwLDEpLEoubXVsdGlwbHkoei5wcm9qZWN0aW9uTWF0cml4KSxKLm11bHRpcGx5KHoubWF0cml4V29ybGRJbnZlcnNlKSk7YS5zZXRSZW5kZXJUYXJnZXQoeSk7YS5jbGVhcigpO2Zvcih2PTA7djx1O3YrKylwJiYobS5jb3B5KHoucG9zaXRpb24pLG0uYWRkKHRbdl0pLHoudXAuY29weShsW3ZdKSx6Lmxvb2tBdChtKSx6LnVwZGF0ZU1hdHJpeFdvcmxkKCksbi52aWV3cG9ydCh3W3ZdKSksZy5tdWx0aXBseU1hdHJpY2VzKHoucHJvamVjdGlvbk1hdHJpeCx6Lm1hdHJpeFdvcmxkSW52ZXJzZSksZi5zZXRGcm9tTWF0cml4KGcpLGUoYyxkLHoscCl9fUEubmVlZHNVcGRhdGU9ITF9fX1mdW5jdGlvbiBiZyhhKXt2YXIgYj17fTtyZXR1cm57Z2V0OmZ1bmN0aW9uKGEpe2EuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSYmXG4gICAgKGE9YS5kYXRhKTtyZXR1cm4gYlthLnV1aWRdfSxyZW1vdmU6ZnVuY3Rpb24oYyl7Yy5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlJiYoYz1jLmRhdGEpO3ZhciBkPWJbYy51dWlkXTtkJiYoYS5kZWxldGVCdWZmZXIoZC5idWZmZXIpLGRlbGV0ZSBiW2MudXVpZF0pfSx1cGRhdGU6ZnVuY3Rpb24oYyxkKXtjLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUmJihjPWMuZGF0YSk7dmFyIGU9YltjLnV1aWRdO2lmKHZvaWQgMD09PWUpe3ZhciBlPWMudXVpZCxmPWMuYXJyYXksZz1jLmR5bmFtaWM/YS5EWU5BTUlDX0RSQVc6YS5TVEFUSUNfRFJBVyxoPWEuY3JlYXRlQnVmZmVyKCk7YS5iaW5kQnVmZmVyKGQsaCk7YS5idWZmZXJEYXRhKGQsZixnKTtjLm9uVXBsb2FkQ2FsbGJhY2soKTtkPWEuRkxPQVQ7ZiBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheT9kPWEuRkxPQVQ6ZiBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheT9jb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTEF0dHJpYnV0ZXM6IFVuc3VwcG9ydGVkIGRhdGEgYnVmZmVyIGZvcm1hdDogRmxvYXQ2NEFycmF5LlwiKTpcbiAgICBmIGluc3RhbmNlb2YgVWludDE2QXJyYXk/ZD1hLlVOU0lHTkVEX1NIT1JUOmYgaW5zdGFuY2VvZiBJbnQxNkFycmF5P2Q9YS5TSE9SVDpmIGluc3RhbmNlb2YgVWludDMyQXJyYXk/ZD1hLlVOU0lHTkVEX0lOVDpmIGluc3RhbmNlb2YgSW50MzJBcnJheT9kPWEuSU5UOmYgaW5zdGFuY2VvZiBJbnQ4QXJyYXk/ZD1hLkJZVEU6ZiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkmJihkPWEuVU5TSUdORURfQllURSk7YltlXT17YnVmZmVyOmgsdHlwZTpkLGJ5dGVzUGVyRWxlbWVudDpmLkJZVEVTX1BFUl9FTEVNRU5ULHZlcnNpb246Yy52ZXJzaW9ufX1lbHNlIGUudmVyc2lvbjxjLnZlcnNpb24mJihmPWMsaD1mLmFycmF5LGc9Zi51cGRhdGVSYW5nZSxhLmJpbmRCdWZmZXIoZCxlLmJ1ZmZlciksITE9PT1mLmR5bmFtaWM/YS5idWZmZXJEYXRhKGQsaCxhLlNUQVRJQ19EUkFXKTotMT09PWcuY291bnQ/YS5idWZmZXJTdWJEYXRhKGQsMCxoKTowPT09Zy5jb3VudD9jb25zb2xlLmVycm9yKFwiVEhSRUUuV2ViR0xPYmplY3RzLnVwZGF0ZUJ1ZmZlcjogZHluYW1pYyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUgbWFya2VkIGFzIG5lZWRzVXBkYXRlIGJ1dCB1cGRhdGVSYW5nZS5jb3VudCBpcyAwLCBlbnN1cmUgeW91IGFyZSB1c2luZyBzZXQgbWV0aG9kcyBvciB1cGRhdGluZyBtYW51YWxseS5cIik6XG4gICAgKGEuYnVmZmVyU3ViRGF0YShkLGcub2Zmc2V0KmguQllURVNfUEVSX0VMRU1FTlQsaC5zdWJhcnJheShnLm9mZnNldCxnLm9mZnNldCtnLmNvdW50KSksZy5jb3VudD0tMSksZS52ZXJzaW9uPWMudmVyc2lvbil9fX1mdW5jdGlvbiBnYihhLGIsYyxkKXt0aGlzLl94PWF8fDA7dGhpcy5feT1ifHwwO3RoaXMuX3o9Y3x8MDt0aGlzLl9vcmRlcj1kfHxnYi5EZWZhdWx0T3JkZXJ9ZnVuY3Rpb24gV2QoKXt0aGlzLm1hc2s9MX1mdW5jdGlvbiB4KCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJpZFwiLHt2YWx1ZTpjZysrfSk7dGhpcy51dWlkPVEuZ2VuZXJhdGVVVUlEKCk7dGhpcy5uYW1lPVwiXCI7dGhpcy50eXBlPVwiT2JqZWN0M0RcIjt0aGlzLnBhcmVudD1udWxsO3RoaXMuY2hpbGRyZW49W107dGhpcy51cD14LkRlZmF1bHRVcC5jbG9uZSgpO3ZhciBhPW5ldyBwLGI9bmV3IGdiLGM9bmV3IGhhLGQ9bmV3IHAoMSwxLDEpO2Iub25DaGFuZ2UoZnVuY3Rpb24oKXtjLnNldEZyb21FdWxlcihiLFxuICAgICExKX0pO2Mub25DaGFuZ2UoZnVuY3Rpb24oKXtiLnNldEZyb21RdWF0ZXJuaW9uKGMsdm9pZCAwLCExKX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMse3Bvc2l0aW9uOntlbnVtZXJhYmxlOiEwLHZhbHVlOmF9LHJvdGF0aW9uOntlbnVtZXJhYmxlOiEwLHZhbHVlOmJ9LHF1YXRlcm5pb246e2VudW1lcmFibGU6ITAsdmFsdWU6Y30sc2NhbGU6e2VudW1lcmFibGU6ITAsdmFsdWU6ZH0sbW9kZWxWaWV3TWF0cml4Ont2YWx1ZTpuZXcgT30sbm9ybWFsTWF0cml4Ont2YWx1ZTpuZXcgbWF9fSk7dGhpcy5tYXRyaXg9bmV3IE87dGhpcy5tYXRyaXhXb3JsZD1uZXcgTzt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9eC5EZWZhdWx0TWF0cml4QXV0b1VwZGF0ZTt0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU9ITE7dGhpcy5sYXllcnM9bmV3IFdkO3RoaXMudmlzaWJsZT0hMDt0aGlzLnJlY2VpdmVTaGFkb3c9dGhpcy5jYXN0U2hhZG93PSExO3RoaXMuZnJ1c3R1bUN1bGxlZD0hMDt0aGlzLnJlbmRlck9yZGVyPVxuICAgIDA7dGhpcy51c2VyRGF0YT17fX1mdW5jdGlvbiBUYSgpe3guY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJDYW1lcmFcIjt0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZT1uZXcgTzt0aGlzLnByb2plY3Rpb25NYXRyaXg9bmV3IE99ZnVuY3Rpb24gTGIoYSxiLGMsZCxlLGYpe1RhLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiT3J0aG9ncmFwaGljQ2FtZXJhXCI7dGhpcy56b29tPTE7dGhpcy52aWV3PW51bGw7dGhpcy5sZWZ0PWE7dGhpcy5yaWdodD1iO3RoaXMudG9wPWM7dGhpcy5ib3R0b209ZDt0aGlzLm5lYXI9dm9pZCAwIT09ZT9lOi4xO3RoaXMuZmFyPXZvaWQgMCE9PWY/ZjoyRTM7dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCl9ZnVuY3Rpb24gWWEoYSxiLGMsZCxlLGYpe3RoaXMuYT1hO3RoaXMuYj1iO3RoaXMuYz1jO3RoaXMubm9ybWFsPWQmJmQuaXNWZWN0b3IzP2Q6bmV3IHA7dGhpcy52ZXJ0ZXhOb3JtYWxzPUFycmF5LmlzQXJyYXkoZCk/ZDpbXTt0aGlzLmNvbG9yPWUmJmUuaXNDb2xvcj9cbiAgICBlOm5ldyBIO3RoaXMudmVydGV4Q29sb3JzPUFycmF5LmlzQXJyYXkoZSk/ZTpbXTt0aGlzLm1hdGVyaWFsSW5kZXg9dm9pZCAwIT09Zj9mOjB9ZnVuY3Rpb24gTCgpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaWRcIix7dmFsdWU6ZGcrPTJ9KTt0aGlzLnV1aWQ9US5nZW5lcmF0ZVVVSUQoKTt0aGlzLm5hbWU9XCJcIjt0aGlzLnR5cGU9XCJHZW9tZXRyeVwiO3RoaXMudmVydGljZXM9W107dGhpcy5jb2xvcnM9W107dGhpcy5mYWNlcz1bXTt0aGlzLmZhY2VWZXJ0ZXhVdnM9W1tdXTt0aGlzLm1vcnBoVGFyZ2V0cz1bXTt0aGlzLm1vcnBoTm9ybWFscz1bXTt0aGlzLnNraW5XZWlnaHRzPVtdO3RoaXMuc2tpbkluZGljZXM9W107dGhpcy5saW5lRGlzdGFuY2VzPVtdO3RoaXMuYm91bmRpbmdTcGhlcmU9dGhpcy5ib3VuZGluZ0JveD1udWxsO3RoaXMuZ3JvdXBzTmVlZFVwZGF0ZT10aGlzLmxpbmVEaXN0YW5jZXNOZWVkVXBkYXRlPXRoaXMuY29sb3JzTmVlZFVwZGF0ZT10aGlzLm5vcm1hbHNOZWVkVXBkYXRlPVxuICAgIHRoaXMudXZzTmVlZFVwZGF0ZT10aGlzLnZlcnRpY2VzTmVlZFVwZGF0ZT10aGlzLmVsZW1lbnRzTmVlZFVwZGF0ZT0hMX1mdW5jdGlvbiBNKGEsYixjKXtpZihBcnJheS5pc0FycmF5KGEpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUSFJFRS5CdWZmZXJBdHRyaWJ1dGU6IGFycmF5IHNob3VsZCBiZSBhIFR5cGVkIEFycmF5LlwiKTt0aGlzLnV1aWQ9US5nZW5lcmF0ZVVVSUQoKTt0aGlzLm5hbWU9XCJcIjt0aGlzLmFycmF5PWE7dGhpcy5pdGVtU2l6ZT1iO3RoaXMuY291bnQ9dm9pZCAwIT09YT9hLmxlbmd0aC9iOjA7dGhpcy5ub3JtYWxpemVkPSEwPT09Yzt0aGlzLmR5bmFtaWM9ITE7dGhpcy51cGRhdGVSYW5nZT17b2Zmc2V0OjAsY291bnQ6LTF9O3RoaXMub25VcGxvYWRDYWxsYmFjaz1mdW5jdGlvbigpe307dGhpcy52ZXJzaW9uPTB9ZnVuY3Rpb24gdWMoYSxiLGMpe00uY2FsbCh0aGlzLG5ldyBJbnQ4QXJyYXkoYSksYixjKX1mdW5jdGlvbiB2YyhhLGIsYyl7TS5jYWxsKHRoaXMsbmV3IFVpbnQ4QXJyYXkoYSksXG4gICAgYixjKX1mdW5jdGlvbiB3YyhhLGIsYyl7TS5jYWxsKHRoaXMsbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGEpLGIsYyl9ZnVuY3Rpb24geGMoYSxiLGMpe00uY2FsbCh0aGlzLG5ldyBJbnQxNkFycmF5KGEpLGIsYyl9ZnVuY3Rpb24gb2IoYSxiLGMpe00uY2FsbCh0aGlzLG5ldyBVaW50MTZBcnJheShhKSxiLGMpfWZ1bmN0aW9uIHljKGEsYixjKXtNLmNhbGwodGhpcyxuZXcgSW50MzJBcnJheShhKSxiLGMpfWZ1bmN0aW9uIHBiKGEsYixjKXtNLmNhbGwodGhpcyxuZXcgVWludDMyQXJyYXkoYSksYixjKX1mdW5jdGlvbiBCKGEsYixjKXtNLmNhbGwodGhpcyxuZXcgRmxvYXQzMkFycmF5KGEpLGIsYyl9ZnVuY3Rpb24gemMoYSxiLGMpe00uY2FsbCh0aGlzLG5ldyBGbG9hdDY0QXJyYXkoYSksYixjKX1mdW5jdGlvbiBWZSgpe3RoaXMuaW5kaWNlcz1bXTt0aGlzLnZlcnRpY2VzPVtdO3RoaXMubm9ybWFscz1bXTt0aGlzLmNvbG9ycz1bXTt0aGlzLnV2cz1bXTt0aGlzLnV2czI9W107dGhpcy5ncm91cHM9XG4gICAgW107dGhpcy5tb3JwaFRhcmdldHM9e307dGhpcy5za2luV2VpZ2h0cz1bXTt0aGlzLnNraW5JbmRpY2VzPVtdO3RoaXMuYm91bmRpbmdTcGhlcmU9dGhpcy5ib3VuZGluZ0JveD1udWxsO3RoaXMuZ3JvdXBzTmVlZFVwZGF0ZT10aGlzLnV2c05lZWRVcGRhdGU9dGhpcy5jb2xvcnNOZWVkVXBkYXRlPXRoaXMubm9ybWFsc05lZWRVcGRhdGU9dGhpcy52ZXJ0aWNlc05lZWRVcGRhdGU9ITF9ZnVuY3Rpb24gWGQoYSl7aWYoMD09PWEubGVuZ3RoKXJldHVybi1JbmZpbml0eTtmb3IodmFyIGI9YVswXSxjPTEsZD1hLmxlbmd0aDtjPGQ7KytjKWFbY10+YiYmKGI9YVtjXSk7cmV0dXJuIGJ9ZnVuY3Rpb24gRSgpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaWRcIix7dmFsdWU6ZWcrPTJ9KTt0aGlzLnV1aWQ9US5nZW5lcmF0ZVVVSUQoKTt0aGlzLm5hbWU9XCJcIjt0aGlzLnR5cGU9XCJCdWZmZXJHZW9tZXRyeVwiO3RoaXMuaW5kZXg9bnVsbDt0aGlzLmF0dHJpYnV0ZXM9e307dGhpcy5tb3JwaEF0dHJpYnV0ZXM9XG4gICAge307dGhpcy5ncm91cHM9W107dGhpcy5ib3VuZGluZ1NwaGVyZT10aGlzLmJvdW5kaW5nQm94PW51bGw7dGhpcy5kcmF3UmFuZ2U9e3N0YXJ0OjAsY291bnQ6SW5maW5pdHl9fWZ1bmN0aW9uIE1iKGEsYixjLGQsZSxmKXtMLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiQm94R2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3dpZHRoOmEsaGVpZ2h0OmIsZGVwdGg6Yyx3aWR0aFNlZ21lbnRzOmQsaGVpZ2h0U2VnbWVudHM6ZSxkZXB0aFNlZ21lbnRzOmZ9O3RoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyBxYihhLGIsYyxkLGUsZikpO3RoaXMubWVyZ2VWZXJ0aWNlcygpfWZ1bmN0aW9uIHFiKGEsYixjLGQsZSxmKXtmdW5jdGlvbiBnKGEsYixjLGQsZSxmLGcsbCxIYSxEYSxuYSl7dmFyIHQ9Zi9IYSx2PWcvRGEsST1mLzIsQT1nLzIsdz1sLzI7Zz1IYSsxO3ZhciB6PURhKzEseT1mPTAsSix4LEI9bmV3IHA7Zm9yKHg9MDt4PHo7eCsrKXt2YXIgRD14KnYtQTtmb3IoSj0wO0o8ZztKKyspQlthXT1cbiAgICAoSip0LUkpKmQsQltiXT1EKmUsQltjXT13LG0ucHVzaChCLngsQi55LEIueiksQlthXT0wLEJbYl09MCxCW2NdPTA8bD8xOi0xLHEucHVzaChCLngsQi55LEIueiksbi5wdXNoKEovSGEpLG4ucHVzaCgxLXgvRGEpLGYrPTF9Zm9yKHg9MDt4PERhO3grKylmb3IoSj0wO0o8SGE7SisrKWE9dStKK2cqKHgrMSksYj11KyhKKzEpK2cqKHgrMSksYz11KyhKKzEpK2cqeCxrLnB1c2godStKK2cqeCxhLGMpLGsucHVzaChhLGIsYykseSs9NjtoLmFkZEdyb3VwKHIseSxuYSk7cis9eTt1Kz1mfUUuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJCb3hCdWZmZXJHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17d2lkdGg6YSxoZWlnaHQ6YixkZXB0aDpjLHdpZHRoU2VnbWVudHM6ZCxoZWlnaHRTZWdtZW50czplLGRlcHRoU2VnbWVudHM6Zn07dmFyIGg9dGhpczthPWF8fDE7Yj1ifHwxO2M9Y3x8MTtkPU1hdGguZmxvb3IoZCl8fDE7ZT1NYXRoLmZsb29yKGUpfHwxO2Y9TWF0aC5mbG9vcihmKXx8MTt2YXIgaz1cbiAgICBbXSxtPVtdLHE9W10sbj1bXSx1PTAscj0wO2coXCJ6XCIsXCJ5XCIsXCJ4XCIsLTEsLTEsYyxiLGEsZixlLDApO2coXCJ6XCIsXCJ5XCIsXCJ4XCIsMSwtMSxjLGIsLWEsZixlLDEpO2coXCJ4XCIsXCJ6XCIsXCJ5XCIsMSwxLGEsYyxiLGQsZiwyKTtnKFwieFwiLFwielwiLFwieVwiLDEsLTEsYSxjLC1iLGQsZiwzKTtnKFwieFwiLFwieVwiLFwielwiLDEsLTEsYSxiLGMsZCxlLDQpO2coXCJ4XCIsXCJ5XCIsXCJ6XCIsLTEsLTEsYSxiLC1jLGQsZSw1KTt0aGlzLnNldEluZGV4KGspO3RoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihtLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcIm5vcm1hbFwiLG5ldyBCKHEsMykpO3RoaXMuYWRkQXR0cmlidXRlKFwidXZcIixuZXcgQihuLDIpKX1mdW5jdGlvbiBBYyhhLGIsYyxkKXtMLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiUGxhbmVHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17d2lkdGg6YSxoZWlnaHQ6Yix3aWR0aFNlZ21lbnRzOmMsaGVpZ2h0U2VnbWVudHM6ZH07dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IHJiKGEsXG4gICAgYixjLGQpKTt0aGlzLm1lcmdlVmVydGljZXMoKX1mdW5jdGlvbiByYihhLGIsYyxkKXtFLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiUGxhbmVCdWZmZXJHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17d2lkdGg6YSxoZWlnaHQ6Yix3aWR0aFNlZ21lbnRzOmMsaGVpZ2h0U2VnbWVudHM6ZH07YT1hfHwxO2I9Ynx8MTt2YXIgZT1hLzIsZj1iLzI7Yz1NYXRoLmZsb29yKGMpfHwxO2Q9TWF0aC5mbG9vcihkKXx8MTt2YXIgZz1jKzEsaD1kKzEsaz1hL2MsbT1iL2QscT1bXSxuPVtdLHU9W10scj1bXTtmb3IoYT0wO2E8aDthKyspe3ZhciB0PWEqbS1mO2ZvcihiPTA7YjxnO2IrKyluLnB1c2goYiprLWUsLXQsMCksdS5wdXNoKDAsMCwxKSxyLnB1c2goYi9jKSxyLnB1c2goMS1hL2QpfWZvcihhPTA7YTxkO2ErKylmb3IoYj0wO2I8YztiKyspZT1iK2cqKGErMSksZj1iKzErZyooYSsxKSxoPWIrMStnKmEscS5wdXNoKGIrZyphLGUsaCkscS5wdXNoKGUsZixoKTt0aGlzLnNldEluZGV4KHEpO3RoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixcbiAgICBuZXcgQihuLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcIm5vcm1hbFwiLG5ldyBCKHUsMykpO3RoaXMuYWRkQXR0cmlidXRlKFwidXZcIixuZXcgQihyLDIpKX1mdW5jdGlvbiBBYShhKXtQLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiTWVzaEJhc2ljTWF0ZXJpYWxcIjt0aGlzLmNvbG9yPW5ldyBIKDE2Nzc3MjE1KTt0aGlzLmxpZ2h0TWFwPXRoaXMubWFwPW51bGw7dGhpcy5saWdodE1hcEludGVuc2l0eT0xO3RoaXMuYW9NYXA9bnVsbDt0aGlzLmFvTWFwSW50ZW5zaXR5PTE7dGhpcy5lbnZNYXA9dGhpcy5hbHBoYU1hcD10aGlzLnNwZWN1bGFyTWFwPW51bGw7dGhpcy5jb21iaW5lPTA7dGhpcy5yZWZsZWN0aXZpdHk9MTt0aGlzLnJlZnJhY3Rpb25SYXRpbz0uOTg7dGhpcy53aXJlZnJhbWU9ITE7dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg9MTt0aGlzLndpcmVmcmFtZUxpbmVqb2luPXRoaXMud2lyZWZyYW1lTGluZWNhcD1cInJvdW5kXCI7dGhpcy5saWdodHM9dGhpcy5tb3JwaFRhcmdldHM9dGhpcy5za2lubmluZz1cbiAgICAhMTt0aGlzLnNldFZhbHVlcyhhKX1mdW5jdGlvbiBGYShhKXtQLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiU2hhZGVyTWF0ZXJpYWxcIjt0aGlzLmRlZmluZXM9e307dGhpcy51bmlmb3Jtcz17fTt0aGlzLnZlcnRleFNoYWRlcj1cInZvaWQgbWFpbigpIHtcXG5cXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XFxufVwiO3RoaXMuZnJhZ21lbnRTaGFkZXI9XCJ2b2lkIG1haW4oKSB7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggMS4wLCAwLjAsIDAuMCwgMS4wICk7XFxufVwiO3RoaXMubGluZXdpZHRoPTE7dGhpcy53aXJlZnJhbWU9ITE7dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg9MTt0aGlzLm1vcnBoTm9ybWFscz10aGlzLm1vcnBoVGFyZ2V0cz10aGlzLnNraW5uaW5nPXRoaXMuY2xpcHBpbmc9dGhpcy5saWdodHM9dGhpcy5mb2c9ITE7dGhpcy5leHRlbnNpb25zPXtkZXJpdmF0aXZlczohMSxmcmFnRGVwdGg6ITEsXG4gICAgZHJhd0J1ZmZlcnM6ITEsc2hhZGVyVGV4dHVyZUxPRDohMX07dGhpcy5kZWZhdWx0QXR0cmlidXRlVmFsdWVzPXtjb2xvcjpbMSwxLDFdLHV2OlswLDBdLHV2MjpbMCwwXX07dGhpcy5pbmRleDBBdHRyaWJ1dGVOYW1lPXZvaWQgMDt2b2lkIDAhPT1hJiYodm9pZCAwIT09YS5hdHRyaWJ1dGVzJiZjb25zb2xlLmVycm9yKFwiVEhSRUUuU2hhZGVyTWF0ZXJpYWw6IGF0dHJpYnV0ZXMgc2hvdWxkIG5vdyBiZSBkZWZpbmVkIGluIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IGluc3RlYWQuXCIpLHRoaXMuc2V0VmFsdWVzKGEpKX1mdW5jdGlvbiBzYihhLGIpe3RoaXMub3JpZ2luPXZvaWQgMCE9PWE/YTpuZXcgcDt0aGlzLmRpcmVjdGlvbj12b2lkIDAhPT1iP2I6bmV3IHB9ZnVuY3Rpb24gTmIoYSxiKXt0aGlzLnN0YXJ0PXZvaWQgMCE9PWE/YTpuZXcgcDt0aGlzLmVuZD12b2lkIDAhPT1iP2I6bmV3IHB9ZnVuY3Rpb24gWmEoYSxiLGMpe3RoaXMuYT12b2lkIDAhPT1hP2E6bmV3IHA7dGhpcy5iPXZvaWQgMCE9PVxuICAgIGI/YjpuZXcgcDt0aGlzLmM9dm9pZCAwIT09Yz9jOm5ldyBwfWZ1bmN0aW9uIHJhKGEsYil7eC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIk1lc2hcIjt0aGlzLmdlb21ldHJ5PXZvaWQgMCE9PWE/YTpuZXcgRTt0aGlzLm1hdGVyaWFsPXZvaWQgMCE9PWI/YjpuZXcgQWEoe2NvbG9yOjE2Nzc3MjE1Kk1hdGgucmFuZG9tKCl9KTt0aGlzLmRyYXdNb2RlPTA7dGhpcy51cGRhdGVNb3JwaFRhcmdldHMoKX1mdW5jdGlvbiBmZyhhLGIsYyxkKXtmdW5jdGlvbiBlKGEsYyl7Yi5idWZmZXJzLmNvbG9yLnNldENsZWFyKGEucixhLmcsYS5iLGMsZCl9dmFyIGY9bmV3IEgoMCksZz0wLGgsayxtO3JldHVybntnZXRDbGVhckNvbG9yOmZ1bmN0aW9uKCl7cmV0dXJuIGZ9LHNldENsZWFyQ29sb3I6ZnVuY3Rpb24oYSxiKXtmLnNldChhKTtnPXZvaWQgMCE9PWI/YjoxO2UoZixnKX0sZ2V0Q2xlYXJBbHBoYTpmdW5jdGlvbigpe3JldHVybiBnfSxzZXRDbGVhckFscGhhOmZ1bmN0aW9uKGEpe2c9YTtlKGYsXG4gICAgZyl9LHJlbmRlcjpmdW5jdGlvbihiLGQsdSxyKXtkPWQuYmFja2dyb3VuZDtudWxsPT09ZD9lKGYsZyk6ZCYmZC5pc0NvbG9yJiYoZShkLDEpLHI9ITApOyhhLmF1dG9DbGVhcnx8cikmJmEuY2xlYXIoYS5hdXRvQ2xlYXJDb2xvcixhLmF1dG9DbGVhckRlcHRoLGEuYXV0b0NsZWFyU3RlbmNpbCk7ZCYmZC5pc0N1YmVUZXh0dXJlPyh2b2lkIDA9PT1tJiYobT1uZXcgcmEobmV3IHFiKDEsMSwxKSxuZXcgRmEoe3VuaWZvcm1zOnRiLmN1YmUudW5pZm9ybXMsdmVydGV4U2hhZGVyOnRiLmN1YmUudmVydGV4U2hhZGVyLGZyYWdtZW50U2hhZGVyOnRiLmN1YmUuZnJhZ21lbnRTaGFkZXIsc2lkZToxLGRlcHRoVGVzdDohMCxkZXB0aFdyaXRlOiExLGZvZzohMX0pKSxtLmdlb21ldHJ5LnJlbW92ZUF0dHJpYnV0ZShcIm5vcm1hbFwiKSxtLmdlb21ldHJ5LnJlbW92ZUF0dHJpYnV0ZShcInV2XCIpLG0ub25CZWZvcmVSZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe3RoaXMubWF0cml4V29ybGQuY29weVBvc2l0aW9uKGMubWF0cml4V29ybGQpfSxcbiAgICBjLnVwZGF0ZShtLmdlb21ldHJ5KSksbS5tYXRlcmlhbC51bmlmb3Jtcy50Q3ViZS52YWx1ZT1kLGIucHVzaChtLG0uZ2VvbWV0cnksbS5tYXRlcmlhbCwwLG51bGwpKTpkJiZkLmlzVGV4dHVyZSYmKHZvaWQgMD09PWgmJihoPW5ldyBMYigtMSwxLDEsLTEsMCwxKSxrPW5ldyByYShuZXcgcmIoMiwyKSxuZXcgQWEoe2RlcHRoVGVzdDohMSxkZXB0aFdyaXRlOiExLGZvZzohMX0pKSxjLnVwZGF0ZShrLmdlb21ldHJ5KSksay5tYXRlcmlhbC5tYXA9ZCxhLnJlbmRlckJ1ZmZlckRpcmVjdChoLG51bGwsay5nZW9tZXRyeSxrLm1hdGVyaWFsLGssbnVsbCkpfX19ZnVuY3Rpb24gZ2coYSxiKXtyZXR1cm4gYS5yZW5kZXJPcmRlciE9PWIucmVuZGVyT3JkZXI/YS5yZW5kZXJPcmRlci1iLnJlbmRlck9yZGVyOmEucHJvZ3JhbSYmYi5wcm9ncmFtJiZhLnByb2dyYW0hPT1iLnByb2dyYW0/YS5wcm9ncmFtLmlkLWIucHJvZ3JhbS5pZDphLm1hdGVyaWFsLmlkIT09Yi5tYXRlcmlhbC5pZD9hLm1hdGVyaWFsLmlkLVxuICAgIGIubWF0ZXJpYWwuaWQ6YS56IT09Yi56P2Euei1iLno6YS5pZC1iLmlkfWZ1bmN0aW9uIGhnKGEsYil7cmV0dXJuIGEucmVuZGVyT3JkZXIhPT1iLnJlbmRlck9yZGVyP2EucmVuZGVyT3JkZXItYi5yZW5kZXJPcmRlcjphLnohPT1iLno/Yi56LWEuejphLmlkLWIuaWR9ZnVuY3Rpb24gaWcoKXt2YXIgYT1bXSxiPTAsYz1bXSxkPVtdO3JldHVybntvcGFxdWU6Yyx0cmFuc3BhcmVudDpkLGluaXQ6ZnVuY3Rpb24oKXtiPTA7Yy5sZW5ndGg9MDtkLmxlbmd0aD0wfSxwdXNoOmZ1bmN0aW9uKGUsZixnLGgsayl7dmFyIG09YVtiXTt2b2lkIDA9PT1tPyhtPXtpZDplLmlkLG9iamVjdDplLGdlb21ldHJ5OmYsbWF0ZXJpYWw6Zyxwcm9ncmFtOmcucHJvZ3JhbSxyZW5kZXJPcmRlcjplLnJlbmRlck9yZGVyLHo6aCxncm91cDprfSxhW2JdPW0pOihtLmlkPWUuaWQsbS5vYmplY3Q9ZSxtLmdlb21ldHJ5PWYsbS5tYXRlcmlhbD1nLG0ucHJvZ3JhbT1nLnByb2dyYW0sbS5yZW5kZXJPcmRlcj1lLnJlbmRlck9yZGVyLFxuICAgIG0uej1oLG0uZ3JvdXA9ayk7KCEwPT09Zy50cmFuc3BhcmVudD9kOmMpLnB1c2gobSk7YisrfSxzb3J0OmZ1bmN0aW9uKCl7MTxjLmxlbmd0aCYmYy5zb3J0KGdnKTsxPGQubGVuZ3RoJiZkLnNvcnQoaGcpfX19ZnVuY3Rpb24gamcoKXt2YXIgYT17fTtyZXR1cm57Z2V0OmZ1bmN0aW9uKGIsYyl7Yj1iLmlkK1wiLFwiK2MuaWQ7Yz1hW2JdO3ZvaWQgMD09PWMmJihjPW5ldyBpZyxhW2JdPWMpO3JldHVybiBjfSxkaXNwb3NlOmZ1bmN0aW9uKCl7YT17fX19fWZ1bmN0aW9uIGtnKGEsYil7cmV0dXJuIE1hdGguYWJzKGJbMV0pLU1hdGguYWJzKGFbMV0pfWZ1bmN0aW9uIGxnKGEpe3ZhciBiPXt9LGM9bmV3IEZsb2F0MzJBcnJheSg4KTtyZXR1cm57dXBkYXRlOmZ1bmN0aW9uKGQsZSxmLGcpe3ZhciBoPWQubW9ycGhUYXJnZXRJbmZsdWVuY2VzLGs9aC5sZW5ndGg7ZD1iW2UuaWRdO2lmKHZvaWQgMD09PWQpe2Q9W107Zm9yKHZhciBtPTA7bTxrO20rKylkW21dPVttLDBdO2JbZS5pZF09ZH12YXIgcT1cbiAgICBmLm1vcnBoVGFyZ2V0cyYmZS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb247Zj1mLm1vcnBoTm9ybWFscyYmZS5tb3JwaEF0dHJpYnV0ZXMubm9ybWFsO2ZvcihtPTA7bTxrO20rKyl7dmFyIG49ZFttXTswIT09blsxXSYmKHEmJmUucmVtb3ZlQXR0cmlidXRlKFwibW9ycGhUYXJnZXRcIittKSxmJiZlLnJlbW92ZUF0dHJpYnV0ZShcIm1vcnBoTm9ybWFsXCIrbSkpfWZvcihtPTA7bTxrO20rKyluPWRbbV0sblswXT1tLG5bMV09aFttXTtkLnNvcnQoa2cpO2ZvcihtPTA7OD5tO20rKyl7aWYobj1kW21dKWlmKGg9blswXSxuPW5bMV0pe3EmJmUuYWRkQXR0cmlidXRlKFwibW9ycGhUYXJnZXRcIittLHFbaF0pO2YmJmUuYWRkQXR0cmlidXRlKFwibW9ycGhOb3JtYWxcIittLGZbaF0pO2NbbV09bjtjb250aW51ZX1jW21dPTB9Zy5nZXRVbmlmb3JtcygpLnNldFZhbHVlKGEsXCJtb3JwaFRhcmdldEluZmx1ZW5jZXNcIixjKX19fWZ1bmN0aW9uIG1nKGEsYixjKXt2YXIgZCxlLGY7dGhpcy5zZXRNb2RlPWZ1bmN0aW9uKGEpe2Q9XG4gICAgYX07dGhpcy5zZXRJbmRleD1mdW5jdGlvbihhKXtlPWEudHlwZTtmPWEuYnl0ZXNQZXJFbGVtZW50fTt0aGlzLnJlbmRlcj1mdW5jdGlvbihiLGgpe2EuZHJhd0VsZW1lbnRzKGQsaCxlLGIqZik7Yy5jYWxscysrO2MudmVydGljZXMrPWg7ZD09PWEuVFJJQU5HTEVTP2MuZmFjZXMrPWgvMzpkPT09YS5QT0lOVFMmJihjLnBvaW50cys9aCl9O3RoaXMucmVuZGVySW5zdGFuY2VzPWZ1bmN0aW9uKGcsaCxrKXt2YXIgbT1iLmdldChcIkFOR0xFX2luc3RhbmNlZF9hcnJheXNcIik7bnVsbD09PW0/Y29uc29sZS5lcnJvcihcIlRIUkVFLldlYkdMSW5kZXhlZEJ1ZmZlclJlbmRlcmVyOiB1c2luZyBUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSBidXQgaGFyZHdhcmUgZG9lcyBub3Qgc3VwcG9ydCBleHRlbnNpb24gQU5HTEVfaW5zdGFuY2VkX2FycmF5cy5cIik6KG0uZHJhd0VsZW1lbnRzSW5zdGFuY2VkQU5HTEUoZCxrLGUsaCpmLGcubWF4SW5zdGFuY2VkQ291bnQpLGMuY2FsbHMrKyxjLnZlcnRpY2VzKz1cbiAgICBrKmcubWF4SW5zdGFuY2VkQ291bnQsZD09PWEuVFJJQU5HTEVTP2MuZmFjZXMrPWcubWF4SW5zdGFuY2VkQ291bnQqay8zOmQ9PT1hLlBPSU5UUyYmKGMucG9pbnRzKz1nLm1heEluc3RhbmNlZENvdW50KmspKX19ZnVuY3Rpb24gbmcoYSxiLGMpe3ZhciBkO3RoaXMuc2V0TW9kZT1mdW5jdGlvbihhKXtkPWF9O3RoaXMucmVuZGVyPWZ1bmN0aW9uKGIsZil7YS5kcmF3QXJyYXlzKGQsYixmKTtjLmNhbGxzKys7Yy52ZXJ0aWNlcys9ZjtkPT09YS5UUklBTkdMRVM/Yy5mYWNlcys9Zi8zOmQ9PT1hLlBPSU5UUyYmKGMucG9pbnRzKz1mKX07dGhpcy5yZW5kZXJJbnN0YW5jZXM9ZnVuY3Rpb24oZSxmLGcpe3ZhciBoPWIuZ2V0KFwiQU5HTEVfaW5zdGFuY2VkX2FycmF5c1wiKTtpZihudWxsPT09aCljb25zb2xlLmVycm9yKFwiVEhSRUUuV2ViR0xCdWZmZXJSZW5kZXJlcjogdXNpbmcgVEhSRUUuSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgYnV0IGhhcmR3YXJlIGRvZXMgbm90IHN1cHBvcnQgZXh0ZW5zaW9uIEFOR0xFX2luc3RhbmNlZF9hcnJheXMuXCIpO1xuICAgIGVsc2V7dmFyIGs9ZS5hdHRyaWJ1dGVzLnBvc2l0aW9uO2suaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZT8oZz1rLmRhdGEuY291bnQsaC5kcmF3QXJyYXlzSW5zdGFuY2VkQU5HTEUoZCwwLGcsZS5tYXhJbnN0YW5jZWRDb3VudCkpOmguZHJhd0FycmF5c0luc3RhbmNlZEFOR0xFKGQsZixnLGUubWF4SW5zdGFuY2VkQ291bnQpO2MuY2FsbHMrKztjLnZlcnRpY2VzKz1nKmUubWF4SW5zdGFuY2VkQ291bnQ7ZD09PWEuVFJJQU5HTEVTP2MuZmFjZXMrPWUubWF4SW5zdGFuY2VkQ291bnQqZy8zOmQ9PT1hLlBPSU5UUyYmKGMucG9pbnRzKz1lLm1heEluc3RhbmNlZENvdW50KmcpfX19ZnVuY3Rpb24gb2coYSxiLGMpe2Z1bmN0aW9uIGQoYSl7YT1hLnRhcmdldDt2YXIgaD1lW2EuaWRdO251bGwhPT1oLmluZGV4JiZiLnJlbW92ZShoLmluZGV4KTtmb3IodmFyIGcgaW4gaC5hdHRyaWJ1dGVzKWIucmVtb3ZlKGguYXR0cmlidXRlc1tnXSk7YS5yZW1vdmVFdmVudExpc3RlbmVyKFwiZGlzcG9zZVwiLFxuICAgIGQpO2RlbGV0ZSBlW2EuaWRdO2lmKGc9ZlthLmlkXSliLnJlbW92ZShnKSxkZWxldGUgZlthLmlkXTtpZihnPWZbaC5pZF0pYi5yZW1vdmUoZyksZGVsZXRlIGZbaC5pZF07Yy5nZW9tZXRyaWVzLS19dmFyIGU9e30sZj17fTtyZXR1cm57Z2V0OmZ1bmN0aW9uKGEsYil7dmFyIGY9ZVtiLmlkXTtpZihmKXJldHVybiBmO2IuYWRkRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIixkKTtiLmlzQnVmZmVyR2VvbWV0cnk/Zj1iOmIuaXNHZW9tZXRyeSYmKHZvaWQgMD09PWIuX2J1ZmZlckdlb21ldHJ5JiYoYi5fYnVmZmVyR2VvbWV0cnk9KG5ldyBFKS5zZXRGcm9tT2JqZWN0KGEpKSxmPWIuX2J1ZmZlckdlb21ldHJ5KTtlW2IuaWRdPWY7Yy5nZW9tZXRyaWVzKys7cmV0dXJuIGZ9LHVwZGF0ZTpmdW5jdGlvbihjKXt2YXIgZD1jLmluZGV4LGU9Yy5hdHRyaWJ1dGVzO251bGwhPT1kJiZiLnVwZGF0ZShkLGEuRUxFTUVOVF9BUlJBWV9CVUZGRVIpO2Zvcih2YXIgZiBpbiBlKWIudXBkYXRlKGVbZl0sXG4gICAgYS5BUlJBWV9CVUZGRVIpO2M9Yy5tb3JwaEF0dHJpYnV0ZXM7Zm9yKGYgaW4gYylmb3IodmFyIGQ9Y1tmXSxlPTAsZz1kLmxlbmd0aDtlPGc7ZSsrKWIudXBkYXRlKGRbZV0sYS5BUlJBWV9CVUZGRVIpfSxnZXRXaXJlZnJhbWVBdHRyaWJ1dGU6ZnVuY3Rpb24oYyl7dmFyIGQ9ZltjLmlkXTtpZihkKXJldHVybiBkO2Q9W107dmFyIGU9Yy5pbmRleDt2YXIgZz1jLmF0dHJpYnV0ZXM7aWYobnVsbCE9PWUpe3ZhciBxPWUuYXJyYXk7Zm9yKHZhciBuPTAsdT1xLmxlbmd0aDtuPHU7bis9Myl7dmFyIHI9cVtuKzBdO2c9cVtuKzFdO2U9cVtuKzJdO2QucHVzaChyLGcsZyxlLGUscil9fWVsc2UgZm9yKHE9Zy5wb3NpdGlvbi5hcnJheSxuPTAsdT1xLmxlbmd0aC8zLTE7bjx1O24rPTMpcj1uKzAsZz1uKzEsZT1uKzIsZC5wdXNoKHIsZyxnLGUsZSxyKTtkPW5ldyAoNjU1MzU8WGQoZCk/cGI6b2IpKGQsMSk7Yi51cGRhdGUoZCxhLkVMRU1FTlRfQVJSQVlfQlVGRkVSKTtyZXR1cm4gZltjLmlkXT1cbiAgICBkfX19ZnVuY3Rpb24gcGcoKXt2YXIgYT17fTtyZXR1cm57Z2V0OmZ1bmN0aW9uKGIpe2lmKHZvaWQgMCE9PWFbYi5pZF0pcmV0dXJuIGFbYi5pZF07c3dpdGNoKGIudHlwZSl7Y2FzZSBcIkRpcmVjdGlvbmFsTGlnaHRcIjp2YXIgYz17ZGlyZWN0aW9uOm5ldyBwLGNvbG9yOm5ldyBILHNoYWRvdzohMSxzaGFkb3dCaWFzOjAsc2hhZG93UmFkaXVzOjEsc2hhZG93TWFwU2l6ZTpuZXcgRH07YnJlYWs7Y2FzZSBcIlNwb3RMaWdodFwiOmM9e3Bvc2l0aW9uOm5ldyBwLGRpcmVjdGlvbjpuZXcgcCxjb2xvcjpuZXcgSCxkaXN0YW5jZTowLGNvbmVDb3M6MCxwZW51bWJyYUNvczowLGRlY2F5OjAsc2hhZG93OiExLHNoYWRvd0JpYXM6MCxzaGFkb3dSYWRpdXM6MSxzaGFkb3dNYXBTaXplOm5ldyBEfTticmVhaztjYXNlIFwiUG9pbnRMaWdodFwiOmM9e3Bvc2l0aW9uOm5ldyBwLGNvbG9yOm5ldyBILGRpc3RhbmNlOjAsZGVjYXk6MCxzaGFkb3c6ITEsc2hhZG93QmlhczowLHNoYWRvd1JhZGl1czoxLHNoYWRvd01hcFNpemU6bmV3IEQsXG4gICAgc2hhZG93Q2FtZXJhTmVhcjoxLHNoYWRvd0NhbWVyYUZhcjoxRTN9O2JyZWFrO2Nhc2UgXCJIZW1pc3BoZXJlTGlnaHRcIjpjPXtkaXJlY3Rpb246bmV3IHAsc2t5Q29sb3I6bmV3IEgsZ3JvdW5kQ29sb3I6bmV3IEh9O2JyZWFrO2Nhc2UgXCJSZWN0QXJlYUxpZ2h0XCI6Yz17Y29sb3I6bmV3IEgscG9zaXRpb246bmV3IHAsaGFsZldpZHRoOm5ldyBwLGhhbGZIZWlnaHQ6bmV3IHB9fXJldHVybiBhW2IuaWRdPWN9fX1mdW5jdGlvbiBxZygpe3ZhciBhPW5ldyBwZyxiPXtoYXNoOlwiXCIsYW1iaWVudDpbMCwwLDBdLGRpcmVjdGlvbmFsOltdLGRpcmVjdGlvbmFsU2hhZG93TWFwOltdLGRpcmVjdGlvbmFsU2hhZG93TWF0cml4OltdLHNwb3Q6W10sc3BvdFNoYWRvd01hcDpbXSxzcG90U2hhZG93TWF0cml4OltdLHJlY3RBcmVhOltdLHBvaW50OltdLHBvaW50U2hhZG93TWFwOltdLHBvaW50U2hhZG93TWF0cml4OltdLGhlbWk6W119LGM9bmV3IHAsZD1uZXcgTyxlPW5ldyBPO3JldHVybntzZXR1cDpmdW5jdGlvbihmLFxuICAgIGcsaCl7Zm9yKHZhciBrLG09MCxxPTAsbj0wLHU9MCxyPTAsdD0wLGw9MCx3PTAscD1oLm1hdHJpeFdvcmxkSW52ZXJzZSx5PTAsST1mLmxlbmd0aDt5PEk7eSsrKXt2YXIgQT1mW3ldO2s9QS5jb2xvcjt2YXIgSj1BLmludGVuc2l0eSxIYT1BLmRpc3RhbmNlLERhPUEuc2hhZG93JiZBLnNoYWRvdy5tYXA/QS5zaGFkb3cubWFwLnRleHR1cmU6bnVsbDtpZihBLmlzQW1iaWVudExpZ2h0KW0rPWsucipKLHErPWsuZypKLG4rPWsuYipKO2Vsc2UgaWYoQS5pc0RpcmVjdGlvbmFsTGlnaHQpe2g9YS5nZXQoQSk7aC5jb2xvci5jb3B5KEEuY29sb3IpLm11bHRpcGx5U2NhbGFyKEEuaW50ZW5zaXR5KTtoLmRpcmVjdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oQS5tYXRyaXhXb3JsZCk7Yy5zZXRGcm9tTWF0cml4UG9zaXRpb24oQS50YXJnZXQubWF0cml4V29ybGQpO2guZGlyZWN0aW9uLnN1YihjKTtoLmRpcmVjdGlvbi50cmFuc2Zvcm1EaXJlY3Rpb24ocCk7aWYoaC5zaGFkb3c9QS5jYXN0U2hhZG93KWs9XG4gICAgQS5zaGFkb3csaC5zaGFkb3dCaWFzPWsuYmlhcyxoLnNoYWRvd1JhZGl1cz1rLnJhZGl1cyxoLnNoYWRvd01hcFNpemU9ay5tYXBTaXplO2IuZGlyZWN0aW9uYWxTaGFkb3dNYXBbdV09RGE7Yi5kaXJlY3Rpb25hbFNoYWRvd01hdHJpeFt1XT1BLnNoYWRvdy5tYXRyaXg7Yi5kaXJlY3Rpb25hbFt1XT1oO3UrK31lbHNlIGlmKEEuaXNTcG90TGlnaHQpe2g9YS5nZXQoQSk7aC5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oQS5tYXRyaXhXb3JsZCk7aC5wb3NpdGlvbi5hcHBseU1hdHJpeDQocCk7aC5jb2xvci5jb3B5KGspLm11bHRpcGx5U2NhbGFyKEopO2guZGlzdGFuY2U9SGE7aC5kaXJlY3Rpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKEEubWF0cml4V29ybGQpO2Muc2V0RnJvbU1hdHJpeFBvc2l0aW9uKEEudGFyZ2V0Lm1hdHJpeFdvcmxkKTtoLmRpcmVjdGlvbi5zdWIoYyk7aC5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKHApO2guY29uZUNvcz1NYXRoLmNvcyhBLmFuZ2xlKTtcbiAgICBoLnBlbnVtYnJhQ29zPU1hdGguY29zKEEuYW5nbGUqKDEtQS5wZW51bWJyYSkpO2guZGVjYXk9MD09PUEuZGlzdGFuY2U/MDpBLmRlY2F5O2lmKGguc2hhZG93PUEuY2FzdFNoYWRvdylrPUEuc2hhZG93LGguc2hhZG93Qmlhcz1rLmJpYXMsaC5zaGFkb3dSYWRpdXM9ay5yYWRpdXMsaC5zaGFkb3dNYXBTaXplPWsubWFwU2l6ZTtiLnNwb3RTaGFkb3dNYXBbdF09RGE7Yi5zcG90U2hhZG93TWF0cml4W3RdPUEuc2hhZG93Lm1hdHJpeDtiLnNwb3RbdF09aDt0Kyt9ZWxzZSBpZihBLmlzUmVjdEFyZWFMaWdodCloPWEuZ2V0KEEpLGguY29sb3IuY29weShrKS5tdWx0aXBseVNjYWxhcihKLyhBLndpZHRoKkEuaGVpZ2h0KSksaC5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oQS5tYXRyaXhXb3JsZCksaC5wb3NpdGlvbi5hcHBseU1hdHJpeDQocCksZS5pZGVudGl0eSgpLGQuY29weShBLm1hdHJpeFdvcmxkKSxkLnByZW11bHRpcGx5KHApLGUuZXh0cmFjdFJvdGF0aW9uKGQpLGguaGFsZldpZHRoLnNldCguNSpcbiAgICBBLndpZHRoLDAsMCksaC5oYWxmSGVpZ2h0LnNldCgwLC41KkEuaGVpZ2h0LDApLGguaGFsZldpZHRoLmFwcGx5TWF0cml4NChlKSxoLmhhbGZIZWlnaHQuYXBwbHlNYXRyaXg0KGUpLGIucmVjdEFyZWFbbF09aCxsKys7ZWxzZSBpZihBLmlzUG9pbnRMaWdodCl7aD1hLmdldChBKTtoLnBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbihBLm1hdHJpeFdvcmxkKTtoLnBvc2l0aW9uLmFwcGx5TWF0cml4NChwKTtoLmNvbG9yLmNvcHkoQS5jb2xvcikubXVsdGlwbHlTY2FsYXIoQS5pbnRlbnNpdHkpO2guZGlzdGFuY2U9QS5kaXN0YW5jZTtoLmRlY2F5PTA9PT1BLmRpc3RhbmNlPzA6QS5kZWNheTtpZihoLnNoYWRvdz1BLmNhc3RTaGFkb3cpaz1BLnNoYWRvdyxoLnNoYWRvd0JpYXM9ay5iaWFzLGguc2hhZG93UmFkaXVzPWsucmFkaXVzLGguc2hhZG93TWFwU2l6ZT1rLm1hcFNpemUsaC5zaGFkb3dDYW1lcmFOZWFyPWsuY2FtZXJhLm5lYXIsaC5zaGFkb3dDYW1lcmFGYXI9ay5jYW1lcmEuZmFyO1xuICAgIGIucG9pbnRTaGFkb3dNYXBbcl09RGE7Yi5wb2ludFNoYWRvd01hdHJpeFtyXT1BLnNoYWRvdy5tYXRyaXg7Yi5wb2ludFtyXT1oO3IrK31lbHNlIEEuaXNIZW1pc3BoZXJlTGlnaHQmJihoPWEuZ2V0KEEpLGguZGlyZWN0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbihBLm1hdHJpeFdvcmxkKSxoLmRpcmVjdGlvbi50cmFuc2Zvcm1EaXJlY3Rpb24ocCksaC5kaXJlY3Rpb24ubm9ybWFsaXplKCksaC5za3lDb2xvci5jb3B5KEEuY29sb3IpLm11bHRpcGx5U2NhbGFyKEopLGguZ3JvdW5kQ29sb3IuY29weShBLmdyb3VuZENvbG9yKS5tdWx0aXBseVNjYWxhcihKKSxiLmhlbWlbd109aCx3KyspfWIuYW1iaWVudFswXT1tO2IuYW1iaWVudFsxXT1xO2IuYW1iaWVudFsyXT1uO2IuZGlyZWN0aW9uYWwubGVuZ3RoPXU7Yi5zcG90Lmxlbmd0aD10O2IucmVjdEFyZWEubGVuZ3RoPWw7Yi5wb2ludC5sZW5ndGg9cjtiLmhlbWkubGVuZ3RoPXc7Yi5oYXNoPXUrXCIsXCIrcitcIixcIit0K1wiLFwiK2wrXCIsXCIrXG4gICAgdytcIixcIitnLmxlbmd0aH0sc3RhdGU6Yn19ZnVuY3Rpb24gcmcoYSxiKXt2YXIgYz17fTtyZXR1cm57dXBkYXRlOmZ1bmN0aW9uKGQpe3ZhciBlPWIuZnJhbWUsZj1kLmdlb21ldHJ5LGc9YS5nZXQoZCxmKTtjW2cuaWRdIT09ZSYmKGYuaXNHZW9tZXRyeSYmZy51cGRhdGVGcm9tT2JqZWN0KGQpLGEudXBkYXRlKGcpLGNbZy5pZF09ZSk7cmV0dXJuIGd9LGNsZWFyOmZ1bmN0aW9uKCl7Yz17fX19fWZ1bmN0aW9uIHNnKGEpe2E9YS5zcGxpdChcIlxcblwiKTtmb3IodmFyIGI9MDtiPGEubGVuZ3RoO2IrKylhW2JdPWIrMStcIjogXCIrYVtiXTtyZXR1cm4gYS5qb2luKFwiXFxuXCIpfWZ1bmN0aW9uIFdlKGEsYixjKXt2YXIgZD1hLmNyZWF0ZVNoYWRlcihiKTthLnNoYWRlclNvdXJjZShkLGMpO2EuY29tcGlsZVNoYWRlcihkKTshMT09PWEuZ2V0U2hhZGVyUGFyYW1ldGVyKGQsYS5DT01QSUxFX1NUQVRVUykmJmNvbnNvbGUuZXJyb3IoXCJUSFJFRS5XZWJHTFNoYWRlcjogU2hhZGVyIGNvdWxkbid0IGNvbXBpbGUuXCIpO1xuICAgIFwiXCIhPT1hLmdldFNoYWRlckluZm9Mb2coZCkmJmNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMU2hhZGVyOiBnbC5nZXRTaGFkZXJJbmZvTG9nKClcIixiPT09YS5WRVJURVhfU0hBREVSP1widmVydGV4XCI6XCJmcmFnbWVudFwiLGEuZ2V0U2hhZGVySW5mb0xvZyhkKSxzZyhjKSk7cmV0dXJuIGR9ZnVuY3Rpb24gWGUoYSl7c3dpdGNoKGEpe2Nhc2UgM0UzOnJldHVybltcIkxpbmVhclwiLFwiKCB2YWx1ZSApXCJdO2Nhc2UgMzAwMTpyZXR1cm5bXCJzUkdCXCIsXCIoIHZhbHVlIClcIl07Y2FzZSAzMDAyOnJldHVybltcIlJHQkVcIixcIiggdmFsdWUgKVwiXTtjYXNlIDMwMDQ6cmV0dXJuW1wiUkdCTVwiLFwiKCB2YWx1ZSwgNy4wIClcIl07Y2FzZSAzMDA1OnJldHVybltcIlJHQk1cIixcIiggdmFsdWUsIDE2LjAgKVwiXTtjYXNlIDMwMDY6cmV0dXJuW1wiUkdCRFwiLFwiKCB2YWx1ZSwgMjU2LjAgKVwiXTtjYXNlIDMwMDc6cmV0dXJuW1wiR2FtbWFcIixcIiggdmFsdWUsIGZsb2F0KCBHQU1NQV9GQUNUT1IgKSApXCJdO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJ1bnN1cHBvcnRlZCBlbmNvZGluZzogXCIrXG4gICAgYSk7fX1mdW5jdGlvbiBZZChhLGIpe2I9WGUoYik7cmV0dXJuXCJ2ZWM0IFwiK2ErXCIoIHZlYzQgdmFsdWUgKSB7IHJldHVybiBcIitiWzBdK1wiVG9MaW5lYXJcIitiWzFdK1wiOyB9XCJ9ZnVuY3Rpb24gdGcoYSxiKXtiPVhlKGIpO3JldHVyblwidmVjNCBcIithK1wiKCB2ZWM0IHZhbHVlICkgeyByZXR1cm4gTGluZWFyVG9cIitiWzBdK2JbMV0rXCI7IH1cIn1mdW5jdGlvbiB1ZyhhLGIpe3N3aXRjaChiKXtjYXNlIDE6Yj1cIkxpbmVhclwiO2JyZWFrO2Nhc2UgMjpiPVwiUmVpbmhhcmRcIjticmVhaztjYXNlIDM6Yj1cIlVuY2hhcnRlZDJcIjticmVhaztjYXNlIDQ6Yj1cIk9wdGltaXplZENpbmVvblwiO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJ1bnN1cHBvcnRlZCB0b25lTWFwcGluZzogXCIrYik7fXJldHVyblwidmVjMyBcIithK1wiKCB2ZWMzIGNvbG9yICkgeyByZXR1cm4gXCIrYitcIlRvbmVNYXBwaW5nKCBjb2xvciApOyB9XCJ9ZnVuY3Rpb24gdmcoYSxiLGMpe2E9YXx8e307cmV0dXJuW2EuZGVyaXZhdGl2ZXN8fFxuICAgIGIuZW52TWFwQ3ViZVVWfHxiLmJ1bXBNYXB8fGIubm9ybWFsTWFwfHxiLmZsYXRTaGFkaW5nP1wiI2V4dGVuc2lvbiBHTF9PRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMgOiBlbmFibGVcIjpcIlwiLChhLmZyYWdEZXB0aHx8Yi5sb2dhcml0aG1pY0RlcHRoQnVmZmVyKSYmYy5nZXQoXCJFWFRfZnJhZ19kZXB0aFwiKT9cIiNleHRlbnNpb24gR0xfRVhUX2ZyYWdfZGVwdGggOiBlbmFibGVcIjpcIlwiLGEuZHJhd0J1ZmZlcnMmJmMuZ2V0KFwiV0VCR0xfZHJhd19idWZmZXJzXCIpP1wiI2V4dGVuc2lvbiBHTF9FWFRfZHJhd19idWZmZXJzIDogcmVxdWlyZVwiOlwiXCIsKGEuc2hhZGVyVGV4dHVyZUxPRHx8Yi5lbnZNYXApJiZjLmdldChcIkVYVF9zaGFkZXJfdGV4dHVyZV9sb2RcIik/XCIjZXh0ZW5zaW9uIEdMX0VYVF9zaGFkZXJfdGV4dHVyZV9sb2QgOiBlbmFibGVcIjpcIlwiXS5maWx0ZXIoQmMpLmpvaW4oXCJcXG5cIil9ZnVuY3Rpb24gd2coYSl7dmFyIGI9W10sYztmb3IoYyBpbiBhKXt2YXIgZD1hW2NdOyExIT09ZCYmYi5wdXNoKFwiI2RlZmluZSBcIitcbiAgICBjK1wiIFwiK2QpfXJldHVybiBiLmpvaW4oXCJcXG5cIil9ZnVuY3Rpb24gQmMoYSl7cmV0dXJuXCJcIiE9PWF9ZnVuY3Rpb24gWWUoYSxiKXtyZXR1cm4gYS5yZXBsYWNlKC9OVU1fRElSX0xJR0hUUy9nLGIubnVtRGlyTGlnaHRzKS5yZXBsYWNlKC9OVU1fU1BPVF9MSUdIVFMvZyxiLm51bVNwb3RMaWdodHMpLnJlcGxhY2UoL05VTV9SRUNUX0FSRUFfTElHSFRTL2csYi5udW1SZWN0QXJlYUxpZ2h0cykucmVwbGFjZSgvTlVNX1BPSU5UX0xJR0hUUy9nLGIubnVtUG9pbnRMaWdodHMpLnJlcGxhY2UoL05VTV9IRU1JX0xJR0hUUy9nLGIubnVtSGVtaUxpZ2h0cyl9ZnVuY3Rpb24gWmQoYSl7cmV0dXJuIGEucmVwbGFjZSgvXlsgXFx0XSojaW5jbHVkZSArPChbXFx3XFxkLl0rKT4vZ20sZnVuY3Rpb24oYSxjKXthPVJbY107aWYodm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIkNhbiBub3QgcmVzb2x2ZSAjaW5jbHVkZSA8XCIrYytcIj5cIik7cmV0dXJuIFpkKGEpfSl9ZnVuY3Rpb24gWmUoYSl7cmV0dXJuIGEucmVwbGFjZSgvZm9yIFxcKCBpbnQgaSBcXD0gKFxcZCspXFw7IGkgPCAoXFxkKylcXDsgaSBcXCtcXCsgXFwpIFxceyhbXFxzXFxTXSs/KSg/PVxcfSlcXH0vZyxcbiAgICBmdW5jdGlvbihhLGMsZCxlKXthPVwiXCI7Zm9yKGM9cGFyc2VJbnQoYyk7YzxwYXJzZUludChkKTtjKyspYSs9ZS5yZXBsYWNlKC9cXFsgaSBcXF0vZyxcIlsgXCIrYytcIiBdXCIpO3JldHVybiBhfSl9ZnVuY3Rpb24geGcoYSxiLGMsZCxlLGYpe3ZhciBnPWEuY29udGV4dCxoPWQuZGVmaW5lcyxrPWUudmVydGV4U2hhZGVyLG09ZS5mcmFnbWVudFNoYWRlcixxPVwiU0hBRE9XTUFQX1RZUEVfQkFTSUNcIjsxPT09Zi5zaGFkb3dNYXBUeXBlP3E9XCJTSEFET1dNQVBfVFlQRV9QQ0ZcIjoyPT09Zi5zaGFkb3dNYXBUeXBlJiYocT1cIlNIQURPV01BUF9UWVBFX1BDRl9TT0ZUXCIpO3ZhciBuPVwiRU5WTUFQX1RZUEVfQ1VCRVwiLHU9XCJFTlZNQVBfTU9ERV9SRUZMRUNUSU9OXCIscj1cIkVOVk1BUF9CTEVORElOR19NVUxUSVBMWVwiO2lmKGYuZW52TWFwKXtzd2l0Y2goZC5lbnZNYXAubWFwcGluZyl7Y2FzZSAzMDE6Y2FzZSAzMDI6bj1cIkVOVk1BUF9UWVBFX0NVQkVcIjticmVhaztjYXNlIDMwNjpjYXNlIDMwNzpuPVwiRU5WTUFQX1RZUEVfQ1VCRV9VVlwiO1xuICAgIGJyZWFrO2Nhc2UgMzAzOmNhc2UgMzA0Om49XCJFTlZNQVBfVFlQRV9FUVVJUkVDXCI7YnJlYWs7Y2FzZSAzMDU6bj1cIkVOVk1BUF9UWVBFX1NQSEVSRVwifXN3aXRjaChkLmVudk1hcC5tYXBwaW5nKXtjYXNlIDMwMjpjYXNlIDMwNDp1PVwiRU5WTUFQX01PREVfUkVGUkFDVElPTlwifXN3aXRjaChkLmNvbWJpbmUpe2Nhc2UgMDpyPVwiRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZXCI7YnJlYWs7Y2FzZSAxOnI9XCJFTlZNQVBfQkxFTkRJTkdfTUlYXCI7YnJlYWs7Y2FzZSAyOnI9XCJFTlZNQVBfQkxFTkRJTkdfQUREXCJ9fXZhciB0PTA8YS5nYW1tYUZhY3Rvcj9hLmdhbW1hRmFjdG9yOjEsbD12ZyhkLmV4dGVuc2lvbnMsZixiKSxwPXdnKGgpLHo9Zy5jcmVhdGVQcm9ncmFtKCk7ZC5pc1Jhd1NoYWRlck1hdGVyaWFsPyhoPVtwXS5maWx0ZXIoQmMpLmpvaW4oXCJcXG5cIiksMDxoLmxlbmd0aCYmKGgrPVwiXFxuXCIpLGI9W2wscF0uZmlsdGVyKEJjKS5qb2luKFwiXFxuXCIpLDA8Yi5sZW5ndGgmJihiKz1cIlxcblwiKSk6KGg9XG4gICAgW1wicHJlY2lzaW9uIFwiK2YucHJlY2lzaW9uK1wiIGZsb2F0O1wiLFwicHJlY2lzaW9uIFwiK2YucHJlY2lzaW9uK1wiIGludDtcIixcIiNkZWZpbmUgU0hBREVSX05BTUUgXCIrZS5uYW1lLHAsZi5zdXBwb3J0c1ZlcnRleFRleHR1cmVzP1wiI2RlZmluZSBWRVJURVhfVEVYVFVSRVNcIjpcIlwiLFwiI2RlZmluZSBHQU1NQV9GQUNUT1IgXCIrdCxcIiNkZWZpbmUgTUFYX0JPTkVTIFwiK2YubWF4Qm9uZXMsZi51c2VGb2cmJmYuZm9nP1wiI2RlZmluZSBVU0VfRk9HXCI6XCJcIixmLnVzZUZvZyYmZi5mb2dFeHA/XCIjZGVmaW5lIEZPR19FWFAyXCI6XCJcIixmLm1hcD9cIiNkZWZpbmUgVVNFX01BUFwiOlwiXCIsZi5lbnZNYXA/XCIjZGVmaW5lIFVTRV9FTlZNQVBcIjpcIlwiLGYuZW52TWFwP1wiI2RlZmluZSBcIit1OlwiXCIsZi5saWdodE1hcD9cIiNkZWZpbmUgVVNFX0xJR0hUTUFQXCI6XCJcIixmLmFvTWFwP1wiI2RlZmluZSBVU0VfQU9NQVBcIjpcIlwiLGYuZW1pc3NpdmVNYXA/XCIjZGVmaW5lIFVTRV9FTUlTU0lWRU1BUFwiOlwiXCIsZi5idW1wTWFwP1wiI2RlZmluZSBVU0VfQlVNUE1BUFwiOlxuICAgIFwiXCIsZi5ub3JtYWxNYXA/XCIjZGVmaW5lIFVTRV9OT1JNQUxNQVBcIjpcIlwiLGYuZGlzcGxhY2VtZW50TWFwJiZmLnN1cHBvcnRzVmVydGV4VGV4dHVyZXM/XCIjZGVmaW5lIFVTRV9ESVNQTEFDRU1FTlRNQVBcIjpcIlwiLGYuc3BlY3VsYXJNYXA/XCIjZGVmaW5lIFVTRV9TUEVDVUxBUk1BUFwiOlwiXCIsZi5yb3VnaG5lc3NNYXA/XCIjZGVmaW5lIFVTRV9ST1VHSE5FU1NNQVBcIjpcIlwiLGYubWV0YWxuZXNzTWFwP1wiI2RlZmluZSBVU0VfTUVUQUxORVNTTUFQXCI6XCJcIixmLmFscGhhTWFwP1wiI2RlZmluZSBVU0VfQUxQSEFNQVBcIjpcIlwiLGYudmVydGV4Q29sb3JzP1wiI2RlZmluZSBVU0VfQ09MT1JcIjpcIlwiLGYuZmxhdFNoYWRpbmc/XCIjZGVmaW5lIEZMQVRfU0hBREVEXCI6XCJcIixmLnNraW5uaW5nP1wiI2RlZmluZSBVU0VfU0tJTk5JTkdcIjpcIlwiLGYudXNlVmVydGV4VGV4dHVyZT9cIiNkZWZpbmUgQk9ORV9URVhUVVJFXCI6XCJcIixmLm1vcnBoVGFyZ2V0cz9cIiNkZWZpbmUgVVNFX01PUlBIVEFSR0VUU1wiOlwiXCIsZi5tb3JwaE5vcm1hbHMmJlxuICAgICExPT09Zi5mbGF0U2hhZGluZz9cIiNkZWZpbmUgVVNFX01PUlBITk9STUFMU1wiOlwiXCIsZi5kb3VibGVTaWRlZD9cIiNkZWZpbmUgRE9VQkxFX1NJREVEXCI6XCJcIixmLmZsaXBTaWRlZD9cIiNkZWZpbmUgRkxJUF9TSURFRFwiOlwiXCIsXCIjZGVmaW5lIE5VTV9DTElQUElOR19QTEFORVMgXCIrZi5udW1DbGlwcGluZ1BsYW5lcyxmLnNoYWRvd01hcEVuYWJsZWQ/XCIjZGVmaW5lIFVTRV9TSEFET1dNQVBcIjpcIlwiLGYuc2hhZG93TWFwRW5hYmxlZD9cIiNkZWZpbmUgXCIrcTpcIlwiLGYuc2l6ZUF0dGVudWF0aW9uP1wiI2RlZmluZSBVU0VfU0laRUFUVEVOVUFUSU9OXCI6XCJcIixmLmxvZ2FyaXRobWljRGVwdGhCdWZmZXI/XCIjZGVmaW5lIFVTRV9MT0dERVBUSEJVRlwiOlwiXCIsZi5sb2dhcml0aG1pY0RlcHRoQnVmZmVyJiZiLmdldChcIkVYVF9mcmFnX2RlcHRoXCIpP1wiI2RlZmluZSBVU0VfTE9HREVQVEhCVUZfRVhUXCI6XCJcIixcInVuaWZvcm0gbWF0NCBtb2RlbE1hdHJpeDtcIixcInVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XCIsXG4gICAgXCJ1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDtcIixcInVuaWZvcm0gbWF0NCB2aWV3TWF0cml4O1wiLFwidW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDtcIixcInVuaWZvcm0gdmVjMyBjYW1lcmFQb3NpdGlvbjtcIixcImF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1wiLFwiYXR0cmlidXRlIHZlYzMgbm9ybWFsO1wiLFwiYXR0cmlidXRlIHZlYzIgdXY7XCIsXCIjaWZkZWYgVVNFX0NPTE9SXCIsXCJcXHRhdHRyaWJ1dGUgdmVjMyBjb2xvcjtcIixcIiNlbmRpZlwiLFwiI2lmZGVmIFVTRV9NT1JQSFRBUkdFVFNcIixcIlxcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MDtcIixcIlxcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MTtcIixcIlxcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MjtcIixcIlxcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MztcIixcIlxcdCNpZmRlZiBVU0VfTU9SUEhOT1JNQUxTXCIsXCJcXHRcXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDA7XCIsXCJcXHRcXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDE7XCIsXG4gICAgXCJcXHRcXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDI7XCIsXCJcXHRcXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDM7XCIsXCJcXHQjZWxzZVwiLFwiXFx0XFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ0O1wiLFwiXFx0XFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ1O1wiLFwiXFx0XFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ2O1wiLFwiXFx0XFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ3O1wiLFwiXFx0I2VuZGlmXCIsXCIjZW5kaWZcIixcIiNpZmRlZiBVU0VfU0tJTk5JTkdcIixcIlxcdGF0dHJpYnV0ZSB2ZWM0IHNraW5JbmRleDtcIixcIlxcdGF0dHJpYnV0ZSB2ZWM0IHNraW5XZWlnaHQ7XCIsXCIjZW5kaWZcIixcIlxcblwiXS5maWx0ZXIoQmMpLmpvaW4oXCJcXG5cIiksYj1bbCxcInByZWNpc2lvbiBcIitmLnByZWNpc2lvbitcIiBmbG9hdDtcIixcInByZWNpc2lvbiBcIitmLnByZWNpc2lvbitcIiBpbnQ7XCIsXCIjZGVmaW5lIFNIQURFUl9OQU1FIFwiK2UubmFtZSxwLGYuYWxwaGFUZXN0P1wiI2RlZmluZSBBTFBIQVRFU1QgXCIrZi5hbHBoYVRlc3Q6XG4gICAgXCJcIixcIiNkZWZpbmUgR0FNTUFfRkFDVE9SIFwiK3QsZi51c2VGb2cmJmYuZm9nP1wiI2RlZmluZSBVU0VfRk9HXCI6XCJcIixmLnVzZUZvZyYmZi5mb2dFeHA/XCIjZGVmaW5lIEZPR19FWFAyXCI6XCJcIixmLm1hcD9cIiNkZWZpbmUgVVNFX01BUFwiOlwiXCIsZi5lbnZNYXA/XCIjZGVmaW5lIFVTRV9FTlZNQVBcIjpcIlwiLGYuZW52TWFwP1wiI2RlZmluZSBcIituOlwiXCIsZi5lbnZNYXA/XCIjZGVmaW5lIFwiK3U6XCJcIixmLmVudk1hcD9cIiNkZWZpbmUgXCIrcjpcIlwiLGYubGlnaHRNYXA/XCIjZGVmaW5lIFVTRV9MSUdIVE1BUFwiOlwiXCIsZi5hb01hcD9cIiNkZWZpbmUgVVNFX0FPTUFQXCI6XCJcIixmLmVtaXNzaXZlTWFwP1wiI2RlZmluZSBVU0VfRU1JU1NJVkVNQVBcIjpcIlwiLGYuYnVtcE1hcD9cIiNkZWZpbmUgVVNFX0JVTVBNQVBcIjpcIlwiLGYubm9ybWFsTWFwP1wiI2RlZmluZSBVU0VfTk9STUFMTUFQXCI6XCJcIixmLnNwZWN1bGFyTWFwP1wiI2RlZmluZSBVU0VfU1BFQ1VMQVJNQVBcIjpcIlwiLGYucm91Z2huZXNzTWFwP1wiI2RlZmluZSBVU0VfUk9VR0hORVNTTUFQXCI6XG4gICAgXCJcIixmLm1ldGFsbmVzc01hcD9cIiNkZWZpbmUgVVNFX01FVEFMTkVTU01BUFwiOlwiXCIsZi5hbHBoYU1hcD9cIiNkZWZpbmUgVVNFX0FMUEhBTUFQXCI6XCJcIixmLnZlcnRleENvbG9ycz9cIiNkZWZpbmUgVVNFX0NPTE9SXCI6XCJcIixmLmdyYWRpZW50TWFwP1wiI2RlZmluZSBVU0VfR1JBRElFTlRNQVBcIjpcIlwiLGYuZmxhdFNoYWRpbmc/XCIjZGVmaW5lIEZMQVRfU0hBREVEXCI6XCJcIixmLmRvdWJsZVNpZGVkP1wiI2RlZmluZSBET1VCTEVfU0lERURcIjpcIlwiLGYuZmxpcFNpZGVkP1wiI2RlZmluZSBGTElQX1NJREVEXCI6XCJcIixcIiNkZWZpbmUgTlVNX0NMSVBQSU5HX1BMQU5FUyBcIitmLm51bUNsaXBwaW5nUGxhbmVzLFwiI2RlZmluZSBVTklPTl9DTElQUElOR19QTEFORVMgXCIrKGYubnVtQ2xpcHBpbmdQbGFuZXMtZi5udW1DbGlwSW50ZXJzZWN0aW9uKSxmLnNoYWRvd01hcEVuYWJsZWQ/XCIjZGVmaW5lIFVTRV9TSEFET1dNQVBcIjpcIlwiLGYuc2hhZG93TWFwRW5hYmxlZD9cIiNkZWZpbmUgXCIrcTpcIlwiLGYucHJlbXVsdGlwbGllZEFscGhhP1xuICAgIFwiI2RlZmluZSBQUkVNVUxUSVBMSUVEX0FMUEhBXCI6XCJcIixmLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzP1wiI2RlZmluZSBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTXCI6XCJcIixmLmxvZ2FyaXRobWljRGVwdGhCdWZmZXI/XCIjZGVmaW5lIFVTRV9MT0dERVBUSEJVRlwiOlwiXCIsZi5sb2dhcml0aG1pY0RlcHRoQnVmZmVyJiZiLmdldChcIkVYVF9mcmFnX2RlcHRoXCIpP1wiI2RlZmluZSBVU0VfTE9HREVQVEhCVUZfRVhUXCI6XCJcIixmLmVudk1hcCYmYi5nZXQoXCJFWFRfc2hhZGVyX3RleHR1cmVfbG9kXCIpP1wiI2RlZmluZSBURVhUVVJFX0xPRF9FWFRcIjpcIlwiLFwidW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7XCIsXCJ1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247XCIsMCE9PWYudG9uZU1hcHBpbmc/XCIjZGVmaW5lIFRPTkVfTUFQUElOR1wiOlwiXCIsMCE9PWYudG9uZU1hcHBpbmc/Ui50b25lbWFwcGluZ19wYXJzX2ZyYWdtZW50OlwiXCIsMCE9PWYudG9uZU1hcHBpbmc/dWcoXCJ0b25lTWFwcGluZ1wiLGYudG9uZU1hcHBpbmcpOlxuICAgIFwiXCIsZi5kaXRoZXJpbmc/XCIjZGVmaW5lIERJVEhFUklOR1wiOlwiXCIsZi5vdXRwdXRFbmNvZGluZ3x8Zi5tYXBFbmNvZGluZ3x8Zi5lbnZNYXBFbmNvZGluZ3x8Zi5lbWlzc2l2ZU1hcEVuY29kaW5nP1IuZW5jb2RpbmdzX3BhcnNfZnJhZ21lbnQ6XCJcIixmLm1hcEVuY29kaW5nP1lkKFwibWFwVGV4ZWxUb0xpbmVhclwiLGYubWFwRW5jb2RpbmcpOlwiXCIsZi5lbnZNYXBFbmNvZGluZz9ZZChcImVudk1hcFRleGVsVG9MaW5lYXJcIixmLmVudk1hcEVuY29kaW5nKTpcIlwiLGYuZW1pc3NpdmVNYXBFbmNvZGluZz9ZZChcImVtaXNzaXZlTWFwVGV4ZWxUb0xpbmVhclwiLGYuZW1pc3NpdmVNYXBFbmNvZGluZyk6XCJcIixmLm91dHB1dEVuY29kaW5nP3RnKFwibGluZWFyVG9PdXRwdXRUZXhlbFwiLGYub3V0cHV0RW5jb2RpbmcpOlwiXCIsZi5kZXB0aFBhY2tpbmc/XCIjZGVmaW5lIERFUFRIX1BBQ0tJTkcgXCIrZC5kZXB0aFBhY2tpbmc6XCJcIixcIlxcblwiXS5maWx0ZXIoQmMpLmpvaW4oXCJcXG5cIikpO2s9WmQoayk7az1ZZShrLGYpO1xuICAgIG09WmQobSk7bT1ZZShtLGYpO2QuaXNTaGFkZXJNYXRlcmlhbHx8KGs9WmUoayksbT1aZShtKSk7bT1iK207az1XZShnLGcuVkVSVEVYX1NIQURFUixoK2spO209V2UoZyxnLkZSQUdNRU5UX1NIQURFUixtKTtnLmF0dGFjaFNoYWRlcih6LGspO2cuYXR0YWNoU2hhZGVyKHosbSk7dm9pZCAwIT09ZC5pbmRleDBBdHRyaWJ1dGVOYW1lP2cuYmluZEF0dHJpYkxvY2F0aW9uKHosMCxkLmluZGV4MEF0dHJpYnV0ZU5hbWUpOiEwPT09Zi5tb3JwaFRhcmdldHMmJmcuYmluZEF0dHJpYkxvY2F0aW9uKHosMCxcInBvc2l0aW9uXCIpO2cubGlua1Byb2dyYW0oeik7Zj1nLmdldFByb2dyYW1JbmZvTG9nKHopO2U9Zy5nZXRTaGFkZXJJbmZvTG9nKGspO3E9Zy5nZXRTaGFkZXJJbmZvTG9nKG0pO3U9bj0hMDtpZighMT09PWcuZ2V0UHJvZ3JhbVBhcmFtZXRlcih6LGcuTElOS19TVEFUVVMpKW49ITEsY29uc29sZS5lcnJvcihcIlRIUkVFLldlYkdMUHJvZ3JhbTogc2hhZGVyIGVycm9yOiBcIixnLmdldEVycm9yKCksXG4gICAgXCJnbC5WQUxJREFURV9TVEFUVVNcIixnLmdldFByb2dyYW1QYXJhbWV0ZXIoeixnLlZBTElEQVRFX1NUQVRVUyksXCJnbC5nZXRQcm9ncmFtSW5mb0xvZ1wiLGYsZSxxKTtlbHNlIGlmKFwiXCIhPT1mKWNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUHJvZ3JhbTogZ2wuZ2V0UHJvZ3JhbUluZm9Mb2coKVwiLGYpO2Vsc2UgaWYoXCJcIj09PWV8fFwiXCI9PT1xKXU9ITE7dSYmKHRoaXMuZGlhZ25vc3RpY3M9e3J1bm5hYmxlOm4sbWF0ZXJpYWw6ZCxwcm9ncmFtTG9nOmYsdmVydGV4U2hhZGVyOntsb2c6ZSxwcmVmaXg6aH0sZnJhZ21lbnRTaGFkZXI6e2xvZzpxLHByZWZpeDpifX0pO2cuZGVsZXRlU2hhZGVyKGspO2cuZGVsZXRlU2hhZGVyKG0pO3ZhciB5O3RoaXMuZ2V0VW5pZm9ybXM9ZnVuY3Rpb24oKXt2b2lkIDA9PT15JiYoeT1uZXcgbWIoZyx6LGEpKTtyZXR1cm4geX07dmFyIEk7dGhpcy5nZXRBdHRyaWJ1dGVzPWZ1bmN0aW9uKCl7aWYodm9pZCAwPT09SSl7Zm9yKHZhciBhPXt9LGI9Zy5nZXRQcm9ncmFtUGFyYW1ldGVyKHosXG4gICAgZy5BQ1RJVkVfQVRUUklCVVRFUyksYz0wO2M8YjtjKyspe3ZhciBkPWcuZ2V0QWN0aXZlQXR0cmliKHosYykubmFtZTthW2RdPWcuZ2V0QXR0cmliTG9jYXRpb24oeixkKX1JPWF9cmV0dXJuIEl9O3RoaXMuZGVzdHJveT1mdW5jdGlvbigpe2cuZGVsZXRlUHJvZ3JhbSh6KTt0aGlzLnByb2dyYW09dm9pZCAwfTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLHt1bmlmb3Jtczp7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xQcm9ncmFtOiAudW5pZm9ybXMgaXMgbm93IC5nZXRVbmlmb3JtcygpLlwiKTtyZXR1cm4gdGhpcy5nZXRVbmlmb3JtcygpfX0sYXR0cmlidXRlczp7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xQcm9ncmFtOiAuYXR0cmlidXRlcyBpcyBub3cgLmdldEF0dHJpYnV0ZXMoKS5cIik7cmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlcygpfX19KTt0aGlzLmlkPXlnKys7dGhpcy5jb2RlPWM7dGhpcy51c2VkVGltZXM9MTtcbiAgICB0aGlzLnByb2dyYW09ejt0aGlzLnZlcnRleFNoYWRlcj1rO3RoaXMuZnJhZ21lbnRTaGFkZXI9bTtyZXR1cm4gdGhpc31mdW5jdGlvbiB6ZyhhLGIsYyl7ZnVuY3Rpb24gZChhLGIpe2lmKGEpYS5pc1RleHR1cmU/Yz1hLmVuY29kaW5nOmEuaXNXZWJHTFJlbmRlclRhcmdldCYmKGNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUHJvZ3JhbXMuZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcDogZG9uJ3QgdXNlIHJlbmRlciB0YXJnZXRzIGFzIHRleHR1cmVzLiBVc2UgdGhlaXIgLnRleHR1cmUgcHJvcGVydHkgaW5zdGVhZC5cIiksYz1hLnRleHR1cmUuZW5jb2RpbmcpO2Vsc2UgdmFyIGM9M0UzOzNFMz09PWMmJmImJihjPTMwMDcpO3JldHVybiBjfXZhciBlPVtdLGY9e01lc2hEZXB0aE1hdGVyaWFsOlwiZGVwdGhcIixNZXNoRGlzdGFuY2VNYXRlcmlhbDpcImRpc3RhbmNlUkdCQVwiLE1lc2hOb3JtYWxNYXRlcmlhbDpcIm5vcm1hbFwiLE1lc2hCYXNpY01hdGVyaWFsOlwiYmFzaWNcIixNZXNoTGFtYmVydE1hdGVyaWFsOlwibGFtYmVydFwiLFxuICAgIE1lc2hQaG9uZ01hdGVyaWFsOlwicGhvbmdcIixNZXNoVG9vbk1hdGVyaWFsOlwicGhvbmdcIixNZXNoU3RhbmRhcmRNYXRlcmlhbDpcInBoeXNpY2FsXCIsTWVzaFBoeXNpY2FsTWF0ZXJpYWw6XCJwaHlzaWNhbFwiLExpbmVCYXNpY01hdGVyaWFsOlwiYmFzaWNcIixMaW5lRGFzaGVkTWF0ZXJpYWw6XCJkYXNoZWRcIixQb2ludHNNYXRlcmlhbDpcInBvaW50c1wiLFNoYWRvd01hdGVyaWFsOlwic2hhZG93XCJ9LGc9XCJwcmVjaXNpb24gc3VwcG9ydHNWZXJ0ZXhUZXh0dXJlcyBtYXAgbWFwRW5jb2RpbmcgZW52TWFwIGVudk1hcE1vZGUgZW52TWFwRW5jb2RpbmcgbGlnaHRNYXAgYW9NYXAgZW1pc3NpdmVNYXAgZW1pc3NpdmVNYXBFbmNvZGluZyBidW1wTWFwIG5vcm1hbE1hcCBkaXNwbGFjZW1lbnRNYXAgc3BlY3VsYXJNYXAgcm91Z2huZXNzTWFwIG1ldGFsbmVzc01hcCBncmFkaWVudE1hcCBhbHBoYU1hcCBjb21iaW5lIHZlcnRleENvbG9ycyBmb2cgdXNlRm9nIGZvZ0V4cCBmbGF0U2hhZGluZyBzaXplQXR0ZW51YXRpb24gbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciBza2lubmluZyBtYXhCb25lcyB1c2VWZXJ0ZXhUZXh0dXJlIG1vcnBoVGFyZ2V0cyBtb3JwaE5vcm1hbHMgbWF4TW9ycGhUYXJnZXRzIG1heE1vcnBoTm9ybWFscyBwcmVtdWx0aXBsaWVkQWxwaGEgbnVtRGlyTGlnaHRzIG51bVBvaW50TGlnaHRzIG51bVNwb3RMaWdodHMgbnVtSGVtaUxpZ2h0cyBudW1SZWN0QXJlYUxpZ2h0cyBzaGFkb3dNYXBFbmFibGVkIHNoYWRvd01hcFR5cGUgdG9uZU1hcHBpbmcgcGh5c2ljYWxseUNvcnJlY3RMaWdodHMgYWxwaGFUZXN0IGRvdWJsZVNpZGVkIGZsaXBTaWRlZCBudW1DbGlwcGluZ1BsYW5lcyBudW1DbGlwSW50ZXJzZWN0aW9uIGRlcHRoUGFja2luZyBkaXRoZXJpbmdcIi5zcGxpdChcIiBcIik7XG4gICAgdGhpcy5nZXRQYXJhbWV0ZXJzPWZ1bmN0aW9uKGIsZSxnLHEsbix1LHIpe3ZhciBoPWZbYi50eXBlXTtpZihyLmlzU2tpbm5lZE1lc2gpe3ZhciBrPXIuc2tlbGV0b24uYm9uZXM7aWYoYy5mbG9hdFZlcnRleFRleHR1cmVzKWs9MTAyNDtlbHNle3ZhciBtPU1hdGgubWluKE1hdGguZmxvb3IoKGMubWF4VmVydGV4VW5pZm9ybXMtMjApLzQpLGsubGVuZ3RoKTttPGsubGVuZ3RoPyhjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBTa2VsZXRvbiBoYXMgXCIray5sZW5ndGgrXCIgYm9uZXMuIFRoaXMgR1BVIHN1cHBvcnRzIFwiK20rXCIuXCIpLGs9MCk6az1tfX1lbHNlIGs9MDttPWMucHJlY2lzaW9uO251bGwhPT1iLnByZWNpc2lvbiYmKG09Yy5nZXRNYXhQcmVjaXNpb24oYi5wcmVjaXNpb24pLG0hPT1iLnByZWNpc2lvbiYmY29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xQcm9ncmFtLmdldFBhcmFtZXRlcnM6XCIsYi5wcmVjaXNpb24sXCJub3Qgc3VwcG9ydGVkLCB1c2luZ1wiLG0sXCJpbnN0ZWFkLlwiKSk7XG4gICAgdmFyIGw9YS5nZXRSZW5kZXJUYXJnZXQoKTtyZXR1cm57c2hhZGVySUQ6aCxwcmVjaXNpb246bSxzdXBwb3J0c1ZlcnRleFRleHR1cmVzOmMudmVydGV4VGV4dHVyZXMsb3V0cHV0RW5jb2Rpbmc6ZChsP2wudGV4dHVyZTpudWxsLGEuZ2FtbWFPdXRwdXQpLG1hcDohIWIubWFwLG1hcEVuY29kaW5nOmQoYi5tYXAsYS5nYW1tYUlucHV0KSxlbnZNYXA6ISFiLmVudk1hcCxlbnZNYXBNb2RlOmIuZW52TWFwJiZiLmVudk1hcC5tYXBwaW5nLGVudk1hcEVuY29kaW5nOmQoYi5lbnZNYXAsYS5nYW1tYUlucHV0KSxlbnZNYXBDdWJlVVY6ISFiLmVudk1hcCYmKDMwNj09PWIuZW52TWFwLm1hcHBpbmd8fDMwNz09PWIuZW52TWFwLm1hcHBpbmcpLGxpZ2h0TWFwOiEhYi5saWdodE1hcCxhb01hcDohIWIuYW9NYXAsZW1pc3NpdmVNYXA6ISFiLmVtaXNzaXZlTWFwLGVtaXNzaXZlTWFwRW5jb2Rpbmc6ZChiLmVtaXNzaXZlTWFwLGEuZ2FtbWFJbnB1dCksYnVtcE1hcDohIWIuYnVtcE1hcCxub3JtYWxNYXA6ISFiLm5vcm1hbE1hcCxcbiAgICBkaXNwbGFjZW1lbnRNYXA6ISFiLmRpc3BsYWNlbWVudE1hcCxyb3VnaG5lc3NNYXA6ISFiLnJvdWdobmVzc01hcCxtZXRhbG5lc3NNYXA6ISFiLm1ldGFsbmVzc01hcCxzcGVjdWxhck1hcDohIWIuc3BlY3VsYXJNYXAsYWxwaGFNYXA6ISFiLmFscGhhTWFwLGdyYWRpZW50TWFwOiEhYi5ncmFkaWVudE1hcCxjb21iaW5lOmIuY29tYmluZSx2ZXJ0ZXhDb2xvcnM6Yi52ZXJ0ZXhDb2xvcnMsZm9nOiEhcSx1c2VGb2c6Yi5mb2csZm9nRXhwOnEmJnEuaXNGb2dFeHAyLGZsYXRTaGFkaW5nOmIuZmxhdFNoYWRpbmcsc2l6ZUF0dGVudWF0aW9uOmIuc2l6ZUF0dGVudWF0aW9uLGxvZ2FyaXRobWljRGVwdGhCdWZmZXI6Yy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyLHNraW5uaW5nOmIuc2tpbm5pbmcmJjA8ayxtYXhCb25lczprLHVzZVZlcnRleFRleHR1cmU6Yy5mbG9hdFZlcnRleFRleHR1cmVzLG1vcnBoVGFyZ2V0czpiLm1vcnBoVGFyZ2V0cyxtb3JwaE5vcm1hbHM6Yi5tb3JwaE5vcm1hbHMsXG4gICAgbWF4TW9ycGhUYXJnZXRzOmEubWF4TW9ycGhUYXJnZXRzLG1heE1vcnBoTm9ybWFsczphLm1heE1vcnBoTm9ybWFscyxudW1EaXJMaWdodHM6ZS5kaXJlY3Rpb25hbC5sZW5ndGgsbnVtUG9pbnRMaWdodHM6ZS5wb2ludC5sZW5ndGgsbnVtU3BvdExpZ2h0czplLnNwb3QubGVuZ3RoLG51bVJlY3RBcmVhTGlnaHRzOmUucmVjdEFyZWEubGVuZ3RoLG51bUhlbWlMaWdodHM6ZS5oZW1pLmxlbmd0aCxudW1DbGlwcGluZ1BsYW5lczpuLG51bUNsaXBJbnRlcnNlY3Rpb246dSxkaXRoZXJpbmc6Yi5kaXRoZXJpbmcsc2hhZG93TWFwRW5hYmxlZDphLnNoYWRvd01hcC5lbmFibGVkJiZyLnJlY2VpdmVTaGFkb3cmJjA8Zy5sZW5ndGgsc2hhZG93TWFwVHlwZTphLnNoYWRvd01hcC50eXBlLHRvbmVNYXBwaW5nOmEudG9uZU1hcHBpbmcscGh5c2ljYWxseUNvcnJlY3RMaWdodHM6YS5waHlzaWNhbGx5Q29ycmVjdExpZ2h0cyxwcmVtdWx0aXBsaWVkQWxwaGE6Yi5wcmVtdWx0aXBsaWVkQWxwaGEsXG4gICAgYWxwaGFUZXN0OmIuYWxwaGFUZXN0LGRvdWJsZVNpZGVkOjI9PT1iLnNpZGUsZmxpcFNpZGVkOjE9PT1iLnNpZGUsZGVwdGhQYWNraW5nOnZvaWQgMCE9PWIuZGVwdGhQYWNraW5nP2IuZGVwdGhQYWNraW5nOiExfX07dGhpcy5nZXRQcm9ncmFtQ29kZT1mdW5jdGlvbihiLGMpe3ZhciBkPVtdO2Muc2hhZGVySUQ/ZC5wdXNoKGMuc2hhZGVySUQpOihkLnB1c2goYi5mcmFnbWVudFNoYWRlciksZC5wdXNoKGIudmVydGV4U2hhZGVyKSk7aWYodm9pZCAwIT09Yi5kZWZpbmVzKWZvcih2YXIgZSBpbiBiLmRlZmluZXMpZC5wdXNoKGUpLGQucHVzaChiLmRlZmluZXNbZV0pO2ZvcihlPTA7ZTxnLmxlbmd0aDtlKyspZC5wdXNoKGNbZ1tlXV0pO2QucHVzaChiLm9uQmVmb3JlQ29tcGlsZS50b1N0cmluZygpKTtkLnB1c2goYS5nYW1tYU91dHB1dCk7cmV0dXJuIGQuam9pbigpfTt0aGlzLmFjcXVpcmVQcm9ncmFtPWZ1bmN0aW9uKGMsZCxmLGcpe2Zvcih2YXIgaCxrPTAsbT1lLmxlbmd0aDtrPFxuICAgIG07aysrKXt2YXIgcT1lW2tdO2lmKHEuY29kZT09PWcpe2g9cTsrK2gudXNlZFRpbWVzO2JyZWFrfX12b2lkIDA9PT1oJiYoaD1uZXcgeGcoYSxiLGcsYyxkLGYpLGUucHVzaChoKSk7cmV0dXJuIGh9O3RoaXMucmVsZWFzZVByb2dyYW09ZnVuY3Rpb24oYSl7aWYoMD09PS0tYS51c2VkVGltZXMpe3ZhciBiPWUuaW5kZXhPZihhKTtlW2JdPWVbZS5sZW5ndGgtMV07ZS5wb3AoKTthLmRlc3Ryb3koKX19O3RoaXMucHJvZ3JhbXM9ZX1mdW5jdGlvbiBBZyhhLGIsYyxkLGUsZixnKXtmdW5jdGlvbiBoKGEsYil7aWYoYS53aWR0aD5ifHxhLmhlaWdodD5iKXtiLz1NYXRoLm1heChhLndpZHRoLGEuaGVpZ2h0KTt2YXIgYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsXCJjYW52YXNcIik7Yy53aWR0aD1NYXRoLmZsb29yKGEud2lkdGgqYik7Yy5oZWlnaHQ9TWF0aC5mbG9vcihhLmhlaWdodCpiKTtjLmdldENvbnRleHQoXCIyZFwiKS5kcmF3SW1hZ2UoYSxcbiAgICAwLDAsYS53aWR0aCxhLmhlaWdodCwwLDAsYy53aWR0aCxjLmhlaWdodCk7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogaW1hZ2UgaXMgdG9vIGJpZyAoXCIrYS53aWR0aCtcInhcIithLmhlaWdodCtcIikuIFJlc2l6ZWQgdG8gXCIrYy53aWR0aCtcInhcIitjLmhlaWdodCxhKTtyZXR1cm4gY31yZXR1cm4gYX1mdW5jdGlvbiBrKGEpe3JldHVybiBRLmlzUG93ZXJPZlR3byhhLndpZHRoKSYmUS5pc1Bvd2VyT2ZUd28oYS5oZWlnaHQpfWZ1bmN0aW9uIG0oYSxiKXtyZXR1cm4gYS5nZW5lcmF0ZU1pcG1hcHMmJmImJjEwMDMhPT1hLm1pbkZpbHRlciYmMTAwNiE9PWEubWluRmlsdGVyfWZ1bmN0aW9uIHEoYil7cmV0dXJuIDEwMDM9PT1ifHwxMDA0PT09Ynx8MTAwNT09PWI/YS5ORUFSRVNUOmEuTElORUFSfWZ1bmN0aW9uIG4oYil7Yj1iLnRhcmdldDtiLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkaXNwb3NlXCIsbik7YTp7dmFyIGM9ZC5nZXQoYik7aWYoYi5pbWFnZSYmYy5fX2ltYWdlX193ZWJnbFRleHR1cmVDdWJlKWEuZGVsZXRlVGV4dHVyZShjLl9faW1hZ2VfX3dlYmdsVGV4dHVyZUN1YmUpO1xuICAgIGVsc2V7aWYodm9pZCAwPT09Yy5fX3dlYmdsSW5pdClicmVhayBhO2EuZGVsZXRlVGV4dHVyZShjLl9fd2ViZ2xUZXh0dXJlKX1kLnJlbW92ZShiKX1iLmlzVmlkZW9UZXh0dXJlJiZkZWxldGUgeVtiLmlkXTtnLnRleHR1cmVzLS19ZnVuY3Rpb24gdShiKXtiPWIudGFyZ2V0O2IucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIix1KTt2YXIgYz1kLmdldChiKSxlPWQuZ2V0KGIudGV4dHVyZSk7aWYoYil7dm9pZCAwIT09ZS5fX3dlYmdsVGV4dHVyZSYmYS5kZWxldGVUZXh0dXJlKGUuX193ZWJnbFRleHR1cmUpO2IuZGVwdGhUZXh0dXJlJiZiLmRlcHRoVGV4dHVyZS5kaXNwb3NlKCk7aWYoYi5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSlmb3IoZT0wOzY+ZTtlKyspYS5kZWxldGVGcmFtZWJ1ZmZlcihjLl9fd2ViZ2xGcmFtZWJ1ZmZlcltlXSksYy5fX3dlYmdsRGVwdGhidWZmZXImJmEuZGVsZXRlUmVuZGVyYnVmZmVyKGMuX193ZWJnbERlcHRoYnVmZmVyW2VdKTtlbHNlIGEuZGVsZXRlRnJhbWVidWZmZXIoYy5fX3dlYmdsRnJhbWVidWZmZXIpLFxuICAgIGMuX193ZWJnbERlcHRoYnVmZmVyJiZhLmRlbGV0ZVJlbmRlcmJ1ZmZlcihjLl9fd2ViZ2xEZXB0aGJ1ZmZlcik7ZC5yZW1vdmUoYi50ZXh0dXJlKTtkLnJlbW92ZShiKX1nLnRleHR1cmVzLS19ZnVuY3Rpb24gcihiLHEpe3ZhciB1PWQuZ2V0KGIpO2lmKDA8Yi52ZXJzaW9uJiZ1Ll9fdmVyc2lvbiE9PWIudmVyc2lvbil7dmFyIHI9Yi5pbWFnZTtpZih2b2lkIDA9PT1yKWNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgbWFya2VkIGZvciB1cGRhdGUgYnV0IGltYWdlIGlzIHVuZGVmaW5lZFwiLGIpO2Vsc2UgaWYoITE9PT1yLmNvbXBsZXRlKWNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgbWFya2VkIGZvciB1cGRhdGUgYnV0IGltYWdlIGlzIGluY29tcGxldGVcIixiKTtlbHNle3ZvaWQgMD09PXUuX193ZWJnbEluaXQmJih1Ll9fd2ViZ2xJbml0PSEwLGIuYWRkRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIixuKSx1Ll9fd2ViZ2xUZXh0dXJlPVxuICAgIGEuY3JlYXRlVGV4dHVyZSgpLGIuaXNWaWRlb1RleHR1cmUmJih5W2IuaWRdPWIpLGcudGV4dHVyZXMrKyk7Yy5hY3RpdmVUZXh0dXJlKGEuVEVYVFVSRTArcSk7Yy5iaW5kVGV4dHVyZShhLlRFWFRVUkVfMkQsdS5fX3dlYmdsVGV4dHVyZSk7YS5waXhlbFN0b3JlaShhLlVOUEFDS19GTElQX1lfV0VCR0wsYi5mbGlwWSk7YS5waXhlbFN0b3JlaShhLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCxiLnByZW11bHRpcGx5QWxwaGEpO2EucGl4ZWxTdG9yZWkoYS5VTlBBQ0tfQUxJR05NRU5ULGIudW5wYWNrQWxpZ25tZW50KTt2YXIgbD1oKGIuaW1hZ2UsZS5tYXhUZXh0dXJlU2l6ZSk7KDEwMDEhPT1iLndyYXBTfHwxMDAxIT09Yi53cmFwVHx8MTAwMyE9PWIubWluRmlsdGVyJiYxMDA2IT09Yi5taW5GaWx0ZXIpJiYhMT09PWsobCkmJihxPWwscSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnR8fHEgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudHx8cSBpbnN0YW5jZW9mIEltYWdlQml0bWFwP1xuICAgIChyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixcImNhbnZhc1wiKSxyLndpZHRoPVEuZmxvb3JQb3dlck9mVHdvKHEud2lkdGgpLHIuaGVpZ2h0PVEuZmxvb3JQb3dlck9mVHdvKHEuaGVpZ2h0KSxyLmdldENvbnRleHQoXCIyZFwiKS5kcmF3SW1hZ2UocSwwLDAsci53aWR0aCxyLmhlaWdodCksY29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogaW1hZ2UgaXMgbm90IHBvd2VyIG9mIHR3byAoXCIrcS53aWR0aCtcInhcIitxLmhlaWdodCtcIikuIFJlc2l6ZWQgdG8gXCIrci53aWR0aCtcInhcIityLmhlaWdodCxxKSxsPXIpOmw9cSk7cT1rKGwpO3ZhciByPWYuY29udmVydChiLmZvcm1hdCksdj1mLmNvbnZlcnQoYi50eXBlKTt0KGEuVEVYVFVSRV8yRCxiLHEpO3ZhciBwPWIubWlwbWFwcztpZihiLmlzRGVwdGhUZXh0dXJlKXtwPWEuREVQVEhfQ09NUE9ORU5UO2lmKDEwMTU9PT1iLnR5cGUpe2lmKCF6KXRocm93IEVycm9yKFwiRmxvYXQgRGVwdGggVGV4dHVyZSBvbmx5IHN1cHBvcnRlZCBpbiBXZWJHTDIuMFwiKTtcbiAgICBwPWEuREVQVEhfQ09NUE9ORU5UMzJGfWVsc2UgeiYmKHA9YS5ERVBUSF9DT01QT05FTlQxNik7MTAyNj09PWIuZm9ybWF0JiZwPT09YS5ERVBUSF9DT01QT05FTlQmJjEwMTIhPT1iLnR5cGUmJjEwMTQhPT1iLnR5cGUmJihjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBVc2UgVW5zaWduZWRTaG9ydFR5cGUgb3IgVW5zaWduZWRJbnRUeXBlIGZvciBEZXB0aEZvcm1hdCBEZXB0aFRleHR1cmUuXCIpLGIudHlwZT0xMDEyLHY9Zi5jb252ZXJ0KGIudHlwZSkpOzEwMjc9PT1iLmZvcm1hdCYmKHA9YS5ERVBUSF9TVEVOQ0lMLDEwMjAhPT1iLnR5cGUmJihjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBVc2UgVW5zaWduZWRJbnQyNDhUeXBlIGZvciBEZXB0aFN0ZW5jaWxGb3JtYXQgRGVwdGhUZXh0dXJlLlwiKSxiLnR5cGU9MTAyMCx2PWYuY29udmVydChiLnR5cGUpKSk7Yy50ZXhJbWFnZTJEKGEuVEVYVFVSRV8yRCwwLHAsbC53aWR0aCxsLmhlaWdodCwwLHIsXG4gICAgdixudWxsKX1lbHNlIGlmKGIuaXNEYXRhVGV4dHVyZSlpZigwPHAubGVuZ3RoJiZxKXtmb3IodmFyIEE9MCx3PXAubGVuZ3RoO0E8dztBKyspbD1wW0FdLGMudGV4SW1hZ2UyRChhLlRFWFRVUkVfMkQsQSxyLGwud2lkdGgsbC5oZWlnaHQsMCxyLHYsbC5kYXRhKTtiLmdlbmVyYXRlTWlwbWFwcz0hMX1lbHNlIGMudGV4SW1hZ2UyRChhLlRFWFRVUkVfMkQsMCxyLGwud2lkdGgsbC5oZWlnaHQsMCxyLHYsbC5kYXRhKTtlbHNlIGlmKGIuaXNDb21wcmVzc2VkVGV4dHVyZSlmb3IoQT0wLHc9cC5sZW5ndGg7QTx3O0ErKylsPXBbQV0sMTAyMyE9PWIuZm9ybWF0JiYxMDIyIT09Yi5mb3JtYXQ/LTE8Yy5nZXRDb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMoKS5pbmRleE9mKHIpP2MuY29tcHJlc3NlZFRleEltYWdlMkQoYS5URVhUVVJFXzJELEEscixsLndpZHRoLGwuaGVpZ2h0LDAsbC5kYXRhKTpjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBBdHRlbXB0IHRvIGxvYWQgdW5zdXBwb3J0ZWQgY29tcHJlc3NlZCB0ZXh0dXJlIGZvcm1hdCBpbiAudXBsb2FkVGV4dHVyZSgpXCIpOlxuICAgIGMudGV4SW1hZ2UyRChhLlRFWFRVUkVfMkQsQSxyLGwud2lkdGgsbC5oZWlnaHQsMCxyLHYsbC5kYXRhKTtlbHNlIGlmKDA8cC5sZW5ndGgmJnEpe0E9MDtmb3Iodz1wLmxlbmd0aDtBPHc7QSsrKWw9cFtBXSxjLnRleEltYWdlMkQoYS5URVhUVVJFXzJELEEscixyLHYsbCk7Yi5nZW5lcmF0ZU1pcG1hcHM9ITF9ZWxzZSBjLnRleEltYWdlMkQoYS5URVhUVVJFXzJELDAscixyLHYsbCk7bShiLHEpJiZhLmdlbmVyYXRlTWlwbWFwKGEuVEVYVFVSRV8yRCk7dS5fX3ZlcnNpb249Yi52ZXJzaW9uO2lmKGIub25VcGRhdGUpYi5vblVwZGF0ZShiKTtyZXR1cm59fWMuYWN0aXZlVGV4dHVyZShhLlRFWFRVUkUwK3EpO2MuYmluZFRleHR1cmUoYS5URVhUVVJFXzJELHUuX193ZWJnbFRleHR1cmUpfWZ1bmN0aW9uIHQoYyxnLGgpe2g/KGEudGV4UGFyYW1ldGVyaShjLGEuVEVYVFVSRV9XUkFQX1MsZi5jb252ZXJ0KGcud3JhcFMpKSxhLnRleFBhcmFtZXRlcmkoYyxhLlRFWFRVUkVfV1JBUF9ULFxuICAgIGYuY29udmVydChnLndyYXBUKSksYS50ZXhQYXJhbWV0ZXJpKGMsYS5URVhUVVJFX01BR19GSUxURVIsZi5jb252ZXJ0KGcubWFnRmlsdGVyKSksYS50ZXhQYXJhbWV0ZXJpKGMsYS5URVhUVVJFX01JTl9GSUxURVIsZi5jb252ZXJ0KGcubWluRmlsdGVyKSkpOihhLnRleFBhcmFtZXRlcmkoYyxhLlRFWFRVUkVfV1JBUF9TLGEuQ0xBTVBfVE9fRURHRSksYS50ZXhQYXJhbWV0ZXJpKGMsYS5URVhUVVJFX1dSQVBfVCxhLkNMQU1QX1RPX0VER0UpLDEwMDE9PT1nLndyYXBTJiYxMDAxPT09Zy53cmFwVHx8Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBpcyBub3QgcG93ZXIgb2YgdHdvLiBUZXh0dXJlLndyYXBTIGFuZCBUZXh0dXJlLndyYXBUIHNob3VsZCBiZSBzZXQgdG8gVEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZy5cIixnKSxhLnRleFBhcmFtZXRlcmkoYyxhLlRFWFRVUkVfTUFHX0ZJTFRFUixxKGcubWFnRmlsdGVyKSksYS50ZXhQYXJhbWV0ZXJpKGMsXG4gICAgYS5URVhUVVJFX01JTl9GSUxURVIscShnLm1pbkZpbHRlcikpLDEwMDMhPT1nLm1pbkZpbHRlciYmMTAwNiE9PWcubWluRmlsdGVyJiZjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIGlzIG5vdCBwb3dlciBvZiB0d28uIFRleHR1cmUubWluRmlsdGVyIHNob3VsZCBiZSBzZXQgdG8gVEhSRUUuTmVhcmVzdEZpbHRlciBvciBUSFJFRS5MaW5lYXJGaWx0ZXIuXCIsZykpOyEoaD1iLmdldChcIkVYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpY1wiKSl8fDEwMTU9PT1nLnR5cGUmJm51bGw9PT1iLmdldChcIk9FU190ZXh0dXJlX2Zsb2F0X2xpbmVhclwiKXx8MTAxNj09PWcudHlwZSYmbnVsbD09PWIuZ2V0KFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdF9saW5lYXJcIil8fCEoMTxnLmFuaXNvdHJvcHl8fGQuZ2V0KGcpLl9fY3VycmVudEFuaXNvdHJvcHkpfHwoYS50ZXhQYXJhbWV0ZXJmKGMsaC5URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCxNYXRoLm1pbihnLmFuaXNvdHJvcHksXG4gICAgZS5nZXRNYXhBbmlzb3Ryb3B5KCkpKSxkLmdldChnKS5fX2N1cnJlbnRBbmlzb3Ryb3B5PWcuYW5pc290cm9weSl9ZnVuY3Rpb24gbChiLGUsZyxoKXt2YXIgaz1mLmNvbnZlcnQoZS50ZXh0dXJlLmZvcm1hdCksbT1mLmNvbnZlcnQoZS50ZXh0dXJlLnR5cGUpO2MudGV4SW1hZ2UyRChoLDAsayxlLndpZHRoLGUuaGVpZ2h0LDAsayxtLG51bGwpO2EuYmluZEZyYW1lYnVmZmVyKGEuRlJBTUVCVUZGRVIsYik7YS5mcmFtZWJ1ZmZlclRleHR1cmUyRChhLkZSQU1FQlVGRkVSLGcsaCxkLmdldChlLnRleHR1cmUpLl9fd2ViZ2xUZXh0dXJlLDApO2EuYmluZEZyYW1lYnVmZmVyKGEuRlJBTUVCVUZGRVIsbnVsbCl9ZnVuY3Rpb24gcChiLGMpe2EuYmluZFJlbmRlcmJ1ZmZlcihhLlJFTkRFUkJVRkZFUixiKTtjLmRlcHRoQnVmZmVyJiYhYy5zdGVuY2lsQnVmZmVyPyhhLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoYS5SRU5ERVJCVUZGRVIsYS5ERVBUSF9DT01QT05FTlQxNixjLndpZHRoLGMuaGVpZ2h0KSxcbiAgICBhLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKGEuRlJBTUVCVUZGRVIsYS5ERVBUSF9BVFRBQ0hNRU5ULGEuUkVOREVSQlVGRkVSLGIpKTpjLmRlcHRoQnVmZmVyJiZjLnN0ZW5jaWxCdWZmZXI/KGEucmVuZGVyYnVmZmVyU3RvcmFnZShhLlJFTkRFUkJVRkZFUixhLkRFUFRIX1NURU5DSUwsYy53aWR0aCxjLmhlaWdodCksYS5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihhLkZSQU1FQlVGRkVSLGEuREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5ULGEuUkVOREVSQlVGRkVSLGIpKTphLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoYS5SRU5ERVJCVUZGRVIsYS5SR0JBNCxjLndpZHRoLGMuaGVpZ2h0KTthLmJpbmRSZW5kZXJidWZmZXIoYS5SRU5ERVJCVUZGRVIsbnVsbCl9dmFyIHo9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0JiZhIGluc3RhbmNlb2Ygd2luZG93LldlYkdMMlJlbmRlcmluZ0NvbnRleHQseT17fTt0aGlzLnNldFRleHR1cmUyRD1yO3RoaXMuc2V0VGV4dHVyZUN1YmU9XG4gICAgZnVuY3Rpb24oYixxKXt2YXIgdT1kLmdldChiKTtpZig2PT09Yi5pbWFnZS5sZW5ndGgpaWYoMDxiLnZlcnNpb24mJnUuX192ZXJzaW9uIT09Yi52ZXJzaW9uKXt1Ll9faW1hZ2VfX3dlYmdsVGV4dHVyZUN1YmV8fChiLmFkZEV2ZW50TGlzdGVuZXIoXCJkaXNwb3NlXCIsbiksdS5fX2ltYWdlX193ZWJnbFRleHR1cmVDdWJlPWEuY3JlYXRlVGV4dHVyZSgpLGcudGV4dHVyZXMrKyk7Yy5hY3RpdmVUZXh0dXJlKGEuVEVYVFVSRTArcSk7Yy5iaW5kVGV4dHVyZShhLlRFWFRVUkVfQ1VCRV9NQVAsdS5fX2ltYWdlX193ZWJnbFRleHR1cmVDdWJlKTthLnBpeGVsU3RvcmVpKGEuVU5QQUNLX0ZMSVBfWV9XRUJHTCxiLmZsaXBZKTtxPWImJmIuaXNDb21wcmVzc2VkVGV4dHVyZTtmb3IodmFyIHI9Yi5pbWFnZVswXSYmYi5pbWFnZVswXS5pc0RhdGFUZXh0dXJlLGw9W10sdj0wOzY+djt2KyspbFt2XT1xfHxyP3I/Yi5pbWFnZVt2XS5pbWFnZTpiLmltYWdlW3ZdOmgoYi5pbWFnZVt2XSxlLm1heEN1YmVtYXBTaXplKTtcbiAgICB2YXIgcD1rKGxbMF0pLHc9Zi5jb252ZXJ0KGIuZm9ybWF0KSxBPWYuY29udmVydChiLnR5cGUpO3QoYS5URVhUVVJFX0NVQkVfTUFQLGIscCk7Zm9yKHY9MDs2PnY7disrKWlmKHEpZm9yKHZhciB5LEk9bFt2XS5taXBtYXBzLHo9MCx4PUkubGVuZ3RoO3o8eDt6KyspeT1JW3pdLDEwMjMhPT1iLmZvcm1hdCYmMTAyMiE9PWIuZm9ybWF0Py0xPGMuZ2V0Q29tcHJlc3NlZFRleHR1cmVGb3JtYXRzKCkuaW5kZXhPZih3KT9jLmNvbXByZXNzZWRUZXhJbWFnZTJEKGEuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YK3Yseix3LHkud2lkdGgseS5oZWlnaHQsMCx5LmRhdGEpOmNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IEF0dGVtcHQgdG8gbG9hZCB1bnN1cHBvcnRlZCBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0IGluIC5zZXRUZXh0dXJlQ3ViZSgpXCIpOmMudGV4SW1hZ2UyRChhLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCt2LHosdyx5LndpZHRoLHkuaGVpZ2h0LFxuICAgIDAsdyxBLHkuZGF0YSk7ZWxzZSByP2MudGV4SW1hZ2UyRChhLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCt2LDAsdyxsW3ZdLndpZHRoLGxbdl0uaGVpZ2h0LDAsdyxBLGxbdl0uZGF0YSk6Yy50ZXhJbWFnZTJEKGEuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YK3YsMCx3LHcsQSxsW3ZdKTttKGIscCkmJmEuZ2VuZXJhdGVNaXBtYXAoYS5URVhUVVJFX0NVQkVfTUFQKTt1Ll9fdmVyc2lvbj1iLnZlcnNpb247aWYoYi5vblVwZGF0ZSliLm9uVXBkYXRlKGIpfWVsc2UgYy5hY3RpdmVUZXh0dXJlKGEuVEVYVFVSRTArcSksYy5iaW5kVGV4dHVyZShhLlRFWFRVUkVfQ1VCRV9NQVAsdS5fX2ltYWdlX193ZWJnbFRleHR1cmVDdWJlKX07dGhpcy5zZXRUZXh0dXJlQ3ViZUR5bmFtaWM9ZnVuY3Rpb24oYixlKXtjLmFjdGl2ZVRleHR1cmUoYS5URVhUVVJFMCtlKTtjLmJpbmRUZXh0dXJlKGEuVEVYVFVSRV9DVUJFX01BUCxkLmdldChiKS5fX3dlYmdsVGV4dHVyZSl9O3RoaXMuc2V0dXBSZW5kZXJUYXJnZXQ9XG4gICAgZnVuY3Rpb24oYil7dmFyIGU9ZC5nZXQoYiksZj1kLmdldChiLnRleHR1cmUpO2IuYWRkRXZlbnRMaXN0ZW5lcihcImRpc3Bvc2VcIix1KTtmLl9fd2ViZ2xUZXh0dXJlPWEuY3JlYXRlVGV4dHVyZSgpO2cudGV4dHVyZXMrKzt2YXIgaD0hMD09PWIuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUsbj1rKGIpO2lmKGgpe2UuX193ZWJnbEZyYW1lYnVmZmVyPVtdO2Zvcih2YXIgcT0wOzY+cTtxKyspZS5fX3dlYmdsRnJhbWVidWZmZXJbcV09YS5jcmVhdGVGcmFtZWJ1ZmZlcigpfWVsc2UgZS5fX3dlYmdsRnJhbWVidWZmZXI9YS5jcmVhdGVGcmFtZWJ1ZmZlcigpO2lmKGgpe2MuYmluZFRleHR1cmUoYS5URVhUVVJFX0NVQkVfTUFQLGYuX193ZWJnbFRleHR1cmUpO3QoYS5URVhUVVJFX0NVQkVfTUFQLGIudGV4dHVyZSxuKTtmb3IocT0wOzY+cTtxKyspbChlLl9fd2ViZ2xGcmFtZWJ1ZmZlcltxXSxiLGEuQ09MT1JfQVRUQUNITUVOVDAsYS5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1grcSk7XG4gICAgbShiLnRleHR1cmUsbikmJmEuZ2VuZXJhdGVNaXBtYXAoYS5URVhUVVJFX0NVQkVfTUFQKTtjLmJpbmRUZXh0dXJlKGEuVEVYVFVSRV9DVUJFX01BUCxudWxsKX1lbHNlIGMuYmluZFRleHR1cmUoYS5URVhUVVJFXzJELGYuX193ZWJnbFRleHR1cmUpLHQoYS5URVhUVVJFXzJELGIudGV4dHVyZSxuKSxsKGUuX193ZWJnbEZyYW1lYnVmZmVyLGIsYS5DT0xPUl9BVFRBQ0hNRU5UMCxhLlRFWFRVUkVfMkQpLG0oYi50ZXh0dXJlLG4pJiZhLmdlbmVyYXRlTWlwbWFwKGEuVEVYVFVSRV8yRCksYy5iaW5kVGV4dHVyZShhLlRFWFRVUkVfMkQsbnVsbCk7aWYoYi5kZXB0aEJ1ZmZlcil7ZT1kLmdldChiKTtmPSEwPT09Yi5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZTtpZihiLmRlcHRoVGV4dHVyZSl7aWYoZil0aHJvdyBFcnJvcihcInRhcmdldC5kZXB0aFRleHR1cmUgbm90IHN1cHBvcnRlZCBpbiBDdWJlIHJlbmRlciB0YXJnZXRzXCIpO2lmKGImJmIuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUpdGhyb3cgRXJyb3IoXCJEZXB0aCBUZXh0dXJlIHdpdGggY3ViZSByZW5kZXIgdGFyZ2V0cyBpcyBub3Qgc3VwcG9ydGVkXCIpO1xuICAgIGEuYmluZEZyYW1lYnVmZmVyKGEuRlJBTUVCVUZGRVIsZS5fX3dlYmdsRnJhbWVidWZmZXIpO2lmKCFiLmRlcHRoVGV4dHVyZXx8IWIuZGVwdGhUZXh0dXJlLmlzRGVwdGhUZXh0dXJlKXRocm93IEVycm9yKFwicmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIFRIUkVFLkRlcHRoVGV4dHVyZVwiKTtkLmdldChiLmRlcHRoVGV4dHVyZSkuX193ZWJnbFRleHR1cmUmJmIuZGVwdGhUZXh0dXJlLmltYWdlLndpZHRoPT09Yi53aWR0aCYmYi5kZXB0aFRleHR1cmUuaW1hZ2UuaGVpZ2h0PT09Yi5oZWlnaHR8fChiLmRlcHRoVGV4dHVyZS5pbWFnZS53aWR0aD1iLndpZHRoLGIuZGVwdGhUZXh0dXJlLmltYWdlLmhlaWdodD1iLmhlaWdodCxiLmRlcHRoVGV4dHVyZS5uZWVkc1VwZGF0ZT0hMCk7cihiLmRlcHRoVGV4dHVyZSwwKTtlPWQuZ2V0KGIuZGVwdGhUZXh0dXJlKS5fX3dlYmdsVGV4dHVyZTtpZigxMDI2PT09Yi5kZXB0aFRleHR1cmUuZm9ybWF0KWEuZnJhbWVidWZmZXJUZXh0dXJlMkQoYS5GUkFNRUJVRkZFUixcbiAgICBhLkRFUFRIX0FUVEFDSE1FTlQsYS5URVhUVVJFXzJELGUsMCk7ZWxzZSBpZigxMDI3PT09Yi5kZXB0aFRleHR1cmUuZm9ybWF0KWEuZnJhbWVidWZmZXJUZXh0dXJlMkQoYS5GUkFNRUJVRkZFUixhLkRFUFRIX1NURU5DSUxfQVRUQUNITUVOVCxhLlRFWFRVUkVfMkQsZSwwKTtlbHNlIHRocm93IEVycm9yKFwiVW5rbm93biBkZXB0aFRleHR1cmUgZm9ybWF0XCIpO31lbHNlIGlmKGYpZm9yKGUuX193ZWJnbERlcHRoYnVmZmVyPVtdLGY9MDs2PmY7ZisrKWEuYmluZEZyYW1lYnVmZmVyKGEuRlJBTUVCVUZGRVIsZS5fX3dlYmdsRnJhbWVidWZmZXJbZl0pLGUuX193ZWJnbERlcHRoYnVmZmVyW2ZdPWEuY3JlYXRlUmVuZGVyYnVmZmVyKCkscChlLl9fd2ViZ2xEZXB0aGJ1ZmZlcltmXSxiKTtlbHNlIGEuYmluZEZyYW1lYnVmZmVyKGEuRlJBTUVCVUZGRVIsZS5fX3dlYmdsRnJhbWVidWZmZXIpLGUuX193ZWJnbERlcHRoYnVmZmVyPWEuY3JlYXRlUmVuZGVyYnVmZmVyKCkscChlLl9fd2ViZ2xEZXB0aGJ1ZmZlcixcbiAgICBiKTthLmJpbmRGcmFtZWJ1ZmZlcihhLkZSQU1FQlVGRkVSLG51bGwpfX07dGhpcy51cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXA9ZnVuY3Rpb24oYil7dmFyIGU9Yi50ZXh0dXJlLGY9ayhiKTttKGUsZikmJihiPWIuaXNXZWJHTFJlbmRlclRhcmdldEN1YmU/YS5URVhUVVJFX0NVQkVfTUFQOmEuVEVYVFVSRV8yRCxlPWQuZ2V0KGUpLl9fd2ViZ2xUZXh0dXJlLGMuYmluZFRleHR1cmUoYixlKSxhLmdlbmVyYXRlTWlwbWFwKGIpLGMuYmluZFRleHR1cmUoYixudWxsKSl9O3RoaXMudXBkYXRlVmlkZW9UZXh0dXJlcz1mdW5jdGlvbigpe2Zvcih2YXIgYSBpbiB5KXlbYV0udXBkYXRlKCl9fWZ1bmN0aW9uIEJnKCl7dmFyIGE9e307cmV0dXJue2dldDpmdW5jdGlvbihiKXtiPWIudXVpZDt2YXIgYz1hW2JdO3ZvaWQgMD09PWMmJihjPXt9LGFbYl09Yyk7cmV0dXJuIGN9LHJlbW92ZTpmdW5jdGlvbihiKXtkZWxldGUgYVtiLnV1aWRdfSxjbGVhcjpmdW5jdGlvbigpe2E9e319fX1mdW5jdGlvbiBDZyhhLFxuICAgIGIsYyl7ZnVuY3Rpb24gZChiLGMsZCl7dmFyIGU9bmV3IFVpbnQ4QXJyYXkoNCksZj1hLmNyZWF0ZVRleHR1cmUoKTthLmJpbmRUZXh0dXJlKGIsZik7YS50ZXhQYXJhbWV0ZXJpKGIsYS5URVhUVVJFX01JTl9GSUxURVIsYS5ORUFSRVNUKTthLnRleFBhcmFtZXRlcmkoYixhLlRFWFRVUkVfTUFHX0ZJTFRFUixhLk5FQVJFU1QpO2ZvcihiPTA7YjxkO2IrKylhLnRleEltYWdlMkQoYytiLDAsYS5SR0JBLDEsMSwwLGEuUkdCQSxhLlVOU0lHTkVEX0JZVEUsZSk7cmV0dXJuIGZ9ZnVuY3Rpb24gZShiKXshMCE9PXlbYl0mJihhLmVuYWJsZShiKSx5W2JdPSEwKX1mdW5jdGlvbiBmKGIpeyExIT09eVtiXSYmKGEuZGlzYWJsZShiKSx5W2JdPSExKX1mdW5jdGlvbiBnKGIsZCxnLGgsayxtLHEsbil7MCE9PWI/ZShhLkJMRU5EKTpmKGEuQkxFTkQpO2lmKDUhPT1iKXtpZihiIT09Snx8biE9PWxhKXN3aXRjaChiKXtjYXNlIDI6bj8oYS5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoYS5GVU5DX0FERCxcbiAgICBhLkZVTkNfQUREKSxhLmJsZW5kRnVuY1NlcGFyYXRlKGEuT05FLGEuT05FLGEuT05FLGEuT05FKSk6KGEuYmxlbmRFcXVhdGlvbihhLkZVTkNfQUREKSxhLmJsZW5kRnVuYyhhLlNSQ19BTFBIQSxhLk9ORSkpO2JyZWFrO2Nhc2UgMzpuPyhhLmJsZW5kRXF1YXRpb25TZXBhcmF0ZShhLkZVTkNfQURELGEuRlVOQ19BREQpLGEuYmxlbmRGdW5jU2VwYXJhdGUoYS5aRVJPLGEuWkVSTyxhLk9ORV9NSU5VU19TUkNfQ09MT1IsYS5PTkVfTUlOVVNfU1JDX0FMUEhBKSk6KGEuYmxlbmRFcXVhdGlvbihhLkZVTkNfQUREKSxhLmJsZW5kRnVuYyhhLlpFUk8sYS5PTkVfTUlOVVNfU1JDX0NPTE9SKSk7YnJlYWs7Y2FzZSA0Om4/KGEuYmxlbmRFcXVhdGlvblNlcGFyYXRlKGEuRlVOQ19BREQsYS5GVU5DX0FERCksYS5ibGVuZEZ1bmNTZXBhcmF0ZShhLlpFUk8sYS5TUkNfQ09MT1IsYS5aRVJPLGEuU1JDX0FMUEhBKSk6KGEuYmxlbmRFcXVhdGlvbihhLkZVTkNfQUREKSxhLmJsZW5kRnVuYyhhLlpFUk8sXG4gICAgYS5TUkNfQ09MT1IpKTticmVhaztkZWZhdWx0Om4/KGEuYmxlbmRFcXVhdGlvblNlcGFyYXRlKGEuRlVOQ19BREQsYS5GVU5DX0FERCksYS5ibGVuZEZ1bmNTZXBhcmF0ZShhLk9ORSxhLk9ORV9NSU5VU19TUkNfQUxQSEEsYS5PTkUsYS5PTkVfTUlOVVNfU1JDX0FMUEhBKSk6KGEuYmxlbmRFcXVhdGlvblNlcGFyYXRlKGEuRlVOQ19BREQsYS5GVU5DX0FERCksYS5ibGVuZEZ1bmNTZXBhcmF0ZShhLlNSQ19BTFBIQSxhLk9ORV9NSU5VU19TUkNfQUxQSEEsYS5PTkUsYS5PTkVfTUlOVVNfU1JDX0FMUEhBKSl9SD1FPUM9RD1CPXg9bnVsbH1lbHNle2s9a3x8ZDttPW18fGc7cT1xfHxoO2lmKGQhPT14fHxrIT09QylhLmJsZW5kRXF1YXRpb25TZXBhcmF0ZShjLmNvbnZlcnQoZCksYy5jb252ZXJ0KGspKSx4PWQsQz1rO2lmKGchPT1CfHxoIT09RHx8bSE9PUV8fHEhPT1IKWEuYmxlbmRGdW5jU2VwYXJhdGUoYy5jb252ZXJ0KGcpLGMuY29udmVydChoKSxjLmNvbnZlcnQobSksYy5jb252ZXJ0KHEpKSxcbiAgICBCPWcsRD1oLEU9bSxIPXF9Sj1iO2xhPW59ZnVuY3Rpb24gaChiKXtTIT09YiYmKGI/YS5mcm9udEZhY2UoYS5DVyk6YS5mcm9udEZhY2UoYS5DQ1cpLFM9Yil9ZnVuY3Rpb24gayhiKXswIT09Yj8oZShhLkNVTExfRkFDRSksYiE9PUsmJigxPT09Yj9hLmN1bGxGYWNlKGEuQkFDSyk6Mj09PWI/YS5jdWxsRmFjZShhLkZST05UKTphLmN1bGxGYWNlKGEuRlJPTlRfQU5EX0JBQ0spKSk6ZihhLkNVTExfRkFDRSk7Sz1ifWZ1bmN0aW9uIG0oYixjLGQpe2lmKGIpe2lmKGUoYS5QT0xZR09OX09GRlNFVF9GSUxMKSxMIT09Y3x8TyE9PWQpYS5wb2x5Z29uT2Zmc2V0KGMsZCksTD1jLE89ZH1lbHNlIGYoYS5QT0xZR09OX09GRlNFVF9GSUxMKX1mdW5jdGlvbiBxKGIpe3ZvaWQgMD09PWImJihiPWEuVEVYVFVSRTArUS0xKTtNIT09YiYmKGEuYWN0aXZlVGV4dHVyZShiKSxNPWIpfXZhciBuPW5ldyBmdW5jdGlvbigpe3ZhciBiPSExLGM9bmV3IGFhLGQ9bnVsbCxlPW5ldyBhYSgwLDAsMCwwKTtcbiAgICByZXR1cm57c2V0TWFzazpmdW5jdGlvbihjKXtkPT09Y3x8Ynx8KGEuY29sb3JNYXNrKGMsYyxjLGMpLGQ9Yyl9LHNldExvY2tlZDpmdW5jdGlvbihhKXtiPWF9LHNldENsZWFyOmZ1bmN0aW9uKGIsZCxmLGcsaCl7ITA9PT1oJiYoYio9ZyxkKj1nLGYqPWcpO2Muc2V0KGIsZCxmLGcpOyExPT09ZS5lcXVhbHMoYykmJihhLmNsZWFyQ29sb3IoYixkLGYsZyksZS5jb3B5KGMpKX0scmVzZXQ6ZnVuY3Rpb24oKXtiPSExO2Q9bnVsbDtlLnNldCgtMSwwLDAsMCl9fX0sdT1uZXcgZnVuY3Rpb24oKXt2YXIgYj0hMSxjPW51bGwsZD1udWxsLGc9bnVsbDtyZXR1cm57c2V0VGVzdDpmdW5jdGlvbihiKXtiP2UoYS5ERVBUSF9URVNUKTpmKGEuREVQVEhfVEVTVCl9LHNldE1hc2s6ZnVuY3Rpb24oZCl7Yz09PWR8fGJ8fChhLmRlcHRoTWFzayhkKSxjPWQpfSxzZXRGdW5jOmZ1bmN0aW9uKGIpe2lmKGQhPT1iKXtpZihiKXN3aXRjaChiKXtjYXNlIDA6YS5kZXB0aEZ1bmMoYS5ORVZFUik7YnJlYWs7XG4gICAgY2FzZSAxOmEuZGVwdGhGdW5jKGEuQUxXQVlTKTticmVhaztjYXNlIDI6YS5kZXB0aEZ1bmMoYS5MRVNTKTticmVhaztjYXNlIDM6YS5kZXB0aEZ1bmMoYS5MRVFVQUwpO2JyZWFrO2Nhc2UgNDphLmRlcHRoRnVuYyhhLkVRVUFMKTticmVhaztjYXNlIDU6YS5kZXB0aEZ1bmMoYS5HRVFVQUwpO2JyZWFrO2Nhc2UgNjphLmRlcHRoRnVuYyhhLkdSRUFURVIpO2JyZWFrO2Nhc2UgNzphLmRlcHRoRnVuYyhhLk5PVEVRVUFMKTticmVhaztkZWZhdWx0OmEuZGVwdGhGdW5jKGEuTEVRVUFMKX1lbHNlIGEuZGVwdGhGdW5jKGEuTEVRVUFMKTtkPWJ9fSxzZXRMb2NrZWQ6ZnVuY3Rpb24oYSl7Yj1hfSxzZXRDbGVhcjpmdW5jdGlvbihiKXtnIT09YiYmKGEuY2xlYXJEZXB0aChiKSxnPWIpfSxyZXNldDpmdW5jdGlvbigpe2I9ITE7Zz1kPWM9bnVsbH19fSxyPW5ldyBmdW5jdGlvbigpe3ZhciBiPSExLGM9bnVsbCxkPW51bGwsZz1udWxsLGg9bnVsbCxrPW51bGwsbT1udWxsLG49bnVsbCxxPW51bGw7XG4gICAgcmV0dXJue3NldFRlc3Q6ZnVuY3Rpb24oYil7Yj9lKGEuU1RFTkNJTF9URVNUKTpmKGEuU1RFTkNJTF9URVNUKX0sc2V0TWFzazpmdW5jdGlvbihkKXtjPT09ZHx8Ynx8KGEuc3RlbmNpbE1hc2soZCksYz1kKX0sc2V0RnVuYzpmdW5jdGlvbihiLGMsZSl7aWYoZCE9PWJ8fGchPT1jfHxoIT09ZSlhLnN0ZW5jaWxGdW5jKGIsYyxlKSxkPWIsZz1jLGg9ZX0sc2V0T3A6ZnVuY3Rpb24oYixjLGQpe2lmKGshPT1ifHxtIT09Y3x8biE9PWQpYS5zdGVuY2lsT3AoYixjLGQpLGs9YixtPWMsbj1kfSxzZXRMb2NrZWQ6ZnVuY3Rpb24oYSl7Yj1hfSxzZXRDbGVhcjpmdW5jdGlvbihiKXtxIT09YiYmKGEuY2xlYXJTdGVuY2lsKGIpLHE9Yil9LHJlc2V0OmZ1bmN0aW9uKCl7Yj0hMTtxPW49bT1rPWg9Zz1kPWM9bnVsbH19fSxsPWEuZ2V0UGFyYW1ldGVyKGEuTUFYX1ZFUlRFWF9BVFRSSUJTKSx2PW5ldyBVaW50OEFycmF5KGwpLHA9bmV3IFVpbnQ4QXJyYXkobCksej1uZXcgVWludDhBcnJheShsKSxcbiAgICB5PXt9LEk9bnVsbCxBPW51bGwsSj1udWxsLHg9bnVsbCxCPW51bGwsRD1udWxsLEM9bnVsbCxFPW51bGwsSD1udWxsLGxhPSExLFM9bnVsbCxLPW51bGwsTj1udWxsLEw9bnVsbCxPPW51bGwsUT1hLmdldFBhcmFtZXRlcihhLk1BWF9DT01CSU5FRF9URVhUVVJFX0lNQUdFX1VOSVRTKSxsPXBhcnNlRmxvYXQoL15XZWJHTFxcIChbMC05XSkvLmV4ZWMoYS5nZXRQYXJhbWV0ZXIoYS5WRVJTSU9OKSlbMV0pLFY9MTw9cGFyc2VGbG9hdChsKSxNPW51bGwsUD17fSxSPW5ldyBhYSxHPW5ldyBhYSxZPXt9O1lbYS5URVhUVVJFXzJEXT1kKGEuVEVYVFVSRV8yRCxhLlRFWFRVUkVfMkQsMSk7WVthLlRFWFRVUkVfQ1VCRV9NQVBdPWQoYS5URVhUVVJFX0NVQkVfTUFQLGEuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YLDYpO24uc2V0Q2xlYXIoMCwwLDAsMSk7dS5zZXRDbGVhcigxKTtyLnNldENsZWFyKDApO2UoYS5ERVBUSF9URVNUKTt1LnNldEZ1bmMoMyk7aCghMSk7aygxKTtlKGEuQ1VMTF9GQUNFKTtcbiAgICBlKGEuQkxFTkQpO2coMSk7cmV0dXJue2J1ZmZlcnM6e2NvbG9yOm4sZGVwdGg6dSxzdGVuY2lsOnJ9LGluaXRBdHRyaWJ1dGVzOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPTAsYj12Lmxlbmd0aDthPGI7YSsrKXZbYV09MH0sZW5hYmxlQXR0cmlidXRlOmZ1bmN0aW9uKGMpe3ZbY109MTswPT09cFtjXSYmKGEuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoYykscFtjXT0xKTswIT09eltjXSYmKGIuZ2V0KFwiQU5HTEVfaW5zdGFuY2VkX2FycmF5c1wiKS52ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUoYywwKSx6W2NdPTApfSxlbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yOmZ1bmN0aW9uKGMsZCl7dltjXT0xOzA9PT1wW2NdJiYoYS5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShjKSxwW2NdPTEpO3pbY10hPT1kJiYoYi5nZXQoXCJBTkdMRV9pbnN0YW5jZWRfYXJyYXlzXCIpLnZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRShjLGQpLHpbY109ZCl9LGRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzOmZ1bmN0aW9uKCl7Zm9yKHZhciBiPVxuICAgIDAsYz1wLmxlbmd0aDtiIT09YzsrK2IpcFtiXSE9PXZbYl0mJihhLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheShiKSxwW2JdPTApfSxlbmFibGU6ZSxkaXNhYmxlOmYsZ2V0Q29tcHJlc3NlZFRleHR1cmVGb3JtYXRzOmZ1bmN0aW9uKCl7aWYobnVsbD09PUkmJihJPVtdLGIuZ2V0KFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpfHxiLmdldChcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXCIpfHxiLmdldChcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxXCIpKSlmb3IodmFyIGM9YS5nZXRQYXJhbWV0ZXIoYS5DT01QUkVTU0VEX1RFWFRVUkVfRk9STUFUUyksZD0wO2Q8Yy5sZW5ndGg7ZCsrKUkucHVzaChjW2RdKTtyZXR1cm4gSX0sdXNlUHJvZ3JhbTpmdW5jdGlvbihiKXtyZXR1cm4gQSE9PWI/KGEudXNlUHJvZ3JhbShiKSxBPWIsITApOiExfSxzZXRCbGVuZGluZzpnLHNldE1hdGVyaWFsOmZ1bmN0aW9uKGIsYyl7Mj09PWIuc2lkZT9mKGEuQ1VMTF9GQUNFKTpcbiAgICBlKGEuQ1VMTF9GQUNFKTt2YXIgZD0xPT09Yi5zaWRlO2MmJihkPSFkKTtoKGQpOyEwPT09Yi50cmFuc3BhcmVudD9nKGIuYmxlbmRpbmcsYi5ibGVuZEVxdWF0aW9uLGIuYmxlbmRTcmMsYi5ibGVuZERzdCxiLmJsZW5kRXF1YXRpb25BbHBoYSxiLmJsZW5kU3JjQWxwaGEsYi5ibGVuZERzdEFscGhhLGIucHJlbXVsdGlwbGllZEFscGhhKTpnKDApO3Uuc2V0RnVuYyhiLmRlcHRoRnVuYyk7dS5zZXRUZXN0KGIuZGVwdGhUZXN0KTt1LnNldE1hc2soYi5kZXB0aFdyaXRlKTtuLnNldE1hc2soYi5jb2xvcldyaXRlKTttKGIucG9seWdvbk9mZnNldCxiLnBvbHlnb25PZmZzZXRGYWN0b3IsYi5wb2x5Z29uT2Zmc2V0VW5pdHMpfSxzZXRGbGlwU2lkZWQ6aCxzZXRDdWxsRmFjZTprLHNldExpbmVXaWR0aDpmdW5jdGlvbihiKXtiIT09TiYmKFYmJmEubGluZVdpZHRoKGIpLE49Yil9LHNldFBvbHlnb25PZmZzZXQ6bSxzZXRTY2lzc29yVGVzdDpmdW5jdGlvbihiKXtiP2UoYS5TQ0lTU09SX1RFU1QpOlxuICAgIGYoYS5TQ0lTU09SX1RFU1QpfSxhY3RpdmVUZXh0dXJlOnEsYmluZFRleHR1cmU6ZnVuY3Rpb24oYixjKXtudWxsPT09TSYmcSgpO3ZhciBkPVBbTV07dm9pZCAwPT09ZCYmKGQ9e3R5cGU6dm9pZCAwLHRleHR1cmU6dm9pZCAwfSxQW01dPWQpO2lmKGQudHlwZSE9PWJ8fGQudGV4dHVyZSE9PWMpYS5iaW5kVGV4dHVyZShiLGN8fFlbYl0pLGQudHlwZT1iLGQudGV4dHVyZT1jfSxjb21wcmVzc2VkVGV4SW1hZ2UyRDpmdW5jdGlvbigpe3RyeXthLmNvbXByZXNzZWRUZXhJbWFnZTJELmFwcGx5KGEsYXJndW1lbnRzKX1jYXRjaChlYSl7Y29uc29sZS5lcnJvcihcIlRIUkVFLldlYkdMU3RhdGU6XCIsZWEpfX0sdGV4SW1hZ2UyRDpmdW5jdGlvbigpe3RyeXthLnRleEltYWdlMkQuYXBwbHkoYSxhcmd1bWVudHMpfWNhdGNoKGVhKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuV2ViR0xTdGF0ZTpcIixlYSl9fSxzY2lzc29yOmZ1bmN0aW9uKGIpeyExPT09Ui5lcXVhbHMoYikmJihhLnNjaXNzb3IoYi54LFxuICAgIGIueSxiLnosYi53KSxSLmNvcHkoYikpfSx2aWV3cG9ydDpmdW5jdGlvbihiKXshMT09PUcuZXF1YWxzKGIpJiYoYS52aWV3cG9ydChiLngsYi55LGIueixiLncpLEcuY29weShiKSl9LHJlc2V0OmZ1bmN0aW9uKCl7Zm9yKHZhciBiPTA7YjxwLmxlbmd0aDtiKyspMT09PXBbYl0mJihhLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheShiKSxwW2JdPTApO3k9e307TT1JPW51bGw7UD17fTtLPVM9Sj1BPW51bGw7bi5yZXNldCgpO3UucmVzZXQoKTtyLnJlc2V0KCl9fX1mdW5jdGlvbiBEZyhhLGIsYyl7ZnVuY3Rpb24gZChiKXtpZihcImhpZ2hwXCI9PT1iKXtpZigwPGEuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KGEuVkVSVEVYX1NIQURFUixhLkhJR0hfRkxPQVQpLnByZWNpc2lvbiYmMDxhLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdChhLkZSQUdNRU5UX1NIQURFUixhLkhJR0hfRkxPQVQpLnByZWNpc2lvbilyZXR1cm5cImhpZ2hwXCI7Yj1cIm1lZGl1bXBcIn1yZXR1cm5cIm1lZGl1bXBcIj09PWImJlxuICAgIDA8YS5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoYS5WRVJURVhfU0hBREVSLGEuTUVESVVNX0ZMT0FUKS5wcmVjaXNpb24mJjA8YS5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoYS5GUkFHTUVOVF9TSEFERVIsYS5NRURJVU1fRkxPQVQpLnByZWNpc2lvbj9cIm1lZGl1bXBcIjpcImxvd3BcIn12YXIgZSxmPXZvaWQgMCE9PWMucHJlY2lzaW9uP2MucHJlY2lzaW9uOlwiaGlnaHBcIixnPWQoZik7ZyE9PWYmJihjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOlwiLGYsXCJub3Qgc3VwcG9ydGVkLCB1c2luZ1wiLGcsXCJpbnN0ZWFkLlwiKSxmPWcpO2M9ITA9PT1jLmxvZ2FyaXRobWljRGVwdGhCdWZmZXI7dmFyIGc9YS5nZXRQYXJhbWV0ZXIoYS5NQVhfVEVYVFVSRV9JTUFHRV9VTklUUyksaD1hLmdldFBhcmFtZXRlcihhLk1BWF9WRVJURVhfVEVYVFVSRV9JTUFHRV9VTklUUyksaz1hLmdldFBhcmFtZXRlcihhLk1BWF9URVhUVVJFX1NJWkUpLG09YS5nZXRQYXJhbWV0ZXIoYS5NQVhfQ1VCRV9NQVBfVEVYVFVSRV9TSVpFKSxcbiAgICBxPWEuZ2V0UGFyYW1ldGVyKGEuTUFYX1ZFUlRFWF9BVFRSSUJTKSxuPWEuZ2V0UGFyYW1ldGVyKGEuTUFYX1ZFUlRFWF9VTklGT1JNX1ZFQ1RPUlMpLHU9YS5nZXRQYXJhbWV0ZXIoYS5NQVhfVkFSWUlOR19WRUNUT1JTKSxyPWEuZ2V0UGFyYW1ldGVyKGEuTUFYX0ZSQUdNRU5UX1VOSUZPUk1fVkVDVE9SUyksbD0wPGgsdj0hIWIuZ2V0KFwiT0VTX3RleHR1cmVfZmxvYXRcIik7cmV0dXJue2dldE1heEFuaXNvdHJvcHk6ZnVuY3Rpb24oKXtpZih2b2lkIDAhPT1lKXJldHVybiBlO3ZhciBjPWIuZ2V0KFwiRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljXCIpO3JldHVybiBlPW51bGwhPT1jP2EuZ2V0UGFyYW1ldGVyKGMuTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUKTowfSxnZXRNYXhQcmVjaXNpb246ZCxwcmVjaXNpb246Zixsb2dhcml0aG1pY0RlcHRoQnVmZmVyOmMsbWF4VGV4dHVyZXM6ZyxtYXhWZXJ0ZXhUZXh0dXJlczpoLG1heFRleHR1cmVTaXplOmssbWF4Q3ViZW1hcFNpemU6bSxcbiAgICBtYXhBdHRyaWJ1dGVzOnEsbWF4VmVydGV4VW5pZm9ybXM6bixtYXhWYXJ5aW5nczp1LG1heEZyYWdtZW50VW5pZm9ybXM6cix2ZXJ0ZXhUZXh0dXJlczpsLGZsb2F0RnJhZ21lbnRUZXh0dXJlczp2LGZsb2F0VmVydGV4VGV4dHVyZXM6bCYmdn19ZnVuY3Rpb24gYmEoYSxiLGMsZCl7VGEuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJQZXJzcGVjdGl2ZUNhbWVyYVwiO3RoaXMuZm92PXZvaWQgMCE9PWE/YTo1MDt0aGlzLnpvb209MTt0aGlzLm5lYXI9dm9pZCAwIT09Yz9jOi4xO3RoaXMuZmFyPXZvaWQgMCE9PWQ/ZDoyRTM7dGhpcy5mb2N1cz0xMDt0aGlzLmFzcGVjdD12b2lkIDAhPT1iP2I6MTt0aGlzLnZpZXc9bnVsbDt0aGlzLmZpbG1HYXVnZT0zNTt0aGlzLmZpbG1PZmZzZXQ9MDt0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKX1mdW5jdGlvbiB1ZChhKXtiYS5jYWxsKHRoaXMpO3RoaXMuY2FtZXJhcz1hfHxbXX1mdW5jdGlvbiBiZShhKXtmdW5jdGlvbiBiKCl7aWYobnVsbCE9PVxuICAgIGQmJmQuaXNQcmVzZW50aW5nKXt2YXIgYj1kLmdldEV5ZVBhcmFtZXRlcnMoXCJsZWZ0XCIpLGU9Yi5yZW5kZXJXaWR0aCxiPWIucmVuZGVySGVpZ2h0O249YS5nZXRQaXhlbFJhdGlvKCk7cT1hLmdldFNpemUoKTthLnNldERyYXdpbmdCdWZmZXJTaXplKDIqZSxiLDEpfWVsc2UgYy5lbmFibGVkJiZhLnNldERyYXdpbmdCdWZmZXJTaXplKHEud2lkdGgscS5oZWlnaHQsbil9dmFyIGM9dGhpcyxkPW51bGwsZT1udWxsLGY9bnVsbDtcInVuZGVmaW5lZFwiIT09dHlwZW9mIHdpbmRvdyYmXCJWUkZyYW1lRGF0YVwiaW4gd2luZG93JiYoZT1uZXcgd2luZG93LlZSRnJhbWVEYXRhKTt2YXIgZz1uZXcgTyxoPW5ldyBiYTtoLmJvdW5kcz1uZXcgYWEoMCwwLC41LDEpO2gubGF5ZXJzLmVuYWJsZSgxKTt2YXIgaz1uZXcgYmE7ay5ib3VuZHM9bmV3IGFhKC41LDAsLjUsMSk7ay5sYXllcnMuZW5hYmxlKDIpO3ZhciBtPW5ldyB1ZChbaCxrXSk7bS5sYXllcnMuZW5hYmxlKDEpO20ubGF5ZXJzLmVuYWJsZSgyKTtcbiAgICB2YXIgcSxuO1widW5kZWZpbmVkXCIhPT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInZyZGlzcGxheXByZXNlbnRjaGFuZ2VcIixiLCExKTt0aGlzLmVuYWJsZWQ9ITE7dGhpcy5nZXREZXZpY2U9ZnVuY3Rpb24oKXtyZXR1cm4gZH07dGhpcy5zZXREZXZpY2U9ZnVuY3Rpb24oYSl7dm9pZCAwIT09YSYmKGQ9YSl9O3RoaXMuc2V0UG9zZVRhcmdldD1mdW5jdGlvbihhKXt2b2lkIDAhPT1hJiYoZj1hKX07dGhpcy5nZXRDYW1lcmE9ZnVuY3Rpb24oYSl7aWYobnVsbD09PWQpcmV0dXJuIGE7ZC5kZXB0aE5lYXI9YS5uZWFyO2QuZGVwdGhGYXI9YS5mYXI7ZC5nZXRGcmFtZURhdGEoZSk7dmFyIGI9ZS5wb3NlLGM9bnVsbCE9PWY/ZjphO251bGwhPT1iLnBvc2l0aW9uP2MucG9zaXRpb24uZnJvbUFycmF5KGIucG9zaXRpb24pOmMucG9zaXRpb24uc2V0KDAsMCwwKTtudWxsIT09Yi5vcmllbnRhdGlvbiYmYy5xdWF0ZXJuaW9uLmZyb21BcnJheShiLm9yaWVudGF0aW9uKTtcbiAgICBjLnVwZGF0ZU1hdHJpeFdvcmxkKCk7aWYoITE9PT1kLmlzUHJlc2VudGluZylyZXR1cm4gYTtoLm5lYXI9YS5uZWFyO2submVhcj1hLm5lYXI7aC5mYXI9YS5mYXI7ay5mYXI9YS5mYXI7bS5tYXRyaXhXb3JsZC5jb3B5KGEubWF0cml4V29ybGQpO20ubWF0cml4V29ybGRJbnZlcnNlLmNvcHkoYS5tYXRyaXhXb3JsZEludmVyc2UpO2gubWF0cml4V29ybGRJbnZlcnNlLmZyb21BcnJheShlLmxlZnRWaWV3TWF0cml4KTtrLm1hdHJpeFdvcmxkSW52ZXJzZS5mcm9tQXJyYXkoZS5yaWdodFZpZXdNYXRyaXgpO2E9Yy5wYXJlbnQ7bnVsbCE9PWEmJihnLmdldEludmVyc2UoYS5tYXRyaXhXb3JsZCksaC5tYXRyaXhXb3JsZEludmVyc2UubXVsdGlwbHkoZyksay5tYXRyaXhXb3JsZEludmVyc2UubXVsdGlwbHkoZykpO2gubWF0cml4V29ybGQuZ2V0SW52ZXJzZShoLm1hdHJpeFdvcmxkSW52ZXJzZSk7ay5tYXRyaXhXb3JsZC5nZXRJbnZlcnNlKGsubWF0cml4V29ybGRJbnZlcnNlKTtoLnByb2plY3Rpb25NYXRyaXguZnJvbUFycmF5KGUubGVmdFByb2plY3Rpb25NYXRyaXgpO1xuICAgIGsucHJvamVjdGlvbk1hdHJpeC5mcm9tQXJyYXkoZS5yaWdodFByb2plY3Rpb25NYXRyaXgpO20ucHJvamVjdGlvbk1hdHJpeC5jb3B5KGgucHJvamVjdGlvbk1hdHJpeCk7YT1kLmdldExheWVycygpO2EubGVuZ3RoJiYoYT1hWzBdLG51bGwhPT1hLmxlZnRCb3VuZHMmJjQ9PT1hLmxlZnRCb3VuZHMubGVuZ3RoJiZoLmJvdW5kcy5mcm9tQXJyYXkoYS5sZWZ0Qm91bmRzKSxudWxsIT09YS5yaWdodEJvdW5kcyYmND09PWEucmlnaHRCb3VuZHMubGVuZ3RoJiZrLmJvdW5kcy5mcm9tQXJyYXkoYS5yaWdodEJvdW5kcykpO3JldHVybiBtfTt0aGlzLnN1Ym1pdEZyYW1lPWZ1bmN0aW9uKCl7ZCYmZC5pc1ByZXNlbnRpbmcmJmQuc3VibWl0RnJhbWUoKX07dGhpcy5kaXNwb3NlPWZ1bmN0aW9uKCl7XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidnJkaXNwbGF5cHJlc2VudGNoYW5nZVwiLGIpfX1mdW5jdGlvbiBFZyhhKXt2YXIgYj17fTtcbiAgICByZXR1cm57Z2V0OmZ1bmN0aW9uKGMpe2lmKHZvaWQgMCE9PWJbY10pcmV0dXJuIGJbY107c3dpdGNoKGMpe2Nhc2UgXCJXRUJHTF9kZXB0aF90ZXh0dXJlXCI6dmFyIGQ9YS5nZXRFeHRlbnNpb24oXCJXRUJHTF9kZXB0aF90ZXh0dXJlXCIpfHxhLmdldEV4dGVuc2lvbihcIk1PWl9XRUJHTF9kZXB0aF90ZXh0dXJlXCIpfHxhLmdldEV4dGVuc2lvbihcIldFQktJVF9XRUJHTF9kZXB0aF90ZXh0dXJlXCIpO2JyZWFrO2Nhc2UgXCJFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIjpkPWEuZ2V0RXh0ZW5zaW9uKFwiRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljXCIpfHxhLmdldEV4dGVuc2lvbihcIk1PWl9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWNcIil8fGEuZ2V0RXh0ZW5zaW9uKFwiV0VCS0lUX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpY1wiKTticmVhaztjYXNlIFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcIjpkPWEuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcIil8fFxuICAgIGEuZ2V0RXh0ZW5zaW9uKFwiTU9aX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXCIpfHxhLmdldEV4dGVuc2lvbihcIldFQktJVF9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y1wiKTticmVhaztjYXNlIFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCI6ZD1hLmdldEV4dGVuc2lvbihcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0Y1wiKXx8YS5nZXRFeHRlbnNpb24oXCJXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpO2JyZWFrO2Nhc2UgXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjMVwiOmQ9YS5nZXRFeHRlbnNpb24oXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjMVwiKTticmVhaztkZWZhdWx0OmQ9YS5nZXRFeHRlbnNpb24oYyl9bnVsbD09PWQmJmNvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IFwiK2MrXCIgZXh0ZW5zaW9uIG5vdCBzdXBwb3J0ZWQuXCIpO3JldHVybiBiW2NdPWR9fX1mdW5jdGlvbiBGZygpe2Z1bmN0aW9uIGEoKXttLnZhbHVlIT09XG4gICAgZCYmKG0udmFsdWU9ZCxtLm5lZWRzVXBkYXRlPTA8ZSk7Yy5udW1QbGFuZXM9ZTtjLm51bUludGVyc2VjdGlvbj0wfWZ1bmN0aW9uIGIoYSxiLGQsZSl7dmFyIGY9bnVsbCE9PWE/YS5sZW5ndGg6MCxnPW51bGw7aWYoMCE9PWYpe2c9bS52YWx1ZTtpZighMCE9PWV8fG51bGw9PT1nKXtlPWQrNCpmO2I9Yi5tYXRyaXhXb3JsZEludmVyc2U7ay5nZXROb3JtYWxNYXRyaXgoYik7aWYobnVsbD09PWd8fGcubGVuZ3RoPGUpZz1uZXcgRmxvYXQzMkFycmF5KGUpO2ZvcihlPTA7ZSE9PWY7KytlLGQrPTQpaC5jb3B5KGFbZV0pLmFwcGx5TWF0cml4NChiLGspLGgubm9ybWFsLnRvQXJyYXkoZyxkKSxnW2QrM109aC5jb25zdGFudH1tLnZhbHVlPWc7bS5uZWVkc1VwZGF0ZT0hMH1jLm51bVBsYW5lcz1mO3JldHVybiBnfXZhciBjPXRoaXMsZD1udWxsLGU9MCxmPSExLGc9ITEsaD1uZXcgRWEsaz1uZXcgbWEsbT17dmFsdWU6bnVsbCxuZWVkc1VwZGF0ZTohMX07dGhpcy51bmlmb3JtPW07dGhpcy5udW1JbnRlcnNlY3Rpb249XG4gICAgdGhpcy5udW1QbGFuZXM9MDt0aGlzLmluaXQ9ZnVuY3Rpb24oYSxjLGcpe3ZhciBoPTAhPT1hLmxlbmd0aHx8Y3x8MCE9PWV8fGY7Zj1jO2Q9YihhLGcsMCk7ZT1hLmxlbmd0aDtyZXR1cm4gaH07dGhpcy5iZWdpblNoYWRvd3M9ZnVuY3Rpb24oKXtnPSEwO2IobnVsbCl9O3RoaXMuZW5kU2hhZG93cz1mdW5jdGlvbigpe2c9ITE7YSgpfTt0aGlzLnNldFN0YXRlPWZ1bmN0aW9uKGMsaCxrLGwsdCx2KXtpZighZnx8bnVsbD09PWN8fDA9PT1jLmxlbmd0aHx8ZyYmIWspZz9iKG51bGwpOmEoKTtlbHNle2s9Zz8wOmU7dmFyIG49NCprLHE9dC5jbGlwcGluZ1N0YXRlfHxudWxsO20udmFsdWU9cTtxPWIoYyxsLG4sdik7Zm9yKGM9MDtjIT09bjsrK2MpcVtjXT1kW2NdO3QuY2xpcHBpbmdTdGF0ZT1xO3RoaXMubnVtSW50ZXJzZWN0aW9uPWg/dGhpcy5udW1QbGFuZXM6MDt0aGlzLm51bVBsYW5lcys9a319fWZ1bmN0aW9uIGFmKGEsYil7cmV0dXJue2NvbnZlcnQ6ZnVuY3Rpb24oYyl7aWYoMUUzPT09XG4gICAgYylyZXR1cm4gYS5SRVBFQVQ7aWYoMTAwMT09PWMpcmV0dXJuIGEuQ0xBTVBfVE9fRURHRTtpZigxMDAyPT09YylyZXR1cm4gYS5NSVJST1JFRF9SRVBFQVQ7aWYoMTAwMz09PWMpcmV0dXJuIGEuTkVBUkVTVDtpZigxMDA0PT09YylyZXR1cm4gYS5ORUFSRVNUX01JUE1BUF9ORUFSRVNUO2lmKDEwMDU9PT1jKXJldHVybiBhLk5FQVJFU1RfTUlQTUFQX0xJTkVBUjtpZigxMDA2PT09YylyZXR1cm4gYS5MSU5FQVI7aWYoMTAwNz09PWMpcmV0dXJuIGEuTElORUFSX01JUE1BUF9ORUFSRVNUO2lmKDEwMDg9PT1jKXJldHVybiBhLkxJTkVBUl9NSVBNQVBfTElORUFSO2lmKDEwMDk9PT1jKXJldHVybiBhLlVOU0lHTkVEX0JZVEU7aWYoMTAxNz09PWMpcmV0dXJuIGEuVU5TSUdORURfU0hPUlRfNF80XzRfNDtpZigxMDE4PT09YylyZXR1cm4gYS5VTlNJR05FRF9TSE9SVF81XzVfNV8xO2lmKDEwMTk9PT1jKXJldHVybiBhLlVOU0lHTkVEX1NIT1JUXzVfNl81O2lmKDEwMTA9PT1jKXJldHVybiBhLkJZVEU7XG4gICAgaWYoMTAxMT09PWMpcmV0dXJuIGEuU0hPUlQ7aWYoMTAxMj09PWMpcmV0dXJuIGEuVU5TSUdORURfU0hPUlQ7aWYoMTAxMz09PWMpcmV0dXJuIGEuSU5UO2lmKDEwMTQ9PT1jKXJldHVybiBhLlVOU0lHTkVEX0lOVDtpZigxMDE1PT09YylyZXR1cm4gYS5GTE9BVDtpZigxMDE2PT09Yyl7dmFyIGQ9Yi5nZXQoXCJPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0XCIpO2lmKG51bGwhPT1kKXJldHVybiBkLkhBTEZfRkxPQVRfT0VTfWlmKDEwMjE9PT1jKXJldHVybiBhLkFMUEhBO2lmKDEwMjI9PT1jKXJldHVybiBhLlJHQjtpZigxMDIzPT09YylyZXR1cm4gYS5SR0JBO2lmKDEwMjQ9PT1jKXJldHVybiBhLkxVTUlOQU5DRTtpZigxMDI1PT09YylyZXR1cm4gYS5MVU1JTkFOQ0VfQUxQSEE7aWYoMTAyNj09PWMpcmV0dXJuIGEuREVQVEhfQ09NUE9ORU5UO2lmKDEwMjc9PT1jKXJldHVybiBhLkRFUFRIX1NURU5DSUw7aWYoMTAwPT09YylyZXR1cm4gYS5GVU5DX0FERDtpZigxMDE9PT1jKXJldHVybiBhLkZVTkNfU1VCVFJBQ1Q7XG4gICAgaWYoMTAyPT09YylyZXR1cm4gYS5GVU5DX1JFVkVSU0VfU1VCVFJBQ1Q7aWYoMjAwPT09YylyZXR1cm4gYS5aRVJPO2lmKDIwMT09PWMpcmV0dXJuIGEuT05FO2lmKDIwMj09PWMpcmV0dXJuIGEuU1JDX0NPTE9SO2lmKDIwMz09PWMpcmV0dXJuIGEuT05FX01JTlVTX1NSQ19DT0xPUjtpZigyMDQ9PT1jKXJldHVybiBhLlNSQ19BTFBIQTtpZigyMDU9PT1jKXJldHVybiBhLk9ORV9NSU5VU19TUkNfQUxQSEE7aWYoMjA2PT09YylyZXR1cm4gYS5EU1RfQUxQSEE7aWYoMjA3PT09YylyZXR1cm4gYS5PTkVfTUlOVVNfRFNUX0FMUEhBO2lmKDIwOD09PWMpcmV0dXJuIGEuRFNUX0NPTE9SO2lmKDIwOT09PWMpcmV0dXJuIGEuT05FX01JTlVTX0RTVF9DT0xPUjtpZigyMTA9PT1jKXJldHVybiBhLlNSQ19BTFBIQV9TQVRVUkFURTtpZigyMDAxPT09Y3x8MjAwMj09PWN8fDIwMDM9PT1jfHwyMDA0PT09YylpZihkPWIuZ2V0KFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGNcIiksbnVsbCE9PVxuICAgIGQpe2lmKDIwMDE9PT1jKXJldHVybiBkLkNPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQ7aWYoMjAwMj09PWMpcmV0dXJuIGQuQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFQ7aWYoMjAwMz09PWMpcmV0dXJuIGQuQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQ7aWYoMjAwND09PWMpcmV0dXJuIGQuQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFR9aWYoMjEwMD09PWN8fDIxMDE9PT1jfHwyMTAyPT09Y3x8MjEwMz09PWMpaWYoZD1iLmdldChcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0Y1wiKSxudWxsIT09ZCl7aWYoMjEwMD09PWMpcmV0dXJuIGQuQ09NUFJFU1NFRF9SR0JfUFZSVENfNEJQUFYxX0lNRztpZigyMTAxPT09YylyZXR1cm4gZC5DT01QUkVTU0VEX1JHQl9QVlJUQ18yQlBQVjFfSU1HO2lmKDIxMDI9PT1jKXJldHVybiBkLkNPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HO2lmKDIxMDM9PT1jKXJldHVybiBkLkNPTVBSRVNTRURfUkdCQV9QVlJUQ18yQlBQVjFfSU1HfWlmKDIxNTE9PT1cbiAgICBjJiYoZD1iLmdldChcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxXCIpLG51bGwhPT1kKSlyZXR1cm4gZC5DT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMO2lmKDEwMz09PWN8fDEwND09PWMpaWYoZD1iLmdldChcIkVYVF9ibGVuZF9taW5tYXhcIiksbnVsbCE9PWQpe2lmKDEwMz09PWMpcmV0dXJuIGQuTUlOX0VYVDtpZigxMDQ9PT1jKXJldHVybiBkLk1BWF9FWFR9cmV0dXJuIDEwMjA9PT1jJiYoZD1iLmdldChcIldFQkdMX2RlcHRoX3RleHR1cmVcIiksbnVsbCE9PWQpP2QuVU5TSUdORURfSU5UXzI0XzhfV0VCR0w6MH19fWZ1bmN0aW9uIGNlKGEpe2Z1bmN0aW9uIGIoKXtpYT1uZXcgRWcoRik7aWEuZ2V0KFwiV0VCR0xfZGVwdGhfdGV4dHVyZVwiKTtpYS5nZXQoXCJPRVNfdGV4dHVyZV9mbG9hdFwiKTtpYS5nZXQoXCJPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXJcIik7aWEuZ2V0KFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdFwiKTtpYS5nZXQoXCJPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0X2xpbmVhclwiKTtcbiAgICBpYS5nZXQoXCJPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXNcIik7aWEuZ2V0KFwiT0VTX2VsZW1lbnRfaW5kZXhfdWludFwiKTtpYS5nZXQoXCJBTkdMRV9pbnN0YW5jZWRfYXJyYXlzXCIpO3BhPW5ldyBhZihGLGlhKTtUPW5ldyBEZyhGLGlhLGEpO1o9bmV3IENnKEYsaWEscGEpO1ouc2Npc3NvcihYLmNvcHkoZmEpLm11bHRpcGx5U2NhbGFyKHdhKSk7Wi52aWV3cG9ydChuYi5jb3B5KGRhKS5tdWx0aXBseVNjYWxhcih3YSkpO2NhPW5ldyBCZztnYT1uZXcgQWcoRixpYSxaLGNhLFQscGEsaGEpO3FhPW5ldyBiZyhGKTtyYT1uZXcgb2coRixxYSxoYSk7dGE9bmV3IHJnKHJhLGJhKTt4YT1uZXcgbGcoRik7bWE9bmV3IHpnKFMsaWEsVCk7dWE9bmV3IHFnO3NhPW5ldyBqZztqYT1uZXcgZmcoUyxaLHJhLEopO3lhPW5ldyBuZyhGLGlhLGJhKTt6YT1uZXcgbWcoRixpYSxiYSk7QWE9bmV3IFpmKFMsRixaLGdhLFQpO0JhPW5ldyAkZihTLEYsWixnYSxUKTtTLmluZm8ucHJvZ3JhbXM9bWEucHJvZ3JhbXM7XG4gICAgUy5jb250ZXh0PUY7Uy5jYXBhYmlsaXRpZXM9VDtTLmV4dGVuc2lvbnM9aWE7Uy5wcm9wZXJ0aWVzPWNhO1MucmVuZGVyTGlzdHM9c2E7Uy5zdGF0ZT1afWZ1bmN0aW9uIGMoYSl7YS5wcmV2ZW50RGVmYXVsdCgpO2NvbnNvbGUubG9nKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogQ29udGV4dCBMb3N0LlwiKTtMPSEwfWZ1bmN0aW9uIGQoKXtjb25zb2xlLmxvZyhcIlRIUkVFLldlYkdMUmVuZGVyZXI6IENvbnRleHQgUmVzdG9yZWQuXCIpO0w9ITE7YigpfWZ1bmN0aW9uIGUoYSl7YT1hLnRhcmdldDthLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJkaXNwb3NlXCIsZSk7ZihhKTtjYS5yZW1vdmUoYSl9ZnVuY3Rpb24gZihhKXt2YXIgYj1jYS5nZXQoYSkucHJvZ3JhbTthLnByb2dyYW09dm9pZCAwO3ZvaWQgMCE9PWImJm1hLnJlbGVhc2VQcm9ncmFtKGIpfWZ1bmN0aW9uIGcoYSxiLGMpe2EucmVuZGVyKGZ1bmN0aW9uKGEpe1MucmVuZGVyQnVmZmVySW1tZWRpYXRlKGEsYixjKX0pfWZ1bmN0aW9uIGgoYSl7bnVsbCE9PVxuICAgIENhJiZDYShhKTsoYT1rYS5nZXREZXZpY2UoKSkmJmEuaXNQcmVzZW50aW5nP2EucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGgpOndpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoaCl9ZnVuY3Rpb24gayhhLGIsYyl7aWYoITEhPT1hLnZpc2libGUpe2lmKGEubGF5ZXJzLnRlc3QoYi5sYXllcnMpKWlmKGEuaXNMaWdodClELnB1c2goYSksYS5jYXN0U2hhZG93JiZDLnB1c2goYSk7ZWxzZSBpZihhLmlzU3ByaXRlKWEuZnJ1c3R1bUN1bGxlZCYmISRkLmludGVyc2VjdHNTcHJpdGUoYSl8fEgucHVzaChhKTtlbHNlIGlmKGEuaXNMZW5zRmxhcmUpbGEucHVzaChhKTtlbHNlIGlmKGEuaXNJbW1lZGlhdGVSZW5kZXJPYmplY3QpYyYmT2Iuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGEubWF0cml4V29ybGQpLmFwcGx5TWF0cml4NCh0ZCksRS5wdXNoKGEsbnVsbCxhLm1hdGVyaWFsLE9iLnosbnVsbCk7ZWxzZSBpZihhLmlzTWVzaHx8YS5pc0xpbmV8fGEuaXNQb2ludHMpaWYoYS5pc1NraW5uZWRNZXNoJiZcbiAgICBhLnNrZWxldG9uLnVwZGF0ZSgpLCFhLmZydXN0dW1DdWxsZWR8fCRkLmludGVyc2VjdHNPYmplY3QoYSkpe2MmJk9iLnNldEZyb21NYXRyaXhQb3NpdGlvbihhLm1hdHJpeFdvcmxkKS5hcHBseU1hdHJpeDQodGQpO3ZhciBkPXRhLnVwZGF0ZShhKSxlPWEubWF0ZXJpYWw7aWYoQXJyYXkuaXNBcnJheShlKSlmb3IodmFyIGY9ZC5ncm91cHMsZz0wLGg9Zi5sZW5ndGg7ZzxoO2crKyl7dmFyIG09ZltnXSxuPWVbbS5tYXRlcmlhbEluZGV4XTtuJiZuLnZpc2libGUmJkUucHVzaChhLGQsbixPYi56LG0pfWVsc2UgZS52aXNpYmxlJiZFLnB1c2goYSxkLGUsT2IueixudWxsKX1hPWEuY2hpbGRyZW47Zz0wO2ZvcihoPWEubGVuZ3RoO2c8aDtnKyspayhhW2ddLGIsYyl9fWZ1bmN0aW9uIG0oYSxiLGMsZCl7Zm9yKHZhciBlPTAsZj1hLmxlbmd0aDtlPGY7ZSsrKXt2YXIgZz1hW2VdLGg9Zy5vYmplY3Qsaz1nLmdlb21ldHJ5LG09dm9pZCAwPT09ZD9nLm1hdGVyaWFsOmQsZz1nLmdyb3VwO2lmKGMuaXNBcnJheUNhbWVyYSl7Vz1cbiAgICBjO2Zvcih2YXIgbj1jLmNhbWVyYXMsdT0wLGw9bi5sZW5ndGg7dTxsO3UrKyl7dmFyIHI9blt1XTtpZihoLmxheWVycy50ZXN0KHIubGF5ZXJzKSl7dmFyIHQ9ci5ib3VuZHM7Wi52aWV3cG9ydChuYi5zZXQodC54KmVhLHQueSpVLHQueiplYSx0LncqVSkubXVsdGlwbHlTY2FsYXIod2EpKTtxKGgsYixyLGssbSxnKX19fWVsc2UgVz1udWxsLHEoaCxiLGMsayxtLGcpfX1mdW5jdGlvbiBxKGEsYixjLGQsZSxmKXthLm9uQmVmb3JlUmVuZGVyKFMsYixjLGQsZSxmKTthLm1vZGVsVmlld01hdHJpeC5tdWx0aXBseU1hdHJpY2VzKGMubWF0cml4V29ybGRJbnZlcnNlLGEubWF0cml4V29ybGQpO2Eubm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeChhLm1vZGVsVmlld01hdHJpeCk7aWYoYS5pc0ltbWVkaWF0ZVJlbmRlck9iamVjdCl7dmFyIGg9YS5pc01lc2gmJjA+YS5tYXRyaXhXb3JsZC5kZXRlcm1pbmFudCgpO1ouc2V0TWF0ZXJpYWwoZSxoKTtoPXUoYyxiLmZvZyxlLGEpO1I9XCJcIjtcbiAgICBnKGEsaCxlKX1lbHNlIFMucmVuZGVyQnVmZmVyRGlyZWN0KGMsYi5mb2csZCxlLGEsZik7YS5vbkFmdGVyUmVuZGVyKFMsYixjLGQsZSxmKX1mdW5jdGlvbiBuKGEsYixjKXt2YXIgZD1jYS5nZXQoYSk7Yz1tYS5nZXRQYXJhbWV0ZXJzKGEsdWEuc3RhdGUsQyxiLEphLm51bVBsYW5lcyxKYS5udW1JbnRlcnNlY3Rpb24sYyk7dmFyIGc9bWEuZ2V0UHJvZ3JhbUNvZGUoYSxjKSxoPWQucHJvZ3JhbSxrPSEwO2lmKHZvaWQgMD09PWgpYS5hZGRFdmVudExpc3RlbmVyKFwiZGlzcG9zZVwiLGUpO2Vsc2UgaWYoaC5jb2RlIT09ZylmKGEpO2Vsc2V7aWYodm9pZCAwIT09Yy5zaGFkZXJJRClyZXR1cm47az0hMX1rJiYoYy5zaGFkZXJJRD8oaD10YltjLnNoYWRlcklEXSxkLnNoYWRlcj17bmFtZTphLnR5cGUsdW5pZm9ybXM6R2EuY2xvbmUoaC51bmlmb3JtcyksdmVydGV4U2hhZGVyOmgudmVydGV4U2hhZGVyLGZyYWdtZW50U2hhZGVyOmguZnJhZ21lbnRTaGFkZXJ9KTpkLnNoYWRlcj17bmFtZTphLnR5cGUsXG4gICAgdW5pZm9ybXM6YS51bmlmb3Jtcyx2ZXJ0ZXhTaGFkZXI6YS52ZXJ0ZXhTaGFkZXIsZnJhZ21lbnRTaGFkZXI6YS5mcmFnbWVudFNoYWRlcn0sYS5vbkJlZm9yZUNvbXBpbGUoZC5zaGFkZXIpLGg9bWEuYWNxdWlyZVByb2dyYW0oYSxkLnNoYWRlcixjLGcpLGQucHJvZ3JhbT1oLGEucHJvZ3JhbT1oKTtjPWguZ2V0QXR0cmlidXRlcygpO2lmKGEubW9ycGhUYXJnZXRzKWZvcihnPWEubnVtU3VwcG9ydGVkTW9ycGhUYXJnZXRzPTA7ZzxTLm1heE1vcnBoVGFyZ2V0cztnKyspMDw9Y1tcIm1vcnBoVGFyZ2V0XCIrZ10mJmEubnVtU3VwcG9ydGVkTW9ycGhUYXJnZXRzKys7aWYoYS5tb3JwaE5vcm1hbHMpZm9yKGc9YS5udW1TdXBwb3J0ZWRNb3JwaE5vcm1hbHM9MDtnPFMubWF4TW9ycGhOb3JtYWxzO2crKykwPD1jW1wibW9ycGhOb3JtYWxcIitnXSYmYS5udW1TdXBwb3J0ZWRNb3JwaE5vcm1hbHMrKztjPWQuc2hhZGVyLnVuaWZvcm1zO2lmKCFhLmlzU2hhZGVyTWF0ZXJpYWwmJiFhLmlzUmF3U2hhZGVyTWF0ZXJpYWx8fFxuICAgICEwPT09YS5jbGlwcGluZylkLm51bUNsaXBwaW5nUGxhbmVzPUphLm51bVBsYW5lcyxkLm51bUludGVyc2VjdGlvbj1KYS5udW1JbnRlcnNlY3Rpb24sYy5jbGlwcGluZ1BsYW5lcz1KYS51bmlmb3JtO2QuZm9nPWI7ZC5saWdodHNIYXNoPXVhLnN0YXRlLmhhc2g7YS5saWdodHMmJihjLmFtYmllbnRMaWdodENvbG9yLnZhbHVlPXVhLnN0YXRlLmFtYmllbnQsYy5kaXJlY3Rpb25hbExpZ2h0cy52YWx1ZT11YS5zdGF0ZS5kaXJlY3Rpb25hbCxjLnNwb3RMaWdodHMudmFsdWU9dWEuc3RhdGUuc3BvdCxjLnJlY3RBcmVhTGlnaHRzLnZhbHVlPXVhLnN0YXRlLnJlY3RBcmVhLGMucG9pbnRMaWdodHMudmFsdWU9dWEuc3RhdGUucG9pbnQsYy5oZW1pc3BoZXJlTGlnaHRzLnZhbHVlPXVhLnN0YXRlLmhlbWksYy5kaXJlY3Rpb25hbFNoYWRvd01hcC52YWx1ZT11YS5zdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hcCxjLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4LnZhbHVlPXVhLnN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4LFxuICAgIGMuc3BvdFNoYWRvd01hcC52YWx1ZT11YS5zdGF0ZS5zcG90U2hhZG93TWFwLGMuc3BvdFNoYWRvd01hdHJpeC52YWx1ZT11YS5zdGF0ZS5zcG90U2hhZG93TWF0cml4LGMucG9pbnRTaGFkb3dNYXAudmFsdWU9dWEuc3RhdGUucG9pbnRTaGFkb3dNYXAsYy5wb2ludFNoYWRvd01hdHJpeC52YWx1ZT11YS5zdGF0ZS5wb2ludFNoYWRvd01hdHJpeCk7YT1kLnByb2dyYW0uZ2V0VW5pZm9ybXMoKTthPW1iLnNlcVdpdGhWYWx1ZShhLnNlcSxjKTtkLnVuaWZvcm1zTGlzdD1hfWZ1bmN0aW9uIHUoYSxiLGMsZCl7WT0wO3ZhciBlPWNhLmdldChjKTtzZCYmKGFlfHxhIT09VikmJkphLnNldFN0YXRlKGMuY2xpcHBpbmdQbGFuZXMsYy5jbGlwSW50ZXJzZWN0aW9uLGMuY2xpcFNoYWRvd3MsYSxlLGE9PT1WJiZjLmlkPT09UCk7ITE9PT1jLm5lZWRzVXBkYXRlJiYodm9pZCAwPT09ZS5wcm9ncmFtP2MubmVlZHNVcGRhdGU9ITA6Yy5mb2cmJmUuZm9nIT09Yj9jLm5lZWRzVXBkYXRlPSEwOmMubGlnaHRzJiZcbiAgICBlLmxpZ2h0c0hhc2ghPT11YS5zdGF0ZS5oYXNoP2MubmVlZHNVcGRhdGU9ITA6dm9pZCAwPT09ZS5udW1DbGlwcGluZ1BsYW5lc3x8ZS5udW1DbGlwcGluZ1BsYW5lcz09PUphLm51bVBsYW5lcyYmZS5udW1JbnRlcnNlY3Rpb249PT1KYS5udW1JbnRlcnNlY3Rpb258fChjLm5lZWRzVXBkYXRlPSEwKSk7Yy5uZWVkc1VwZGF0ZSYmKG4oYyxiLGQpLGMubmVlZHNVcGRhdGU9ITEpO3ZhciBmPSExLGc9ITEsaD0hMSxrPWUucHJvZ3JhbSxtPWsuZ2V0VW5pZm9ybXMoKSxxPWUuc2hhZGVyLnVuaWZvcm1zO1oudXNlUHJvZ3JhbShrLnByb2dyYW0pJiYoaD1nPWY9ITApO2MuaWQhPT1QJiYoUD1jLmlkLGc9ITApO2lmKGZ8fGEhPT1WKXttLnNldFZhbHVlKEYsXCJwcm9qZWN0aW9uTWF0cml4XCIsYS5wcm9qZWN0aW9uTWF0cml4KTtULmxvZ2FyaXRobWljRGVwdGhCdWZmZXImJm0uc2V0VmFsdWUoRixcImxvZ0RlcHRoQnVmRkNcIiwyLyhNYXRoLmxvZyhhLmZhcisxKS9NYXRoLkxOMikpO1YhPT0oV3x8XG4gICAgYSkmJihWPVd8fGEsaD1nPSEwKTtpZihjLmlzU2hhZGVyTWF0ZXJpYWx8fGMuaXNNZXNoUGhvbmdNYXRlcmlhbHx8Yy5pc01lc2hTdGFuZGFyZE1hdGVyaWFsfHxjLmVudk1hcClmPW0ubWFwLmNhbWVyYVBvc2l0aW9uLHZvaWQgMCE9PWYmJmYuc2V0VmFsdWUoRixPYi5zZXRGcm9tTWF0cml4UG9zaXRpb24oYS5tYXRyaXhXb3JsZCkpOyhjLmlzTWVzaFBob25nTWF0ZXJpYWx8fGMuaXNNZXNoTGFtYmVydE1hdGVyaWFsfHxjLmlzTWVzaEJhc2ljTWF0ZXJpYWx8fGMuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbHx8Yy5pc1NoYWRlck1hdGVyaWFsfHxjLnNraW5uaW5nKSYmbS5zZXRWYWx1ZShGLFwidmlld01hdHJpeFwiLGEubWF0cml4V29ybGRJbnZlcnNlKX1pZihjLnNraW5uaW5nJiYobS5zZXRPcHRpb25hbChGLGQsXCJiaW5kTWF0cml4XCIpLG0uc2V0T3B0aW9uYWwoRixkLFwiYmluZE1hdHJpeEludmVyc2VcIiksYT1kLnNrZWxldG9uKSlpZihmPWEuYm9uZXMsVC5mbG9hdFZlcnRleFRleHR1cmVzKXtpZih2b2lkIDA9PT1cbiAgICBhLmJvbmVUZXh0dXJlKXt2YXIgZj1NYXRoLnNxcnQoNCpmLmxlbmd0aCksZj1RLmNlaWxQb3dlck9mVHdvKGYpLGY9TWF0aC5tYXgoZiw0KSx1PW5ldyBGbG9hdDMyQXJyYXkoZipmKjQpO3Uuc2V0KGEuYm9uZU1hdHJpY2VzKTt2YXIgcj1uZXcgbGIodSxmLGYsMTAyMywxMDE1KTthLmJvbmVNYXRyaWNlcz11O2EuYm9uZVRleHR1cmU9cjthLmJvbmVUZXh0dXJlU2l6ZT1mfW0uc2V0VmFsdWUoRixcImJvbmVUZXh0dXJlXCIsYS5ib25lVGV4dHVyZSk7bS5zZXRWYWx1ZShGLFwiYm9uZVRleHR1cmVTaXplXCIsYS5ib25lVGV4dHVyZVNpemUpfWVsc2UgbS5zZXRPcHRpb25hbChGLGEsXCJib25lTWF0cmljZXNcIik7ZyYmKG0uc2V0VmFsdWUoRixcInRvbmVNYXBwaW5nRXhwb3N1cmVcIixTLnRvbmVNYXBwaW5nRXhwb3N1cmUpLG0uc2V0VmFsdWUoRixcInRvbmVNYXBwaW5nV2hpdGVQb2ludFwiLFMudG9uZU1hcHBpbmdXaGl0ZVBvaW50KSxjLmxpZ2h0cyYmKGc9aCxxLmFtYmllbnRMaWdodENvbG9yLm5lZWRzVXBkYXRlPVxuICAgIGcscS5kaXJlY3Rpb25hbExpZ2h0cy5uZWVkc1VwZGF0ZT1nLHEucG9pbnRMaWdodHMubmVlZHNVcGRhdGU9ZyxxLnNwb3RMaWdodHMubmVlZHNVcGRhdGU9ZyxxLnJlY3RBcmVhTGlnaHRzLm5lZWRzVXBkYXRlPWcscS5oZW1pc3BoZXJlTGlnaHRzLm5lZWRzVXBkYXRlPWcpLGImJmMuZm9nJiYocS5mb2dDb2xvci52YWx1ZT1iLmNvbG9yLGIuaXNGb2c/KHEuZm9nTmVhci52YWx1ZT1iLm5lYXIscS5mb2dGYXIudmFsdWU9Yi5mYXIpOmIuaXNGb2dFeHAyJiYocS5mb2dEZW5zaXR5LnZhbHVlPWIuZGVuc2l0eSkpLGMuaXNNZXNoQmFzaWNNYXRlcmlhbD9sKHEsYyk6Yy5pc01lc2hMYW1iZXJ0TWF0ZXJpYWw/KGwocSxjKSxjLmVtaXNzaXZlTWFwJiYocS5lbWlzc2l2ZU1hcC52YWx1ZT1jLmVtaXNzaXZlTWFwKSk6Yy5pc01lc2hQaG9uZ01hdGVyaWFsPyhsKHEsYyksYy5pc01lc2hUb29uTWF0ZXJpYWw/KHQocSxjKSxjLmdyYWRpZW50TWFwJiYocS5ncmFkaWVudE1hcC52YWx1ZT1jLmdyYWRpZW50TWFwKSk6XG4gICAgdChxLGMpKTpjLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWw/KGwocSxjKSxjLmlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwmJihxLmNsZWFyQ29hdC52YWx1ZT1jLmNsZWFyQ29hdCxxLmNsZWFyQ29hdFJvdWdobmVzcy52YWx1ZT1jLmNsZWFyQ29hdFJvdWdobmVzcykscS5yb3VnaG5lc3MudmFsdWU9Yy5yb3VnaG5lc3MscS5tZXRhbG5lc3MudmFsdWU9Yy5tZXRhbG5lc3MsYy5yb3VnaG5lc3NNYXAmJihxLnJvdWdobmVzc01hcC52YWx1ZT1jLnJvdWdobmVzc01hcCksYy5tZXRhbG5lc3NNYXAmJihxLm1ldGFsbmVzc01hcC52YWx1ZT1jLm1ldGFsbmVzc01hcCksYy5lbWlzc2l2ZU1hcCYmKHEuZW1pc3NpdmVNYXAudmFsdWU9Yy5lbWlzc2l2ZU1hcCksYy5idW1wTWFwJiYocS5idW1wTWFwLnZhbHVlPWMuYnVtcE1hcCxxLmJ1bXBTY2FsZS52YWx1ZT1jLmJ1bXBTY2FsZSksYy5ub3JtYWxNYXAmJihxLm5vcm1hbE1hcC52YWx1ZT1jLm5vcm1hbE1hcCxxLm5vcm1hbFNjYWxlLnZhbHVlLmNvcHkoYy5ub3JtYWxTY2FsZSkpLFxuICAgIGMuZGlzcGxhY2VtZW50TWFwJiYocS5kaXNwbGFjZW1lbnRNYXAudmFsdWU9Yy5kaXNwbGFjZW1lbnRNYXAscS5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZT1jLmRpc3BsYWNlbWVudFNjYWxlLHEuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZT1jLmRpc3BsYWNlbWVudEJpYXMpLGMuZW52TWFwJiYocS5lbnZNYXBJbnRlbnNpdHkudmFsdWU9Yy5lbnZNYXBJbnRlbnNpdHkpKTpjLmlzTWVzaERlcHRoTWF0ZXJpYWw/KGwocSxjKSxjLmRpc3BsYWNlbWVudE1hcCYmKHEuZGlzcGxhY2VtZW50TWFwLnZhbHVlPWMuZGlzcGxhY2VtZW50TWFwLHEuZGlzcGxhY2VtZW50U2NhbGUudmFsdWU9Yy5kaXNwbGFjZW1lbnRTY2FsZSxxLmRpc3BsYWNlbWVudEJpYXMudmFsdWU9Yy5kaXNwbGFjZW1lbnRCaWFzKSk6Yy5pc01lc2hEaXN0YW5jZU1hdGVyaWFsPyhsKHEsYyksYy5kaXNwbGFjZW1lbnRNYXAmJihxLmRpc3BsYWNlbWVudE1hcC52YWx1ZT1jLmRpc3BsYWNlbWVudE1hcCxxLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlPVxuICAgIGMuZGlzcGxhY2VtZW50U2NhbGUscS5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlPWMuZGlzcGxhY2VtZW50QmlhcykscS5yZWZlcmVuY2VQb3NpdGlvbi52YWx1ZS5jb3B5KGMucmVmZXJlbmNlUG9zaXRpb24pLHEubmVhckRpc3RhbmNlLnZhbHVlPWMubmVhckRpc3RhbmNlLHEuZmFyRGlzdGFuY2UudmFsdWU9Yy5mYXJEaXN0YW5jZSk6Yy5pc01lc2hOb3JtYWxNYXRlcmlhbD8obChxLGMpLGMuYnVtcE1hcCYmKHEuYnVtcE1hcC52YWx1ZT1jLmJ1bXBNYXAscS5idW1wU2NhbGUudmFsdWU9Yy5idW1wU2NhbGUpLGMubm9ybWFsTWFwJiYocS5ub3JtYWxNYXAudmFsdWU9Yy5ub3JtYWxNYXAscS5ub3JtYWxTY2FsZS52YWx1ZS5jb3B5KGMubm9ybWFsU2NhbGUpKSxjLmRpc3BsYWNlbWVudE1hcCYmKHEuZGlzcGxhY2VtZW50TWFwLnZhbHVlPWMuZGlzcGxhY2VtZW50TWFwLHEuZGlzcGxhY2VtZW50U2NhbGUudmFsdWU9Yy5kaXNwbGFjZW1lbnRTY2FsZSxxLmRpc3BsYWNlbWVudEJpYXMudmFsdWU9XG4gICAgYy5kaXNwbGFjZW1lbnRCaWFzKSk6Yy5pc0xpbmVCYXNpY01hdGVyaWFsPyhxLmRpZmZ1c2UudmFsdWU9Yy5jb2xvcixxLm9wYWNpdHkudmFsdWU9Yy5vcGFjaXR5LGMuaXNMaW5lRGFzaGVkTWF0ZXJpYWwmJihxLmRhc2hTaXplLnZhbHVlPWMuZGFzaFNpemUscS50b3RhbFNpemUudmFsdWU9Yy5kYXNoU2l6ZStjLmdhcFNpemUscS5zY2FsZS52YWx1ZT1jLnNjYWxlKSk6Yy5pc1BvaW50c01hdGVyaWFsPyhxLmRpZmZ1c2UudmFsdWU9Yy5jb2xvcixxLm9wYWNpdHkudmFsdWU9Yy5vcGFjaXR5LHEuc2l6ZS52YWx1ZT1jLnNpemUqd2EscS5zY2FsZS52YWx1ZT0uNSpVLHEubWFwLnZhbHVlPWMubWFwLG51bGwhPT1jLm1hcCYmKCEwPT09Yy5tYXAubWF0cml4QXV0b1VwZGF0ZSYmKGI9Yy5tYXAub2Zmc2V0LGc9Yy5tYXAucmVwZWF0LGg9Yy5tYXAuY2VudGVyLGMubWFwLm1hdHJpeC5zZXRVdlRyYW5zZm9ybShiLngsYi55LGcueCxnLnksYy5tYXAucm90YXRpb24saC54LGgueSkpLHEudXZUcmFuc2Zvcm0udmFsdWUuY29weShjLm1hcC5tYXRyaXgpKSk6XG4gICAgYy5pc1NoYWRvd01hdGVyaWFsJiYocS5jb2xvci52YWx1ZT1jLmNvbG9yLHEub3BhY2l0eS52YWx1ZT1jLm9wYWNpdHkpLHZvaWQgMCE9PXEubHRjTWF0JiYocS5sdGNNYXQudmFsdWU9Sy5MVENfTUFUX1RFWFRVUkUpLHZvaWQgMCE9PXEubHRjTWFnJiYocS5sdGNNYWcudmFsdWU9Sy5MVENfTUFHX1RFWFRVUkUpLG1iLnVwbG9hZChGLGUudW5pZm9ybXNMaXN0LHEsUykpO20uc2V0VmFsdWUoRixcIm1vZGVsVmlld01hdHJpeFwiLGQubW9kZWxWaWV3TWF0cml4KTttLnNldFZhbHVlKEYsXCJub3JtYWxNYXRyaXhcIixkLm5vcm1hbE1hdHJpeCk7bS5zZXRWYWx1ZShGLFwibW9kZWxNYXRyaXhcIixkLm1hdHJpeFdvcmxkKTtyZXR1cm4ga31mdW5jdGlvbiBsKGEsYil7YS5vcGFjaXR5LnZhbHVlPWIub3BhY2l0eTtiLmNvbG9yJiYoYS5kaWZmdXNlLnZhbHVlPWIuY29sb3IpO2IuZW1pc3NpdmUmJmEuZW1pc3NpdmUudmFsdWUuY29weShiLmVtaXNzaXZlKS5tdWx0aXBseVNjYWxhcihiLmVtaXNzaXZlSW50ZW5zaXR5KTtcbiAgICBiLm1hcCYmKGEubWFwLnZhbHVlPWIubWFwKTtiLmFscGhhTWFwJiYoYS5hbHBoYU1hcC52YWx1ZT1iLmFscGhhTWFwKTtiLnNwZWN1bGFyTWFwJiYoYS5zcGVjdWxhck1hcC52YWx1ZT1iLnNwZWN1bGFyTWFwKTtiLmVudk1hcCYmKGEuZW52TWFwLnZhbHVlPWIuZW52TWFwLGEuZmxpcEVudk1hcC52YWx1ZT1iLmVudk1hcCYmYi5lbnZNYXAuaXNDdWJlVGV4dHVyZT8tMToxLGEucmVmbGVjdGl2aXR5LnZhbHVlPWIucmVmbGVjdGl2aXR5LGEucmVmcmFjdGlvblJhdGlvLnZhbHVlPWIucmVmcmFjdGlvblJhdGlvKTtiLmxpZ2h0TWFwJiYoYS5saWdodE1hcC52YWx1ZT1iLmxpZ2h0TWFwLGEubGlnaHRNYXBJbnRlbnNpdHkudmFsdWU9Yi5saWdodE1hcEludGVuc2l0eSk7Yi5hb01hcCYmKGEuYW9NYXAudmFsdWU9Yi5hb01hcCxhLmFvTWFwSW50ZW5zaXR5LnZhbHVlPWIuYW9NYXBJbnRlbnNpdHkpO2lmKGIubWFwKXZhciBjPWIubWFwO2Vsc2UgYi5zcGVjdWxhck1hcD9jPWIuc3BlY3VsYXJNYXA6XG4gICAgYi5kaXNwbGFjZW1lbnRNYXA/Yz1iLmRpc3BsYWNlbWVudE1hcDpiLm5vcm1hbE1hcD9jPWIubm9ybWFsTWFwOmIuYnVtcE1hcD9jPWIuYnVtcE1hcDpiLnJvdWdobmVzc01hcD9jPWIucm91Z2huZXNzTWFwOmIubWV0YWxuZXNzTWFwP2M9Yi5tZXRhbG5lc3NNYXA6Yi5hbHBoYU1hcD9jPWIuYWxwaGFNYXA6Yi5lbWlzc2l2ZU1hcCYmKGM9Yi5lbWlzc2l2ZU1hcCk7aWYodm9pZCAwIT09Yyl7Yy5pc1dlYkdMUmVuZGVyVGFyZ2V0JiYoYz1jLnRleHR1cmUpO2lmKCEwPT09Yy5tYXRyaXhBdXRvVXBkYXRlKXtiPWMub2Zmc2V0O3ZhciBkPWMucmVwZWF0LGU9Yy5jZW50ZXI7Yy5tYXRyaXguc2V0VXZUcmFuc2Zvcm0oYi54LGIueSxkLngsZC55LGMucm90YXRpb24sZS54LGUueSl9YS51dlRyYW5zZm9ybS52YWx1ZS5jb3B5KGMubWF0cml4KX19ZnVuY3Rpb24gdChhLGIpe2Euc3BlY3VsYXIudmFsdWU9Yi5zcGVjdWxhcjthLnNoaW5pbmVzcy52YWx1ZT1NYXRoLm1heChiLnNoaW5pbmVzcyxcbiAgICAxRS00KTtiLmVtaXNzaXZlTWFwJiYoYS5lbWlzc2l2ZU1hcC52YWx1ZT1iLmVtaXNzaXZlTWFwKTtiLmJ1bXBNYXAmJihhLmJ1bXBNYXAudmFsdWU9Yi5idW1wTWFwLGEuYnVtcFNjYWxlLnZhbHVlPWIuYnVtcFNjYWxlKTtiLm5vcm1hbE1hcCYmKGEubm9ybWFsTWFwLnZhbHVlPWIubm9ybWFsTWFwLGEubm9ybWFsU2NhbGUudmFsdWUuY29weShiLm5vcm1hbFNjYWxlKSk7Yi5kaXNwbGFjZW1lbnRNYXAmJihhLmRpc3BsYWNlbWVudE1hcC52YWx1ZT1iLmRpc3BsYWNlbWVudE1hcCxhLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlPWIuZGlzcGxhY2VtZW50U2NhbGUsYS5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlPWIuZGlzcGxhY2VtZW50Qmlhcyl9Y29uc29sZS5sb2coXCJUSFJFRS5XZWJHTFJlbmRlcmVyXCIsXCI4OVwiKTthPWF8fHt9O3ZhciB2PXZvaWQgMCE9PWEuY2FudmFzP2EuY2FudmFzOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixcbiAgICBcImNhbnZhc1wiKSx3PXZvaWQgMCE9PWEuY29udGV4dD9hLmNvbnRleHQ6bnVsbCx6PXZvaWQgMCE9PWEuYWxwaGE/YS5hbHBoYTohMSx5PXZvaWQgMCE9PWEuZGVwdGg/YS5kZXB0aDohMCxJPXZvaWQgMCE9PWEuc3RlbmNpbD9hLnN0ZW5jaWw6ITAsQT12b2lkIDAhPT1hLmFudGlhbGlhcz9hLmFudGlhbGlhczohMSxKPXZvaWQgMCE9PWEucHJlbXVsdGlwbGllZEFscGhhP2EucHJlbXVsdGlwbGllZEFscGhhOiEwLHg9dm9pZCAwIT09YS5wcmVzZXJ2ZURyYXdpbmdCdWZmZXI/YS5wcmVzZXJ2ZURyYXdpbmdCdWZmZXI6ITEsQj12b2lkIDAhPT1hLnBvd2VyUHJlZmVyZW5jZT9hLnBvd2VyUHJlZmVyZW5jZTpcImRlZmF1bHRcIixEPVtdLEM9W10sRT1udWxsLEg9W10sbGE9W107dGhpcy5kb21FbGVtZW50PXY7dGhpcy5jb250ZXh0PW51bGw7dGhpcy5zb3J0T2JqZWN0cz10aGlzLmF1dG9DbGVhclN0ZW5jaWw9dGhpcy5hdXRvQ2xlYXJEZXB0aD10aGlzLmF1dG9DbGVhckNvbG9yPXRoaXMuYXV0b0NsZWFyPVxuICAgICEwO3RoaXMuY2xpcHBpbmdQbGFuZXM9W107dGhpcy5sb2NhbENsaXBwaW5nRW5hYmxlZD0hMTt0aGlzLmdhbW1hRmFjdG9yPTI7dGhpcy5waHlzaWNhbGx5Q29ycmVjdExpZ2h0cz10aGlzLmdhbW1hT3V0cHV0PXRoaXMuZ2FtbWFJbnB1dD0hMTt0aGlzLnRvbmVNYXBwaW5nV2hpdGVQb2ludD10aGlzLnRvbmVNYXBwaW5nRXhwb3N1cmU9dGhpcy50b25lTWFwcGluZz0xO3RoaXMubWF4TW9ycGhUYXJnZXRzPTg7dGhpcy5tYXhNb3JwaE5vcm1hbHM9NDt2YXIgUz10aGlzLEw9ITEsTj1udWxsLE09bnVsbCxQPS0xLFI9XCJcIixWPW51bGwsVz1udWxsLG5iPW5ldyBhYSxYPW5ldyBhYSxHPW51bGwsWT0wLGVhPXYud2lkdGgsVT12LmhlaWdodCx3YT0xLGRhPW5ldyBhYSgwLDAsZWEsVSksZmE9bmV3IGFhKDAsMCxlYSxVKSwkZT0hMSwkZD1uZXcgcmQsSmE9bmV3IEZnLHNkPSExLGFlPSExLHRkPW5ldyBPLE9iPW5ldyBwLGhhPXtnZW9tZXRyaWVzOjAsdGV4dHVyZXM6MH0sYmE9e2ZyYW1lOjAsXG4gICAgY2FsbHM6MCx2ZXJ0aWNlczowLGZhY2VzOjAscG9pbnRzOjB9O3RoaXMuaW5mbz17cmVuZGVyOmJhLG1lbW9yeTpoYSxwcm9ncmFtczpudWxsfTt0cnl7ej17YWxwaGE6eixkZXB0aDp5LHN0ZW5jaWw6SSxhbnRpYWxpYXM6QSxwcmVtdWx0aXBsaWVkQWxwaGE6SixwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6eCxwb3dlclByZWZlcmVuY2U6Qn07di5hZGRFdmVudExpc3RlbmVyKFwid2ViZ2xjb250ZXh0bG9zdFwiLGMsITEpO3YuYWRkRXZlbnRMaXN0ZW5lcihcIndlYmdsY29udGV4dHJlc3RvcmVkXCIsZCwhMSk7dmFyIEY9d3x8di5nZXRDb250ZXh0KFwid2ViZ2xcIix6KXx8di5nZXRDb250ZXh0KFwiZXhwZXJpbWVudGFsLXdlYmdsXCIseik7aWYobnVsbD09PUYpe2lmKG51bGwhPT12LmdldENvbnRleHQoXCJ3ZWJnbFwiKSl0aHJvdyBFcnJvcihcIkVycm9yIGNyZWF0aW5nIFdlYkdMIGNvbnRleHQgd2l0aCB5b3VyIHNlbGVjdGVkIGF0dHJpYnV0ZXMuXCIpO3Rocm93IEVycm9yKFwiRXJyb3IgY3JlYXRpbmcgV2ViR0wgY29udGV4dC5cIik7XG4gICAgfXZvaWQgMD09PUYuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0JiYoRi5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQ9ZnVuY3Rpb24oKXtyZXR1cm57cmFuZ2VNaW46MSxyYW5nZU1heDoxLHByZWNpc2lvbjoxfX0pfWNhdGNoKEdnKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogXCIrR2cubWVzc2FnZSl9dmFyIGlhLFQsWixjYSxnYSxxYSxyYSx0YSx1YSxtYSxzYSxqYSx4YSx5YSx6YSxBYSxCYSxwYTtiKCk7dmFyIGthPW5ldyBiZShTKTt0aGlzLnZyPWthO3ZhciBFYT1uZXcgVWUoUyx0YSxULm1heFRleHR1cmVTaXplKTt0aGlzLnNoYWRvd01hcD1FYTt0aGlzLmdldENvbnRleHQ9ZnVuY3Rpb24oKXtyZXR1cm4gRn07dGhpcy5nZXRDb250ZXh0QXR0cmlidXRlcz1mdW5jdGlvbigpe3JldHVybiBGLmdldENvbnRleHRBdHRyaWJ1dGVzKCl9O3RoaXMuZm9yY2VDb250ZXh0TG9zcz1mdW5jdGlvbigpe3ZhciBhPWlhLmdldChcIldFQkdMX2xvc2VfY29udGV4dFwiKTthJiZcbiAgICBhLmxvc2VDb250ZXh0KCl9O3RoaXMuZm9yY2VDb250ZXh0UmVzdG9yZT1mdW5jdGlvbigpe3ZhciBhPWlhLmdldChcIldFQkdMX2xvc2VfY29udGV4dFwiKTthJiZhLnJlc3RvcmVDb250ZXh0KCl9O3RoaXMuZ2V0UGl4ZWxSYXRpbz1mdW5jdGlvbigpe3JldHVybiB3YX07dGhpcy5zZXRQaXhlbFJhdGlvPWZ1bmN0aW9uKGEpe3ZvaWQgMCE9PWEmJih3YT1hLHRoaXMuc2V0U2l6ZShlYSxVLCExKSl9O3RoaXMuZ2V0U2l6ZT1mdW5jdGlvbigpe3JldHVybnt3aWR0aDplYSxoZWlnaHQ6VX19O3RoaXMuc2V0U2l6ZT1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9a2EuZ2V0RGV2aWNlKCk7ZCYmZC5pc1ByZXNlbnRpbmc/Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogQ2FuJ3QgY2hhbmdlIHNpemUgd2hpbGUgVlIgZGV2aWNlIGlzIHByZXNlbnRpbmcuXCIpOihlYT1hLFU9Yix2LndpZHRoPWEqd2Esdi5oZWlnaHQ9Yip3YSwhMSE9PWMmJih2LnN0eWxlLndpZHRoPWErXCJweFwiLHYuc3R5bGUuaGVpZ2h0PVxuICAgIGIrXCJweFwiKSx0aGlzLnNldFZpZXdwb3J0KDAsMCxhLGIpKX07dGhpcy5nZXREcmF3aW5nQnVmZmVyU2l6ZT1mdW5jdGlvbigpe3JldHVybnt3aWR0aDplYSp3YSxoZWlnaHQ6VSp3YX19O3RoaXMuc2V0RHJhd2luZ0J1ZmZlclNpemU9ZnVuY3Rpb24oYSxiLGMpe2VhPWE7VT1iO3dhPWM7di53aWR0aD1hKmM7di5oZWlnaHQ9YipjO3RoaXMuc2V0Vmlld3BvcnQoMCwwLGEsYil9O3RoaXMuc2V0Vmlld3BvcnQ9ZnVuY3Rpb24oYSxiLGMsZCl7ZGEuc2V0KGEsVS1iLWQsYyxkKTtaLnZpZXdwb3J0KG5iLmNvcHkoZGEpLm11bHRpcGx5U2NhbGFyKHdhKSl9O3RoaXMuc2V0U2Npc3Nvcj1mdW5jdGlvbihhLGIsYyxkKXtmYS5zZXQoYSxVLWItZCxjLGQpO1ouc2Npc3NvcihYLmNvcHkoZmEpLm11bHRpcGx5U2NhbGFyKHdhKSl9O3RoaXMuc2V0U2Npc3NvclRlc3Q9ZnVuY3Rpb24oYSl7Wi5zZXRTY2lzc29yVGVzdCgkZT1hKX07dGhpcy5nZXRDbGVhckNvbG9yPWZ1bmN0aW9uKCl7cmV0dXJuIGphLmdldENsZWFyQ29sb3IoKX07XG4gICAgdGhpcy5zZXRDbGVhckNvbG9yPWZ1bmN0aW9uKCl7amEuc2V0Q2xlYXJDb2xvci5hcHBseShqYSxhcmd1bWVudHMpfTt0aGlzLmdldENsZWFyQWxwaGE9ZnVuY3Rpb24oKXtyZXR1cm4gamEuZ2V0Q2xlYXJBbHBoYSgpfTt0aGlzLnNldENsZWFyQWxwaGE9ZnVuY3Rpb24oKXtqYS5zZXRDbGVhckFscGhhLmFwcGx5KGphLGFyZ3VtZW50cyl9O3RoaXMuY2xlYXI9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPTA7aWYodm9pZCAwPT09YXx8YSlkfD1GLkNPTE9SX0JVRkZFUl9CSVQ7aWYodm9pZCAwPT09Ynx8YilkfD1GLkRFUFRIX0JVRkZFUl9CSVQ7aWYodm9pZCAwPT09Y3x8YylkfD1GLlNURU5DSUxfQlVGRkVSX0JJVDtGLmNsZWFyKGQpfTt0aGlzLmNsZWFyQ29sb3I9ZnVuY3Rpb24oKXt0aGlzLmNsZWFyKCEwLCExLCExKX07dGhpcy5jbGVhckRlcHRoPWZ1bmN0aW9uKCl7dGhpcy5jbGVhcighMSwhMCwhMSl9O3RoaXMuY2xlYXJTdGVuY2lsPWZ1bmN0aW9uKCl7dGhpcy5jbGVhcighMSwhMSxcbiAgICAhMCl9O3RoaXMuY2xlYXJUYXJnZXQ9ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy5zZXRSZW5kZXJUYXJnZXQoYSk7dGhpcy5jbGVhcihiLGMsZCl9O3RoaXMuZGlzcG9zZT1mdW5jdGlvbigpe3YucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIndlYmdsY29udGV4dGxvc3RcIixjLCExKTt2LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ3ZWJnbGNvbnRleHRyZXN0b3JlZFwiLGQsITEpO3NhLmRpc3Bvc2UoKTtrYS5kaXNwb3NlKCl9O3RoaXMucmVuZGVyQnVmZmVySW1tZWRpYXRlPWZ1bmN0aW9uKGEsYixjKXtaLmluaXRBdHRyaWJ1dGVzKCk7dmFyIGQ9Y2EuZ2V0KGEpO2EuaGFzUG9zaXRpb25zJiYhZC5wb3NpdGlvbiYmKGQucG9zaXRpb249Ri5jcmVhdGVCdWZmZXIoKSk7YS5oYXNOb3JtYWxzJiYhZC5ub3JtYWwmJihkLm5vcm1hbD1GLmNyZWF0ZUJ1ZmZlcigpKTthLmhhc1V2cyYmIWQudXYmJihkLnV2PUYuY3JlYXRlQnVmZmVyKCkpO2EuaGFzQ29sb3JzJiYhZC5jb2xvciYmKGQuY29sb3I9Ri5jcmVhdGVCdWZmZXIoKSk7XG4gICAgYj1iLmdldEF0dHJpYnV0ZXMoKTthLmhhc1Bvc2l0aW9ucyYmKEYuYmluZEJ1ZmZlcihGLkFSUkFZX0JVRkZFUixkLnBvc2l0aW9uKSxGLmJ1ZmZlckRhdGEoRi5BUlJBWV9CVUZGRVIsYS5wb3NpdGlvbkFycmF5LEYuRFlOQU1JQ19EUkFXKSxaLmVuYWJsZUF0dHJpYnV0ZShiLnBvc2l0aW9uKSxGLnZlcnRleEF0dHJpYlBvaW50ZXIoYi5wb3NpdGlvbiwzLEYuRkxPQVQsITEsMCwwKSk7aWYoYS5oYXNOb3JtYWxzKXtGLmJpbmRCdWZmZXIoRi5BUlJBWV9CVUZGRVIsZC5ub3JtYWwpO2lmKCFjLmlzTWVzaFBob25nTWF0ZXJpYWwmJiFjLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwmJiFjLmlzTWVzaE5vcm1hbE1hdGVyaWFsJiYhMD09PWMuZmxhdFNoYWRpbmcpZm9yKHZhciBlPTAsZj0zKmEuY291bnQ7ZTxmO2UrPTkpe3ZhciBnPWEubm9ybWFsQXJyYXksaD0oZ1tlKzBdK2dbZSszXStnW2UrNl0pLzMsaz0oZ1tlKzFdK2dbZSs0XStnW2UrN10pLzMsbT0oZ1tlKzJdK2dbZSs1XStnW2UrXG4gICAgOF0pLzM7Z1tlKzBdPWg7Z1tlKzFdPWs7Z1tlKzJdPW07Z1tlKzNdPWg7Z1tlKzRdPWs7Z1tlKzVdPW07Z1tlKzZdPWg7Z1tlKzddPWs7Z1tlKzhdPW19Ri5idWZmZXJEYXRhKEYuQVJSQVlfQlVGRkVSLGEubm9ybWFsQXJyYXksRi5EWU5BTUlDX0RSQVcpO1ouZW5hYmxlQXR0cmlidXRlKGIubm9ybWFsKTtGLnZlcnRleEF0dHJpYlBvaW50ZXIoYi5ub3JtYWwsMyxGLkZMT0FULCExLDAsMCl9YS5oYXNVdnMmJmMubWFwJiYoRi5iaW5kQnVmZmVyKEYuQVJSQVlfQlVGRkVSLGQudXYpLEYuYnVmZmVyRGF0YShGLkFSUkFZX0JVRkZFUixhLnV2QXJyYXksRi5EWU5BTUlDX0RSQVcpLFouZW5hYmxlQXR0cmlidXRlKGIudXYpLEYudmVydGV4QXR0cmliUG9pbnRlcihiLnV2LDIsRi5GTE9BVCwhMSwwLDApKTthLmhhc0NvbG9ycyYmMCE9PWMudmVydGV4Q29sb3JzJiYoRi5iaW5kQnVmZmVyKEYuQVJSQVlfQlVGRkVSLGQuY29sb3IpLEYuYnVmZmVyRGF0YShGLkFSUkFZX0JVRkZFUixhLmNvbG9yQXJyYXksXG4gICAgRi5EWU5BTUlDX0RSQVcpLFouZW5hYmxlQXR0cmlidXRlKGIuY29sb3IpLEYudmVydGV4QXR0cmliUG9pbnRlcihiLmNvbG9yLDMsRi5GTE9BVCwhMSwwLDApKTtaLmRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCk7Ri5kcmF3QXJyYXlzKEYuVFJJQU5HTEVTLDAsYS5jb3VudCk7YS5jb3VudD0wfTt0aGlzLnJlbmRlckJ1ZmZlckRpcmVjdD1mdW5jdGlvbihhLGIsYyxkLGUsZil7dmFyIGc9ZS5pc01lc2gmJjA+ZS5tYXRyaXhXb3JsZC5kZXRlcm1pbmFudCgpO1ouc2V0TWF0ZXJpYWwoZCxnKTt2YXIgaD11KGEsYixkLGUpO2E9Yy5pZCtcIl9cIitoLmlkK1wiX1wiKyghMD09PWQud2lyZWZyYW1lKTt2YXIgaz0hMTthIT09UiYmKFI9YSxrPSEwKTtlLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyYmKHhhLnVwZGF0ZShlLGMsZCxoKSxrPSEwKTt2YXIgZz1jLmluZGV4LG09Yy5hdHRyaWJ1dGVzLnBvc2l0aW9uO2I9MTshMD09PWQud2lyZWZyYW1lJiYoZz1yYS5nZXRXaXJlZnJhbWVBdHRyaWJ1dGUoYyksXG4gICAgYj0yKTthPXlhO2lmKG51bGwhPT1nKXt2YXIgcT1xYS5nZXQoZyk7YT16YTthLnNldEluZGV4KHEpfWlmKGspe2s9dm9pZCAwO2lmKGMmJmMuaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSYmbnVsbD09PWlhLmdldChcIkFOR0xFX2luc3RhbmNlZF9hcnJheXNcIikpY29uc29sZS5lcnJvcihcIlRIUkVFLldlYkdMUmVuZGVyZXIuc2V0dXBWZXJ0ZXhBdHRyaWJ1dGVzOiB1c2luZyBUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSBidXQgaGFyZHdhcmUgZG9lcyBub3Qgc3VwcG9ydCBleHRlbnNpb24gQU5HTEVfaW5zdGFuY2VkX2FycmF5cy5cIik7ZWxzZXt2b2lkIDA9PT1rJiYoaz0wKTtaLmluaXRBdHRyaWJ1dGVzKCk7dmFyIG49Yy5hdHRyaWJ1dGVzLGg9aC5nZXRBdHRyaWJ1dGVzKCksbD1kLmRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXM7Zm9yKEogaW4gaCl7dmFyIHI9aFtKXTtpZigwPD1yKXt2YXIgdD1uW0pdO2lmKHZvaWQgMCE9PXQpe3ZhciB2PXQubm9ybWFsaXplZCxwPXQuaXRlbVNpemUsXG4gICAgdz1xYS5nZXQodCk7aWYodm9pZCAwIT09dyl7dmFyIEE9dy5idWZmZXIseT13LnR5cGUsdz13LmJ5dGVzUGVyRWxlbWVudDtpZih0LmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUpe3ZhciB6PXQuZGF0YSxJPXouc3RyaWRlLHQ9dC5vZmZzZXQ7eiYmei5pc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyPyhaLmVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3Iocix6Lm1lc2hQZXJBdHRyaWJ1dGUpLHZvaWQgMD09PWMubWF4SW5zdGFuY2VkQ291bnQmJihjLm1heEluc3RhbmNlZENvdW50PXoubWVzaFBlckF0dHJpYnV0ZSp6LmNvdW50KSk6Wi5lbmFibGVBdHRyaWJ1dGUocik7Ri5iaW5kQnVmZmVyKEYuQVJSQVlfQlVGRkVSLEEpO0YudmVydGV4QXR0cmliUG9pbnRlcihyLHAseSx2LEkqdywoaypJK3QpKncpfWVsc2UgdC5pc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZT8oWi5lbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKHIsdC5tZXNoUGVyQXR0cmlidXRlKSx2b2lkIDA9PT1jLm1heEluc3RhbmNlZENvdW50JiZcbiAgICAoYy5tYXhJbnN0YW5jZWRDb3VudD10Lm1lc2hQZXJBdHRyaWJ1dGUqdC5jb3VudCkpOlouZW5hYmxlQXR0cmlidXRlKHIpLEYuYmluZEJ1ZmZlcihGLkFSUkFZX0JVRkZFUixBKSxGLnZlcnRleEF0dHJpYlBvaW50ZXIocixwLHksdiwwLGsqcCp3KX19ZWxzZSBpZih2b2lkIDAhPT1sJiYodj1sW0pdLHZvaWQgMCE9PXYpKXN3aXRjaCh2Lmxlbmd0aCl7Y2FzZSAyOkYudmVydGV4QXR0cmliMmZ2KHIsdik7YnJlYWs7Y2FzZSAzOkYudmVydGV4QXR0cmliM2Z2KHIsdik7YnJlYWs7Y2FzZSA0OkYudmVydGV4QXR0cmliNGZ2KHIsdik7YnJlYWs7ZGVmYXVsdDpGLnZlcnRleEF0dHJpYjFmdihyLHYpfX19Wi5kaXNhYmxlVW51c2VkQXR0cmlidXRlcygpfW51bGwhPT1nJiZGLmJpbmRCdWZmZXIoRi5FTEVNRU5UX0FSUkFZX0JVRkZFUixxLmJ1ZmZlcil9cT0wO251bGwhPT1nP3E9Zy5jb3VudDp2b2lkIDAhPT1tJiYocT1tLmNvdW50KTtnPWMuZHJhd1JhbmdlLnN0YXJ0KmI7bT1udWxsIT09XG4gICAgZj9mLnN0YXJ0KmI6MDt2YXIgSj1NYXRoLm1heChnLG0pO2Y9TWF0aC5tYXgoMCxNYXRoLm1pbihxLGcrYy5kcmF3UmFuZ2UuY291bnQqYixtKyhudWxsIT09Zj9mLmNvdW50KmI6SW5maW5pdHkpKS0xLUorMSk7aWYoMCE9PWYpe2lmKGUuaXNNZXNoKWlmKCEwPT09ZC53aXJlZnJhbWUpWi5zZXRMaW5lV2lkdGgoZC53aXJlZnJhbWVMaW5ld2lkdGgqKG51bGw9PT1OP3dhOjEpKSxhLnNldE1vZGUoRi5MSU5FUyk7ZWxzZSBzd2l0Y2goZS5kcmF3TW9kZSl7Y2FzZSAwOmEuc2V0TW9kZShGLlRSSUFOR0xFUyk7YnJlYWs7Y2FzZSAxOmEuc2V0TW9kZShGLlRSSUFOR0xFX1NUUklQKTticmVhaztjYXNlIDI6YS5zZXRNb2RlKEYuVFJJQU5HTEVfRkFOKX1lbHNlIGUuaXNMaW5lPyhkPWQubGluZXdpZHRoLHZvaWQgMD09PWQmJihkPTEpLFouc2V0TGluZVdpZHRoKGQqKG51bGw9PT1OP3dhOjEpKSxlLmlzTGluZVNlZ21lbnRzP2Euc2V0TW9kZShGLkxJTkVTKTplLmlzTGluZUxvb3A/YS5zZXRNb2RlKEYuTElORV9MT09QKTpcbiAgICBhLnNldE1vZGUoRi5MSU5FX1NUUklQKSk6ZS5pc1BvaW50cyYmYS5zZXRNb2RlKEYuUE9JTlRTKTtjJiZjLmlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnk/MDxjLm1heEluc3RhbmNlZENvdW50JiZhLnJlbmRlckluc3RhbmNlcyhjLEosZik6YS5yZW5kZXIoSixmKX19O3RoaXMuY29tcGlsZT1mdW5jdGlvbihhLGIpe0QubGVuZ3RoPTA7Qy5sZW5ndGg9MDthLnRyYXZlcnNlKGZ1bmN0aW9uKGEpe2EuaXNMaWdodCYmKEQucHVzaChhKSxhLmNhc3RTaGFkb3cmJkMucHVzaChhKSl9KTt1YS5zZXR1cChELEMsYik7YS50cmF2ZXJzZShmdW5jdGlvbihiKXtpZihiLm1hdGVyaWFsKWlmKEFycmF5LmlzQXJyYXkoYi5tYXRlcmlhbCkpZm9yKHZhciBjPTA7YzxiLm1hdGVyaWFsLmxlbmd0aDtjKyspbihiLm1hdGVyaWFsW2NdLGEuZm9nLGIpO2Vsc2UgbihiLm1hdGVyaWFsLGEuZm9nLGIpfSl9O3ZhciBGYT0hMSxDYT1udWxsO3RoaXMuYW5pbWF0ZT1mdW5jdGlvbihhKXtDYT1hO0ZhfHwoKGE9XG4gICAga2EuZ2V0RGV2aWNlKCkpJiZhLmlzUHJlc2VudGluZz9hLnJlcXVlc3RBbmltYXRpb25GcmFtZShoKTp3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGgpLEZhPSEwKX07dGhpcy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIWJ8fCFiLmlzQ2FtZXJhKWNvbnNvbGUuZXJyb3IoXCJUSFJFRS5XZWJHTFJlbmRlcmVyLnJlbmRlcjogY2FtZXJhIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5DYW1lcmEuXCIpO2Vsc2UgaWYoIUwpe1I9XCJcIjtQPS0xO1Y9bnVsbDshMD09PWEuYXV0b1VwZGF0ZSYmYS51cGRhdGVNYXRyaXhXb3JsZCgpO251bGw9PT1iLnBhcmVudCYmYi51cGRhdGVNYXRyaXhXb3JsZCgpO2thLmVuYWJsZWQmJihiPWthLmdldENhbWVyYShiKSk7dGQubXVsdGlwbHlNYXRyaWNlcyhiLnByb2plY3Rpb25NYXRyaXgsYi5tYXRyaXhXb3JsZEludmVyc2UpOyRkLnNldEZyb21NYXRyaXgodGQpO0QubGVuZ3RoPTA7Qy5sZW5ndGg9MDtILmxlbmd0aD0wO2xhLmxlbmd0aD1cbiAgICAwO2FlPXRoaXMubG9jYWxDbGlwcGluZ0VuYWJsZWQ7c2Q9SmEuaW5pdCh0aGlzLmNsaXBwaW5nUGxhbmVzLGFlLGIpO0U9c2EuZ2V0KGEsYik7RS5pbml0KCk7ayhhLGIsUy5zb3J0T2JqZWN0cyk7ITA9PT1TLnNvcnRPYmplY3RzJiZFLnNvcnQoKTtnYS51cGRhdGVWaWRlb1RleHR1cmVzKCk7c2QmJkphLmJlZ2luU2hhZG93cygpO0VhLnJlbmRlcihDLGEsYik7dWEuc2V0dXAoRCxDLGIpO3NkJiZKYS5lbmRTaGFkb3dzKCk7YmEuZnJhbWUrKztiYS5jYWxscz0wO2JhLnZlcnRpY2VzPTA7YmEuZmFjZXM9MDtiYS5wb2ludHM9MDt2b2lkIDA9PT1jJiYoYz1udWxsKTt0aGlzLnNldFJlbmRlclRhcmdldChjKTtqYS5yZW5kZXIoRSxhLGIsZCk7ZD1FLm9wYXF1ZTt2YXIgZT1FLnRyYW5zcGFyZW50O2lmKGEub3ZlcnJpZGVNYXRlcmlhbCl7dmFyIGY9YS5vdmVycmlkZU1hdGVyaWFsO2QubGVuZ3RoJiZtKGQsYSxiLGYpO2UubGVuZ3RoJiZtKGUsYSxiLGYpfWVsc2UgZC5sZW5ndGgmJm0oZCxcbiAgICBhLGIpLGUubGVuZ3RoJiZtKGUsYSxiKTtCYS5yZW5kZXIoSCxhLGIpO0FhLnJlbmRlcihsYSxhLGIsbmIpO2MmJmdhLnVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcChjKTtaLmJ1ZmZlcnMuZGVwdGguc2V0VGVzdCghMCk7Wi5idWZmZXJzLmRlcHRoLnNldE1hc2soITApO1ouYnVmZmVycy5jb2xvci5zZXRNYXNrKCEwKTtaLnNldFBvbHlnb25PZmZzZXQoITEpO2thLmVuYWJsZWQmJmthLnN1Ym1pdEZyYW1lKCl9fTt0aGlzLnNldEZhY2VDdWxsaW5nPWZ1bmN0aW9uKGEsYil7Wi5zZXRDdWxsRmFjZShhKTtaLnNldEZsaXBTaWRlZCgwPT09Yil9O3RoaXMuYWxsb2NUZXh0dXJlVW5pdD1mdW5jdGlvbigpe3ZhciBhPVk7YT49VC5tYXhUZXh0dXJlcyYmY29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogVHJ5aW5nIHRvIHVzZSBcIithK1wiIHRleHR1cmUgdW5pdHMgd2hpbGUgdGhpcyBHUFUgc3VwcG9ydHMgb25seSBcIitULm1heFRleHR1cmVzKTtZKz0xO3JldHVybiBhfTt0aGlzLnNldFRleHR1cmUyRD1cbiAgICBmdW5jdGlvbigpe3ZhciBhPSExO3JldHVybiBmdW5jdGlvbihiLGMpe2ImJmIuaXNXZWJHTFJlbmRlclRhcmdldCYmKGF8fChjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyLnNldFRleHR1cmUyRDogZG9uJ3QgdXNlIHJlbmRlciB0YXJnZXRzIGFzIHRleHR1cmVzLiBVc2UgdGhlaXIgLnRleHR1cmUgcHJvcGVydHkgaW5zdGVhZC5cIiksYT0hMCksYj1iLnRleHR1cmUpO2dhLnNldFRleHR1cmUyRChiLGMpfX0oKTt0aGlzLnNldFRleHR1cmU9ZnVuY3Rpb24oKXt2YXIgYT0hMTtyZXR1cm4gZnVuY3Rpb24oYixjKXthfHwoY29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNldFRleHR1cmUgaXMgZGVwcmVjYXRlZCwgdXNlIHNldFRleHR1cmUyRCBpbnN0ZWFkLlwiKSxhPSEwKTtnYS5zZXRUZXh0dXJlMkQoYixjKX19KCk7dGhpcy5zZXRUZXh0dXJlQ3ViZT1mdW5jdGlvbigpe3ZhciBhPSExO3JldHVybiBmdW5jdGlvbihiLGMpe2ImJmIuaXNXZWJHTFJlbmRlclRhcmdldEN1YmUmJlxuICAgIChhfHwoY29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlci5zZXRUZXh0dXJlQ3ViZTogZG9uJ3QgdXNlIGN1YmUgcmVuZGVyIHRhcmdldHMgYXMgdGV4dHVyZXMuIFVzZSB0aGVpciAudGV4dHVyZSBwcm9wZXJ0eSBpbnN0ZWFkLlwiKSxhPSEwKSxiPWIudGV4dHVyZSk7YiYmYi5pc0N1YmVUZXh0dXJlfHxBcnJheS5pc0FycmF5KGIuaW1hZ2UpJiY2PT09Yi5pbWFnZS5sZW5ndGg/Z2Euc2V0VGV4dHVyZUN1YmUoYixjKTpnYS5zZXRUZXh0dXJlQ3ViZUR5bmFtaWMoYixjKX19KCk7dGhpcy5nZXRSZW5kZXJUYXJnZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gTn07dGhpcy5zZXRSZW5kZXJUYXJnZXQ9ZnVuY3Rpb24oYSl7KE49YSkmJnZvaWQgMD09PWNhLmdldChhKS5fX3dlYmdsRnJhbWVidWZmZXImJmdhLnNldHVwUmVuZGVyVGFyZ2V0KGEpO3ZhciBiPW51bGwsYz0hMTthPyhiPWNhLmdldChhKS5fX3dlYmdsRnJhbWVidWZmZXIsYS5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZSYmKGI9XG4gICAgYlthLmFjdGl2ZUN1YmVGYWNlXSxjPSEwKSxuYi5jb3B5KGEudmlld3BvcnQpLFguY29weShhLnNjaXNzb3IpLEc9YS5zY2lzc29yVGVzdCk6KG5iLmNvcHkoZGEpLm11bHRpcGx5U2NhbGFyKHdhKSxYLmNvcHkoZmEpLm11bHRpcGx5U2NhbGFyKHdhKSxHPSRlKTtNIT09YiYmKEYuYmluZEZyYW1lYnVmZmVyKEYuRlJBTUVCVUZGRVIsYiksTT1iKTtaLnZpZXdwb3J0KG5iKTtaLnNjaXNzb3IoWCk7Wi5zZXRTY2lzc29yVGVzdChHKTtjJiYoYz1jYS5nZXQoYS50ZXh0dXJlKSxGLmZyYW1lYnVmZmVyVGV4dHVyZTJEKEYuRlJBTUVCVUZGRVIsRi5DT0xPUl9BVFRBQ0hNRU5UMCxGLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCthLmFjdGl2ZUN1YmVGYWNlLGMuX193ZWJnbFRleHR1cmUsYS5hY3RpdmVNaXBNYXBMZXZlbCkpfTt0aGlzLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM9ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2lmKGEmJmEuaXNXZWJHTFJlbmRlclRhcmdldCl7dmFyIGc9Y2EuZ2V0KGEpLl9fd2ViZ2xGcmFtZWJ1ZmZlcjtcbiAgICBpZihnKXt2YXIgaD0hMTtnIT09TSYmKEYuYmluZEZyYW1lYnVmZmVyKEYuRlJBTUVCVUZGRVIsZyksaD0hMCk7dHJ5e3ZhciBrPWEudGV4dHVyZSxtPWsuZm9ybWF0LHE9ay50eXBlOzEwMjMhPT1tJiZwYS5jb252ZXJ0KG0pIT09Ri5nZXRQYXJhbWV0ZXIoRi5JTVBMRU1FTlRBVElPTl9DT0xPUl9SRUFEX0ZPUk1BVCk/Y29uc29sZS5lcnJvcihcIlRIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBSR0JBIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgZm9ybWF0LlwiKToxMDA5PT09cXx8cGEuY29udmVydChxKT09PUYuZ2V0UGFyYW1ldGVyKEYuSU1QTEVNRU5UQVRJT05fQ09MT1JfUkVBRF9UWVBFKXx8MTAxNT09PXEmJihpYS5nZXQoXCJPRVNfdGV4dHVyZV9mbG9hdFwiKXx8aWEuZ2V0KFwiV0VCR0xfY29sb3JfYnVmZmVyX2Zsb2F0XCIpKXx8MTAxNj09PXEmJmlhLmdldChcIkVYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdFwiKT9cbiAgICBGLmNoZWNrRnJhbWVidWZmZXJTdGF0dXMoRi5GUkFNRUJVRkZFUik9PT1GLkZSQU1FQlVGRkVSX0NPTVBMRVRFPzA8PWImJmI8PWEud2lkdGgtZCYmMDw9YyYmYzw9YS5oZWlnaHQtZSYmRi5yZWFkUGl4ZWxzKGIsYyxkLGUscGEuY29udmVydChtKSxwYS5jb252ZXJ0KHEpLGYpOmNvbnNvbGUuZXJyb3IoXCJUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlYWRQaXhlbHMgZnJvbSByZW5kZXJUYXJnZXQgZmFpbGVkLiBGcmFtZWJ1ZmZlciBub3QgY29tcGxldGUuXCIpOmNvbnNvbGUuZXJyb3IoXCJUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlbmRlclRhcmdldCBpcyBub3QgaW4gVW5zaWduZWRCeXRlVHlwZSBvciBpbXBsZW1lbnRhdGlvbiBkZWZpbmVkIHR5cGUuXCIpfWZpbmFsbHl7aCYmRi5iaW5kRnJhbWVidWZmZXIoRi5GUkFNRUJVRkZFUixNKX19fWVsc2UgY29uc29sZS5lcnJvcihcIlRIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBUSFJFRS5XZWJHTFJlbmRlclRhcmdldC5cIil9fVxuICAgIGZ1bmN0aW9uIFBiKGEsYil7dGhpcy5uYW1lPVwiXCI7dGhpcy5jb2xvcj1uZXcgSChhKTt0aGlzLmRlbnNpdHk9dm9pZCAwIT09Yj9iOjIuNUUtNH1mdW5jdGlvbiBRYihhLGIsYyl7dGhpcy5uYW1lPVwiXCI7dGhpcy5jb2xvcj1uZXcgSChhKTt0aGlzLm5lYXI9dm9pZCAwIT09Yj9iOjE7dGhpcy5mYXI9dm9pZCAwIT09Yz9jOjFFM31mdW5jdGlvbiB2ZCgpe3guY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJTY2VuZVwiO3RoaXMub3ZlcnJpZGVNYXRlcmlhbD10aGlzLmZvZz10aGlzLmJhY2tncm91bmQ9bnVsbDt0aGlzLmF1dG9VcGRhdGU9ITB9ZnVuY3Rpb24gZGUoYSxiLGMsZCxlKXt4LmNhbGwodGhpcyk7dGhpcy5sZW5zRmxhcmVzPVtdO3RoaXMucG9zaXRpb25TY3JlZW49bmV3IHA7dGhpcy5jdXN0b21VcGRhdGVDYWxsYmFjaz12b2lkIDA7dm9pZCAwIT09YSYmdGhpcy5hZGQoYSxiLGMsZCxlKX1mdW5jdGlvbiBoYihhKXtQLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiU3ByaXRlTWF0ZXJpYWxcIjtcbiAgICB0aGlzLmNvbG9yPW5ldyBIKDE2Nzc3MjE1KTt0aGlzLm1hcD1udWxsO3RoaXMucm90YXRpb249MDt0aGlzLmxpZ2h0cz10aGlzLmZvZz0hMTt0aGlzLnNldFZhbHVlcyhhKX1mdW5jdGlvbiBDYyhhKXt4LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiU3ByaXRlXCI7dGhpcy5tYXRlcmlhbD12b2lkIDAhPT1hP2E6bmV3IGhifWZ1bmN0aW9uIERjKCl7eC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkxPRFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMse2xldmVsczp7ZW51bWVyYWJsZTohMCx2YWx1ZTpbXX19KX1mdW5jdGlvbiBFYyhhLGIpe2E9YXx8W107dGhpcy5ib25lcz1hLnNsaWNlKDApO3RoaXMuYm9uZU1hdHJpY2VzPW5ldyBGbG9hdDMyQXJyYXkoMTYqdGhpcy5ib25lcy5sZW5ndGgpO2lmKHZvaWQgMD09PWIpdGhpcy5jYWxjdWxhdGVJbnZlcnNlcygpO2Vsc2UgaWYodGhpcy5ib25lcy5sZW5ndGg9PT1iLmxlbmd0aCl0aGlzLmJvbmVJbnZlcnNlcz1iLnNsaWNlKDApO2Vsc2UgZm9yKGNvbnNvbGUud2FybihcIlRIUkVFLlNrZWxldG9uIGJvbmVJbnZlcnNlcyBpcyB0aGUgd3JvbmcgbGVuZ3RoLlwiKSxcbiAgICB0aGlzLmJvbmVJbnZlcnNlcz1bXSxhPTAsYj10aGlzLmJvbmVzLmxlbmd0aDthPGI7YSsrKXRoaXMuYm9uZUludmVyc2VzLnB1c2gobmV3IE8pfWZ1bmN0aW9uIHdkKCl7eC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkJvbmVcIn1mdW5jdGlvbiB4ZChhLGIpe3JhLmNhbGwodGhpcyxhLGIpO3RoaXMudHlwZT1cIlNraW5uZWRNZXNoXCI7dGhpcy5iaW5kTW9kZT1cImF0dGFjaGVkXCI7dGhpcy5iaW5kTWF0cml4PW5ldyBPO3RoaXMuYmluZE1hdHJpeEludmVyc2U9bmV3IE87YT10aGlzLmluaXRCb25lcygpO2E9bmV3IEVjKGEpO3RoaXMuYmluZChhLHRoaXMubWF0cml4V29ybGQpO3RoaXMubm9ybWFsaXplU2tpbldlaWdodHMoKX1mdW5jdGlvbiBXKGEpe1AuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJMaW5lQmFzaWNNYXRlcmlhbFwiO3RoaXMuY29sb3I9bmV3IEgoMTY3NzcyMTUpO3RoaXMubGluZXdpZHRoPTE7dGhpcy5saW5lam9pbj10aGlzLmxpbmVjYXA9XCJyb3VuZFwiO3RoaXMubGlnaHRzPSExO1xuICAgIHRoaXMuc2V0VmFsdWVzKGEpfWZ1bmN0aW9uIHNhKGEsYixjKXtpZigxPT09YylyZXR1cm4gY29uc29sZS53YXJuKFwiVEhSRUUuTGluZTogcGFyYW1ldGVyIFRIUkVFLkxpbmVQaWVjZXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4gQ3JlYXRlZCBUSFJFRS5MaW5lU2VnbWVudHMgaW5zdGVhZC5cIiksbmV3IFgoYSxiKTt4LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiTGluZVwiO3RoaXMuZ2VvbWV0cnk9dm9pZCAwIT09YT9hOm5ldyBFO3RoaXMubWF0ZXJpYWw9dm9pZCAwIT09Yj9iOm5ldyBXKHtjb2xvcjoxNjc3NzIxNSpNYXRoLnJhbmRvbSgpfSl9ZnVuY3Rpb24gWChhLGIpe3NhLmNhbGwodGhpcyxhLGIpO3RoaXMudHlwZT1cIkxpbmVTZWdtZW50c1wifWZ1bmN0aW9uIHlkKGEsYil7c2EuY2FsbCh0aGlzLGEsYik7dGhpcy50eXBlPVwiTGluZUxvb3BcIn1mdW5jdGlvbiBLYShhKXtQLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiUG9pbnRzTWF0ZXJpYWxcIjt0aGlzLmNvbG9yPW5ldyBIKDE2Nzc3MjE1KTtcbiAgICB0aGlzLm1hcD1udWxsO3RoaXMuc2l6ZT0xO3RoaXMuc2l6ZUF0dGVudWF0aW9uPSEwO3RoaXMubGlnaHRzPSExO3RoaXMuc2V0VmFsdWVzKGEpfWZ1bmN0aW9uIFJiKGEsYil7eC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlBvaW50c1wiO3RoaXMuZ2VvbWV0cnk9dm9pZCAwIT09YT9hOm5ldyBFO3RoaXMubWF0ZXJpYWw9dm9pZCAwIT09Yj9iOm5ldyBLYSh7Y29sb3I6MTY3NzcyMTUqTWF0aC5yYW5kb20oKX0pfWZ1bmN0aW9uIEZjKCl7eC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkdyb3VwXCJ9ZnVuY3Rpb24gZWUoYSxiLGMsZCxlLGYsZyxoLGspe2Z1bmN0aW9uIG0oKXthLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJsb2FkZWRkYXRhXCIsbSwhMSk7cS5uZWVkc1VwZGF0ZT0hMH1VLmNhbGwodGhpcyxhLGIsYyxkLGUsZixnLGgsayk7dGhpcy5nZW5lcmF0ZU1pcG1hcHM9ITE7dmFyIHE9dGhpczthLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkZWRkYXRhXCIsbSwhMSl9ZnVuY3Rpb24gU2IoYSxiLGMsZCxcbiAgICBlLGYsZyxoLGssbSxxLG4pe1UuY2FsbCh0aGlzLG51bGwsZixnLGgsayxtLGQsZSxxLG4pO3RoaXMuaW1hZ2U9e3dpZHRoOmIsaGVpZ2h0OmN9O3RoaXMubWlwbWFwcz1hO3RoaXMuZ2VuZXJhdGVNaXBtYXBzPXRoaXMuZmxpcFk9ITF9ZnVuY3Rpb24gR2MoYSxiLGMsZCxlLGYsZyxoLGssbSl7bT12b2lkIDAhPT1tP206MTAyNjtpZigxMDI2IT09bSYmMTAyNyE9PW0pdGhyb3cgRXJyb3IoXCJEZXB0aFRleHR1cmUgZm9ybWF0IG11c3QgYmUgZWl0aGVyIFRIUkVFLkRlcHRoRm9ybWF0IG9yIFRIUkVFLkRlcHRoU3RlbmNpbEZvcm1hdFwiKTt2b2lkIDA9PT1jJiYxMDI2PT09bSYmKGM9MTAxMik7dm9pZCAwPT09YyYmMTAyNz09PW0mJihjPTEwMjApO1UuY2FsbCh0aGlzLG51bGwsZCxlLGYsZyxoLG0sYyxrKTt0aGlzLmltYWdlPXt3aWR0aDphLGhlaWdodDpifTt0aGlzLm1hZ0ZpbHRlcj12b2lkIDAhPT1nP2c6MTAwMzt0aGlzLm1pbkZpbHRlcj12b2lkIDAhPT1oP2g6MTAwMzt0aGlzLmdlbmVyYXRlTWlwbWFwcz1cbiAgICB0aGlzLmZsaXBZPSExfWZ1bmN0aW9uIFRiKGEpe0UuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJXaXJlZnJhbWVHZW9tZXRyeVwiO3ZhciBiPVtdLGMsZCxlLGY9WzAsMF0sZz17fSxoPVtcImFcIixcImJcIixcImNcIl07aWYoYSYmYS5pc0dlb21ldHJ5KXt2YXIgaz1hLmZhY2VzO3ZhciBtPTA7Zm9yKGQ9ay5sZW5ndGg7bTxkO20rKyl7dmFyIHE9a1ttXTtmb3IoYz0wOzM+YztjKyspe3ZhciBuPXFbaFtjXV07dmFyIHU9cVtoWyhjKzEpJTNdXTtmWzBdPU1hdGgubWluKG4sdSk7ZlsxXT1NYXRoLm1heChuLHUpO249ZlswXStcIixcIitmWzFdO3ZvaWQgMD09PWdbbl0mJihnW25dPXtpbmRleDE6ZlswXSxpbmRleDI6ZlsxXX0pfX1mb3IobiBpbiBnKW09Z1tuXSxoPWEudmVydGljZXNbbS5pbmRleDFdLGIucHVzaChoLngsaC55LGgueiksaD1hLnZlcnRpY2VzW20uaW5kZXgyXSxiLnB1c2goaC54LGgueSxoLnopfWVsc2UgaWYoYSYmYS5pc0J1ZmZlckdlb21ldHJ5KXt2YXIgaD1uZXcgcDtpZihudWxsIT09XG4gICAgYS5pbmRleCl7az1hLmF0dHJpYnV0ZXMucG9zaXRpb247cT1hLmluZGV4O3ZhciBsPWEuZ3JvdXBzOzA9PT1sLmxlbmd0aCYmKGw9W3tzdGFydDowLGNvdW50OnEuY291bnQsbWF0ZXJpYWxJbmRleDowfV0pO2E9MDtmb3IoZT1sLmxlbmd0aDthPGU7KythKWZvcihtPWxbYV0sYz1tLnN0YXJ0LGQ9bS5jb3VudCxtPWMsZD1jK2Q7bTxkO20rPTMpZm9yKGM9MDszPmM7YysrKW49cS5nZXRYKG0rYyksdT1xLmdldFgobSsoYysxKSUzKSxmWzBdPU1hdGgubWluKG4sdSksZlsxXT1NYXRoLm1heChuLHUpLG49ZlswXStcIixcIitmWzFdLHZvaWQgMD09PWdbbl0mJihnW25dPXtpbmRleDE6ZlswXSxpbmRleDI6ZlsxXX0pO2ZvcihuIGluIGcpbT1nW25dLGguZnJvbUJ1ZmZlckF0dHJpYnV0ZShrLG0uaW5kZXgxKSxiLnB1c2goaC54LGgueSxoLnopLGguZnJvbUJ1ZmZlckF0dHJpYnV0ZShrLG0uaW5kZXgyKSxiLnB1c2goaC54LGgueSxoLnopfWVsc2UgZm9yKGs9YS5hdHRyaWJ1dGVzLnBvc2l0aW9uLFxuICAgIG09MCxkPWsuY291bnQvMzttPGQ7bSsrKWZvcihjPTA7Mz5jO2MrKylnPTMqbStjLGguZnJvbUJ1ZmZlckF0dHJpYnV0ZShrLGcpLGIucHVzaChoLngsaC55LGgueiksZz0zKm0rKGMrMSklMyxoLmZyb21CdWZmZXJBdHRyaWJ1dGUoayxnKSxiLnB1c2goaC54LGgueSxoLnopfXRoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihiLDMpKX1mdW5jdGlvbiBIYyhhLGIsYyl7TC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlBhcmFtZXRyaWNHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17ZnVuYzphLHNsaWNlczpiLHN0YWNrczpjfTt0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShuZXcgVWIoYSxiLGMpKTt0aGlzLm1lcmdlVmVydGljZXMoKX1mdW5jdGlvbiBVYihhLGIsYyl7RS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17ZnVuYzphLHNsaWNlczpiLHN0YWNrczpjfTt2YXIgZD1bXSxlPVtdLGY9W10sZz1bXSxoPVxuICAgIG5ldyBwLGs9bmV3IHAsbT1uZXcgcCxxPW5ldyBwLG49bmV3IHAsdSxsLHQ9YisxO2Zvcih1PTA7dTw9Yzt1Kyspe3ZhciB2PXUvYztmb3IobD0wO2w8PWI7bCsrKXt2YXIgdz1sL2Isaz1hKHcsdixrKTtlLnB1c2goay54LGsueSxrLnopOzA8PXctMUUtNT8obT1hKHctMUUtNSx2LG0pLHEuc3ViVmVjdG9ycyhrLG0pKToobT1hKHcrMUUtNSx2LG0pLHEuc3ViVmVjdG9ycyhtLGspKTswPD12LTFFLTU/KG09YSh3LHYtMUUtNSxtKSxuLnN1YlZlY3RvcnMoayxtKSk6KG09YSh3LHYrMUUtNSxtKSxuLnN1YlZlY3RvcnMobSxrKSk7aC5jcm9zc1ZlY3RvcnMocSxuKS5ub3JtYWxpemUoKTtmLnB1c2goaC54LGgueSxoLnopO2cucHVzaCh3LHYpfX1mb3IodT0wO3U8Yzt1KyspZm9yKGw9MDtsPGI7bCsrKWE9dSp0K2wrMSxoPSh1KzEpKnQrbCsxLGs9KHUrMSkqdCtsLGQucHVzaCh1KnQrbCxhLGspLGQucHVzaChhLGgsayk7dGhpcy5zZXRJbmRleChkKTt0aGlzLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsXG4gICAgbmV3IEIoZSwzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJub3JtYWxcIixuZXcgQihmLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcInV2XCIsbmV3IEIoZywyKSl9ZnVuY3Rpb24gSWMoYSxiLGMsZCl7TC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlBvbHloZWRyb25HZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17dmVydGljZXM6YSxpbmRpY2VzOmIscmFkaXVzOmMsZGV0YWlsOmR9O3RoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyBqYShhLGIsYyxkKSk7dGhpcy5tZXJnZVZlcnRpY2VzKCl9ZnVuY3Rpb24gamEoYSxiLGMsZCl7ZnVuY3Rpb24gZShhKXtoLnB1c2goYS54LGEueSxhLnopfWZ1bmN0aW9uIGYoYixjKXtiKj0zO2MueD1hW2IrMF07Yy55PWFbYisxXTtjLno9YVtiKzJdfWZ1bmN0aW9uIGcoYSxiLGMsZCl7MD5kJiYxPT09YS54JiYoa1tiXT1hLngtMSk7MD09PWMueCYmMD09PWMueiYmKGtbYl09ZC8yL01hdGguUEkrLjUpfUUuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnlcIjtcbiAgICB0aGlzLnBhcmFtZXRlcnM9e3ZlcnRpY2VzOmEsaW5kaWNlczpiLHJhZGl1czpjLGRldGFpbDpkfTtjPWN8fDE7ZD1kfHwwO3ZhciBoPVtdLGs9W107KGZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1uZXcgcCxkPW5ldyBwLGc9bmV3IHAsaD0wO2g8Yi5sZW5ndGg7aCs9Myl7ZihiW2grMF0sYyk7ZihiW2grMV0sZCk7ZihiW2grMl0sZyk7dmFyIGssbSxsPWMsej1kLHk9ZyxJPU1hdGgucG93KDIsYSksQT1bXTtmb3IobT0wO208PUk7bSsrKXtBW21dPVtdO3ZhciBKPWwuY2xvbmUoKS5sZXJwKHksbS9JKSx4PXouY2xvbmUoKS5sZXJwKHksbS9JKSxCPUktbTtmb3Ioaz0wO2s8PUI7aysrKUFbbV1ba109MD09PWsmJm09PT1JP0o6Si5jbG9uZSgpLmxlcnAoeCxrL0IpfWZvcihtPTA7bTxJO20rKylmb3Ioaz0wO2s8MiooSS1tKS0xO2srKylsPU1hdGguZmxvb3Ioay8yKSwwPT09ayUyPyhlKEFbbV1bbCsxXSksZShBW20rMV1bbF0pLGUoQVttXVtsXSkpOihlKEFbbV1bbCsxXSksZShBW20rMV1bbCtcbiAgICAxXSksZShBW20rMV1bbF0pKX19KShkKTsoZnVuY3Rpb24oYSl7Zm9yKHZhciBiPW5ldyBwLGM9MDtjPGgubGVuZ3RoO2MrPTMpYi54PWhbYyswXSxiLnk9aFtjKzFdLGIuej1oW2MrMl0sYi5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhcihhKSxoW2MrMF09Yi54LGhbYysxXT1iLnksaFtjKzJdPWIuen0pKGMpOyhmdW5jdGlvbigpe2Zvcih2YXIgYT1uZXcgcCxiPTA7YjxoLmxlbmd0aDtiKz0zKWEueD1oW2IrMF0sYS55PWhbYisxXSxhLno9aFtiKzJdLGsucHVzaChNYXRoLmF0YW4yKGEueiwtYS54KS8yL01hdGguUEkrLjUsMS0oTWF0aC5hdGFuMigtYS55LE1hdGguc3FydChhLngqYS54K2EueiphLnopKS9NYXRoLlBJKy41KSk7Zm9yKHZhciBhPW5ldyBwLGI9bmV3IHAsYz1uZXcgcCxkPW5ldyBwLGU9bmV3IEQsZj1uZXcgRCxsPW5ldyBELHc9MCx6PTA7dzxoLmxlbmd0aDt3Kz05LHorPTYpe2Euc2V0KGhbdyswXSxoW3crMV0saFt3KzJdKTtiLnNldChoW3crM10saFt3KzRdLGhbdytcbiAgICA1XSk7Yy5zZXQoaFt3KzZdLGhbdys3XSxoW3crOF0pO2Uuc2V0KGtbeiswXSxrW3orMV0pO2Yuc2V0KGtbeisyXSxrW3orM10pO2wuc2V0KGtbeis0XSxrW3orNV0pO2QuY29weShhKS5hZGQoYikuYWRkKGMpLmRpdmlkZVNjYWxhcigzKTt2YXIgeT1NYXRoLmF0YW4yKGQueiwtZC54KTtnKGUseiswLGEseSk7ZyhmLHorMixiLHkpO2cobCx6KzQsYyx5KX1mb3IoYT0wO2E8ay5sZW5ndGg7YSs9NiliPWtbYSswXSxjPWtbYSsyXSxkPWtbYSs0XSxlPU1hdGgubWluKGIsYyxkKSwuOTxNYXRoLm1heChiLGMsZCkmJi4xPmUmJiguMj5iJiYoa1thKzBdKz0xKSwuMj5jJiYoa1thKzJdKz0xKSwuMj5kJiYoa1thKzRdKz0xKSl9KSgpO3RoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihoLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcIm5vcm1hbFwiLG5ldyBCKGguc2xpY2UoKSwzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJ1dlwiLG5ldyBCKGssMikpOzA9PT1kP3RoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTpcbiAgICB0aGlzLm5vcm1hbGl6ZU5vcm1hbHMoKX1mdW5jdGlvbiBKYyhhLGIpe0wuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJUZXRyYWhlZHJvbkdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXM6YSxkZXRhaWw6Yn07dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IFZiKGEsYikpO3RoaXMubWVyZ2VWZXJ0aWNlcygpfWZ1bmN0aW9uIFZiKGEsYil7amEuY2FsbCh0aGlzLFsxLDEsMSwtMSwtMSwxLC0xLDEsLTEsMSwtMSwtMV0sWzIsMSwwLDAsMywyLDEsMywwLDIsMywxXSxhLGIpO3RoaXMudHlwZT1cIlRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1czphLGRldGFpbDpifX1mdW5jdGlvbiBLYyhhLGIpe0wuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJPY3RhaGVkcm9uR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1czphLGRldGFpbDpifTt0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShuZXcgdWIoYSxiKSk7dGhpcy5tZXJnZVZlcnRpY2VzKCl9XG4gICAgZnVuY3Rpb24gdWIoYSxiKXtqYS5jYWxsKHRoaXMsWzEsMCwwLC0xLDAsMCwwLDEsMCwwLC0xLDAsMCwwLDEsMCwwLC0xXSxbMCwyLDQsMCw0LDMsMCwzLDUsMCw1LDIsMSwyLDUsMSw1LDMsMSwzLDQsMSw0LDJdLGEsYik7dGhpcy50eXBlPVwiT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXM6YSxkZXRhaWw6Yn19ZnVuY3Rpb24gTGMoYSxiKXtMLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiSWNvc2FoZWRyb25HZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsZGV0YWlsOmJ9O3RoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyBXYihhLGIpKTt0aGlzLm1lcmdlVmVydGljZXMoKX1mdW5jdGlvbiBXYihhLGIpe3ZhciBjPSgxK01hdGguc3FydCg1KSkvMjtqYS5jYWxsKHRoaXMsWy0xLGMsMCwxLGMsMCwtMSwtYywwLDEsLWMsMCwwLC0xLGMsMCwxLGMsMCwtMSwtYywwLDEsLWMsYywwLC0xLGMsMCwxLC1jLDAsLTEsLWMsMCwxXSxbMCwxMSxcbiAgICA1LDAsNSwxLDAsMSw3LDAsNywxMCwwLDEwLDExLDEsNSw5LDUsMTEsNCwxMSwxMCwyLDEwLDcsNiw3LDEsOCwzLDksNCwzLDQsMiwzLDIsNiwzLDYsOCwzLDgsOSw0LDksNSwyLDQsMTEsNiwyLDEwLDgsNiw3LDksOCwxXSxhLGIpO3RoaXMudHlwZT1cIkljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1czphLGRldGFpbDpifX1mdW5jdGlvbiBNYyhhLGIpe0wuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJEb2RlY2FoZWRyb25HZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsZGV0YWlsOmJ9O3RoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyBYYihhLGIpKTt0aGlzLm1lcmdlVmVydGljZXMoKX1mdW5jdGlvbiBYYihhLGIpe3ZhciBjPSgxK01hdGguc3FydCg1KSkvMixkPTEvYztqYS5jYWxsKHRoaXMsWy0xLC0xLC0xLC0xLC0xLDEsLTEsMSwtMSwtMSwxLDEsMSwtMSwtMSwxLC0xLDEsMSwxLC0xLDEsMSwxLDAsLWQsLWMsMCwtZCxjLDAsXG4gICAgZCwtYywwLGQsYywtZCwtYywwLC1kLGMsMCxkLC1jLDAsZCxjLDAsLWMsMCwtZCxjLDAsLWQsLWMsMCxkLGMsMCxkXSxbMywxMSw3LDMsNywxNSwzLDE1LDEzLDcsMTksMTcsNywxNyw2LDcsNiwxNSwxNyw0LDgsMTcsOCwxMCwxNywxMCw2LDgsMCwxNiw4LDE2LDIsOCwyLDEwLDAsMTIsMSwwLDEsMTgsMCwxOCwxNiw2LDEwLDIsNiwyLDEzLDYsMTMsMTUsMiwxNiwxOCwyLDE4LDMsMiwzLDEzLDE4LDEsOSwxOCw5LDExLDE4LDExLDMsNCwxNCwxMiw0LDEyLDAsNCwwLDgsMTEsOSw1LDExLDUsMTksMTEsMTksNywxOSw1LDE0LDE5LDE0LDQsMTksNCwxNywxLDEyLDE0LDEsMTQsNSwxLDUsOV0sYSxiKTt0aGlzLnR5cGU9XCJEb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsZGV0YWlsOmJ9fWZ1bmN0aW9uIE5jKGEsYixjLGQsZSxmKXtMLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiVHViZUdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtwYXRoOmEsXG4gICAgdHVidWxhclNlZ21lbnRzOmIscmFkaXVzOmMscmFkaWFsU2VnbWVudHM6ZCxjbG9zZWQ6ZX07dm9pZCAwIT09ZiYmY29uc29sZS53YXJuKFwiVEhSRUUuVHViZUdlb21ldHJ5OiB0YXBlciBoYXMgYmVlbiByZW1vdmVkLlwiKTthPW5ldyBZYihhLGIsYyxkLGUpO3RoaXMudGFuZ2VudHM9YS50YW5nZW50czt0aGlzLm5vcm1hbHM9YS5ub3JtYWxzO3RoaXMuYmlub3JtYWxzPWEuYmlub3JtYWxzO3RoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KGEpO3RoaXMubWVyZ2VWZXJ0aWNlcygpfWZ1bmN0aW9uIFliKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihlKXtxPWEuZ2V0UG9pbnRBdChlL2IscSk7dmFyIGY9Zy5ub3JtYWxzW2VdO2U9Zy5iaW5vcm1hbHNbZV07Zm9yKGw9MDtsPD1kO2wrKyl7dmFyIG09bC9kKk1hdGguUEkqMixuPU1hdGguc2luKG0pLG09LU1hdGguY29zKG0pO2sueD1tKmYueCtuKmUueDtrLnk9bSpmLnkrbiplLnk7ay56PW0qZi56K24qZS56O2subm9ybWFsaXplKCk7dC5wdXNoKGsueCxcbiAgICBrLnksay56KTtoLng9cS54K2Mqay54O2gueT1xLnkrYyprLnk7aC56PXEueitjKmsuejtyLnB1c2goaC54LGgueSxoLnopfX1FLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiVHViZUJ1ZmZlckdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtwYXRoOmEsdHVidWxhclNlZ21lbnRzOmIscmFkaXVzOmMscmFkaWFsU2VnbWVudHM6ZCxjbG9zZWQ6ZX07Yj1ifHw2NDtjPWN8fDE7ZD1kfHw4O2U9ZXx8ITE7dmFyIGc9YS5jb21wdXRlRnJlbmV0RnJhbWVzKGIsZSk7dGhpcy50YW5nZW50cz1nLnRhbmdlbnRzO3RoaXMubm9ybWFscz1nLm5vcm1hbHM7dGhpcy5iaW5vcm1hbHM9Zy5iaW5vcm1hbHM7dmFyIGg9bmV3IHAsaz1uZXcgcCxtPW5ldyBELHE9bmV3IHAsbixsLHI9W10sdD1bXSx2PVtdLHc9W107Zm9yKG49MDtuPGI7bisrKWYobik7ZighMT09PWU/YjowKTtmb3Iobj0wO248PWI7bisrKWZvcihsPTA7bDw9ZDtsKyspbS54PW4vYixtLnk9bC9kLHYucHVzaChtLngsbS55KTsoZnVuY3Rpb24oKXtmb3IobD1cbiAgICAxO2w8PWI7bCsrKWZvcihuPTE7bjw9ZDtuKyspe3ZhciBhPShkKzEpKmwrKG4tMSksYz0oZCsxKSpsK24sZT0oZCsxKSoobC0xKStuO3cucHVzaCgoZCsxKSoobC0xKSsobi0xKSxhLGUpO3cucHVzaChhLGMsZSl9fSkoKTt0aGlzLnNldEluZGV4KHcpO3RoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihyLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcIm5vcm1hbFwiLG5ldyBCKHQsMykpO3RoaXMuYWRkQXR0cmlidXRlKFwidXZcIixuZXcgQih2LDIpKX1mdW5jdGlvbiBPYyhhLGIsYyxkLGUsZixnKXtMLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiVG9ydXNLbm90R2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1czphLHR1YmU6Yix0dWJ1bGFyU2VnbWVudHM6YyxyYWRpYWxTZWdtZW50czpkLHA6ZSxxOmZ9O3ZvaWQgMCE9PWcmJmNvbnNvbGUud2FybihcIlRIUkVFLlRvcnVzS25vdEdlb21ldHJ5OiBoZWlnaHRTY2FsZSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnNjYWxlKCB4LCB5LCB6ICkgaW5zdGVhZC5cIik7XG4gICAgdGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IFpiKGEsYixjLGQsZSxmKSk7dGhpcy5tZXJnZVZlcnRpY2VzKCl9ZnVuY3Rpb24gWmIoYSxiLGMsZCxlLGYpe2Z1bmN0aW9uIGcoYSxiLGMsZCxlKXt2YXIgZj1NYXRoLnNpbihhKTtiPWMvYiphO2M9TWF0aC5jb3MoYik7ZS54PWQqKDIrYykqLjUqTWF0aC5jb3MoYSk7ZS55PWQqKDIrYykqZiouNTtlLno9ZCpNYXRoLnNpbihiKSouNX1FLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiVG9ydXNLbm90QnVmZmVyR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1czphLHR1YmU6Yix0dWJ1bGFyU2VnbWVudHM6YyxyYWRpYWxTZWdtZW50czpkLHA6ZSxxOmZ9O2E9YXx8MTtiPWJ8fC40O2M9TWF0aC5mbG9vcihjKXx8NjQ7ZD1NYXRoLmZsb29yKGQpfHw4O2U9ZXx8MjtmPWZ8fDM7dmFyIGg9W10saz1bXSxtPVtdLHE9W10sbixsPW5ldyBwLHI9bmV3IHAsdD1uZXcgcCx2PW5ldyBwLHc9bmV3IHAsej1uZXcgcCx5PW5ldyBwO2ZvcihuPTA7bjw9XG4gICAgYzsrK24pe3ZhciBJPW4vYyplKk1hdGguUEkqMjtnKEksZSxmLGEsdCk7ZyhJKy4wMSxlLGYsYSx2KTt6LnN1YlZlY3RvcnModix0KTt5LmFkZFZlY3RvcnModix0KTt3LmNyb3NzVmVjdG9ycyh6LHkpO3kuY3Jvc3NWZWN0b3JzKHcseik7dy5ub3JtYWxpemUoKTt5Lm5vcm1hbGl6ZSgpO2ZvcihJPTA7STw9ZDsrK0kpe3ZhciBBPUkvZCpNYXRoLlBJKjIsSj0tYipNYXRoLmNvcyhBKSxBPWIqTWF0aC5zaW4oQSk7bC54PXQueCsoSip5LngrQSp3LngpO2wueT10LnkrKEoqeS55K0Eqdy55KTtsLno9dC56KyhKKnkueitBKncueik7ay5wdXNoKGwueCxsLnksbC56KTtyLnN1YlZlY3RvcnMobCx0KS5ub3JtYWxpemUoKTttLnB1c2goci54LHIueSxyLnopO3EucHVzaChuL2MpO3EucHVzaChJL2QpfX1mb3IoST0xO0k8PWM7SSsrKWZvcihuPTE7bjw9ZDtuKyspYT0oZCsxKSpJKyhuLTEpLGI9KGQrMSkqSStuLGU9KGQrMSkqKEktMSkrbixoLnB1c2goKGQrMSkqKEktMSkrKG4tMSksYSxlKSxcbiAgICBoLnB1c2goYSxiLGUpO3RoaXMuc2V0SW5kZXgoaCk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKGssMykpO3RoaXMuYWRkQXR0cmlidXRlKFwibm9ybWFsXCIsbmV3IEIobSwzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJ1dlwiLG5ldyBCKHEsMikpfWZ1bmN0aW9uIFBjKGEsYixjLGQsZSl7TC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlRvcnVzR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1czphLHR1YmU6YixyYWRpYWxTZWdtZW50czpjLHR1YnVsYXJTZWdtZW50czpkLGFyYzplfTt0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShuZXcgJGIoYSxiLGMsZCxlKSk7dGhpcy5tZXJnZVZlcnRpY2VzKCl9ZnVuY3Rpb24gJGIoYSxiLGMsZCxlKXtFLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiVG9ydXNCdWZmZXJHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsdHViZTpiLHJhZGlhbFNlZ21lbnRzOmMsdHVidWxhclNlZ21lbnRzOmQsYXJjOmV9O2E9YXx8MTtiPWJ8fFxuICAgIC40O2M9TWF0aC5mbG9vcihjKXx8ODtkPU1hdGguZmxvb3IoZCl8fDY7ZT1lfHwyKk1hdGguUEk7dmFyIGY9W10sZz1bXSxoPVtdLGs9W10sbT1uZXcgcCxxPW5ldyBwLG49bmV3IHAsbCxyO2ZvcihsPTA7bDw9YztsKyspZm9yKHI9MDtyPD1kO3IrKyl7dmFyIHQ9ci9kKmUsdj1sL2MqTWF0aC5QSSoyO3EueD0oYStiKk1hdGguY29zKHYpKSpNYXRoLmNvcyh0KTtxLnk9KGErYipNYXRoLmNvcyh2KSkqTWF0aC5zaW4odCk7cS56PWIqTWF0aC5zaW4odik7Zy5wdXNoKHEueCxxLnkscS56KTttLng9YSpNYXRoLmNvcyh0KTttLnk9YSpNYXRoLnNpbih0KTtuLnN1YlZlY3RvcnMocSxtKS5ub3JtYWxpemUoKTtoLnB1c2gobi54LG4ueSxuLnopO2sucHVzaChyL2QpO2sucHVzaChsL2MpfWZvcihsPTE7bDw9YztsKyspZm9yKHI9MTtyPD1kO3IrKylhPShkKzEpKihsLTEpK3ItMSxiPShkKzEpKihsLTEpK3IsZT0oZCsxKSpsK3IsZi5wdXNoKChkKzEpKmwrci0xLGEsZSksZi5wdXNoKGEsYixcbiAgICBlKTt0aGlzLnNldEluZGV4KGYpO3RoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihnLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcIm5vcm1hbFwiLG5ldyBCKGgsMykpO3RoaXMuYWRkQXR0cmlidXRlKFwidXZcIixuZXcgQihrLDIpKX1mdW5jdGlvbiBiZihhLGIsYyxkLGUpe2Zvcih2YXIgZixnPTAsaD1iLGs9Yy1kO2g8YztoKz1kKWcrPShhW2tdLWFbaF0pKihhW2grMV0rYVtrKzFdKSxrPWg7aWYoZT09PTA8Zylmb3IoZT1iO2U8YztlKz1kKWY9Y2YoZSxhW2VdLGFbZSsxXSxmKTtlbHNlIGZvcihlPWMtZDtlPj1iO2UtPWQpZj1jZihlLGFbZV0sYVtlKzFdLGYpO2YmJnZiKGYsZi5uZXh0KSYmKFFjKGYpLGY9Zi5uZXh0KTtyZXR1cm4gZn1mdW5jdGlvbiBSYyhhLGIpe2lmKCFhKXJldHVybiBhO2J8fChiPWEpO2Rve3ZhciBjPSExO2lmKGEuc3RlaW5lcnx8IXZiKGEsYS5uZXh0KSYmMCE9PXRhKGEucHJldixhLGEubmV4dCkpYT1hLm5leHQ7ZWxzZXtRYyhhKTthPWI9YS5wcmV2O1xuICAgIGlmKGE9PT1hLm5leHQpYnJlYWs7Yz0hMH19d2hpbGUoY3x8YSE9PWIpO3JldHVybiBifWZ1bmN0aW9uIFNjKGEsYixjLGQsZSxmLGcpe2lmKGEpe2lmKCFnJiZmKXt2YXIgaD1hLGs9aDtkbyBudWxsPT09ay56JiYoay56PWZlKGsueCxrLnksZCxlLGYpKSxrLnByZXZaPWsucHJldixrPWsubmV4dFo9ay5uZXh0O3doaWxlKGshPT1oKTtrLnByZXZaLm5leHRaPW51bGw7ay5wcmV2Wj1udWxsO3ZhciBoPWssbSxxLG4sbCxyPTE7ZG97az1oO3ZhciB0PWg9bnVsbDtmb3IocT0wO2s7KXtxKys7dmFyIHA9aztmb3IobT1uPTA7bTxyJiYobisrLHA9cC5uZXh0WixwKTttKyspO2ZvcihsPXI7MDxufHwwPGwmJnA7KTAhPT1uJiYoMD09PWx8fCFwfHxrLno8PXAueik/KG09ayxrPWsubmV4dFosbi0tKToobT1wLHA9cC5uZXh0WixsLS0pLHQ/dC5uZXh0Wj1tOmg9bSxtLnByZXZaPXQsdD1tO2s9cH10Lm5leHRaPW51bGw7cio9Mn13aGlsZSgxPHEpfWZvcihoPWE7YS5wcmV2IT09YS5uZXh0Oyl7az1cbiAgICBhLnByZXY7cD1hLm5leHQ7aWYoZilhOnt0PWE7bD1kO3ZhciB3PWUsej1mO3E9dC5wcmV2O249dDtyPXQubmV4dDtpZigwPD10YShxLG4scikpdD0hMTtlbHNle3ZhciB5PXEueD5uLng/cS54PnIueD9xLng6ci54Om4ueD5yLng/bi54OnIueCxJPXEueT5uLnk/cS55PnIueT9xLnk6ci55Om4ueT5yLnk/bi55OnIueTttPWZlKHEueDxuLng/cS54PHIueD9xLng6ci54Om4ueDxyLng/bi54OnIueCxxLnk8bi55P3EueTxyLnk/cS55OnIueTpuLnk8ci55P24ueTpyLnksbCx3LHopO2w9ZmUoeSxJLGwsdyx6KTtmb3Iodz10Lm5leHRaO3cmJncuejw9bDspe2lmKHchPT10LnByZXYmJnchPT10Lm5leHQmJnpkKHEueCxxLnksbi54LG4ueSxyLngsci55LHcueCx3LnkpJiYwPD10YSh3LnByZXYsdyx3Lm5leHQpKXt0PSExO2JyZWFrIGF9dz13Lm5leHRafWZvcih3PXQucHJldlo7dyYmdy56Pj1tOyl7aWYodyE9PXQucHJldiYmdyE9PXQubmV4dCYmemQocS54LHEueSxuLngsbi55LHIueCxcbiAgICByLnksdy54LHcueSkmJjA8PXRhKHcucHJldix3LHcubmV4dCkpe3Q9ITE7YnJlYWsgYX13PXcucHJldlp9dD0hMH19ZWxzZSBhOmlmKHQ9YSxxPXQucHJldixuPXQscj10Lm5leHQsMDw9dGEocSxuLHIpKXQ9ITE7ZWxzZXtmb3IobT10Lm5leHQubmV4dDttIT09dC5wcmV2Oyl7aWYoemQocS54LHEueSxuLngsbi55LHIueCxyLnksbS54LG0ueSkmJjA8PXRhKG0ucHJldixtLG0ubmV4dCkpe3Q9ITE7YnJlYWsgYX1tPW0ubmV4dH10PSEwfWlmKHQpYi5wdXNoKGsuaS9jKSxiLnB1c2goYS5pL2MpLGIucHVzaChwLmkvYyksUWMoYSksaD1hPXAubmV4dDtlbHNlIGlmKGE9cCxhPT09aCl7aWYoIWcpU2MoUmMoYSksYixjLGQsZSxmLDEpO2Vsc2UgaWYoMT09PWcpe2c9YjtoPWM7az1hO2RvIHA9ay5wcmV2LHQ9ay5uZXh0Lm5leHQsIXZiKHAsdCkmJmRmKHAsayxrLm5leHQsdCkmJlRjKHAsdCkmJlRjKHQscCkmJihnLnB1c2gocC5pL2gpLGcucHVzaChrLmkvaCksZy5wdXNoKHQuaS9oKSxcbiAgICBRYyhrKSxRYyhrLm5leHQpLGs9YT10KSxrPWsubmV4dDt3aGlsZShrIT09YSk7YT1rO1NjKGEsYixjLGQsZSxmLDIpfWVsc2UgaWYoMj09PWcpYTp7Zz1hO2Rve2ZvcihoPWcubmV4dC5uZXh0O2ghPT1nLnByZXY7KXtpZihrPWcuaSE9PWguaSl7az1nO3A9aDtpZih0PWsubmV4dC5pIT09cC5pJiZrLnByZXYuaSE9PXAuaSl7Yjp7dD1rO2Rve2lmKHQuaSE9PWsuaSYmdC5uZXh0LmkhPT1rLmkmJnQuaSE9PXAuaSYmdC5uZXh0LmkhPT1wLmkmJmRmKHQsdC5uZXh0LGsscCkpe3Q9ITA7YnJlYWsgYn10PXQubmV4dH13aGlsZSh0IT09ayk7dD0hMX10PSF0fWlmKHQ9dCYmVGMoayxwKSYmVGMocCxrKSl7dD1rO3E9ITE7bj0oay54K3AueCkvMjtwPShrLnkrcC55KS8yO2RvIHQueT5wIT09dC5uZXh0Lnk+cCYmdC5uZXh0LnkhPT10LnkmJm48KHQubmV4dC54LXQueCkqKHAtdC55KS8odC5uZXh0LnktdC55KSt0LngmJihxPSFxKSx0PXQubmV4dDt3aGlsZSh0IT09ayk7dD1xfWs9dH1pZihrKXthPVxuICAgIGVmKGcsaCk7Zz1SYyhnLGcubmV4dCk7YT1SYyhhLGEubmV4dCk7U2MoZyxiLGMsZCxlLGYpO1NjKGEsYixjLGQsZSxmKTticmVhayBhfWg9aC5uZXh0fWc9Zy5uZXh0fXdoaWxlKGchPT1hKX1icmVha319fX1mdW5jdGlvbiBIZyhhLGIpe3JldHVybiBhLngtYi54fWZ1bmN0aW9uIElnKGEsYil7dmFyIGM9YixkPWEueCxlPWEueSxmPS1JbmZpbml0eTtkb3tpZihlPD1jLnkmJmU+PWMubmV4dC55JiZjLm5leHQueSE9PWMueSl7dmFyIGc9Yy54KyhlLWMueSkqKGMubmV4dC54LWMueCkvKGMubmV4dC55LWMueSk7aWYoZzw9ZCYmZz5mKXtmPWc7aWYoZz09PWQpe2lmKGU9PT1jLnkpcmV0dXJuIGM7aWYoZT09PWMubmV4dC55KXJldHVybiBjLm5leHR9dmFyIGg9Yy54PGMubmV4dC54P2M6Yy5uZXh0fX1jPWMubmV4dH13aGlsZShjIT09Yik7aWYoIWgpcmV0dXJuIG51bGw7aWYoZD09PWYpcmV0dXJuIGgucHJldjtiPWg7Zm9yKHZhciBnPWgueCxrPWgueSxtPUluZmluaXR5LHEsYz1oLm5leHQ7YyE9PVxuICAgIGI7KWQ+PWMueCYmYy54Pj1nJiZkIT09Yy54JiZ6ZChlPGs/ZDpmLGUsZyxrLGU8az9mOmQsZSxjLngsYy55KSYmKHE9TWF0aC5hYnMoZS1jLnkpLyhkLWMueCksKHE8bXx8cT09PW0mJmMueD5oLngpJiZUYyhjLGEpJiYoaD1jLG09cSkpLGM9Yy5uZXh0O3JldHVybiBofWZ1bmN0aW9uIGZlKGEsYixjLGQsZSl7YT0zMjc2NyooYS1jKSplO2I9MzI3NjcqKGItZCkqZTthPShhfGE8PDgpJjE2NzExOTM1O2E9KGF8YTw8NCkmMjUyNjQ1MTM1O2E9KGF8YTw8MikmODU4OTkzNDU5O2I9KGJ8Yjw8OCkmMTY3MTE5MzU7Yj0oYnxiPDw0KSYyNTI2NDUxMzU7Yj0oYnxiPDwyKSY4NTg5OTM0NTk7cmV0dXJuKGF8YTw8MSkmMTQzMTY1NTc2NXwoKGJ8Yjw8MSkmMTQzMTY1NTc2NSk8PDF9ZnVuY3Rpb24gSmcoYSl7dmFyIGI9YSxjPWE7ZG8gYi54PGMueCYmKGM9YiksYj1iLm5leHQ7d2hpbGUoYiE9PWEpO3JldHVybiBjfWZ1bmN0aW9uIHpkKGEsYixjLGQsZSxmLGcsaCl7cmV0dXJuIDA8PShlLVxuICAgIGcpKihiLWgpLShhLWcpKihmLWgpJiYwPD0oYS1nKSooZC1oKS0oYy1nKSooYi1oKSYmMDw9KGMtZykqKGYtaCktKGUtZykqKGQtaCl9ZnVuY3Rpb24gdGEoYSxiLGMpe3JldHVybihiLnktYS55KSooYy54LWIueCktKGIueC1hLngpKihjLnktYi55KX1mdW5jdGlvbiB2YihhLGIpe3JldHVybiBhLng9PT1iLngmJmEueT09PWIueX1mdW5jdGlvbiBkZihhLGIsYyxkKXtyZXR1cm4gdmIoYSxiKSYmdmIoYyxkKXx8dmIoYSxkKSYmdmIoYyxiKT8hMDowPHRhKGEsYixjKSE9PTA8dGEoYSxiLGQpJiYwPHRhKGMsZCxhKSE9PTA8dGEoYyxkLGIpfWZ1bmN0aW9uIFRjKGEsYil7cmV0dXJuIDA+dGEoYS5wcmV2LGEsYS5uZXh0KT8wPD10YShhLGIsYS5uZXh0KSYmMDw9dGEoYSxhLnByZXYsYik6MD50YShhLGIsYS5wcmV2KXx8MD50YShhLGEubmV4dCxiKX1mdW5jdGlvbiBlZihhLGIpe3ZhciBjPW5ldyBnZShhLmksYS54LGEueSksZD1uZXcgZ2UoYi5pLGIueCxiLnkpLGU9YS5uZXh0LGY9Yi5wcmV2O1xuICAgIGEubmV4dD1iO2IucHJldj1hO2MubmV4dD1lO2UucHJldj1jO2QubmV4dD1jO2MucHJldj1kO2YubmV4dD1kO2QucHJldj1mO3JldHVybiBkfWZ1bmN0aW9uIGNmKGEsYixjLGQpe2E9bmV3IGdlKGEsYixjKTtkPyhhLm5leHQ9ZC5uZXh0LGEucHJldj1kLGQubmV4dC5wcmV2PWEsZC5uZXh0PWEpOihhLnByZXY9YSxhLm5leHQ9YSk7cmV0dXJuIGF9ZnVuY3Rpb24gUWMoYSl7YS5uZXh0LnByZXY9YS5wcmV2O2EucHJldi5uZXh0PWEubmV4dDthLnByZXZaJiYoYS5wcmV2Wi5uZXh0Wj1hLm5leHRaKTthLm5leHRaJiYoYS5uZXh0Wi5wcmV2Wj1hLnByZXZaKX1mdW5jdGlvbiBnZShhLGIsYyl7dGhpcy5pPWE7dGhpcy54PWI7dGhpcy55PWM7dGhpcy5uZXh0Wj10aGlzLnByZXZaPXRoaXMuej10aGlzLm5leHQ9dGhpcy5wcmV2PW51bGw7dGhpcy5zdGVpbmVyPSExfWZ1bmN0aW9uIGliKGEsYil7TC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkV4dHJ1ZGVHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz1cbiAgICB7c2hhcGVzOmEsb3B0aW9uczpifTt0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShuZXcgTGEoYSxiKSk7dGhpcy5tZXJnZVZlcnRpY2VzKCl9ZnVuY3Rpb24gTGEoYSxiKXtcInVuZGVmaW5lZFwiIT09dHlwZW9mIGEmJihFLmNhbGwodGhpcyksdGhpcy50eXBlPVwiRXh0cnVkZUJ1ZmZlckdlb21ldHJ5XCIsYT1BcnJheS5pc0FycmF5KGEpP2E6W2FdLHRoaXMuYWRkU2hhcGVMaXN0KGEsYiksdGhpcy5jb21wdXRlVmVydGV4Tm9ybWFscygpKX1mdW5jdGlvbiBVYyhhLGIpe0wuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJUZXh0R2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3RleHQ6YSxwYXJhbWV0ZXJzOmJ9O3RoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyBhYyhhLGIpKTt0aGlzLm1lcmdlVmVydGljZXMoKX1mdW5jdGlvbiBhYyhhLGIpe2I9Ynx8e307dmFyIGM9Yi5mb250O2lmKCFjfHwhYy5pc0ZvbnQpcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJUSFJFRS5UZXh0R2VvbWV0cnk6IGZvbnQgcGFyYW1ldGVyIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5Gb250LlwiKSxcbiAgICBuZXcgTDthPWMuZ2VuZXJhdGVTaGFwZXMoYSxiLnNpemUsYi5jdXJ2ZVNlZ21lbnRzKTtiLmFtb3VudD12b2lkIDAhPT1iLmhlaWdodD9iLmhlaWdodDo1MDt2b2lkIDA9PT1iLmJldmVsVGhpY2tuZXNzJiYoYi5iZXZlbFRoaWNrbmVzcz0xMCk7dm9pZCAwPT09Yi5iZXZlbFNpemUmJihiLmJldmVsU2l6ZT04KTt2b2lkIDA9PT1iLmJldmVsRW5hYmxlZCYmKGIuYmV2ZWxFbmFibGVkPSExKTtMYS5jYWxsKHRoaXMsYSxiKTt0aGlzLnR5cGU9XCJUZXh0QnVmZmVyR2VvbWV0cnlcIn1mdW5jdGlvbiBWYyhhLGIsYyxkLGUsZixnKXtMLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiU3BoZXJlR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1czphLHdpZHRoU2VnbWVudHM6YixoZWlnaHRTZWdtZW50czpjLHBoaVN0YXJ0OmQscGhpTGVuZ3RoOmUsdGhldGFTdGFydDpmLHRoZXRhTGVuZ3RoOmd9O3RoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyB3YihhLGIsYyxkLGUsZixnKSk7dGhpcy5tZXJnZVZlcnRpY2VzKCl9XG4gICAgZnVuY3Rpb24gd2IoYSxiLGMsZCxlLGYsZyl7RS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlNwaGVyZUJ1ZmZlckdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXM6YSx3aWR0aFNlZ21lbnRzOmIsaGVpZ2h0U2VnbWVudHM6YyxwaGlTdGFydDpkLHBoaUxlbmd0aDplLHRoZXRhU3RhcnQ6Zix0aGV0YUxlbmd0aDpnfTthPWF8fDE7Yj1NYXRoLm1heCgzLE1hdGguZmxvb3IoYil8fDgpO2M9TWF0aC5tYXgoMixNYXRoLmZsb29yKGMpfHw2KTtkPXZvaWQgMCE9PWQ/ZDowO2U9dm9pZCAwIT09ZT9lOjIqTWF0aC5QSTtmPXZvaWQgMCE9PWY/ZjowO2c9dm9pZCAwIT09Zz9nOk1hdGguUEk7dmFyIGg9ZitnLGssbSxxPTAsbj1bXSxsPW5ldyBwLHI9bmV3IHAsdD1bXSx2PVtdLHc9W10sej1bXTtmb3IobT0wO208PWM7bSsrKXt2YXIgeT1bXSxJPW0vYztmb3Ioaz0wO2s8PWI7aysrKXt2YXIgQT1rL2I7bC54PS1hKk1hdGguY29zKGQrQSplKSpNYXRoLnNpbihmK0kqZyk7bC55PWEqTWF0aC5jb3MoZitcbiAgICBJKmcpO2wuej1hKk1hdGguc2luKGQrQSplKSpNYXRoLnNpbihmK0kqZyk7di5wdXNoKGwueCxsLnksbC56KTtyLnNldChsLngsbC55LGwueikubm9ybWFsaXplKCk7dy5wdXNoKHIueCxyLnksci56KTt6LnB1c2goQSwxLUkpO3kucHVzaChxKyspfW4ucHVzaCh5KX1mb3IobT0wO208YzttKyspZm9yKGs9MDtrPGI7aysrKWE9blttXVtrKzFdLGQ9blttXVtrXSxlPW5bbSsxXVtrXSxnPW5bbSsxXVtrKzFdLCgwIT09bXx8MDxmKSYmdC5wdXNoKGEsZCxnKSwobSE9PWMtMXx8aDxNYXRoLlBJKSYmdC5wdXNoKGQsZSxnKTt0aGlzLnNldEluZGV4KHQpO3RoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQih2LDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcIm5vcm1hbFwiLG5ldyBCKHcsMykpO3RoaXMuYWRkQXR0cmlidXRlKFwidXZcIixuZXcgQih6LDIpKX1mdW5jdGlvbiBXYyhhLGIsYyxkLGUsZil7TC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlJpbmdHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz1cbiAgICB7aW5uZXJSYWRpdXM6YSxvdXRlclJhZGl1czpiLHRoZXRhU2VnbWVudHM6YyxwaGlTZWdtZW50czpkLHRoZXRhU3RhcnQ6ZSx0aGV0YUxlbmd0aDpmfTt0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShuZXcgYmMoYSxiLGMsZCxlLGYpKTt0aGlzLm1lcmdlVmVydGljZXMoKX1mdW5jdGlvbiBiYyhhLGIsYyxkLGUsZil7RS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlJpbmdCdWZmZXJHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17aW5uZXJSYWRpdXM6YSxvdXRlclJhZGl1czpiLHRoZXRhU2VnbWVudHM6YyxwaGlTZWdtZW50czpkLHRoZXRhU3RhcnQ6ZSx0aGV0YUxlbmd0aDpmfTthPWF8fC41O2I9Ynx8MTtlPXZvaWQgMCE9PWU/ZTowO2Y9dm9pZCAwIT09Zj9mOjIqTWF0aC5QSTtjPXZvaWQgMCE9PWM/TWF0aC5tYXgoMyxjKTo4O2Q9dm9pZCAwIT09ZD9NYXRoLm1heCgxLGQpOjE7dmFyIGc9W10saD1bXSxrPVtdLG09W10scT1hLG49KGItYSkvZCxsPW5ldyBwLHI9bmV3IEQsdCx2O2Zvcih0PVxuICAgIDA7dDw9ZDt0Kyspe2Zvcih2PTA7djw9Yzt2KyspYT1lK3YvYypmLGwueD1xKk1hdGguY29zKGEpLGwueT1xKk1hdGguc2luKGEpLGgucHVzaChsLngsbC55LGwueiksay5wdXNoKDAsMCwxKSxyLng9KGwueC9iKzEpLzIsci55PShsLnkvYisxKS8yLG0ucHVzaChyLngsci55KTtxKz1ufWZvcih0PTA7dDxkO3QrKylmb3IoYj10KihjKzEpLHY9MDt2PGM7disrKWE9ditiLGU9YStjKzEsZj1hK2MrMixxPWErMSxnLnB1c2goYSxlLHEpLGcucHVzaChlLGYscSk7dGhpcy5zZXRJbmRleChnKTt0aGlzLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IEIoaCwzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJub3JtYWxcIixuZXcgQihrLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcInV2XCIsbmV3IEIobSwyKSl9ZnVuY3Rpb24gWGMoYSxiLGMsZCl7TC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkxhdGhlR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3BvaW50czphLHNlZ21lbnRzOmIscGhpU3RhcnQ6YyxwaGlMZW5ndGg6ZH07XG4gICAgdGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkobmV3IGNjKGEsYixjLGQpKTt0aGlzLm1lcmdlVmVydGljZXMoKX1mdW5jdGlvbiBjYyhhLGIsYyxkKXtFLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiTGF0aGVCdWZmZXJHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cG9pbnRzOmEsc2VnbWVudHM6YixwaGlTdGFydDpjLHBoaUxlbmd0aDpkfTtiPU1hdGguZmxvb3IoYil8fDEyO2M9Y3x8MDtkPWR8fDIqTWF0aC5QSTtkPVEuY2xhbXAoZCwwLDIqTWF0aC5QSSk7dmFyIGU9W10sZj1bXSxnPVtdLGg9MS9iLGs9bmV3IHAsbT1uZXcgRCxxO2ZvcihxPTA7cTw9YjtxKyspe3ZhciBuPWMrcSpoKmQ7dmFyIGw9TWF0aC5zaW4obikscj1NYXRoLmNvcyhuKTtmb3Iobj0wO248PWEubGVuZ3RoLTE7bisrKWsueD1hW25dLngqbCxrLnk9YVtuXS55LGsuej1hW25dLngqcixmLnB1c2goay54LGsueSxrLnopLG0ueD1xL2IsbS55PW4vKGEubGVuZ3RoLTEpLGcucHVzaChtLngsbS55KX1mb3IocT0wO3E8YjtxKyspZm9yKG49XG4gICAgMDtuPGEubGVuZ3RoLTE7bisrKWM9bitxKmEubGVuZ3RoLGg9YythLmxlbmd0aCxrPWMrYS5sZW5ndGgrMSxtPWMrMSxlLnB1c2goYyxoLG0pLGUucHVzaChoLGssbSk7dGhpcy5zZXRJbmRleChlKTt0aGlzLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IEIoZiwzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJ1dlwiLG5ldyBCKGcsMikpO3RoaXMuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtpZihkPT09MipNYXRoLlBJKWZvcihkPXRoaXMuYXR0cmlidXRlcy5ub3JtYWwuYXJyYXksZT1uZXcgcCxmPW5ldyBwLGc9bmV3IHAsYz1iKmEubGVuZ3RoKjMsbj1xPTA7cTxhLmxlbmd0aDtxKyssbis9MyllLng9ZFtuKzBdLGUueT1kW24rMV0sZS56PWRbbisyXSxmLng9ZFtjK24rMF0sZi55PWRbYytuKzFdLGYuej1kW2MrbisyXSxnLmFkZFZlY3RvcnMoZSxmKS5ub3JtYWxpemUoKSxkW24rMF09ZFtjK24rMF09Zy54LGRbbisxXT1kW2MrbisxXT1nLnksZFtuKzJdPWRbYytuKzJdPWcuen1mdW5jdGlvbiB4YihhLFxuICAgIGIpe0wuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJTaGFwZUdlb21ldHJ5XCI7XCJvYmplY3RcIj09PXR5cGVvZiBiJiYoY29uc29sZS53YXJuKFwiVEhSRUUuU2hhcGVHZW9tZXRyeTogT3B0aW9ucyBwYXJhbWV0ZXIgaGFzIGJlZW4gcmVtb3ZlZC5cIiksYj1iLmN1cnZlU2VnbWVudHMpO3RoaXMucGFyYW1ldGVycz17c2hhcGVzOmEsY3VydmVTZWdtZW50czpifTt0aGlzLmZyb21CdWZmZXJHZW9tZXRyeShuZXcgeWIoYSxiKSk7dGhpcy5tZXJnZVZlcnRpY2VzKCl9ZnVuY3Rpb24geWIoYSxiKXtmdW5jdGlvbiBjKGEpe3ZhciBjLGg9ZS5sZW5ndGgvMzthPWEuZXh0cmFjdFBvaW50cyhiKTt2YXIgbT1hLnNoYXBlLHE9YS5ob2xlcztpZighMT09PSRhLmlzQ2xvY2tXaXNlKG0pKWZvcihtPW0ucmV2ZXJzZSgpLGE9MCxjPXEubGVuZ3RoO2E8YzthKyspe3ZhciBsPXFbYV07ITA9PT0kYS5pc0Nsb2NrV2lzZShsKSYmKHFbYV09bC5yZXZlcnNlKCkpfXZhciBwPSRhLnRyaWFuZ3VsYXRlU2hhcGUobSxcbiAgICBxKTthPTA7Zm9yKGM9cS5sZW5ndGg7YTxjO2ErKylsPXFbYV0sbT1tLmNvbmNhdChsKTthPTA7Zm9yKGM9bS5sZW5ndGg7YTxjO2ErKylsPW1bYV0sZS5wdXNoKGwueCxsLnksMCksZi5wdXNoKDAsMCwxKSxnLnB1c2gobC54LGwueSk7YT0wO2ZvcihjPXAubGVuZ3RoO2E8YzthKyspbT1wW2FdLGQucHVzaChtWzBdK2gsbVsxXStoLG1bMl0raCksays9M31FLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiU2hhcGVCdWZmZXJHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17c2hhcGVzOmEsY3VydmVTZWdtZW50czpifTtiPWJ8fDEyO3ZhciBkPVtdLGU9W10sZj1bXSxnPVtdLGg9MCxrPTA7aWYoITE9PT1BcnJheS5pc0FycmF5KGEpKWMoYSk7ZWxzZSBmb3IodmFyIG09MDttPGEubGVuZ3RoO20rKyljKGFbbV0pLHRoaXMuYWRkR3JvdXAoaCxrLG0pLGgrPWssaz0wO3RoaXMuc2V0SW5kZXgoZCk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKGUsMykpO3RoaXMuYWRkQXR0cmlidXRlKFwibm9ybWFsXCIsXG4gICAgbmV3IEIoZiwzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJ1dlwiLG5ldyBCKGcsMikpfWZ1bmN0aW9uIGZmKGEsYil7Yi5zaGFwZXM9W107aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGM9MCxkPWEubGVuZ3RoO2M8ZDtjKyspYi5zaGFwZXMucHVzaChhW2NdLnV1aWQpO2Vsc2UgYi5zaGFwZXMucHVzaChhLnV1aWQpO3JldHVybiBifWZ1bmN0aW9uIGRjKGEsYil7RS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkVkZ2VzR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3RocmVzaG9sZEFuZ2xlOmJ9O3ZhciBjPVtdO2I9TWF0aC5jb3MoUS5ERUcyUkFEKih2b2lkIDAhPT1iP2I6MSkpO3ZhciBkPVswLDBdLGU9e30sZj1bXCJhXCIsXCJiXCIsXCJjXCJdO2lmKGEuaXNCdWZmZXJHZW9tZXRyeSl7dmFyIGc9bmV3IEw7Zy5mcm9tQnVmZmVyR2VvbWV0cnkoYSl9ZWxzZSBnPWEuY2xvbmUoKTtnLm1lcmdlVmVydGljZXMoKTtnLmNvbXB1dGVGYWNlTm9ybWFscygpO2E9Zy52ZXJ0aWNlcztnPWcuZmFjZXM7Zm9yKHZhciBoPVxuICAgIDAsaz1nLmxlbmd0aDtoPGs7aCsrKWZvcih2YXIgbT1nW2hdLHE9MDszPnE7cSsrKXt2YXIgbj1tW2ZbcV1dO3ZhciBsPW1bZlsocSsxKSUzXV07ZFswXT1NYXRoLm1pbihuLGwpO2RbMV09TWF0aC5tYXgobixsKTtuPWRbMF0rXCIsXCIrZFsxXTt2b2lkIDA9PT1lW25dP2Vbbl09e2luZGV4MTpkWzBdLGluZGV4MjpkWzFdLGZhY2UxOmgsZmFjZTI6dm9pZCAwfTplW25dLmZhY2UyPWh9Zm9yKG4gaW4gZSlpZihkPWVbbl0sdm9pZCAwPT09ZC5mYWNlMnx8Z1tkLmZhY2UxXS5ub3JtYWwuZG90KGdbZC5mYWNlMl0ubm9ybWFsKTw9YilmPWFbZC5pbmRleDFdLGMucHVzaChmLngsZi55LGYueiksZj1hW2QuaW5kZXgyXSxjLnB1c2goZi54LGYueSxmLnopO3RoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihjLDMpKX1mdW5jdGlvbiB6YihhLGIsYyxkLGUsZixnLGgpe0wuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJDeWxpbmRlckdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXNUb3A6YSxcbiAgICByYWRpdXNCb3R0b206YixoZWlnaHQ6YyxyYWRpYWxTZWdtZW50czpkLGhlaWdodFNlZ21lbnRzOmUsb3BlbkVuZGVkOmYsdGhldGFTdGFydDpnLHRoZXRhTGVuZ3RoOmh9O3RoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyBhYihhLGIsYyxkLGUsZixnLGgpKTt0aGlzLm1lcmdlVmVydGljZXMoKX1mdW5jdGlvbiBhYihhLGIsYyxkLGUsZixnLGgpe2Z1bmN0aW9uIGsoYyl7dmFyIGUsZj1uZXcgRCxrPW5ldyBwLHU9MCx2PSEwPT09Yz9hOmIseT0hMD09PWM/MTotMTt2YXIgeD10O2ZvcihlPTE7ZTw9ZDtlKyspbi5wdXNoKDAsdyp5LDApLGwucHVzaCgwLHksMCksci5wdXNoKC41LC41KSx0Kys7dmFyIEI9dDtmb3IoZT0wO2U8PWQ7ZSsrKXt2YXIgQz1lL2QqaCtnLEU9TWF0aC5jb3MoQyksQz1NYXRoLnNpbihDKTtrLng9dipDO2sueT13Knk7ay56PXYqRTtuLnB1c2goay54LGsueSxrLnopO2wucHVzaCgwLHksMCk7Zi54PS41KkUrLjU7Zi55PS41KkMqeSsuNTtyLnB1c2goZi54LGYueSk7XG4gICAgdCsrfWZvcihlPTA7ZTxkO2UrKylmPXgrZSxrPUIrZSwhMD09PWM/cS5wdXNoKGssaysxLGYpOnEucHVzaChrKzEsayxmKSx1Kz0zO20uYWRkR3JvdXAoeix1LCEwPT09Yz8xOjIpO3orPXV9RS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkN5bGluZGVyQnVmZmVyR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9e3JhZGl1c1RvcDphLHJhZGl1c0JvdHRvbTpiLGhlaWdodDpjLHJhZGlhbFNlZ21lbnRzOmQsaGVpZ2h0U2VnbWVudHM6ZSxvcGVuRW5kZWQ6Zix0aGV0YVN0YXJ0OmcsdGhldGFMZW5ndGg6aH07dmFyIG09dGhpczthPXZvaWQgMCE9PWE/YToxO2I9dm9pZCAwIT09Yj9iOjE7Yz1jfHwxO2Q9TWF0aC5mbG9vcihkKXx8ODtlPU1hdGguZmxvb3IoZSl8fDE7Zj12b2lkIDAhPT1mP2Y6ITE7Zz12b2lkIDAhPT1nP2c6MDtoPXZvaWQgMCE9PWg/aDoyKk1hdGguUEk7dmFyIHE9W10sbj1bXSxsPVtdLHI9W10sdD0wLHY9W10sdz1jLzIsej0wOyhmdW5jdGlvbigpe3ZhciBmLGssdT1uZXcgcCxcbiAgICBKPW5ldyBwLHg9MCxCPShiLWEpL2M7Zm9yKGs9MDtrPD1lO2srKyl7dmFyIEQ9W10sQz1rL2UsRT1DKihiLWEpK2E7Zm9yKGY9MDtmPD1kO2YrKyl7dmFyIEg9Zi9kLEs9SCpoK2csUz1NYXRoLnNpbihLKSxLPU1hdGguY29zKEspO0oueD1FKlM7Si55PS1DKmMrdztKLno9RSpLO24ucHVzaChKLngsSi55LEoueik7dS5zZXQoUyxCLEspLm5vcm1hbGl6ZSgpO2wucHVzaCh1LngsdS55LHUueik7ci5wdXNoKEgsMS1DKTtELnB1c2godCsrKX12LnB1c2goRCl9Zm9yKGY9MDtmPGQ7ZisrKWZvcihrPTA7azxlO2srKyl1PXZbaysxXVtmXSxKPXZbaysxXVtmKzFdLEI9dltrXVtmKzFdLHEucHVzaCh2W2tdW2ZdLHUsQikscS5wdXNoKHUsSixCKSx4Kz02O20uYWRkR3JvdXAoeix4LDApO3orPXh9KSgpOyExPT09ZiYmKDA8YSYmayghMCksMDxiJiZrKCExKSk7dGhpcy5zZXRJbmRleChxKTt0aGlzLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IEIobiwzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJub3JtYWxcIixcbiAgICBuZXcgQihsLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcInV2XCIsbmV3IEIociwyKSl9ZnVuY3Rpb24gWWMoYSxiLGMsZCxlLGYsZyl7emIuY2FsbCh0aGlzLDAsYSxiLGMsZCxlLGYsZyk7dGhpcy50eXBlPVwiQ29uZUdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXM6YSxoZWlnaHQ6YixyYWRpYWxTZWdtZW50czpjLGhlaWdodFNlZ21lbnRzOmQsb3BlbkVuZGVkOmUsdGhldGFTdGFydDpmLHRoZXRhTGVuZ3RoOmd9fWZ1bmN0aW9uIFpjKGEsYixjLGQsZSxmLGcpe2FiLmNhbGwodGhpcywwLGEsYixjLGQsZSxmLGcpO3RoaXMudHlwZT1cIkNvbmVCdWZmZXJHZW9tZXRyeVwiO3RoaXMucGFyYW1ldGVycz17cmFkaXVzOmEsaGVpZ2h0OmIscmFkaWFsU2VnbWVudHM6YyxoZWlnaHRTZWdtZW50czpkLG9wZW5FbmRlZDplLHRoZXRhU3RhcnQ6Zix0aGV0YUxlbmd0aDpnfX1mdW5jdGlvbiAkYyhhLGIsYyxkKXtMLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiQ2lyY2xlR2VvbWV0cnlcIjt0aGlzLnBhcmFtZXRlcnM9XG4gICAge3JhZGl1czphLHNlZ21lbnRzOmIsdGhldGFTdGFydDpjLHRoZXRhTGVuZ3RoOmR9O3RoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KG5ldyBlYyhhLGIsYyxkKSk7dGhpcy5tZXJnZVZlcnRpY2VzKCl9ZnVuY3Rpb24gZWMoYSxiLGMsZCl7RS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkNpcmNsZUJ1ZmZlckdlb21ldHJ5XCI7dGhpcy5wYXJhbWV0ZXJzPXtyYWRpdXM6YSxzZWdtZW50czpiLHRoZXRhU3RhcnQ6Yyx0aGV0YUxlbmd0aDpkfTthPWF8fDE7Yj12b2lkIDAhPT1iP01hdGgubWF4KDMsYik6ODtjPXZvaWQgMCE9PWM/YzowO2Q9dm9pZCAwIT09ZD9kOjIqTWF0aC5QSTt2YXIgZT1bXSxmPVtdLGc9W10saD1bXSxrLG09bmV3IHAscT1uZXcgRDtmLnB1c2goMCwwLDApO2cucHVzaCgwLDAsMSk7aC5wdXNoKC41LC41KTt2YXIgbj0wO2ZvcihrPTM7bjw9YjtuKyssays9Myl7dmFyIGw9YytuL2IqZDttLng9YSpNYXRoLmNvcyhsKTttLnk9YSpNYXRoLnNpbihsKTtmLnB1c2gobS54LG0ueSxcbiAgICBtLnopO2cucHVzaCgwLDAsMSk7cS54PShmW2tdL2ErMSkvMjtxLnk9KGZbaysxXS9hKzEpLzI7aC5wdXNoKHEueCxxLnkpfWZvcihrPTE7azw9YjtrKyspZS5wdXNoKGssaysxLDApO3RoaXMuc2V0SW5kZXgoZSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKGYsMykpO3RoaXMuYWRkQXR0cmlidXRlKFwibm9ybWFsXCIsbmV3IEIoZywzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJ1dlwiLG5ldyBCKGgsMikpfWZ1bmN0aW9uIGZjKGEpe1AuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJTaGFkb3dNYXRlcmlhbFwiO3RoaXMuY29sb3I9bmV3IEgoMCk7dGhpcy5vcGFjaXR5PTE7dGhpcy50cmFuc3BhcmVudD10aGlzLmxpZ2h0cz0hMDt0aGlzLnNldFZhbHVlcyhhKX1mdW5jdGlvbiBnYyhhKXtGYS5jYWxsKHRoaXMsYSk7dGhpcy50eXBlPVwiUmF3U2hhZGVyTWF0ZXJpYWxcIn1mdW5jdGlvbiBVYShhKXtQLmNhbGwodGhpcyk7dGhpcy5kZWZpbmVzPXtTVEFOREFSRDpcIlwifTt0aGlzLnR5cGU9XG4gICAgXCJNZXNoU3RhbmRhcmRNYXRlcmlhbFwiO3RoaXMuY29sb3I9bmV3IEgoMTY3NzcyMTUpO3RoaXMubWV0YWxuZXNzPXRoaXMucm91Z2huZXNzPS41O3RoaXMubGlnaHRNYXA9dGhpcy5tYXA9bnVsbDt0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5PTE7dGhpcy5hb01hcD1udWxsO3RoaXMuYW9NYXBJbnRlbnNpdHk9MTt0aGlzLmVtaXNzaXZlPW5ldyBIKDApO3RoaXMuZW1pc3NpdmVJbnRlbnNpdHk9MTt0aGlzLmJ1bXBNYXA9dGhpcy5lbWlzc2l2ZU1hcD1udWxsO3RoaXMuYnVtcFNjYWxlPTE7dGhpcy5ub3JtYWxNYXA9bnVsbDt0aGlzLm5vcm1hbFNjYWxlPW5ldyBEKDEsMSk7dGhpcy5kaXNwbGFjZW1lbnRNYXA9bnVsbDt0aGlzLmRpc3BsYWNlbWVudFNjYWxlPTE7dGhpcy5kaXNwbGFjZW1lbnRCaWFzPTA7dGhpcy5lbnZNYXA9dGhpcy5hbHBoYU1hcD10aGlzLm1ldGFsbmVzc01hcD10aGlzLnJvdWdobmVzc01hcD1udWxsO3RoaXMuZW52TWFwSW50ZW5zaXR5PTE7dGhpcy5yZWZyYWN0aW9uUmF0aW89XG4gICAgLjk4O3RoaXMud2lyZWZyYW1lPSExO3RoaXMud2lyZWZyYW1lTGluZXdpZHRoPTE7dGhpcy53aXJlZnJhbWVMaW5lam9pbj10aGlzLndpcmVmcmFtZUxpbmVjYXA9XCJyb3VuZFwiO3RoaXMubW9ycGhOb3JtYWxzPXRoaXMubW9ycGhUYXJnZXRzPXRoaXMuc2tpbm5pbmc9ITE7dGhpcy5zZXRWYWx1ZXMoYSl9ZnVuY3Rpb24gQWIoYSl7VWEuY2FsbCh0aGlzKTt0aGlzLmRlZmluZXM9e1BIWVNJQ0FMOlwiXCJ9O3RoaXMudHlwZT1cIk1lc2hQaHlzaWNhbE1hdGVyaWFsXCI7dGhpcy5yZWZsZWN0aXZpdHk9LjU7dGhpcy5jbGVhckNvYXRSb3VnaG5lc3M9dGhpcy5jbGVhckNvYXQ9MDt0aGlzLnNldFZhbHVlcyhhKX1mdW5jdGlvbiBNYShhKXtQLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiTWVzaFBob25nTWF0ZXJpYWxcIjt0aGlzLmNvbG9yPW5ldyBIKDE2Nzc3MjE1KTt0aGlzLnNwZWN1bGFyPW5ldyBIKDExMTg0ODEpO3RoaXMuc2hpbmluZXNzPTMwO3RoaXMubGlnaHRNYXA9dGhpcy5tYXA9bnVsbDtcbiAgICB0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5PTE7dGhpcy5hb01hcD1udWxsO3RoaXMuYW9NYXBJbnRlbnNpdHk9MTt0aGlzLmVtaXNzaXZlPW5ldyBIKDApO3RoaXMuZW1pc3NpdmVJbnRlbnNpdHk9MTt0aGlzLmJ1bXBNYXA9dGhpcy5lbWlzc2l2ZU1hcD1udWxsO3RoaXMuYnVtcFNjYWxlPTE7dGhpcy5ub3JtYWxNYXA9bnVsbDt0aGlzLm5vcm1hbFNjYWxlPW5ldyBEKDEsMSk7dGhpcy5kaXNwbGFjZW1lbnRNYXA9bnVsbDt0aGlzLmRpc3BsYWNlbWVudFNjYWxlPTE7dGhpcy5kaXNwbGFjZW1lbnRCaWFzPTA7dGhpcy5lbnZNYXA9dGhpcy5hbHBoYU1hcD10aGlzLnNwZWN1bGFyTWFwPW51bGw7dGhpcy5jb21iaW5lPTA7dGhpcy5yZWZsZWN0aXZpdHk9MTt0aGlzLnJlZnJhY3Rpb25SYXRpbz0uOTg7dGhpcy53aXJlZnJhbWU9ITE7dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg9MTt0aGlzLndpcmVmcmFtZUxpbmVqb2luPXRoaXMud2lyZWZyYW1lTGluZWNhcD1cInJvdW5kXCI7dGhpcy5tb3JwaE5vcm1hbHM9XG4gICAgdGhpcy5tb3JwaFRhcmdldHM9dGhpcy5za2lubmluZz0hMTt0aGlzLnNldFZhbHVlcyhhKX1mdW5jdGlvbiBCYihhKXtNYS5jYWxsKHRoaXMpO3RoaXMuZGVmaW5lcz17VE9PTjpcIlwifTt0aGlzLnR5cGU9XCJNZXNoVG9vbk1hdGVyaWFsXCI7dGhpcy5ncmFkaWVudE1hcD1udWxsO3RoaXMuc2V0VmFsdWVzKGEpfWZ1bmN0aW9uIENiKGEpe1AuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJNZXNoTm9ybWFsTWF0ZXJpYWxcIjt0aGlzLmJ1bXBNYXA9bnVsbDt0aGlzLmJ1bXBTY2FsZT0xO3RoaXMubm9ybWFsTWFwPW51bGw7dGhpcy5ub3JtYWxTY2FsZT1uZXcgRCgxLDEpO3RoaXMuZGlzcGxhY2VtZW50TWFwPW51bGw7dGhpcy5kaXNwbGFjZW1lbnRTY2FsZT0xO3RoaXMuZGlzcGxhY2VtZW50Qmlhcz0wO3RoaXMud2lyZWZyYW1lPSExO3RoaXMud2lyZWZyYW1lTGluZXdpZHRoPTE7dGhpcy5tb3JwaE5vcm1hbHM9dGhpcy5tb3JwaFRhcmdldHM9dGhpcy5za2lubmluZz10aGlzLmxpZ2h0cz10aGlzLmZvZz1cbiAgICAhMTt0aGlzLnNldFZhbHVlcyhhKX1mdW5jdGlvbiBEYihhKXtQLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiTWVzaExhbWJlcnRNYXRlcmlhbFwiO3RoaXMuY29sb3I9bmV3IEgoMTY3NzcyMTUpO3RoaXMubGlnaHRNYXA9dGhpcy5tYXA9bnVsbDt0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5PTE7dGhpcy5hb01hcD1udWxsO3RoaXMuYW9NYXBJbnRlbnNpdHk9MTt0aGlzLmVtaXNzaXZlPW5ldyBIKDApO3RoaXMuZW1pc3NpdmVJbnRlbnNpdHk9MTt0aGlzLmVudk1hcD10aGlzLmFscGhhTWFwPXRoaXMuc3BlY3VsYXJNYXA9dGhpcy5lbWlzc2l2ZU1hcD1udWxsO3RoaXMuY29tYmluZT0wO3RoaXMucmVmbGVjdGl2aXR5PTE7dGhpcy5yZWZyYWN0aW9uUmF0aW89Ljk4O3RoaXMud2lyZWZyYW1lPSExO3RoaXMud2lyZWZyYW1lTGluZXdpZHRoPTE7dGhpcy53aXJlZnJhbWVMaW5lam9pbj10aGlzLndpcmVmcmFtZUxpbmVjYXA9XCJyb3VuZFwiO3RoaXMubW9ycGhOb3JtYWxzPXRoaXMubW9ycGhUYXJnZXRzPVxuICAgIHRoaXMuc2tpbm5pbmc9ITE7dGhpcy5zZXRWYWx1ZXMoYSl9ZnVuY3Rpb24gRWIoYSl7Vy5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkxpbmVEYXNoZWRNYXRlcmlhbFwiO3RoaXMuc2NhbGU9MTt0aGlzLmRhc2hTaXplPTM7dGhpcy5nYXBTaXplPTE7dGhpcy5zZXRWYWx1ZXMoYSl9ZnVuY3Rpb24gaGUoYSxiLGMpe3ZhciBkPXRoaXMsZT0hMSxmPTAsZz0wLGg9dm9pZCAwO3RoaXMub25TdGFydD12b2lkIDA7dGhpcy5vbkxvYWQ9YTt0aGlzLm9uUHJvZ3Jlc3M9Yjt0aGlzLm9uRXJyb3I9Yzt0aGlzLml0ZW1TdGFydD1mdW5jdGlvbihhKXtnKys7aWYoITE9PT1lJiZ2b2lkIDAhPT1kLm9uU3RhcnQpZC5vblN0YXJ0KGEsZixnKTtlPSEwfTt0aGlzLml0ZW1FbmQ9ZnVuY3Rpb24oYSl7ZisrO2lmKHZvaWQgMCE9PWQub25Qcm9ncmVzcylkLm9uUHJvZ3Jlc3MoYSxmLGcpO2lmKGY9PT1nJiYoZT0hMSx2b2lkIDAhPT1kLm9uTG9hZCkpZC5vbkxvYWQoKX07dGhpcy5pdGVtRXJyb3I9ZnVuY3Rpb24oYSl7aWYodm9pZCAwIT09XG4gICAgZC5vbkVycm9yKWQub25FcnJvcihhKX07dGhpcy5yZXNvbHZlVVJMPWZ1bmN0aW9uKGEpe3JldHVybiBoP2goYSk6YX07dGhpcy5zZXRVUkxNb2RpZmllcj1mdW5jdGlvbihhKXtoPWE7cmV0dXJuIHRoaXN9fWZ1bmN0aW9uIE5hKGEpe3RoaXMubWFuYWdlcj12b2lkIDAhPT1hP2E6eGF9ZnVuY3Rpb24gZ2YoYSl7dGhpcy5tYW5hZ2VyPXZvaWQgMCE9PWE/YTp4YTt0aGlzLl9wYXJzZXI9bnVsbH1mdW5jdGlvbiBpZShhKXt0aGlzLm1hbmFnZXI9dm9pZCAwIT09YT9hOnhhO3RoaXMuX3BhcnNlcj1udWxsfWZ1bmN0aW9uIGFkKGEpe3RoaXMubWFuYWdlcj12b2lkIDAhPT1hP2E6eGF9ZnVuY3Rpb24gamUoYSl7dGhpcy5tYW5hZ2VyPXZvaWQgMCE9PWE/YTp4YX1mdW5jdGlvbiBBZChhKXt0aGlzLm1hbmFnZXI9dm9pZCAwIT09YT9hOnhhfWZ1bmN0aW9uIEMoKXt0aGlzLnR5cGU9XCJDdXJ2ZVwiO3RoaXMuYXJjTGVuZ3RoRGl2aXNpb25zPTIwMH1mdW5jdGlvbiBCYShhLGIsYyxkLGUsZixcbiAgICBnLGgpe0MuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJFbGxpcHNlQ3VydmVcIjt0aGlzLmFYPWF8fDA7dGhpcy5hWT1ifHwwO3RoaXMueFJhZGl1cz1jfHwxO3RoaXMueVJhZGl1cz1kfHwxO3RoaXMuYVN0YXJ0QW5nbGU9ZXx8MDt0aGlzLmFFbmRBbmdsZT1mfHwyKk1hdGguUEk7dGhpcy5hQ2xvY2t3aXNlPWd8fCExO3RoaXMuYVJvdGF0aW9uPWh8fDB9ZnVuY3Rpb24gaGMoYSxiLGMsZCxlLGYpe0JhLmNhbGwodGhpcyxhLGIsYyxjLGQsZSxmKTt0aGlzLnR5cGU9XCJBcmNDdXJ2ZVwifWZ1bmN0aW9uIGtlKCl7dmFyIGE9MCxiPTAsYz0wLGQ9MDtyZXR1cm57aW5pdENhdG11bGxSb206ZnVuY3Rpb24oZSxmLGcsaCxrKXtlPWsqKGctZSk7aD1rKihoLWYpO2E9ZjtiPWU7Yz0tMypmKzMqZy0yKmUtaDtkPTIqZi0yKmcrZStofSxpbml0Tm9udW5pZm9ybUNhdG11bGxSb206ZnVuY3Rpb24oZSxmLGcsaCxrLG0scSl7ZT0oKGYtZSkvay0oZy1lKS8oayttKSsoZy1mKS9tKSptO2g9KChnLWYpL20tXG4gICAgKGgtZikvKG0rcSkrKGgtZykvcSkqbTthPWY7Yj1lO2M9LTMqZiszKmctMiplLWg7ZD0yKmYtMipnK2UraH0sY2FsYzpmdW5jdGlvbihlKXt2YXIgZj1lKmU7cmV0dXJuIGErYiplK2MqZitkKmYqZX19fWZ1bmN0aW9uIGNhKGEsYixjLGQpe0MuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJDYXRtdWxsUm9tQ3VydmUzXCI7dGhpcy5wb2ludHM9YXx8W107dGhpcy5jbG9zZWQ9Ynx8ITE7dGhpcy5jdXJ2ZVR5cGU9Y3x8XCJjZW50cmlwZXRhbFwiO3RoaXMudGVuc2lvbj1kfHwuNX1mdW5jdGlvbiBoZihhLGIsYyxkLGUpe2I9LjUqKGQtYik7ZT0uNSooZS1jKTt2YXIgZj1hKmE7cmV0dXJuKDIqYy0yKmQrYitlKSphKmYrKC0zKmMrMypkLTIqYi1lKSpmK2IqYStjfWZ1bmN0aW9uIGJkKGEsYixjLGQpe3ZhciBlPTEtYTtyZXR1cm4gZSplKmIrMiooMS1hKSphKmMrYSphKmR9ZnVuY3Rpb24gY2QoYSxiLGMsZCxlKXt2YXIgZj0xLWEsZz0xLWE7cmV0dXJuIGYqZipmKmIrMypnKmcqYSpjKzMqKDEtYSkqXG4gICAgYSphKmQrYSphKmEqZX1mdW5jdGlvbiBPYShhLGIsYyxkKXtDLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiQ3ViaWNCZXppZXJDdXJ2ZVwiO3RoaXMudjA9YXx8bmV3IEQ7dGhpcy52MT1ifHxuZXcgRDt0aGlzLnYyPWN8fG5ldyBEO3RoaXMudjM9ZHx8bmV3IER9ZnVuY3Rpb24gVmEoYSxiLGMsZCl7Qy5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkN1YmljQmV6aWVyQ3VydmUzXCI7dGhpcy52MD1hfHxuZXcgcDt0aGlzLnYxPWJ8fG5ldyBwO3RoaXMudjI9Y3x8bmV3IHA7dGhpcy52Mz1kfHxuZXcgcH1mdW5jdGlvbiB5YShhLGIpe0MuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJMaW5lQ3VydmVcIjt0aGlzLnYxPWF8fG5ldyBEO3RoaXMudjI9Ynx8bmV3IER9ZnVuY3Rpb24gUGEoYSxiKXtDLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiTGluZUN1cnZlM1wiO3RoaXMudjE9YXx8bmV3IHA7dGhpcy52Mj1ifHxuZXcgcH1mdW5jdGlvbiBRYShhLGIsYyl7Qy5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlF1YWRyYXRpY0JlemllckN1cnZlXCI7XG4gICAgdGhpcy52MD1hfHxuZXcgRDt0aGlzLnYxPWJ8fG5ldyBEO3RoaXMudjI9Y3x8bmV3IER9ZnVuY3Rpb24gV2EoYSxiLGMpe0MuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJRdWFkcmF0aWNCZXppZXJDdXJ2ZTNcIjt0aGlzLnYwPWF8fG5ldyBwO3RoaXMudjE9Ynx8bmV3IHA7dGhpcy52Mj1jfHxuZXcgcH1mdW5jdGlvbiBSYShhKXtDLmNhbGwodGhpcyk7dGhpcy50eXBlPVwiU3BsaW5lQ3VydmVcIjt0aGlzLnBvaW50cz1hfHxbXX1mdW5jdGlvbiBiYigpe0MuY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJDdXJ2ZVBhdGhcIjt0aGlzLmN1cnZlcz1bXTt0aGlzLmF1dG9DbG9zZT0hMX1mdW5jdGlvbiBTYShhKXtiYi5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIlBhdGhcIjt0aGlzLmN1cnJlbnRQb2ludD1uZXcgRDthJiZ0aGlzLnNldEZyb21Qb2ludHMoYSl9ZnVuY3Rpb24gamIoYSl7U2EuY2FsbCh0aGlzLGEpO3RoaXMudXVpZD1RLmdlbmVyYXRlVVVJRCgpO3RoaXMudHlwZT1cIlNoYXBlXCI7dGhpcy5ob2xlcz1cbiAgICBbXX1mdW5jdGlvbiBkYShhLGIpe3guY2FsbCh0aGlzKTt0aGlzLnR5cGU9XCJMaWdodFwiO3RoaXMuY29sb3I9bmV3IEgoYSk7dGhpcy5pbnRlbnNpdHk9dm9pZCAwIT09Yj9iOjE7dGhpcy5yZWNlaXZlU2hhZG93PXZvaWQgMH1mdW5jdGlvbiBCZChhLGIsYyl7ZGEuY2FsbCh0aGlzLGEsYyk7dGhpcy50eXBlPVwiSGVtaXNwaGVyZUxpZ2h0XCI7dGhpcy5jYXN0U2hhZG93PXZvaWQgMDt0aGlzLnBvc2l0aW9uLmNvcHkoeC5EZWZhdWx0VXApO3RoaXMudXBkYXRlTWF0cml4KCk7dGhpcy5ncm91bmRDb2xvcj1uZXcgSChiKX1mdW5jdGlvbiBGYihhKXt0aGlzLmNhbWVyYT1hO3RoaXMuYmlhcz0wO3RoaXMucmFkaXVzPTE7dGhpcy5tYXBTaXplPW5ldyBEKDUxMiw1MTIpO3RoaXMubWFwPW51bGw7dGhpcy5tYXRyaXg9bmV3IE99ZnVuY3Rpb24gQ2QoKXtGYi5jYWxsKHRoaXMsbmV3IGJhKDUwLDEsLjUsNTAwKSl9ZnVuY3Rpb24gRGQoYSxiLGMsZCxlLGYpe2RhLmNhbGwodGhpcyxhLGIpO3RoaXMudHlwZT1cbiAgICBcIlNwb3RMaWdodFwiO3RoaXMucG9zaXRpb24uY29weSh4LkRlZmF1bHRVcCk7dGhpcy51cGRhdGVNYXRyaXgoKTt0aGlzLnRhcmdldD1uZXcgeDtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInBvd2VyXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmludGVuc2l0eSpNYXRoLlBJfSxzZXQ6ZnVuY3Rpb24oYSl7dGhpcy5pbnRlbnNpdHk9YS9NYXRoLlBJfX0pO3RoaXMuZGlzdGFuY2U9dm9pZCAwIT09Yz9jOjA7dGhpcy5hbmdsZT12b2lkIDAhPT1kP2Q6TWF0aC5QSS8zO3RoaXMucGVudW1icmE9dm9pZCAwIT09ZT9lOjA7dGhpcy5kZWNheT12b2lkIDAhPT1mP2Y6MTt0aGlzLnNoYWRvdz1uZXcgQ2R9ZnVuY3Rpb24gRWQoYSxiLGMsZCl7ZGEuY2FsbCh0aGlzLGEsYik7dGhpcy50eXBlPVwiUG9pbnRMaWdodFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicG93ZXJcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDQqdGhpcy5pbnRlbnNpdHkqTWF0aC5QSX0sc2V0OmZ1bmN0aW9uKGEpe3RoaXMuaW50ZW5zaXR5PVxuICAgIGEvKDQqTWF0aC5QSSl9fSk7dGhpcy5kaXN0YW5jZT12b2lkIDAhPT1jP2M6MDt0aGlzLmRlY2F5PXZvaWQgMCE9PWQ/ZDoxO3RoaXMuc2hhZG93PW5ldyBGYihuZXcgYmEoOTAsMSwuNSw1MDApKX1mdW5jdGlvbiBGZCgpe0ZiLmNhbGwodGhpcyxuZXcgTGIoLTUsNSw1LC01LC41LDUwMCkpfWZ1bmN0aW9uIEdkKGEsYil7ZGEuY2FsbCh0aGlzLGEsYik7dGhpcy50eXBlPVwiRGlyZWN0aW9uYWxMaWdodFwiO3RoaXMucG9zaXRpb24uY29weSh4LkRlZmF1bHRVcCk7dGhpcy51cGRhdGVNYXRyaXgoKTt0aGlzLnRhcmdldD1uZXcgeDt0aGlzLnNoYWRvdz1uZXcgRmR9ZnVuY3Rpb24gSGQoYSxiKXtkYS5jYWxsKHRoaXMsYSxiKTt0aGlzLnR5cGU9XCJBbWJpZW50TGlnaHRcIjt0aGlzLmNhc3RTaGFkb3c9dm9pZCAwfWZ1bmN0aW9uIElkKGEsYixjLGQpe2RhLmNhbGwodGhpcyxhLGIpO3RoaXMudHlwZT1cIlJlY3RBcmVhTGlnaHRcIjt0aGlzLnBvc2l0aW9uLnNldCgwLDEsMCk7dGhpcy51cGRhdGVNYXRyaXgoKTtcbiAgICB0aGlzLndpZHRoPXZvaWQgMCE9PWM/YzoxMDt0aGlzLmhlaWdodD12b2lkIDAhPT1kP2Q6MTB9ZnVuY3Rpb24gSmQoYSxiLGMsZCl7VC5jYWxsKHRoaXMsYSxiLGMsZCl9ZnVuY3Rpb24gS2QoYSxiLGMpe1QuY2FsbCh0aGlzLGEsYixjKX1mdW5jdGlvbiBwYShhLGIsYyxkKXt0aGlzLnBhcmFtZXRlclBvc2l0aW9ucz1hO3RoaXMuX2NhY2hlZEluZGV4PTA7dGhpcy5yZXN1bHRCdWZmZXI9dm9pZCAwIT09ZD9kOm5ldyBiLmNvbnN0cnVjdG9yKGMpO3RoaXMuc2FtcGxlVmFsdWVzPWI7dGhpcy52YWx1ZVNpemU9Y31mdW5jdGlvbiBMZChhLGIsYyxkKXtwYS5jYWxsKHRoaXMsYSxiLGMsZCl9ZnVuY3Rpb24gZGQoYSxiLGMsZCl7VC5jYWxsKHRoaXMsYSxiLGMsZCl9ZnVuY3Rpb24gTWQoYSxiLGMsZCl7VC5jYWxsKHRoaXMsYSxiLGMsZCl9ZnVuY3Rpb24gaWMoYSxiLGMsZCl7VC5jYWxsKHRoaXMsYSxiLGMsZCl9ZnVuY3Rpb24gTmQoYSxiLGMsZCl7cGEuY2FsbCh0aGlzLGEsYixjLGQpO1xuICAgIHRoaXMuX29mZnNldE5leHQ9dGhpcy5fd2VpZ2h0TmV4dD10aGlzLl9vZmZzZXRQcmV2PXRoaXMuX3dlaWdodFByZXY9LTB9ZnVuY3Rpb24gZWQoYSxiLGMsZCl7cGEuY2FsbCh0aGlzLGEsYixjLGQpfWZ1bmN0aW9uIE9kKGEsYixjLGQpe3BhLmNhbGwodGhpcyxhLGIsYyxkKX1mdW5jdGlvbiBUKGEsYixjLGQpe2lmKHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoXCJUSFJFRS5LZXlmcmFtZVRyYWNrOiB0cmFjayBuYW1lIGlzIHVuZGVmaW5lZFwiKTtpZih2b2lkIDA9PT1ifHwwPT09Yi5sZW5ndGgpdGhyb3cgRXJyb3IoXCJUSFJFRS5LZXlmcmFtZVRyYWNrOiBubyBrZXlmcmFtZXMgaW4gdHJhY2sgbmFtZWQgXCIrYSk7dGhpcy5uYW1lPWE7dGhpcy50aW1lcz1nYS5jb252ZXJ0QXJyYXkoYix0aGlzLlRpbWVCdWZmZXJUeXBlKTt0aGlzLnZhbHVlcz1nYS5jb252ZXJ0QXJyYXkoYyx0aGlzLlZhbHVlQnVmZmVyVHlwZSk7dGhpcy5zZXRJbnRlcnBvbGF0aW9uKGR8fHRoaXMuRGVmYXVsdEludGVycG9sYXRpb24pO1xuICAgIHRoaXMudmFsaWRhdGUoKTt0aGlzLm9wdGltaXplKCl9ZnVuY3Rpb24gamMoYSxiLGMsZCl7VC5jYWxsKHRoaXMsYSxiLGMsZCl9ZnVuY3Rpb24gQ2EoYSxiLGMpe3RoaXMubmFtZT1hO3RoaXMudHJhY2tzPWM7dGhpcy5kdXJhdGlvbj12b2lkIDAhPT1iP2I6LTE7dGhpcy51dWlkPVEuZ2VuZXJhdGVVVUlEKCk7MD50aGlzLmR1cmF0aW9uJiZ0aGlzLnJlc2V0RHVyYXRpb24oKTt0aGlzLm9wdGltaXplKCl9ZnVuY3Rpb24gUGQoYSl7dGhpcy5tYW5hZ2VyPXZvaWQgMCE9PWE/YTp4YTt0aGlzLnRleHR1cmVzPXt9fWZ1bmN0aW9uIGxlKGEpe3RoaXMubWFuYWdlcj12b2lkIDAhPT1hP2E6eGF9ZnVuY3Rpb24ga2MoKXt0aGlzLm9uTG9hZFN0YXJ0PWZ1bmN0aW9uKCl7fTt0aGlzLm9uTG9hZFByb2dyZXNzPWZ1bmN0aW9uKCl7fTt0aGlzLm9uTG9hZENvbXBsZXRlPWZ1bmN0aW9uKCl7fX1mdW5jdGlvbiBtZShhKXtcImJvb2xlYW5cIj09PXR5cGVvZiBhJiYoY29uc29sZS53YXJuKFwiVEhSRUUuSlNPTkxvYWRlcjogc2hvd1N0YXR1cyBwYXJhbWV0ZXIgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIGNvbnN0cnVjdG9yLlwiKSxcbiAgICBhPXZvaWQgMCk7dGhpcy5tYW5hZ2VyPXZvaWQgMCE9PWE/YTp4YTt0aGlzLndpdGhDcmVkZW50aWFscz0hMX1mdW5jdGlvbiBqZihhKXt0aGlzLm1hbmFnZXI9dm9pZCAwIT09YT9hOnhhO3RoaXMudGV4dHVyZVBhdGg9XCJcIn1mdW5jdGlvbiBuZShhKXtcInVuZGVmaW5lZFwiPT09dHlwZW9mIGNyZWF0ZUltYWdlQml0bWFwJiZjb25zb2xlLndhcm4oXCJUSFJFRS5JbWFnZUJpdG1hcExvYWRlcjogY3JlYXRlSW1hZ2VCaXRtYXAoKSBub3Qgc3VwcG9ydGVkLlwiKTtcInVuZGVmaW5lZFwiPT09dHlwZW9mIGZldGNoJiZjb25zb2xlLndhcm4oXCJUSFJFRS5JbWFnZUJpdG1hcExvYWRlcjogZmV0Y2goKSBub3Qgc3VwcG9ydGVkLlwiKTt0aGlzLm1hbmFnZXI9dm9pZCAwIT09YT9hOnhhO3RoaXMub3B0aW9ucz12b2lkIDB9ZnVuY3Rpb24gb2UoKXt0aGlzLnR5cGU9XCJTaGFwZVBhdGhcIjt0aGlzLnN1YlBhdGhzPVtdO3RoaXMuY3VycmVudFBhdGg9bnVsbH1mdW5jdGlvbiBwZShhKXt0aGlzLnR5cGU9XCJGb250XCI7XG4gICAgdGhpcy5kYXRhPWF9ZnVuY3Rpb24ga2YoYSl7dGhpcy5tYW5hZ2VyPXZvaWQgMCE9PWE/YTp4YX1mdW5jdGlvbiBxZShhKXt0aGlzLm1hbmFnZXI9dm9pZCAwIT09YT9hOnhhfWZ1bmN0aW9uIGxmKCl7dGhpcy50eXBlPVwiU3RlcmVvQ2FtZXJhXCI7dGhpcy5hc3BlY3Q9MTt0aGlzLmV5ZVNlcD0uMDY0O3RoaXMuY2FtZXJhTD1uZXcgYmE7dGhpcy5jYW1lcmFMLmxheWVycy5lbmFibGUoMSk7dGhpcy5jYW1lcmFMLm1hdHJpeEF1dG9VcGRhdGU9ITE7dGhpcy5jYW1lcmFSPW5ldyBiYTt0aGlzLmNhbWVyYVIubGF5ZXJzLmVuYWJsZSgyKTt0aGlzLmNhbWVyYVIubWF0cml4QXV0b1VwZGF0ZT0hMX1mdW5jdGlvbiBmZChhLGIsYyl7eC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkN1YmVDYW1lcmFcIjt2YXIgZD1uZXcgYmEoOTAsMSxhLGIpO2QudXAuc2V0KDAsLTEsMCk7ZC5sb29rQXQobmV3IHAoMSwwLDApKTt0aGlzLmFkZChkKTt2YXIgZT1uZXcgYmEoOTAsMSxhLGIpO2UudXAuc2V0KDAsLTEsXG4gICAgMCk7ZS5sb29rQXQobmV3IHAoLTEsMCwwKSk7dGhpcy5hZGQoZSk7dmFyIGY9bmV3IGJhKDkwLDEsYSxiKTtmLnVwLnNldCgwLDAsMSk7Zi5sb29rQXQobmV3IHAoMCwxLDApKTt0aGlzLmFkZChmKTt2YXIgZz1uZXcgYmEoOTAsMSxhLGIpO2cudXAuc2V0KDAsMCwtMSk7Zy5sb29rQXQobmV3IHAoMCwtMSwwKSk7dGhpcy5hZGQoZyk7dmFyIGg9bmV3IGJhKDkwLDEsYSxiKTtoLnVwLnNldCgwLC0xLDApO2gubG9va0F0KG5ldyBwKDAsMCwxKSk7dGhpcy5hZGQoaCk7dmFyIGs9bmV3IGJhKDkwLDEsYSxiKTtrLnVwLnNldCgwLC0xLDApO2subG9va0F0KG5ldyBwKDAsMCwtMSkpO3RoaXMuYWRkKGspO3RoaXMucmVuZGVyVGFyZ2V0PW5ldyBKYihjLGMse2Zvcm1hdDoxMDIyLG1hZ0ZpbHRlcjoxMDA2LG1pbkZpbHRlcjoxMDA2fSk7dGhpcy5yZW5kZXJUYXJnZXQudGV4dHVyZS5uYW1lPVwiQ3ViZUNhbWVyYVwiO3RoaXMudXBkYXRlPWZ1bmN0aW9uKGEsYil7bnVsbD09PXRoaXMucGFyZW50JiZcbiAgICB0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCk7dmFyIGM9dGhpcy5yZW5kZXJUYXJnZXQsbT1jLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzO2MudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM9ITE7Yy5hY3RpdmVDdWJlRmFjZT0wO2EucmVuZGVyKGIsZCxjKTtjLmFjdGl2ZUN1YmVGYWNlPTE7YS5yZW5kZXIoYixlLGMpO2MuYWN0aXZlQ3ViZUZhY2U9MjthLnJlbmRlcihiLGYsYyk7Yy5hY3RpdmVDdWJlRmFjZT0zO2EucmVuZGVyKGIsZyxjKTtjLmFjdGl2ZUN1YmVGYWNlPTQ7YS5yZW5kZXIoYixoLGMpO2MudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM9bTtjLmFjdGl2ZUN1YmVGYWNlPTU7YS5yZW5kZXIoYixrLGMpO2Euc2V0UmVuZGVyVGFyZ2V0KG51bGwpfTt0aGlzLmNsZWFyPWZ1bmN0aW9uKGEsYixjLGQpe2Zvcih2YXIgZT10aGlzLnJlbmRlclRhcmdldCxmPTA7Nj5mO2YrKyllLmFjdGl2ZUN1YmVGYWNlPWYsYS5zZXRSZW5kZXJUYXJnZXQoZSksYS5jbGVhcihiLGMsZCk7YS5zZXRSZW5kZXJUYXJnZXQobnVsbCl9fVxuICAgIGZ1bmN0aW9uIHJlKCl7eC5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkF1ZGlvTGlzdGVuZXJcIjt0aGlzLmNvbnRleHQ9c2UuZ2V0Q29udGV4dCgpO3RoaXMuZ2Fpbj10aGlzLmNvbnRleHQuY3JlYXRlR2FpbigpO3RoaXMuZ2Fpbi5jb25uZWN0KHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbik7dGhpcy5maWx0ZXI9bnVsbH1mdW5jdGlvbiBsYyhhKXt4LmNhbGwodGhpcyk7dGhpcy50eXBlPVwiQXVkaW9cIjt0aGlzLmNvbnRleHQ9YS5jb250ZXh0O3RoaXMuZ2Fpbj10aGlzLmNvbnRleHQuY3JlYXRlR2FpbigpO3RoaXMuZ2Fpbi5jb25uZWN0KGEuZ2V0SW5wdXQoKSk7dGhpcy5hdXRvcGxheT0hMTt0aGlzLmJ1ZmZlcj1udWxsO3RoaXMubG9vcD0hMTt0aGlzLm9mZnNldD10aGlzLnN0YXJ0VGltZT0wO3RoaXMucGxheWJhY2tSYXRlPTE7dGhpcy5pc1BsYXlpbmc9ITE7dGhpcy5oYXNQbGF5YmFja0NvbnRyb2w9ITA7dGhpcy5zb3VyY2VUeXBlPVwiZW1wdHlcIjt0aGlzLmZpbHRlcnM9W119ZnVuY3Rpb24gdGUoYSl7bGMuY2FsbCh0aGlzLFxuICAgIGEpO3RoaXMucGFubmVyPXRoaXMuY29udGV4dC5jcmVhdGVQYW5uZXIoKTt0aGlzLnBhbm5lci5jb25uZWN0KHRoaXMuZ2Fpbil9ZnVuY3Rpb24gdWUoYSxiKXt0aGlzLmFuYWx5c2VyPWEuY29udGV4dC5jcmVhdGVBbmFseXNlcigpO3RoaXMuYW5hbHlzZXIuZmZ0U2l6ZT12b2lkIDAhPT1iP2I6MjA0ODt0aGlzLmRhdGE9bmV3IFVpbnQ4QXJyYXkodGhpcy5hbmFseXNlci5mcmVxdWVuY3lCaW5Db3VudCk7YS5nZXRPdXRwdXQoKS5jb25uZWN0KHRoaXMuYW5hbHlzZXIpfWZ1bmN0aW9uIHZlKGEsYixjKXt0aGlzLmJpbmRpbmc9YTt0aGlzLnZhbHVlU2l6ZT1jO2E9RmxvYXQ2NEFycmF5O3N3aXRjaChiKXtjYXNlIFwicXVhdGVybmlvblwiOmI9dGhpcy5fc2xlcnA7YnJlYWs7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJib29sXCI6YT1BcnJheTtiPXRoaXMuX3NlbGVjdDticmVhaztkZWZhdWx0OmI9dGhpcy5fbGVycH10aGlzLmJ1ZmZlcj1uZXcgYSg0KmMpO3RoaXMuX21peEJ1ZmZlclJlZ2lvbj1cbiAgICBiO3RoaXMucmVmZXJlbmNlQ291bnQ9dGhpcy51c2VDb3VudD10aGlzLmN1bXVsYXRpdmVXZWlnaHQ9MH1mdW5jdGlvbiBtZihhLGIsYyl7Yz1jfHxxYS5wYXJzZVRyYWNrTmFtZShiKTt0aGlzLl90YXJnZXRHcm91cD1hO3RoaXMuX2JpbmRpbmdzPWEuc3Vic2NyaWJlXyhiLGMpfWZ1bmN0aW9uIHFhKGEsYixjKXt0aGlzLnBhdGg9Yjt0aGlzLnBhcnNlZFBhdGg9Y3x8cWEucGFyc2VUcmFja05hbWUoYik7dGhpcy5ub2RlPXFhLmZpbmROb2RlKGEsdGhpcy5wYXJzZWRQYXRoLm5vZGVOYW1lKXx8YTt0aGlzLnJvb3ROb2RlPWF9ZnVuY3Rpb24gbmYoKXt0aGlzLnV1aWQ9US5nZW5lcmF0ZVVVSUQoKTt0aGlzLl9vYmplY3RzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7dGhpcy5uQ2FjaGVkT2JqZWN0c189MDt2YXIgYT17fTt0aGlzLl9pbmRpY2VzQnlVVUlEPWE7Zm9yKHZhciBiPTAsYz1hcmd1bWVudHMubGVuZ3RoO2IhPT1jOysrYilhW2FyZ3VtZW50c1tiXS51dWlkXT1cbiAgICBiO3RoaXMuX3BhdGhzPVtdO3RoaXMuX3BhcnNlZFBhdGhzPVtdO3RoaXMuX2JpbmRpbmdzPVtdO3RoaXMuX2JpbmRpbmdzSW5kaWNlc0J5UGF0aD17fTt2YXIgZD10aGlzO3RoaXMuc3RhdHM9e29iamVjdHM6e2dldCB0b3RhbCgpe3JldHVybiBkLl9vYmplY3RzLmxlbmd0aH0sZ2V0IGluVXNlKCl7cmV0dXJuIHRoaXMudG90YWwtZC5uQ2FjaGVkT2JqZWN0c199fSxnZXQgYmluZGluZ3NQZXJPYmplY3QoKXtyZXR1cm4gZC5fYmluZGluZ3MubGVuZ3RofX19ZnVuY3Rpb24gb2YoYSxiLGMpe3RoaXMuX21peGVyPWE7dGhpcy5fY2xpcD1iO3RoaXMuX2xvY2FsUm9vdD1jfHxudWxsO2E9Yi50cmFja3M7Yj1hLmxlbmd0aDtjPUFycmF5KGIpO2Zvcih2YXIgZD17ZW5kaW5nU3RhcnQ6MjQwMCxlbmRpbmdFbmQ6MjQwMH0sZT0wO2UhPT1iOysrZSl7dmFyIGY9YVtlXS5jcmVhdGVJbnRlcnBvbGFudChudWxsKTtjW2VdPWY7Zi5zZXR0aW5ncz1kfXRoaXMuX2ludGVycG9sYW50U2V0dGluZ3M9XG4gICAgZDt0aGlzLl9pbnRlcnBvbGFudHM9Yzt0aGlzLl9wcm9wZXJ0eUJpbmRpbmdzPUFycmF5KGIpO3RoaXMuX3dlaWdodEludGVycG9sYW50PXRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50PXRoaXMuX2J5Q2xpcENhY2hlSW5kZXg9dGhpcy5fY2FjaGVJbmRleD1udWxsO3RoaXMubG9vcD0yMjAxO3RoaXMuX2xvb3BDb3VudD0tMTt0aGlzLl9zdGFydFRpbWU9bnVsbDt0aGlzLnRpbWU9MDt0aGlzLl9lZmZlY3RpdmVXZWlnaHQ9dGhpcy53ZWlnaHQ9dGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlPXRoaXMudGltZVNjYWxlPTE7dGhpcy5yZXBldGl0aW9ucz1JbmZpbml0eTt0aGlzLnBhdXNlZD0hMTt0aGlzLmVuYWJsZWQ9ITA7dGhpcy5jbGFtcFdoZW5GaW5pc2hlZD0hMTt0aGlzLnplcm9TbG9wZUF0RW5kPXRoaXMuemVyb1Nsb3BlQXRTdGFydD0hMH1mdW5jdGlvbiB3ZShhKXt0aGlzLl9yb290PWE7dGhpcy5faW5pdE1lbW9yeU1hbmFnZXIoKTt0aGlzLnRpbWU9dGhpcy5fYWNjdUluZGV4PVxuICAgIDA7dGhpcy50aW1lU2NhbGU9MX1mdW5jdGlvbiBRZChhLGIpe1wic3RyaW5nXCI9PT10eXBlb2YgYSYmKGNvbnNvbGUud2FybihcIlRIUkVFLlVuaWZvcm06IFR5cGUgcGFyYW1ldGVyIGlzIG5vIGxvbmdlciBuZWVkZWQuXCIpLGE9Yik7dGhpcy52YWx1ZT1hfWZ1bmN0aW9uIHhlKCl7RS5jYWxsKHRoaXMpO3RoaXMudHlwZT1cIkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5XCI7dGhpcy5tYXhJbnN0YW5jZWRDb3VudD12b2lkIDB9ZnVuY3Rpb24geWUoYSxiLGMsZCl7dGhpcy51dWlkPVEuZ2VuZXJhdGVVVUlEKCk7dGhpcy5kYXRhPWE7dGhpcy5pdGVtU2l6ZT1iO3RoaXMub2Zmc2V0PWM7dGhpcy5ub3JtYWxpemVkPSEwPT09ZH1mdW5jdGlvbiBtYyhhLGIpe3RoaXMudXVpZD1RLmdlbmVyYXRlVVVJRCgpO3RoaXMuYXJyYXk9YTt0aGlzLnN0cmlkZT1iO3RoaXMuY291bnQ9dm9pZCAwIT09YT9hLmxlbmd0aC9iOjA7dGhpcy5keW5hbWljPSExO3RoaXMudXBkYXRlUmFuZ2U9e29mZnNldDowLGNvdW50Oi0xfTtcbiAgICB0aGlzLm9uVXBsb2FkQ2FsbGJhY2s9ZnVuY3Rpb24oKXt9O3RoaXMudmVyc2lvbj0wfWZ1bmN0aW9uIHplKGEsYixjKXttYy5jYWxsKHRoaXMsYSxiKTt0aGlzLm1lc2hQZXJBdHRyaWJ1dGU9Y3x8MX1mdW5jdGlvbiBBZShhLGIsYyl7TS5jYWxsKHRoaXMsYSxiKTt0aGlzLm1lc2hQZXJBdHRyaWJ1dGU9Y3x8MX1mdW5jdGlvbiBwZihhLGIsYyxkKXt0aGlzLnJheT1uZXcgc2IoYSxiKTt0aGlzLm5lYXI9Y3x8MDt0aGlzLmZhcj1kfHxJbmZpbml0eTt0aGlzLnBhcmFtcz17TWVzaDp7fSxMaW5lOnt9LExPRDp7fSxQb2ludHM6e3RocmVzaG9sZDoxfSxTcHJpdGU6e319O09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMucGFyYW1zLHtQb2ludENsb3VkOntnZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5SYXljYXN0ZXI6IHBhcmFtcy5Qb2ludENsb3VkIGhhcyBiZWVuIHJlbmFtZWQgdG8gcGFyYW1zLlBvaW50cy5cIik7cmV0dXJuIHRoaXMuUG9pbnRzfX19KX1mdW5jdGlvbiBxZihhLFxuICAgIGIpe3JldHVybiBhLmRpc3RhbmNlLWIuZGlzdGFuY2V9ZnVuY3Rpb24gQmUoYSxiLGMsZCl7aWYoITEhPT1hLnZpc2libGUmJihhLnJheWNhc3QoYixjKSwhMD09PWQpKXthPWEuY2hpbGRyZW47ZD0wO2Zvcih2YXIgZT1hLmxlbmd0aDtkPGU7ZCsrKUJlKGFbZF0sYixjLCEwKX19ZnVuY3Rpb24gcmYoYSl7dGhpcy5hdXRvU3RhcnQ9dm9pZCAwIT09YT9hOiEwO3RoaXMuZWxhcHNlZFRpbWU9dGhpcy5vbGRUaW1lPXRoaXMuc3RhcnRUaW1lPTA7dGhpcy5ydW5uaW5nPSExfWZ1bmN0aW9uIHNmKGEsYixjKXt0aGlzLnJhZGl1cz12b2lkIDAhPT1hP2E6MTt0aGlzLnBoaT12b2lkIDAhPT1iP2I6MDt0aGlzLnRoZXRhPXZvaWQgMCE9PWM/YzowO3JldHVybiB0aGlzfWZ1bmN0aW9uIHRmKGEsYixjKXt0aGlzLnJhZGl1cz12b2lkIDAhPT1hP2E6MTt0aGlzLnRoZXRhPXZvaWQgMCE9PWI/YjowO3RoaXMueT12b2lkIDAhPT1jP2M6MDtyZXR1cm4gdGhpc31mdW5jdGlvbiBnZChhKXt4LmNhbGwodGhpcyk7XG4gICAgdGhpcy5tYXRlcmlhbD1hO3RoaXMucmVuZGVyPWZ1bmN0aW9uKCl7fX1mdW5jdGlvbiBoZChhLGIsYyxkKXt0aGlzLm9iamVjdD1hO3RoaXMuc2l6ZT12b2lkIDAhPT1iP2I6MTthPXZvaWQgMCE9PWM/YzoxNjcxMTY4MDtkPXZvaWQgMCE9PWQ/ZDoxO2I9MDsoYz10aGlzLm9iamVjdC5nZW9tZXRyeSkmJmMuaXNHZW9tZXRyeT9iPTMqYy5mYWNlcy5sZW5ndGg6YyYmYy5pc0J1ZmZlckdlb21ldHJ5JiYoYj1jLmF0dHJpYnV0ZXMubm9ybWFsLmNvdW50KTtjPW5ldyBFO2I9bmV3IEIoNipiLDMpO2MuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixiKTtYLmNhbGwodGhpcyxjLG5ldyBXKHtjb2xvcjphLGxpbmV3aWR0aDpkfSkpO3RoaXMubWF0cml4QXV0b1VwZGF0ZT0hMTt0aGlzLnVwZGF0ZSgpfWZ1bmN0aW9uIG5jKGEsYil7eC5jYWxsKHRoaXMpO3RoaXMubGlnaHQ9YTt0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7dGhpcy5tYXRyaXg9YS5tYXRyaXhXb3JsZDt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9XG4gICAgITE7dGhpcy5jb2xvcj1iO2E9bmV3IEU7Yj1bMCwwLDAsMCwwLDEsMCwwLDAsMSwwLDEsMCwwLDAsLTEsMCwxLDAsMCwwLDAsMSwxLDAsMCwwLDAsLTEsMV07Zm9yKHZhciBjPTAsZD0xOzMyPmM7YysrLGQrKyl7dmFyIGU9Yy8zMipNYXRoLlBJKjIsZj1kLzMyKk1hdGguUEkqMjtiLnB1c2goTWF0aC5jb3MoZSksTWF0aC5zaW4oZSksMSxNYXRoLmNvcyhmKSxNYXRoLnNpbihmKSwxKX1hLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IEIoYiwzKSk7Yj1uZXcgVyh7Zm9nOiExfSk7dGhpcy5jb25lPW5ldyBYKGEsYik7dGhpcy5hZGQodGhpcy5jb25lKTt0aGlzLnVwZGF0ZSgpfWZ1bmN0aW9uIHVmKGEpe3ZhciBiPVtdO2EmJmEuaXNCb25lJiZiLnB1c2goYSk7Zm9yKHZhciBjPTA7YzxhLmNoaWxkcmVuLmxlbmd0aDtjKyspYi5wdXNoLmFwcGx5KGIsdWYoYS5jaGlsZHJlbltjXSkpO3JldHVybiBifWZ1bmN0aW9uIG9jKGEpe2Zvcih2YXIgYj11ZihhKSxjPW5ldyBFLGQ9W10sZT1cbiAgICBbXSxmPW5ldyBIKDAsMCwxKSxnPW5ldyBIKDAsMSwwKSxoPTA7aDxiLmxlbmd0aDtoKyspe3ZhciBrPWJbaF07ay5wYXJlbnQmJmsucGFyZW50LmlzQm9uZSYmKGQucHVzaCgwLDAsMCksZC5wdXNoKDAsMCwwKSxlLnB1c2goZi5yLGYuZyxmLmIpLGUucHVzaChnLnIsZy5nLGcuYikpfWMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihkLDMpKTtjLmFkZEF0dHJpYnV0ZShcImNvbG9yXCIsbmV3IEIoZSwzKSk7ZD1uZXcgVyh7dmVydGV4Q29sb3JzOjIsZGVwdGhUZXN0OiExLGRlcHRoV3JpdGU6ITEsdHJhbnNwYXJlbnQ6ITB9KTtYLmNhbGwodGhpcyxjLGQpO3RoaXMucm9vdD1hO3RoaXMuYm9uZXM9Yjt0aGlzLm1hdHJpeD1hLm1hdHJpeFdvcmxkO3RoaXMubWF0cml4QXV0b1VwZGF0ZT0hMX1mdW5jdGlvbiBwYyhhLGIsYyl7dGhpcy5saWdodD1hO3RoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTt0aGlzLmNvbG9yPWM7YT1uZXcgd2IoYiw0LDIpO2I9bmV3IEFhKHt3aXJlZnJhbWU6ITAsXG4gICAgZm9nOiExfSk7cmEuY2FsbCh0aGlzLGEsYik7dGhpcy5tYXRyaXg9dGhpcy5saWdodC5tYXRyaXhXb3JsZDt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITE7dGhpcy51cGRhdGUoKX1mdW5jdGlvbiBxYyhhLGIpe3guY2FsbCh0aGlzKTt0aGlzLmxpZ2h0PWE7dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO3RoaXMubWF0cml4PWEubWF0cml4V29ybGQ7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSExO3RoaXMuY29sb3I9YjthPW5ldyBXKHtmb2c6ITF9KTtiPW5ldyBFO2IuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgTShuZXcgRmxvYXQzMkFycmF5KDE1KSwzKSk7dGhpcy5saW5lPW5ldyBzYShiLGEpO3RoaXMuYWRkKHRoaXMubGluZSk7dGhpcy51cGRhdGUoKX1mdW5jdGlvbiByYyhhLGIsYyl7eC5jYWxsKHRoaXMpO3RoaXMubGlnaHQ9YTt0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7dGhpcy5tYXRyaXg9YS5tYXRyaXhXb3JsZDt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9XG4gICAgITE7dGhpcy5jb2xvcj1jO2E9bmV3IHViKGIpO2Eucm90YXRlWSguNSpNYXRoLlBJKTt0aGlzLm1hdGVyaWFsPW5ldyBBYSh7d2lyZWZyYW1lOiEwLGZvZzohMX0pO3ZvaWQgMD09PXRoaXMuY29sb3ImJih0aGlzLm1hdGVyaWFsLnZlcnRleENvbG9ycz0yKTtiPWEuZ2V0QXR0cmlidXRlKFwicG9zaXRpb25cIik7Yj1uZXcgRmxvYXQzMkFycmF5KDMqYi5jb3VudCk7YS5hZGRBdHRyaWJ1dGUoXCJjb2xvclwiLG5ldyBNKGIsMykpO3RoaXMuYWRkKG5ldyByYShhLHRoaXMubWF0ZXJpYWwpKTt0aGlzLnVwZGF0ZSgpfWZ1bmN0aW9uIGlkKGEsYixjLGQpe2E9YXx8MTA7Yj1ifHwxMDtjPW5ldyBIKHZvaWQgMCE9PWM/Yzo0NDczOTI0KTtkPW5ldyBIKHZvaWQgMCE9PWQ/ZDo4OTQ3ODQ4KTt2YXIgZT1iLzIsZj1hL2IsZz1hLzI7YT1bXTtmb3IodmFyIGg9W10saz0wLG09MCxxPS1nO2s8PWI7aysrLHErPWYpe2EucHVzaCgtZywwLHEsZywwLHEpO2EucHVzaChxLDAsLWcscSwwLGcpO3ZhciBuPVxuICAgIGs9PT1lP2M6ZDtuLnRvQXJyYXkoaCxtKTttKz0zO24udG9BcnJheShoLG0pO20rPTM7bi50b0FycmF5KGgsbSk7bSs9MztuLnRvQXJyYXkoaCxtKTttKz0zfWI9bmV3IEU7Yi5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKGEsMykpO2IuYWRkQXR0cmlidXRlKFwiY29sb3JcIixuZXcgQihoLDMpKTtjPW5ldyBXKHt2ZXJ0ZXhDb2xvcnM6Mn0pO1guY2FsbCh0aGlzLGIsYyl9ZnVuY3Rpb24gUmQoYSxiLGMsZCxlLGYpe2E9YXx8MTA7Yj1ifHwxNjtjPWN8fDg7ZD1kfHw2NDtlPW5ldyBIKHZvaWQgMCE9PWU/ZTo0NDczOTI0KTtmPW5ldyBIKHZvaWQgMCE9PWY/Zjo4OTQ3ODQ4KTt2YXIgZz1bXSxoPVtdLGs7Zm9yKGs9MDtrPD1iO2srKyl7dmFyIG09ay9iKjIqTWF0aC5QSTt2YXIgcT1NYXRoLnNpbihtKSphO209TWF0aC5jb3MobSkqYTtnLnB1c2goMCwwLDApO2cucHVzaChxLDAsbSk7dmFyIG49ayYxP2U6ZjtoLnB1c2gobi5yLG4uZyxuLmIpO2gucHVzaChuLnIsbi5nLG4uYil9Zm9yKGs9XG4gICAgMDtrPD1jO2srKyl7bj1rJjE/ZTpmO3ZhciBsPWEtYS9jKms7Zm9yKGI9MDtiPGQ7YisrKW09Yi9kKjIqTWF0aC5QSSxxPU1hdGguc2luKG0pKmwsbT1NYXRoLmNvcyhtKSpsLGcucHVzaChxLDAsbSksaC5wdXNoKG4ucixuLmcsbi5iKSxtPShiKzEpL2QqMipNYXRoLlBJLHE9TWF0aC5zaW4obSkqbCxtPU1hdGguY29zKG0pKmwsZy5wdXNoKHEsMCxtKSxoLnB1c2gobi5yLG4uZyxuLmIpfWE9bmV3IEU7YS5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBCKGcsMykpO2EuYWRkQXR0cmlidXRlKFwiY29sb3JcIixuZXcgQihoLDMpKTtnPW5ldyBXKHt2ZXJ0ZXhDb2xvcnM6Mn0pO1guY2FsbCh0aGlzLGEsZyl9ZnVuY3Rpb24gamQoYSxiLGMsZCl7dGhpcy5vYmplY3Q9YTt0aGlzLnNpemU9dm9pZCAwIT09Yj9iOjE7YT12b2lkIDAhPT1jP2M6MTY3NzY5NjA7ZD12b2lkIDAhPT1kP2Q6MTtiPTA7KGM9dGhpcy5vYmplY3QuZ2VvbWV0cnkpJiZjLmlzR2VvbWV0cnk/Yj1jLmZhY2VzLmxlbmd0aDpcbiAgICBjb25zb2xlLndhcm4oXCJUSFJFRS5GYWNlTm9ybWFsc0hlbHBlcjogb25seSBUSFJFRS5HZW9tZXRyeSBpcyBzdXBwb3J0ZWQuIFVzZSBUSFJFRS5WZXJ0ZXhOb3JtYWxzSGVscGVyLCBpbnN0ZWFkLlwiKTtjPW5ldyBFO2I9bmV3IEIoNipiLDMpO2MuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixiKTtYLmNhbGwodGhpcyxjLG5ldyBXKHtjb2xvcjphLGxpbmV3aWR0aDpkfSkpO3RoaXMubWF0cml4QXV0b1VwZGF0ZT0hMTt0aGlzLnVwZGF0ZSgpfWZ1bmN0aW9uIHNjKGEsYixjKXt4LmNhbGwodGhpcyk7dGhpcy5saWdodD1hO3RoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTt0aGlzLm1hdHJpeD1hLm1hdHJpeFdvcmxkO3RoaXMubWF0cml4QXV0b1VwZGF0ZT0hMTt0aGlzLmNvbG9yPWM7dm9pZCAwPT09YiYmKGI9MSk7YT1uZXcgRTthLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IEIoWy1iLGIsMCxiLGIsMCxiLC1iLDAsLWIsLWIsMCwtYixiLDBdLDMpKTtiPW5ldyBXKHtmb2c6ITF9KTtcbiAgICB0aGlzLmxpZ2h0UGxhbmU9bmV3IHNhKGEsYik7dGhpcy5hZGQodGhpcy5saWdodFBsYW5lKTthPW5ldyBFO2EuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihbMCwwLDAsMCwwLDFdLDMpKTt0aGlzLnRhcmdldExpbmU9bmV3IHNhKGEsYik7dGhpcy5hZGQodGhpcy50YXJnZXRMaW5lKTt0aGlzLnVwZGF0ZSgpfWZ1bmN0aW9uIGtkKGEpe2Z1bmN0aW9uIGIoYSxiLGQpe2MoYSxkKTtjKGIsZCl9ZnVuY3Rpb24gYyhhLGIpe2YucHVzaCgwLDAsMCk7Zy5wdXNoKGIucixiLmcsYi5iKTt2b2lkIDA9PT1oW2FdJiYoaFthXT1bXSk7aFthXS5wdXNoKGYubGVuZ3RoLzMtMSl9dmFyIGQ9bmV3IEUsZT1uZXcgVyh7Y29sb3I6MTY3NzcyMTUsdmVydGV4Q29sb3JzOjF9KSxmPVtdLGc9W10saD17fSxrPW5ldyBIKDE2NzU1MjAwKSxtPW5ldyBIKDE2NzExNjgwKSxxPW5ldyBIKDQzNzc1KSxsPW5ldyBIKDE2Nzc3MjE1KSx1PW5ldyBIKDMzNTU0NDMpO2IoXCJuMVwiLFwibjJcIixrKTtiKFwibjJcIixcbiAgICBcIm40XCIsayk7YihcIm40XCIsXCJuM1wiLGspO2IoXCJuM1wiLFwibjFcIixrKTtiKFwiZjFcIixcImYyXCIsayk7YihcImYyXCIsXCJmNFwiLGspO2IoXCJmNFwiLFwiZjNcIixrKTtiKFwiZjNcIixcImYxXCIsayk7YihcIm4xXCIsXCJmMVwiLGspO2IoXCJuMlwiLFwiZjJcIixrKTtiKFwibjNcIixcImYzXCIsayk7YihcIm40XCIsXCJmNFwiLGspO2IoXCJwXCIsXCJuMVwiLG0pO2IoXCJwXCIsXCJuMlwiLG0pO2IoXCJwXCIsXCJuM1wiLG0pO2IoXCJwXCIsXCJuNFwiLG0pO2IoXCJ1MVwiLFwidTJcIixxKTtiKFwidTJcIixcInUzXCIscSk7YihcInUzXCIsXCJ1MVwiLHEpO2IoXCJjXCIsXCJ0XCIsbCk7YihcInBcIixcImNcIix1KTtiKFwiY24xXCIsXCJjbjJcIix1KTtiKFwiY24zXCIsXCJjbjRcIix1KTtiKFwiY2YxXCIsXCJjZjJcIix1KTtiKFwiY2YzXCIsXCJjZjRcIix1KTtkLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IEIoZiwzKSk7ZC5hZGRBdHRyaWJ1dGUoXCJjb2xvclwiLG5ldyBCKGcsMykpO1guY2FsbCh0aGlzLGQsZSk7dGhpcy5jYW1lcmE9YTt0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4JiZ0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG4gICAgdGhpcy5tYXRyaXg9YS5tYXRyaXhXb3JsZDt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9ITE7dGhpcy5wb2ludE1hcD1oO3RoaXMudXBkYXRlKCl9ZnVuY3Rpb24gR2IoYSxiKXt0aGlzLm9iamVjdD1hO3ZvaWQgMD09PWImJihiPTE2Nzc2OTYwKTthPW5ldyBVaW50MTZBcnJheShbMCwxLDEsMiwyLDMsMywwLDQsNSw1LDYsNiw3LDcsNCwwLDQsMSw1LDIsNiwzLDddKTt2YXIgYz1uZXcgRmxvYXQzMkFycmF5KDI0KSxkPW5ldyBFO2Quc2V0SW5kZXgobmV3IE0oYSwxKSk7ZC5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLG5ldyBNKGMsMykpO1guY2FsbCh0aGlzLGQsbmV3IFcoe2NvbG9yOmJ9KSk7dGhpcy5tYXRyaXhBdXRvVXBkYXRlPSExO3RoaXMudXBkYXRlKCl9ZnVuY3Rpb24gbGQoYSxiKXt0aGlzLnR5cGU9XCJCb3gzSGVscGVyXCI7dGhpcy5ib3g9YTthPXZvaWQgMCE9PWI/YjoxNjc3Njk2MDtiPW5ldyBVaW50MTZBcnJheShbMCwxLDEsMiwyLDMsMywwLDQsNSw1LDYsNiw3LDcsNCwwLFxuICAgIDQsMSw1LDIsNiwzLDddKTt2YXIgYz1uZXcgRTtjLnNldEluZGV4KG5ldyBNKGIsMSkpO2MuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihbMSwxLDEsLTEsMSwxLC0xLC0xLDEsMSwtMSwxLDEsMSwtMSwtMSwxLC0xLC0xLC0xLC0xLDEsLTEsLTFdLDMpKTtYLmNhbGwodGhpcyxjLG5ldyBXKHtjb2xvcjphfSkpO3RoaXMuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCl9ZnVuY3Rpb24gbWQoYSxiLGMpe3RoaXMudHlwZT1cIlBsYW5lSGVscGVyXCI7dGhpcy5wbGFuZT1hO3RoaXMuc2l6ZT12b2lkIDA9PT1iPzE6YjthPXZvaWQgMCE9PWM/YzoxNjc3Njk2MDtiPW5ldyBFO2IuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihbMSwtMSwxLC0xLDEsMSwtMSwtMSwxLDEsMSwxLC0xLDEsMSwtMSwtMSwxLDEsLTEsMSwxLDEsMSwwLDAsMSwwLDAsMF0sMykpO2IuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7c2EuY2FsbCh0aGlzLGIsbmV3IFcoe2NvbG9yOmF9KSk7Yj1uZXcgRTtcbiAgICBiLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IEIoWzEsMSwxLC0xLDEsMSwtMSwtMSwxLDEsMSwxLC0xLC0xLDEsMSwtMSwxXSwzKSk7Yi5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTt0aGlzLmFkZChuZXcgcmEoYixuZXcgQWEoe2NvbG9yOmEsb3BhY2l0eTouMix0cmFuc3BhcmVudDohMCxkZXB0aFdyaXRlOiExfSkpKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUsZil7eC5jYWxsKHRoaXMpO3ZvaWQgMD09PWQmJihkPTE2Nzc2OTYwKTt2b2lkIDA9PT1jJiYoYz0xKTt2b2lkIDA9PT1lJiYoZT0uMipjKTt2b2lkIDA9PT1mJiYoZj0uMiplKTt2b2lkIDA9PT1TZCYmKFNkPW5ldyBFLFNkLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsbmV3IEIoWzAsMCwwLDAsMSwwXSwzKSksQ2U9bmV3IGFiKDAsLjUsMSw1LDEpLENlLnRyYW5zbGF0ZSgwLC0uNSwwKSk7dGhpcy5wb3NpdGlvbi5jb3B5KGIpO3RoaXMubGluZT1uZXcgc2EoU2QsbmV3IFcoe2NvbG9yOmR9KSk7dGhpcy5saW5lLm1hdHJpeEF1dG9VcGRhdGU9XG4gICAgITE7dGhpcy5hZGQodGhpcy5saW5lKTt0aGlzLmNvbmU9bmV3IHJhKENlLG5ldyBBYSh7Y29sb3I6ZH0pKTt0aGlzLmNvbmUubWF0cml4QXV0b1VwZGF0ZT0hMTt0aGlzLmFkZCh0aGlzLmNvbmUpO3RoaXMuc2V0RGlyZWN0aW9uKGEpO3RoaXMuc2V0TGVuZ3RoKGMsZSxmKX1mdW5jdGlvbiBuZChhKXthPWF8fDE7dmFyIGI9WzAsMCwwLGEsMCwwLDAsMCwwLDAsYSwwLDAsMCwwLDAsMCxhXTthPW5ldyBFO2EuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihiLDMpKTthLmFkZEF0dHJpYnV0ZShcImNvbG9yXCIsbmV3IEIoWzEsMCwwLDEsLjYsMCwwLDEsMCwuNiwxLDAsMCwwLDEsMCwuNiwxXSwzKSk7Yj1uZXcgVyh7dmVydGV4Q29sb3JzOjJ9KTtYLmNhbGwodGhpcyxhLGIpfWZ1bmN0aW9uIHZmKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkNsb3NlZFNwbGluZUN1cnZlMyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQ2F0bXVsbFJvbUN1cnZlMyBpbnN0ZWFkLlwiKTtjYS5jYWxsKHRoaXMsXG4gICAgYSk7dGhpcy50eXBlPVwiY2F0bXVsbHJvbVwiO3RoaXMuY2xvc2VkPSEwfWZ1bmN0aW9uIHdmKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlNwbGluZUN1cnZlMyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQ2F0bXVsbFJvbUN1cnZlMyBpbnN0ZWFkLlwiKTtjYS5jYWxsKHRoaXMsYSk7dGhpcy50eXBlPVwiY2F0bXVsbHJvbVwifWZ1bmN0aW9uIERlKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlNwbGluZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuQ2F0bXVsbFJvbUN1cnZlMyBpbnN0ZWFkLlwiKTtjYS5jYWxsKHRoaXMsYSk7dGhpcy50eXBlPVwiY2F0bXVsbHJvbVwifXZvaWQgMD09PU51bWJlci5FUFNJTE9OJiYoTnVtYmVyLkVQU0lMT049TWF0aC5wb3coMiwtNTIpKTt2b2lkIDA9PT1OdW1iZXIuaXNJbnRlZ2VyJiYoTnVtYmVyLmlzSW50ZWdlcj1mdW5jdGlvbihhKXtyZXR1cm5cIm51bWJlclwiPT09dHlwZW9mIGEmJmlzRmluaXRlKGEpJiZNYXRoLmZsb29yKGEpPT09YX0pO3ZvaWQgMD09PVxuICAgIE1hdGguc2lnbiYmKE1hdGguc2lnbj1mdW5jdGlvbihhKXtyZXR1cm4gMD5hPy0xOjA8YT8xOithfSk7ITE9PT1cIm5hbWVcImluIEZ1bmN0aW9uLnByb3RvdHlwZSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KEZ1bmN0aW9uLnByb3RvdHlwZSxcIm5hbWVcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudG9TdHJpbmcoKS5tYXRjaCgvXlxccypmdW5jdGlvblxccyooW15cXChcXHNdKikvKVsxXX19KTt2b2lkIDA9PT1PYmplY3QuYXNzaWduJiZmdW5jdGlvbigpe09iamVjdC5hc3NpZ249ZnVuY3Rpb24oYSl7aWYodm9pZCAwPT09YXx8bnVsbD09PWEpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdFwiKTtmb3IodmFyIGI9T2JqZWN0KGEpLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKXt2YXIgZD1hcmd1bWVudHNbY107aWYodm9pZCAwIT09ZCYmbnVsbCE9PWQpZm9yKHZhciBlIGluIGQpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGQsXG4gICAgZSkmJihiW2VdPWRbZV0pfXJldHVybiBifX0oKTtPYmplY3QuYXNzaWduKHphLnByb3RvdHlwZSx7YWRkRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PXRoaXMuX2xpc3RlbmVycyYmKHRoaXMuX2xpc3RlbmVycz17fSk7dmFyIGM9dGhpcy5fbGlzdGVuZXJzO3ZvaWQgMD09PWNbYV0mJihjW2FdPVtdKTstMT09PWNbYV0uaW5kZXhPZihiKSYmY1thXS5wdXNoKGIpfSxoYXNFdmVudExpc3RlbmVyOmZ1bmN0aW9uKGEsYil7aWYodm9pZCAwPT09dGhpcy5fbGlzdGVuZXJzKXJldHVybiExO3ZhciBjPXRoaXMuX2xpc3RlbmVycztyZXR1cm4gdm9pZCAwIT09Y1thXSYmLTEhPT1jW2FdLmluZGV4T2YoYil9LHJlbW92ZUV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24oYSxiKXt2b2lkIDAhPT10aGlzLl9saXN0ZW5lcnMmJihhPXRoaXMuX2xpc3RlbmVyc1thXSx2b2lkIDAhPT1hJiYoYj1hLmluZGV4T2YoYiksLTEhPT1iJiZhLnNwbGljZShiLDEpKSl9LGRpc3BhdGNoRXZlbnQ6ZnVuY3Rpb24oYSl7aWYodm9pZCAwIT09XG4gICAgdGhpcy5fbGlzdGVuZXJzKXt2YXIgYj10aGlzLl9saXN0ZW5lcnNbYS50eXBlXTtpZih2b2lkIDAhPT1iKXthLnRhcmdldD10aGlzO2Zvcih2YXIgYj1iLnNsaWNlKDApLGM9MCxkPWIubGVuZ3RoO2M8ZDtjKyspYltjXS5jYWxsKHRoaXMsYSl9fX19KTt2YXIgUT17REVHMlJBRDpNYXRoLlBJLzE4MCxSQUQyREVHOjE4MC9NYXRoLlBJLGdlbmVyYXRlVVVJRDpmdW5jdGlvbigpe2Zvcih2YXIgYT1bXSxiPTA7MjU2PmI7YisrKWFbYl09KDE2PmI/XCIwXCI6XCJcIikrYi50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYj00Mjk0OTY3Mjk1Kk1hdGgucmFuZG9tKCl8MCxkPTQyOTQ5NjcyOTUqTWF0aC5yYW5kb20oKXwwLGU9NDI5NDk2NzI5NSpNYXRoLnJhbmRvbSgpfDAsZj00Mjk0OTY3Mjk1Kk1hdGgucmFuZG9tKCl8MDtyZXR1cm4gYVtiJjI1NV0rYVtiPj44JjI1NV0rYVtiPj4xNiYyNTVdK2FbYj4+MjQmMjU1XStcIi1cIithW2QmMjU1XSthW2Q+PjgmXG4gICAgMjU1XStcIi1cIithW2Q+PjE2JjE1fDY0XSthW2Q+PjI0JjI1NV0rXCItXCIrYVtlJjYzfDEyOF0rYVtlPj44JjI1NV0rXCItXCIrYVtlPj4xNiYyNTVdK2FbZT4+MjQmMjU1XSthW2YmMjU1XSthW2Y+PjgmMjU1XSthW2Y+PjE2JjI1NV0rYVtmPj4yNCYyNTVdfX0oKSxjbGFtcDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIE1hdGgubWF4KGIsTWF0aC5taW4oYyxhKSl9LGV1Y2xpZGVhbk1vZHVsbzpmdW5jdGlvbihhLGIpe3JldHVybihhJWIrYiklYn0sbWFwTGluZWFyOmZ1bmN0aW9uKGEsYixjLGQsZSl7cmV0dXJuIGQrKGEtYikqKGUtZCkvKGMtYil9LGxlcnA6ZnVuY3Rpb24oYSxiLGMpe3JldHVybigxLWMpKmErYypifSxzbW9vdGhzdGVwOmZ1bmN0aW9uKGEsYixjKXtpZihhPD1iKXJldHVybiAwO2lmKGE+PWMpcmV0dXJuIDE7YT0oYS1iKS8oYy1iKTtyZXR1cm4gYSphKigzLTIqYSl9LHNtb290aGVyc3RlcDpmdW5jdGlvbihhLGIsYyl7aWYoYTw9YilyZXR1cm4gMDtpZihhPj1jKXJldHVybiAxO1xuICAgIGE9KGEtYikvKGMtYik7cmV0dXJuIGEqYSphKihhKig2KmEtMTUpKzEwKX0scmFuZEludDpmdW5jdGlvbihhLGIpe3JldHVybiBhK01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSooYi1hKzEpKX0scmFuZEZsb2F0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGErTWF0aC5yYW5kb20oKSooYi1hKX0scmFuZEZsb2F0U3ByZWFkOmZ1bmN0aW9uKGEpe3JldHVybiBhKiguNS1NYXRoLnJhbmRvbSgpKX0sZGVnVG9SYWQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEqUS5ERUcyUkFEfSxyYWRUb0RlZzpmdW5jdGlvbihhKXtyZXR1cm4gYSpRLlJBRDJERUd9LGlzUG93ZXJPZlR3bzpmdW5jdGlvbihhKXtyZXR1cm4gMD09PShhJmEtMSkmJjAhPT1hfSxjZWlsUG93ZXJPZlR3bzpmdW5jdGlvbihhKXtyZXR1cm4gTWF0aC5wb3coMixNYXRoLmNlaWwoTWF0aC5sb2coYSkvTWF0aC5MTjIpKX0sZmxvb3JQb3dlck9mVHdvOmZ1bmN0aW9uKGEpe3JldHVybiBNYXRoLnBvdygyLE1hdGguZmxvb3IoTWF0aC5sb2coYSkvXG4gICAgTWF0aC5MTjIpKX19O09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEQucHJvdG90eXBlLHt3aWR0aDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMueH0sc2V0OmZ1bmN0aW9uKGEpe3RoaXMueD1hfX0saGVpZ2h0OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy55fSxzZXQ6ZnVuY3Rpb24oYSl7dGhpcy55PWF9fX0pO09iamVjdC5hc3NpZ24oRC5wcm90b3R5cGUse2lzVmVjdG9yMjohMCxzZXQ6ZnVuY3Rpb24oYSxiKXt0aGlzLng9YTt0aGlzLnk9YjtyZXR1cm4gdGhpc30sc2V0U2NhbGFyOmZ1bmN0aW9uKGEpe3RoaXMueT10aGlzLng9YTtyZXR1cm4gdGhpc30sc2V0WDpmdW5jdGlvbihhKXt0aGlzLng9YTtyZXR1cm4gdGhpc30sc2V0WTpmdW5jdGlvbihhKXt0aGlzLnk9YTtyZXR1cm4gdGhpc30sc2V0Q29tcG9uZW50OmZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMDp0aGlzLng9YjticmVhaztjYXNlIDE6dGhpcy55PWI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcImluZGV4IGlzIG91dCBvZiByYW5nZTogXCIrXG4gICAgYSk7fXJldHVybiB0aGlzfSxnZXRDb21wb25lbnQ6ZnVuY3Rpb24oYSl7c3dpdGNoKGEpe2Nhc2UgMDpyZXR1cm4gdGhpcy54O2Nhc2UgMTpyZXR1cm4gdGhpcy55O2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJpbmRleCBpcyBvdXQgb2YgcmFuZ2U6IFwiK2EpO319LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMueCx0aGlzLnkpfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMueD1hLng7dGhpcy55PWEueTtyZXR1cm4gdGhpc30sYWRkOmZ1bmN0aW9uKGEsYil7aWYodm9pZCAwIT09YilyZXR1cm4gY29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yMjogLmFkZCgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmFkZFZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLlwiKSx0aGlzLmFkZFZlY3RvcnMoYSxiKTt0aGlzLngrPWEueDt0aGlzLnkrPWEueTtyZXR1cm4gdGhpc30sYWRkU2NhbGFyOmZ1bmN0aW9uKGEpe3RoaXMueCs9YTt0aGlzLnkrPWE7cmV0dXJuIHRoaXN9LFxuICAgIGFkZFZlY3RvcnM6ZnVuY3Rpb24oYSxiKXt0aGlzLng9YS54K2IueDt0aGlzLnk9YS55K2IueTtyZXR1cm4gdGhpc30sYWRkU2NhbGVkVmVjdG9yOmZ1bmN0aW9uKGEsYil7dGhpcy54Kz1hLngqYjt0aGlzLnkrPWEueSpiO3JldHVybiB0aGlzfSxzdWI6ZnVuY3Rpb24oYSxiKXtpZih2b2lkIDAhPT1iKXJldHVybiBjb25zb2xlLndhcm4oXCJUSFJFRS5WZWN0b3IyOiAuc3ViKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuc3ViVmVjdG9ycyggYSwgYiApIGluc3RlYWQuXCIpLHRoaXMuc3ViVmVjdG9ycyhhLGIpO3RoaXMueC09YS54O3RoaXMueS09YS55O3JldHVybiB0aGlzfSxzdWJTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy54LT1hO3RoaXMueS09YTtyZXR1cm4gdGhpc30sc3ViVmVjdG9yczpmdW5jdGlvbihhLGIpe3RoaXMueD1hLngtYi54O3RoaXMueT1hLnktYi55O3JldHVybiB0aGlzfSxtdWx0aXBseTpmdW5jdGlvbihhKXt0aGlzLngqPWEueDt0aGlzLnkqPVxuICAgIGEueTtyZXR1cm4gdGhpc30sbXVsdGlwbHlTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy54Kj1hO3RoaXMueSo9YTtyZXR1cm4gdGhpc30sZGl2aWRlOmZ1bmN0aW9uKGEpe3RoaXMueC89YS54O3RoaXMueS89YS55O3JldHVybiB0aGlzfSxkaXZpZGVTY2FsYXI6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoMS9hKX0sYXBwbHlNYXRyaXgzOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMueCxjPXRoaXMueTthPWEuZWxlbWVudHM7dGhpcy54PWFbMF0qYithWzNdKmMrYVs2XTt0aGlzLnk9YVsxXSpiK2FbNF0qYythWzddO3JldHVybiB0aGlzfSxtaW46ZnVuY3Rpb24oYSl7dGhpcy54PU1hdGgubWluKHRoaXMueCxhLngpO3RoaXMueT1NYXRoLm1pbih0aGlzLnksYS55KTtyZXR1cm4gdGhpc30sbWF4OmZ1bmN0aW9uKGEpe3RoaXMueD1NYXRoLm1heCh0aGlzLngsYS54KTt0aGlzLnk9TWF0aC5tYXgodGhpcy55LGEueSk7cmV0dXJuIHRoaXN9LGNsYW1wOmZ1bmN0aW9uKGEsXG4gICAgYil7dGhpcy54PU1hdGgubWF4KGEueCxNYXRoLm1pbihiLngsdGhpcy54KSk7dGhpcy55PU1hdGgubWF4KGEueSxNYXRoLm1pbihiLnksdGhpcy55KSk7cmV0dXJuIHRoaXN9LGNsYW1wU2NhbGFyOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IEQsYj1uZXcgRDtyZXR1cm4gZnVuY3Rpb24oYyxkKXthLnNldChjLGMpO2Iuc2V0KGQsZCk7cmV0dXJuIHRoaXMuY2xhbXAoYSxiKX19KCksY2xhbXBMZW5ndGg6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmxlbmd0aCgpO3JldHVybiB0aGlzLmRpdmlkZVNjYWxhcihjfHwxKS5tdWx0aXBseVNjYWxhcihNYXRoLm1heChhLE1hdGgubWluKGIsYykpKX0sZmxvb3I6ZnVuY3Rpb24oKXt0aGlzLng9TWF0aC5mbG9vcih0aGlzLngpO3RoaXMueT1NYXRoLmZsb29yKHRoaXMueSk7cmV0dXJuIHRoaXN9LGNlaWw6ZnVuY3Rpb24oKXt0aGlzLng9TWF0aC5jZWlsKHRoaXMueCk7dGhpcy55PU1hdGguY2VpbCh0aGlzLnkpO3JldHVybiB0aGlzfSxyb3VuZDpmdW5jdGlvbigpe3RoaXMueD1cbiAgICBNYXRoLnJvdW5kKHRoaXMueCk7dGhpcy55PU1hdGgucm91bmQodGhpcy55KTtyZXR1cm4gdGhpc30scm91bmRUb1plcm86ZnVuY3Rpb24oKXt0aGlzLng9MD50aGlzLng/TWF0aC5jZWlsKHRoaXMueCk6TWF0aC5mbG9vcih0aGlzLngpO3RoaXMueT0wPnRoaXMueT9NYXRoLmNlaWwodGhpcy55KTpNYXRoLmZsb29yKHRoaXMueSk7cmV0dXJuIHRoaXN9LG5lZ2F0ZTpmdW5jdGlvbigpe3RoaXMueD0tdGhpcy54O3RoaXMueT0tdGhpcy55O3JldHVybiB0aGlzfSxkb3Q6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMueCphLngrdGhpcy55KmEueX0sbGVuZ3RoU3E6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy54KnRoaXMueCt0aGlzLnkqdGhpcy55fSxsZW5ndGg6ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCp0aGlzLngrdGhpcy55KnRoaXMueSl9LG1hbmhhdHRhbkxlbmd0aDpmdW5jdGlvbigpe3JldHVybiBNYXRoLmFicyh0aGlzLngpK01hdGguYWJzKHRoaXMueSl9LG5vcm1hbGl6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRpdmlkZVNjYWxhcih0aGlzLmxlbmd0aCgpfHxcbiAgICAxKX0sYW5nbGU6ZnVuY3Rpb24oKXt2YXIgYT1NYXRoLmF0YW4yKHRoaXMueSx0aGlzLngpOzA+YSYmKGErPTIqTWF0aC5QSSk7cmV0dXJuIGF9LGRpc3RhbmNlVG86ZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGguc3FydCh0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKGEpKX0sZGlzdGFuY2VUb1NxdWFyZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy54LWEueDthPXRoaXMueS1hLnk7cmV0dXJuIGIqYithKmF9LG1hbmhhdHRhbkRpc3RhbmNlVG86ZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGguYWJzKHRoaXMueC1hLngpK01hdGguYWJzKHRoaXMueS1hLnkpfSxzZXRMZW5ndGg6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoYSl9LGxlcnA6ZnVuY3Rpb24oYSxiKXt0aGlzLngrPShhLngtdGhpcy54KSpiO3RoaXMueSs9KGEueS10aGlzLnkpKmI7cmV0dXJuIHRoaXN9LGxlcnBWZWN0b3JzOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKGIsXG4gICAgYSkubXVsdGlwbHlTY2FsYXIoYykuYWRkKGEpfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEueD09PXRoaXMueCYmYS55PT09dGhpcy55fSxmcm9tQXJyYXk6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0wKTt0aGlzLng9YVtiXTt0aGlzLnk9YVtiKzFdO3JldHVybiB0aGlzfSx0b0FycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YSYmKGE9W10pO3ZvaWQgMD09PWImJihiPTApO2FbYl09dGhpcy54O2FbYisxXT10aGlzLnk7cmV0dXJuIGF9LGZyb21CdWZmZXJBdHRyaWJ1dGU6ZnVuY3Rpb24oYSxiLGMpe3ZvaWQgMCE9PWMmJmNvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjI6IG9mZnNldCBoYXMgYmVlbiByZW1vdmVkIGZyb20gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS5cIik7dGhpcy54PWEuZ2V0WChiKTt0aGlzLnk9YS5nZXRZKGIpO3JldHVybiB0aGlzfSxyb3RhdGVBcm91bmQ6ZnVuY3Rpb24oYSxiKXt2YXIgYz1NYXRoLmNvcyhiKTtiPU1hdGguc2luKGIpO3ZhciBkPVxuICAgIHRoaXMueC1hLngsZT10aGlzLnktYS55O3RoaXMueD1kKmMtZSpiK2EueDt0aGlzLnk9ZCpiK2UqYythLnk7cmV0dXJuIHRoaXN9fSk7T2JqZWN0LmFzc2lnbihPLnByb3RvdHlwZSx7aXNNYXRyaXg0OiEwLHNldDpmdW5jdGlvbihhLGIsYyxkLGUsZixnLGgsayxtLHEsbCx1LHIsdCxwKXt2YXIgbj10aGlzLmVsZW1lbnRzO25bMF09YTtuWzRdPWI7bls4XT1jO25bMTJdPWQ7blsxXT1lO25bNV09ZjtuWzldPWc7blsxM109aDtuWzJdPWs7bls2XT1tO25bMTBdPXE7blsxNF09bDtuWzNdPXU7bls3XT1yO25bMTFdPXQ7blsxNV09cDtyZXR1cm4gdGhpc30saWRlbnRpdHk6ZnVuY3Rpb24oKXt0aGlzLnNldCgxLDAsMCwwLDAsMSwwLDAsMCwwLDEsMCwwLDAsMCwxKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IE8pLmZyb21BcnJheSh0aGlzLmVsZW1lbnRzKX0sY29weTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmVsZW1lbnRzO2E9YS5lbGVtZW50cztiWzBdPVxuICAgIGFbMF07YlsxXT1hWzFdO2JbMl09YVsyXTtiWzNdPWFbM107Yls0XT1hWzRdO2JbNV09YVs1XTtiWzZdPWFbNl07Yls3XT1hWzddO2JbOF09YVs4XTtiWzldPWFbOV07YlsxMF09YVsxMF07YlsxMV09YVsxMV07YlsxMl09YVsxMl07YlsxM109YVsxM107YlsxNF09YVsxNF07YlsxNV09YVsxNV07cmV0dXJuIHRoaXN9LGNvcHlQb3NpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmVsZW1lbnRzO2E9YS5lbGVtZW50cztiWzEyXT1hWzEyXTtiWzEzXT1hWzEzXTtiWzE0XT1hWzE0XTtyZXR1cm4gdGhpc30sZXh0cmFjdEJhc2lzOmZ1bmN0aW9uKGEsYixjKXthLnNldEZyb21NYXRyaXhDb2x1bW4odGhpcywwKTtiLnNldEZyb21NYXRyaXhDb2x1bW4odGhpcywxKTtjLnNldEZyb21NYXRyaXhDb2x1bW4odGhpcywyKTtyZXR1cm4gdGhpc30sbWFrZUJhc2lzOmZ1bmN0aW9uKGEsYixjKXt0aGlzLnNldChhLngsYi54LGMueCwwLGEueSxiLnksYy55LDAsYS56LGIueixjLnosMCwwLDAsMCxcbiAgICAxKTtyZXR1cm4gdGhpc30sZXh0cmFjdFJvdGF0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZhciBjPXRoaXMuZWxlbWVudHMsZD1iLmVsZW1lbnRzLGU9MS9hLnNldEZyb21NYXRyaXhDb2x1bW4oYiwwKS5sZW5ndGgoKSxmPTEvYS5zZXRGcm9tTWF0cml4Q29sdW1uKGIsMSkubGVuZ3RoKCk7Yj0xL2Euc2V0RnJvbU1hdHJpeENvbHVtbihiLDIpLmxlbmd0aCgpO2NbMF09ZFswXSplO2NbMV09ZFsxXSplO2NbMl09ZFsyXSplO2NbNF09ZFs0XSpmO2NbNV09ZFs1XSpmO2NbNl09ZFs2XSpmO2NbOF09ZFs4XSpiO2NbOV09ZFs5XSpiO2NbMTBdPWRbMTBdKmI7cmV0dXJuIHRoaXN9fSgpLG1ha2VSb3RhdGlvbkZyb21FdWxlcjpmdW5jdGlvbihhKXthJiZhLmlzRXVsZXJ8fGNvbnNvbGUuZXJyb3IoXCJUSFJFRS5NYXRyaXg0OiAubWFrZVJvdGF0aW9uRnJvbUV1bGVyKCkgbm93IGV4cGVjdHMgYSBFdWxlciByb3RhdGlvbiByYXRoZXIgdGhhbiBhIFZlY3RvcjMgYW5kIG9yZGVyLlwiKTtcbiAgICB2YXIgYj10aGlzLmVsZW1lbnRzLGM9YS54LGQ9YS55LGU9YS56LGY9TWF0aC5jb3MoYyksYz1NYXRoLnNpbihjKSxnPU1hdGguY29zKGQpLGQ9TWF0aC5zaW4oZCksaD1NYXRoLmNvcyhlKSxlPU1hdGguc2luKGUpO2lmKFwiWFlaXCI9PT1hLm9yZGVyKXt2YXIgaz1mKmg7dmFyIG09ZiplO3ZhciBxPWMqaDthPWMqZTtiWzBdPWcqaDtiWzRdPS1nKmU7Yls4XT1kO2JbMV09bStxKmQ7Yls1XT1rLWEqZDtiWzldPS1jKmc7YlsyXT1hLWsqZDtiWzZdPXErbSpkO2JbMTBdPWYqZ31lbHNlXCJZWFpcIj09PWEub3JkZXI/KGs9ZypoLG09ZyplLHE9ZCpoLGE9ZCplLGJbMF09aythKmMsYls0XT1xKmMtbSxiWzhdPWYqZCxiWzFdPWYqZSxiWzVdPWYqaCxiWzldPS1jLGJbMl09bSpjLXEsYls2XT1hK2sqYyxiWzEwXT1mKmcpOlwiWlhZXCI9PT1hLm9yZGVyPyhrPWcqaCxtPWcqZSxxPWQqaCxhPWQqZSxiWzBdPWstYSpjLGJbNF09LWYqZSxiWzhdPXErbSpjLGJbMV09bStxKmMsYls1XT1mKmgsYls5XT1cbiAgICBhLWsqYyxiWzJdPS1mKmQsYls2XT1jLGJbMTBdPWYqZyk6XCJaWVhcIj09PWEub3JkZXI/KGs9ZipoLG09ZiplLHE9YypoLGE9YyplLGJbMF09ZypoLGJbNF09cSpkLW0sYls4XT1rKmQrYSxiWzFdPWcqZSxiWzVdPWEqZCtrLGJbOV09bSpkLXEsYlsyXT0tZCxiWzZdPWMqZyxiWzEwXT1mKmcpOlwiWVpYXCI9PT1hLm9yZGVyPyhrPWYqZyxtPWYqZCxxPWMqZyxhPWMqZCxiWzBdPWcqaCxiWzRdPWEtayplLGJbOF09cSplK20sYlsxXT1lLGJbNV09ZipoLGJbOV09LWMqaCxiWzJdPS1kKmgsYls2XT1tKmUrcSxiWzEwXT1rLWEqZSk6XCJYWllcIj09PWEub3JkZXImJihrPWYqZyxtPWYqZCxxPWMqZyxhPWMqZCxiWzBdPWcqaCxiWzRdPS1lLGJbOF09ZCpoLGJbMV09ayplK2EsYls1XT1mKmgsYls5XT1tKmUtcSxiWzJdPXEqZS1tLGJbNl09YypoLGJbMTBdPWEqZStrKTtiWzNdPTA7Yls3XT0wO2JbMTFdPTA7YlsxMl09MDtiWzEzXT0wO2JbMTRdPTA7YlsxNV09MTtyZXR1cm4gdGhpc30sbWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb246ZnVuY3Rpb24oYSl7dmFyIGI9XG4gICAgdGhpcy5lbGVtZW50cyxjPWEuX3gsZD1hLl95LGU9YS5feixmPWEuX3csZz1jK2MsaD1kK2Qsaz1lK2U7YT1jKmc7dmFyIG09YypoLGM9YyprLHE9ZCpoLGQ9ZCprLGU9ZSprLGc9ZipnLGg9ZipoLGY9ZiprO2JbMF09MS0ocStlKTtiWzRdPW0tZjtiWzhdPWMraDtiWzFdPW0rZjtiWzVdPTEtKGErZSk7Yls5XT1kLWc7YlsyXT1jLWg7Yls2XT1kK2c7YlsxMF09MS0oYStxKTtiWzNdPTA7Yls3XT0wO2JbMTFdPTA7YlsxMl09MDtiWzEzXT0wO2JbMTRdPTA7YlsxNV09MTtyZXR1cm4gdGhpc30sbG9va0F0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAsYj1uZXcgcCxjPW5ldyBwO3JldHVybiBmdW5jdGlvbihkLGUsZil7dmFyIGc9dGhpcy5lbGVtZW50cztjLnN1YlZlY3RvcnMoZCxlKTswPT09Yy5sZW5ndGhTcSgpJiYoYy56PTEpO2Mubm9ybWFsaXplKCk7YS5jcm9zc1ZlY3RvcnMoZixjKTswPT09YS5sZW5ndGhTcSgpJiYoMT09PU1hdGguYWJzKGYueik/Yy54Kz0xRS00OmMueis9MUUtNCxcbiAgICBjLm5vcm1hbGl6ZSgpLGEuY3Jvc3NWZWN0b3JzKGYsYykpO2Eubm9ybWFsaXplKCk7Yi5jcm9zc1ZlY3RvcnMoYyxhKTtnWzBdPWEueDtnWzRdPWIueDtnWzhdPWMueDtnWzFdPWEueTtnWzVdPWIueTtnWzldPWMueTtnWzJdPWEuejtnWzZdPWIuejtnWzEwXT1jLno7cmV0dXJuIHRoaXN9fSgpLG11bHRpcGx5OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHZvaWQgMCE9PWI/KGNvbnNvbGUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseSgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLm11bHRpcGx5TWF0cmljZXMoIGEsIGIgKSBpbnN0ZWFkLlwiKSx0aGlzLm11bHRpcGx5TWF0cmljZXMoYSxiKSk6dGhpcy5tdWx0aXBseU1hdHJpY2VzKHRoaXMsYSl9LHByZW11bHRpcGx5OmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoYSx0aGlzKX0sbXVsdGlwbHlNYXRyaWNlczpmdW5jdGlvbihhLGIpe3ZhciBjPWEuZWxlbWVudHMsZD1iLmVsZW1lbnRzO1xuICAgIGI9dGhpcy5lbGVtZW50czthPWNbMF07dmFyIGU9Y1s0XSxmPWNbOF0sZz1jWzEyXSxoPWNbMV0saz1jWzVdLG09Y1s5XSxxPWNbMTNdLG49Y1syXSxsPWNbNl0scj1jWzEwXSx0PWNbMTRdLHA9Y1szXSx3PWNbN10sej1jWzExXSxjPWNbMTVdLHk9ZFswXSxJPWRbNF0sQT1kWzhdLEo9ZFsxMl0seD1kWzFdLEI9ZFs1XSxEPWRbOV0sQz1kWzEzXSxFPWRbMl0sSD1kWzZdLEs9ZFsxMF0sUz1kWzE0XSxMPWRbM10sTj1kWzddLE09ZFsxMV0sZD1kWzE1XTtiWzBdPWEqeStlKngrZipFK2cqTDtiWzRdPWEqSStlKkIrZipIK2cqTjtiWzhdPWEqQStlKkQrZipLK2cqTTtiWzEyXT1hKkorZSpDK2YqUytnKmQ7YlsxXT1oKnkrayp4K20qRStxKkw7Yls1XT1oKkkraypCK20qSCtxKk47Yls5XT1oKkEraypEK20qSytxKk07YlsxM109aCpKK2sqQyttKlMrcSpkO2JbMl09bip5K2wqeCtyKkUrdCpMO2JbNl09bipJK2wqQityKkgrdCpOO2JbMTBdPW4qQStsKkQrcipLK3QqTTtiWzE0XT1uKkorbCpcbiAgICBDK3IqUyt0KmQ7YlszXT1wKnkrdyp4K3oqRStjKkw7Yls3XT1wKkkrdypCK3oqSCtjKk47YlsxMV09cCpBK3cqRCt6KksrYypNO2JbMTVdPXAqSit3KkMreipTK2MqZDtyZXR1cm4gdGhpc30sbXVsdGlwbHlTY2FsYXI6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5lbGVtZW50cztiWzBdKj1hO2JbNF0qPWE7Yls4XSo9YTtiWzEyXSo9YTtiWzFdKj1hO2JbNV0qPWE7Yls5XSo9YTtiWzEzXSo9YTtiWzJdKj1hO2JbNl0qPWE7YlsxMF0qPWE7YlsxNF0qPWE7YlszXSo9YTtiWzddKj1hO2JbMTFdKj1hO2JbMTVdKj1hO3JldHVybiB0aGlzfSxhcHBseVRvQnVmZmVyQXR0cmlidXRlOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGIpe2Zvcih2YXIgYz0wLGQ9Yi5jb3VudDtjPGQ7YysrKWEueD1iLmdldFgoYyksYS55PWIuZ2V0WShjKSxhLno9Yi5nZXRaKGMpLGEuYXBwbHlNYXRyaXg0KHRoaXMpLGIuc2V0WFlaKGMsYS54LGEueSxhLnopO3JldHVybiBifX0oKSxkZXRlcm1pbmFudDpmdW5jdGlvbigpe3ZhciBhPVxuICAgIHRoaXMuZWxlbWVudHMsYj1hWzBdLGM9YVs0XSxkPWFbOF0sZT1hWzEyXSxmPWFbMV0sZz1hWzVdLGg9YVs5XSxrPWFbMTNdLG09YVsyXSxxPWFbNl0sbj1hWzEwXSxsPWFbMTRdO3JldHVybiBhWzNdKigrZSpoKnEtZCprKnEtZSpnKm4rYyprKm4rZCpnKmwtYypoKmwpK2FbN10qKCtiKmgqbC1iKmsqbitlKmYqbi1kKmYqbCtkKmsqbS1lKmgqbSkrYVsxMV0qKCtiKmsqcS1iKmcqbC1lKmYqcStjKmYqbCtlKmcqbS1jKmsqbSkrYVsxNV0qKC1kKmcqbS1iKmgqcStiKmcqbitkKmYqcS1jKmYqbitjKmgqbSl9LHRyYW5zcG9zZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZWxlbWVudHM7dmFyIGI9YVsxXTthWzFdPWFbNF07YVs0XT1iO2I9YVsyXTthWzJdPWFbOF07YVs4XT1iO2I9YVs2XTthWzZdPWFbOV07YVs5XT1iO2I9YVszXTthWzNdPWFbMTJdO2FbMTJdPWI7Yj1hWzddO2FbN109YVsxM107YVsxM109YjtiPWFbMTFdO2FbMTFdPWFbMTRdO2FbMTRdPWI7cmV0dXJuIHRoaXN9LHNldFBvc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPVxuICAgIHRoaXMuZWxlbWVudHM7YlsxMl09YS54O2JbMTNdPWEueTtiWzE0XT1hLno7cmV0dXJuIHRoaXN9LGdldEludmVyc2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmVsZW1lbnRzLGQ9YS5lbGVtZW50czthPWRbMF07dmFyIGU9ZFsxXSxmPWRbMl0sZz1kWzNdLGg9ZFs0XSxrPWRbNV0sbT1kWzZdLHE9ZFs3XSxsPWRbOF0sdT1kWzldLHI9ZFsxMF0sdD1kWzExXSxwPWRbMTJdLHc9ZFsxM10sej1kWzE0XSxkPWRbMTVdLHk9dSp6KnEtdypyKnErdyptKnQtayp6KnQtdSptKmQraypyKmQseD1wKnIqcS1sKnoqcS1wKm0qdCtoKnoqdCtsKm0qZC1oKnIqZCxBPWwqdypxLXAqdSpxK3Aqayp0LWgqdyp0LWwqaypkK2gqdSpkLEo9cCp1Km0tbCp3Km0tcCprKnIraCp3KnIrbCprKnotaCp1KnosQj1hKnkrZSp4K2YqQStnKko7aWYoMD09PUIpe2lmKCEwPT09Yil0aHJvdyBFcnJvcihcIlRIUkVFLk1hdHJpeDQ6IC5nZXRJbnZlcnNlKCkgY2FuJ3QgaW52ZXJ0IG1hdHJpeCwgZGV0ZXJtaW5hbnQgaXMgMFwiKTtcbiAgICBjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRyaXg0OiAuZ2V0SW52ZXJzZSgpIGNhbid0IGludmVydCBtYXRyaXgsIGRldGVybWluYW50IGlzIDBcIik7cmV0dXJuIHRoaXMuaWRlbnRpdHkoKX1iPTEvQjtjWzBdPXkqYjtjWzFdPSh3KnIqZy11KnoqZy13KmYqdCtlKnoqdCt1KmYqZC1lKnIqZCkqYjtjWzJdPShrKnoqZy13Km0qZyt3KmYqcS1lKnoqcS1rKmYqZCtlKm0qZCkqYjtjWzNdPSh1Km0qZy1rKnIqZy11KmYqcStlKnIqcStrKmYqdC1lKm0qdCkqYjtjWzRdPXgqYjtjWzVdPShsKnoqZy1wKnIqZytwKmYqdC1hKnoqdC1sKmYqZCthKnIqZCkqYjtjWzZdPShwKm0qZy1oKnoqZy1wKmYqcSthKnoqcStoKmYqZC1hKm0qZCkqYjtjWzddPShoKnIqZy1sKm0qZytsKmYqcS1hKnIqcS1oKmYqdCthKm0qdCkqYjtjWzhdPUEqYjtjWzldPShwKnUqZy1sKncqZy1wKmUqdCthKncqdCtsKmUqZC1hKnUqZCkqYjtjWzEwXT0oaCp3KmctcCprKmcrcCplKnEtYSp3KnEtaCplKmQrYSprKmQpKmI7Y1sxMV09XG4gICAgKGwqaypnLWgqdSpnLWwqZSpxK2EqdSpxK2gqZSp0LWEqayp0KSpiO2NbMTJdPUoqYjtjWzEzXT0obCp3KmYtcCp1KmYrcCplKnItYSp3KnItbCplKnorYSp1KnopKmI7Y1sxNF09KHAqaypmLWgqdypmLXAqZSptK2EqdyptK2gqZSp6LWEqayp6KSpiO2NbMTVdPShoKnUqZi1sKmsqZitsKmUqbS1hKnUqbS1oKmUqcithKmsqcikqYjtyZXR1cm4gdGhpc30sc2NhbGU6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5lbGVtZW50cyxjPWEueCxkPWEueTthPWEuejtiWzBdKj1jO2JbNF0qPWQ7Yls4XSo9YTtiWzFdKj1jO2JbNV0qPWQ7Yls5XSo9YTtiWzJdKj1jO2JbNl0qPWQ7YlsxMF0qPWE7YlszXSo9YztiWzddKj1kO2JbMTFdKj1hO3JldHVybiB0aGlzfSxnZXRNYXhTY2FsZU9uQXhpczpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZWxlbWVudHM7cmV0dXJuIE1hdGguc3FydChNYXRoLm1heChhWzBdKmFbMF0rYVsxXSphWzFdK2FbMl0qYVsyXSxhWzRdKmFbNF0rYVs1XSphWzVdK2FbNl0qYVs2XSxcbiAgICBhWzhdKmFbOF0rYVs5XSphWzldK2FbMTBdKmFbMTBdKSl9LG1ha2VUcmFuc2xhdGlvbjpmdW5jdGlvbihhLGIsYyl7dGhpcy5zZXQoMSwwLDAsYSwwLDEsMCxiLDAsMCwxLGMsMCwwLDAsMSk7cmV0dXJuIHRoaXN9LG1ha2VSb3RhdGlvblg6ZnVuY3Rpb24oYSl7dmFyIGI9TWF0aC5jb3MoYSk7YT1NYXRoLnNpbihhKTt0aGlzLnNldCgxLDAsMCwwLDAsYiwtYSwwLDAsYSxiLDAsMCwwLDAsMSk7cmV0dXJuIHRoaXN9LG1ha2VSb3RhdGlvblk6ZnVuY3Rpb24oYSl7dmFyIGI9TWF0aC5jb3MoYSk7YT1NYXRoLnNpbihhKTt0aGlzLnNldChiLDAsYSwwLDAsMSwwLDAsLWEsMCxiLDAsMCwwLDAsMSk7cmV0dXJuIHRoaXN9LG1ha2VSb3RhdGlvblo6ZnVuY3Rpb24oYSl7dmFyIGI9TWF0aC5jb3MoYSk7YT1NYXRoLnNpbihhKTt0aGlzLnNldChiLC1hLDAsMCxhLGIsMCwwLDAsMCwxLDAsMCwwLDAsMSk7cmV0dXJuIHRoaXN9LG1ha2VSb3RhdGlvbkF4aXM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1cbiAgICBNYXRoLmNvcyhiKTtiPU1hdGguc2luKGIpO3ZhciBkPTEtYyxlPWEueCxmPWEueTthPWEuejt2YXIgZz1kKmUsaD1kKmY7dGhpcy5zZXQoZyplK2MsZypmLWIqYSxnKmErYipmLDAsZypmK2IqYSxoKmYrYyxoKmEtYiplLDAsZyphLWIqZixoKmErYiplLGQqYSphK2MsMCwwLDAsMCwxKTtyZXR1cm4gdGhpc30sbWFrZVNjYWxlOmZ1bmN0aW9uKGEsYixjKXt0aGlzLnNldChhLDAsMCwwLDAsYiwwLDAsMCwwLGMsMCwwLDAsMCwxKTtyZXR1cm4gdGhpc30sbWFrZVNoZWFyOmZ1bmN0aW9uKGEsYixjKXt0aGlzLnNldCgxLGIsYywwLGEsMSxjLDAsYSxiLDEsMCwwLDAsMCwxKTtyZXR1cm4gdGhpc30sY29tcG9zZTpmdW5jdGlvbihhLGIsYyl7dGhpcy5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbihiKTt0aGlzLnNjYWxlKGMpO3RoaXMuc2V0UG9zaXRpb24oYSk7cmV0dXJuIHRoaXN9LGRlY29tcG9zZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBwLGI9bmV3IE87cmV0dXJuIGZ1bmN0aW9uKGMsXG4gICAgZCxlKXt2YXIgZj10aGlzLmVsZW1lbnRzLGc9YS5zZXQoZlswXSxmWzFdLGZbMl0pLmxlbmd0aCgpLGg9YS5zZXQoZls0XSxmWzVdLGZbNl0pLmxlbmd0aCgpLGs9YS5zZXQoZls4XSxmWzldLGZbMTBdKS5sZW5ndGgoKTswPnRoaXMuZGV0ZXJtaW5hbnQoKSYmKGc9LWcpO2MueD1mWzEyXTtjLnk9ZlsxM107Yy56PWZbMTRdO2IuY29weSh0aGlzKTtjPTEvZzt2YXIgZj0xL2gsbT0xL2s7Yi5lbGVtZW50c1swXSo9YztiLmVsZW1lbnRzWzFdKj1jO2IuZWxlbWVudHNbMl0qPWM7Yi5lbGVtZW50c1s0XSo9ZjtiLmVsZW1lbnRzWzVdKj1mO2IuZWxlbWVudHNbNl0qPWY7Yi5lbGVtZW50c1s4XSo9bTtiLmVsZW1lbnRzWzldKj1tO2IuZWxlbWVudHNbMTBdKj1tO2Quc2V0RnJvbVJvdGF0aW9uTWF0cml4KGIpO2UueD1nO2UueT1oO2Uuej1rO3JldHVybiB0aGlzfX0oKSxtYWtlUGVyc3BlY3RpdmU6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3ZvaWQgMD09PWYmJmNvbnNvbGUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5tYWtlUGVyc3BlY3RpdmUoKSBoYXMgYmVlbiByZWRlZmluZWQgYW5kIGhhcyBhIG5ldyBzaWduYXR1cmUuIFBsZWFzZSBjaGVjayB0aGUgZG9jcy5cIik7XG4gICAgdmFyIGc9dGhpcy5lbGVtZW50cztnWzBdPTIqZS8oYi1hKTtnWzRdPTA7Z1s4XT0oYithKS8oYi1hKTtnWzEyXT0wO2dbMV09MDtnWzVdPTIqZS8oYy1kKTtnWzldPShjK2QpLyhjLWQpO2dbMTNdPTA7Z1syXT0wO2dbNl09MDtnWzEwXT0tKGYrZSkvKGYtZSk7Z1sxNF09LTIqZiplLyhmLWUpO2dbM109MDtnWzddPTA7Z1sxMV09LTE7Z1sxNV09MDtyZXR1cm4gdGhpc30sbWFrZU9ydGhvZ3JhcGhpYzpmdW5jdGlvbihhLGIsYyxkLGUsZil7dmFyIGc9dGhpcy5lbGVtZW50cyxoPTEvKGItYSksaz0xLyhjLWQpLG09MS8oZi1lKTtnWzBdPTIqaDtnWzRdPTA7Z1s4XT0wO2dbMTJdPS0oKGIrYSkqaCk7Z1sxXT0wO2dbNV09MiprO2dbOV09MDtnWzEzXT0tKChjK2QpKmspO2dbMl09MDtnWzZdPTA7Z1sxMF09LTIqbTtnWzE0XT0tKChmK2UpKm0pO2dbM109MDtnWzddPTA7Z1sxMV09MDtnWzE1XT0xO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5lbGVtZW50cztcbiAgICBhPWEuZWxlbWVudHM7Zm9yKHZhciBjPTA7MTY+YztjKyspaWYoYltjXSE9PWFbY10pcmV0dXJuITE7cmV0dXJuITB9LGZyb21BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPTApO2Zvcih2YXIgYz0wOzE2PmM7YysrKXRoaXMuZWxlbWVudHNbY109YVtjK2JdO3JldHVybiB0aGlzfSx0b0FycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YSYmKGE9W10pO3ZvaWQgMD09PWImJihiPTApO3ZhciBjPXRoaXMuZWxlbWVudHM7YVtiXT1jWzBdO2FbYisxXT1jWzFdO2FbYisyXT1jWzJdO2FbYiszXT1jWzNdO2FbYis0XT1jWzRdO2FbYis1XT1jWzVdO2FbYis2XT1jWzZdO2FbYis3XT1jWzddO2FbYis4XT1jWzhdO2FbYis5XT1jWzldO2FbYisxMF09Y1sxMF07YVtiKzExXT1jWzExXTthW2IrMTJdPWNbMTJdO2FbYisxM109Y1sxM107YVtiKzE0XT1jWzE0XTthW2IrMTVdPWNbMTVdO3JldHVybiBhfX0pO09iamVjdC5hc3NpZ24oaGEse3NsZXJwOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiBjLmNvcHkoYSkuc2xlcnAoYixcbiAgICBkKX0sc2xlcnBGbGF0OmZ1bmN0aW9uKGEsYixjLGQsZSxmLGcpe3ZhciBoPWNbZCswXSxrPWNbZCsxXSxtPWNbZCsyXTtjPWNbZCszXTtkPWVbZiswXTt2YXIgcT1lW2YrMV0sbD1lW2YrMl07ZT1lW2YrM107aWYoYyE9PWV8fGghPT1kfHxrIT09cXx8bSE9PWwpe2Y9MS1nO3ZhciB1PWgqZCtrKnErbSpsK2MqZSxyPTA8PXU/MTotMSxwPTEtdSp1O3A+TnVtYmVyLkVQU0lMT04mJihwPU1hdGguc3FydChwKSx1PU1hdGguYXRhbjIocCx1KnIpLGY9TWF0aC5zaW4oZip1KS9wLGc9TWF0aC5zaW4oZyp1KS9wKTtyKj1nO2g9aCpmK2QqcjtrPWsqZitxKnI7bT1tKmYrbCpyO2M9YypmK2UqcjtmPT09MS1nJiYoZz0xL01hdGguc3FydChoKmgrayprK20qbStjKmMpLGgqPWcsayo9ZyxtKj1nLGMqPWcpfWFbYl09aDthW2IrMV09azthW2IrMl09bTthW2IrM109Y319KTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhoYS5wcm90b3R5cGUse3g6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl94fSxcbiAgICBzZXQ6ZnVuY3Rpb24oYSl7dGhpcy5feD1hO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpfX0seTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3l9LHNldDpmdW5jdGlvbihhKXt0aGlzLl95PWE7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCl9fSx6OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fen0sc2V0OmZ1bmN0aW9uKGEpe3RoaXMuX3o9YTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKX19LHc6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl93fSxzZXQ6ZnVuY3Rpb24oYSl7dGhpcy5fdz1hO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpfX19KTtPYmplY3QuYXNzaWduKGhhLnByb3RvdHlwZSx7c2V0OmZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuX3g9YTt0aGlzLl95PWI7dGhpcy5fej1jO3RoaXMuX3c9ZDt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5feCx0aGlzLl95LHRoaXMuX3osXG4gICAgdGhpcy5fdyl9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5feD1hLng7dGhpcy5feT1hLnk7dGhpcy5fej1hLno7dGhpcy5fdz1hLnc7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LHNldEZyb21FdWxlcjpmdW5jdGlvbihhLGIpe2lmKCFhfHwhYS5pc0V1bGVyKXRocm93IEVycm9yKFwiVEhSRUUuUXVhdGVybmlvbjogLnNldEZyb21FdWxlcigpIG5vdyBleHBlY3RzIGFuIEV1bGVyIHJvdGF0aW9uIHJhdGhlciB0aGFuIGEgVmVjdG9yMyBhbmQgb3JkZXIuXCIpO3ZhciBjPWEuX3gsZD1hLl95LGU9YS5fejthPWEub3JkZXI7dmFyIGY9TWF0aC5jb3MsZz1NYXRoLnNpbixoPWYoYy8yKSxrPWYoZC8yKSxmPWYoZS8yKSxjPWcoYy8yKSxkPWcoZC8yKSxlPWcoZS8yKTtcIlhZWlwiPT09YT8odGhpcy5feD1jKmsqZitoKmQqZSx0aGlzLl95PWgqZCpmLWMqayplLHRoaXMuX3o9aCprKmUrYypkKmYsdGhpcy5fdz1oKmsqZi1jKmQqZSk6XCJZWFpcIj09PWE/KHRoaXMuX3g9YyprKmYrXG4gICAgaCpkKmUsdGhpcy5feT1oKmQqZi1jKmsqZSx0aGlzLl96PWgqayplLWMqZCpmLHRoaXMuX3c9aCprKmYrYypkKmUpOlwiWlhZXCI9PT1hPyh0aGlzLl94PWMqaypmLWgqZCplLHRoaXMuX3k9aCpkKmYrYyprKmUsdGhpcy5fej1oKmsqZStjKmQqZix0aGlzLl93PWgqaypmLWMqZCplKTpcIlpZWFwiPT09YT8odGhpcy5feD1jKmsqZi1oKmQqZSx0aGlzLl95PWgqZCpmK2MqayplLHRoaXMuX3o9aCprKmUtYypkKmYsdGhpcy5fdz1oKmsqZitjKmQqZSk6XCJZWlhcIj09PWE/KHRoaXMuX3g9YyprKmYraCpkKmUsdGhpcy5feT1oKmQqZitjKmsqZSx0aGlzLl96PWgqayplLWMqZCpmLHRoaXMuX3c9aCprKmYtYypkKmUpOlwiWFpZXCI9PT1hJiYodGhpcy5feD1jKmsqZi1oKmQqZSx0aGlzLl95PWgqZCpmLWMqayplLHRoaXMuX3o9aCprKmUrYypkKmYsdGhpcy5fdz1oKmsqZitjKmQqZSk7aWYoITEhPT1iKXRoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSxzZXRGcm9tQXhpc0FuZ2xlOmZ1bmN0aW9uKGEsXG4gICAgYil7Yi89Mjt2YXIgYz1NYXRoLnNpbihiKTt0aGlzLl94PWEueCpjO3RoaXMuX3k9YS55KmM7dGhpcy5fej1hLnoqYzt0aGlzLl93PU1hdGguY29zKGIpO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSxzZXRGcm9tUm90YXRpb25NYXRyaXg6ZnVuY3Rpb24oYSl7dmFyIGI9YS5lbGVtZW50cyxjPWJbMF07YT1iWzRdO3ZhciBkPWJbOF0sZT1iWzFdLGY9Yls1XSxnPWJbOV0saD1iWzJdLGs9Yls2XSxiPWJbMTBdLG09YytmK2I7MDxtPyhjPS41L01hdGguc3FydChtKzEpLHRoaXMuX3c9LjI1L2MsdGhpcy5feD0oay1nKSpjLHRoaXMuX3k9KGQtaCkqYyx0aGlzLl96PShlLWEpKmMpOmM+ZiYmYz5iPyhjPTIqTWF0aC5zcXJ0KDErYy1mLWIpLHRoaXMuX3c9KGstZykvYyx0aGlzLl94PS4yNSpjLHRoaXMuX3k9KGErZSkvYyx0aGlzLl96PShkK2gpL2MpOmY+Yj8oYz0yKk1hdGguc3FydCgxK2YtYy1iKSx0aGlzLl93PShkLWgpL2MsdGhpcy5feD0oYStlKS9jLHRoaXMuX3k9XG4gICAgLjI1KmMsdGhpcy5fej0oZytrKS9jKTooYz0yKk1hdGguc3FydCgxK2ItYy1mKSx0aGlzLl93PShlLWEpL2MsdGhpcy5feD0oZCtoKS9jLHRoaXMuX3k9KGcraykvYyx0aGlzLl96PS4yNSpjKTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sc2V0RnJvbVVuaXRWZWN0b3JzOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAsYjtyZXR1cm4gZnVuY3Rpb24oYyxkKXt2b2lkIDA9PT1hJiYoYT1uZXcgcCk7Yj1jLmRvdChkKSsxOzFFLTY+Yj8oYj0wLE1hdGguYWJzKGMueCk+TWF0aC5hYnMoYy56KT9hLnNldCgtYy55LGMueCwwKTphLnNldCgwLC1jLnosYy55KSk6YS5jcm9zc1ZlY3RvcnMoYyxkKTt0aGlzLl94PWEueDt0aGlzLl95PWEueTt0aGlzLl96PWEuejt0aGlzLl93PWI7cmV0dXJuIHRoaXMubm9ybWFsaXplKCl9fSgpLGludmVyc2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25qdWdhdGUoKS5ub3JtYWxpemUoKX0sY29uanVnYXRlOmZ1bmN0aW9uKCl7dGhpcy5feCo9XG4gICAgLTE7dGhpcy5feSo9LTE7dGhpcy5feio9LTE7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LGRvdDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5feCphLl94K3RoaXMuX3kqYS5feSt0aGlzLl96KmEuX3ordGhpcy5fdyphLl93fSxsZW5ndGhTcTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl94KnRoaXMuX3grdGhpcy5feSp0aGlzLl95K3RoaXMuX3oqdGhpcy5feit0aGlzLl93KnRoaXMuX3d9LGxlbmd0aDpmdW5jdGlvbigpe3JldHVybiBNYXRoLnNxcnQodGhpcy5feCp0aGlzLl94K3RoaXMuX3kqdGhpcy5feSt0aGlzLl96KnRoaXMuX3ordGhpcy5fdyp0aGlzLl93KX0sbm9ybWFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5sZW5ndGgoKTswPT09YT8odGhpcy5fej10aGlzLl95PXRoaXMuX3g9MCx0aGlzLl93PTEpOihhPTEvYSx0aGlzLl94Kj1hLHRoaXMuX3kqPWEsdGhpcy5feio9YSx0aGlzLl93Kj1hKTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sXG4gICAgbXVsdGlwbHk6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdm9pZCAwIT09Yj8oY29uc29sZS53YXJuKFwiVEhSRUUuUXVhdGVybmlvbjogLm11bHRpcGx5KCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAubXVsdGlwbHlRdWF0ZXJuaW9ucyggYSwgYiApIGluc3RlYWQuXCIpLHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyhhLGIpKTp0aGlzLm11bHRpcGx5UXVhdGVybmlvbnModGhpcyxhKX0scHJlbXVsdGlwbHk6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyhhLHRoaXMpfSxtdWx0aXBseVF1YXRlcm5pb25zOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS5feCxkPWEuX3ksZT1hLl96O2E9YS5fdzt2YXIgZj1iLl94LGc9Yi5feSxoPWIuX3o7Yj1iLl93O3RoaXMuX3g9YypiK2EqZitkKmgtZSpnO3RoaXMuX3k9ZCpiK2EqZytlKmYtYypoO3RoaXMuX3o9ZSpiK2EqaCtjKmctZCpmO3RoaXMuX3c9YSpiLWMqZi1kKmctZSpoO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpO1xuICAgIHJldHVybiB0aGlzfSxzbGVycDpmdW5jdGlvbihhLGIpe2lmKDA9PT1iKXJldHVybiB0aGlzO2lmKDE9PT1iKXJldHVybiB0aGlzLmNvcHkoYSk7dmFyIGM9dGhpcy5feCxkPXRoaXMuX3ksZT10aGlzLl96LGY9dGhpcy5fdyxnPWYqYS5fdytjKmEuX3grZCphLl95K2UqYS5fejswPmc/KHRoaXMuX3c9LWEuX3csdGhpcy5feD0tYS5feCx0aGlzLl95PS1hLl95LHRoaXMuX3o9LWEuX3osZz0tZyk6dGhpcy5jb3B5KGEpO2lmKDE8PWcpcmV0dXJuIHRoaXMuX3c9Zix0aGlzLl94PWMsdGhpcy5feT1kLHRoaXMuX3o9ZSx0aGlzO2E9TWF0aC5zcXJ0KDEtZypnKTtpZiguMDAxPk1hdGguYWJzKGEpKXJldHVybiB0aGlzLl93PS41KihmK3RoaXMuX3cpLHRoaXMuX3g9LjUqKGMrdGhpcy5feCksdGhpcy5feT0uNSooZCt0aGlzLl95KSx0aGlzLl96PS41KihlK3RoaXMuX3opLHRoaXM7dmFyIGg9TWF0aC5hdGFuMihhLGcpLGc9TWF0aC5zaW4oKDEtYikqaCkvYTtiPU1hdGguc2luKGIqaCkvYTtcbiAgICB0aGlzLl93PWYqZyt0aGlzLl93KmI7dGhpcy5feD1jKmcrdGhpcy5feCpiO3RoaXMuX3k9ZCpnK3RoaXMuX3kqYjt0aGlzLl96PWUqZyt0aGlzLl96KmI7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS5feD09PXRoaXMuX3gmJmEuX3k9PT10aGlzLl95JiZhLl96PT09dGhpcy5feiYmYS5fdz09PXRoaXMuX3d9LGZyb21BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPTApO3RoaXMuX3g9YVtiXTt0aGlzLl95PWFbYisxXTt0aGlzLl96PWFbYisyXTt0aGlzLl93PWFbYiszXTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sdG9BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWEmJihhPVtdKTt2b2lkIDA9PT1iJiYoYj0wKTthW2JdPXRoaXMuX3g7YVtiKzFdPXRoaXMuX3k7YVtiKzJdPXRoaXMuX3o7YVtiKzNdPXRoaXMuX3c7cmV0dXJuIGF9LG9uQ2hhbmdlOmZ1bmN0aW9uKGEpe3RoaXMub25DaGFuZ2VDYWxsYmFjaz1cbiAgICBhO3JldHVybiB0aGlzfSxvbkNoYW5nZUNhbGxiYWNrOmZ1bmN0aW9uKCl7fX0pO09iamVjdC5hc3NpZ24ocC5wcm90b3R5cGUse2lzVmVjdG9yMzohMCxzZXQ6ZnVuY3Rpb24oYSxiLGMpe3RoaXMueD1hO3RoaXMueT1iO3RoaXMuej1jO3JldHVybiB0aGlzfSxzZXRTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy56PXRoaXMueT10aGlzLng9YTtyZXR1cm4gdGhpc30sc2V0WDpmdW5jdGlvbihhKXt0aGlzLng9YTtyZXR1cm4gdGhpc30sc2V0WTpmdW5jdGlvbihhKXt0aGlzLnk9YTtyZXR1cm4gdGhpc30sc2V0WjpmdW5jdGlvbihhKXt0aGlzLno9YTtyZXR1cm4gdGhpc30sc2V0Q29tcG9uZW50OmZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMDp0aGlzLng9YjticmVhaztjYXNlIDE6dGhpcy55PWI7YnJlYWs7Y2FzZSAyOnRoaXMuej1iO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJpbmRleCBpcyBvdXQgb2YgcmFuZ2U6IFwiK2EpO31yZXR1cm4gdGhpc30sZ2V0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe3N3aXRjaChhKXtjYXNlIDA6cmV0dXJuIHRoaXMueDtcbiAgICBjYXNlIDE6cmV0dXJuIHRoaXMueTtjYXNlIDI6cmV0dXJuIHRoaXMuejtkZWZhdWx0OnRocm93IEVycm9yKFwiaW5kZXggaXMgb3V0IG9mIHJhbmdlOiBcIithKTt9fSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLngsdGhpcy55LHRoaXMueil9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy54PWEueDt0aGlzLnk9YS55O3RoaXMuej1hLno7cmV0dXJuIHRoaXN9LGFkZDpmdW5jdGlvbihhLGIpe2lmKHZvaWQgMCE9PWIpcmV0dXJuIGNvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjM6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC5cIiksdGhpcy5hZGRWZWN0b3JzKGEsYik7dGhpcy54Kz1hLng7dGhpcy55Kz1hLnk7dGhpcy56Kz1hLno7cmV0dXJuIHRoaXN9LGFkZFNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngrPWE7dGhpcy55Kz1hO3RoaXMueis9YTtyZXR1cm4gdGhpc30sXG4gICAgYWRkVmVjdG9yczpmdW5jdGlvbihhLGIpe3RoaXMueD1hLngrYi54O3RoaXMueT1hLnkrYi55O3RoaXMuej1hLnorYi56O3JldHVybiB0aGlzfSxhZGRTY2FsZWRWZWN0b3I6ZnVuY3Rpb24oYSxiKXt0aGlzLngrPWEueCpiO3RoaXMueSs9YS55KmI7dGhpcy56Kz1hLnoqYjtyZXR1cm4gdGhpc30sc3ViOmZ1bmN0aW9uKGEsYil7aWYodm9pZCAwIT09YilyZXR1cm4gY29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yMzogLnN1YigpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLnN1YlZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLlwiKSx0aGlzLnN1YlZlY3RvcnMoYSxiKTt0aGlzLngtPWEueDt0aGlzLnktPWEueTt0aGlzLnotPWEuejtyZXR1cm4gdGhpc30sc3ViU2NhbGFyOmZ1bmN0aW9uKGEpe3RoaXMueC09YTt0aGlzLnktPWE7dGhpcy56LT1hO3JldHVybiB0aGlzfSxzdWJWZWN0b3JzOmZ1bmN0aW9uKGEsYil7dGhpcy54PWEueC1iLng7dGhpcy55PWEueS1iLnk7dGhpcy56PVxuICAgIGEuei1iLno7cmV0dXJuIHRoaXN9LG11bHRpcGx5OmZ1bmN0aW9uKGEsYil7aWYodm9pZCAwIT09YilyZXR1cm4gY29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yMzogLm11bHRpcGx5KCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAubXVsdGlwbHlWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC5cIiksdGhpcy5tdWx0aXBseVZlY3RvcnMoYSxiKTt0aGlzLngqPWEueDt0aGlzLnkqPWEueTt0aGlzLnoqPWEuejtyZXR1cm4gdGhpc30sbXVsdGlwbHlTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy54Kj1hO3RoaXMueSo9YTt0aGlzLnoqPWE7cmV0dXJuIHRoaXN9LG11bHRpcGx5VmVjdG9yczpmdW5jdGlvbihhLGIpe3RoaXMueD1hLngqYi54O3RoaXMueT1hLnkqYi55O3RoaXMuej1hLnoqYi56O3JldHVybiB0aGlzfSxhcHBseUV1bGVyOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IGhhO3JldHVybiBmdW5jdGlvbihiKXtiJiZiLmlzRXVsZXJ8fGNvbnNvbGUuZXJyb3IoXCJUSFJFRS5WZWN0b3IzOiAuYXBwbHlFdWxlcigpIG5vdyBleHBlY3RzIGFuIEV1bGVyIHJvdGF0aW9uIHJhdGhlciB0aGFuIGEgVmVjdG9yMyBhbmQgb3JkZXIuXCIpO1xuICAgIHJldHVybiB0aGlzLmFwcGx5UXVhdGVybmlvbihhLnNldEZyb21FdWxlcihiKSl9fSgpLGFwcGx5QXhpc0FuZ2xlOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IGhhO3JldHVybiBmdW5jdGlvbihiLGMpe3JldHVybiB0aGlzLmFwcGx5UXVhdGVybmlvbihhLnNldEZyb21BeGlzQW5nbGUoYixjKSl9fSgpLGFwcGx5TWF0cml4MzpmdW5jdGlvbihhKXt2YXIgYj10aGlzLngsYz10aGlzLnksZD10aGlzLno7YT1hLmVsZW1lbnRzO3RoaXMueD1hWzBdKmIrYVszXSpjK2FbNl0qZDt0aGlzLnk9YVsxXSpiK2FbNF0qYythWzddKmQ7dGhpcy56PWFbMl0qYithWzVdKmMrYVs4XSpkO3JldHVybiB0aGlzfSxhcHBseU1hdHJpeDQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy54LGM9dGhpcy55LGQ9dGhpcy56O2E9YS5lbGVtZW50czt2YXIgZT0xLyhhWzNdKmIrYVs3XSpjK2FbMTFdKmQrYVsxNV0pO3RoaXMueD0oYVswXSpiK2FbNF0qYythWzhdKmQrYVsxMl0pKmU7dGhpcy55PShhWzFdKmIrYVs1XSpjK1xuICAgIGFbOV0qZCthWzEzXSkqZTt0aGlzLno9KGFbMl0qYithWzZdKmMrYVsxMF0qZCthWzE0XSkqZTtyZXR1cm4gdGhpc30sYXBwbHlRdWF0ZXJuaW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMueCxjPXRoaXMueSxkPXRoaXMueixlPWEueCxmPWEueSxnPWEuejthPWEudzt2YXIgaD1hKmIrZipkLWcqYyxrPWEqYytnKmItZSpkLG09YSpkK2UqYy1mKmIsYj0tZSpiLWYqYy1nKmQ7dGhpcy54PWgqYStiKi1lK2sqLWctbSotZjt0aGlzLnk9ayphK2IqLWYrbSotZS1oKi1nO3RoaXMuej1tKmErYiotZytoKi1mLWsqLWU7cmV0dXJuIHRoaXN9LHByb2plY3Q6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgTztyZXR1cm4gZnVuY3Rpb24oYil7YS5tdWx0aXBseU1hdHJpY2VzKGIucHJvamVjdGlvbk1hdHJpeCxhLmdldEludmVyc2UoYi5tYXRyaXhXb3JsZCkpO3JldHVybiB0aGlzLmFwcGx5TWF0cml4NChhKX19KCksdW5wcm9qZWN0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IE87cmV0dXJuIGZ1bmN0aW9uKGIpe2EubXVsdGlwbHlNYXRyaWNlcyhiLm1hdHJpeFdvcmxkLFxuICAgIGEuZ2V0SW52ZXJzZShiLnByb2plY3Rpb25NYXRyaXgpKTtyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDQoYSl9fSgpLHRyYW5zZm9ybURpcmVjdGlvbjpmdW5jdGlvbihhKXt2YXIgYj10aGlzLngsYz10aGlzLnksZD10aGlzLno7YT1hLmVsZW1lbnRzO3RoaXMueD1hWzBdKmIrYVs0XSpjK2FbOF0qZDt0aGlzLnk9YVsxXSpiK2FbNV0qYythWzldKmQ7dGhpcy56PWFbMl0qYithWzZdKmMrYVsxMF0qZDtyZXR1cm4gdGhpcy5ub3JtYWxpemUoKX0sZGl2aWRlOmZ1bmN0aW9uKGEpe3RoaXMueC89YS54O3RoaXMueS89YS55O3RoaXMuei89YS56O3JldHVybiB0aGlzfSxkaXZpZGVTY2FsYXI6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoMS9hKX0sbWluOmZ1bmN0aW9uKGEpe3RoaXMueD1NYXRoLm1pbih0aGlzLngsYS54KTt0aGlzLnk9TWF0aC5taW4odGhpcy55LGEueSk7dGhpcy56PU1hdGgubWluKHRoaXMueixhLnopO3JldHVybiB0aGlzfSxtYXg6ZnVuY3Rpb24oYSl7dGhpcy54PVxuICAgIE1hdGgubWF4KHRoaXMueCxhLngpO3RoaXMueT1NYXRoLm1heCh0aGlzLnksYS55KTt0aGlzLno9TWF0aC5tYXgodGhpcy56LGEueik7cmV0dXJuIHRoaXN9LGNsYW1wOmZ1bmN0aW9uKGEsYil7dGhpcy54PU1hdGgubWF4KGEueCxNYXRoLm1pbihiLngsdGhpcy54KSk7dGhpcy55PU1hdGgubWF4KGEueSxNYXRoLm1pbihiLnksdGhpcy55KSk7dGhpcy56PU1hdGgubWF4KGEueixNYXRoLm1pbihiLnosdGhpcy56KSk7cmV0dXJuIHRoaXN9LGNsYW1wU2NhbGFyOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAsYj1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oYyxkKXthLnNldChjLGMsYyk7Yi5zZXQoZCxkLGQpO3JldHVybiB0aGlzLmNsYW1wKGEsYil9fSgpLGNsYW1wTGVuZ3RoOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5sZW5ndGgoKTtyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoY3x8MSkubXVsdGlwbHlTY2FsYXIoTWF0aC5tYXgoYSxNYXRoLm1pbihiLGMpKSl9LGZsb29yOmZ1bmN0aW9uKCl7dGhpcy54PVxuICAgIE1hdGguZmxvb3IodGhpcy54KTt0aGlzLnk9TWF0aC5mbG9vcih0aGlzLnkpO3RoaXMuej1NYXRoLmZsb29yKHRoaXMueik7cmV0dXJuIHRoaXN9LGNlaWw6ZnVuY3Rpb24oKXt0aGlzLng9TWF0aC5jZWlsKHRoaXMueCk7dGhpcy55PU1hdGguY2VpbCh0aGlzLnkpO3RoaXMuej1NYXRoLmNlaWwodGhpcy56KTtyZXR1cm4gdGhpc30scm91bmQ6ZnVuY3Rpb24oKXt0aGlzLng9TWF0aC5yb3VuZCh0aGlzLngpO3RoaXMueT1NYXRoLnJvdW5kKHRoaXMueSk7dGhpcy56PU1hdGgucm91bmQodGhpcy56KTtyZXR1cm4gdGhpc30scm91bmRUb1plcm86ZnVuY3Rpb24oKXt0aGlzLng9MD50aGlzLng/TWF0aC5jZWlsKHRoaXMueCk6TWF0aC5mbG9vcih0aGlzLngpO3RoaXMueT0wPnRoaXMueT9NYXRoLmNlaWwodGhpcy55KTpNYXRoLmZsb29yKHRoaXMueSk7dGhpcy56PTA+dGhpcy56P01hdGguY2VpbCh0aGlzLnopOk1hdGguZmxvb3IodGhpcy56KTtyZXR1cm4gdGhpc30sbmVnYXRlOmZ1bmN0aW9uKCl7dGhpcy54PVxuICAgIC10aGlzLng7dGhpcy55PS10aGlzLnk7dGhpcy56PS10aGlzLno7cmV0dXJuIHRoaXN9LGRvdDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy54KmEueCt0aGlzLnkqYS55K3RoaXMueiphLnp9LGxlbmd0aFNxOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMueCp0aGlzLngrdGhpcy55KnRoaXMueSt0aGlzLnoqdGhpcy56fSxsZW5ndGg6ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCp0aGlzLngrdGhpcy55KnRoaXMueSt0aGlzLnoqdGhpcy56KX0sbWFuaGF0dGFuTGVuZ3RoOmZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguYWJzKHRoaXMueCkrTWF0aC5hYnModGhpcy55KStNYXRoLmFicyh0aGlzLnopfSxub3JtYWxpemU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIodGhpcy5sZW5ndGgoKXx8MSl9LHNldExlbmd0aDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhcihhKX0sbGVycDpmdW5jdGlvbihhLGIpe3RoaXMueCs9KGEueC1cbiAgICB0aGlzLngpKmI7dGhpcy55Kz0oYS55LXRoaXMueSkqYjt0aGlzLnorPShhLnotdGhpcy56KSpiO3JldHVybiB0aGlzfSxsZXJwVmVjdG9yczpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHRoaXMuc3ViVmVjdG9ycyhiLGEpLm11bHRpcGx5U2NhbGFyKGMpLmFkZChhKX0sY3Jvc3M6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdm9pZCAwIT09Yj8oY29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yMzogLmNyb3NzKCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAuY3Jvc3NWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC5cIiksdGhpcy5jcm9zc1ZlY3RvcnMoYSxiKSk6dGhpcy5jcm9zc1ZlY3RvcnModGhpcyxhKX0sY3Jvc3NWZWN0b3JzOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS54LGQ9YS55O2E9YS56O3ZhciBlPWIueCxmPWIueTtiPWIuejt0aGlzLng9ZCpiLWEqZjt0aGlzLnk9YSplLWMqYjt0aGlzLno9YypmLWQqZTtyZXR1cm4gdGhpc30scHJvamVjdE9uVmVjdG9yOmZ1bmN0aW9uKGEpe3ZhciBiPVxuICAgIGEuZG90KHRoaXMpL2EubGVuZ3RoU3EoKTtyZXR1cm4gdGhpcy5jb3B5KGEpLm11bHRpcGx5U2NhbGFyKGIpfSxwcm9qZWN0T25QbGFuZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBwO3JldHVybiBmdW5jdGlvbihiKXthLmNvcHkodGhpcykucHJvamVjdE9uVmVjdG9yKGIpO3JldHVybiB0aGlzLnN1YihhKX19KCkscmVmbGVjdDpmdW5jdGlvbigpe3ZhciBhPW5ldyBwO3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gdGhpcy5zdWIoYS5jb3B5KGIpLm11bHRpcGx5U2NhbGFyKDIqdGhpcy5kb3QoYikpKX19KCksYW5nbGVUbzpmdW5jdGlvbihhKXthPXRoaXMuZG90KGEpL01hdGguc3FydCh0aGlzLmxlbmd0aFNxKCkqYS5sZW5ndGhTcSgpKTtyZXR1cm4gTWF0aC5hY29zKFEuY2xhbXAoYSwtMSwxKSl9LGRpc3RhbmNlVG86ZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGguc3FydCh0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKGEpKX0sZGlzdGFuY2VUb1NxdWFyZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy54LVxuICAgIGEueCxjPXRoaXMueS1hLnk7YT10aGlzLnotYS56O3JldHVybiBiKmIrYypjK2EqYX0sbWFuaGF0dGFuRGlzdGFuY2VUbzpmdW5jdGlvbihhKXtyZXR1cm4gTWF0aC5hYnModGhpcy54LWEueCkrTWF0aC5hYnModGhpcy55LWEueSkrTWF0aC5hYnModGhpcy56LWEueil9LHNldEZyb21TcGhlcmljYWw6ZnVuY3Rpb24oYSl7dmFyIGI9TWF0aC5zaW4oYS5waGkpKmEucmFkaXVzO3RoaXMueD1iKk1hdGguc2luKGEudGhldGEpO3RoaXMueT1NYXRoLmNvcyhhLnBoaSkqYS5yYWRpdXM7dGhpcy56PWIqTWF0aC5jb3MoYS50aGV0YSk7cmV0dXJuIHRoaXN9LHNldEZyb21DeWxpbmRyaWNhbDpmdW5jdGlvbihhKXt0aGlzLng9YS5yYWRpdXMqTWF0aC5zaW4oYS50aGV0YSk7dGhpcy55PWEueTt0aGlzLno9YS5yYWRpdXMqTWF0aC5jb3MoYS50aGV0YSk7cmV0dXJuIHRoaXN9LHNldEZyb21NYXRyaXhQb3NpdGlvbjpmdW5jdGlvbihhKXthPWEuZWxlbWVudHM7dGhpcy54PWFbMTJdO3RoaXMueT1cbiAgICBhWzEzXTt0aGlzLno9YVsxNF07cmV0dXJuIHRoaXN9LHNldEZyb21NYXRyaXhTY2FsZTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLnNldEZyb21NYXRyaXhDb2x1bW4oYSwwKS5sZW5ndGgoKSxjPXRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbihhLDEpLmxlbmd0aCgpO2E9dGhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKGEsMikubGVuZ3RoKCk7dGhpcy54PWI7dGhpcy55PWM7dGhpcy56PWE7cmV0dXJuIHRoaXN9LHNldEZyb21NYXRyaXhDb2x1bW46ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5mcm9tQXJyYXkoYS5lbGVtZW50cyw0KmIpfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEueD09PXRoaXMueCYmYS55PT09dGhpcy55JiZhLno9PT10aGlzLnp9LGZyb21BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPTApO3RoaXMueD1hW2JdO3RoaXMueT1hW2IrMV07dGhpcy56PWFbYisyXTtyZXR1cm4gdGhpc30sdG9BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWEmJihhPVxuICAgIFtdKTt2b2lkIDA9PT1iJiYoYj0wKTthW2JdPXRoaXMueDthW2IrMV09dGhpcy55O2FbYisyXT10aGlzLno7cmV0dXJuIGF9LGZyb21CdWZmZXJBdHRyaWJ1dGU6ZnVuY3Rpb24oYSxiLGMpe3ZvaWQgMCE9PWMmJmNvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjM6IG9mZnNldCBoYXMgYmVlbiByZW1vdmVkIGZyb20gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS5cIik7dGhpcy54PWEuZ2V0WChiKTt0aGlzLnk9YS5nZXRZKGIpO3RoaXMuej1hLmdldFooYik7cmV0dXJuIHRoaXN9fSk7T2JqZWN0LmFzc2lnbihtYS5wcm90b3R5cGUse2lzTWF0cml4MzohMCxzZXQ6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBtPXRoaXMuZWxlbWVudHM7bVswXT1hO21bMV09ZDttWzJdPWc7bVszXT1iO21bNF09ZTttWzVdPWg7bVs2XT1jO21bN109ZjttWzhdPWs7cmV0dXJuIHRoaXN9LGlkZW50aXR5OmZ1bmN0aW9uKCl7dGhpcy5zZXQoMSwwLDAsMCwxLDAsMCwwLDEpO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuZnJvbUFycmF5KHRoaXMuZWxlbWVudHMpfSxcbiAgICBjb3B5OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZWxlbWVudHM7YT1hLmVsZW1lbnRzO2JbMF09YVswXTtiWzFdPWFbMV07YlsyXT1hWzJdO2JbM109YVszXTtiWzRdPWFbNF07Yls1XT1hWzVdO2JbNl09YVs2XTtiWzddPWFbN107Yls4XT1hWzhdO3JldHVybiB0aGlzfSxzZXRGcm9tTWF0cml4NDpmdW5jdGlvbihhKXthPWEuZWxlbWVudHM7dGhpcy5zZXQoYVswXSxhWzRdLGFbOF0sYVsxXSxhWzVdLGFbOV0sYVsyXSxhWzZdLGFbMTBdKTtyZXR1cm4gdGhpc30sYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBwO3JldHVybiBmdW5jdGlvbihiKXtmb3IodmFyIGM9MCxkPWIuY291bnQ7YzxkO2MrKylhLng9Yi5nZXRYKGMpLGEueT1iLmdldFkoYyksYS56PWIuZ2V0WihjKSxhLmFwcGx5TWF0cml4Myh0aGlzKSxiLnNldFhZWihjLGEueCxhLnksYS56KTtyZXR1cm4gYn19KCksbXVsdGlwbHk6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyh0aGlzLFxuICAgIGEpfSxwcmVtdWx0aXBseTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKGEsdGhpcyl9LG11bHRpcGx5TWF0cmljZXM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLmVsZW1lbnRzLGQ9Yi5lbGVtZW50cztiPXRoaXMuZWxlbWVudHM7YT1jWzBdO3ZhciBlPWNbM10sZj1jWzZdLGc9Y1sxXSxoPWNbNF0saz1jWzddLG09Y1syXSxxPWNbNV0sYz1jWzhdLGw9ZFswXSxwPWRbM10scj1kWzZdLHQ9ZFsxXSx2PWRbNF0sdz1kWzddLHo9ZFsyXSx5PWRbNV0sZD1kWzhdO2JbMF09YSpsK2UqdCtmKno7YlszXT1hKnArZSp2K2YqeTtiWzZdPWEqcitlKncrZipkO2JbMV09ZypsK2gqdCtrKno7Yls0XT1nKnAraCp2K2sqeTtiWzddPWcqcitoKncraypkO2JbMl09bSpsK3EqdCtjKno7Yls1XT1tKnArcSp2K2MqeTtiWzhdPW0qcitxKncrYypkO3JldHVybiB0aGlzfSxtdWx0aXBseVNjYWxhcjpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmVsZW1lbnRzO2JbMF0qPWE7YlszXSo9YTtcbiAgICBiWzZdKj1hO2JbMV0qPWE7Yls0XSo9YTtiWzddKj1hO2JbMl0qPWE7Yls1XSo9YTtiWzhdKj1hO3JldHVybiB0aGlzfSxkZXRlcm1pbmFudDpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZWxlbWVudHMsYj1hWzBdLGM9YVsxXSxkPWFbMl0sZT1hWzNdLGY9YVs0XSxnPWFbNV0saD1hWzZdLGs9YVs3XSxhPWFbOF07cmV0dXJuIGIqZiphLWIqZyprLWMqZSphK2MqZypoK2QqZSprLWQqZipofSxnZXRJbnZlcnNlOmZ1bmN0aW9uKGEsYil7YSYmYS5pc01hdHJpeDQmJmNvbnNvbGUuZXJyb3IoXCJUSFJFRS5NYXRyaXgzOiAuZ2V0SW52ZXJzZSgpIG5vIGxvbmdlciB0YWtlcyBhIE1hdHJpeDQgYXJndW1lbnQuXCIpO3ZhciBjPWEuZWxlbWVudHM7YT10aGlzLmVsZW1lbnRzO3ZhciBkPWNbMF0sZT1jWzFdLGY9Y1syXSxnPWNbM10saD1jWzRdLGs9Y1s1XSxtPWNbNl0scT1jWzddLGM9Y1s4XSxsPWMqaC1rKnEscD1rKm0tYypnLHI9cSpnLWgqbSx0PWQqbCtlKnArZipyO2lmKDA9PT10KXtpZighMD09PVxuICAgIGIpdGhyb3cgRXJyb3IoXCJUSFJFRS5NYXRyaXgzOiAuZ2V0SW52ZXJzZSgpIGNhbid0IGludmVydCBtYXRyaXgsIGRldGVybWluYW50IGlzIDBcIik7Y29uc29sZS53YXJuKFwiVEhSRUUuTWF0cml4MzogLmdldEludmVyc2UoKSBjYW4ndCBpbnZlcnQgbWF0cml4LCBkZXRlcm1pbmFudCBpcyAwXCIpO3JldHVybiB0aGlzLmlkZW50aXR5KCl9Yj0xL3Q7YVswXT1sKmI7YVsxXT0oZipxLWMqZSkqYjthWzJdPShrKmUtZipoKSpiO2FbM109cCpiO2FbNF09KGMqZC1mKm0pKmI7YVs1XT0oZipnLWsqZCkqYjthWzZdPXIqYjthWzddPShlKm0tcSpkKSpiO2FbOF09KGgqZC1lKmcpKmI7cmV0dXJuIHRoaXN9LHRyYW5zcG9zZTpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZWxlbWVudHM7dmFyIGI9YVsxXTthWzFdPWFbM107YVszXT1iO2I9YVsyXTthWzJdPWFbNl07YVs2XT1iO2I9YVs1XTthWzVdPWFbN107YVs3XT1iO3JldHVybiB0aGlzfSxnZXROb3JtYWxNYXRyaXg6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeDQoYSkuZ2V0SW52ZXJzZSh0aGlzKS50cmFuc3Bvc2UoKX0sXG4gICAgdHJhbnNwb3NlSW50b0FycmF5OmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuZWxlbWVudHM7YVswXT1iWzBdO2FbMV09YlszXTthWzJdPWJbNl07YVszXT1iWzFdO2FbNF09Yls0XTthWzVdPWJbN107YVs2XT1iWzJdO2FbN109Yls1XTthWzhdPWJbOF07cmV0dXJuIHRoaXN9LHNldFV2VHJhbnNmb3JtOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGcpe3ZhciBoPU1hdGguY29zKGUpO2U9TWF0aC5zaW4oZSk7dGhpcy5zZXQoYypoLGMqZSwtYyooaCpmK2UqZykrZithLC1kKmUsZCpoLC1kKigtZSpmK2gqZykrZytiLDAsMCwxKX0sc2NhbGU6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmVsZW1lbnRzO2NbMF0qPWE7Y1szXSo9YTtjWzZdKj1hO2NbMV0qPWI7Y1s0XSo9YjtjWzddKj1iO3JldHVybiB0aGlzfSxyb3RhdGU6ZnVuY3Rpb24oYSl7dmFyIGI9TWF0aC5jb3MoYSk7YT1NYXRoLnNpbihhKTt2YXIgYz10aGlzLmVsZW1lbnRzLGQ9Y1swXSxlPWNbM10sZj1jWzZdLGc9Y1sxXSxoPWNbNF0sXG4gICAgaz1jWzddO2NbMF09YipkK2EqZztjWzNdPWIqZSthKmg7Y1s2XT1iKmYrYSprO2NbMV09LWEqZCtiKmc7Y1s0XT0tYSplK2IqaDtjWzddPS1hKmYrYiprO3JldHVybiB0aGlzfSx0cmFuc2xhdGU6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmVsZW1lbnRzO2NbMF0rPWEqY1syXTtjWzNdKz1hKmNbNV07Y1s2XSs9YSpjWzhdO2NbMV0rPWIqY1syXTtjWzRdKz1iKmNbNV07Y1s3XSs9YipjWzhdO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5lbGVtZW50czthPWEuZWxlbWVudHM7Zm9yKHZhciBjPTA7OT5jO2MrKylpZihiW2NdIT09YVtjXSlyZXR1cm4hMTtyZXR1cm4hMH0sZnJvbUFycmF5OmZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9MCk7Zm9yKHZhciBjPTA7OT5jO2MrKyl0aGlzLmVsZW1lbnRzW2NdPWFbYytiXTtyZXR1cm4gdGhpc30sdG9BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWEmJihhPVtdKTt2b2lkIDA9PT1iJiYoYj0wKTt2YXIgYz1cbiAgICB0aGlzLmVsZW1lbnRzO2FbYl09Y1swXTthW2IrMV09Y1sxXTthW2IrMl09Y1syXTthW2IrM109Y1szXTthW2IrNF09Y1s0XTthW2IrNV09Y1s1XTthW2IrNl09Y1s2XTthW2IrN109Y1s3XTthW2IrOF09Y1s4XTtyZXR1cm4gYX19KTt2YXIgQWY9MDtVLkRFRkFVTFRfSU1BR0U9dm9pZCAwO1UuREVGQVVMVF9NQVBQSU5HPTMwMDtVLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoemEucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6VSxpc1RleHR1cmU6ITAsY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyl9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5uYW1lPWEubmFtZTt0aGlzLmltYWdlPWEuaW1hZ2U7dGhpcy5taXBtYXBzPWEubWlwbWFwcy5zbGljZSgwKTt0aGlzLm1hcHBpbmc9YS5tYXBwaW5nO3RoaXMud3JhcFM9YS53cmFwUzt0aGlzLndyYXBUPWEud3JhcFQ7dGhpcy5tYWdGaWx0ZXI9YS5tYWdGaWx0ZXI7dGhpcy5taW5GaWx0ZXI9XG4gICAgYS5taW5GaWx0ZXI7dGhpcy5hbmlzb3Ryb3B5PWEuYW5pc290cm9weTt0aGlzLmZvcm1hdD1hLmZvcm1hdDt0aGlzLnR5cGU9YS50eXBlO3RoaXMub2Zmc2V0LmNvcHkoYS5vZmZzZXQpO3RoaXMucmVwZWF0LmNvcHkoYS5yZXBlYXQpO3RoaXMuY2VudGVyLmNvcHkoYS5jZW50ZXIpO3RoaXMucm90YXRpb249YS5yb3RhdGlvbjt0aGlzLm1hdHJpeEF1dG9VcGRhdGU9YS5tYXRyaXhBdXRvVXBkYXRlO3RoaXMubWF0cml4LmNvcHkoYS5tYXRyaXgpO3RoaXMuZ2VuZXJhdGVNaXBtYXBzPWEuZ2VuZXJhdGVNaXBtYXBzO3RoaXMucHJlbXVsdGlwbHlBbHBoYT1hLnByZW11bHRpcGx5QWxwaGE7dGhpcy5mbGlwWT1hLmZsaXBZO3RoaXMudW5wYWNrQWxpZ25tZW50PWEudW5wYWNrQWxpZ25tZW50O3RoaXMuZW5jb2Rpbmc9YS5lbmNvZGluZztyZXR1cm4gdGhpc30sdG9KU09OOmZ1bmN0aW9uKGEpe3ZhciBiPXZvaWQgMD09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYTtpZighYiYmdm9pZCAwIT09XG4gICAgYS50ZXh0dXJlc1t0aGlzLnV1aWRdKXJldHVybiBhLnRleHR1cmVzW3RoaXMudXVpZF07dmFyIGM9e21ldGFkYXRhOnt2ZXJzaW9uOjQuNSx0eXBlOlwiVGV4dHVyZVwiLGdlbmVyYXRvcjpcIlRleHR1cmUudG9KU09OXCJ9LHV1aWQ6dGhpcy51dWlkLG5hbWU6dGhpcy5uYW1lLG1hcHBpbmc6dGhpcy5tYXBwaW5nLHJlcGVhdDpbdGhpcy5yZXBlYXQueCx0aGlzLnJlcGVhdC55XSxvZmZzZXQ6W3RoaXMub2Zmc2V0LngsdGhpcy5vZmZzZXQueV0sY2VudGVyOlt0aGlzLmNlbnRlci54LHRoaXMuY2VudGVyLnldLHJvdGF0aW9uOnRoaXMucm90YXRpb24sd3JhcDpbdGhpcy53cmFwUyx0aGlzLndyYXBUXSxtaW5GaWx0ZXI6dGhpcy5taW5GaWx0ZXIsbWFnRmlsdGVyOnRoaXMubWFnRmlsdGVyLGFuaXNvdHJvcHk6dGhpcy5hbmlzb3Ryb3B5LGZsaXBZOnRoaXMuZmxpcFl9O2lmKHZvaWQgMCE9PXRoaXMuaW1hZ2Upe3ZhciBkPXRoaXMuaW1hZ2U7dm9pZCAwPT09ZC51dWlkJiYoZC51dWlkPVEuZ2VuZXJhdGVVVUlEKCkpO1xuICAgIGlmKCFiJiZ2b2lkIDA9PT1hLmltYWdlc1tkLnV1aWRdKXt2YXIgZT1hLmltYWdlcyxmPWQudXVpZCxnPWQudXVpZDtpZihkIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpdmFyIGg9ZDtlbHNle2g9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLFwiY2FudmFzXCIpO2gud2lkdGg9ZC53aWR0aDtoLmhlaWdodD1kLmhlaWdodDt2YXIgaz1oLmdldENvbnRleHQoXCIyZFwiKTtkIGluc3RhbmNlb2YgSW1hZ2VEYXRhP2sucHV0SW1hZ2VEYXRhKGQsMCwwKTprLmRyYXdJbWFnZShkLDAsMCxkLndpZHRoLGQuaGVpZ2h0KX1oPTIwNDg8aC53aWR0aHx8MjA0ODxoLmhlaWdodD9oLnRvRGF0YVVSTChcImltYWdlL2pwZWdcIiwuNik6aC50b0RhdGFVUkwoXCJpbWFnZS9wbmdcIik7ZVtmXT17dXVpZDpnLHVybDpofX1jLmltYWdlPWQudXVpZH1ifHwoYS50ZXh0dXJlc1t0aGlzLnV1aWRdPWMpO3JldHVybiBjfSxkaXNwb3NlOmZ1bmN0aW9uKCl7dGhpcy5kaXNwYXRjaEV2ZW50KHt0eXBlOlwiZGlzcG9zZVwifSl9LFxuICAgIHRyYW5zZm9ybVV2OmZ1bmN0aW9uKGEpe2lmKDMwMD09PXRoaXMubWFwcGluZyl7YS5hcHBseU1hdHJpeDModGhpcy5tYXRyaXgpO2lmKDA+YS54fHwxPGEueClzd2l0Y2godGhpcy53cmFwUyl7Y2FzZSAxRTM6YS54LT1NYXRoLmZsb29yKGEueCk7YnJlYWs7Y2FzZSAxMDAxOmEueD0wPmEueD8wOjE7YnJlYWs7Y2FzZSAxMDAyOmEueD0xPT09TWF0aC5hYnMoTWF0aC5mbG9vcihhLngpJTIpP01hdGguY2VpbChhLngpLWEueDphLngtTWF0aC5mbG9vcihhLngpfWlmKDA+YS55fHwxPGEueSlzd2l0Y2godGhpcy53cmFwVCl7Y2FzZSAxRTM6YS55LT1NYXRoLmZsb29yKGEueSk7YnJlYWs7Y2FzZSAxMDAxOmEueT0wPmEueT8wOjE7YnJlYWs7Y2FzZSAxMDAyOmEueT0xPT09TWF0aC5hYnMoTWF0aC5mbG9vcihhLnkpJTIpP01hdGguY2VpbChhLnkpLWEueTphLnktTWF0aC5mbG9vcihhLnkpfXRoaXMuZmxpcFkmJihhLnk9MS1hLnkpfX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoVS5wcm90b3R5cGUsXG4gICAgXCJuZWVkc1VwZGF0ZVwiLHtzZXQ6ZnVuY3Rpb24oYSl7ITA9PT1hJiZ0aGlzLnZlcnNpb24rK319KTtPYmplY3QuYXNzaWduKGFhLnByb3RvdHlwZSx7aXNWZWN0b3I0OiEwLHNldDpmdW5jdGlvbihhLGIsYyxkKXt0aGlzLng9YTt0aGlzLnk9Yjt0aGlzLno9Yzt0aGlzLnc9ZDtyZXR1cm4gdGhpc30sc2V0U2NhbGFyOmZ1bmN0aW9uKGEpe3RoaXMudz10aGlzLno9dGhpcy55PXRoaXMueD1hO3JldHVybiB0aGlzfSxzZXRYOmZ1bmN0aW9uKGEpe3RoaXMueD1hO3JldHVybiB0aGlzfSxzZXRZOmZ1bmN0aW9uKGEpe3RoaXMueT1hO3JldHVybiB0aGlzfSxzZXRaOmZ1bmN0aW9uKGEpe3RoaXMuej1hO3JldHVybiB0aGlzfSxzZXRXOmZ1bmN0aW9uKGEpe3RoaXMudz1hO3JldHVybiB0aGlzfSxzZXRDb21wb25lbnQ6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAwOnRoaXMueD1iO2JyZWFrO2Nhc2UgMTp0aGlzLnk9YjticmVhaztjYXNlIDI6dGhpcy56PWI7YnJlYWs7Y2FzZSAzOnRoaXMudz1cbiAgICBiO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJpbmRleCBpcyBvdXQgb2YgcmFuZ2U6IFwiK2EpO31yZXR1cm4gdGhpc30sZ2V0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe3N3aXRjaChhKXtjYXNlIDA6cmV0dXJuIHRoaXMueDtjYXNlIDE6cmV0dXJuIHRoaXMueTtjYXNlIDI6cmV0dXJuIHRoaXMuejtjYXNlIDM6cmV0dXJuIHRoaXMudztkZWZhdWx0OnRocm93IEVycm9yKFwiaW5kZXggaXMgb3V0IG9mIHJhbmdlOiBcIithKTt9fSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLngsdGhpcy55LHRoaXMueix0aGlzLncpfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMueD1hLng7dGhpcy55PWEueTt0aGlzLno9YS56O3RoaXMudz12b2lkIDAhPT1hLnc/YS53OjE7cmV0dXJuIHRoaXN9LGFkZDpmdW5jdGlvbihhLGIpe2lmKHZvaWQgMCE9PWIpcmV0dXJuIGNvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjQ6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC5cIiksXG4gICAgdGhpcy5hZGRWZWN0b3JzKGEsYik7dGhpcy54Kz1hLng7dGhpcy55Kz1hLnk7dGhpcy56Kz1hLno7dGhpcy53Kz1hLnc7cmV0dXJuIHRoaXN9LGFkZFNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngrPWE7dGhpcy55Kz1hO3RoaXMueis9YTt0aGlzLncrPWE7cmV0dXJuIHRoaXN9LGFkZFZlY3RvcnM6ZnVuY3Rpb24oYSxiKXt0aGlzLng9YS54K2IueDt0aGlzLnk9YS55K2IueTt0aGlzLno9YS56K2Iuejt0aGlzLnc9YS53K2IudztyZXR1cm4gdGhpc30sYWRkU2NhbGVkVmVjdG9yOmZ1bmN0aW9uKGEsYil7dGhpcy54Kz1hLngqYjt0aGlzLnkrPWEueSpiO3RoaXMueis9YS56KmI7dGhpcy53Kz1hLncqYjtyZXR1cm4gdGhpc30sc3ViOmZ1bmN0aW9uKGEsYil7aWYodm9pZCAwIT09YilyZXR1cm4gY29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yNDogLnN1YigpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLnN1YlZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLlwiKSx0aGlzLnN1YlZlY3RvcnMoYSxcbiAgICBiKTt0aGlzLngtPWEueDt0aGlzLnktPWEueTt0aGlzLnotPWEuejt0aGlzLnctPWEudztyZXR1cm4gdGhpc30sc3ViU2NhbGFyOmZ1bmN0aW9uKGEpe3RoaXMueC09YTt0aGlzLnktPWE7dGhpcy56LT1hO3RoaXMudy09YTtyZXR1cm4gdGhpc30sc3ViVmVjdG9yczpmdW5jdGlvbihhLGIpe3RoaXMueD1hLngtYi54O3RoaXMueT1hLnktYi55O3RoaXMuej1hLnotYi56O3RoaXMudz1hLnctYi53O3JldHVybiB0aGlzfSxtdWx0aXBseVNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLngqPWE7dGhpcy55Kj1hO3RoaXMueio9YTt0aGlzLncqPWE7cmV0dXJuIHRoaXN9LGFwcGx5TWF0cml4NDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLngsYz10aGlzLnksZD10aGlzLnosZT10aGlzLnc7YT1hLmVsZW1lbnRzO3RoaXMueD1hWzBdKmIrYVs0XSpjK2FbOF0qZCthWzEyXSplO3RoaXMueT1hWzFdKmIrYVs1XSpjK2FbOV0qZCthWzEzXSplO3RoaXMuej1hWzJdKmIrYVs2XSpjK2FbMTBdKmQrYVsxNF0qXG4gICAgZTt0aGlzLnc9YVszXSpiK2FbN10qYythWzExXSpkK2FbMTVdKmU7cmV0dXJuIHRoaXN9LGRpdmlkZVNjYWxhcjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhcigxL2EpfSxzZXRBeGlzQW5nbGVGcm9tUXVhdGVybmlvbjpmdW5jdGlvbihhKXt0aGlzLnc9MipNYXRoLmFjb3MoYS53KTt2YXIgYj1NYXRoLnNxcnQoMS1hLncqYS53KTsxRS00PmI/KHRoaXMueD0xLHRoaXMuej10aGlzLnk9MCk6KHRoaXMueD1hLngvYix0aGlzLnk9YS55L2IsdGhpcy56PWEuei9iKTtyZXR1cm4gdGhpc30sc2V0QXhpc0FuZ2xlRnJvbVJvdGF0aW9uTWF0cml4OmZ1bmN0aW9uKGEpe2E9YS5lbGVtZW50czt2YXIgYj1hWzBdO3ZhciBjPWFbNF07dmFyIGQ9YVs4XSxlPWFbMV0sZj1hWzVdLGc9YVs5XTt2YXIgaD1hWzJdO3ZhciBrPWFbNl07dmFyIG09YVsxMF07aWYoLjAxPk1hdGguYWJzKGMtZSkmJi4wMT5NYXRoLmFicyhkLWgpJiYuMDE+TWF0aC5hYnMoZy1rKSl7aWYoLjE+TWF0aC5hYnMoYytcbiAgICBlKSYmLjE+TWF0aC5hYnMoZCtoKSYmLjE+TWF0aC5hYnMoZytrKSYmLjE+TWF0aC5hYnMoYitmK20tMykpcmV0dXJuIHRoaXMuc2V0KDEsMCwwLDApLHRoaXM7YT1NYXRoLlBJO2I9KGIrMSkvMjtmPShmKzEpLzI7bT0obSsxKS8yO2M9KGMrZSkvNDtkPShkK2gpLzQ7Zz0oZytrKS80O2I+ZiYmYj5tPy4wMT5iPyhrPTAsYz1oPS43MDcxMDY3ODEpOihrPU1hdGguc3FydChiKSxoPWMvayxjPWQvayk6Zj5tPy4wMT5mPyhrPS43MDcxMDY3ODEsaD0wLGM9LjcwNzEwNjc4MSk6KGg9TWF0aC5zcXJ0KGYpLGs9Yy9oLGM9Zy9oKTouMDE+bT8oaD1rPS43MDcxMDY3ODEsYz0wKTooYz1NYXRoLnNxcnQobSksaz1kL2MsaD1nL2MpO3RoaXMuc2V0KGssaCxjLGEpO3JldHVybiB0aGlzfWE9TWF0aC5zcXJ0KChrLWcpKihrLWcpKyhkLWgpKihkLWgpKyhlLWMpKihlLWMpKTsuMDAxPk1hdGguYWJzKGEpJiYoYT0xKTt0aGlzLng9KGstZykvYTt0aGlzLnk9KGQtaCkvYTt0aGlzLno9KGUtYykvYTtcbiAgICB0aGlzLnc9TWF0aC5hY29zKChiK2YrbS0xKS8yKTtyZXR1cm4gdGhpc30sbWluOmZ1bmN0aW9uKGEpe3RoaXMueD1NYXRoLm1pbih0aGlzLngsYS54KTt0aGlzLnk9TWF0aC5taW4odGhpcy55LGEueSk7dGhpcy56PU1hdGgubWluKHRoaXMueixhLnopO3RoaXMudz1NYXRoLm1pbih0aGlzLncsYS53KTtyZXR1cm4gdGhpc30sbWF4OmZ1bmN0aW9uKGEpe3RoaXMueD1NYXRoLm1heCh0aGlzLngsYS54KTt0aGlzLnk9TWF0aC5tYXgodGhpcy55LGEueSk7dGhpcy56PU1hdGgubWF4KHRoaXMueixhLnopO3RoaXMudz1NYXRoLm1heCh0aGlzLncsYS53KTtyZXR1cm4gdGhpc30sY2xhbXA6ZnVuY3Rpb24oYSxiKXt0aGlzLng9TWF0aC5tYXgoYS54LE1hdGgubWluKGIueCx0aGlzLngpKTt0aGlzLnk9TWF0aC5tYXgoYS55LE1hdGgubWluKGIueSx0aGlzLnkpKTt0aGlzLno9TWF0aC5tYXgoYS56LE1hdGgubWluKGIueix0aGlzLnopKTt0aGlzLnc9TWF0aC5tYXgoYS53LE1hdGgubWluKGIudyxcbiAgICB0aGlzLncpKTtyZXR1cm4gdGhpc30sY2xhbXBTY2FsYXI6ZnVuY3Rpb24oKXt2YXIgYSxiO3JldHVybiBmdW5jdGlvbihjLGQpe3ZvaWQgMD09PWEmJihhPW5ldyBhYSxiPW5ldyBhYSk7YS5zZXQoYyxjLGMsYyk7Yi5zZXQoZCxkLGQsZCk7cmV0dXJuIHRoaXMuY2xhbXAoYSxiKX19KCksY2xhbXBMZW5ndGg6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmxlbmd0aCgpO3JldHVybiB0aGlzLmRpdmlkZVNjYWxhcihjfHwxKS5tdWx0aXBseVNjYWxhcihNYXRoLm1heChhLE1hdGgubWluKGIsYykpKX0sZmxvb3I6ZnVuY3Rpb24oKXt0aGlzLng9TWF0aC5mbG9vcih0aGlzLngpO3RoaXMueT1NYXRoLmZsb29yKHRoaXMueSk7dGhpcy56PU1hdGguZmxvb3IodGhpcy56KTt0aGlzLnc9TWF0aC5mbG9vcih0aGlzLncpO3JldHVybiB0aGlzfSxjZWlsOmZ1bmN0aW9uKCl7dGhpcy54PU1hdGguY2VpbCh0aGlzLngpO3RoaXMueT1NYXRoLmNlaWwodGhpcy55KTt0aGlzLno9TWF0aC5jZWlsKHRoaXMueik7XG4gICAgdGhpcy53PU1hdGguY2VpbCh0aGlzLncpO3JldHVybiB0aGlzfSxyb3VuZDpmdW5jdGlvbigpe3RoaXMueD1NYXRoLnJvdW5kKHRoaXMueCk7dGhpcy55PU1hdGgucm91bmQodGhpcy55KTt0aGlzLno9TWF0aC5yb3VuZCh0aGlzLnopO3RoaXMudz1NYXRoLnJvdW5kKHRoaXMudyk7cmV0dXJuIHRoaXN9LHJvdW5kVG9aZXJvOmZ1bmN0aW9uKCl7dGhpcy54PTA+dGhpcy54P01hdGguY2VpbCh0aGlzLngpOk1hdGguZmxvb3IodGhpcy54KTt0aGlzLnk9MD50aGlzLnk/TWF0aC5jZWlsKHRoaXMueSk6TWF0aC5mbG9vcih0aGlzLnkpO3RoaXMuej0wPnRoaXMuej9NYXRoLmNlaWwodGhpcy56KTpNYXRoLmZsb29yKHRoaXMueik7dGhpcy53PTA+dGhpcy53P01hdGguY2VpbCh0aGlzLncpOk1hdGguZmxvb3IodGhpcy53KTtyZXR1cm4gdGhpc30sbmVnYXRlOmZ1bmN0aW9uKCl7dGhpcy54PS10aGlzLng7dGhpcy55PS10aGlzLnk7dGhpcy56PS10aGlzLno7dGhpcy53PS10aGlzLnc7cmV0dXJuIHRoaXN9LFxuICAgIGRvdDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy54KmEueCt0aGlzLnkqYS55K3RoaXMueiphLnordGhpcy53KmEud30sbGVuZ3RoU3E6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy54KnRoaXMueCt0aGlzLnkqdGhpcy55K3RoaXMueip0aGlzLnordGhpcy53KnRoaXMud30sbGVuZ3RoOmZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguc3FydCh0aGlzLngqdGhpcy54K3RoaXMueSp0aGlzLnkrdGhpcy56KnRoaXMueit0aGlzLncqdGhpcy53KX0sbWFuaGF0dGFuTGVuZ3RoOmZ1bmN0aW9uKCl7cmV0dXJuIE1hdGguYWJzKHRoaXMueCkrTWF0aC5hYnModGhpcy55KStNYXRoLmFicyh0aGlzLnopK01hdGguYWJzKHRoaXMudyl9LG5vcm1hbGl6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRpdmlkZVNjYWxhcih0aGlzLmxlbmd0aCgpfHwxKX0sc2V0TGVuZ3RoOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKGEpfSxsZXJwOmZ1bmN0aW9uKGEsYil7dGhpcy54Kz1cbiAgICAoYS54LXRoaXMueCkqYjt0aGlzLnkrPShhLnktdGhpcy55KSpiO3RoaXMueis9KGEuei10aGlzLnopKmI7dGhpcy53Kz0oYS53LXRoaXMudykqYjtyZXR1cm4gdGhpc30sbGVycFZlY3RvcnM6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB0aGlzLnN1YlZlY3RvcnMoYixhKS5tdWx0aXBseVNjYWxhcihjKS5hZGQoYSl9LGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS54PT09dGhpcy54JiZhLnk9PT10aGlzLnkmJmEuej09PXRoaXMueiYmYS53PT09dGhpcy53fSxmcm9tQXJyYXk6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0wKTt0aGlzLng9YVtiXTt0aGlzLnk9YVtiKzFdO3RoaXMuej1hW2IrMl07dGhpcy53PWFbYiszXTtyZXR1cm4gdGhpc30sdG9BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWEmJihhPVtdKTt2b2lkIDA9PT1iJiYoYj0wKTthW2JdPXRoaXMueDthW2IrMV09dGhpcy55O2FbYisyXT10aGlzLno7YVtiKzNdPXRoaXMudztyZXR1cm4gYX0sZnJvbUJ1ZmZlckF0dHJpYnV0ZTpmdW5jdGlvbihhLFxuICAgIGIsYyl7dm9pZCAwIT09YyYmY29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yNDogb2Zmc2V0IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLlwiKTt0aGlzLng9YS5nZXRYKGIpO3RoaXMueT1hLmdldFkoYik7dGhpcy56PWEuZ2V0WihiKTt0aGlzLnc9YS5nZXRXKGIpO3JldHVybiB0aGlzfX0pO2tiLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoemEucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6a2IsaXNXZWJHTFJlbmRlclRhcmdldDohMCxzZXRTaXplOmZ1bmN0aW9uKGEsYil7aWYodGhpcy53aWR0aCE9PWF8fHRoaXMuaGVpZ2h0IT09Yil0aGlzLndpZHRoPWEsdGhpcy5oZWlnaHQ9Yix0aGlzLmRpc3Bvc2UoKTt0aGlzLnZpZXdwb3J0LnNldCgwLDAsYSxiKTt0aGlzLnNjaXNzb3Iuc2V0KDAsMCxhLGIpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX0sY29weTpmdW5jdGlvbihhKXt0aGlzLndpZHRoPVxuICAgIGEud2lkdGg7dGhpcy5oZWlnaHQ9YS5oZWlnaHQ7dGhpcy52aWV3cG9ydC5jb3B5KGEudmlld3BvcnQpO3RoaXMudGV4dHVyZT1hLnRleHR1cmUuY2xvbmUoKTt0aGlzLmRlcHRoQnVmZmVyPWEuZGVwdGhCdWZmZXI7dGhpcy5zdGVuY2lsQnVmZmVyPWEuc3RlbmNpbEJ1ZmZlcjt0aGlzLmRlcHRoVGV4dHVyZT1hLmRlcHRoVGV4dHVyZTtyZXR1cm4gdGhpc30sZGlzcG9zZTpmdW5jdGlvbigpe3RoaXMuZGlzcGF0Y2hFdmVudCh7dHlwZTpcImRpc3Bvc2VcIn0pfX0pO0piLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGtiLnByb3RvdHlwZSk7SmIucHJvdG90eXBlLmNvbnN0cnVjdG9yPUpiO0piLnByb3RvdHlwZS5pc1dlYkdMUmVuZGVyVGFyZ2V0Q3ViZT0hMDtsYi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShVLnByb3RvdHlwZSk7bGIucHJvdG90eXBlLmNvbnN0cnVjdG9yPWxiO2xiLnByb3RvdHlwZS5pc0RhdGFUZXh0dXJlPSEwO2RiLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFUucHJvdG90eXBlKTtcbiAgICBkYi5wcm90b3R5cGUuY29uc3RydWN0b3I9ZGI7ZGIucHJvdG90eXBlLmlzQ3ViZVRleHR1cmU9ITA7T2JqZWN0LmRlZmluZVByb3BlcnR5KGRiLnByb3RvdHlwZSxcImltYWdlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbWFnZX0sc2V0OmZ1bmN0aW9uKGEpe3RoaXMuaW1hZ2U9YX19KTt2YXIgTmU9bmV3IFUsT2U9bmV3IGRiLEllPVtdLEtlPVtdLE1lPW5ldyBGbG9hdDMyQXJyYXkoMTYpLExlPW5ldyBGbG9hdDMyQXJyYXkoOSk7U2UucHJvdG90eXBlLnNldFZhbHVlPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPXRoaXMuc2VxLGQ9MCxlPWMubGVuZ3RoO2QhPT1lOysrZCl7dmFyIGY9Y1tkXTtmLnNldFZhbHVlKGEsYltmLmlkXSl9fTt2YXIgVmQ9LyhbXFx3XFxkX10rKShcXF0pPyhcXFt8XFwuKT8vZzttYi5wcm90b3R5cGUuc2V0VmFsdWU9ZnVuY3Rpb24oYSxiLGMpe2I9dGhpcy5tYXBbYl07dm9pZCAwIT09YiYmYi5zZXRWYWx1ZShhLGMsdGhpcy5yZW5kZXJlcil9O21iLnByb3RvdHlwZS5zZXRPcHRpb25hbD1cbiAgICBmdW5jdGlvbihhLGIsYyl7Yj1iW2NdO3ZvaWQgMCE9PWImJnRoaXMuc2V0VmFsdWUoYSxjLGIpfTttYi51cGxvYWQ9ZnVuY3Rpb24oYSxiLGMsZCl7Zm9yKHZhciBlPTAsZj1iLmxlbmd0aDtlIT09ZjsrK2Upe3ZhciBnPWJbZV0saD1jW2cuaWRdOyExIT09aC5uZWVkc1VwZGF0ZSYmZy5zZXRWYWx1ZShhLGgudmFsdWUsZCl9fTttYi5zZXFXaXRoVmFsdWU9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9W10sZD0wLGU9YS5sZW5ndGg7ZCE9PWU7KytkKXt2YXIgZj1hW2RdO2YuaWQgaW4gYiYmYy5wdXNoKGYpfXJldHVybiBjfTt2YXIgS2c9e2FsaWNlYmx1ZToxNTc5MjM4MyxhbnRpcXVld2hpdGU6MTY0NDQzNzUsYXF1YTo2NTUzNSxhcXVhbWFyaW5lOjgzODg1NjQsYXp1cmU6MTU3OTQxNzUsYmVpZ2U6MTYxMTkyNjAsYmlzcXVlOjE2NzcwMjQ0LGJsYWNrOjAsYmxhbmNoZWRhbG1vbmQ6MTY3NzIwNDUsYmx1ZToyNTUsYmx1ZXZpb2xldDo5MDU1MjAyLGJyb3duOjEwODI0MjM0LGJ1cmx5d29vZDoxNDU5NjIzMSxcbiAgICBjYWRldGJsdWU6NjI2NjUyOCxjaGFydHJldXNlOjgzODgzNTIsY2hvY29sYXRlOjEzNzg5NDcwLGNvcmFsOjE2NzQ0MjcyLGNvcm5mbG93ZXJibHVlOjY1OTE5ODEsY29ybnNpbGs6MTY3NzUzODgsY3JpbXNvbjoxNDQyMzEwMCxjeWFuOjY1NTM1LGRhcmtibHVlOjEzOSxkYXJrY3lhbjozNTcyMyxkYXJrZ29sZGVucm9kOjEyMDkyOTM5LGRhcmtncmF5OjExMTE5MDE3LGRhcmtncmVlbjoyNTYwMCxkYXJrZ3JleToxMTExOTAxNyxkYXJra2hha2k6MTI0MzMyNTksZGFya21hZ2VudGE6OTEwOTY0MyxkYXJrb2xpdmVncmVlbjo1NTk3OTk5LGRhcmtvcmFuZ2U6MTY3NDc1MjAsZGFya29yY2hpZDoxMDA0MDAxMixkYXJrcmVkOjkxMDk1MDQsZGFya3NhbG1vbjoxNTMwODQxMCxkYXJrc2VhZ3JlZW46OTQxOTkxOSxkYXJrc2xhdGVibHVlOjQ3MzQzNDcsZGFya3NsYXRlZ3JheTozMTAwNDk1LGRhcmtzbGF0ZWdyZXk6MzEwMDQ5NSxkYXJrdHVycXVvaXNlOjUyOTQ1LGRhcmt2aW9sZXQ6OTY5OTUzOSxcbiAgICBkZWVwcGluazoxNjcxNjk0NyxkZWVwc2t5Ymx1ZTo0OTE1MSxkaW1ncmF5OjY5MDgyNjUsZGltZ3JleTo2OTA4MjY1LGRvZGdlcmJsdWU6MjAwMzE5OSxmaXJlYnJpY2s6MTE2NzQxNDYsZmxvcmFsd2hpdGU6MTY3NzU5MjAsZm9yZXN0Z3JlZW46MjI2Mzg0MixmdWNoc2lhOjE2NzExOTM1LGdhaW5zYm9ybzoxNDQ3NDQ2MCxnaG9zdHdoaXRlOjE2MzE2NjcxLGdvbGQ6MTY3NjY3MjAsZ29sZGVucm9kOjE0MzI5MTIwLGdyYXk6ODQyMTUwNCxncmVlbjozMjc2OCxncmVlbnllbGxvdzoxMTQwMzA1NSxncmV5Ojg0MjE1MDQsaG9uZXlkZXc6MTU3OTQxNjAsaG90cGluazoxNjczODc0MCxpbmRpYW5yZWQ6MTM0NTg1MjQsaW5kaWdvOjQ5MTUzMzAsaXZvcnk6MTY3NzcyMDAsa2hha2k6MTU3ODc2NjAsbGF2ZW5kZXI6MTUxMzI0MTAsbGF2ZW5kZXJibHVzaDoxNjc3MzM2NSxsYXduZ3JlZW46ODE5MDk3NixsZW1vbmNoaWZmb246MTY3NzU4ODUsbGlnaHRibHVlOjExMzkzMjU0LGxpZ2h0Y29yYWw6MTU3NjE1MzYsXG4gICAgbGlnaHRjeWFuOjE0NzQ1NTk5LGxpZ2h0Z29sZGVucm9keWVsbG93OjE2NDQ4MjEwLGxpZ2h0Z3JheToxMzg4MjMyMyxsaWdodGdyZWVuOjk0OTgyNTYsbGlnaHRncmV5OjEzODgyMzIzLGxpZ2h0cGluazoxNjc1ODQ2NSxsaWdodHNhbG1vbjoxNjc1Mjc2MixsaWdodHNlYWdyZWVuOjIxNDI4OTAsbGlnaHRza3libHVlOjg5MDAzNDYsbGlnaHRzbGF0ZWdyYXk6NzgzMzc1MyxsaWdodHNsYXRlZ3JleTo3ODMzNzUzLGxpZ2h0c3RlZWxibHVlOjExNTg0NzM0LGxpZ2h0eWVsbG93OjE2Nzc3MTg0LGxpbWU6NjUyODAsbGltZWdyZWVuOjMzMjkzMzAsbGluZW46MTY0NDU2NzAsbWFnZW50YToxNjcxMTkzNSxtYXJvb246ODM4ODYwOCxtZWRpdW1hcXVhbWFyaW5lOjY3MzczMjIsbWVkaXVtYmx1ZToyMDUsbWVkaXVtb3JjaGlkOjEyMjExNjY3LG1lZGl1bXB1cnBsZTo5NjYyNjgzLG1lZGl1bXNlYWdyZWVuOjM5NzgwOTcsbWVkaXVtc2xhdGVibHVlOjgwODc3OTAsbWVkaXVtc3ByaW5nZ3JlZW46NjQxNTQsXG4gICAgbWVkaXVtdHVycXVvaXNlOjQ3NzIzMDAsbWVkaXVtdmlvbGV0cmVkOjEzMDQ3MTczLG1pZG5pZ2h0Ymx1ZToxNjQ0OTEyLG1pbnRjcmVhbToxNjEyMTg1MCxtaXN0eXJvc2U6MTY3NzAyNzMsbW9jY2FzaW46MTY3NzAyMjksbmF2YWpvd2hpdGU6MTY3Njg2ODUsbmF2eToxMjgsb2xkbGFjZToxNjY0MzU1OCxvbGl2ZTo4NDIxMzc2LG9saXZlZHJhYjo3MDQ4NzM5LG9yYW5nZToxNjc1MzkyMCxvcmFuZ2VyZWQ6MTY3MjkzNDQsb3JjaGlkOjE0MzE1NzM0LHBhbGVnb2xkZW5yb2Q6MTU2NTcxMzAscGFsZWdyZWVuOjEwMDI1ODgwLHBhbGV0dXJxdW9pc2U6MTE1Mjk5NjYscGFsZXZpb2xldHJlZDoxNDM4MTIwMyxwYXBheWF3aGlwOjE2NzczMDc3LHBlYWNocHVmZjoxNjc2NzY3MyxwZXJ1OjEzNDY4OTkxLHBpbms6MTY3NjEwMzUscGx1bToxNDUyNDYzNyxwb3dkZXJibHVlOjExNTkxOTEwLHB1cnBsZTo4Mzg4NzM2LHJlYmVjY2FwdXJwbGU6NjY5Nzg4MSxyZWQ6MTY3MTE2ODAscm9zeWJyb3duOjEyMzU3NTE5LFxuICAgIHJveWFsYmx1ZTo0Mjg2OTQ1LHNhZGRsZWJyb3duOjkxMjcxODcsc2FsbW9uOjE2NDE2ODgyLHNhbmR5YnJvd246MTYwMzI4NjQsc2VhZ3JlZW46MzA1MDMyNyxzZWFzaGVsbDoxNjc3NDYzOCxzaWVubmE6MTA1MDY3OTcsc2lsdmVyOjEyNjMyMjU2LHNreWJsdWU6ODkwMDMzMSxzbGF0ZWJsdWU6Njk3MDA2MSxzbGF0ZWdyYXk6NzM3Mjk0NCxzbGF0ZWdyZXk6NzM3Mjk0NCxzbm93OjE2Nzc1OTMwLHNwcmluZ2dyZWVuOjY1NDA3LHN0ZWVsYmx1ZTo0NjIwOTgwLHRhbjoxMzgwODc4MCx0ZWFsOjMyODk2LHRoaXN0bGU6MTQyMDQ4ODgsdG9tYXRvOjE2NzM3MDk1LHR1cnF1b2lzZTo0MjUxODU2LHZpb2xldDoxNTYzMTA4Nix3aGVhdDoxNjExMzMzMSx3aGl0ZToxNjc3NzIxNSx3aGl0ZXNtb2tlOjE2MTE5Mjg1LHllbGxvdzoxNjc3Njk2MCx5ZWxsb3dncmVlbjoxMDE0NTA3NH07T2JqZWN0LmFzc2lnbihILnByb3RvdHlwZSx7aXNDb2xvcjohMCxyOjEsZzoxLGI6MSxzZXQ6ZnVuY3Rpb24oYSl7YSYmXG4gICAgYS5pc0NvbG9yP3RoaXMuY29weShhKTpcIm51bWJlclwiPT09dHlwZW9mIGE/dGhpcy5zZXRIZXgoYSk6XCJzdHJpbmdcIj09PXR5cGVvZiBhJiZ0aGlzLnNldFN0eWxlKGEpO3JldHVybiB0aGlzfSxzZXRTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy5iPXRoaXMuZz10aGlzLnI9YTtyZXR1cm4gdGhpc30sc2V0SGV4OmZ1bmN0aW9uKGEpe2E9TWF0aC5mbG9vcihhKTt0aGlzLnI9KGE+PjE2JjI1NSkvMjU1O3RoaXMuZz0oYT4+OCYyNTUpLzI1NTt0aGlzLmI9KGEmMjU1KS8yNTU7cmV0dXJuIHRoaXN9LHNldFJHQjpmdW5jdGlvbihhLGIsYyl7dGhpcy5yPWE7dGhpcy5nPWI7dGhpcy5iPWM7cmV0dXJuIHRoaXN9LHNldEhTTDpmdW5jdGlvbigpe2Z1bmN0aW9uIGEoYSxjLGQpezA+ZCYmKGQrPTEpOzE8ZCYmLS1kO3JldHVybiBkPDEvNj9hKzYqKGMtYSkqZDouNT5kP2M6ZDwyLzM/YSs2KihjLWEpKigyLzMtZCk6YX1yZXR1cm4gZnVuY3Rpb24oYixjLGQpe2I9US5ldWNsaWRlYW5Nb2R1bG8oYixcbiAgICAxKTtjPVEuY2xhbXAoYywwLDEpO2Q9US5jbGFtcChkLDAsMSk7MD09PWM/dGhpcy5yPXRoaXMuZz10aGlzLmI9ZDooYz0uNT49ZD9kKigxK2MpOmQrYy1kKmMsZD0yKmQtYyx0aGlzLnI9YShkLGMsYisxLzMpLHRoaXMuZz1hKGQsYyxiKSx0aGlzLmI9YShkLGMsYi0xLzMpKTtyZXR1cm4gdGhpc319KCksc2V0U3R5bGU6ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihiKXt2b2lkIDAhPT1iJiYxPnBhcnNlRmxvYXQoYikmJmNvbnNvbGUud2FybihcIlRIUkVFLkNvbG9yOiBBbHBoYSBjb21wb25lbnQgb2YgXCIrYStcIiB3aWxsIGJlIGlnbm9yZWQuXCIpfXZhciBjO2lmKGM9L14oKD86cmdifGhzbClhPylcXChcXHMqKFteXFwpXSopXFwpLy5leGVjKGEpKXt2YXIgZD1jWzJdO3N3aXRjaChjWzFdKXtjYXNlIFwicmdiXCI6Y2FzZSBcInJnYmFcIjppZihjPS9eKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKigsXFxzKihbMC05XSpcXC4/WzAtOV0rKVxccyopPyQvLmV4ZWMoZCkpcmV0dXJuIHRoaXMucj1NYXRoLm1pbigyNTUsXG4gICAgcGFyc2VJbnQoY1sxXSwxMCkpLzI1NSx0aGlzLmc9TWF0aC5taW4oMjU1LHBhcnNlSW50KGNbMl0sMTApKS8yNTUsdGhpcy5iPU1hdGgubWluKDI1NSxwYXJzZUludChjWzNdLDEwKSkvMjU1LGIoY1s1XSksdGhpcztpZihjPS9eKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKigsXFxzKihbMC05XSpcXC4/WzAtOV0rKVxccyopPyQvLmV4ZWMoZCkpcmV0dXJuIHRoaXMucj1NYXRoLm1pbigxMDAscGFyc2VJbnQoY1sxXSwxMCkpLzEwMCx0aGlzLmc9TWF0aC5taW4oMTAwLHBhcnNlSW50KGNbMl0sMTApKS8xMDAsdGhpcy5iPU1hdGgubWluKDEwMCxwYXJzZUludChjWzNdLDEwKSkvMTAwLGIoY1s1XSksdGhpczticmVhaztjYXNlIFwiaHNsXCI6Y2FzZSBcImhzbGFcIjppZihjPS9eKFswLTldKlxcLj9bMC05XSspXFxzKixcXHMqKFxcZCspXFwlXFxzKixcXHMqKFxcZCspXFwlXFxzKigsXFxzKihbMC05XSpcXC4/WzAtOV0rKVxccyopPyQvLmV4ZWMoZCkpe3ZhciBkPXBhcnNlRmxvYXQoY1sxXSkvMzYwLFxuICAgIGU9cGFyc2VJbnQoY1syXSwxMCkvMTAwLGY9cGFyc2VJbnQoY1szXSwxMCkvMTAwO2IoY1s1XSk7cmV0dXJuIHRoaXMuc2V0SFNMKGQsZSxmKX19fWVsc2UgaWYoYz0vXlxcIyhbQS1GYS1mMC05XSspJC8uZXhlYyhhKSl7Yz1jWzFdO2Q9Yy5sZW5ndGg7aWYoMz09PWQpcmV0dXJuIHRoaXMucj1wYXJzZUludChjLmNoYXJBdCgwKStjLmNoYXJBdCgwKSwxNikvMjU1LHRoaXMuZz1wYXJzZUludChjLmNoYXJBdCgxKStjLmNoYXJBdCgxKSwxNikvMjU1LHRoaXMuYj1wYXJzZUludChjLmNoYXJBdCgyKStjLmNoYXJBdCgyKSwxNikvMjU1LHRoaXM7aWYoNj09PWQpcmV0dXJuIHRoaXMucj1wYXJzZUludChjLmNoYXJBdCgwKStjLmNoYXJBdCgxKSwxNikvMjU1LHRoaXMuZz1wYXJzZUludChjLmNoYXJBdCgyKStjLmNoYXJBdCgzKSwxNikvMjU1LHRoaXMuYj1wYXJzZUludChjLmNoYXJBdCg0KStjLmNoYXJBdCg1KSwxNikvMjU1LHRoaXN9YSYmMDxhLmxlbmd0aCYmKGM9S2dbYV0sdm9pZCAwIT09XG4gICAgYz90aGlzLnNldEhleChjKTpjb25zb2xlLndhcm4oXCJUSFJFRS5Db2xvcjogVW5rbm93biBjb2xvciBcIithKSk7cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMucix0aGlzLmcsdGhpcy5iKX0sY29weTpmdW5jdGlvbihhKXt0aGlzLnI9YS5yO3RoaXMuZz1hLmc7dGhpcy5iPWEuYjtyZXR1cm4gdGhpc30sY29weUdhbW1hVG9MaW5lYXI6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0yKTt0aGlzLnI9TWF0aC5wb3coYS5yLGIpO3RoaXMuZz1NYXRoLnBvdyhhLmcsYik7dGhpcy5iPU1hdGgucG93KGEuYixiKTtyZXR1cm4gdGhpc30sY29weUxpbmVhclRvR2FtbWE6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0yKTtiPTA8Yj8xL2I6MTt0aGlzLnI9TWF0aC5wb3coYS5yLGIpO3RoaXMuZz1NYXRoLnBvdyhhLmcsYik7dGhpcy5iPU1hdGgucG93KGEuYixiKTtyZXR1cm4gdGhpc30sY29udmVydEdhbW1hVG9MaW5lYXI6ZnVuY3Rpb24oKXt2YXIgYT1cbiAgICB0aGlzLnIsYj10aGlzLmcsYz10aGlzLmI7dGhpcy5yPWEqYTt0aGlzLmc9YipiO3RoaXMuYj1jKmM7cmV0dXJuIHRoaXN9LGNvbnZlcnRMaW5lYXJUb0dhbW1hOmZ1bmN0aW9uKCl7dGhpcy5yPU1hdGguc3FydCh0aGlzLnIpO3RoaXMuZz1NYXRoLnNxcnQodGhpcy5nKTt0aGlzLmI9TWF0aC5zcXJ0KHRoaXMuYik7cmV0dXJuIHRoaXN9LGdldEhleDpmdW5jdGlvbigpe3JldHVybiAyNTUqdGhpcy5yPDwxNl4yNTUqdGhpcy5nPDw4XjI1NSp0aGlzLmI8PDB9LGdldEhleFN0cmluZzpmdW5jdGlvbigpe3JldHVybihcIjAwMDAwMFwiK3RoaXMuZ2V0SGV4KCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNil9LGdldEhTTDpmdW5jdGlvbihhKXthPWF8fHtoOjAsczowLGw6MH07dmFyIGI9dGhpcy5yLGM9dGhpcy5nLGQ9dGhpcy5iLGU9TWF0aC5tYXgoYixjLGQpLGY9TWF0aC5taW4oYixjLGQpLGcsaD0oZitlKS8yO2lmKGY9PT1lKWY9Zz0wO2Vsc2V7dmFyIGs9ZS1mLGY9LjU+PWg/ay8oZStmKTpcbiAgICBrLygyLWUtZik7c3dpdGNoKGUpe2Nhc2UgYjpnPShjLWQpL2srKGM8ZD82OjApO2JyZWFrO2Nhc2UgYzpnPShkLWIpL2srMjticmVhaztjYXNlIGQ6Zz0oYi1jKS9rKzR9Zy89Nn1hLmg9ZzthLnM9ZjthLmw9aDtyZXR1cm4gYX0sZ2V0U3R5bGU6ZnVuY3Rpb24oKXtyZXR1cm5cInJnYihcIisoMjU1KnRoaXMucnwwKStcIixcIisoMjU1KnRoaXMuZ3wwKStcIixcIisoMjU1KnRoaXMuYnwwKStcIilcIn0sb2Zmc2V0SFNMOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLmdldEhTTCgpO2QuaCs9YTtkLnMrPWI7ZC5sKz1jO3RoaXMuc2V0SFNMKGQuaCxkLnMsZC5sKTtyZXR1cm4gdGhpc30sYWRkOmZ1bmN0aW9uKGEpe3RoaXMucis9YS5yO3RoaXMuZys9YS5nO3RoaXMuYis9YS5iO3JldHVybiB0aGlzfSxhZGRDb2xvcnM6ZnVuY3Rpb24oYSxiKXt0aGlzLnI9YS5yK2Iucjt0aGlzLmc9YS5nK2IuZzt0aGlzLmI9YS5iK2IuYjtyZXR1cm4gdGhpc30sYWRkU2NhbGFyOmZ1bmN0aW9uKGEpe3RoaXMucis9XG4gICAgYTt0aGlzLmcrPWE7dGhpcy5iKz1hO3JldHVybiB0aGlzfSxzdWI6ZnVuY3Rpb24oYSl7dGhpcy5yPU1hdGgubWF4KDAsdGhpcy5yLWEucik7dGhpcy5nPU1hdGgubWF4KDAsdGhpcy5nLWEuZyk7dGhpcy5iPU1hdGgubWF4KDAsdGhpcy5iLWEuYik7cmV0dXJuIHRoaXN9LG11bHRpcGx5OmZ1bmN0aW9uKGEpe3RoaXMucio9YS5yO3RoaXMuZyo9YS5nO3RoaXMuYio9YS5iO3JldHVybiB0aGlzfSxtdWx0aXBseVNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLnIqPWE7dGhpcy5nKj1hO3RoaXMuYio9YTtyZXR1cm4gdGhpc30sbGVycDpmdW5jdGlvbihhLGIpe3RoaXMucis9KGEuci10aGlzLnIpKmI7dGhpcy5nKz0oYS5nLXRoaXMuZykqYjt0aGlzLmIrPShhLmItdGhpcy5iKSpiO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucj09PXRoaXMuciYmYS5nPT09dGhpcy5nJiZhLmI9PT10aGlzLmJ9LGZyb21BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPVxuICAgIDApO3RoaXMucj1hW2JdO3RoaXMuZz1hW2IrMV07dGhpcy5iPWFbYisyXTtyZXR1cm4gdGhpc30sdG9BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWEmJihhPVtdKTt2b2lkIDA9PT1iJiYoYj0wKTthW2JdPXRoaXMucjthW2IrMV09dGhpcy5nO2FbYisyXT10aGlzLmI7cmV0dXJuIGF9LHRvSlNPTjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdldEhleCgpfX0pO3ZhciBLPXtjb21tb246e2RpZmZ1c2U6e3ZhbHVlOm5ldyBIKDE1NjU4NzM0KX0sb3BhY2l0eTp7dmFsdWU6MX0sbWFwOnt2YWx1ZTpudWxsfSx1dlRyYW5zZm9ybTp7dmFsdWU6bmV3IG1hfSxhbHBoYU1hcDp7dmFsdWU6bnVsbH19LHNwZWN1bGFybWFwOntzcGVjdWxhck1hcDp7dmFsdWU6bnVsbH19LGVudm1hcDp7ZW52TWFwOnt2YWx1ZTpudWxsfSxmbGlwRW52TWFwOnt2YWx1ZTotMX0scmVmbGVjdGl2aXR5Ont2YWx1ZToxfSxyZWZyYWN0aW9uUmF0aW86e3ZhbHVlOi45OH19LGFvbWFwOnthb01hcDp7dmFsdWU6bnVsbH0sXG4gICAgYW9NYXBJbnRlbnNpdHk6e3ZhbHVlOjF9fSxsaWdodG1hcDp7bGlnaHRNYXA6e3ZhbHVlOm51bGx9LGxpZ2h0TWFwSW50ZW5zaXR5Ont2YWx1ZToxfX0sZW1pc3NpdmVtYXA6e2VtaXNzaXZlTWFwOnt2YWx1ZTpudWxsfX0sYnVtcG1hcDp7YnVtcE1hcDp7dmFsdWU6bnVsbH0sYnVtcFNjYWxlOnt2YWx1ZToxfX0sbm9ybWFsbWFwOntub3JtYWxNYXA6e3ZhbHVlOm51bGx9LG5vcm1hbFNjYWxlOnt2YWx1ZTpuZXcgRCgxLDEpfX0sZGlzcGxhY2VtZW50bWFwOntkaXNwbGFjZW1lbnRNYXA6e3ZhbHVlOm51bGx9LGRpc3BsYWNlbWVudFNjYWxlOnt2YWx1ZToxfSxkaXNwbGFjZW1lbnRCaWFzOnt2YWx1ZTowfX0scm91Z2huZXNzbWFwOntyb3VnaG5lc3NNYXA6e3ZhbHVlOm51bGx9fSxtZXRhbG5lc3NtYXA6e21ldGFsbmVzc01hcDp7dmFsdWU6bnVsbH19LGdyYWRpZW50bWFwOntncmFkaWVudE1hcDp7dmFsdWU6bnVsbH19LGZvZzp7Zm9nRGVuc2l0eTp7dmFsdWU6Mi41RS00fSxmb2dOZWFyOnt2YWx1ZToxfSxcbiAgICBmb2dGYXI6e3ZhbHVlOjJFM30sZm9nQ29sb3I6e3ZhbHVlOm5ldyBIKDE2Nzc3MjE1KX19LGxpZ2h0czp7YW1iaWVudExpZ2h0Q29sb3I6e3ZhbHVlOltdfSxkaXJlY3Rpb25hbExpZ2h0czp7dmFsdWU6W10scHJvcGVydGllczp7ZGlyZWN0aW9uOnt9LGNvbG9yOnt9LHNoYWRvdzp7fSxzaGFkb3dCaWFzOnt9LHNoYWRvd1JhZGl1czp7fSxzaGFkb3dNYXBTaXplOnt9fX0sZGlyZWN0aW9uYWxTaGFkb3dNYXA6e3ZhbHVlOltdfSxkaXJlY3Rpb25hbFNoYWRvd01hdHJpeDp7dmFsdWU6W119LHNwb3RMaWdodHM6e3ZhbHVlOltdLHByb3BlcnRpZXM6e2NvbG9yOnt9LHBvc2l0aW9uOnt9LGRpcmVjdGlvbjp7fSxkaXN0YW5jZTp7fSxjb25lQ29zOnt9LHBlbnVtYnJhQ29zOnt9LGRlY2F5Ont9LHNoYWRvdzp7fSxzaGFkb3dCaWFzOnt9LHNoYWRvd1JhZGl1czp7fSxzaGFkb3dNYXBTaXplOnt9fX0sc3BvdFNoYWRvd01hcDp7dmFsdWU6W119LHNwb3RTaGFkb3dNYXRyaXg6e3ZhbHVlOltdfSxcbiAgICBwb2ludExpZ2h0czp7dmFsdWU6W10scHJvcGVydGllczp7Y29sb3I6e30scG9zaXRpb246e30sZGVjYXk6e30sZGlzdGFuY2U6e30sc2hhZG93Ont9LHNoYWRvd0JpYXM6e30sc2hhZG93UmFkaXVzOnt9LHNoYWRvd01hcFNpemU6e30sc2hhZG93Q2FtZXJhTmVhcjp7fSxzaGFkb3dDYW1lcmFGYXI6e319fSxwb2ludFNoYWRvd01hcDp7dmFsdWU6W119LHBvaW50U2hhZG93TWF0cml4Ont2YWx1ZTpbXX0saGVtaXNwaGVyZUxpZ2h0czp7dmFsdWU6W10scHJvcGVydGllczp7ZGlyZWN0aW9uOnt9LHNreUNvbG9yOnt9LGdyb3VuZENvbG9yOnt9fX0scmVjdEFyZWFMaWdodHM6e3ZhbHVlOltdLHByb3BlcnRpZXM6e2NvbG9yOnt9LHBvc2l0aW9uOnt9LHdpZHRoOnt9LGhlaWdodDp7fX19fSxwb2ludHM6e2RpZmZ1c2U6e3ZhbHVlOm5ldyBIKDE1NjU4NzM0KX0sb3BhY2l0eTp7dmFsdWU6MX0sc2l6ZTp7dmFsdWU6MX0sc2NhbGU6e3ZhbHVlOjF9LG1hcDp7dmFsdWU6bnVsbH0sdXZUcmFuc2Zvcm06e3ZhbHVlOm5ldyBtYX19fSxcbiAgICBHYT17bWVyZ2U6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPXt9LGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9dGhpcy5jbG9uZShhW2NdKSxlO2ZvcihlIGluIGQpYltlXT1kW2VdfXJldHVybiBifSxjbG9uZTpmdW5jdGlvbihhKXt2YXIgYj17fSxjO2ZvcihjIGluIGEpe2JbY109e307Zm9yKHZhciBkIGluIGFbY10pe3ZhciBlPWFbY11bZF07ZSYmKGUuaXNDb2xvcnx8ZS5pc01hdHJpeDN8fGUuaXNNYXRyaXg0fHxlLmlzVmVjdG9yMnx8ZS5pc1ZlY3RvcjN8fGUuaXNWZWN0b3I0fHxlLmlzVGV4dHVyZSk/YltjXVtkXT1lLmNsb25lKCk6QXJyYXkuaXNBcnJheShlKT9iW2NdW2RdPWUuc2xpY2UoKTpiW2NdW2RdPWV9fXJldHVybiBifX0sUj17YWxwaGFtYXBfZnJhZ21lbnQ6XCIjaWZkZWYgVVNFX0FMUEhBTUFQXFxuXFx0ZGlmZnVzZUNvbG9yLmEgKj0gdGV4dHVyZTJEKCBhbHBoYU1hcCwgdlV2ICkuZztcXG4jZW5kaWZcXG5cIixhbHBoYW1hcF9wYXJzX2ZyYWdtZW50OlwiI2lmZGVmIFVTRV9BTFBIQU1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGFscGhhTWFwO1xcbiNlbmRpZlxcblwiLFxuICAgIGFscGhhdGVzdF9mcmFnbWVudDpcIiNpZmRlZiBBTFBIQVRFU1RcXG5cXHRpZiAoIGRpZmZ1c2VDb2xvci5hIDwgQUxQSEFURVNUICkgZGlzY2FyZDtcXG4jZW5kaWZcXG5cIixhb21hcF9mcmFnbWVudDpcIiNpZmRlZiBVU0VfQU9NQVBcXG5cXHRmbG9hdCBhbWJpZW50T2NjbHVzaW9uID0gKCB0ZXh0dXJlMkQoIGFvTWFwLCB2VXYyICkuciAtIDEuMCApICogYW9NYXBJbnRlbnNpdHkgKyAxLjA7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICo9IGFtYmllbnRPY2NsdXNpb247XFxuXFx0I2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSAmJiBkZWZpbmVkKCBQSFlTSUNBTCApXFxuXFx0XFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIgKSApO1xcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKj0gY29tcHV0ZVNwZWN1bGFyT2NjbHVzaW9uKCBkb3ROViwgYW1iaWVudE9jY2x1c2lvbiwgbWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MgKTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIixcbiAgICBhb21hcF9wYXJzX2ZyYWdtZW50OlwiI2lmZGVmIFVTRV9BT01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGFvTWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgYW9NYXBJbnRlbnNpdHk7XFxuI2VuZGlmXCIsYmVnaW5fdmVydGV4OlwiXFxudmVjMyB0cmFuc2Zvcm1lZCA9IHZlYzMoIHBvc2l0aW9uICk7XFxuXCIsYmVnaW5ub3JtYWxfdmVydGV4OlwiXFxudmVjMyBvYmplY3ROb3JtYWwgPSB2ZWMzKCBub3JtYWwgKTtcXG5cIixic2RmczpcImZsb2F0IHB1bmN0dWFsTGlnaHRJbnRlbnNpdHlUb0lycmFkaWFuY2VGYWN0b3IoIGNvbnN0IGluIGZsb2F0IGxpZ2h0RGlzdGFuY2UsIGNvbnN0IGluIGZsb2F0IGN1dG9mZkRpc3RhbmNlLCBjb25zdCBpbiBmbG9hdCBkZWNheUV4cG9uZW50ICkge1xcblxcdGlmKCBkZWNheUV4cG9uZW50ID4gMC4wICkge1xcbiNpZiBkZWZpbmVkICggUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUUyApXFxuXFx0XFx0ZmxvYXQgZGlzdGFuY2VGYWxsb2ZmID0gMS4wIC8gbWF4KCBwb3coIGxpZ2h0RGlzdGFuY2UsIGRlY2F5RXhwb25lbnQgKSwgMC4wMSApO1xcblxcdFxcdGZsb2F0IG1heERpc3RhbmNlQ3V0b2ZmRmFjdG9yID0gcG93Miggc2F0dXJhdGUoIDEuMCAtIHBvdzQoIGxpZ2h0RGlzdGFuY2UgLyBjdXRvZmZEaXN0YW5jZSApICkgKTtcXG5cXHRcXHRyZXR1cm4gZGlzdGFuY2VGYWxsb2ZmICogbWF4RGlzdGFuY2VDdXRvZmZGYWN0b3I7XFxuI2Vsc2VcXG5cXHRcXHRyZXR1cm4gcG93KCBzYXR1cmF0ZSggLWxpZ2h0RGlzdGFuY2UgLyBjdXRvZmZEaXN0YW5jZSArIDEuMCApLCBkZWNheUV4cG9uZW50ICk7XFxuI2VuZGlmXFxuXFx0fVxcblxcdHJldHVybiAxLjA7XFxufVxcbnZlYzMgQlJERl9EaWZmdXNlX0xhbWJlcnQoIGNvbnN0IGluIHZlYzMgZGlmZnVzZUNvbG9yICkge1xcblxcdHJldHVybiBSRUNJUFJPQ0FMX1BJICogZGlmZnVzZUNvbG9yO1xcbn1cXG52ZWMzIEZfU2NobGljayggY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCBkb3RMSCApIHtcXG5cXHRmbG9hdCBmcmVzbmVsID0gZXhwMiggKCAtNS41NTQ3MyAqIGRvdExIIC0gNi45ODMxNiApICogZG90TEggKTtcXG5cXHRyZXR1cm4gKCAxLjAgLSBzcGVjdWxhckNvbG9yICkgKiBmcmVzbmVsICsgc3BlY3VsYXJDb2xvcjtcXG59XFxuZmxvYXQgR19HR1hfU21pdGgoIGNvbnN0IGluIGZsb2F0IGFscGhhLCBjb25zdCBpbiBmbG9hdCBkb3ROTCwgY29uc3QgaW4gZmxvYXQgZG90TlYgKSB7XFxuXFx0ZmxvYXQgYTIgPSBwb3cyKCBhbHBoYSApO1xcblxcdGZsb2F0IGdsID0gZG90TkwgKyBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5MICkgKTtcXG5cXHRmbG9hdCBndiA9IGRvdE5WICsgc3FydCggYTIgKyAoIDEuMCAtIGEyICkgKiBwb3cyKCBkb3ROViApICk7XFxuXFx0cmV0dXJuIDEuMCAvICggZ2wgKiBndiApO1xcbn1cXG5mbG9hdCBHX0dHWF9TbWl0aENvcnJlbGF0ZWQoIGNvbnN0IGluIGZsb2F0IGFscGhhLCBjb25zdCBpbiBmbG9hdCBkb3ROTCwgY29uc3QgaW4gZmxvYXQgZG90TlYgKSB7XFxuXFx0ZmxvYXQgYTIgPSBwb3cyKCBhbHBoYSApO1xcblxcdGZsb2F0IGd2ID0gZG90TkwgKiBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5WICkgKTtcXG5cXHRmbG9hdCBnbCA9IGRvdE5WICogc3FydCggYTIgKyAoIDEuMCAtIGEyICkgKiBwb3cyKCBkb3ROTCApICk7XFxuXFx0cmV0dXJuIDAuNSAvIG1heCggZ3YgKyBnbCwgRVBTSUxPTiApO1xcbn1cXG5mbG9hdCBEX0dHWCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5IICkge1xcblxcdGZsb2F0IGEyID0gcG93MiggYWxwaGEgKTtcXG5cXHRmbG9hdCBkZW5vbSA9IHBvdzIoIGRvdE5IICkgKiAoIGEyIC0gMS4wICkgKyAxLjA7XFxuXFx0cmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiBhMiAvIHBvdzIoIGRlbm9tICk7XFxufVxcbnZlYzMgQlJERl9TcGVjdWxhcl9HR1goIGNvbnN0IGluIEluY2lkZW50TGlnaHQgaW5jaWRlbnRMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0ZmxvYXQgYWxwaGEgPSBwb3cyKCByb3VnaG5lc3MgKTtcXG5cXHR2ZWMzIGhhbGZEaXIgPSBub3JtYWxpemUoIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uICsgZ2VvbWV0cnkudmlld0RpciApO1xcblxcdGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBpbmNpZGVudExpZ2h0LmRpcmVjdGlvbiApICk7XFxuXFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIgKSApO1xcblxcdGZsb2F0IGRvdE5IID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBoYWxmRGlyICkgKTtcXG5cXHRmbG9hdCBkb3RMSCA9IHNhdHVyYXRlKCBkb3QoIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uLCBoYWxmRGlyICkgKTtcXG5cXHR2ZWMzIEYgPSBGX1NjaGxpY2soIHNwZWN1bGFyQ29sb3IsIGRvdExIICk7XFxuXFx0ZmxvYXQgRyA9IEdfR0dYX1NtaXRoQ29ycmVsYXRlZCggYWxwaGEsIGRvdE5MLCBkb3ROViApO1xcblxcdGZsb2F0IEQgPSBEX0dHWCggYWxwaGEsIGRvdE5IICk7XFxuXFx0cmV0dXJuIEYgKiAoIEcgKiBEICk7XFxufVxcbnZlYzIgTFRDX1V2KCBjb25zdCBpbiB2ZWMzIE4sIGNvbnN0IGluIHZlYzMgViwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdGNvbnN0IGZsb2F0IExVVF9TSVpFICA9IDY0LjA7XFxuXFx0Y29uc3QgZmxvYXQgTFVUX1NDQUxFID0gKCBMVVRfU0laRSAtIDEuMCApIC8gTFVUX1NJWkU7XFxuXFx0Y29uc3QgZmxvYXQgTFVUX0JJQVMgID0gMC41IC8gTFVUX1NJWkU7XFxuXFx0ZmxvYXQgdGhldGEgPSBhY29zKCBkb3QoIE4sIFYgKSApO1xcblxcdHZlYzIgdXYgPSB2ZWMyKFxcblxcdFxcdHNxcnQoIHNhdHVyYXRlKCByb3VnaG5lc3MgKSApLFxcblxcdFxcdHNhdHVyYXRlKCB0aGV0YSAvICggMC41ICogUEkgKSApICk7XFxuXFx0dXYgPSB1diAqIExVVF9TQ0FMRSArIExVVF9CSUFTO1xcblxcdHJldHVybiB1djtcXG59XFxuZmxvYXQgTFRDX0NsaXBwZWRTcGhlcmVGb3JtRmFjdG9yKCBjb25zdCBpbiB2ZWMzIGYgKSB7XFxuXFx0ZmxvYXQgbCA9IGxlbmd0aCggZiApO1xcblxcdHJldHVybiBtYXgoICggbCAqIGwgKyBmLnogKSAvICggbCArIDEuMCApLCAwLjAgKTtcXG59XFxudmVjMyBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvbnN0IGluIHZlYzMgdjEsIGNvbnN0IGluIHZlYzMgdjIgKSB7XFxuXFx0ZmxvYXQgeCA9IGRvdCggdjEsIHYyICk7XFxuXFx0ZmxvYXQgeSA9IGFicyggeCApO1xcblxcdGZsb2F0IGEgPSAwLjg2MjY3ICsgKDAuNDk3ODggKyAwLjAxNDM2ICogeSApICogeTtcXG5cXHRmbG9hdCBiID0gMy40NTA2OCArICg0LjE4ODE0ICsgeSkgKiB5O1xcblxcdGZsb2F0IHYgPSBhIC8gYjtcXG5cXHRmbG9hdCB0aGV0YV9zaW50aGV0YSA9ICh4ID4gMC4wKSA/IHYgOiAwLjUgKiBpbnZlcnNlc3FydCggMS4wIC0geCAqIHggKSAtIHY7XFxuXFx0cmV0dXJuIGNyb3NzKCB2MSwgdjIgKSAqIHRoZXRhX3NpbnRoZXRhO1xcbn1cXG52ZWMzIExUQ19FdmFsdWF0ZSggY29uc3QgaW4gdmVjMyBOLCBjb25zdCBpbiB2ZWMzIFYsIGNvbnN0IGluIHZlYzMgUCwgY29uc3QgaW4gbWF0MyBtSW52LCBjb25zdCBpbiB2ZWMzIHJlY3RDb29yZHNbIDQgXSApIHtcXG5cXHR2ZWMzIHYxID0gcmVjdENvb3Jkc1sgMSBdIC0gcmVjdENvb3Jkc1sgMCBdO1xcblxcdHZlYzMgdjIgPSByZWN0Q29vcmRzWyAzIF0gLSByZWN0Q29vcmRzWyAwIF07XFxuXFx0dmVjMyBsaWdodE5vcm1hbCA9IGNyb3NzKCB2MSwgdjIgKTtcXG5cXHRpZiggZG90KCBsaWdodE5vcm1hbCwgUCAtIHJlY3RDb29yZHNbIDAgXSApIDwgMC4wICkgcmV0dXJuIHZlYzMoIDAuMCApO1xcblxcdHZlYzMgVDEsIFQyO1xcblxcdFQxID0gbm9ybWFsaXplKCBWIC0gTiAqIGRvdCggViwgTiApICk7XFxuXFx0VDIgPSAtIGNyb3NzKCBOLCBUMSApO1xcblxcdG1hdDMgbWF0ID0gbUludiAqIHRyYW5zcG9zZU1hdDMoIG1hdDMoIFQxLCBUMiwgTiApICk7XFxuXFx0dmVjMyBjb29yZHNbIDQgXTtcXG5cXHRjb29yZHNbIDAgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMCBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMSBdID0gbWF0ICogKCByZWN0Q29vcmRzWyAxIF0gLSBQICk7XFxuXFx0Y29vcmRzWyAyIF0gPSBtYXQgKiAoIHJlY3RDb29yZHNbIDIgXSAtIFAgKTtcXG5cXHRjb29yZHNbIDMgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMyBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMCBdID0gbm9ybWFsaXplKCBjb29yZHNbIDAgXSApO1xcblxcdGNvb3Jkc1sgMSBdID0gbm9ybWFsaXplKCBjb29yZHNbIDEgXSApO1xcblxcdGNvb3Jkc1sgMiBdID0gbm9ybWFsaXplKCBjb29yZHNbIDIgXSApO1xcblxcdGNvb3Jkc1sgMyBdID0gbm9ybWFsaXplKCBjb29yZHNbIDMgXSApO1xcblxcdHZlYzMgdmVjdG9yRm9ybUZhY3RvciA9IHZlYzMoIDAuMCApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDAgXSwgY29vcmRzWyAxIF0gKTtcXG5cXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAxIF0sIGNvb3Jkc1sgMiBdICk7XFxuXFx0dmVjdG9yRm9ybUZhY3RvciArPSBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvb3Jkc1sgMiBdLCBjb29yZHNbIDMgXSApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDMgXSwgY29vcmRzWyAwIF0gKTtcXG5cXHR2ZWMzIHJlc3VsdCA9IHZlYzMoIExUQ19DbGlwcGVkU3BoZXJlRm9ybUZhY3RvciggdmVjdG9yRm9ybUZhY3RvciApICk7XFxuXFx0cmV0dXJuIHJlc3VsdDtcXG59XFxudmVjMyBCUkRGX1NwZWN1bGFyX0dHWF9FbnZpcm9ubWVudCggY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIgKSApO1xcblxcdGNvbnN0IHZlYzQgYzAgPSB2ZWM0KCAtIDEsIC0gMC4wMjc1LCAtIDAuNTcyLCAwLjAyMiApO1xcblxcdGNvbnN0IHZlYzQgYzEgPSB2ZWM0KCAxLCAwLjA0MjUsIDEuMDQsIC0gMC4wNCApO1xcblxcdHZlYzQgciA9IHJvdWdobmVzcyAqIGMwICsgYzE7XFxuXFx0ZmxvYXQgYTAwNCA9IG1pbiggci54ICogci54LCBleHAyKCAtIDkuMjggKiBkb3ROViApICkgKiByLnggKyByLnk7XFxuXFx0dmVjMiBBQiA9IHZlYzIoIC0xLjA0LCAxLjA0ICkgKiBhMDA0ICsgci56dztcXG5cXHRyZXR1cm4gc3BlY3VsYXJDb2xvciAqIEFCLnggKyBBQi55O1xcbn1cXG5mbG9hdCBHX0JsaW5uUGhvbmdfSW1wbGljaXQoICkge1xcblxcdHJldHVybiAwLjI1O1xcbn1cXG5mbG9hdCBEX0JsaW5uUGhvbmcoIGNvbnN0IGluIGZsb2F0IHNoaW5pbmVzcywgY29uc3QgaW4gZmxvYXQgZG90TkggKSB7XFxuXFx0cmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiAoIHNoaW5pbmVzcyAqIDAuNSArIDEuMCApICogcG93KCBkb3ROSCwgc2hpbmluZXNzICk7XFxufVxcbnZlYzMgQlJERl9TcGVjdWxhcl9CbGlublBob25nKCBjb25zdCBpbiBJbmNpZGVudExpZ2h0IGluY2lkZW50TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgc2hpbmluZXNzICkge1xcblxcdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24gKyBnZW9tZXRyeS52aWV3RGlyICk7XFxuXFx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGhhbGZEaXIgKSApO1xcblxcdGZsb2F0IGRvdExIID0gc2F0dXJhdGUoIGRvdCggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24sIGhhbGZEaXIgKSApO1xcblxcdHZlYzMgRiA9IEZfU2NobGljayggc3BlY3VsYXJDb2xvciwgZG90TEggKTtcXG5cXHRmbG9hdCBHID0gR19CbGlublBob25nX0ltcGxpY2l0KCApO1xcblxcdGZsb2F0IEQgPSBEX0JsaW5uUGhvbmcoIHNoaW5pbmVzcywgZG90TkggKTtcXG5cXHRyZXR1cm4gRiAqICggRyAqIEQgKTtcXG59XFxuZmxvYXQgR0dYUm91Z2huZXNzVG9CbGlubkV4cG9uZW50KCBjb25zdCBpbiBmbG9hdCBnZ3hSb3VnaG5lc3MgKSB7XFxuXFx0cmV0dXJuICggMi4wIC8gcG93MiggZ2d4Um91Z2huZXNzICsgMC4wMDAxICkgLSAyLjAgKTtcXG59XFxuZmxvYXQgQmxpbm5FeHBvbmVudFRvR0dYUm91Z2huZXNzKCBjb25zdCBpbiBmbG9hdCBibGlubkV4cG9uZW50ICkge1xcblxcdHJldHVybiBzcXJ0KCAyLjAgLyAoIGJsaW5uRXhwb25lbnQgKyAyLjAgKSApO1xcbn1cXG5cIixcbiAgICBidW1wbWFwX3BhcnNfZnJhZ21lbnQ6XCIjaWZkZWYgVVNFX0JVTVBNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBidW1wTWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgYnVtcFNjYWxlO1xcblxcdHZlYzIgZEhkeHlfZndkKCkge1xcblxcdFxcdHZlYzIgZFNUZHggPSBkRmR4KCB2VXYgKTtcXG5cXHRcXHR2ZWMyIGRTVGR5ID0gZEZkeSggdlV2ICk7XFxuXFx0XFx0ZmxvYXQgSGxsID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKS54O1xcblxcdFxcdGZsb2F0IGRCeCA9IGJ1bXBTY2FsZSAqIHRleHR1cmUyRCggYnVtcE1hcCwgdlV2ICsgZFNUZHggKS54IC0gSGxsO1xcblxcdFxcdGZsb2F0IGRCeSA9IGJ1bXBTY2FsZSAqIHRleHR1cmUyRCggYnVtcE1hcCwgdlV2ICsgZFNUZHkgKS54IC0gSGxsO1xcblxcdFxcdHJldHVybiB2ZWMyKCBkQngsIGRCeSApO1xcblxcdH1cXG5cXHR2ZWMzIHBlcnR1cmJOb3JtYWxBcmIoIHZlYzMgc3VyZl9wb3MsIHZlYzMgc3VyZl9ub3JtLCB2ZWMyIGRIZHh5ICkge1xcblxcdFxcdHZlYzMgdlNpZ21hWCA9IHZlYzMoIGRGZHgoIHN1cmZfcG9zLnggKSwgZEZkeCggc3VyZl9wb3MueSApLCBkRmR4KCBzdXJmX3Bvcy56ICkgKTtcXG5cXHRcXHR2ZWMzIHZTaWdtYVkgPSB2ZWMzKCBkRmR5KCBzdXJmX3Bvcy54ICksIGRGZHkoIHN1cmZfcG9zLnkgKSwgZEZkeSggc3VyZl9wb3MueiApICk7XFxuXFx0XFx0dmVjMyB2TiA9IHN1cmZfbm9ybTtcXG5cXHRcXHR2ZWMzIFIxID0gY3Jvc3MoIHZTaWdtYVksIHZOICk7XFxuXFx0XFx0dmVjMyBSMiA9IGNyb3NzKCB2TiwgdlNpZ21hWCApO1xcblxcdFxcdGZsb2F0IGZEZXQgPSBkb3QoIHZTaWdtYVgsIFIxICk7XFxuXFx0XFx0dmVjMyB2R3JhZCA9IHNpZ24oIGZEZXQgKSAqICggZEhkeHkueCAqIFIxICsgZEhkeHkueSAqIFIyICk7XFxuXFx0XFx0cmV0dXJuIG5vcm1hbGl6ZSggYWJzKCBmRGV0ICkgKiBzdXJmX25vcm0gLSB2R3JhZCApO1xcblxcdH1cXG4jZW5kaWZcXG5cIixcbiAgICBjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ6XCIjaWYgTlVNX0NMSVBQSU5HX1BMQU5FUyA+IDBcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBVTklPTl9DTElQUElOR19QTEFORVM7ICsrIGkgKSB7XFxuXFx0XFx0dmVjNCBwbGFuZSA9IGNsaXBwaW5nUGxhbmVzWyBpIF07XFxuXFx0XFx0aWYgKCBkb3QoIHZWaWV3UG9zaXRpb24sIHBsYW5lLnh5eiApID4gcGxhbmUudyApIGRpc2NhcmQ7XFxuXFx0fVxcblxcdFxcdFxcblxcdCNpZiBVTklPTl9DTElQUElOR19QTEFORVMgPCBOVU1fQ0xJUFBJTkdfUExBTkVTXFxuXFx0XFx0Ym9vbCBjbGlwcGVkID0gdHJ1ZTtcXG5cXHRcXHRmb3IgKCBpbnQgaSA9IFVOSU9OX0NMSVBQSU5HX1BMQU5FUzsgaSA8IE5VTV9DTElQUElOR19QTEFORVM7ICsrIGkgKSB7XFxuXFx0XFx0XFx0dmVjNCBwbGFuZSA9IGNsaXBwaW5nUGxhbmVzWyBpIF07XFxuXFx0XFx0XFx0Y2xpcHBlZCA9ICggZG90KCB2Vmlld1Bvc2l0aW9uLCBwbGFuZS54eXogKSA+IHBsYW5lLncgKSAmJiBjbGlwcGVkO1xcblxcdFxcdH1cXG5cXHRcXHRpZiAoIGNsaXBwZWQgKSBkaXNjYXJkO1xcblxcdFxcblxcdCNlbmRpZlxcbiNlbmRpZlxcblwiLFxuICAgIGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50OlwiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwXFxuXFx0I2lmICEgZGVmaW5lZCggUEhZU0lDQUwgKSAmJiAhIGRlZmluZWQoIFBIT05HIClcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG5cXHQjZW5kaWZcXG5cXHR1bmlmb3JtIHZlYzQgY2xpcHBpbmdQbGFuZXNbIE5VTV9DTElQUElOR19QTEFORVMgXTtcXG4jZW5kaWZcXG5cIixjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg6XCIjaWYgTlVNX0NMSVBQSU5HX1BMQU5FUyA+IDAgJiYgISBkZWZpbmVkKCBQSFlTSUNBTCApICYmICEgZGVmaW5lZCggUEhPTkcgKVxcblxcdHZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNlbmRpZlxcblwiLGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg6XCIjaWYgTlVNX0NMSVBQSU5HX1BMQU5FUyA+IDAgJiYgISBkZWZpbmVkKCBQSFlTSUNBTCApICYmICEgZGVmaW5lZCggUEhPTkcgKVxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcbiNlbmRpZlxcblwiLFxuICAgIGNvbG9yX2ZyYWdtZW50OlwiI2lmZGVmIFVTRV9DT0xPUlxcblxcdGRpZmZ1c2VDb2xvci5yZ2IgKj0gdkNvbG9yO1xcbiNlbmRpZlwiLGNvbG9yX3BhcnNfZnJhZ21lbnQ6XCIjaWZkZWYgVVNFX0NPTE9SXFxuXFx0dmFyeWluZyB2ZWMzIHZDb2xvcjtcXG4jZW5kaWZcXG5cIixjb2xvcl9wYXJzX3ZlcnRleDpcIiNpZmRlZiBVU0VfQ09MT1JcXG5cXHR2YXJ5aW5nIHZlYzMgdkNvbG9yO1xcbiNlbmRpZlwiLGNvbG9yX3ZlcnRleDpcIiNpZmRlZiBVU0VfQ09MT1JcXG5cXHR2Q29sb3IueHl6ID0gY29sb3IueHl6O1xcbiNlbmRpZlwiLGNvbW1vbjpcIiNkZWZpbmUgUEkgMy4xNDE1OTI2NTM1OVxcbiNkZWZpbmUgUEkyIDYuMjgzMTg1MzA3MThcXG4jZGVmaW5lIFBJX0hBTEYgMS41NzA3OTYzMjY3OTQ5XFxuI2RlZmluZSBSRUNJUFJPQ0FMX1BJIDAuMzE4MzA5ODg2MThcXG4jZGVmaW5lIFJFQ0lQUk9DQUxfUEkyIDAuMTU5MTU0OTRcXG4jZGVmaW5lIExPRzIgMS40NDI2OTVcXG4jZGVmaW5lIEVQU0lMT04gMWUtNlxcbiNkZWZpbmUgc2F0dXJhdGUoYSkgY2xhbXAoIGEsIDAuMCwgMS4wIClcXG4jZGVmaW5lIHdoaXRlQ29tcGxpbWVudChhKSAoIDEuMCAtIHNhdHVyYXRlKCBhICkgKVxcbmZsb2F0IHBvdzIoIGNvbnN0IGluIGZsb2F0IHggKSB7IHJldHVybiB4Kng7IH1cXG5mbG9hdCBwb3czKCBjb25zdCBpbiBmbG9hdCB4ICkgeyByZXR1cm4geCp4Kng7IH1cXG5mbG9hdCBwb3c0KCBjb25zdCBpbiBmbG9hdCB4ICkgeyBmbG9hdCB4MiA9IHgqeDsgcmV0dXJuIHgyKngyOyB9XFxuZmxvYXQgYXZlcmFnZSggY29uc3QgaW4gdmVjMyBjb2xvciApIHsgcmV0dXJuIGRvdCggY29sb3IsIHZlYzMoIDAuMzMzMyApICk7IH1cXG5oaWdocCBmbG9hdCByYW5kKCBjb25zdCBpbiB2ZWMyIHV2ICkge1xcblxcdGNvbnN0IGhpZ2hwIGZsb2F0IGEgPSAxMi45ODk4LCBiID0gNzguMjMzLCBjID0gNDM3NTguNTQ1MztcXG5cXHRoaWdocCBmbG9hdCBkdCA9IGRvdCggdXYueHksIHZlYzIoIGEsYiApICksIHNuID0gbW9kKCBkdCwgUEkgKTtcXG5cXHRyZXR1cm4gZnJhY3Qoc2luKHNuKSAqIGMpO1xcbn1cXG5zdHJ1Y3QgSW5jaWRlbnRMaWdodCB7XFxuXFx0dmVjMyBjb2xvcjtcXG5cXHR2ZWMzIGRpcmVjdGlvbjtcXG5cXHRib29sIHZpc2libGU7XFxufTtcXG5zdHJ1Y3QgUmVmbGVjdGVkTGlnaHQge1xcblxcdHZlYzMgZGlyZWN0RGlmZnVzZTtcXG5cXHR2ZWMzIGRpcmVjdFNwZWN1bGFyO1xcblxcdHZlYzMgaW5kaXJlY3REaWZmdXNlO1xcblxcdHZlYzMgaW5kaXJlY3RTcGVjdWxhcjtcXG59O1xcbnN0cnVjdCBHZW9tZXRyaWNDb250ZXh0IHtcXG5cXHR2ZWMzIHBvc2l0aW9uO1xcblxcdHZlYzMgbm9ybWFsO1xcblxcdHZlYzMgdmlld0RpcjtcXG59O1xcbnZlYzMgdHJhbnNmb3JtRGlyZWN0aW9uKCBpbiB2ZWMzIGRpciwgaW4gbWF0NCBtYXRyaXggKSB7XFxuXFx0cmV0dXJuIG5vcm1hbGl6ZSggKCBtYXRyaXggKiB2ZWM0KCBkaXIsIDAuMCApICkueHl6ICk7XFxufVxcbnZlYzMgaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBkaXIsIGluIG1hdDQgbWF0cml4ICkge1xcblxcdHJldHVybiBub3JtYWxpemUoICggdmVjNCggZGlyLCAwLjAgKSAqIG1hdHJpeCApLnh5eiApO1xcbn1cXG52ZWMzIHByb2plY3RPblBsYW5lKGluIHZlYzMgcG9pbnQsIGluIHZlYzMgcG9pbnRPblBsYW5lLCBpbiB2ZWMzIHBsYW5lTm9ybWFsICkge1xcblxcdGZsb2F0IGRpc3RhbmNlID0gZG90KCBwbGFuZU5vcm1hbCwgcG9pbnQgLSBwb2ludE9uUGxhbmUgKTtcXG5cXHRyZXR1cm4gLSBkaXN0YW5jZSAqIHBsYW5lTm9ybWFsICsgcG9pbnQ7XFxufVxcbmZsb2F0IHNpZGVPZlBsYW5lKCBpbiB2ZWMzIHBvaW50LCBpbiB2ZWMzIHBvaW50T25QbGFuZSwgaW4gdmVjMyBwbGFuZU5vcm1hbCApIHtcXG5cXHRyZXR1cm4gc2lnbiggZG90KCBwb2ludCAtIHBvaW50T25QbGFuZSwgcGxhbmVOb3JtYWwgKSApO1xcbn1cXG52ZWMzIGxpbmVQbGFuZUludGVyc2VjdCggaW4gdmVjMyBwb2ludE9uTGluZSwgaW4gdmVjMyBsaW5lRGlyZWN0aW9uLCBpbiB2ZWMzIHBvaW50T25QbGFuZSwgaW4gdmVjMyBwbGFuZU5vcm1hbCApIHtcXG5cXHRyZXR1cm4gbGluZURpcmVjdGlvbiAqICggZG90KCBwbGFuZU5vcm1hbCwgcG9pbnRPblBsYW5lIC0gcG9pbnRPbkxpbmUgKSAvIGRvdCggcGxhbmVOb3JtYWwsIGxpbmVEaXJlY3Rpb24gKSApICsgcG9pbnRPbkxpbmU7XFxufVxcbm1hdDMgdHJhbnNwb3NlTWF0MyggY29uc3QgaW4gbWF0MyBtICkge1xcblxcdG1hdDMgdG1wO1xcblxcdHRtcFsgMCBdID0gdmVjMyggbVsgMCBdLngsIG1bIDEgXS54LCBtWyAyIF0ueCApO1xcblxcdHRtcFsgMSBdID0gdmVjMyggbVsgMCBdLnksIG1bIDEgXS55LCBtWyAyIF0ueSApO1xcblxcdHRtcFsgMiBdID0gdmVjMyggbVsgMCBdLnosIG1bIDEgXS56LCBtWyAyIF0ueiApO1xcblxcdHJldHVybiB0bXA7XFxufVxcbmZsb2F0IGxpbmVhclRvUmVsYXRpdmVMdW1pbmFuY2UoIGNvbnN0IGluIHZlYzMgY29sb3IgKSB7XFxuXFx0dmVjMyB3ZWlnaHRzID0gdmVjMyggMC4yMTI2LCAwLjcxNTIsIDAuMDcyMiApO1xcblxcdHJldHVybiBkb3QoIHdlaWdodHMsIGNvbG9yLnJnYiApO1xcbn1cXG5cIixcbiAgICBjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQ6XCIjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRV9VVlxcbiNkZWZpbmUgY3ViZVVWX3RleHR1cmVTaXplICgxMDI0LjApXFxuaW50IGdldEZhY2VGcm9tRGlyZWN0aW9uKHZlYzMgZGlyZWN0aW9uKSB7XFxuXFx0dmVjMyBhYnNEaXJlY3Rpb24gPSBhYnMoZGlyZWN0aW9uKTtcXG5cXHRpbnQgZmFjZSA9IC0xO1xcblxcdGlmKCBhYnNEaXJlY3Rpb24ueCA+IGFic0RpcmVjdGlvbi56ICkge1xcblxcdFxcdGlmKGFic0RpcmVjdGlvbi54ID4gYWJzRGlyZWN0aW9uLnkgKVxcblxcdFxcdFxcdGZhY2UgPSBkaXJlY3Rpb24ueCA+IDAuMCA/IDAgOiAzO1xcblxcdFxcdGVsc2VcXG5cXHRcXHRcXHRmYWNlID0gZGlyZWN0aW9uLnkgPiAwLjAgPyAxIDogNDtcXG5cXHR9XFxuXFx0ZWxzZSB7XFxuXFx0XFx0aWYoYWJzRGlyZWN0aW9uLnogPiBhYnNEaXJlY3Rpb24ueSApXFxuXFx0XFx0XFx0ZmFjZSA9IGRpcmVjdGlvbi56ID4gMC4wID8gMiA6IDU7XFxuXFx0XFx0ZWxzZVxcblxcdFxcdFxcdGZhY2UgPSBkaXJlY3Rpb24ueSA+IDAuMCA/IDEgOiA0O1xcblxcdH1cXG5cXHRyZXR1cm4gZmFjZTtcXG59XFxuI2RlZmluZSBjdWJlVVZfbWF4TG9kczEgIChsb2cyKGN1YmVVVl90ZXh0dXJlU2l6ZSowLjI1KSAtIDEuMClcXG4jZGVmaW5lIGN1YmVVVl9yYW5nZUNsYW1wIChleHAyKCg2LjAgLSAxLjApICogMi4wKSlcXG52ZWMyIE1pcExldmVsSW5mbyggdmVjMyB2ZWMsIGZsb2F0IHJvdWdobmVzc0xldmVsLCBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0ZmxvYXQgc2NhbGUgPSBleHAyKGN1YmVVVl9tYXhMb2RzMSAtIHJvdWdobmVzc0xldmVsKTtcXG5cXHRmbG9hdCBkeFJvdWdobmVzcyA9IGRGZHgocm91Z2huZXNzKTtcXG5cXHRmbG9hdCBkeVJvdWdobmVzcyA9IGRGZHkocm91Z2huZXNzKTtcXG5cXHR2ZWMzIGR4ID0gZEZkeCggdmVjICogc2NhbGUgKiBkeFJvdWdobmVzcyApO1xcblxcdHZlYzMgZHkgPSBkRmR5KCB2ZWMgKiBzY2FsZSAqIGR5Um91Z2huZXNzICk7XFxuXFx0ZmxvYXQgZCA9IG1heCggZG90KCBkeCwgZHggKSwgZG90KCBkeSwgZHkgKSApO1xcblxcdGQgPSBjbGFtcChkLCAxLjAsIGN1YmVVVl9yYW5nZUNsYW1wKTtcXG5cXHRmbG9hdCBtaXBMZXZlbCA9IDAuNSAqIGxvZzIoZCk7XFxuXFx0cmV0dXJuIHZlYzIoZmxvb3IobWlwTGV2ZWwpLCBmcmFjdChtaXBMZXZlbCkpO1xcbn1cXG4jZGVmaW5lIGN1YmVVVl9tYXhMb2RzMiAobG9nMihjdWJlVVZfdGV4dHVyZVNpemUqMC4yNSkgLSAyLjApXFxuI2RlZmluZSBjdWJlVVZfcmNwVGV4dHVyZVNpemUgKDEuMCAvIGN1YmVVVl90ZXh0dXJlU2l6ZSlcXG52ZWMyIGdldEN1YmVVVih2ZWMzIGRpcmVjdGlvbiwgZmxvYXQgcm91Z2huZXNzTGV2ZWwsIGZsb2F0IG1pcExldmVsKSB7XFxuXFx0bWlwTGV2ZWwgPSByb3VnaG5lc3NMZXZlbCA+IGN1YmVVVl9tYXhMb2RzMiAtIDMuMCA/IDAuMCA6IG1pcExldmVsO1xcblxcdGZsb2F0IGEgPSAxNi4wICogY3ViZVVWX3JjcFRleHR1cmVTaXplO1xcblxcdHZlYzIgZXhwMl9wYWNrZWQgPSBleHAyKCB2ZWMyKCByb3VnaG5lc3NMZXZlbCwgbWlwTGV2ZWwgKSApO1xcblxcdHZlYzIgcmNwX2V4cDJfcGFja2VkID0gdmVjMiggMS4wICkgLyBleHAyX3BhY2tlZDtcXG5cXHRmbG9hdCBwb3dTY2FsZSA9IGV4cDJfcGFja2VkLnggKiBleHAyX3BhY2tlZC55O1xcblxcdGZsb2F0IHNjYWxlID0gcmNwX2V4cDJfcGFja2VkLnggKiByY3BfZXhwMl9wYWNrZWQueSAqIDAuMjU7XFxuXFx0ZmxvYXQgbWlwT2Zmc2V0ID0gMC43NSooMS4wIC0gcmNwX2V4cDJfcGFja2VkLnkpICogcmNwX2V4cDJfcGFja2VkLng7XFxuXFx0Ym9vbCBiUmVzID0gbWlwTGV2ZWwgPT0gMC4wO1xcblxcdHNjYWxlID0gIGJSZXMgJiYgKHNjYWxlIDwgYSkgPyBhIDogc2NhbGU7XFxuXFx0dmVjMyByO1xcblxcdHZlYzIgb2Zmc2V0O1xcblxcdGludCBmYWNlID0gZ2V0RmFjZUZyb21EaXJlY3Rpb24oZGlyZWN0aW9uKTtcXG5cXHRmbG9hdCByY3BQb3dTY2FsZSA9IDEuMCAvIHBvd1NjYWxlO1xcblxcdGlmKCBmYWNlID09IDApIHtcXG5cXHRcXHRyID0gdmVjMyhkaXJlY3Rpb24ueCwgLWRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueSk7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMigwLjArbWlwT2Zmc2V0LDAuNzUgKiByY3BQb3dTY2FsZSk7XFxuXFx0XFx0b2Zmc2V0LnkgPSBiUmVzICYmIChvZmZzZXQueSA8IDIuMCphKSA/IGEgOiBvZmZzZXQueTtcXG5cXHR9XFxuXFx0ZWxzZSBpZiggZmFjZSA9PSAxKSB7XFxuXFx0XFx0ciA9IHZlYzMoZGlyZWN0aW9uLnksIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueik7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMihzY2FsZSttaXBPZmZzZXQsIDAuNzUgKiByY3BQb3dTY2FsZSk7XFxuXFx0XFx0b2Zmc2V0LnkgPSBiUmVzICYmIChvZmZzZXQueSA8IDIuMCphKSA/IGEgOiBvZmZzZXQueTtcXG5cXHR9XFxuXFx0ZWxzZSBpZiggZmFjZSA9PSAyKSB7XFxuXFx0XFx0ciA9IHZlYzMoZGlyZWN0aW9uLnosIGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueSk7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMigyLjAqc2NhbGUrbWlwT2Zmc2V0LCAwLjc1ICogcmNwUG93U2NhbGUpO1xcblxcdFxcdG9mZnNldC55ID0gYlJlcyAmJiAob2Zmc2V0LnkgPCAyLjAqYSkgPyBhIDogb2Zmc2V0Lnk7XFxuXFx0fVxcblxcdGVsc2UgaWYoIGZhY2UgPT0gMykge1xcblxcdFxcdHIgPSB2ZWMzKGRpcmVjdGlvbi54LCBkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnkpO1xcblxcdFxcdG9mZnNldCA9IHZlYzIoMC4wK21pcE9mZnNldCwwLjUgKiByY3BQb3dTY2FsZSk7XFxuXFx0XFx0b2Zmc2V0LnkgPSBiUmVzICYmIChvZmZzZXQueSA8IDIuMCphKSA/IDAuMCA6IG9mZnNldC55O1xcblxcdH1cXG5cXHRlbHNlIGlmKCBmYWNlID09IDQpIHtcXG5cXHRcXHRyID0gdmVjMyhkaXJlY3Rpb24ueSwgZGlyZWN0aW9uLngsIC1kaXJlY3Rpb24ueik7XFxuXFx0XFx0b2Zmc2V0ID0gdmVjMihzY2FsZSttaXBPZmZzZXQsIDAuNSAqIHJjcFBvd1NjYWxlKTtcXG5cXHRcXHRvZmZzZXQueSA9IGJSZXMgJiYgKG9mZnNldC55IDwgMi4wKmEpID8gMC4wIDogb2Zmc2V0Lnk7XFxuXFx0fVxcblxcdGVsc2Uge1xcblxcdFxcdHIgPSB2ZWMzKGRpcmVjdGlvbi56LCAtZGlyZWN0aW9uLngsIGRpcmVjdGlvbi55KTtcXG5cXHRcXHRvZmZzZXQgPSB2ZWMyKDIuMCpzY2FsZSttaXBPZmZzZXQsIDAuNSAqIHJjcFBvd1NjYWxlKTtcXG5cXHRcXHRvZmZzZXQueSA9IGJSZXMgJiYgKG9mZnNldC55IDwgMi4wKmEpID8gMC4wIDogb2Zmc2V0Lnk7XFxuXFx0fVxcblxcdHIgPSBub3JtYWxpemUocik7XFxuXFx0ZmxvYXQgdGV4ZWxPZmZzZXQgPSAwLjUgKiBjdWJlVVZfcmNwVGV4dHVyZVNpemU7XFxuXFx0dmVjMiBzID0gKCByLnl6IC8gYWJzKCByLnggKSArIHZlYzIoIDEuMCApICkgKiAwLjU7XFxuXFx0dmVjMiBiYXNlID0gb2Zmc2V0ICsgdmVjMiggdGV4ZWxPZmZzZXQgKTtcXG5cXHRyZXR1cm4gYmFzZSArIHMgKiAoIHNjYWxlIC0gMi4wICogdGV4ZWxPZmZzZXQgKTtcXG59XFxuI2RlZmluZSBjdWJlVVZfbWF4TG9kczMgKGxvZzIoY3ViZVVWX3RleHR1cmVTaXplKjAuMjUpIC0gMy4wKVxcbnZlYzQgdGV4dHVyZUN1YmVVVih2ZWMzIHJlZmxlY3RlZERpcmVjdGlvbiwgZmxvYXQgcm91Z2huZXNzICkge1xcblxcdGZsb2F0IHJvdWdobmVzc1ZhbCA9IHJvdWdobmVzcyogY3ViZVVWX21heExvZHMzO1xcblxcdGZsb2F0IHIxID0gZmxvb3Iocm91Z2huZXNzVmFsKTtcXG5cXHRmbG9hdCByMiA9IHIxICsgMS4wO1xcblxcdGZsb2F0IHQgPSBmcmFjdChyb3VnaG5lc3NWYWwpO1xcblxcdHZlYzIgbWlwSW5mbyA9IE1pcExldmVsSW5mbyhyZWZsZWN0ZWREaXJlY3Rpb24sIHIxLCByb3VnaG5lc3MpO1xcblxcdGZsb2F0IHMgPSBtaXBJbmZvLnk7XFxuXFx0ZmxvYXQgbGV2ZWwwID0gbWlwSW5mby54O1xcblxcdGZsb2F0IGxldmVsMSA9IGxldmVsMCArIDEuMDtcXG5cXHRsZXZlbDEgPSBsZXZlbDEgPiA1LjAgPyA1LjAgOiBsZXZlbDE7XFxuXFx0bGV2ZWwwICs9IG1pbiggZmxvb3IoIHMgKyAwLjUgKSwgNS4wICk7XFxuXFx0dmVjMiB1dl8xMCA9IGdldEN1YmVVVihyZWZsZWN0ZWREaXJlY3Rpb24sIHIxLCBsZXZlbDApO1xcblxcdHZlYzQgY29sb3IxMCA9IGVudk1hcFRleGVsVG9MaW5lYXIodGV4dHVyZTJEKGVudk1hcCwgdXZfMTApKTtcXG5cXHR2ZWMyIHV2XzIwID0gZ2V0Q3ViZVVWKHJlZmxlY3RlZERpcmVjdGlvbiwgcjIsIGxldmVsMCk7XFxuXFx0dmVjNCBjb2xvcjIwID0gZW52TWFwVGV4ZWxUb0xpbmVhcih0ZXh0dXJlMkQoZW52TWFwLCB1dl8yMCkpO1xcblxcdHZlYzQgcmVzdWx0ID0gbWl4KGNvbG9yMTAsIGNvbG9yMjAsIHQpO1xcblxcdHJldHVybiB2ZWM0KHJlc3VsdC5yZ2IsIDEuMCk7XFxufVxcbiNlbmRpZlxcblwiLFxuICAgIGRlZmF1bHRub3JtYWxfdmVydGV4OlwidmVjMyB0cmFuc2Zvcm1lZE5vcm1hbCA9IG5vcm1hbE1hdHJpeCAqIG9iamVjdE5vcm1hbDtcXG4jaWZkZWYgRkxJUF9TSURFRFxcblxcdHRyYW5zZm9ybWVkTm9ybWFsID0gLSB0cmFuc2Zvcm1lZE5vcm1hbDtcXG4jZW5kaWZcXG5cIixkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg6XCIjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGRpc3BsYWNlbWVudE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGRpc3BsYWNlbWVudFNjYWxlO1xcblxcdHVuaWZvcm0gZmxvYXQgZGlzcGxhY2VtZW50QmlhcztcXG4jZW5kaWZcXG5cIixkaXNwbGFjZW1lbnRtYXBfdmVydGV4OlwiI2lmZGVmIFVTRV9ESVNQTEFDRU1FTlRNQVBcXG5cXHR0cmFuc2Zvcm1lZCArPSBub3JtYWxpemUoIG9iamVjdE5vcm1hbCApICogKCB0ZXh0dXJlMkQoIGRpc3BsYWNlbWVudE1hcCwgdXYgKS54ICogZGlzcGxhY2VtZW50U2NhbGUgKyBkaXNwbGFjZW1lbnRCaWFzICk7XFxuI2VuZGlmXFxuXCIsXG4gICAgZW1pc3NpdmVtYXBfZnJhZ21lbnQ6XCIjaWZkZWYgVVNFX0VNSVNTSVZFTUFQXFxuXFx0dmVjNCBlbWlzc2l2ZUNvbG9yID0gdGV4dHVyZTJEKCBlbWlzc2l2ZU1hcCwgdlV2ICk7XFxuXFx0ZW1pc3NpdmVDb2xvci5yZ2IgPSBlbWlzc2l2ZU1hcFRleGVsVG9MaW5lYXIoIGVtaXNzaXZlQ29sb3IgKS5yZ2I7XFxuXFx0dG90YWxFbWlzc2l2ZVJhZGlhbmNlICo9IGVtaXNzaXZlQ29sb3IucmdiO1xcbiNlbmRpZlxcblwiLGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ6XCIjaWZkZWYgVVNFX0VNSVNTSVZFTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgZW1pc3NpdmVNYXA7XFxuI2VuZGlmXFxuXCIsZW5jb2RpbmdzX2ZyYWdtZW50OlwiICBnbF9GcmFnQ29sb3IgPSBsaW5lYXJUb091dHB1dFRleGVsKCBnbF9GcmFnQ29sb3IgKTtcXG5cIixlbmNvZGluZ3NfcGFyc19mcmFnbWVudDpcIlxcbnZlYzQgTGluZWFyVG9MaW5lYXIoIGluIHZlYzQgdmFsdWUgKSB7XFxuXFx0cmV0dXJuIHZhbHVlO1xcbn1cXG52ZWM0IEdhbW1hVG9MaW5lYXIoIGluIHZlYzQgdmFsdWUsIGluIGZsb2F0IGdhbW1hRmFjdG9yICkge1xcblxcdHJldHVybiB2ZWM0KCBwb3coIHZhbHVlLnh5eiwgdmVjMyggZ2FtbWFGYWN0b3IgKSApLCB2YWx1ZS53ICk7XFxufVxcbnZlYzQgTGluZWFyVG9HYW1tYSggaW4gdmVjNCB2YWx1ZSwgaW4gZmxvYXQgZ2FtbWFGYWN0b3IgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIHBvdyggdmFsdWUueHl6LCB2ZWMzKCAxLjAgLyBnYW1tYUZhY3RvciApICksIHZhbHVlLncgKTtcXG59XFxudmVjNCBzUkdCVG9MaW5lYXIoIGluIHZlYzQgdmFsdWUgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIG1peCggcG93KCB2YWx1ZS5yZ2IgKiAwLjk0Nzg2NzI5ODYgKyB2ZWMzKCAwLjA1MjEzMjcwMTQgKSwgdmVjMyggMi40ICkgKSwgdmFsdWUucmdiICogMC4wNzczOTkzODA4LCB2ZWMzKCBsZXNzVGhhbkVxdWFsKCB2YWx1ZS5yZ2IsIHZlYzMoIDAuMDQwNDUgKSApICkgKSwgdmFsdWUudyApO1xcbn1cXG52ZWM0IExpbmVhclRvc1JHQiggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggbWl4KCBwb3coIHZhbHVlLnJnYiwgdmVjMyggMC40MTY2NiApICkgKiAxLjA1NSAtIHZlYzMoIDAuMDU1ICksIHZhbHVlLnJnYiAqIDEyLjkyLCB2ZWMzKCBsZXNzVGhhbkVxdWFsKCB2YWx1ZS5yZ2IsIHZlYzMoIDAuMDAzMTMwOCApICkgKSApLCB2YWx1ZS53ICk7XFxufVxcbnZlYzQgUkdCRVRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlICkge1xcblxcdHJldHVybiB2ZWM0KCB2YWx1ZS5yZ2IgKiBleHAyKCB2YWx1ZS5hICogMjU1LjAgLSAxMjguMCApLCAxLjAgKTtcXG59XFxudmVjNCBMaW5lYXJUb1JHQkUoIGluIHZlYzQgdmFsdWUgKSB7XFxuXFx0ZmxvYXQgbWF4Q29tcG9uZW50ID0gbWF4KCBtYXgoIHZhbHVlLnIsIHZhbHVlLmcgKSwgdmFsdWUuYiApO1xcblxcdGZsb2F0IGZFeHAgPSBjbGFtcCggY2VpbCggbG9nMiggbWF4Q29tcG9uZW50ICkgKSwgLTEyOC4wLCAxMjcuMCApO1xcblxcdHJldHVybiB2ZWM0KCB2YWx1ZS5yZ2IgLyBleHAyKCBmRXhwICksICggZkV4cCArIDEyOC4wICkgLyAyNTUuMCApO1xcbn1cXG52ZWM0IFJHQk1Ub0xpbmVhciggaW4gdmVjNCB2YWx1ZSwgaW4gZmxvYXQgbWF4UmFuZ2UgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnh5eiAqIHZhbHVlLncgKiBtYXhSYW5nZSwgMS4wICk7XFxufVxcbnZlYzQgTGluZWFyVG9SR0JNKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcXG5cXHRmbG9hdCBtYXhSR0IgPSBtYXgoIHZhbHVlLngsIG1heCggdmFsdWUuZywgdmFsdWUuYiApICk7XFxuXFx0ZmxvYXQgTSAgICAgID0gY2xhbXAoIG1heFJHQiAvIG1heFJhbmdlLCAwLjAsIDEuMCApO1xcblxcdE0gICAgICAgICAgICA9IGNlaWwoIE0gKiAyNTUuMCApIC8gMjU1LjA7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAvICggTSAqIG1heFJhbmdlICksIE0gKTtcXG59XFxudmVjNCBSR0JEVG9MaW5lYXIoIGluIHZlYzQgdmFsdWUsIGluIGZsb2F0IG1heFJhbmdlICkge1xcblxcdHJldHVybiB2ZWM0KCB2YWx1ZS5yZ2IgKiAoICggbWF4UmFuZ2UgLyAyNTUuMCApIC8gdmFsdWUuYSApLCAxLjAgKTtcXG59XFxudmVjNCBMaW5lYXJUb1JHQkQoIGluIHZlYzQgdmFsdWUsIGluIGZsb2F0IG1heFJhbmdlICkge1xcblxcdGZsb2F0IG1heFJHQiA9IG1heCggdmFsdWUueCwgbWF4KCB2YWx1ZS5nLCB2YWx1ZS5iICkgKTtcXG5cXHRmbG9hdCBEICAgICAgPSBtYXgoIG1heFJhbmdlIC8gbWF4UkdCLCAxLjAgKTtcXG5cXHREICAgICAgICAgICAgPSBtaW4oIGZsb29yKCBEICkgLyAyNTUuMCwgMS4wICk7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAqICggRCAqICggMjU1LjAgLyBtYXhSYW5nZSApICksIEQgKTtcXG59XFxuY29uc3QgbWF0MyBjTG9nTHV2TSA9IG1hdDMoIDAuMjIwOSwgMC4zMzkwLCAwLjQxODQsIDAuMTEzOCwgMC42NzgwLCAwLjczMTksIDAuMDEwMiwgMC4xMTMwLCAwLjI5NjkgKTtcXG52ZWM0IExpbmVhclRvTG9nTHV2KCBpbiB2ZWM0IHZhbHVlICkgIHtcXG5cXHR2ZWMzIFhwX1lfWFlacCA9IHZhbHVlLnJnYiAqIGNMb2dMdXZNO1xcblxcdFhwX1lfWFlacCA9IG1heChYcF9ZX1hZWnAsIHZlYzMoMWUtNiwgMWUtNiwgMWUtNikpO1xcblxcdHZlYzQgdlJlc3VsdDtcXG5cXHR2UmVzdWx0Lnh5ID0gWHBfWV9YWVpwLnh5IC8gWHBfWV9YWVpwLno7XFxuXFx0ZmxvYXQgTGUgPSAyLjAgKiBsb2cyKFhwX1lfWFlacC55KSArIDEyNy4wO1xcblxcdHZSZXN1bHQudyA9IGZyYWN0KExlKTtcXG5cXHR2UmVzdWx0LnogPSAoTGUgLSAoZmxvb3IodlJlc3VsdC53KjI1NS4wKSkvMjU1LjApLzI1NS4wO1xcblxcdHJldHVybiB2UmVzdWx0O1xcbn1cXG5jb25zdCBtYXQzIGNMb2dMdXZJbnZlcnNlTSA9IG1hdDMoIDYuMDAxNCwgLTIuNzAwOCwgLTEuNzk5NiwgLTEuMzMyMCwgMy4xMDI5LCAtNS43NzIxLCAwLjMwMDgsIC0xLjA4ODIsIDUuNjI2OCApO1xcbnZlYzQgTG9nTHV2VG9MaW5lYXIoIGluIHZlYzQgdmFsdWUgKSB7XFxuXFx0ZmxvYXQgTGUgPSB2YWx1ZS56ICogMjU1LjAgKyB2YWx1ZS53O1xcblxcdHZlYzMgWHBfWV9YWVpwO1xcblxcdFhwX1lfWFlacC55ID0gZXhwMigoTGUgLSAxMjcuMCkgLyAyLjApO1xcblxcdFhwX1lfWFlacC56ID0gWHBfWV9YWVpwLnkgLyB2YWx1ZS55O1xcblxcdFhwX1lfWFlacC54ID0gdmFsdWUueCAqIFhwX1lfWFlacC56O1xcblxcdHZlYzMgdlJHQiA9IFhwX1lfWFlacC5yZ2IgKiBjTG9nTHV2SW52ZXJzZU07XFxuXFx0cmV0dXJuIHZlYzQoIG1heCh2UkdCLCAwLjApLCAxLjAgKTtcXG59XFxuXCIsXG4gICAgZW52bWFwX2ZyYWdtZW50OlwiI2lmZGVmIFVTRV9FTlZNQVBcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKVxcblxcdFxcdHZlYzMgY2FtZXJhVG9WZXJ0ZXggPSBub3JtYWxpemUoIHZXb3JsZFBvc2l0aW9uIC0gY2FtZXJhUG9zaXRpb24gKTtcXG5cXHRcXHR2ZWMzIHdvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggbm9ybWFsLCB2aWV3TWF0cml4ICk7XFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9NT0RFX1JFRkxFQ1RJT05cXG5cXHRcXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSByZWZsZWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHJlZnJhY3QoIGNhbWVyYVRvVmVydGV4LCB3b3JsZE5vcm1hbCwgcmVmcmFjdGlvblJhdGlvICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0I2Vsc2VcXG5cXHRcXHR2ZWMzIHJlZmxlY3RWZWMgPSB2UmVmbGVjdDtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB0ZXh0dXJlQ3ViZSggZW52TWFwLCB2ZWMzKCBmbGlwRW52TWFwICogcmVmbGVjdFZlYy54LCByZWZsZWN0VmVjLnl6ICkgKTtcXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9FUVVJUkVDIClcXG5cXHRcXHR2ZWMyIHNhbXBsZVVWO1xcblxcdFxcdHJlZmxlY3RWZWMgPSBub3JtYWxpemUoIHJlZmxlY3RWZWMgKTtcXG5cXHRcXHRzYW1wbGVVVi55ID0gYXNpbiggY2xhbXAoIHJlZmxlY3RWZWMueSwgLSAxLjAsIDEuMCApICkgKiBSRUNJUFJPQ0FMX1BJICsgMC41O1xcblxcdFxcdHNhbXBsZVVWLnggPSBhdGFuKCByZWZsZWN0VmVjLnosIHJlZmxlY3RWZWMueCApICogUkVDSVBST0NBTF9QSTIgKyAwLjU7XFxuXFx0XFx0dmVjNCBlbnZDb2xvciA9IHRleHR1cmUyRCggZW52TWFwLCBzYW1wbGVVViApO1xcblxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX1NQSEVSRSApXFxuXFx0XFx0cmVmbGVjdFZlYyA9IG5vcm1hbGl6ZSggcmVmbGVjdFZlYyApO1xcblxcdFxcdHZlYzMgcmVmbGVjdFZpZXcgPSBub3JtYWxpemUoICggdmlld01hdHJpeCAqIHZlYzQoIHJlZmxlY3RWZWMsIDAuMCApICkueHl6ICsgdmVjMyggMC4wLCAwLjAsIDEuMCApICk7XFxuXFx0XFx0dmVjNCBlbnZDb2xvciA9IHRleHR1cmUyRCggZW52TWFwLCByZWZsZWN0Vmlldy54eSAqIDAuNSArIDAuNSApO1xcblxcdCNlbHNlXFxuXFx0XFx0dmVjNCBlbnZDb2xvciA9IHZlYzQoIDAuMCApO1xcblxcdCNlbmRpZlxcblxcdGVudkNvbG9yID0gZW52TWFwVGV4ZWxUb0xpbmVhciggZW52Q29sb3IgKTtcXG5cXHQjaWZkZWYgRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZXFxuXFx0XFx0b3V0Z29pbmdMaWdodCA9IG1peCggb3V0Z29pbmdMaWdodCwgb3V0Z29pbmdMaWdodCAqIGVudkNvbG9yLnh5eiwgc3BlY3VsYXJTdHJlbmd0aCAqIHJlZmxlY3Rpdml0eSApO1xcblxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9CTEVORElOR19NSVggKVxcblxcdFxcdG91dGdvaW5nTGlnaHQgPSBtaXgoIG91dGdvaW5nTGlnaHQsIGVudkNvbG9yLnh5eiwgc3BlY3VsYXJTdHJlbmd0aCAqIHJlZmxlY3Rpdml0eSApO1xcblxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9CTEVORElOR19BREQgKVxcblxcdFxcdG91dGdvaW5nTGlnaHQgKz0gZW52Q29sb3IueHl6ICogc3BlY3VsYXJTdHJlbmd0aCAqIHJlZmxlY3Rpdml0eTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIixcbiAgICBlbnZtYXBfcGFyc19mcmFnbWVudDpcIiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgfHwgZGVmaW5lZCggUEhZU0lDQUwgKVxcblxcdHVuaWZvcm0gZmxvYXQgcmVmbGVjdGl2aXR5O1xcblxcdHVuaWZvcm0gZmxvYXQgZW52TWFwSW50ZW5zaXR5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2lmICEgZGVmaW5lZCggUEhZU0lDQUwgKSAmJiAoIGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApIHx8IGRlZmluZWQoIFBIT05HICkgKVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdFxcdHVuaWZvcm0gc2FtcGxlckN1YmUgZW52TWFwO1xcblxcdCNlbHNlXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgZW52TWFwO1xcblxcdCNlbmRpZlxcblxcdHVuaWZvcm0gZmxvYXQgZmxpcEVudk1hcDtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKSB8fCBkZWZpbmVkKCBQSFlTSUNBTCApXFxuXFx0XFx0dW5pZm9ybSBmbG9hdCByZWZyYWN0aW9uUmF0aW87XFxuXFx0I2Vsc2VcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdlJlZmxlY3Q7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXCIsXG4gICAgZW52bWFwX3BhcnNfdmVydGV4OlwiI2lmZGVmIFVTRV9FTlZNQVBcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG5cXHQjZWxzZVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2UmVmbGVjdDtcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IHJlZnJhY3Rpb25SYXRpbztcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIixlbnZtYXBfdmVydGV4OlwiI2lmZGVmIFVTRV9FTlZNQVBcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKVxcblxcdFxcdHZXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbi54eXo7XFxuXFx0I2Vsc2VcXG5cXHRcXHR2ZWMzIGNhbWVyYVRvVmVydGV4ID0gbm9ybWFsaXplKCB3b3JsZFBvc2l0aW9uLnh5eiAtIGNhbWVyYVBvc2l0aW9uICk7XFxuXFx0XFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIHRyYW5zZm9ybWVkTm9ybWFsLCB2aWV3TWF0cml4ICk7XFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9NT0RFX1JFRkxFQ1RJT05cXG5cXHRcXHRcXHR2UmVmbGVjdCA9IHJlZmxlY3QoIGNhbWVyYVRvVmVydGV4LCB3b3JsZE5vcm1hbCApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0dlJlZmxlY3QgPSByZWZyYWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwsIHJlZnJhY3Rpb25SYXRpbyApO1xcblxcdFxcdCNlbmRpZlxcblxcdCNlbmRpZlxcbiNlbmRpZlxcblwiLFxuICAgIGZvZ192ZXJ0ZXg6XCJcXG4jaWZkZWYgVVNFX0ZPR1xcbmZvZ0RlcHRoID0gLW12UG9zaXRpb24uejtcXG4jZW5kaWZcIixmb2dfcGFyc192ZXJ0ZXg6XCIjaWZkZWYgVVNFX0ZPR1xcbiAgdmFyeWluZyBmbG9hdCBmb2dEZXB0aDtcXG4jZW5kaWZcXG5cIixmb2dfZnJhZ21lbnQ6XCIjaWZkZWYgVVNFX0ZPR1xcblxcdCNpZmRlZiBGT0dfRVhQMlxcblxcdFxcdGZsb2F0IGZvZ0ZhY3RvciA9IHdoaXRlQ29tcGxpbWVudCggZXhwMiggLSBmb2dEZW5zaXR5ICogZm9nRGVuc2l0eSAqIGZvZ0RlcHRoICogZm9nRGVwdGggKiBMT0cyICkgKTtcXG5cXHQjZWxzZVxcblxcdFxcdGZsb2F0IGZvZ0ZhY3RvciA9IHNtb290aHN0ZXAoIGZvZ05lYXIsIGZvZ0ZhciwgZm9nRGVwdGggKTtcXG5cXHQjZW5kaWZcXG5cXHRnbF9GcmFnQ29sb3IucmdiID0gbWl4KCBnbF9GcmFnQ29sb3IucmdiLCBmb2dDb2xvciwgZm9nRmFjdG9yICk7XFxuI2VuZGlmXFxuXCIsZm9nX3BhcnNfZnJhZ21lbnQ6XCIjaWZkZWYgVVNFX0ZPR1xcblxcdHVuaWZvcm0gdmVjMyBmb2dDb2xvcjtcXG5cXHR2YXJ5aW5nIGZsb2F0IGZvZ0RlcHRoO1xcblxcdCNpZmRlZiBGT0dfRVhQMlxcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nRGVuc2l0eTtcXG5cXHQjZWxzZVxcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nTmVhcjtcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IGZvZ0ZhcjtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIixcbiAgICBncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50OlwiI2lmZGVmIFRPT05cXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBncmFkaWVudE1hcDtcXG5cXHR2ZWMzIGdldEdyYWRpZW50SXJyYWRpYW5jZSggdmVjMyBub3JtYWwsIHZlYzMgbGlnaHREaXJlY3Rpb24gKSB7XFxuXFx0XFx0ZmxvYXQgZG90TkwgPSBkb3QoIG5vcm1hbCwgbGlnaHREaXJlY3Rpb24gKTtcXG5cXHRcXHR2ZWMyIGNvb3JkID0gdmVjMiggZG90TkwgKiAwLjUgKyAwLjUsIDAuMCApO1xcblxcdFxcdCNpZmRlZiBVU0VfR1JBRElFTlRNQVBcXG5cXHRcXHRcXHRyZXR1cm4gdGV4dHVyZTJEKCBncmFkaWVudE1hcCwgY29vcmQgKS5yZ2I7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRyZXR1cm4gKCBjb29yZC54IDwgMC43ICkgPyB2ZWMzKCAwLjcgKSA6IHZlYzMoIDEuMCApO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG4jZW5kaWZcXG5cIixsaWdodG1hcF9mcmFnbWVudDpcIiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gUEkgKiB0ZXh0dXJlMkQoIGxpZ2h0TWFwLCB2VXYyICkueHl6ICogbGlnaHRNYXBJbnRlbnNpdHk7XFxuI2VuZGlmXFxuXCIsXG4gICAgbGlnaHRtYXBfcGFyc19mcmFnbWVudDpcIiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBsaWdodE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGxpZ2h0TWFwSW50ZW5zaXR5O1xcbiNlbmRpZlwiLGxpZ2h0c19sYW1iZXJ0X3ZlcnRleDpcInZlYzMgZGlmZnVzZSA9IHZlYzMoIDEuMCApO1xcbkdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnk7XFxuZ2VvbWV0cnkucG9zaXRpb24gPSBtdlBvc2l0aW9uLnh5ejtcXG5nZW9tZXRyeS5ub3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XFxuZ2VvbWV0cnkudmlld0RpciA9IG5vcm1hbGl6ZSggLW12UG9zaXRpb24ueHl6ICk7XFxuR2VvbWV0cmljQ29udGV4dCBiYWNrR2VvbWV0cnk7XFxuYmFja0dlb21ldHJ5LnBvc2l0aW9uID0gZ2VvbWV0cnkucG9zaXRpb247XFxuYmFja0dlb21ldHJ5Lm5vcm1hbCA9IC1nZW9tZXRyeS5ub3JtYWw7XFxuYmFja0dlb21ldHJ5LnZpZXdEaXIgPSBnZW9tZXRyeS52aWV3RGlyO1xcbnZMaWdodEZyb250ID0gdmVjMyggMC4wICk7XFxuI2lmZGVmIERPVUJMRV9TSURFRFxcblxcdHZMaWdodEJhY2sgPSB2ZWMzKCAwLjAgKTtcXG4jZW5kaWZcXG5JbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0O1xcbmZsb2F0IGRvdE5MO1xcbnZlYzMgZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xcbiNpZiBOVU1fUE9JTlRfTElHSFRTID4gMFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9QT0lOVF9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0Z2V0UG9pbnREaXJlY3RMaWdodElycmFkaWFuY2UoIHBvaW50TGlnaHRzWyBpIF0sIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdGRvdE5MID0gZG90KCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZSA9IFBJICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0XFx0dkxpZ2h0RnJvbnQgKz0gc2F0dXJhdGUoIGRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdFxcdHZMaWdodEJhY2sgKz0gc2F0dXJhdGUoIC1kb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG4jZW5kaWZcXG4jaWYgTlVNX1NQT1RfTElHSFRTID4gMFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRnZXRTcG90RGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBzcG90TGlnaHRzWyBpIF0sIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdGRvdE5MID0gZG90KCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZSA9IFBJICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0XFx0dkxpZ2h0RnJvbnQgKz0gc2F0dXJhdGUoIGRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdFxcdHZMaWdodEJhY2sgKz0gc2F0dXJhdGUoIC1kb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG4jZW5kaWZcXG4jaWYgTlVNX0RJUl9MSUdIVFMgPiAwXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0Z2V0RGlyZWN0aW9uYWxEaXJlY3RMaWdodElycmFkaWFuY2UoIGRpcmVjdGlvbmFsTGlnaHRzWyBpIF0sIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdGRvdE5MID0gZG90KCBnZW9tZXRyeS5ub3JtYWwsIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZSA9IFBJICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0XFx0dkxpZ2h0RnJvbnQgKz0gc2F0dXJhdGUoIGRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdFxcdHZMaWdodEJhY2sgKz0gc2F0dXJhdGUoIC1kb3ROTCApICogZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG4jZW5kaWZcXG4jaWYgTlVNX0hFTUlfTElHSFRTID4gMFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9IRU1JX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHR2TGlnaHRGcm9udCArPSBnZXRIZW1pc3BoZXJlTGlnaHRJcnJhZGlhbmNlKCBoZW1pc3BoZXJlTGlnaHRzWyBpIF0sIGdlb21ldHJ5ICk7XFxuXFx0XFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdFxcdHZMaWdodEJhY2sgKz0gZ2V0SGVtaXNwaGVyZUxpZ2h0SXJyYWRpYW5jZSggaGVtaXNwaGVyZUxpZ2h0c1sgaSBdLCBiYWNrR2VvbWV0cnkgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuI2VuZGlmXFxuXCIsXG4gICAgbGlnaHRzX3BhcnM6XCJ1bmlmb3JtIHZlYzMgYW1iaWVudExpZ2h0Q29sb3I7XFxudmVjMyBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIGFtYmllbnRMaWdodENvbG9yICkge1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGFtYmllbnRMaWdodENvbG9yO1xcblxcdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xcblxcdFxcdGlycmFkaWFuY2UgKj0gUEk7XFxuXFx0I2VuZGlmXFxuXFx0cmV0dXJuIGlycmFkaWFuY2U7XFxufVxcbiNpZiBOVU1fRElSX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgRGlyZWN0aW9uYWxMaWdodCB7XFxuXFx0XFx0dmVjMyBkaXJlY3Rpb247XFxuXFx0XFx0dmVjMyBjb2xvcjtcXG5cXHRcXHRpbnQgc2hhZG93O1xcblxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHR9O1xcblxcdHVuaWZvcm0gRGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0c1sgTlVNX0RJUl9MSUdIVFMgXTtcXG5cXHR2b2lkIGdldERpcmVjdGlvbmFsRGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiBEaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIG91dCBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0ICkge1xcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yID0gZGlyZWN0aW9uYWxMaWdodC5jb2xvcjtcXG5cXHRcXHRkaXJlY3RMaWdodC5kaXJlY3Rpb24gPSBkaXJlY3Rpb25hbExpZ2h0LmRpcmVjdGlvbjtcXG5cXHRcXHRkaXJlY3RMaWdodC52aXNpYmxlID0gdHJ1ZTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9QT0lOVF9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IFBvaW50TGlnaHQge1xcblxcdFxcdHZlYzMgcG9zaXRpb247XFxuXFx0XFx0dmVjMyBjb2xvcjtcXG5cXHRcXHRmbG9hdCBkaXN0YW5jZTtcXG5cXHRcXHRmbG9hdCBkZWNheTtcXG5cXHRcXHRpbnQgc2hhZG93O1xcblxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRmbG9hdCBzaGFkb3dDYW1lcmFOZWFyO1xcblxcdFxcdGZsb2F0IHNoYWRvd0NhbWVyYUZhcjtcXG5cXHR9O1xcblxcdHVuaWZvcm0gUG9pbnRMaWdodCBwb2ludExpZ2h0c1sgTlVNX1BPSU5UX0xJR0hUUyBdO1xcblxcdHZvaWQgZ2V0UG9pbnREaXJlY3RMaWdodElycmFkaWFuY2UoIGNvbnN0IGluIFBvaW50TGlnaHQgcG9pbnRMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgb3V0IEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQgKSB7XFxuXFx0XFx0dmVjMyBsVmVjdG9yID0gcG9pbnRMaWdodC5wb3NpdGlvbiAtIGdlb21ldHJ5LnBvc2l0aW9uO1xcblxcdFxcdGRpcmVjdExpZ2h0LmRpcmVjdGlvbiA9IG5vcm1hbGl6ZSggbFZlY3RvciApO1xcblxcdFxcdGZsb2F0IGxpZ2h0RGlzdGFuY2UgPSBsZW5ndGgoIGxWZWN0b3IgKTtcXG5cXHRcXHRkaXJlY3RMaWdodC5jb2xvciA9IHBvaW50TGlnaHQuY29sb3I7XFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gcHVuY3R1YWxMaWdodEludGVuc2l0eVRvSXJyYWRpYW5jZUZhY3RvciggbGlnaHREaXN0YW5jZSwgcG9pbnRMaWdodC5kaXN0YW5jZSwgcG9pbnRMaWdodC5kZWNheSApO1xcblxcdFxcdGRpcmVjdExpZ2h0LnZpc2libGUgPSAoIGRpcmVjdExpZ2h0LmNvbG9yICE9IHZlYzMoIDAuMCApICk7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IFNwb3RMaWdodCB7XFxuXFx0XFx0dmVjMyBwb3NpdGlvbjtcXG5cXHRcXHR2ZWMzIGRpcmVjdGlvbjtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdFxcdGZsb2F0IGRpc3RhbmNlO1xcblxcdFxcdGZsb2F0IGRlY2F5O1xcblxcdFxcdGZsb2F0IGNvbmVDb3M7XFxuXFx0XFx0ZmxvYXQgcGVudW1icmFDb3M7XFxuXFx0XFx0aW50IHNoYWRvdztcXG5cXHRcXHRmbG9hdCBzaGFkb3dCaWFzO1xcblxcdFxcdGZsb2F0IHNoYWRvd1JhZGl1cztcXG5cXHRcXHR2ZWMyIHNoYWRvd01hcFNpemU7XFxuXFx0fTtcXG5cXHR1bmlmb3JtIFNwb3RMaWdodCBzcG90TGlnaHRzWyBOVU1fU1BPVF9MSUdIVFMgXTtcXG5cXHR2b2lkIGdldFNwb3REaXJlY3RMaWdodElycmFkaWFuY2UoIGNvbnN0IGluIFNwb3RMaWdodCBzcG90TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIG91dCBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0ICApIHtcXG5cXHRcXHR2ZWMzIGxWZWN0b3IgPSBzcG90TGlnaHQucG9zaXRpb24gLSBnZW9tZXRyeS5wb3NpdGlvbjtcXG5cXHRcXHRkaXJlY3RMaWdodC5kaXJlY3Rpb24gPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcXG5cXHRcXHRmbG9hdCBsaWdodERpc3RhbmNlID0gbGVuZ3RoKCBsVmVjdG9yICk7XFxuXFx0XFx0ZmxvYXQgYW5nbGVDb3MgPSBkb3QoIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgc3BvdExpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGlmICggYW5nbGVDb3MgPiBzcG90TGlnaHQuY29uZUNvcyApIHtcXG5cXHRcXHRcXHRmbG9hdCBzcG90RWZmZWN0ID0gc21vb3Roc3RlcCggc3BvdExpZ2h0LmNvbmVDb3MsIHNwb3RMaWdodC5wZW51bWJyYUNvcywgYW5nbGVDb3MgKTtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC5jb2xvciA9IHNwb3RMaWdodC5jb2xvcjtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC5jb2xvciAqPSBzcG90RWZmZWN0ICogcHVuY3R1YWxMaWdodEludGVuc2l0eVRvSXJyYWRpYW5jZUZhY3RvciggbGlnaHREaXN0YW5jZSwgc3BvdExpZ2h0LmRpc3RhbmNlLCBzcG90TGlnaHQuZGVjYXkgKTtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC52aXNpYmxlID0gdHJ1ZTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yID0gdmVjMyggMC4wICk7XFxuXFx0XFx0XFx0ZGlyZWN0TGlnaHQudmlzaWJsZSA9IGZhbHNlO1xcblxcdFxcdH1cXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9SRUNUX0FSRUFfTElHSFRTID4gMFxcblxcdHN0cnVjdCBSZWN0QXJlYUxpZ2h0IHtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdFxcdHZlYzMgcG9zaXRpb247XFxuXFx0XFx0dmVjMyBoYWxmV2lkdGg7XFxuXFx0XFx0dmVjMyBoYWxmSGVpZ2h0O1xcblxcdH07XFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbHRjTWF0O1xcdHVuaWZvcm0gc2FtcGxlcjJEIGx0Y01hZztcXG5cXHR1bmlmb3JtIFJlY3RBcmVhTGlnaHQgcmVjdEFyZWFMaWdodHNbIE5VTV9SRUNUX0FSRUFfTElHSFRTIF07XFxuI2VuZGlmXFxuI2lmIE5VTV9IRU1JX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgSGVtaXNwaGVyZUxpZ2h0IHtcXG5cXHRcXHR2ZWMzIGRpcmVjdGlvbjtcXG5cXHRcXHR2ZWMzIHNreUNvbG9yO1xcblxcdFxcdHZlYzMgZ3JvdW5kQ29sb3I7XFxuXFx0fTtcXG5cXHR1bmlmb3JtIEhlbWlzcGhlcmVMaWdodCBoZW1pc3BoZXJlTGlnaHRzWyBOVU1fSEVNSV9MSUdIVFMgXTtcXG5cXHR2ZWMzIGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGNvbnN0IGluIEhlbWlzcGhlcmVMaWdodCBoZW1pTGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnkgKSB7XFxuXFx0XFx0ZmxvYXQgZG90TkwgPSBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgaGVtaUxpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGZsb2F0IGhlbWlEaWZmdXNlV2VpZ2h0ID0gMC41ICogZG90TkwgKyAwLjU7XFxuXFx0XFx0dmVjMyBpcnJhZGlhbmNlID0gbWl4KCBoZW1pTGlnaHQuZ3JvdW5kQ29sb3IsIGhlbWlMaWdodC5za3lDb2xvciwgaGVtaURpZmZ1c2VXZWlnaHQgKTtcXG5cXHRcXHQjaWZuZGVmIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFNcXG5cXHRcXHRcXHRpcnJhZGlhbmNlICo9IFBJO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdHJldHVybiBpcnJhZGlhbmNlO1xcblxcdH1cXG4jZW5kaWZcXG4jaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFBIWVNJQ0FMIClcXG5cXHR2ZWMzIGdldExpZ2h0UHJvYmVJbmRpcmVjdElycmFkaWFuY2UoIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIGludCBtYXhNSVBMZXZlbCApIHtcXG5cXHRcXHR2ZWMzIHdvcmxkTm9ybWFsID0gaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggZ2VvbWV0cnkubm9ybWFsLCB2aWV3TWF0cml4ICk7XFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcXG5cXHRcXHRcXHR2ZWMzIHF1ZXJ5VmVjID0gdmVjMyggZmxpcEVudk1hcCAqIHdvcmxkTm9ybWFsLngsIHdvcmxkTm9ybWFsLnl6ICk7XFxuXFx0XFx0XFx0I2lmZGVmIFRFWFRVUkVfTE9EX0VYVFxcblxcdFxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlQ3ViZUxvZEVYVCggZW52TWFwLCBxdWVyeVZlYywgZmxvYXQoIG1heE1JUExldmVsICkgKTtcXG5cXHRcXHRcXHQjZWxzZVxcblxcdFxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlQ3ViZSggZW52TWFwLCBxdWVyeVZlYywgZmxvYXQoIG1heE1JUExldmVsICkgKTtcXG5cXHRcXHRcXHQjZW5kaWZcXG5cXHRcXHRcXHRlbnZNYXBDb2xvci5yZ2IgPSBlbnZNYXBUZXhlbFRvTGluZWFyKCBlbnZNYXBDb2xvciApLnJnYjtcXG5cXHRcXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9DVUJFX1VWIClcXG5cXHRcXHRcXHR2ZWMzIHF1ZXJ5VmVjID0gdmVjMyggZmxpcEVudk1hcCAqIHdvcmxkTm9ybWFsLngsIHdvcmxkTm9ybWFsLnl6ICk7XFxuXFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlVVYoIHF1ZXJ5VmVjLCAxLjAgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB2ZWM0KCAwLjAgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRyZXR1cm4gUEkgKiBlbnZNYXBDb2xvci5yZ2IgKiBlbnZNYXBJbnRlbnNpdHk7XFxuXFx0fVxcblxcdGZsb2F0IGdldFNwZWN1bGFyTUlQTGV2ZWwoIGNvbnN0IGluIGZsb2F0IGJsaW5uU2hpbmluZXNzRXhwb25lbnQsIGNvbnN0IGluIGludCBtYXhNSVBMZXZlbCApIHtcXG5cXHRcXHRmbG9hdCBtYXhNSVBMZXZlbFNjYWxhciA9IGZsb2F0KCBtYXhNSVBMZXZlbCApO1xcblxcdFxcdGZsb2F0IGRlc2lyZWRNSVBMZXZlbCA9IG1heE1JUExldmVsU2NhbGFyICsgMC43OTI0OCAtIDAuNSAqIGxvZzIoIHBvdzIoIGJsaW5uU2hpbmluZXNzRXhwb25lbnQgKSArIDEuMCApO1xcblxcdFxcdHJldHVybiBjbGFtcCggZGVzaXJlZE1JUExldmVsLCAwLjAsIG1heE1JUExldmVsU2NhbGFyICk7XFxuXFx0fVxcblxcdHZlYzMgZ2V0TGlnaHRQcm9iZUluZGlyZWN0UmFkaWFuY2UoIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIGZsb2F0IGJsaW5uU2hpbmluZXNzRXhwb25lbnQsIGNvbnN0IGluIGludCBtYXhNSVBMZXZlbCApIHtcXG5cXHRcXHQjaWZkZWYgRU5WTUFQX01PREVfUkVGTEVDVElPTlxcblxcdFxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHJlZmxlY3QoIC1nZW9tZXRyeS52aWV3RGlyLCBnZW9tZXRyeS5ub3JtYWwgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHJlZnJhY3QoIC1nZW9tZXRyeS52aWV3RGlyLCBnZW9tZXRyeS5ub3JtYWwsIHJlZnJhY3Rpb25SYXRpbyApO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdHJlZmxlY3RWZWMgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCByZWZsZWN0VmVjLCB2aWV3TWF0cml4ICk7XFxuXFx0XFx0ZmxvYXQgc3BlY3VsYXJNSVBMZXZlbCA9IGdldFNwZWN1bGFyTUlQTGV2ZWwoIGJsaW5uU2hpbmluZXNzRXhwb25lbnQsIG1heE1JUExldmVsICk7XFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcXG5cXHRcXHRcXHR2ZWMzIHF1ZXJ5UmVmbGVjdFZlYyA9IHZlYzMoIGZsaXBFbnZNYXAgKiByZWZsZWN0VmVjLngsIHJlZmxlY3RWZWMueXogKTtcXG5cXHRcXHRcXHQjaWZkZWYgVEVYVFVSRV9MT0RfRVhUXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlTG9kRVhUKCBlbnZNYXAsIHF1ZXJ5UmVmbGVjdFZlYywgc3BlY3VsYXJNSVBMZXZlbCApO1xcblxcdFxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlKCBlbnZNYXAsIHF1ZXJ5UmVmbGVjdFZlYywgc3BlY3VsYXJNSVBMZXZlbCApO1xcblxcdFxcdFxcdCNlbmRpZlxcblxcdFxcdFxcdGVudk1hcENvbG9yLnJnYiA9IGVudk1hcFRleGVsVG9MaW5lYXIoIGVudk1hcENvbG9yICkucmdiO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxcblxcdFxcdFxcdHZlYzMgcXVlcnlSZWZsZWN0VmVjID0gdmVjMyggZmxpcEVudk1hcCAqIHJlZmxlY3RWZWMueCwgcmVmbGVjdFZlYy55eiApO1xcblxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlQ3ViZVVWKHF1ZXJ5UmVmbGVjdFZlYywgQmxpbm5FeHBvbmVudFRvR0dYUm91Z2huZXNzKGJsaW5uU2hpbmluZXNzRXhwb25lbnQpKTtcXG5cXHRcXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9FUVVJUkVDIClcXG5cXHRcXHRcXHR2ZWMyIHNhbXBsZVVWO1xcblxcdFxcdFxcdHNhbXBsZVVWLnkgPSBhc2luKCBjbGFtcCggcmVmbGVjdFZlYy55LCAtIDEuMCwgMS4wICkgKSAqIFJFQ0lQUk9DQUxfUEkgKyAwLjU7XFxuXFx0XFx0XFx0c2FtcGxlVVYueCA9IGF0YW4oIHJlZmxlY3RWZWMueiwgcmVmbGVjdFZlYy54ICkgKiBSRUNJUFJPQ0FMX1BJMiArIDAuNTtcXG5cXHRcXHRcXHQjaWZkZWYgVEVYVFVSRV9MT0RfRVhUXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmUyRExvZEVYVCggZW52TWFwLCBzYW1wbGVVViwgc3BlY3VsYXJNSVBMZXZlbCApO1xcblxcdFxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmUyRCggZW52TWFwLCBzYW1wbGVVViwgc3BlY3VsYXJNSVBMZXZlbCApO1xcblxcdFxcdFxcdCNlbmRpZlxcblxcdFxcdFxcdGVudk1hcENvbG9yLnJnYiA9IGVudk1hcFRleGVsVG9MaW5lYXIoIGVudk1hcENvbG9yICkucmdiO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIEVOVk1BUF9UWVBFX1NQSEVSRSApXFxuXFx0XFx0XFx0dmVjMyByZWZsZWN0VmlldyA9IG5vcm1hbGl6ZSggKCB2aWV3TWF0cml4ICogdmVjNCggcmVmbGVjdFZlYywgMC4wICkgKS54eXogKyB2ZWMzKCAwLjAsMC4wLDEuMCApICk7XFxuXFx0XFx0XFx0I2lmZGVmIFRFWFRVUkVfTE9EX0VYVFxcblxcdFxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlMkRMb2RFWFQoIGVudk1hcCwgcmVmbGVjdFZpZXcueHkgKiAwLjUgKyAwLjUsIHNwZWN1bGFyTUlQTGV2ZWwgKTtcXG5cXHRcXHRcXHQjZWxzZVxcblxcdFxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlMkQoIGVudk1hcCwgcmVmbGVjdFZpZXcueHkgKiAwLjUgKyAwLjUsIHNwZWN1bGFyTUlQTGV2ZWwgKTtcXG5cXHRcXHRcXHQjZW5kaWZcXG5cXHRcXHRcXHRlbnZNYXBDb2xvci5yZ2IgPSBlbnZNYXBUZXhlbFRvTGluZWFyKCBlbnZNYXBDb2xvciApLnJnYjtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRyZXR1cm4gZW52TWFwQ29sb3IucmdiICogZW52TWFwSW50ZW5zaXR5O1xcblxcdH1cXG4jZW5kaWZcXG5cIixcbiAgICBsaWdodHNfcGhvbmdfZnJhZ21lbnQ6XCJCbGlublBob25nTWF0ZXJpYWwgbWF0ZXJpYWw7XFxubWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gZGlmZnVzZUNvbG9yLnJnYjtcXG5tYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gc3BlY3VsYXI7XFxubWF0ZXJpYWwuc3BlY3VsYXJTaGluaW5lc3MgPSBzaGluaW5lc3M7XFxubWF0ZXJpYWwuc3BlY3VsYXJTdHJlbmd0aCA9IHNwZWN1bGFyU3RyZW5ndGg7XFxuXCIsbGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQ6XCJ2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuc3RydWN0IEJsaW5uUGhvbmdNYXRlcmlhbCB7XFxuXFx0dmVjM1xcdGRpZmZ1c2VDb2xvcjtcXG5cXHR2ZWMzXFx0c3BlY3VsYXJDb2xvcjtcXG5cXHRmbG9hdFxcdHNwZWN1bGFyU2hpbmluZXNzO1xcblxcdGZsb2F0XFx0c3BlY3VsYXJTdHJlbmd0aDtcXG59O1xcbnZvaWQgUkVfRGlyZWN0X0JsaW5uUGhvbmcoIGNvbnN0IGluIEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIEJsaW5uUGhvbmdNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0I2lmZGVmIFRPT05cXG5cXHRcXHR2ZWMzIGlycmFkaWFuY2UgPSBnZXRHcmFkaWVudElycmFkaWFuY2UoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHQjZWxzZVxcblxcdFxcdGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSApO1xcblxcdFxcdHZlYzMgaXJyYWRpYW5jZSA9IGRvdE5MICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0I2VuZGlmXFxuXFx0I2lmbmRlZiBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTXFxuXFx0XFx0aXJyYWRpYW5jZSAqPSBQSTtcXG5cXHQjZW5kaWZcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0RpZmZ1c2VfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gaXJyYWRpYW5jZSAqIEJSREZfU3BlY3VsYXJfQmxpbm5QaG9uZyggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhclNoaW5pbmVzcyApICogbWF0ZXJpYWwuc3BlY3VsYXJTdHJlbmd0aDtcXG59XFxudm9pZCBSRV9JbmRpcmVjdERpZmZ1c2VfQmxpbm5QaG9uZyggY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBCbGlublBob25nTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9EaWZmdXNlX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcbn1cXG4jZGVmaW5lIFJFX0RpcmVjdFxcdFxcdFxcdFxcdFJFX0RpcmVjdF9CbGlublBob25nXFxuI2RlZmluZSBSRV9JbmRpcmVjdERpZmZ1c2VcXHRcXHRSRV9JbmRpcmVjdERpZmZ1c2VfQmxpbm5QaG9uZ1xcbiNkZWZpbmUgTWF0ZXJpYWxfTGlnaHRQcm9iZUxPRCggbWF0ZXJpYWwgKVxcdCgwKVxcblwiLFxuICAgIGxpZ2h0c19waHlzaWNhbF9mcmFnbWVudDpcIlBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWw7XFxubWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gZGlmZnVzZUNvbG9yLnJnYiAqICggMS4wIC0gbWV0YWxuZXNzRmFjdG9yICk7XFxubWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MgPSBjbGFtcCggcm91Z2huZXNzRmFjdG9yLCAwLjA0LCAxLjAgKTtcXG4jaWZkZWYgU1RBTkRBUkRcXG5cXHRtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gbWl4KCB2ZWMzKCBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICksIGRpZmZ1c2VDb2xvci5yZ2IsIG1ldGFsbmVzc0ZhY3RvciApO1xcbiNlbHNlXFxuXFx0bWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IG1peCggdmVjMyggTUFYSU1VTV9TUEVDVUxBUl9DT0VGRklDSUVOVCAqIHBvdzIoIHJlZmxlY3Rpdml0eSApICksIGRpZmZ1c2VDb2xvci5yZ2IsIG1ldGFsbmVzc0ZhY3RvciApO1xcblxcdG1hdGVyaWFsLmNsZWFyQ29hdCA9IHNhdHVyYXRlKCBjbGVhckNvYXQgKTtcXHRtYXRlcmlhbC5jbGVhckNvYXRSb3VnaG5lc3MgPSBjbGFtcCggY2xlYXJDb2F0Um91Z2huZXNzLCAwLjA0LCAxLjAgKTtcXG4jZW5kaWZcXG5cIixcbiAgICBsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudDpcInN0cnVjdCBQaHlzaWNhbE1hdGVyaWFsIHtcXG5cXHR2ZWMzXFx0ZGlmZnVzZUNvbG9yO1xcblxcdGZsb2F0XFx0c3BlY3VsYXJSb3VnaG5lc3M7XFxuXFx0dmVjM1xcdHNwZWN1bGFyQ29sb3I7XFxuXFx0I2lmbmRlZiBTVEFOREFSRFxcblxcdFxcdGZsb2F0IGNsZWFyQ29hdDtcXG5cXHRcXHRmbG9hdCBjbGVhckNvYXRSb3VnaG5lc3M7XFxuXFx0I2VuZGlmXFxufTtcXG4jZGVmaW5lIE1BWElNVU1fU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgMC4xNlxcbiNkZWZpbmUgREVGQVVMVF9TUEVDVUxBUl9DT0VGRklDSUVOVCAwLjA0XFxuZmxvYXQgY2xlYXJDb2F0REhSQXBwcm94KCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGNvbnN0IGluIGZsb2F0IGRvdE5MICkge1xcblxcdHJldHVybiBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICsgKCAxLjAgLSBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICkgKiAoIHBvdyggMS4wIC0gZG90TkwsIDUuMCApICogcG93KCAxLjAgLSByb3VnaG5lc3MsIDIuMCApICk7XFxufVxcbiNpZiBOVU1fUkVDVF9BUkVBX0xJR0hUUyA+IDBcXG5cXHR2b2lkIFJFX0RpcmVjdF9SZWN0QXJlYV9QaHlzaWNhbCggY29uc3QgaW4gUmVjdEFyZWFMaWdodCByZWN0QXJlYUxpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRcXHR2ZWMzIG5vcm1hbCA9IGdlb21ldHJ5Lm5vcm1hbDtcXG5cXHRcXHR2ZWMzIHZpZXdEaXIgPSBnZW9tZXRyeS52aWV3RGlyO1xcblxcdFxcdHZlYzMgcG9zaXRpb24gPSBnZW9tZXRyeS5wb3NpdGlvbjtcXG5cXHRcXHR2ZWMzIGxpZ2h0UG9zID0gcmVjdEFyZWFMaWdodC5wb3NpdGlvbjtcXG5cXHRcXHR2ZWMzIGhhbGZXaWR0aCA9IHJlY3RBcmVhTGlnaHQuaGFsZldpZHRoO1xcblxcdFxcdHZlYzMgaGFsZkhlaWdodCA9IHJlY3RBcmVhTGlnaHQuaGFsZkhlaWdodDtcXG5cXHRcXHR2ZWMzIGxpZ2h0Q29sb3IgPSByZWN0QXJlYUxpZ2h0LmNvbG9yO1xcblxcdFxcdGZsb2F0IHJvdWdobmVzcyA9IG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzO1xcblxcdFxcdHZlYzMgcmVjdENvb3Jkc1sgNCBdO1xcblxcdFxcdHJlY3RDb29yZHNbIDAgXSA9IGxpZ2h0UG9zIC0gaGFsZldpZHRoIC0gaGFsZkhlaWdodDtcXHRcXHRyZWN0Q29vcmRzWyAxIF0gPSBsaWdodFBvcyArIGhhbGZXaWR0aCAtIGhhbGZIZWlnaHQ7XFxuXFx0XFx0cmVjdENvb3Jkc1sgMiBdID0gbGlnaHRQb3MgKyBoYWxmV2lkdGggKyBoYWxmSGVpZ2h0O1xcblxcdFxcdHJlY3RDb29yZHNbIDMgXSA9IGxpZ2h0UG9zIC0gaGFsZldpZHRoICsgaGFsZkhlaWdodDtcXG5cXHRcXHR2ZWMyIHV2ID0gTFRDX1V2KCBub3JtYWwsIHZpZXdEaXIsIHJvdWdobmVzcyApO1xcblxcdFxcdGZsb2F0IG5vcm0gPSB0ZXh0dXJlMkQoIGx0Y01hZywgdXYgKS5hO1xcblxcdFxcdHZlYzQgdCA9IHRleHR1cmUyRCggbHRjTWF0LCB1diApO1xcblxcdFxcdG1hdDMgbUludiA9IG1hdDMoXFxuXFx0XFx0XFx0dmVjMyggICAxLCAgIDAsIHQueSApLFxcblxcdFxcdFxcdHZlYzMoICAgMCwgdC56LCAgIDAgKSxcXG5cXHRcXHRcXHR2ZWMzKCB0LncsICAgMCwgdC54IClcXG5cXHRcXHQpO1xcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9IGxpZ2h0Q29sb3IgKiBtYXRlcmlhbC5zcGVjdWxhckNvbG9yICogbm9ybSAqIExUQ19FdmFsdWF0ZSggbm9ybWFsLCB2aWV3RGlyLCBwb3NpdGlvbiwgbUludiwgcmVjdENvb3JkcyApO1xcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz0gbGlnaHRDb2xvciAqIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciAqIExUQ19FdmFsdWF0ZSggbm9ybWFsLCB2aWV3RGlyLCBwb3NpdGlvbiwgbWF0MyggMSApLCByZWN0Q29vcmRzICk7XFxuXFx0fVxcbiNlbmRpZlxcbnZvaWQgUkVfRGlyZWN0X1BoeXNpY2FsKCBjb25zdCBpbiBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRmbG9hdCBkb3ROTCA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBkb3ROTCAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xcblxcdFxcdGlycmFkaWFuY2UgKj0gUEk7XFxuXFx0I2VuZGlmXFxuXFx0I2lmbmRlZiBTVEFOREFSRFxcblxcdFxcdGZsb2F0IGNsZWFyQ29hdERIUiA9IG1hdGVyaWFsLmNsZWFyQ29hdCAqIGNsZWFyQ29hdERIUkFwcHJveCggbWF0ZXJpYWwuY2xlYXJDb2F0Um91Z2huZXNzLCBkb3ROTCApO1xcblxcdCNlbHNlXFxuXFx0XFx0ZmxvYXQgY2xlYXJDb2F0REhSID0gMC4wO1xcblxcdCNlbmRpZlxcblxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9ICggMS4wIC0gY2xlYXJDb2F0REhSICkgKiBpcnJhZGlhbmNlICogQlJERl9TcGVjdWxhcl9HR1goIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MgKTtcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICs9ICggMS4wIC0gY2xlYXJDb2F0REhSICkgKiBpcnJhZGlhbmNlICogQlJERl9EaWZmdXNlX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcblxcdCNpZm5kZWYgU1RBTkRBUkRcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSBpcnJhZGlhbmNlICogbWF0ZXJpYWwuY2xlYXJDb2F0ICogQlJERl9TcGVjdWxhcl9HR1goIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgdmVjMyggREVGQVVMVF9TUEVDVUxBUl9DT0VGRklDSUVOVCApLCBtYXRlcmlhbC5jbGVhckNvYXRSb3VnaG5lc3MgKTtcXG5cXHQjZW5kaWZcXG59XFxudm9pZCBSRV9JbmRpcmVjdERpZmZ1c2VfUGh5c2ljYWwoIGNvbnN0IGluIHZlYzMgaXJyYWRpYW5jZSwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGlycmFkaWFuY2UgKiBCUkRGX0RpZmZ1c2VfTGFtYmVydCggbWF0ZXJpYWwuZGlmZnVzZUNvbG9yICk7XFxufVxcbnZvaWQgUkVfSW5kaXJlY3RTcGVjdWxhcl9QaHlzaWNhbCggY29uc3QgaW4gdmVjMyByYWRpYW5jZSwgY29uc3QgaW4gdmVjMyBjbGVhckNvYXRSYWRpYW5jZSwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0I2lmbmRlZiBTVEFOREFSRFxcblxcdFxcdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBnZW9tZXRyeS52aWV3RGlyICkgKTtcXG5cXHRcXHRmbG9hdCBkb3ROTCA9IGRvdE5WO1xcblxcdFxcdGZsb2F0IGNsZWFyQ29hdERIUiA9IG1hdGVyaWFsLmNsZWFyQ29hdCAqIGNsZWFyQ29hdERIUkFwcHJveCggbWF0ZXJpYWwuY2xlYXJDb2F0Um91Z2huZXNzLCBkb3ROTCApO1xcblxcdCNlbHNlXFxuXFx0XFx0ZmxvYXQgY2xlYXJDb2F0REhSID0gMC4wO1xcblxcdCNlbmRpZlxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKz0gKCAxLjAgLSBjbGVhckNvYXRESFIgKSAqIHJhZGlhbmNlICogQlJERl9TcGVjdWxhcl9HR1hfRW52aXJvbm1lbnQoIGdlb21ldHJ5LCBtYXRlcmlhbC5zcGVjdWxhckNvbG9yLCBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyApO1xcblxcdCNpZm5kZWYgU1RBTkRBUkRcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICs9IGNsZWFyQ29hdFJhZGlhbmNlICogbWF0ZXJpYWwuY2xlYXJDb2F0ICogQlJERl9TcGVjdWxhcl9HR1hfRW52aXJvbm1lbnQoIGdlb21ldHJ5LCB2ZWMzKCBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICksIG1hdGVyaWFsLmNsZWFyQ29hdFJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcbn1cXG4jZGVmaW5lIFJFX0RpcmVjdFxcdFxcdFxcdFxcdFJFX0RpcmVjdF9QaHlzaWNhbFxcbiNkZWZpbmUgUkVfRGlyZWN0X1JlY3RBcmVhXFx0XFx0UkVfRGlyZWN0X1JlY3RBcmVhX1BoeXNpY2FsXFxuI2RlZmluZSBSRV9JbmRpcmVjdERpZmZ1c2VcXHRcXHRSRV9JbmRpcmVjdERpZmZ1c2VfUGh5c2ljYWxcXG4jZGVmaW5lIFJFX0luZGlyZWN0U3BlY3VsYXJcXHRcXHRSRV9JbmRpcmVjdFNwZWN1bGFyX1BoeXNpY2FsXFxuI2RlZmluZSBNYXRlcmlhbF9CbGlublNoaW5pbmVzc0V4cG9uZW50KCBtYXRlcmlhbCApICAgR0dYUm91Z2huZXNzVG9CbGlubkV4cG9uZW50KCBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyApXFxuI2RlZmluZSBNYXRlcmlhbF9DbGVhckNvYXRfQmxpbm5TaGluaW5lc3NFeHBvbmVudCggbWF0ZXJpYWwgKSAgIEdHWFJvdWdobmVzc1RvQmxpbm5FeHBvbmVudCggbWF0ZXJpYWwuY2xlYXJDb2F0Um91Z2huZXNzIClcXG5mbG9hdCBjb21wdXRlU3BlY3VsYXJPY2NsdXNpb24oIGNvbnN0IGluIGZsb2F0IGRvdE5WLCBjb25zdCBpbiBmbG9hdCBhbWJpZW50T2NjbHVzaW9uLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0cmV0dXJuIHNhdHVyYXRlKCBwb3coIGRvdE5WICsgYW1iaWVudE9jY2x1c2lvbiwgZXhwMiggLSAxNi4wICogcm91Z2huZXNzIC0gMS4wICkgKSAtIDEuMCArIGFtYmllbnRPY2NsdXNpb24gKTtcXG59XFxuXCIsXG4gICAgbGlnaHRzX3RlbXBsYXRlOlwiXFxuR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeTtcXG5nZW9tZXRyeS5wb3NpdGlvbiA9IC0gdlZpZXdQb3NpdGlvbjtcXG5nZW9tZXRyeS5ub3JtYWwgPSBub3JtYWw7XFxuZ2VvbWV0cnkudmlld0RpciA9IG5vcm1hbGl6ZSggdlZpZXdQb3NpdGlvbiApO1xcbkluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQ7XFxuI2lmICggTlVNX1BPSU5UX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3QgKVxcblxcdFBvaW50TGlnaHQgcG9pbnRMaWdodDtcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHBvaW50TGlnaHQgPSBwb2ludExpZ2h0c1sgaSBdO1xcblxcdFxcdGdldFBvaW50RGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBwb2ludExpZ2h0LCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHQjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yICo9IGFsbCggYnZlYzIoIHBvaW50TGlnaHQuc2hhZG93LCBkaXJlY3RMaWdodC52aXNpYmxlICkgKSA/IGdldFBvaW50U2hhZG93KCBwb2ludFNoYWRvd01hcFsgaSBdLCBwb2ludExpZ2h0LnNoYWRvd01hcFNpemUsIHBvaW50TGlnaHQuc2hhZG93QmlhcywgcG9pbnRMaWdodC5zaGFkb3dSYWRpdXMsIHZQb2ludFNoYWRvd0Nvb3JkWyBpIF0sIHBvaW50TGlnaHQuc2hhZG93Q2FtZXJhTmVhciwgcG9pbnRMaWdodC5zaGFkb3dDYW1lcmFGYXIgKSA6IDEuMDtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRSRV9EaXJlY3QoIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiAoIE5VTV9TUE9UX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3QgKVxcblxcdFNwb3RMaWdodCBzcG90TGlnaHQ7XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHNwb3RMaWdodCA9IHNwb3RMaWdodHNbIGkgXTtcXG5cXHRcXHRnZXRTcG90RGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBzcG90TGlnaHQsIGdlb21ldHJ5LCBkaXJlY3RMaWdodCApO1xcblxcdFxcdCNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gYWxsKCBidmVjMiggc3BvdExpZ2h0LnNoYWRvdywgZGlyZWN0TGlnaHQudmlzaWJsZSApICkgPyBnZXRTaGFkb3coIHNwb3RTaGFkb3dNYXBbIGkgXSwgc3BvdExpZ2h0LnNoYWRvd01hcFNpemUsIHNwb3RMaWdodC5zaGFkb3dCaWFzLCBzcG90TGlnaHQuc2hhZG93UmFkaXVzLCB2U3BvdFNoYWRvd0Nvb3JkWyBpIF0gKSA6IDEuMDtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRSRV9EaXJlY3QoIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuXFx0fVxcbiNlbmRpZlxcbiNpZiAoIE5VTV9ESVJfTElHSFRTID4gMCApICYmIGRlZmluZWQoIFJFX0RpcmVjdCApXFxuXFx0RGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0O1xcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9ESVJfTElHSFRTOyBpICsrICkge1xcblxcdFxcdGRpcmVjdGlvbmFsTGlnaHQgPSBkaXJlY3Rpb25hbExpZ2h0c1sgaSBdO1xcblxcdFxcdGdldERpcmVjdGlvbmFsRGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBkaXJlY3Rpb25hbExpZ2h0LCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHQjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yICo9IGFsbCggYnZlYzIoIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93LCBkaXJlY3RMaWdodC52aXNpYmxlICkgKSA/IGdldFNoYWRvdyggZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGkgXSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dNYXBTaXplLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd0JpYXMsIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93UmFkaXVzLCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgaSBdICkgOiAxLjA7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0UkVfRGlyZWN0KCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcblxcdH1cXG4jZW5kaWZcXG4jaWYgKCBOVU1fUkVDVF9BUkVBX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3RfUmVjdEFyZWEgKVxcblxcdFJlY3RBcmVhTGlnaHQgcmVjdEFyZWFMaWdodDtcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUkVDVF9BUkVBX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRyZWN0QXJlYUxpZ2h0ID0gcmVjdEFyZWFMaWdodHNbIGkgXTtcXG5cXHRcXHRSRV9EaXJlY3RfUmVjdEFyZWEoIHJlY3RBcmVhTGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0RGlmZnVzZSApXFxuXFx0dmVjMyBpcnJhZGlhbmNlID0gZ2V0QW1iaWVudExpZ2h0SXJyYWRpYW5jZSggYW1iaWVudExpZ2h0Q29sb3IgKTtcXG5cXHQjaWZkZWYgVVNFX0xJR0hUTUFQXFxuXFx0XFx0dmVjMyBsaWdodE1hcElycmFkaWFuY2UgPSB0ZXh0dXJlMkQoIGxpZ2h0TWFwLCB2VXYyICkueHl6ICogbGlnaHRNYXBJbnRlbnNpdHk7XFxuXFx0XFx0I2lmbmRlZiBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTXFxuXFx0XFx0XFx0bGlnaHRNYXBJcnJhZGlhbmNlICo9IFBJO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdGlycmFkaWFuY2UgKz0gbGlnaHRNYXBJcnJhZGlhbmNlO1xcblxcdCNlbmRpZlxcblxcdCNpZiAoIE5VTV9IRU1JX0xJR0hUUyA+IDAgKVxcblxcdFxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9IRU1JX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRcXHRpcnJhZGlhbmNlICs9IGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGhlbWlzcGhlcmVMaWdodHNbIGkgXSwgZ2VvbWV0cnkgKTtcXG5cXHRcXHR9XFxuXFx0I2VuZGlmXFxuXFx0I2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSAmJiBkZWZpbmVkKCBQSFlTSUNBTCApICYmIGRlZmluZWQoIEVOVk1BUF9UWVBFX0NVQkVfVVYgKVxcblxcdFxcdGlycmFkaWFuY2UgKz0gZ2V0TGlnaHRQcm9iZUluZGlyZWN0SXJyYWRpYW5jZSggZ2VvbWV0cnksIDggKTtcXG5cXHQjZW5kaWZcXG5cXHRSRV9JbmRpcmVjdERpZmZ1c2UoIGlycmFkaWFuY2UsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG4jZW5kaWZcXG4jaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFJFX0luZGlyZWN0U3BlY3VsYXIgKVxcblxcdHZlYzMgcmFkaWFuY2UgPSBnZXRMaWdodFByb2JlSW5kaXJlY3RSYWRpYW5jZSggZ2VvbWV0cnksIE1hdGVyaWFsX0JsaW5uU2hpbmluZXNzRXhwb25lbnQoIG1hdGVyaWFsICksIDggKTtcXG5cXHQjaWZuZGVmIFNUQU5EQVJEXFxuXFx0XFx0dmVjMyBjbGVhckNvYXRSYWRpYW5jZSA9IGdldExpZ2h0UHJvYmVJbmRpcmVjdFJhZGlhbmNlKCBnZW9tZXRyeSwgTWF0ZXJpYWxfQ2xlYXJDb2F0X0JsaW5uU2hpbmluZXNzRXhwb25lbnQoIG1hdGVyaWFsICksIDggKTtcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzMgY2xlYXJDb2F0UmFkaWFuY2UgPSB2ZWMzKCAwLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHRSRV9JbmRpcmVjdFNwZWN1bGFyKCByYWRpYW5jZSwgY2xlYXJDb2F0UmFkaWFuY2UsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG4jZW5kaWZcXG5cIixcbiAgICBsb2dkZXB0aGJ1Zl9mcmFnbWVudDpcIiNpZiBkZWZpbmVkKCBVU0VfTE9HREVQVEhCVUYgKSAmJiBkZWZpbmVkKCBVU0VfTE9HREVQVEhCVUZfRVhUIClcXG5cXHRnbF9GcmFnRGVwdGhFWFQgPSBsb2cyKCB2RnJhZ0RlcHRoICkgKiBsb2dEZXB0aEJ1ZkZDICogMC41O1xcbiNlbmRpZlwiLGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ6XCIjaWZkZWYgVVNFX0xPR0RFUFRIQlVGXFxuXFx0dW5pZm9ybSBmbG9hdCBsb2dEZXB0aEJ1ZkZDO1xcblxcdCNpZmRlZiBVU0VfTE9HREVQVEhCVUZfRVhUXFxuXFx0XFx0dmFyeWluZyBmbG9hdCB2RnJhZ0RlcHRoO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcblwiLGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4OlwiI2lmZGVmIFVTRV9MT0dERVBUSEJVRlxcblxcdCNpZmRlZiBVU0VfTE9HREVQVEhCVUZfRVhUXFxuXFx0XFx0dmFyeWluZyBmbG9hdCB2RnJhZ0RlcHRoO1xcblxcdCNlbmRpZlxcblxcdHVuaWZvcm0gZmxvYXQgbG9nRGVwdGhCdWZGQztcXG4jZW5kaWZcIixsb2dkZXB0aGJ1Zl92ZXJ0ZXg6XCIjaWZkZWYgVVNFX0xPR0RFUFRIQlVGXFxuXFx0I2lmZGVmIFVTRV9MT0dERVBUSEJVRl9FWFRcXG5cXHRcXHR2RnJhZ0RlcHRoID0gMS4wICsgZ2xfUG9zaXRpb24udztcXG5cXHQjZWxzZVxcblxcdFxcdGdsX1Bvc2l0aW9uLnogPSBsb2cyKCBtYXgoIEVQU0lMT04sIGdsX1Bvc2l0aW9uLncgKyAxLjAgKSApICogbG9nRGVwdGhCdWZGQyAtIDEuMDtcXG5cXHRcXHRnbF9Qb3NpdGlvbi56ICo9IGdsX1Bvc2l0aW9uLnc7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXCIsXG4gICAgbWFwX2ZyYWdtZW50OlwiI2lmZGVmIFVTRV9NQVBcXG5cXHR2ZWM0IHRleGVsQ29sb3IgPSB0ZXh0dXJlMkQoIG1hcCwgdlV2ICk7XFxuXFx0dGV4ZWxDb2xvciA9IG1hcFRleGVsVG9MaW5lYXIoIHRleGVsQ29sb3IgKTtcXG5cXHRkaWZmdXNlQ29sb3IgKj0gdGV4ZWxDb2xvcjtcXG4jZW5kaWZcXG5cIixtYXBfcGFyc19mcmFnbWVudDpcIiNpZmRlZiBVU0VfTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbWFwO1xcbiNlbmRpZlxcblwiLG1hcF9wYXJ0aWNsZV9mcmFnbWVudDpcIiNpZmRlZiBVU0VfTUFQXFxuXFx0dmVjMiB1diA9ICggdXZUcmFuc2Zvcm0gKiB2ZWMzKCBnbF9Qb2ludENvb3JkLngsIDEuMCAtIGdsX1BvaW50Q29vcmQueSwgMSApICkueHk7XFxuXFx0dmVjNCBtYXBUZXhlbCA9IHRleHR1cmUyRCggbWFwLCB1diApO1xcblxcdGRpZmZ1c2VDb2xvciAqPSBtYXBUZXhlbFRvTGluZWFyKCBtYXBUZXhlbCApO1xcbiNlbmRpZlxcblwiLG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50OlwiI2lmZGVmIFVTRV9NQVBcXG5cXHR1bmlmb3JtIG1hdDMgdXZUcmFuc2Zvcm07XFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbWFwO1xcbiNlbmRpZlxcblwiLFxuICAgIG1ldGFsbmVzc21hcF9mcmFnbWVudDpcImZsb2F0IG1ldGFsbmVzc0ZhY3RvciA9IG1ldGFsbmVzcztcXG4jaWZkZWYgVVNFX01FVEFMTkVTU01BUFxcblxcdHZlYzQgdGV4ZWxNZXRhbG5lc3MgPSB0ZXh0dXJlMkQoIG1ldGFsbmVzc01hcCwgdlV2ICk7XFxuXFx0bWV0YWxuZXNzRmFjdG9yICo9IHRleGVsTWV0YWxuZXNzLmI7XFxuI2VuZGlmXFxuXCIsbWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQ6XCIjaWZkZWYgVVNFX01FVEFMTkVTU01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG1ldGFsbmVzc01hcDtcXG4jZW5kaWZcIixtb3JwaG5vcm1hbF92ZXJ0ZXg6XCIjaWZkZWYgVVNFX01PUlBITk9STUFMU1xcblxcdG9iamVjdE5vcm1hbCArPSAoIG1vcnBoTm9ybWFsMCAtIG5vcm1hbCApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAwIF07XFxuXFx0b2JqZWN0Tm9ybWFsICs9ICggbW9ycGhOb3JtYWwxIC0gbm9ybWFsICkgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDEgXTtcXG5cXHRvYmplY3ROb3JtYWwgKz0gKCBtb3JwaE5vcm1hbDIgLSBub3JtYWwgKSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMiBdO1xcblxcdG9iamVjdE5vcm1hbCArPSAoIG1vcnBoTm9ybWFsMyAtIG5vcm1hbCApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAzIF07XFxuI2VuZGlmXFxuXCIsXG4gICAgbW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg6XCIjaWZkZWYgVVNFX01PUlBIVEFSR0VUU1xcblxcdCNpZm5kZWYgVVNFX01PUlBITk9STUFMU1xcblxcdHVuaWZvcm0gZmxvYXQgbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA4IF07XFxuXFx0I2Vsc2VcXG5cXHR1bmlmb3JtIGZsb2F0IG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgNCBdO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiLG1vcnBodGFyZ2V0X3ZlcnRleDpcIiNpZmRlZiBVU0VfTU9SUEhUQVJHRVRTXFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDAgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAwIF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDEgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAxIF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDIgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAyIF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDMgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAzIF07XFxuXFx0I2lmbmRlZiBVU0VfTU9SUEhOT1JNQUxTXFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDQgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA0IF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDUgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA1IF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDYgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA2IF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gKCBtb3JwaFRhcmdldDcgLSBwb3NpdGlvbiApICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA3IF07XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXCIsXG4gICAgbm9ybWFsX2ZyYWdtZW50OlwiI2lmZGVmIEZMQVRfU0hBREVEXFxuXFx0dmVjMyBmZHggPSB2ZWMzKCBkRmR4KCB2Vmlld1Bvc2l0aW9uLnggKSwgZEZkeCggdlZpZXdQb3NpdGlvbi55ICksIGRGZHgoIHZWaWV3UG9zaXRpb24ueiApICk7XFxuXFx0dmVjMyBmZHkgPSB2ZWMzKCBkRmR5KCB2Vmlld1Bvc2l0aW9uLnggKSwgZEZkeSggdlZpZXdQb3NpdGlvbi55ICksIGRGZHkoIHZWaWV3UG9zaXRpb24ueiApICk7XFxuXFx0dmVjMyBub3JtYWwgPSBub3JtYWxpemUoIGNyb3NzKCBmZHgsIGZkeSApICk7XFxuI2Vsc2VcXG5cXHR2ZWMzIG5vcm1hbCA9IG5vcm1hbGl6ZSggdk5vcm1hbCApO1xcblxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRub3JtYWwgPSBub3JtYWwgKiAoIGZsb2F0KCBnbF9Gcm9udEZhY2luZyApICogMi4wIC0gMS4wICk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9OT1JNQUxNQVBcXG5cXHRub3JtYWwgPSBwZXJ0dXJiTm9ybWFsMkFyYiggLXZWaWV3UG9zaXRpb24sIG5vcm1hbCApO1xcbiNlbGlmIGRlZmluZWQoIFVTRV9CVU1QTUFQIClcXG5cXHRub3JtYWwgPSBwZXJ0dXJiTm9ybWFsQXJiKCAtdlZpZXdQb3NpdGlvbiwgbm9ybWFsLCBkSGR4eV9md2QoKSApO1xcbiNlbmRpZlxcblwiLFxuICAgIG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50OlwiI2lmZGVmIFVTRV9OT1JNQUxNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBub3JtYWxNYXA7XFxuXFx0dW5pZm9ybSB2ZWMyIG5vcm1hbFNjYWxlO1xcblxcdHZlYzMgcGVydHVyYk5vcm1hbDJBcmIoIHZlYzMgZXllX3BvcywgdmVjMyBzdXJmX25vcm0gKSB7XFxuXFx0XFx0dmVjMyBxMCA9IHZlYzMoIGRGZHgoIGV5ZV9wb3MueCApLCBkRmR4KCBleWVfcG9zLnkgKSwgZEZkeCggZXllX3Bvcy56ICkgKTtcXG5cXHRcXHR2ZWMzIHExID0gdmVjMyggZEZkeSggZXllX3Bvcy54ICksIGRGZHkoIGV5ZV9wb3MueSApLCBkRmR5KCBleWVfcG9zLnogKSApO1xcblxcdFxcdHZlYzIgc3QwID0gZEZkeCggdlV2LnN0ICk7XFxuXFx0XFx0dmVjMiBzdDEgPSBkRmR5KCB2VXYuc3QgKTtcXG5cXHRcXHR2ZWMzIFMgPSBub3JtYWxpemUoIHEwICogc3QxLnQgLSBxMSAqIHN0MC50ICk7XFxuXFx0XFx0dmVjMyBUID0gbm9ybWFsaXplKCAtcTAgKiBzdDEucyArIHExICogc3QwLnMgKTtcXG5cXHRcXHR2ZWMzIE4gPSBub3JtYWxpemUoIHN1cmZfbm9ybSApO1xcblxcdFxcdHZlYzMgbWFwTiA9IHRleHR1cmUyRCggbm9ybWFsTWFwLCB2VXYgKS54eXogKiAyLjAgLSAxLjA7XFxuXFx0XFx0bWFwTi54eSA9IG5vcm1hbFNjYWxlICogbWFwTi54eTtcXG5cXHRcXHRtYXQzIHRzbiA9IG1hdDMoIFMsIFQsIE4gKTtcXG5cXHRcXHRyZXR1cm4gbm9ybWFsaXplKCB0c24gKiBtYXBOICk7XFxuXFx0fVxcbiNlbmRpZlxcblwiLFxuICAgIHBhY2tpbmc6XCJ2ZWMzIHBhY2tOb3JtYWxUb1JHQiggY29uc3QgaW4gdmVjMyBub3JtYWwgKSB7XFxuXFx0cmV0dXJuIG5vcm1hbGl6ZSggbm9ybWFsICkgKiAwLjUgKyAwLjU7XFxufVxcbnZlYzMgdW5wYWNrUkdCVG9Ob3JtYWwoIGNvbnN0IGluIHZlYzMgcmdiICkge1xcblxcdHJldHVybiAyLjAgKiByZ2IueHl6IC0gMS4wO1xcbn1cXG5jb25zdCBmbG9hdCBQYWNrVXBzY2FsZSA9IDI1Ni4gLyAyNTUuO2NvbnN0IGZsb2F0IFVucGFja0Rvd25zY2FsZSA9IDI1NS4gLyAyNTYuO1xcbmNvbnN0IHZlYzMgUGFja0ZhY3RvcnMgPSB2ZWMzKCAyNTYuICogMjU2LiAqIDI1Ni4sIDI1Ni4gKiAyNTYuLCAgMjU2LiApO1xcbmNvbnN0IHZlYzQgVW5wYWNrRmFjdG9ycyA9IFVucGFja0Rvd25zY2FsZSAvIHZlYzQoIFBhY2tGYWN0b3JzLCAxLiApO1xcbmNvbnN0IGZsb2F0IFNoaWZ0UmlnaHQ4ID0gMS4gLyAyNTYuO1xcbnZlYzQgcGFja0RlcHRoVG9SR0JBKCBjb25zdCBpbiBmbG9hdCB2ICkge1xcblxcdHZlYzQgciA9IHZlYzQoIGZyYWN0KCB2ICogUGFja0ZhY3RvcnMgKSwgdiApO1xcblxcdHIueXp3IC09IHIueHl6ICogU2hpZnRSaWdodDg7XFx0cmV0dXJuIHIgKiBQYWNrVXBzY2FsZTtcXG59XFxuZmxvYXQgdW5wYWNrUkdCQVRvRGVwdGgoIGNvbnN0IGluIHZlYzQgdiApIHtcXG5cXHRyZXR1cm4gZG90KCB2LCBVbnBhY2tGYWN0b3JzICk7XFxufVxcbmZsb2F0IHZpZXdaVG9PcnRob2dyYXBoaWNEZXB0aCggY29uc3QgaW4gZmxvYXQgdmlld1osIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gKCB2aWV3WiArIG5lYXIgKSAvICggbmVhciAtIGZhciApO1xcbn1cXG5mbG9hdCBvcnRob2dyYXBoaWNEZXB0aFRvVmlld1ooIGNvbnN0IGluIGZsb2F0IGxpbmVhckNsaXBaLCBjb25zdCBpbiBmbG9hdCBuZWFyLCBjb25zdCBpbiBmbG9hdCBmYXIgKSB7XFxuXFx0cmV0dXJuIGxpbmVhckNsaXBaICogKCBuZWFyIC0gZmFyICkgLSBuZWFyO1xcbn1cXG5mbG9hdCB2aWV3WlRvUGVyc3BlY3RpdmVEZXB0aCggY29uc3QgaW4gZmxvYXQgdmlld1osIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gKCggbmVhciArIHZpZXdaICkgKiBmYXIgKSAvICgoIGZhciAtIG5lYXIgKSAqIHZpZXdaICk7XFxufVxcbmZsb2F0IHBlcnNwZWN0aXZlRGVwdGhUb1ZpZXdaKCBjb25zdCBpbiBmbG9hdCBpbnZDbGlwWiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xcblxcdHJldHVybiAoIG5lYXIgKiBmYXIgKSAvICggKCBmYXIgLSBuZWFyICkgKiBpbnZDbGlwWiAtIGZhciApO1xcbn1cXG5cIixcbiAgICBwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50OlwiI2lmZGVmIFBSRU1VTFRJUExJRURfQUxQSEFcXG5cXHRnbF9GcmFnQ29sb3IucmdiICo9IGdsX0ZyYWdDb2xvci5hO1xcbiNlbmRpZlxcblwiLHByb2plY3RfdmVydGV4OlwidmVjNCBtdlBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNCggdHJhbnNmb3JtZWQsIDEuMCApO1xcbmdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XFxuXCIsZGl0aGVyaW5nX2ZyYWdtZW50OlwiI2lmIGRlZmluZWQoIERJVEhFUklORyApXFxuICBnbF9GcmFnQ29sb3IucmdiID0gZGl0aGVyaW5nKCBnbF9GcmFnQ29sb3IucmdiICk7XFxuI2VuZGlmXFxuXCIsZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ6XCIjaWYgZGVmaW5lZCggRElUSEVSSU5HIClcXG5cXHR2ZWMzIGRpdGhlcmluZyggdmVjMyBjb2xvciApIHtcXG5cXHRcXHRmbG9hdCBncmlkX3Bvc2l0aW9uID0gcmFuZCggZ2xfRnJhZ0Nvb3JkLnh5ICk7XFxuXFx0XFx0dmVjMyBkaXRoZXJfc2hpZnRfUkdCID0gdmVjMyggMC4yNSAvIDI1NS4wLCAtMC4yNSAvIDI1NS4wLCAwLjI1IC8gMjU1LjAgKTtcXG5cXHRcXHRkaXRoZXJfc2hpZnRfUkdCID0gbWl4KCAyLjAgKiBkaXRoZXJfc2hpZnRfUkdCLCAtMi4wICogZGl0aGVyX3NoaWZ0X1JHQiwgZ3JpZF9wb3NpdGlvbiApO1xcblxcdFxcdHJldHVybiBjb2xvciArIGRpdGhlcl9zaGlmdF9SR0I7XFxuXFx0fVxcbiNlbmRpZlxcblwiLFxuICAgIHJvdWdobmVzc21hcF9mcmFnbWVudDpcImZsb2F0IHJvdWdobmVzc0ZhY3RvciA9IHJvdWdobmVzcztcXG4jaWZkZWYgVVNFX1JPVUdITkVTU01BUFxcblxcdHZlYzQgdGV4ZWxSb3VnaG5lc3MgPSB0ZXh0dXJlMkQoIHJvdWdobmVzc01hcCwgdlV2ICk7XFxuXFx0cm91Z2huZXNzRmFjdG9yICo9IHRleGVsUm91Z2huZXNzLmc7XFxuI2VuZGlmXFxuXCIscm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQ6XCIjaWZkZWYgVVNFX1JPVUdITkVTU01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIHJvdWdobmVzc01hcDtcXG4jZW5kaWZcIixzaGFkb3dtYXBfcGFyc19mcmFnbWVudDpcIiNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0I2lmIE5VTV9ESVJfTElHSFRTID4gMFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIGRpcmVjdGlvbmFsU2hhZG93TWFwWyBOVU1fRElSX0xJR0hUUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgTlVNX0RJUl9MSUdIVFMgXTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1NQT1RfTElHSFRTID4gMFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIHNwb3RTaGFkb3dNYXBbIE5VTV9TUE9UX0xJR0hUUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2U3BvdFNoYWRvd0Nvb3JkWyBOVU1fU1BPVF9MSUdIVFMgXTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBwb2ludFNoYWRvd01hcFsgTlVNX1BPSU5UX0xJR0hUUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2UG9pbnRTaGFkb3dDb29yZFsgTlVNX1BPSU5UX0xJR0hUUyBdO1xcblxcdCNlbmRpZlxcblxcdGZsb2F0IHRleHR1cmUyRENvbXBhcmUoIHNhbXBsZXIyRCBkZXB0aHMsIHZlYzIgdXYsIGZsb2F0IGNvbXBhcmUgKSB7XFxuXFx0XFx0cmV0dXJuIHN0ZXAoIGNvbXBhcmUsIHVucGFja1JHQkFUb0RlcHRoKCB0ZXh0dXJlMkQoIGRlcHRocywgdXYgKSApICk7XFxuXFx0fVxcblxcdGZsb2F0IHRleHR1cmUyRFNoYWRvd0xlcnAoIHNhbXBsZXIyRCBkZXB0aHMsIHZlYzIgc2l6ZSwgdmVjMiB1diwgZmxvYXQgY29tcGFyZSApIHtcXG5cXHRcXHRjb25zdCB2ZWMyIG9mZnNldCA9IHZlYzIoIDAuMCwgMS4wICk7XFxuXFx0XFx0dmVjMiB0ZXhlbFNpemUgPSB2ZWMyKCAxLjAgKSAvIHNpemU7XFxuXFx0XFx0dmVjMiBjZW50cm9pZFVWID0gZmxvb3IoIHV2ICogc2l6ZSArIDAuNSApIC8gc2l6ZTtcXG5cXHRcXHRmbG9hdCBsYiA9IHRleHR1cmUyRENvbXBhcmUoIGRlcHRocywgY2VudHJvaWRVViArIHRleGVsU2l6ZSAqIG9mZnNldC54eCwgY29tcGFyZSApO1xcblxcdFxcdGZsb2F0IGx0ID0gdGV4dHVyZTJEQ29tcGFyZSggZGVwdGhzLCBjZW50cm9pZFVWICsgdGV4ZWxTaXplICogb2Zmc2V0Lnh5LCBjb21wYXJlICk7XFxuXFx0XFx0ZmxvYXQgcmIgPSB0ZXh0dXJlMkRDb21wYXJlKCBkZXB0aHMsIGNlbnRyb2lkVVYgKyB0ZXhlbFNpemUgKiBvZmZzZXQueXgsIGNvbXBhcmUgKTtcXG5cXHRcXHRmbG9hdCBydCA9IHRleHR1cmUyRENvbXBhcmUoIGRlcHRocywgY2VudHJvaWRVViArIHRleGVsU2l6ZSAqIG9mZnNldC55eSwgY29tcGFyZSApO1xcblxcdFxcdHZlYzIgZiA9IGZyYWN0KCB1diAqIHNpemUgKyAwLjUgKTtcXG5cXHRcXHRmbG9hdCBhID0gbWl4KCBsYiwgbHQsIGYueSApO1xcblxcdFxcdGZsb2F0IGIgPSBtaXgoIHJiLCBydCwgZi55ICk7XFxuXFx0XFx0ZmxvYXQgYyA9IG1peCggYSwgYiwgZi54ICk7XFxuXFx0XFx0cmV0dXJuIGM7XFxuXFx0fVxcblxcdGZsb2F0IGdldFNoYWRvdyggc2FtcGxlcjJEIHNoYWRvd01hcCwgdmVjMiBzaGFkb3dNYXBTaXplLCBmbG9hdCBzaGFkb3dCaWFzLCBmbG9hdCBzaGFkb3dSYWRpdXMsIHZlYzQgc2hhZG93Q29vcmQgKSB7XFxuXFx0XFx0ZmxvYXQgc2hhZG93ID0gMS4wO1xcblxcdFxcdHNoYWRvd0Nvb3JkLnh5eiAvPSBzaGFkb3dDb29yZC53O1xcblxcdFxcdHNoYWRvd0Nvb3JkLnogKz0gc2hhZG93QmlhcztcXG5cXHRcXHRidmVjNCBpbkZydXN0dW1WZWMgPSBidmVjNCAoIHNoYWRvd0Nvb3JkLnggPj0gMC4wLCBzaGFkb3dDb29yZC54IDw9IDEuMCwgc2hhZG93Q29vcmQueSA+PSAwLjAsIHNoYWRvd0Nvb3JkLnkgPD0gMS4wICk7XFxuXFx0XFx0Ym9vbCBpbkZydXN0dW0gPSBhbGwoIGluRnJ1c3R1bVZlYyApO1xcblxcdFxcdGJ2ZWMyIGZydXN0dW1UZXN0VmVjID0gYnZlYzIoIGluRnJ1c3R1bSwgc2hhZG93Q29vcmQueiA8PSAxLjAgKTtcXG5cXHRcXHRib29sIGZydXN0dW1UZXN0ID0gYWxsKCBmcnVzdHVtVGVzdFZlYyApO1xcblxcdFxcdGlmICggZnJ1c3R1bVRlc3QgKSB7XFxuXFx0XFx0I2lmIGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRiApXFxuXFx0XFx0XFx0dmVjMiB0ZXhlbFNpemUgPSB2ZWMyKCAxLjAgKSAvIHNoYWRvd01hcFNpemU7XFxuXFx0XFx0XFx0ZmxvYXQgZHgwID0gLSB0ZXhlbFNpemUueCAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeTAgPSAtIHRleGVsU2l6ZS55ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR4MSA9ICsgdGV4ZWxTaXplLnggKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHkxID0gKyB0ZXhlbFNpemUueSAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRzaGFkb3cgPSAoXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTEgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTEgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTEgKSwgc2hhZG93Q29vcmQueiApXFxuXFx0XFx0XFx0KSAqICggMS4wIC8gOS4wICk7XFxuXFx0XFx0I2VsaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGX1NPRlQgKVxcblxcdFxcdFxcdHZlYzIgdGV4ZWxTaXplID0gdmVjMiggMS4wICkgLyBzaGFkb3dNYXBTaXplO1xcblxcdFxcdFxcdGZsb2F0IGR4MCA9IC0gdGV4ZWxTaXplLnggKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHkwID0gLSB0ZXhlbFNpemUueSAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeDEgPSArIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR5MSA9ICsgdGV4ZWxTaXplLnkgKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0c2hhZG93ID0gKFxcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIGR5MCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCAwLjAsIGR5MCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDEsIGR5MCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHkgKyB2ZWMyKCBkeDAsIDAuMCApLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRFNoYWRvd0xlcnAoIHNoYWRvd01hcCwgc2hhZG93TWFwU2l6ZSwgc2hhZG93Q29vcmQueHksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkxICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkxICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEU2hhZG93TGVycCggc2hhZG93TWFwLCBzaGFkb3dNYXBTaXplLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgZHkxICksIHNoYWRvd0Nvb3JkLnogKVxcblxcdFxcdFxcdCkgKiAoIDEuMCAvIDkuMCApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0c2hhZG93ID0gdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSwgc2hhZG93Q29vcmQueiApO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdH1cXG5cXHRcXHRyZXR1cm4gc2hhZG93O1xcblxcdH1cXG5cXHR2ZWMyIGN1YmVUb1VWKCB2ZWMzIHYsIGZsb2F0IHRleGVsU2l6ZVkgKSB7XFxuXFx0XFx0dmVjMyBhYnNWID0gYWJzKCB2ICk7XFxuXFx0XFx0ZmxvYXQgc2NhbGVUb0N1YmUgPSAxLjAgLyBtYXgoIGFic1YueCwgbWF4KCBhYnNWLnksIGFic1YueiApICk7XFxuXFx0XFx0YWJzViAqPSBzY2FsZVRvQ3ViZTtcXG5cXHRcXHR2ICo9IHNjYWxlVG9DdWJlICogKCAxLjAgLSAyLjAgKiB0ZXhlbFNpemVZICk7XFxuXFx0XFx0dmVjMiBwbGFuYXIgPSB2Lnh5O1xcblxcdFxcdGZsb2F0IGFsbW9zdEFUZXhlbCA9IDEuNSAqIHRleGVsU2l6ZVk7XFxuXFx0XFx0ZmxvYXQgYWxtb3N0T25lID0gMS4wIC0gYWxtb3N0QVRleGVsO1xcblxcdFxcdGlmICggYWJzVi56ID49IGFsbW9zdE9uZSApIHtcXG5cXHRcXHRcXHRpZiAoIHYueiA+IDAuMCApXFxuXFx0XFx0XFx0XFx0cGxhbmFyLnggPSA0LjAgLSB2Lng7XFxuXFx0XFx0fSBlbHNlIGlmICggYWJzVi54ID49IGFsbW9zdE9uZSApIHtcXG5cXHRcXHRcXHRmbG9hdCBzaWduWCA9IHNpZ24oIHYueCApO1xcblxcdFxcdFxcdHBsYW5hci54ID0gdi56ICogc2lnblggKyAyLjAgKiBzaWduWDtcXG5cXHRcXHR9IGVsc2UgaWYgKCBhYnNWLnkgPj0gYWxtb3N0T25lICkge1xcblxcdFxcdFxcdGZsb2F0IHNpZ25ZID0gc2lnbiggdi55ICk7XFxuXFx0XFx0XFx0cGxhbmFyLnggPSB2LnggKyAyLjAgKiBzaWduWSArIDIuMDtcXG5cXHRcXHRcXHRwbGFuYXIueSA9IHYueiAqIHNpZ25ZIC0gMi4wO1xcblxcdFxcdH1cXG5cXHRcXHRyZXR1cm4gdmVjMiggMC4xMjUsIDAuMjUgKSAqIHBsYW5hciArIHZlYzIoIDAuMzc1LCAwLjc1ICk7XFxuXFx0fVxcblxcdGZsb2F0IGdldFBvaW50U2hhZG93KCBzYW1wbGVyMkQgc2hhZG93TWFwLCB2ZWMyIHNoYWRvd01hcFNpemUsIGZsb2F0IHNoYWRvd0JpYXMsIGZsb2F0IHNoYWRvd1JhZGl1cywgdmVjNCBzaGFkb3dDb29yZCwgZmxvYXQgc2hhZG93Q2FtZXJhTmVhciwgZmxvYXQgc2hhZG93Q2FtZXJhRmFyICkge1xcblxcdFxcdHZlYzIgdGV4ZWxTaXplID0gdmVjMiggMS4wICkgLyAoIHNoYWRvd01hcFNpemUgKiB2ZWMyKCA0LjAsIDIuMCApICk7XFxuXFx0XFx0dmVjMyBsaWdodFRvUG9zaXRpb24gPSBzaGFkb3dDb29yZC54eXo7XFxuXFx0XFx0ZmxvYXQgZHAgPSAoIGxlbmd0aCggbGlnaHRUb1Bvc2l0aW9uICkgLSBzaGFkb3dDYW1lcmFOZWFyICkgLyAoIHNoYWRvd0NhbWVyYUZhciAtIHNoYWRvd0NhbWVyYU5lYXIgKTtcXHRcXHRkcCArPSBzaGFkb3dCaWFzO1xcblxcdFxcdHZlYzMgYmQzRCA9IG5vcm1hbGl6ZSggbGlnaHRUb1Bvc2l0aW9uICk7XFxuXFx0XFx0I2lmIGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRiApIHx8IGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRl9TT0ZUIClcXG5cXHRcXHRcXHR2ZWMyIG9mZnNldCA9IHZlYzIoIC0gMSwgMSApICogc2hhZG93UmFkaXVzICogdGV4ZWxTaXplLnk7XFxuXFx0XFx0XFx0cmV0dXJuIChcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnh5eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eXksIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHl4LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl5eCwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eHksIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXh5LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnh4eCwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eHgsIHRleGVsU2l6ZS55ICksIGRwIClcXG5cXHRcXHRcXHQpICogKCAxLjAgLyA5LjAgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHJldHVybiB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNELCB0ZXhlbFNpemUueSApLCBkcCApO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG4jZW5kaWZcXG5cIixcbiAgICBzaGFkb3dtYXBfcGFyc192ZXJ0ZXg6XCIjaWZkZWYgVVNFX1NIQURPV01BUFxcblxcdCNpZiBOVU1fRElSX0xJR0hUUyA+IDBcXG5cXHRcXHR1bmlmb3JtIG1hdDQgZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXhbIE5VTV9ESVJfTElHSFRTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBOVU1fRElSX0xJR0hUUyBdO1xcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fU1BPVF9MSUdIVFMgPiAwXFxuXFx0XFx0dW5pZm9ybSBtYXQ0IHNwb3RTaGFkb3dNYXRyaXhbIE5VTV9TUE9UX0xJR0hUUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2U3BvdFNoYWRvd0Nvb3JkWyBOVU1fU1BPVF9MSUdIVFMgXTtcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHRcXHR1bmlmb3JtIG1hdDQgcG9pbnRTaGFkb3dNYXRyaXhbIE5VTV9QT0lOVF9MSUdIVFMgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdlBvaW50U2hhZG93Q29vcmRbIE5VTV9QT0lOVF9MSUdIVFMgXTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cIixcbiAgICBzaGFkb3dtYXBfdmVydGV4OlwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVFMgPiAwXFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0RJUl9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0dkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIGkgXSA9IGRpcmVjdGlvbmFsU2hhZG93TWF0cml4WyBpIF0gKiB3b3JsZFBvc2l0aW9uO1xcblxcdH1cXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1NQT1RfTElHSFRTID4gMFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHR2U3BvdFNoYWRvd0Nvb3JkWyBpIF0gPSBzcG90U2hhZG93TWF0cml4WyBpIF0gKiB3b3JsZFBvc2l0aW9uO1xcblxcdH1cXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHZQb2ludFNoYWRvd0Nvb3JkWyBpIF0gPSBwb2ludFNoYWRvd01hdHJpeFsgaSBdICogd29ybGRQb3NpdGlvbjtcXG5cXHR9XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXCIsXG4gICAgc2hhZG93bWFza19wYXJzX2ZyYWdtZW50OlwiZmxvYXQgZ2V0U2hhZG93TWFzaygpIHtcXG5cXHRmbG9hdCBzaGFkb3cgPSAxLjA7XFxuXFx0I2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVFMgPiAwXFxuXFx0RGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0O1xcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9ESVJfTElHSFRTOyBpICsrICkge1xcblxcdFxcdGRpcmVjdGlvbmFsTGlnaHQgPSBkaXJlY3Rpb25hbExpZ2h0c1sgaSBdO1xcblxcdFxcdHNoYWRvdyAqPSBib29sKCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdyApID8gZ2V0U2hhZG93KCBkaXJlY3Rpb25hbFNoYWRvd01hcFsgaSBdLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd01hcFNpemUsIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93QmlhcywgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dSYWRpdXMsIHZEaXJlY3Rpb25hbFNoYWRvd0Nvb3JkWyBpIF0gKSA6IDEuMDtcXG5cXHR9XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9TUE9UX0xJR0hUUyA+IDBcXG5cXHRTcG90TGlnaHQgc3BvdExpZ2h0O1xcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRzcG90TGlnaHQgPSBzcG90TGlnaHRzWyBpIF07XFxuXFx0XFx0c2hhZG93ICo9IGJvb2woIHNwb3RMaWdodC5zaGFkb3cgKSA/IGdldFNoYWRvdyggc3BvdFNoYWRvd01hcFsgaSBdLCBzcG90TGlnaHQuc2hhZG93TWFwU2l6ZSwgc3BvdExpZ2h0LnNoYWRvd0JpYXMsIHNwb3RMaWdodC5zaGFkb3dSYWRpdXMsIHZTcG90U2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdH1cXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHRQb2ludExpZ2h0IHBvaW50TGlnaHQ7XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRwb2ludExpZ2h0ID0gcG9pbnRMaWdodHNbIGkgXTtcXG5cXHRcXHRzaGFkb3cgKj0gYm9vbCggcG9pbnRMaWdodC5zaGFkb3cgKSA/IGdldFBvaW50U2hhZG93KCBwb2ludFNoYWRvd01hcFsgaSBdLCBwb2ludExpZ2h0LnNoYWRvd01hcFNpemUsIHBvaW50TGlnaHQuc2hhZG93QmlhcywgcG9pbnRMaWdodC5zaGFkb3dSYWRpdXMsIHZQb2ludFNoYWRvd0Nvb3JkWyBpIF0sIHBvaW50TGlnaHQuc2hhZG93Q2FtZXJhTmVhciwgcG9pbnRMaWdodC5zaGFkb3dDYW1lcmFGYXIgKSA6IDEuMDtcXG5cXHR9XFxuXFx0I2VuZGlmXFxuXFx0I2VuZGlmXFxuXFx0cmV0dXJuIHNoYWRvdztcXG59XFxuXCIsXG4gICAgc2tpbmJhc2VfdmVydGV4OlwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdG1hdDQgYm9uZU1hdFggPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgueCApO1xcblxcdG1hdDQgYm9uZU1hdFkgPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgueSApO1xcblxcdG1hdDQgYm9uZU1hdFogPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgueiApO1xcblxcdG1hdDQgYm9uZU1hdFcgPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgudyApO1xcbiNlbmRpZlwiLHNraW5uaW5nX3BhcnNfdmVydGV4OlwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdHVuaWZvcm0gbWF0NCBiaW5kTWF0cml4O1xcblxcdHVuaWZvcm0gbWF0NCBiaW5kTWF0cml4SW52ZXJzZTtcXG5cXHQjaWZkZWYgQk9ORV9URVhUVVJFXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyMkQgYm9uZVRleHR1cmU7XFxuXFx0XFx0dW5pZm9ybSBpbnQgYm9uZVRleHR1cmVTaXplO1xcblxcdFxcdG1hdDQgZ2V0Qm9uZU1hdHJpeCggY29uc3QgaW4gZmxvYXQgaSApIHtcXG5cXHRcXHRcXHRmbG9hdCBqID0gaSAqIDQuMDtcXG5cXHRcXHRcXHRmbG9hdCB4ID0gbW9kKCBqLCBmbG9hdCggYm9uZVRleHR1cmVTaXplICkgKTtcXG5cXHRcXHRcXHRmbG9hdCB5ID0gZmxvb3IoIGogLyBmbG9hdCggYm9uZVRleHR1cmVTaXplICkgKTtcXG5cXHRcXHRcXHRmbG9hdCBkeCA9IDEuMCAvIGZsb2F0KCBib25lVGV4dHVyZVNpemUgKTtcXG5cXHRcXHRcXHRmbG9hdCBkeSA9IDEuMCAvIGZsb2F0KCBib25lVGV4dHVyZVNpemUgKTtcXG5cXHRcXHRcXHR5ID0gZHkgKiAoIHkgKyAwLjUgKTtcXG5cXHRcXHRcXHR2ZWM0IHYxID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAwLjUgKSwgeSApICk7XFxuXFx0XFx0XFx0dmVjNCB2MiA9IHRleHR1cmUyRCggYm9uZVRleHR1cmUsIHZlYzIoIGR4ICogKCB4ICsgMS41ICksIHkgKSApO1xcblxcdFxcdFxcdHZlYzQgdjMgPSB0ZXh0dXJlMkQoIGJvbmVUZXh0dXJlLCB2ZWMyKCBkeCAqICggeCArIDIuNSApLCB5ICkgKTtcXG5cXHRcXHRcXHR2ZWM0IHY0ID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAzLjUgKSwgeSApICk7XFxuXFx0XFx0XFx0bWF0NCBib25lID0gbWF0NCggdjEsIHYyLCB2MywgdjQgKTtcXG5cXHRcXHRcXHRyZXR1cm4gYm9uZTtcXG5cXHRcXHR9XFxuXFx0I2Vsc2VcXG5cXHRcXHR1bmlmb3JtIG1hdDQgYm9uZU1hdHJpY2VzWyBNQVhfQk9ORVMgXTtcXG5cXHRcXHRtYXQ0IGdldEJvbmVNYXRyaXgoIGNvbnN0IGluIGZsb2F0IGkgKSB7XFxuXFx0XFx0XFx0bWF0NCBib25lID0gYm9uZU1hdHJpY2VzWyBpbnQoaSkgXTtcXG5cXHRcXHRcXHRyZXR1cm4gYm9uZTtcXG5cXHRcXHR9XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuXCIsXG4gICAgc2tpbm5pbmdfdmVydGV4OlwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdHZlYzQgc2tpblZlcnRleCA9IGJpbmRNYXRyaXggKiB2ZWM0KCB0cmFuc2Zvcm1lZCwgMS4wICk7XFxuXFx0dmVjNCBza2lubmVkID0gdmVjNCggMC4wICk7XFxuXFx0c2tpbm5lZCArPSBib25lTWF0WCAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lng7XFxuXFx0c2tpbm5lZCArPSBib25lTWF0WSAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lnk7XFxuXFx0c2tpbm5lZCArPSBib25lTWF0WiAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lno7XFxuXFx0c2tpbm5lZCArPSBib25lTWF0VyAqIHNraW5WZXJ0ZXggKiBza2luV2VpZ2h0Lnc7XFxuXFx0dHJhbnNmb3JtZWQgPSAoIGJpbmRNYXRyaXhJbnZlcnNlICogc2tpbm5lZCApLnh5ejtcXG4jZW5kaWZcXG5cIixza2lubm9ybWFsX3ZlcnRleDpcIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXHRtYXQ0IHNraW5NYXRyaXggPSBtYXQ0KCAwLjAgKTtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQueCAqIGJvbmVNYXRYO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC55ICogYm9uZU1hdFk7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LnogKiBib25lTWF0WjtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQudyAqIGJvbmVNYXRXO1xcblxcdHNraW5NYXRyaXggID0gYmluZE1hdHJpeEludmVyc2UgKiBza2luTWF0cml4ICogYmluZE1hdHJpeDtcXG5cXHRvYmplY3ROb3JtYWwgPSB2ZWM0KCBza2luTWF0cml4ICogdmVjNCggb2JqZWN0Tm9ybWFsLCAwLjAgKSApLnh5ejtcXG4jZW5kaWZcXG5cIixcbiAgICBzcGVjdWxhcm1hcF9mcmFnbWVudDpcImZsb2F0IHNwZWN1bGFyU3RyZW5ndGg7XFxuI2lmZGVmIFVTRV9TUEVDVUxBUk1BUFxcblxcdHZlYzQgdGV4ZWxTcGVjdWxhciA9IHRleHR1cmUyRCggc3BlY3VsYXJNYXAsIHZVdiApO1xcblxcdHNwZWN1bGFyU3RyZW5ndGggPSB0ZXhlbFNwZWN1bGFyLnI7XFxuI2Vsc2VcXG5cXHRzcGVjdWxhclN0cmVuZ3RoID0gMS4wO1xcbiNlbmRpZlwiLHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ6XCIjaWZkZWYgVVNFX1NQRUNVTEFSTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgc3BlY3VsYXJNYXA7XFxuI2VuZGlmXCIsdG9uZW1hcHBpbmdfZnJhZ21lbnQ6XCIjaWYgZGVmaW5lZCggVE9ORV9NQVBQSU5HIClcXG4gIGdsX0ZyYWdDb2xvci5yZ2IgPSB0b25lTWFwcGluZyggZ2xfRnJhZ0NvbG9yLnJnYiApO1xcbiNlbmRpZlxcblwiLHRvbmVtYXBwaW5nX3BhcnNfZnJhZ21lbnQ6XCIjaWZuZGVmIHNhdHVyYXRlXFxuXFx0I2RlZmluZSBzYXR1cmF0ZShhKSBjbGFtcCggYSwgMC4wLCAxLjAgKVxcbiNlbmRpZlxcbnVuaWZvcm0gZmxvYXQgdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG51bmlmb3JtIGZsb2F0IHRvbmVNYXBwaW5nV2hpdGVQb2ludDtcXG52ZWMzIExpbmVhclRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdHJldHVybiB0b25lTWFwcGluZ0V4cG9zdXJlICogY29sb3I7XFxufVxcbnZlYzMgUmVpbmhhcmRUb25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRjb2xvciAqPSB0b25lTWFwcGluZ0V4cG9zdXJlO1xcblxcdHJldHVybiBzYXR1cmF0ZSggY29sb3IgLyAoIHZlYzMoIDEuMCApICsgY29sb3IgKSApO1xcbn1cXG4jZGVmaW5lIFVuY2hhcnRlZDJIZWxwZXIoIHggKSBtYXgoICggKCB4ICogKCAwLjE1ICogeCArIDAuMTAgKiAwLjUwICkgKyAwLjIwICogMC4wMiApIC8gKCB4ICogKCAwLjE1ICogeCArIDAuNTAgKSArIDAuMjAgKiAwLjMwICkgKSAtIDAuMDIgLyAwLjMwLCB2ZWMzKCAwLjAgKSApXFxudmVjMyBVbmNoYXJ0ZWQyVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG5cXHRyZXR1cm4gc2F0dXJhdGUoIFVuY2hhcnRlZDJIZWxwZXIoIGNvbG9yICkgLyBVbmNoYXJ0ZWQySGVscGVyKCB2ZWMzKCB0b25lTWFwcGluZ1doaXRlUG9pbnQgKSApICk7XFxufVxcbnZlYzMgT3B0aW1pemVkQ2luZW9uVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG5cXHRjb2xvciA9IG1heCggdmVjMyggMC4wICksIGNvbG9yIC0gMC4wMDQgKTtcXG5cXHRyZXR1cm4gcG93KCAoIGNvbG9yICogKCA2LjIgKiBjb2xvciArIDAuNSApICkgLyAoIGNvbG9yICogKCA2LjIgKiBjb2xvciArIDEuNyApICsgMC4wNiApLCB2ZWMzKCAyLjIgKSApO1xcbn1cXG5cIixcbiAgICB1dl9wYXJzX2ZyYWdtZW50OlwiI2lmIGRlZmluZWQoIFVTRV9NQVAgKSB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFVTRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBVU0VfU1BFQ1VMQVJNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQUxQSEFNQVAgKSB8fCBkZWZpbmVkKCBVU0VfRU1JU1NJVkVNQVAgKSB8fCBkZWZpbmVkKCBVU0VfUk9VR0hORVNTTUFQICkgfHwgZGVmaW5lZCggVVNFX01FVEFMTkVTU01BUCApXFxuXFx0dmFyeWluZyB2ZWMyIHZVdjtcXG4jZW5kaWZcIix1dl9wYXJzX3ZlcnRleDpcIiNpZiBkZWZpbmVkKCBVU0VfTUFQICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggVVNFX1NQRUNVTEFSTUFQICkgfHwgZGVmaW5lZCggVVNFX0FMUEhBTUFQICkgfHwgZGVmaW5lZCggVVNFX0VNSVNTSVZFTUFQICkgfHwgZGVmaW5lZCggVVNFX1JPVUdITkVTU01BUCApIHx8IGRlZmluZWQoIFVTRV9NRVRBTE5FU1NNQVAgKVxcblxcdHZhcnlpbmcgdmVjMiB2VXY7XFxuXFx0dW5pZm9ybSBtYXQzIHV2VHJhbnNmb3JtO1xcbiNlbmRpZlxcblwiLFxuICAgIHV2X3ZlcnRleDpcIiNpZiBkZWZpbmVkKCBVU0VfTUFQICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggVVNFX1NQRUNVTEFSTUFQICkgfHwgZGVmaW5lZCggVVNFX0FMUEhBTUFQICkgfHwgZGVmaW5lZCggVVNFX0VNSVNTSVZFTUFQICkgfHwgZGVmaW5lZCggVVNFX1JPVUdITkVTU01BUCApIHx8IGRlZmluZWQoIFVTRV9NRVRBTE5FU1NNQVAgKVxcblxcdHZVdiA9ICggdXZUcmFuc2Zvcm0gKiB2ZWMzKCB1diwgMSApICkueHk7XFxuI2VuZGlmXCIsdXYyX3BhcnNfZnJhZ21lbnQ6XCIjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcXG5cXHR2YXJ5aW5nIHZlYzIgdlV2MjtcXG4jZW5kaWZcIix1djJfcGFyc192ZXJ0ZXg6XCIjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcXG5cXHRhdHRyaWJ1dGUgdmVjMiB1djI7XFxuXFx0dmFyeWluZyB2ZWMyIHZVdjI7XFxuI2VuZGlmXCIsXG4gICAgdXYyX3ZlcnRleDpcIiNpZiBkZWZpbmVkKCBVU0VfTElHSFRNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQU9NQVAgKVxcblxcdHZVdjIgPSB1djI7XFxuI2VuZGlmXCIsd29ybGRwb3NfdmVydGV4OlwiI2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKSB8fCBkZWZpbmVkKCBESVNUQU5DRSApIHx8IGRlZmluZWQgKCBVU0VfU0hBRE9XTUFQIClcXG5cXHR2ZWM0IHdvcmxkUG9zaXRpb24gPSBtb2RlbE1hdHJpeCAqIHZlYzQoIHRyYW5zZm9ybWVkLCAxLjAgKTtcXG4jZW5kaWZcXG5cIixjdWJlX2ZyYWc6XCJ1bmlmb3JtIHNhbXBsZXJDdWJlIHRDdWJlO1xcbnVuaWZvcm0gZmxvYXQgdEZsaXA7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG52b2lkIG1haW4oKSB7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdGV4dHVyZUN1YmUoIHRDdWJlLCB2ZWMzKCB0RmxpcCAqIHZXb3JsZFBvc2l0aW9uLngsIHZXb3JsZFBvc2l0aW9uLnl6ICkgKTtcXG5cXHRnbF9GcmFnQ29sb3IuYSAqPSBvcGFjaXR5O1xcbn1cXG5cIixcbiAgICBjdWJlX3ZlcnQ6XCJ2YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG52b2lkIG1haW4oKSB7XFxuXFx0dldvcmxkUG9zaXRpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIHBvc2l0aW9uLCBtb2RlbE1hdHJpeCApO1xcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdGdsX1Bvc2l0aW9uLnogPSBnbF9Qb3NpdGlvbi53O1xcbn1cXG5cIixkZXB0aF9mcmFnOlwiI2lmIERFUFRIX1BBQ0tJTkcgPT0gMzIwMFxcblxcdHVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCAxLjAgKTtcXG5cXHQjaWYgREVQVEhfUEFDS0lORyA9PSAzMjAwXFxuXFx0XFx0ZGlmZnVzZUNvbG9yLmEgPSBvcGFjaXR5O1xcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpZiBERVBUSF9QQUNLSU5HID09IDMyMDBcXG5cXHRcXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCB2ZWMzKCBnbF9GcmFnQ29vcmQueiApLCBvcGFjaXR5ICk7XFxuXFx0I2VsaWYgREVQVEhfUEFDS0lORyA9PSAzMjAxXFxuXFx0XFx0Z2xfRnJhZ0NvbG9yID0gcGFja0RlcHRoVG9SR0JBKCBnbF9GcmFnQ29vcmQueiApO1xcblxcdCNlbmRpZlxcbn1cXG5cIixcbiAgICBkZXB0aF92ZXJ0OlwiI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2lmZGVmIFVTRV9ESVNQTEFDRU1FTlRNQVBcXG5cXHRcXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0XFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4Plxcbn1cXG5cIixcbiAgICBkaXN0YW5jZVJHQkFfZnJhZzpcIiNkZWZpbmUgRElTVEFOQ0VcXG51bmlmb3JtIHZlYzMgcmVmZXJlbmNlUG9zaXRpb247XFxudW5pZm9ybSBmbG9hdCBuZWFyRGlzdGFuY2U7XFxudW5pZm9ybSBmbG9hdCBmYXJEaXN0YW5jZTtcXG52YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbiAoKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIDEuMCApO1xcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0ZmxvYXQgZGlzdCA9IGxlbmd0aCggdldvcmxkUG9zaXRpb24gLSByZWZlcmVuY2VQb3NpdGlvbiApO1xcblxcdGRpc3QgPSAoIGRpc3QgLSBuZWFyRGlzdGFuY2UgKSAvICggZmFyRGlzdGFuY2UgLSBuZWFyRGlzdGFuY2UgKTtcXG5cXHRkaXN0ID0gc2F0dXJhdGUoIGRpc3QgKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSBwYWNrRGVwdGhUb1JHQkEoIGRpc3QgKTtcXG59XFxuXCIsXG4gICAgZGlzdGFuY2VSR0JBX3ZlcnQ6XCIjZGVmaW5lIERJU1RBTkNFXFxudmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2lmZGVmIFVTRV9ESVNQTEFDRU1FTlRNQVBcXG5cXHRcXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0XFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdHZXb3JsZFBvc2l0aW9uID0gd29ybGRQb3NpdGlvbi54eXo7XFxufVxcblwiLFxuICAgIGVxdWlyZWN0X2ZyYWc6XCJ1bmlmb3JtIHNhbXBsZXIyRCB0RXF1aXJlY3Q7XFxudmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxudm9pZCBtYWluKCkge1xcblxcdHZlYzMgZGlyZWN0aW9uID0gbm9ybWFsaXplKCB2V29ybGRQb3NpdGlvbiApO1xcblxcdHZlYzIgc2FtcGxlVVY7XFxuXFx0c2FtcGxlVVYueSA9IGFzaW4oIGNsYW1wKCBkaXJlY3Rpb24ueSwgLSAxLjAsIDEuMCApICkgKiBSRUNJUFJPQ0FMX1BJICsgMC41O1xcblxcdHNhbXBsZVVWLnggPSBhdGFuKCBkaXJlY3Rpb24ueiwgZGlyZWN0aW9uLnggKSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xcblxcdGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCggdEVxdWlyZWN0LCBzYW1wbGVVViApO1xcbn1cXG5cIixlcXVpcmVjdF92ZXJ0OlwidmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxudm9pZCBtYWluKCkge1xcblxcdHZXb3JsZFBvc2l0aW9uID0gdHJhbnNmb3JtRGlyZWN0aW9uKCBwb3NpdGlvbiwgbW9kZWxNYXRyaXggKTtcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG59XFxuXCIsXG4gICAgbGluZWRhc2hlZF9mcmFnOlwidW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnVuaWZvcm0gZmxvYXQgZGFzaFNpemU7XFxudW5pZm9ybSBmbG9hdCB0b3RhbFNpemU7XFxudmFyeWluZyBmbG9hdCB2TGluZURpc3RhbmNlO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHRpZiAoIG1vZCggdkxpbmVEaXN0YW5jZSwgdG90YWxTaXplICkgPiBkYXNoU2l6ZSApIHtcXG5cXHRcXHRkaXNjYXJkO1xcblxcdH1cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdG91dGdvaW5nTGlnaHQgPSBkaWZmdXNlQ29sb3IucmdiO1xcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG59XFxuXCIsXG4gICAgbGluZWRhc2hlZF92ZXJ0OlwidW5pZm9ybSBmbG9hdCBzY2FsZTtcXG5hdHRyaWJ1dGUgZmxvYXQgbGluZURpc3RhbmNlO1xcbnZhcnlpbmcgZmxvYXQgdkxpbmVEaXN0YW5jZTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdHZMaW5lRGlzdGFuY2UgPSBzY2FsZSAqIGxpbmVEaXN0YW5jZTtcXG5cXHR2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XFxuXFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cXG5cIixcbiAgICBtZXNoYmFzaWNfZnJhZzpcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHQjaWZkZWYgVVNFX0xJR0hUTUFQXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IHRleHR1cmUyRCggbGlnaHRNYXAsIHZVdjIgKS54eXogKiBsaWdodE1hcEludGVuc2l0eTtcXG5cXHQjZWxzZVxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSB2ZWMzKCAxLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICo9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlO1xcblxcdCNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cXG5cIixcbiAgICBtZXNoYmFzaWNfdmVydDpcIiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1djJfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx1djJfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaWZkZWYgVVNFX0VOVk1BUFxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcblxcdCNlbmRpZlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGVudm1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVxcblwiLFxuICAgIG1lc2hsYW1iZXJ0X2ZyYWc6XCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIHZlYzMgZW1pc3NpdmU7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnZhcnlpbmcgdmVjMyB2TGlnaHRGcm9udDtcXG4jaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZMaWdodEJhY2s7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJzZGZzPlxcbiNpbmNsdWRlIDxsaWdodHNfcGFycz5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XFxuXFx0dmVjMyB0b3RhbEVtaXNzaXZlUmFkaWFuY2UgPSBlbWlzc2l2ZTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHNwZWN1bGFybWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgPSBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBhbWJpZW50TGlnaHRDb2xvciApO1xcblxcdCNpbmNsdWRlIDxsaWdodG1hcF9mcmFnbWVudD5cXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKj0gQlJERl9EaWZmdXNlX0xhbWJlcnQoIGRpZmZ1c2VDb2xvci5yZ2IgKTtcXG5cXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSA9ICggZ2xfRnJvbnRGYWNpbmcgKSA/IHZMaWdodEZyb250IDogdkxpZ2h0QmFjaztcXG5cXHQjZWxzZVxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgPSB2TGlnaHRGcm9udDtcXG5cXHQjZW5kaWZcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICo9IEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBkaWZmdXNlQ29sb3IucmdiICkgKiBnZXRTaGFkb3dNYXNrKCk7XFxuXFx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKyB0b3RhbEVtaXNzaXZlUmFkaWFuY2U7XFxuXFx0I2luY2x1ZGUgPGVudm1hcF9mcmFnbWVudD5cXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cXG59XFxuXCIsXG4gICAgbWVzaGxhbWJlcnRfdmVydDpcIiNkZWZpbmUgTEFNQkVSVFxcbnZhcnlpbmcgdmVjMyB2TGlnaHRGcm9udDtcXG4jaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZMaWdodEJhY2s7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8bGlnaHRzX3BhcnM+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx1djJfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxlbnZtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfbGFtYmVydF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVxcblwiLFxuICAgIG1lc2hwaG9uZ19mcmFnOlwiI2RlZmluZSBQSE9OR1xcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIHZlYzMgc3BlY3VsYXI7XFxudW5pZm9ybSBmbG9hdCBzaGluaW5lc3M7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1djJfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzPlxcbiNpbmNsdWRlIDxsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XFxuXFx0dmVjMyB0b3RhbEVtaXNzaXZlUmFkaWFuY2UgPSBlbWlzc2l2ZTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHNwZWN1bGFybWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfcGhvbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c190ZW1wbGF0ZT5cXG5cXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArIHRvdGFsRW1pc3NpdmVSYWRpYW5jZTtcXG5cXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cXG5cIixcbiAgICBtZXNocGhvbmdfdmVydDpcIiNkZWZpbmUgUEhPTkdcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx1djJfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcXG4jZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxlbnZtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cXG5cIixcbiAgICBtZXNocGh5c2ljYWxfZnJhZzpcIiNkZWZpbmUgUEhZU0lDQUxcXG51bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIHZlYzMgZW1pc3NpdmU7XFxudW5pZm9ybSBmbG9hdCByb3VnaG5lc3M7XFxudW5pZm9ybSBmbG9hdCBtZXRhbG5lc3M7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpZm5kZWYgU1RBTkRBUkRcXG5cXHR1bmlmb3JtIGZsb2F0IGNsZWFyQ29hdDtcXG5cXHR1bmlmb3JtIGZsb2F0IGNsZWFyQ29hdFJvdWdobmVzcztcXG4jZW5kaWZcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxic2Rmcz5cXG4jaW5jbHVkZSA8Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodHNfcGFycz5cXG4jaW5jbHVkZSA8bGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxyb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XFxuXFx0dmVjMyB0b3RhbEVtaXNzaXZlUmFkaWFuY2UgPSBlbWlzc2l2ZTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHJvdWdobmVzc21hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWV0YWxuZXNzbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c190ZW1wbGF0ZT5cXG5cXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArIHRvdGFsRW1pc3NpdmVSYWRpYW5jZTtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cXG59XFxuXCIsXG4gICAgbWVzaHBoeXNpY2FsX3ZlcnQ6XCIjZGVmaW5lIFBIWVNJQ0FMXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1djJfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHV2Ml92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2Tm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xcbiNlbmRpZlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVxcblwiLFxuICAgIG5vcm1hbF9mcmFnOlwiI2RlZmluZSBOT1JNQUxcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2lmIGRlZmluZWQoIEZMQVRfU0hBREVEICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQIClcXG5cXHR2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jZW5kaWZcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50PlxcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIHBhY2tOb3JtYWxUb1JHQiggbm9ybWFsICksIG9wYWNpdHkgKTtcXG59XFxuXCIsXG4gICAgbm9ybWFsX3ZlcnQ6XCIjZGVmaW5lIE5PUk1BTFxcbiNpZiBkZWZpbmVkKCBGTEFUX1NIQURFRCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVVNFX05PUk1BTE1BUCApXFxuXFx0dmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2VuZGlmXFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZOb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XFxuI2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuI2lmIGRlZmluZWQoIEZMQVRfU0hBREVEICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQIClcXG5cXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcXG4jZW5kaWZcXG59XFxuXCIsXG4gICAgcG9pbnRzX2ZyYWc6XCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnRpY2xlX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gdmVjMyggMC4wICk7XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfcGFydGljbGVfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50Plxcbn1cXG5cIixcbiAgICBwb2ludHNfdmVydDpcInVuaWZvcm0gZmxvYXQgc2l6ZTtcXG51bmlmb3JtIGZsb2F0IHNjYWxlO1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaWZkZWYgVVNFX1NJWkVBVFRFTlVBVElPTlxcblxcdFxcdGdsX1BvaW50U2l6ZSA9IHNpemUgKiAoIHNjYWxlIC8gLSBtdlBvc2l0aW9uLnogKTtcXG5cXHQjZWxzZVxcblxcdFxcdGdsX1BvaW50U2l6ZSA9IHNpemU7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cXG5cIixcbiAgICBzaGFkb3dfZnJhZzpcInVuaWZvcm0gdmVjMyBjb2xvcjtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJzZGZzPlxcbiNpbmNsdWRlIDxsaWdodHNfcGFycz5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hc2tfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggY29sb3IsIG9wYWNpdHkgKiAoIDEuMCAtIGdldFNoYWRvd01hc2soKSApICk7XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG59XFxuXCIsc2hhZG93X3ZlcnQ6XCIjaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNoYWRvd21hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVxcblwifSxcbiAgICB0Yj17YmFzaWM6e3VuaWZvcm1zOkdhLm1lcmdlKFtLLmNvbW1vbixLLnNwZWN1bGFybWFwLEsuZW52bWFwLEsuYW9tYXAsSy5saWdodG1hcCxLLmZvZ10pLHZlcnRleFNoYWRlcjpSLm1lc2hiYXNpY192ZXJ0LGZyYWdtZW50U2hhZGVyOlIubWVzaGJhc2ljX2ZyYWd9LGxhbWJlcnQ6e3VuaWZvcm1zOkdhLm1lcmdlKFtLLmNvbW1vbixLLnNwZWN1bGFybWFwLEsuZW52bWFwLEsuYW9tYXAsSy5saWdodG1hcCxLLmVtaXNzaXZlbWFwLEsuZm9nLEsubGlnaHRzLHtlbWlzc2l2ZTp7dmFsdWU6bmV3IEgoMCl9fV0pLHZlcnRleFNoYWRlcjpSLm1lc2hsYW1iZXJ0X3ZlcnQsZnJhZ21lbnRTaGFkZXI6Ui5tZXNobGFtYmVydF9mcmFnfSxwaG9uZzp7dW5pZm9ybXM6R2EubWVyZ2UoW0suY29tbW9uLEsuc3BlY3VsYXJtYXAsSy5lbnZtYXAsSy5hb21hcCxLLmxpZ2h0bWFwLEsuZW1pc3NpdmVtYXAsSy5idW1wbWFwLEsubm9ybWFsbWFwLEsuZGlzcGxhY2VtZW50bWFwLEsuZ3JhZGllbnRtYXAsXG4gICAgSy5mb2csSy5saWdodHMse2VtaXNzaXZlOnt2YWx1ZTpuZXcgSCgwKX0sc3BlY3VsYXI6e3ZhbHVlOm5ldyBIKDExMTg0ODEpfSxzaGluaW5lc3M6e3ZhbHVlOjMwfX1dKSx2ZXJ0ZXhTaGFkZXI6Ui5tZXNocGhvbmdfdmVydCxmcmFnbWVudFNoYWRlcjpSLm1lc2hwaG9uZ19mcmFnfSxzdGFuZGFyZDp7dW5pZm9ybXM6R2EubWVyZ2UoW0suY29tbW9uLEsuZW52bWFwLEsuYW9tYXAsSy5saWdodG1hcCxLLmVtaXNzaXZlbWFwLEsuYnVtcG1hcCxLLm5vcm1hbG1hcCxLLmRpc3BsYWNlbWVudG1hcCxLLnJvdWdobmVzc21hcCxLLm1ldGFsbmVzc21hcCxLLmZvZyxLLmxpZ2h0cyx7ZW1pc3NpdmU6e3ZhbHVlOm5ldyBIKDApfSxyb3VnaG5lc3M6e3ZhbHVlOi41fSxtZXRhbG5lc3M6e3ZhbHVlOi41fSxlbnZNYXBJbnRlbnNpdHk6e3ZhbHVlOjF9fV0pLHZlcnRleFNoYWRlcjpSLm1lc2hwaHlzaWNhbF92ZXJ0LGZyYWdtZW50U2hhZGVyOlIubWVzaHBoeXNpY2FsX2ZyYWd9LHBvaW50czp7dW5pZm9ybXM6R2EubWVyZ2UoW0sucG9pbnRzLFxuICAgIEsuZm9nXSksdmVydGV4U2hhZGVyOlIucG9pbnRzX3ZlcnQsZnJhZ21lbnRTaGFkZXI6Ui5wb2ludHNfZnJhZ30sZGFzaGVkOnt1bmlmb3JtczpHYS5tZXJnZShbSy5jb21tb24sSy5mb2cse3NjYWxlOnt2YWx1ZToxfSxkYXNoU2l6ZTp7dmFsdWU6MX0sdG90YWxTaXplOnt2YWx1ZToyfX1dKSx2ZXJ0ZXhTaGFkZXI6Ui5saW5lZGFzaGVkX3ZlcnQsZnJhZ21lbnRTaGFkZXI6Ui5saW5lZGFzaGVkX2ZyYWd9LGRlcHRoOnt1bmlmb3JtczpHYS5tZXJnZShbSy5jb21tb24sSy5kaXNwbGFjZW1lbnRtYXBdKSx2ZXJ0ZXhTaGFkZXI6Ui5kZXB0aF92ZXJ0LGZyYWdtZW50U2hhZGVyOlIuZGVwdGhfZnJhZ30sbm9ybWFsOnt1bmlmb3JtczpHYS5tZXJnZShbSy5jb21tb24sSy5idW1wbWFwLEsubm9ybWFsbWFwLEsuZGlzcGxhY2VtZW50bWFwLHtvcGFjaXR5Ont2YWx1ZToxfX1dKSx2ZXJ0ZXhTaGFkZXI6Ui5ub3JtYWxfdmVydCxmcmFnbWVudFNoYWRlcjpSLm5vcm1hbF9mcmFnfSxjdWJlOnt1bmlmb3Jtczp7dEN1YmU6e3ZhbHVlOm51bGx9LFxuICAgIHRGbGlwOnt2YWx1ZTotMX0sb3BhY2l0eTp7dmFsdWU6MX19LHZlcnRleFNoYWRlcjpSLmN1YmVfdmVydCxmcmFnbWVudFNoYWRlcjpSLmN1YmVfZnJhZ30sZXF1aXJlY3Q6e3VuaWZvcm1zOnt0RXF1aXJlY3Q6e3ZhbHVlOm51bGx9fSx2ZXJ0ZXhTaGFkZXI6Ui5lcXVpcmVjdF92ZXJ0LGZyYWdtZW50U2hhZGVyOlIuZXF1aXJlY3RfZnJhZ30sZGlzdGFuY2VSR0JBOnt1bmlmb3JtczpHYS5tZXJnZShbSy5jb21tb24sSy5kaXNwbGFjZW1lbnRtYXAse3JlZmVyZW5jZVBvc2l0aW9uOnt2YWx1ZTpuZXcgcH0sbmVhckRpc3RhbmNlOnt2YWx1ZToxfSxmYXJEaXN0YW5jZTp7dmFsdWU6MUUzfX1dKSx2ZXJ0ZXhTaGFkZXI6Ui5kaXN0YW5jZVJHQkFfdmVydCxmcmFnbWVudFNoYWRlcjpSLmRpc3RhbmNlUkdCQV9mcmFnfSxzaGFkb3c6e3VuaWZvcm1zOkdhLm1lcmdlKFtLLmxpZ2h0cyxLLmZvZyx7Y29sb3I6e3ZhbHVlOm5ldyBIKDApfSxvcGFjaXR5Ont2YWx1ZToxfX1dKSx2ZXJ0ZXhTaGFkZXI6Ui5zaGFkb3dfdmVydCxcbiAgICBmcmFnbWVudFNoYWRlcjpSLnNoYWRvd19mcmFnfX07dGIucGh5c2ljYWw9e3VuaWZvcm1zOkdhLm1lcmdlKFt0Yi5zdGFuZGFyZC51bmlmb3Jtcyx7Y2xlYXJDb2F0Ont2YWx1ZTowfSxjbGVhckNvYXRSb3VnaG5lc3M6e3ZhbHVlOjB9fV0pLHZlcnRleFNoYWRlcjpSLm1lc2hwaHlzaWNhbF92ZXJ0LGZyYWdtZW50U2hhZGVyOlIubWVzaHBoeXNpY2FsX2ZyYWd9O09iamVjdC5hc3NpZ24ob2QucHJvdG90eXBlLHtzZXQ6ZnVuY3Rpb24oYSxiKXt0aGlzLm1pbi5jb3B5KGEpO3RoaXMubWF4LmNvcHkoYik7cmV0dXJuIHRoaXN9LHNldEZyb21Qb2ludHM6ZnVuY3Rpb24oYSl7dGhpcy5tYWtlRW1wdHkoKTtmb3IodmFyIGI9MCxjPWEubGVuZ3RoO2I8YztiKyspdGhpcy5leHBhbmRCeVBvaW50KGFbYl0pO3JldHVybiB0aGlzfSxzZXRGcm9tQ2VudGVyQW5kU2l6ZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBEO3JldHVybiBmdW5jdGlvbihiLGMpe2M9YS5jb3B5KGMpLm11bHRpcGx5U2NhbGFyKC41KTtcbiAgICB0aGlzLm1pbi5jb3B5KGIpLnN1YihjKTt0aGlzLm1heC5jb3B5KGIpLmFkZChjKTtyZXR1cm4gdGhpc319KCksY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyl9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5taW4uY29weShhLm1pbik7dGhpcy5tYXguY29weShhLm1heCk7cmV0dXJuIHRoaXN9LG1ha2VFbXB0eTpmdW5jdGlvbigpe3RoaXMubWluLng9dGhpcy5taW4ueT1JbmZpbml0eTt0aGlzLm1heC54PXRoaXMubWF4Lnk9LUluZmluaXR5O3JldHVybiB0aGlzfSxpc0VtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWF4Lng8dGhpcy5taW4ueHx8dGhpcy5tYXgueTx0aGlzLm1pbi55fSxnZXRDZW50ZXI6ZnVuY3Rpb24oYSl7YT1hfHxuZXcgRDtyZXR1cm4gdGhpcy5pc0VtcHR5KCk/YS5zZXQoMCwwKTphLmFkZFZlY3RvcnModGhpcy5taW4sdGhpcy5tYXgpLm11bHRpcGx5U2NhbGFyKC41KX0sZ2V0U2l6ZTpmdW5jdGlvbihhKXthPVxuICAgIGF8fG5ldyBEO3JldHVybiB0aGlzLmlzRW1wdHkoKT9hLnNldCgwLDApOmEuc3ViVmVjdG9ycyh0aGlzLm1heCx0aGlzLm1pbil9LGV4cGFuZEJ5UG9pbnQ6ZnVuY3Rpb24oYSl7dGhpcy5taW4ubWluKGEpO3RoaXMubWF4Lm1heChhKTtyZXR1cm4gdGhpc30sZXhwYW5kQnlWZWN0b3I6ZnVuY3Rpb24oYSl7dGhpcy5taW4uc3ViKGEpO3RoaXMubWF4LmFkZChhKTtyZXR1cm4gdGhpc30sZXhwYW5kQnlTY2FsYXI6ZnVuY3Rpb24oYSl7dGhpcy5taW4uYWRkU2NhbGFyKC1hKTt0aGlzLm1heC5hZGRTY2FsYXIoYSk7cmV0dXJuIHRoaXN9LGNvbnRhaW5zUG9pbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEueDx0aGlzLm1pbi54fHxhLng+dGhpcy5tYXgueHx8YS55PHRoaXMubWluLnl8fGEueT50aGlzLm1heC55PyExOiEwfSxjb250YWluc0JveDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5taW4ueDw9YS5taW4ueCYmYS5tYXgueDw9dGhpcy5tYXgueCYmdGhpcy5taW4ueTw9YS5taW4ueSYmYS5tYXgueTw9XG4gICAgdGhpcy5tYXgueX0sZ2V0UGFyYW1ldGVyOmZ1bmN0aW9uKGEsYil7cmV0dXJuKGJ8fG5ldyBEKS5zZXQoKGEueC10aGlzLm1pbi54KS8odGhpcy5tYXgueC10aGlzLm1pbi54KSwoYS55LXRoaXMubWluLnkpLyh0aGlzLm1heC55LXRoaXMubWluLnkpKX0saW50ZXJzZWN0c0JveDpmdW5jdGlvbihhKXtyZXR1cm4gYS5tYXgueDx0aGlzLm1pbi54fHxhLm1pbi54PnRoaXMubWF4Lnh8fGEubWF4Lnk8dGhpcy5taW4ueXx8YS5taW4ueT50aGlzLm1heC55PyExOiEwfSxjbGFtcFBvaW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuKGJ8fG5ldyBEKS5jb3B5KGEpLmNsYW1wKHRoaXMubWluLHRoaXMubWF4KX0sZGlzdGFuY2VUb1BvaW50OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IEQ7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiBhLmNvcHkoYikuY2xhbXAodGhpcy5taW4sdGhpcy5tYXgpLnN1YihiKS5sZW5ndGgoKX19KCksaW50ZXJzZWN0OmZ1bmN0aW9uKGEpe3RoaXMubWluLm1heChhLm1pbik7XG4gICAgdGhpcy5tYXgubWluKGEubWF4KTtyZXR1cm4gdGhpc30sdW5pb246ZnVuY3Rpb24oYSl7dGhpcy5taW4ubWluKGEubWluKTt0aGlzLm1heC5tYXgoYS5tYXgpO3JldHVybiB0aGlzfSx0cmFuc2xhdGU6ZnVuY3Rpb24oYSl7dGhpcy5taW4uYWRkKGEpO3RoaXMubWF4LmFkZChhKTtyZXR1cm4gdGhpc30sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLm1pbi5lcXVhbHModGhpcy5taW4pJiZhLm1heC5lcXVhbHModGhpcy5tYXgpfX0pO3RjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFUucHJvdG90eXBlKTt0Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9dGM7dmFyIGFnPTA7UC5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHphLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOlAsaXNNYXRlcmlhbDohMCxvbkJlZm9yZUNvbXBpbGU6ZnVuY3Rpb24oKXt9LHNldFZhbHVlczpmdW5jdGlvbihhKXtpZih2b2lkIDAhPT1hKWZvcih2YXIgYiBpbiBhKXt2YXIgYz1hW2JdO2lmKHZvaWQgMD09PVxuICAgIGMpY29uc29sZS53YXJuKFwiVEhSRUUuTWF0ZXJpYWw6ICdcIitiK1wiJyBwYXJhbWV0ZXIgaXMgdW5kZWZpbmVkLlwiKTtlbHNlIGlmKFwic2hhZGluZ1wiPT09Yiljb25zb2xlLndhcm4oXCJUSFJFRS5cIit0aGlzLnR5cGUrXCI6IC5zaGFkaW5nIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB0aGUgYm9vbGVhbiAuZmxhdFNoYWRpbmcgaW5zdGVhZC5cIiksdGhpcy5mbGF0U2hhZGluZz0xPT09Yz8hMDohMTtlbHNle3ZhciBkPXRoaXNbYl07dm9pZCAwPT09ZD9jb25zb2xlLndhcm4oXCJUSFJFRS5cIit0aGlzLnR5cGUrXCI6ICdcIitiK1wiJyBpcyBub3QgYSBwcm9wZXJ0eSBvZiB0aGlzIG1hdGVyaWFsLlwiKTpkJiZkLmlzQ29sb3I/ZC5zZXQoYyk6ZCYmZC5pc1ZlY3RvcjMmJmMmJmMuaXNWZWN0b3IzP2QuY29weShjKTp0aGlzW2JdPVwib3ZlcmRyYXdcIj09PWI/TnVtYmVyKGMpOmN9fX0sdG9KU09OOmZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYSl7dmFyIGI9W10sYztmb3IoYyBpbiBhKXt2YXIgZD1hW2NdO2RlbGV0ZSBkLm1ldGFkYXRhO1xuICAgIGIucHVzaChkKX1yZXR1cm4gYn12YXIgYz12b2lkIDA9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGE7YyYmKGE9e3RleHR1cmVzOnt9LGltYWdlczp7fX0pO3ZhciBkPXttZXRhZGF0YTp7dmVyc2lvbjo0LjUsdHlwZTpcIk1hdGVyaWFsXCIsZ2VuZXJhdG9yOlwiTWF0ZXJpYWwudG9KU09OXCJ9fTtkLnV1aWQ9dGhpcy51dWlkO2QudHlwZT10aGlzLnR5cGU7XCJcIiE9PXRoaXMubmFtZSYmKGQubmFtZT10aGlzLm5hbWUpO3RoaXMuY29sb3ImJnRoaXMuY29sb3IuaXNDb2xvciYmKGQuY29sb3I9dGhpcy5jb2xvci5nZXRIZXgoKSk7dm9pZCAwIT09dGhpcy5yb3VnaG5lc3MmJihkLnJvdWdobmVzcz10aGlzLnJvdWdobmVzcyk7dm9pZCAwIT09dGhpcy5tZXRhbG5lc3MmJihkLm1ldGFsbmVzcz10aGlzLm1ldGFsbmVzcyk7dGhpcy5lbWlzc2l2ZSYmdGhpcy5lbWlzc2l2ZS5pc0NvbG9yJiYoZC5lbWlzc2l2ZT10aGlzLmVtaXNzaXZlLmdldEhleCgpKTsxIT09dGhpcy5lbWlzc2l2ZUludGVuc2l0eSYmXG4gICAgKGQuZW1pc3NpdmVJbnRlbnNpdHk9dGhpcy5lbWlzc2l2ZUludGVuc2l0eSk7dGhpcy5zcGVjdWxhciYmdGhpcy5zcGVjdWxhci5pc0NvbG9yJiYoZC5zcGVjdWxhcj10aGlzLnNwZWN1bGFyLmdldEhleCgpKTt2b2lkIDAhPT10aGlzLnNoaW5pbmVzcyYmKGQuc2hpbmluZXNzPXRoaXMuc2hpbmluZXNzKTt2b2lkIDAhPT10aGlzLmNsZWFyQ29hdCYmKGQuY2xlYXJDb2F0PXRoaXMuY2xlYXJDb2F0KTt2b2lkIDAhPT10aGlzLmNsZWFyQ29hdFJvdWdobmVzcyYmKGQuY2xlYXJDb2F0Um91Z2huZXNzPXRoaXMuY2xlYXJDb2F0Um91Z2huZXNzKTt0aGlzLm1hcCYmdGhpcy5tYXAuaXNUZXh0dXJlJiYoZC5tYXA9dGhpcy5tYXAudG9KU09OKGEpLnV1aWQpO3RoaXMuYWxwaGFNYXAmJnRoaXMuYWxwaGFNYXAuaXNUZXh0dXJlJiYoZC5hbHBoYU1hcD10aGlzLmFscGhhTWFwLnRvSlNPTihhKS51dWlkKTt0aGlzLmxpZ2h0TWFwJiZ0aGlzLmxpZ2h0TWFwLmlzVGV4dHVyZSYmKGQubGlnaHRNYXA9XG4gICAgdGhpcy5saWdodE1hcC50b0pTT04oYSkudXVpZCk7dGhpcy5idW1wTWFwJiZ0aGlzLmJ1bXBNYXAuaXNUZXh0dXJlJiYoZC5idW1wTWFwPXRoaXMuYnVtcE1hcC50b0pTT04oYSkudXVpZCxkLmJ1bXBTY2FsZT10aGlzLmJ1bXBTY2FsZSk7dGhpcy5ub3JtYWxNYXAmJnRoaXMubm9ybWFsTWFwLmlzVGV4dHVyZSYmKGQubm9ybWFsTWFwPXRoaXMubm9ybWFsTWFwLnRvSlNPTihhKS51dWlkLGQubm9ybWFsU2NhbGU9dGhpcy5ub3JtYWxTY2FsZS50b0FycmF5KCkpO3RoaXMuZGlzcGxhY2VtZW50TWFwJiZ0aGlzLmRpc3BsYWNlbWVudE1hcC5pc1RleHR1cmUmJihkLmRpc3BsYWNlbWVudE1hcD10aGlzLmRpc3BsYWNlbWVudE1hcC50b0pTT04oYSkudXVpZCxkLmRpc3BsYWNlbWVudFNjYWxlPXRoaXMuZGlzcGxhY2VtZW50U2NhbGUsZC5kaXNwbGFjZW1lbnRCaWFzPXRoaXMuZGlzcGxhY2VtZW50Qmlhcyk7dGhpcy5yb3VnaG5lc3NNYXAmJnRoaXMucm91Z2huZXNzTWFwLmlzVGV4dHVyZSYmXG4gICAgKGQucm91Z2huZXNzTWFwPXRoaXMucm91Z2huZXNzTWFwLnRvSlNPTihhKS51dWlkKTt0aGlzLm1ldGFsbmVzc01hcCYmdGhpcy5tZXRhbG5lc3NNYXAuaXNUZXh0dXJlJiYoZC5tZXRhbG5lc3NNYXA9dGhpcy5tZXRhbG5lc3NNYXAudG9KU09OKGEpLnV1aWQpO3RoaXMuZW1pc3NpdmVNYXAmJnRoaXMuZW1pc3NpdmVNYXAuaXNUZXh0dXJlJiYoZC5lbWlzc2l2ZU1hcD10aGlzLmVtaXNzaXZlTWFwLnRvSlNPTihhKS51dWlkKTt0aGlzLnNwZWN1bGFyTWFwJiZ0aGlzLnNwZWN1bGFyTWFwLmlzVGV4dHVyZSYmKGQuc3BlY3VsYXJNYXA9dGhpcy5zcGVjdWxhck1hcC50b0pTT04oYSkudXVpZCk7dGhpcy5lbnZNYXAmJnRoaXMuZW52TWFwLmlzVGV4dHVyZSYmKGQuZW52TWFwPXRoaXMuZW52TWFwLnRvSlNPTihhKS51dWlkLGQucmVmbGVjdGl2aXR5PXRoaXMucmVmbGVjdGl2aXR5KTt0aGlzLmdyYWRpZW50TWFwJiZ0aGlzLmdyYWRpZW50TWFwLmlzVGV4dHVyZSYmKGQuZ3JhZGllbnRNYXA9XG4gICAgdGhpcy5ncmFkaWVudE1hcC50b0pTT04oYSkudXVpZCk7dm9pZCAwIT09dGhpcy5zaXplJiYoZC5zaXplPXRoaXMuc2l6ZSk7dm9pZCAwIT09dGhpcy5zaXplQXR0ZW51YXRpb24mJihkLnNpemVBdHRlbnVhdGlvbj10aGlzLnNpemVBdHRlbnVhdGlvbik7MSE9PXRoaXMuYmxlbmRpbmcmJihkLmJsZW5kaW5nPXRoaXMuYmxlbmRpbmcpOyEwPT09dGhpcy5mbGF0U2hhZGluZyYmKGQuZmxhdFNoYWRpbmc9dGhpcy5mbGF0U2hhZGluZyk7MCE9PXRoaXMuc2lkZSYmKGQuc2lkZT10aGlzLnNpZGUpOzAhPT10aGlzLnZlcnRleENvbG9ycyYmKGQudmVydGV4Q29sb3JzPXRoaXMudmVydGV4Q29sb3JzKTsxPnRoaXMub3BhY2l0eSYmKGQub3BhY2l0eT10aGlzLm9wYWNpdHkpOyEwPT09dGhpcy50cmFuc3BhcmVudCYmKGQudHJhbnNwYXJlbnQ9dGhpcy50cmFuc3BhcmVudCk7ZC5kZXB0aEZ1bmM9dGhpcy5kZXB0aEZ1bmM7ZC5kZXB0aFRlc3Q9dGhpcy5kZXB0aFRlc3Q7ZC5kZXB0aFdyaXRlPVxuICAgIHRoaXMuZGVwdGhXcml0ZTswIT09dGhpcy5yb3RhdGlvbiYmKGQucm90YXRpb249dGhpcy5yb3RhdGlvbik7MSE9PXRoaXMubGluZXdpZHRoJiYoZC5saW5ld2lkdGg9dGhpcy5saW5ld2lkdGgpO3ZvaWQgMCE9PXRoaXMuZGFzaFNpemUmJihkLmRhc2hTaXplPXRoaXMuZGFzaFNpemUpO3ZvaWQgMCE9PXRoaXMuZ2FwU2l6ZSYmKGQuZ2FwU2l6ZT10aGlzLmdhcFNpemUpO3ZvaWQgMCE9PXRoaXMuc2NhbGUmJihkLnNjYWxlPXRoaXMuc2NhbGUpOyEwPT09dGhpcy5kaXRoZXJpbmcmJihkLmRpdGhlcmluZz0hMCk7MDx0aGlzLmFscGhhVGVzdCYmKGQuYWxwaGFUZXN0PXRoaXMuYWxwaGFUZXN0KTshMD09PXRoaXMucHJlbXVsdGlwbGllZEFscGhhJiYoZC5wcmVtdWx0aXBsaWVkQWxwaGE9dGhpcy5wcmVtdWx0aXBsaWVkQWxwaGEpOyEwPT09dGhpcy53aXJlZnJhbWUmJihkLndpcmVmcmFtZT10aGlzLndpcmVmcmFtZSk7MTx0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCYmKGQud2lyZWZyYW1lTGluZXdpZHRoPVxuICAgIHRoaXMud2lyZWZyYW1lTGluZXdpZHRoKTtcInJvdW5kXCIhPT10aGlzLndpcmVmcmFtZUxpbmVjYXAmJihkLndpcmVmcmFtZUxpbmVjYXA9dGhpcy53aXJlZnJhbWVMaW5lY2FwKTtcInJvdW5kXCIhPT10aGlzLndpcmVmcmFtZUxpbmVqb2luJiYoZC53aXJlZnJhbWVMaW5lam9pbj10aGlzLndpcmVmcmFtZUxpbmVqb2luKTshMD09PXRoaXMubW9ycGhUYXJnZXRzJiYoZC5tb3JwaFRhcmdldHM9ITApOyEwPT09dGhpcy5za2lubmluZyYmKGQuc2tpbm5pbmc9ITApOyExPT09dGhpcy52aXNpYmxlJiYoZC52aXNpYmxlPSExKTtcInt9XCIhPT1KU09OLnN0cmluZ2lmeSh0aGlzLnVzZXJEYXRhKSYmKGQudXNlckRhdGE9dGhpcy51c2VyRGF0YSk7YyYmKGM9YihhLnRleHR1cmVzKSxhPWIoYS5pbWFnZXMpLDA8Yy5sZW5ndGgmJihkLnRleHR1cmVzPWMpLDA8YS5sZW5ndGgmJihkLmltYWdlcz1hKSk7cmV0dXJuIGR9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5jb3B5KHRoaXMpfSxcbiAgICBjb3B5OmZ1bmN0aW9uKGEpe3RoaXMubmFtZT1hLm5hbWU7dGhpcy5mb2c9YS5mb2c7dGhpcy5saWdodHM9YS5saWdodHM7dGhpcy5ibGVuZGluZz1hLmJsZW5kaW5nO3RoaXMuc2lkZT1hLnNpZGU7dGhpcy5mbGF0U2hhZGluZz1hLmZsYXRTaGFkaW5nO3RoaXMudmVydGV4Q29sb3JzPWEudmVydGV4Q29sb3JzO3RoaXMub3BhY2l0eT1hLm9wYWNpdHk7dGhpcy50cmFuc3BhcmVudD1hLnRyYW5zcGFyZW50O3RoaXMuYmxlbmRTcmM9YS5ibGVuZFNyYzt0aGlzLmJsZW5kRHN0PWEuYmxlbmREc3Q7dGhpcy5ibGVuZEVxdWF0aW9uPWEuYmxlbmRFcXVhdGlvbjt0aGlzLmJsZW5kU3JjQWxwaGE9YS5ibGVuZFNyY0FscGhhO3RoaXMuYmxlbmREc3RBbHBoYT1hLmJsZW5kRHN0QWxwaGE7dGhpcy5ibGVuZEVxdWF0aW9uQWxwaGE9YS5ibGVuZEVxdWF0aW9uQWxwaGE7dGhpcy5kZXB0aEZ1bmM9YS5kZXB0aEZ1bmM7dGhpcy5kZXB0aFRlc3Q9YS5kZXB0aFRlc3Q7dGhpcy5kZXB0aFdyaXRlPWEuZGVwdGhXcml0ZTtcbiAgICB0aGlzLmNvbG9yV3JpdGU9YS5jb2xvcldyaXRlO3RoaXMucHJlY2lzaW9uPWEucHJlY2lzaW9uO3RoaXMucG9seWdvbk9mZnNldD1hLnBvbHlnb25PZmZzZXQ7dGhpcy5wb2x5Z29uT2Zmc2V0RmFjdG9yPWEucG9seWdvbk9mZnNldEZhY3Rvcjt0aGlzLnBvbHlnb25PZmZzZXRVbml0cz1hLnBvbHlnb25PZmZzZXRVbml0czt0aGlzLmRpdGhlcmluZz1hLmRpdGhlcmluZzt0aGlzLmFscGhhVGVzdD1hLmFscGhhVGVzdDt0aGlzLnByZW11bHRpcGxpZWRBbHBoYT1hLnByZW11bHRpcGxpZWRBbHBoYTt0aGlzLm92ZXJkcmF3PWEub3ZlcmRyYXc7dGhpcy52aXNpYmxlPWEudmlzaWJsZTt0aGlzLnVzZXJEYXRhPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYS51c2VyRGF0YSkpO3RoaXMuY2xpcFNoYWRvd3M9YS5jbGlwU2hhZG93czt0aGlzLmNsaXBJbnRlcnNlY3Rpb249YS5jbGlwSW50ZXJzZWN0aW9uO2E9YS5jbGlwcGluZ1BsYW5lczt2YXIgYj1udWxsO2lmKG51bGwhPT1hKWZvcih2YXIgYz1cbiAgICBhLmxlbmd0aCxiPUFycmF5KGMpLGQ9MDtkIT09YzsrK2QpYltkXT1hW2RdLmNsb25lKCk7dGhpcy5jbGlwcGluZ1BsYW5lcz1iO3JldHVybiB0aGlzfSxkaXNwb3NlOmZ1bmN0aW9uKCl7dGhpcy5kaXNwYXRjaEV2ZW50KHt0eXBlOlwiZGlzcG9zZVwifSl9fSk7ZWIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoUC5wcm90b3R5cGUpO2ViLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1lYjtlYi5wcm90b3R5cGUuaXNNZXNoRGVwdGhNYXRlcmlhbD0hMDtlYi5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtQLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmRlcHRoUGFja2luZz1hLmRlcHRoUGFja2luZzt0aGlzLnNraW5uaW5nPWEuc2tpbm5pbmc7dGhpcy5tb3JwaFRhcmdldHM9YS5tb3JwaFRhcmdldHM7dGhpcy5tYXA9YS5tYXA7dGhpcy5hbHBoYU1hcD1hLmFscGhhTWFwO3RoaXMuZGlzcGxhY2VtZW50TWFwPWEuZGlzcGxhY2VtZW50TWFwO3RoaXMuZGlzcGxhY2VtZW50U2NhbGU9XG4gICAgYS5kaXNwbGFjZW1lbnRTY2FsZTt0aGlzLmRpc3BsYWNlbWVudEJpYXM9YS5kaXNwbGFjZW1lbnRCaWFzO3RoaXMud2lyZWZyYW1lPWEud2lyZWZyYW1lO3RoaXMud2lyZWZyYW1lTGluZXdpZHRoPWEud2lyZWZyYW1lTGluZXdpZHRoO3JldHVybiB0aGlzfTtmYi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShQLnByb3RvdHlwZSk7ZmIucHJvdG90eXBlLmNvbnN0cnVjdG9yPWZiO2ZiLnByb3RvdHlwZS5pc01lc2hEaXN0YW5jZU1hdGVyaWFsPSEwO2ZiLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe1AucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMucmVmZXJlbmNlUG9zaXRpb24uY29weShhLnJlZmVyZW5jZVBvc2l0aW9uKTt0aGlzLm5lYXJEaXN0YW5jZT1hLm5lYXJEaXN0YW5jZTt0aGlzLmZhckRpc3RhbmNlPWEuZmFyRGlzdGFuY2U7dGhpcy5za2lubmluZz1hLnNraW5uaW5nO3RoaXMubW9ycGhUYXJnZXRzPWEubW9ycGhUYXJnZXRzO3RoaXMubWFwPWEubWFwO3RoaXMuYWxwaGFNYXA9XG4gICAgYS5hbHBoYU1hcDt0aGlzLmRpc3BsYWNlbWVudE1hcD1hLmRpc3BsYWNlbWVudE1hcDt0aGlzLmRpc3BsYWNlbWVudFNjYWxlPWEuZGlzcGxhY2VtZW50U2NhbGU7dGhpcy5kaXNwbGFjZW1lbnRCaWFzPWEuZGlzcGxhY2VtZW50QmlhcztyZXR1cm4gdGhpc307T2JqZWN0LmFzc2lnbihYYS5wcm90b3R5cGUse2lzQm94MzohMCxzZXQ6ZnVuY3Rpb24oYSxiKXt0aGlzLm1pbi5jb3B5KGEpO3RoaXMubWF4LmNvcHkoYik7cmV0dXJuIHRoaXN9LHNldEZyb21BcnJheTpmdW5jdGlvbihhKXtmb3IodmFyIGI9SW5maW5pdHksYz1JbmZpbml0eSxkPUluZmluaXR5LGU9LUluZmluaXR5LGY9LUluZmluaXR5LGc9LUluZmluaXR5LGg9MCxrPWEubGVuZ3RoO2g8aztoKz0zKXt2YXIgbT1hW2hdLHE9YVtoKzFdLGw9YVtoKzJdO208YiYmKGI9bSk7cTxjJiYoYz1xKTtsPGQmJihkPWwpO20+ZSYmKGU9bSk7cT5mJiYoZj1xKTtsPmcmJihnPWwpfXRoaXMubWluLnNldChiLGMsZCk7dGhpcy5tYXguc2V0KGUsXG4gICAgZixnKTtyZXR1cm4gdGhpc30sc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZTpmdW5jdGlvbihhKXtmb3IodmFyIGI9SW5maW5pdHksYz1JbmZpbml0eSxkPUluZmluaXR5LGU9LUluZmluaXR5LGY9LUluZmluaXR5LGc9LUluZmluaXR5LGg9MCxrPWEuY291bnQ7aDxrO2grKyl7dmFyIG09YS5nZXRYKGgpLHE9YS5nZXRZKGgpLGw9YS5nZXRaKGgpO208YiYmKGI9bSk7cTxjJiYoYz1xKTtsPGQmJihkPWwpO20+ZSYmKGU9bSk7cT5mJiYoZj1xKTtsPmcmJihnPWwpfXRoaXMubWluLnNldChiLGMsZCk7dGhpcy5tYXguc2V0KGUsZixnKTtyZXR1cm4gdGhpc30sc2V0RnJvbVBvaW50czpmdW5jdGlvbihhKXt0aGlzLm1ha2VFbXB0eSgpO2Zvcih2YXIgYj0wLGM9YS5sZW5ndGg7YjxjO2IrKyl0aGlzLmV4cGFuZEJ5UG9pbnQoYVtiXSk7cmV0dXJuIHRoaXN9LHNldEZyb21DZW50ZXJBbmRTaXplOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7Yz1hLmNvcHkoYykubXVsdGlwbHlTY2FsYXIoLjUpO1xuICAgIHRoaXMubWluLmNvcHkoYikuc3ViKGMpO3RoaXMubWF4LmNvcHkoYikuYWRkKGMpO3JldHVybiB0aGlzfX0oKSxzZXRGcm9tT2JqZWN0OmZ1bmN0aW9uKGEpe3RoaXMubWFrZUVtcHR5KCk7cmV0dXJuIHRoaXMuZXhwYW5kQnlPYmplY3QoYSl9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5jb3B5KHRoaXMpfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMubWluLmNvcHkoYS5taW4pO3RoaXMubWF4LmNvcHkoYS5tYXgpO3JldHVybiB0aGlzfSxtYWtlRW1wdHk6ZnVuY3Rpb24oKXt0aGlzLm1pbi54PXRoaXMubWluLnk9dGhpcy5taW4uej1JbmZpbml0eTt0aGlzLm1heC54PXRoaXMubWF4Lnk9dGhpcy5tYXguej0tSW5maW5pdHk7cmV0dXJuIHRoaXN9LGlzRW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXgueDx0aGlzLm1pbi54fHx0aGlzLm1heC55PHRoaXMubWluLnl8fHRoaXMubWF4Lno8dGhpcy5taW4uen0sZ2V0Q2VudGVyOmZ1bmN0aW9uKGEpe2E9XG4gICAgYXx8bmV3IHA7cmV0dXJuIHRoaXMuaXNFbXB0eSgpP2Euc2V0KDAsMCwwKTphLmFkZFZlY3RvcnModGhpcy5taW4sdGhpcy5tYXgpLm11bHRpcGx5U2NhbGFyKC41KX0sZ2V0U2l6ZTpmdW5jdGlvbihhKXthPWF8fG5ldyBwO3JldHVybiB0aGlzLmlzRW1wdHkoKT9hLnNldCgwLDAsMCk6YS5zdWJWZWN0b3JzKHRoaXMubWF4LHRoaXMubWluKX0sZXhwYW5kQnlQb2ludDpmdW5jdGlvbihhKXt0aGlzLm1pbi5taW4oYSk7dGhpcy5tYXgubWF4KGEpO3JldHVybiB0aGlzfSxleHBhbmRCeVZlY3RvcjpmdW5jdGlvbihhKXt0aGlzLm1pbi5zdWIoYSk7dGhpcy5tYXguYWRkKGEpO3JldHVybiB0aGlzfSxleHBhbmRCeVNjYWxhcjpmdW5jdGlvbihhKXt0aGlzLm1pbi5hZGRTY2FsYXIoLWEpO3RoaXMubWF4LmFkZFNjYWxhcihhKTtyZXR1cm4gdGhpc30sZXhwYW5kQnlPYmplY3Q6ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEpe3ZhciBmPWEuZ2VvbWV0cnk7aWYodm9pZCAwIT09ZilpZihmLmlzR2VvbWV0cnkpZm9yKGY9XG4gICAgZi52ZXJ0aWNlcyxjPTAsZD1mLmxlbmd0aDtjPGQ7YysrKWUuY29weShmW2NdKSxlLmFwcGx5TWF0cml4NChhLm1hdHJpeFdvcmxkKSxiLmV4cGFuZEJ5UG9pbnQoZSk7ZWxzZSBpZihmLmlzQnVmZmVyR2VvbWV0cnkmJihmPWYuYXR0cmlidXRlcy5wb3NpdGlvbix2b2lkIDAhPT1mKSlmb3IoYz0wLGQ9Zi5jb3VudDtjPGQ7YysrKWUuZnJvbUJ1ZmZlckF0dHJpYnV0ZShmLGMpLmFwcGx5TWF0cml4NChhLm1hdHJpeFdvcmxkKSxiLmV4cGFuZEJ5UG9pbnQoZSl9dmFyIGIsYyxkLGU9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGMpe2I9dGhpcztjLnVwZGF0ZU1hdHJpeFdvcmxkKCEwKTtjLnRyYXZlcnNlKGEpO3JldHVybiB0aGlzfX0oKSxjb250YWluc1BvaW50OmZ1bmN0aW9uKGEpe3JldHVybiBhLng8dGhpcy5taW4ueHx8YS54PnRoaXMubWF4Lnh8fGEueTx0aGlzLm1pbi55fHxhLnk+dGhpcy5tYXgueXx8YS56PHRoaXMubWluLnp8fGEuej50aGlzLm1heC56PyExOiEwfSxjb250YWluc0JveDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5taW4ueDw9XG4gICAgYS5taW4ueCYmYS5tYXgueDw9dGhpcy5tYXgueCYmdGhpcy5taW4ueTw9YS5taW4ueSYmYS5tYXgueTw9dGhpcy5tYXgueSYmdGhpcy5taW4uejw9YS5taW4ueiYmYS5tYXguejw9dGhpcy5tYXguen0sZ2V0UGFyYW1ldGVyOmZ1bmN0aW9uKGEsYil7cmV0dXJuKGJ8fG5ldyBwKS5zZXQoKGEueC10aGlzLm1pbi54KS8odGhpcy5tYXgueC10aGlzLm1pbi54KSwoYS55LXRoaXMubWluLnkpLyh0aGlzLm1heC55LXRoaXMubWluLnkpLChhLnotdGhpcy5taW4ueikvKHRoaXMubWF4LnotdGhpcy5taW4ueikpfSxpbnRlcnNlY3RzQm94OmZ1bmN0aW9uKGEpe3JldHVybiBhLm1heC54PHRoaXMubWluLnh8fGEubWluLng+dGhpcy5tYXgueHx8YS5tYXgueTx0aGlzLm1pbi55fHxhLm1pbi55PnRoaXMubWF4Lnl8fGEubWF4Lno8dGhpcy5taW4uenx8YS5taW4uej50aGlzLm1heC56PyExOiEwfSxpbnRlcnNlY3RzU3BoZXJlOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGIpe3RoaXMuY2xhbXBQb2ludChiLmNlbnRlcixcbiAgICBhKTtyZXR1cm4gYS5kaXN0YW5jZVRvU3F1YXJlZChiLmNlbnRlcik8PWIucmFkaXVzKmIucmFkaXVzfX0oKSxpbnRlcnNlY3RzUGxhbmU6ZnVuY3Rpb24oYSl7aWYoMDxhLm5vcm1hbC54KXt2YXIgYj1hLm5vcm1hbC54KnRoaXMubWluLng7dmFyIGM9YS5ub3JtYWwueCp0aGlzLm1heC54fWVsc2UgYj1hLm5vcm1hbC54KnRoaXMubWF4LngsYz1hLm5vcm1hbC54KnRoaXMubWluLng7MDxhLm5vcm1hbC55PyhiKz1hLm5vcm1hbC55KnRoaXMubWluLnksYys9YS5ub3JtYWwueSp0aGlzLm1heC55KTooYis9YS5ub3JtYWwueSp0aGlzLm1heC55LGMrPWEubm9ybWFsLnkqdGhpcy5taW4ueSk7MDxhLm5vcm1hbC56PyhiKz1hLm5vcm1hbC56KnRoaXMubWluLnosYys9YS5ub3JtYWwueip0aGlzLm1heC56KTooYis9YS5ub3JtYWwueip0aGlzLm1heC56LGMrPWEubm9ybWFsLnoqdGhpcy5taW4ueik7cmV0dXJuIGI8PWEuY29uc3RhbnQmJmM+PWEuY29uc3RhbnR9LGNsYW1wUG9pbnQ6ZnVuY3Rpb24oYSxcbiAgICBiKXtyZXR1cm4oYnx8bmV3IHApLmNvcHkoYSkuY2xhbXAodGhpcy5taW4sdGhpcy5tYXgpfSxkaXN0YW5jZVRvUG9pbnQ6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGEuY29weShiKS5jbGFtcCh0aGlzLm1pbix0aGlzLm1heCkuc3ViKGIpLmxlbmd0aCgpfX0oKSxnZXRCb3VuZGluZ1NwaGVyZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBwO3JldHVybiBmdW5jdGlvbihiKXtiPWJ8fG5ldyBJYTt0aGlzLmdldENlbnRlcihiLmNlbnRlcik7Yi5yYWRpdXM9LjUqdGhpcy5nZXRTaXplKGEpLmxlbmd0aCgpO3JldHVybiBifX0oKSxpbnRlcnNlY3Q6ZnVuY3Rpb24oYSl7dGhpcy5taW4ubWF4KGEubWluKTt0aGlzLm1heC5taW4oYS5tYXgpO3RoaXMuaXNFbXB0eSgpJiZ0aGlzLm1ha2VFbXB0eSgpO3JldHVybiB0aGlzfSx1bmlvbjpmdW5jdGlvbihhKXt0aGlzLm1pbi5taW4oYS5taW4pO3RoaXMubWF4Lm1heChhLm1heCk7cmV0dXJuIHRoaXN9LGFwcGx5TWF0cml4NDpmdW5jdGlvbigpe3ZhciBhPVxuICAgIFtuZXcgcCxuZXcgcCxuZXcgcCxuZXcgcCxuZXcgcCxuZXcgcCxuZXcgcCxuZXcgcF07cmV0dXJuIGZ1bmN0aW9uKGIpe2lmKHRoaXMuaXNFbXB0eSgpKXJldHVybiB0aGlzO2FbMF0uc2V0KHRoaXMubWluLngsdGhpcy5taW4ueSx0aGlzLm1pbi56KS5hcHBseU1hdHJpeDQoYik7YVsxXS5zZXQodGhpcy5taW4ueCx0aGlzLm1pbi55LHRoaXMubWF4LnopLmFwcGx5TWF0cml4NChiKTthWzJdLnNldCh0aGlzLm1pbi54LHRoaXMubWF4LnksdGhpcy5taW4ueikuYXBwbHlNYXRyaXg0KGIpO2FbM10uc2V0KHRoaXMubWluLngsdGhpcy5tYXgueSx0aGlzLm1heC56KS5hcHBseU1hdHJpeDQoYik7YVs0XS5zZXQodGhpcy5tYXgueCx0aGlzLm1pbi55LHRoaXMubWluLnopLmFwcGx5TWF0cml4NChiKTthWzVdLnNldCh0aGlzLm1heC54LHRoaXMubWluLnksdGhpcy5tYXgueikuYXBwbHlNYXRyaXg0KGIpO2FbNl0uc2V0KHRoaXMubWF4LngsdGhpcy5tYXgueSx0aGlzLm1pbi56KS5hcHBseU1hdHJpeDQoYik7XG4gICAgYVs3XS5zZXQodGhpcy5tYXgueCx0aGlzLm1heC55LHRoaXMubWF4LnopLmFwcGx5TWF0cml4NChiKTt0aGlzLnNldEZyb21Qb2ludHMoYSk7cmV0dXJuIHRoaXN9fSgpLHRyYW5zbGF0ZTpmdW5jdGlvbihhKXt0aGlzLm1pbi5hZGQoYSk7dGhpcy5tYXguYWRkKGEpO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEubWluLmVxdWFscyh0aGlzLm1pbikmJmEubWF4LmVxdWFscyh0aGlzLm1heCl9fSk7T2JqZWN0LmFzc2lnbihJYS5wcm90b3R5cGUse3NldDpmdW5jdGlvbihhLGIpe3RoaXMuY2VudGVyLmNvcHkoYSk7dGhpcy5yYWRpdXM9YjtyZXR1cm4gdGhpc30sc2V0RnJvbVBvaW50czpmdW5jdGlvbigpe3ZhciBhPW5ldyBYYTtyZXR1cm4gZnVuY3Rpb24oYixjKXt2YXIgZD10aGlzLmNlbnRlcjt2b2lkIDAhPT1jP2QuY29weShjKTphLnNldEZyb21Qb2ludHMoYikuZ2V0Q2VudGVyKGQpO2Zvcih2YXIgZT1jPTAsZj1iLmxlbmd0aDtlPGY7ZSsrKWM9TWF0aC5tYXgoYyxcbiAgICBkLmRpc3RhbmNlVG9TcXVhcmVkKGJbZV0pKTt0aGlzLnJhZGl1cz1NYXRoLnNxcnQoYyk7cmV0dXJuIHRoaXN9fSgpLGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5jb3B5KHRoaXMpfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMuY2VudGVyLmNvcHkoYS5jZW50ZXIpO3RoaXMucmFkaXVzPWEucmFkaXVzO3JldHVybiB0aGlzfSxlbXB0eTpmdW5jdGlvbigpe3JldHVybiAwPj10aGlzLnJhZGl1c30sY29udGFpbnNQb2ludDpmdW5jdGlvbihhKXtyZXR1cm4gYS5kaXN0YW5jZVRvU3F1YXJlZCh0aGlzLmNlbnRlcik8PXRoaXMucmFkaXVzKnRoaXMucmFkaXVzfSxkaXN0YW5jZVRvUG9pbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuZGlzdGFuY2VUbyh0aGlzLmNlbnRlciktdGhpcy5yYWRpdXN9LGludGVyc2VjdHNTcGhlcmU6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5yYWRpdXMrYS5yYWRpdXM7cmV0dXJuIGEuY2VudGVyLmRpc3RhbmNlVG9TcXVhcmVkKHRoaXMuY2VudGVyKTw9XG4gICAgYipifSxpbnRlcnNlY3RzQm94OmZ1bmN0aW9uKGEpe3JldHVybiBhLmludGVyc2VjdHNTcGhlcmUodGhpcyl9LGludGVyc2VjdHNQbGFuZTpmdW5jdGlvbihhKXtyZXR1cm4gTWF0aC5hYnMoYS5kaXN0YW5jZVRvUG9pbnQodGhpcy5jZW50ZXIpKTw9dGhpcy5yYWRpdXN9LGNsYW1wUG9pbnQ6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZChhKTtiPWJ8fG5ldyBwO2IuY29weShhKTtjPnRoaXMucmFkaXVzKnRoaXMucmFkaXVzJiYoYi5zdWIodGhpcy5jZW50ZXIpLm5vcm1hbGl6ZSgpLGIubXVsdGlwbHlTY2FsYXIodGhpcy5yYWRpdXMpLmFkZCh0aGlzLmNlbnRlcikpO3JldHVybiBifSxnZXRCb3VuZGluZ0JveDpmdW5jdGlvbihhKXthPWF8fG5ldyBYYTthLnNldCh0aGlzLmNlbnRlcix0aGlzLmNlbnRlcik7YS5leHBhbmRCeVNjYWxhcih0aGlzLnJhZGl1cyk7cmV0dXJuIGF9LGFwcGx5TWF0cml4NDpmdW5jdGlvbihhKXt0aGlzLmNlbnRlci5hcHBseU1hdHJpeDQoYSk7XG4gICAgdGhpcy5yYWRpdXMqPWEuZ2V0TWF4U2NhbGVPbkF4aXMoKTtyZXR1cm4gdGhpc30sdHJhbnNsYXRlOmZ1bmN0aW9uKGEpe3RoaXMuY2VudGVyLmFkZChhKTtyZXR1cm4gdGhpc30sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLmNlbnRlci5lcXVhbHModGhpcy5jZW50ZXIpJiZhLnJhZGl1cz09PXRoaXMucmFkaXVzfX0pO09iamVjdC5hc3NpZ24oRWEucHJvdG90eXBlLHtzZXQ6ZnVuY3Rpb24oYSxiKXt0aGlzLm5vcm1hbC5jb3B5KGEpO3RoaXMuY29uc3RhbnQ9YjtyZXR1cm4gdGhpc30sc2V0Q29tcG9uZW50czpmdW5jdGlvbihhLGIsYyxkKXt0aGlzLm5vcm1hbC5zZXQoYSxiLGMpO3RoaXMuY29uc3RhbnQ9ZDtyZXR1cm4gdGhpc30sc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQ6ZnVuY3Rpb24oYSxiKXt0aGlzLm5vcm1hbC5jb3B5KGEpO3RoaXMuY29uc3RhbnQ9LWIuZG90KHRoaXMubm9ybWFsKTtyZXR1cm4gdGhpc30sc2V0RnJvbUNvcGxhbmFyUG9pbnRzOmZ1bmN0aW9uKCl7dmFyIGE9XG4gICAgbmV3IHAsYj1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oYyxkLGUpe2Q9YS5zdWJWZWN0b3JzKGUsZCkuY3Jvc3MoYi5zdWJWZWN0b3JzKGMsZCkpLm5vcm1hbGl6ZSgpO3RoaXMuc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQoZCxjKTtyZXR1cm4gdGhpc319KCksY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyl9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5ub3JtYWwuY29weShhLm5vcm1hbCk7dGhpcy5jb25zdGFudD1hLmNvbnN0YW50O3JldHVybiB0aGlzfSxub3JtYWxpemU6ZnVuY3Rpb24oKXt2YXIgYT0xL3RoaXMubm9ybWFsLmxlbmd0aCgpO3RoaXMubm9ybWFsLm11bHRpcGx5U2NhbGFyKGEpO3RoaXMuY29uc3RhbnQqPWE7cmV0dXJuIHRoaXN9LG5lZ2F0ZTpmdW5jdGlvbigpe3RoaXMuY29uc3RhbnQqPS0xO3RoaXMubm9ybWFsLm5lZ2F0ZSgpO3JldHVybiB0aGlzfSxkaXN0YW5jZVRvUG9pbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMubm9ybWFsLmRvdChhKStcbiAgICB0aGlzLmNvbnN0YW50fSxkaXN0YW5jZVRvU3BoZXJlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmRpc3RhbmNlVG9Qb2ludChhLmNlbnRlciktYS5yYWRpdXN9LHByb2plY3RQb2ludDpmdW5jdGlvbihhLGIpe3JldHVybihifHxuZXcgcCkuY29weSh0aGlzLm5vcm1hbCkubXVsdGlwbHlTY2FsYXIoLXRoaXMuZGlzdGFuY2VUb1BvaW50KGEpKS5hZGQoYSl9LGludGVyc2VjdExpbmU6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oYixjKXtjPWN8fG5ldyBwO3ZhciBkPWIuZGVsdGEoYSksZT10aGlzLm5vcm1hbC5kb3QoZCk7aWYoMD09PWUpe2lmKDA9PT10aGlzLmRpc3RhbmNlVG9Qb2ludChiLnN0YXJ0KSlyZXR1cm4gYy5jb3B5KGIuc3RhcnQpfWVsc2UgaWYoZT0tKGIuc3RhcnQuZG90KHRoaXMubm9ybWFsKSt0aGlzLmNvbnN0YW50KS9lLCEoMD5lfHwxPGUpKXJldHVybiBjLmNvcHkoZCkubXVsdGlwbHlTY2FsYXIoZSkuYWRkKGIuc3RhcnQpfX0oKSxpbnRlcnNlY3RzTGluZTpmdW5jdGlvbihhKXt2YXIgYj1cbiAgICB0aGlzLmRpc3RhbmNlVG9Qb2ludChhLnN0YXJ0KTthPXRoaXMuZGlzdGFuY2VUb1BvaW50KGEuZW5kKTtyZXR1cm4gMD5iJiYwPGF8fDA+YSYmMDxifSxpbnRlcnNlY3RzQm94OmZ1bmN0aW9uKGEpe3JldHVybiBhLmludGVyc2VjdHNQbGFuZSh0aGlzKX0saW50ZXJzZWN0c1NwaGVyZTpmdW5jdGlvbihhKXtyZXR1cm4gYS5pbnRlcnNlY3RzUGxhbmUodGhpcyl9LGNvcGxhbmFyUG9pbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fG5ldyBwKS5jb3B5KHRoaXMubm9ybWFsKS5tdWx0aXBseVNjYWxhcigtdGhpcy5jb25zdGFudCl9LGFwcGx5TWF0cml4NDpmdW5jdGlvbigpe3ZhciBhPW5ldyBwLGI9bmV3IG1hO3JldHVybiBmdW5jdGlvbihjLGQpe2Q9ZHx8Yi5nZXROb3JtYWxNYXRyaXgoYyk7Yz10aGlzLmNvcGxhbmFyUG9pbnQoYSkuYXBwbHlNYXRyaXg0KGMpO2Q9dGhpcy5ub3JtYWwuYXBwbHlNYXRyaXgzKGQpLm5vcm1hbGl6ZSgpO3RoaXMuY29uc3RhbnQ9LWMuZG90KGQpO3JldHVybiB0aGlzfX0oKSxcbiAgICB0cmFuc2xhdGU6ZnVuY3Rpb24oYSl7dGhpcy5jb25zdGFudC09YS5kb3QodGhpcy5ub3JtYWwpO3JldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEubm9ybWFsLmVxdWFscyh0aGlzLm5vcm1hbCkmJmEuY29uc3RhbnQ9PT10aGlzLmNvbnN0YW50fX0pO09iamVjdC5hc3NpZ24ocmQucHJvdG90eXBlLHtzZXQ6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3ZhciBnPXRoaXMucGxhbmVzO2dbMF0uY29weShhKTtnWzFdLmNvcHkoYik7Z1syXS5jb3B5KGMpO2dbM10uY29weShkKTtnWzRdLmNvcHkoZSk7Z1s1XS5jb3B5KGYpO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX0sY29weTpmdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcy5wbGFuZXMsYz0wOzY+YztjKyspYltjXS5jb3B5KGEucGxhbmVzW2NdKTtyZXR1cm4gdGhpc30sc2V0RnJvbU1hdHJpeDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLnBsYW5lcyxcbiAgICBjPWEuZWxlbWVudHM7YT1jWzBdO3ZhciBkPWNbMV0sZT1jWzJdLGY9Y1szXSxnPWNbNF0saD1jWzVdLGs9Y1s2XSxtPWNbN10scT1jWzhdLGw9Y1s5XSxwPWNbMTBdLHI9Y1sxMV0sdD1jWzEyXSx2PWNbMTNdLHc9Y1sxNF0sYz1jWzE1XTtiWzBdLnNldENvbXBvbmVudHMoZi1hLG0tZyxyLXEsYy10KS5ub3JtYWxpemUoKTtiWzFdLnNldENvbXBvbmVudHMoZithLG0rZyxyK3EsYyt0KS5ub3JtYWxpemUoKTtiWzJdLnNldENvbXBvbmVudHMoZitkLG0raCxyK2wsYyt2KS5ub3JtYWxpemUoKTtiWzNdLnNldENvbXBvbmVudHMoZi1kLG0taCxyLWwsYy12KS5ub3JtYWxpemUoKTtiWzRdLnNldENvbXBvbmVudHMoZi1lLG0tayxyLXAsYy13KS5ub3JtYWxpemUoKTtiWzVdLnNldENvbXBvbmVudHMoZitlLG0rayxyK3AsYyt3KS5ub3JtYWxpemUoKTtyZXR1cm4gdGhpc30saW50ZXJzZWN0c09iamVjdDpmdW5jdGlvbigpe3ZhciBhPW5ldyBJYTtyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGM9XG4gICAgYi5nZW9tZXRyeTtudWxsPT09Yy5ib3VuZGluZ1NwaGVyZSYmYy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTthLmNvcHkoYy5ib3VuZGluZ1NwaGVyZSkuYXBwbHlNYXRyaXg0KGIubWF0cml4V29ybGQpO3JldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoYSl9fSgpLGludGVyc2VjdHNTcHJpdGU6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgSWE7cmV0dXJuIGZ1bmN0aW9uKGIpe2EuY2VudGVyLnNldCgwLDAsMCk7YS5yYWRpdXM9LjcwNzEwNjc4MTE4NjU0NzY7YS5hcHBseU1hdHJpeDQoYi5tYXRyaXhXb3JsZCk7cmV0dXJuIHRoaXMuaW50ZXJzZWN0c1NwaGVyZShhKX19KCksaW50ZXJzZWN0c1NwaGVyZTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLnBsYW5lcyxjPWEuY2VudGVyO2E9LWEucmFkaXVzO2Zvcih2YXIgZD0wOzY+ZDtkKyspaWYoYltkXS5kaXN0YW5jZVRvUG9pbnQoYyk8YSlyZXR1cm4hMTtyZXR1cm4hMH0saW50ZXJzZWN0c0JveDpmdW5jdGlvbigpe3ZhciBhPW5ldyBwLGI9XG4gICAgbmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGMpe2Zvcih2YXIgZD10aGlzLnBsYW5lcyxlPTA7Nj5lO2UrKyl7dmFyIGY9ZFtlXTthLng9MDxmLm5vcm1hbC54P2MubWluLng6Yy5tYXgueDtiLng9MDxmLm5vcm1hbC54P2MubWF4Lng6Yy5taW4ueDthLnk9MDxmLm5vcm1hbC55P2MubWluLnk6Yy5tYXgueTtiLnk9MDxmLm5vcm1hbC55P2MubWF4Lnk6Yy5taW4ueTthLno9MDxmLm5vcm1hbC56P2MubWluLno6Yy5tYXguejtiLno9MDxmLm5vcm1hbC56P2MubWF4Lno6Yy5taW4uejt2YXIgZz1mLmRpc3RhbmNlVG9Qb2ludChhKSxmPWYuZGlzdGFuY2VUb1BvaW50KGIpO2lmKDA+ZyYmMD5mKXJldHVybiExfXJldHVybiEwfX0oKSxjb250YWluc1BvaW50OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj10aGlzLnBsYW5lcyxjPTA7Nj5jO2MrKylpZigwPmJbY10uZGlzdGFuY2VUb1BvaW50KGEpKXJldHVybiExO3JldHVybiEwfX0pO2diLlJvdGF0aW9uT3JkZXJzPVwiWFlaIFlaWCBaWFkgWFpZIFlYWiBaWVhcIi5zcGxpdChcIiBcIik7XG4gICAgZ2IuRGVmYXVsdE9yZGVyPVwiWFlaXCI7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZ2IucHJvdG90eXBlLHt4OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5feH0sc2V0OmZ1bmN0aW9uKGEpe3RoaXMuX3g9YTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKX19LHk6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl95fSxzZXQ6ZnVuY3Rpb24oYSl7dGhpcy5feT1hO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpfX0sejp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3p9LHNldDpmdW5jdGlvbihhKXt0aGlzLl96PWE7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCl9fSxvcmRlcjp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX29yZGVyfSxzZXQ6ZnVuY3Rpb24oYSl7dGhpcy5fb3JkZXI9YTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKX19fSk7T2JqZWN0LmFzc2lnbihnYi5wcm90b3R5cGUse2lzRXVsZXI6ITAsc2V0OmZ1bmN0aW9uKGEsYixjLGQpe3RoaXMuX3g9YTt0aGlzLl95PWI7dGhpcy5fej1cbiAgICBjO3RoaXMuX29yZGVyPWR8fHRoaXMuX29yZGVyO3RoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLl94LHRoaXMuX3ksdGhpcy5feix0aGlzLl9vcmRlcil9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5feD1hLl94O3RoaXMuX3k9YS5feTt0aGlzLl96PWEuX3o7dGhpcy5fb3JkZXI9YS5fb3JkZXI7dGhpcy5vbkNoYW5nZUNhbGxiYWNrKCk7cmV0dXJuIHRoaXN9LHNldEZyb21Sb3RhdGlvbk1hdHJpeDpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9US5jbGFtcCxlPWEuZWxlbWVudHM7YT1lWzBdO3ZhciBmPWVbNF0sZz1lWzhdLGg9ZVsxXSxrPWVbNV0sbT1lWzldLGw9ZVsyXSxuPWVbNl0sZT1lWzEwXTtiPWJ8fHRoaXMuX29yZGVyO1wiWFlaXCI9PT1iPyh0aGlzLl95PU1hdGguYXNpbihkKGcsLTEsMSkpLC45OTk5OT5NYXRoLmFicyhnKT8odGhpcy5feD1NYXRoLmF0YW4yKC1tLGUpLHRoaXMuX3o9XG4gICAgTWF0aC5hdGFuMigtZixhKSk6KHRoaXMuX3g9TWF0aC5hdGFuMihuLGspLHRoaXMuX3o9MCkpOlwiWVhaXCI9PT1iPyh0aGlzLl94PU1hdGguYXNpbigtZChtLC0xLDEpKSwuOTk5OTk+TWF0aC5hYnMobSk/KHRoaXMuX3k9TWF0aC5hdGFuMihnLGUpLHRoaXMuX3o9TWF0aC5hdGFuMihoLGspKToodGhpcy5feT1NYXRoLmF0YW4yKC1sLGEpLHRoaXMuX3o9MCkpOlwiWlhZXCI9PT1iPyh0aGlzLl94PU1hdGguYXNpbihkKG4sLTEsMSkpLC45OTk5OT5NYXRoLmFicyhuKT8odGhpcy5feT1NYXRoLmF0YW4yKC1sLGUpLHRoaXMuX3o9TWF0aC5hdGFuMigtZixrKSk6KHRoaXMuX3k9MCx0aGlzLl96PU1hdGguYXRhbjIoaCxhKSkpOlwiWllYXCI9PT1iPyh0aGlzLl95PU1hdGguYXNpbigtZChsLC0xLDEpKSwuOTk5OTk+TWF0aC5hYnMobCk/KHRoaXMuX3g9TWF0aC5hdGFuMihuLGUpLHRoaXMuX3o9TWF0aC5hdGFuMihoLGEpKToodGhpcy5feD0wLHRoaXMuX3o9TWF0aC5hdGFuMigtZixrKSkpOlwiWVpYXCI9PT1cbiAgICBiPyh0aGlzLl96PU1hdGguYXNpbihkKGgsLTEsMSkpLC45OTk5OT5NYXRoLmFicyhoKT8odGhpcy5feD1NYXRoLmF0YW4yKC1tLGspLHRoaXMuX3k9TWF0aC5hdGFuMigtbCxhKSk6KHRoaXMuX3g9MCx0aGlzLl95PU1hdGguYXRhbjIoZyxlKSkpOlwiWFpZXCI9PT1iPyh0aGlzLl96PU1hdGguYXNpbigtZChmLC0xLDEpKSwuOTk5OTk+TWF0aC5hYnMoZik/KHRoaXMuX3g9TWF0aC5hdGFuMihuLGspLHRoaXMuX3k9TWF0aC5hdGFuMihnLGEpKToodGhpcy5feD1NYXRoLmF0YW4yKC1tLGUpLHRoaXMuX3k9MCkpOmNvbnNvbGUud2FybihcIlRIUkVFLkV1bGVyOiAuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCkgZ2l2ZW4gdW5zdXBwb3J0ZWQgb3JkZXI6IFwiK2IpO3RoaXMuX29yZGVyPWI7aWYoITEhPT1jKXRoaXMub25DaGFuZ2VDYWxsYmFjaygpO3JldHVybiB0aGlzfSxzZXRGcm9tUXVhdGVybmlvbjpmdW5jdGlvbigpe3ZhciBhPW5ldyBPO3JldHVybiBmdW5jdGlvbihiLGMsZCl7YS5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbihiKTtcbiAgICByZXR1cm4gdGhpcy5zZXRGcm9tUm90YXRpb25NYXRyaXgoYSxjLGQpfX0oKSxzZXRGcm9tVmVjdG9yMzpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLnNldChhLngsYS55LGEueixifHx0aGlzLl9vcmRlcil9LHJlb3JkZXI6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgaGE7cmV0dXJuIGZ1bmN0aW9uKGIpe2Euc2V0RnJvbUV1bGVyKHRoaXMpO3JldHVybiB0aGlzLnNldEZyb21RdWF0ZXJuaW9uKGEsYil9fSgpLGVxdWFsczpmdW5jdGlvbihhKXtyZXR1cm4gYS5feD09PXRoaXMuX3gmJmEuX3k9PT10aGlzLl95JiZhLl96PT09dGhpcy5feiYmYS5fb3JkZXI9PT10aGlzLl9vcmRlcn0sZnJvbUFycmF5OmZ1bmN0aW9uKGEpe3RoaXMuX3g9YVswXTt0aGlzLl95PWFbMV07dGhpcy5fej1hWzJdO3ZvaWQgMCE9PWFbM10mJih0aGlzLl9vcmRlcj1hWzNdKTt0aGlzLm9uQ2hhbmdlQ2FsbGJhY2soKTtyZXR1cm4gdGhpc30sdG9BcnJheTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWEmJihhPVtdKTtcbiAgICB2b2lkIDA9PT1iJiYoYj0wKTthW2JdPXRoaXMuX3g7YVtiKzFdPXRoaXMuX3k7YVtiKzJdPXRoaXMuX3o7YVtiKzNdPXRoaXMuX29yZGVyO3JldHVybiBhfSx0b1ZlY3RvcjM6ZnVuY3Rpb24oYSl7cmV0dXJuIGE/YS5zZXQodGhpcy5feCx0aGlzLl95LHRoaXMuX3opOm5ldyBwKHRoaXMuX3gsdGhpcy5feSx0aGlzLl96KX0sb25DaGFuZ2U6ZnVuY3Rpb24oYSl7dGhpcy5vbkNoYW5nZUNhbGxiYWNrPWE7cmV0dXJuIHRoaXN9LG9uQ2hhbmdlQ2FsbGJhY2s6ZnVuY3Rpb24oKXt9fSk7T2JqZWN0LmFzc2lnbihXZC5wcm90b3R5cGUse3NldDpmdW5jdGlvbihhKXt0aGlzLm1hc2s9MTw8YXwwfSxlbmFibGU6ZnVuY3Rpb24oYSl7dGhpcy5tYXNrPXRoaXMubWFza3wxPDxhfDB9LHRvZ2dsZTpmdW5jdGlvbihhKXt0aGlzLm1hc2tePTE8PGF8MH0sZGlzYWJsZTpmdW5jdGlvbihhKXt0aGlzLm1hc2smPX4oMTw8YXwwKX0sdGVzdDpmdW5jdGlvbihhKXtyZXR1cm4gMCE9PSh0aGlzLm1hc2smXG4gICAgYS5tYXNrKX19KTt2YXIgY2c9MDt4LkRlZmF1bHRVcD1uZXcgcCgwLDEsMCk7eC5EZWZhdWx0TWF0cml4QXV0b1VwZGF0ZT0hMDt4LnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoemEucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6eCxpc09iamVjdDNEOiEwLG9uQmVmb3JlUmVuZGVyOmZ1bmN0aW9uKCl7fSxvbkFmdGVyUmVuZGVyOmZ1bmN0aW9uKCl7fSxhcHBseU1hdHJpeDpmdW5jdGlvbihhKXt0aGlzLm1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKGEsdGhpcy5tYXRyaXgpO3RoaXMubWF0cml4LmRlY29tcG9zZSh0aGlzLnBvc2l0aW9uLHRoaXMucXVhdGVybmlvbix0aGlzLnNjYWxlKX0sYXBwbHlRdWF0ZXJuaW9uOmZ1bmN0aW9uKGEpe3RoaXMucXVhdGVybmlvbi5wcmVtdWx0aXBseShhKTtyZXR1cm4gdGhpc30sc2V0Um90YXRpb25Gcm9tQXhpc0FuZ2xlOmZ1bmN0aW9uKGEsYil7dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21BeGlzQW5nbGUoYSxiKX0sc2V0Um90YXRpb25Gcm9tRXVsZXI6ZnVuY3Rpb24oYSl7dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21FdWxlcihhLFxuICAgICEwKX0sc2V0Um90YXRpb25Gcm9tTWF0cml4OmZ1bmN0aW9uKGEpe3RoaXMucXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoYSl9LHNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb246ZnVuY3Rpb24oYSl7dGhpcy5xdWF0ZXJuaW9uLmNvcHkoYSl9LHJvdGF0ZU9uQXhpczpmdW5jdGlvbigpe3ZhciBhPW5ldyBoYTtyZXR1cm4gZnVuY3Rpb24oYixjKXthLnNldEZyb21BeGlzQW5nbGUoYixjKTt0aGlzLnF1YXRlcm5pb24ubXVsdGlwbHkoYSk7cmV0dXJuIHRoaXN9fSgpLHJvdGF0ZU9uV29ybGRBeGlzOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IGhhO3JldHVybiBmdW5jdGlvbihiLGMpe2Euc2V0RnJvbUF4aXNBbmdsZShiLGMpO3RoaXMucXVhdGVybmlvbi5wcmVtdWx0aXBseShhKTtyZXR1cm4gdGhpc319KCkscm90YXRlWDpmdW5jdGlvbigpe3ZhciBhPW5ldyBwKDEsMCwwKTtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKGEsYil9fSgpLHJvdGF0ZVk6ZnVuY3Rpb24oKXt2YXIgYT1cbiAgICBuZXcgcCgwLDEsMCk7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLnJvdGF0ZU9uQXhpcyhhLGIpfX0oKSxyb3RhdGVaOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAoMCwwLDEpO3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gdGhpcy5yb3RhdGVPbkF4aXMoYSxiKX19KCksdHJhbnNsYXRlT25BeGlzOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7YS5jb3B5KGIpLmFwcGx5UXVhdGVybmlvbih0aGlzLnF1YXRlcm5pb24pO3RoaXMucG9zaXRpb24uYWRkKGEubXVsdGlwbHlTY2FsYXIoYykpO3JldHVybiB0aGlzfX0oKSx0cmFuc2xhdGVYOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAoMSwwLDApO3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gdGhpcy50cmFuc2xhdGVPbkF4aXMoYSxiKX19KCksdHJhbnNsYXRlWTpmdW5jdGlvbigpe3ZhciBhPW5ldyBwKDAsMSwwKTtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIHRoaXMudHJhbnNsYXRlT25BeGlzKGEsXG4gICAgYil9fSgpLHRyYW5zbGF0ZVo6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcCgwLDAsMSk7cmV0dXJuIGZ1bmN0aW9uKGIpe3JldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyhhLGIpfX0oKSxsb2NhbFRvV29ybGQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpfSx3b3JsZFRvTG9jYWw6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgTztyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGIuYXBwbHlNYXRyaXg0KGEuZ2V0SW52ZXJzZSh0aGlzLm1hdHJpeFdvcmxkKSl9fSgpLGxvb2tBdDpmdW5jdGlvbigpe3ZhciBhPW5ldyBPLGI9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGMsZCxlKXtjLmlzVmVjdG9yMz9iLmNvcHkoYyk6Yi5zZXQoYyxkLGUpO3RoaXMuaXNDYW1lcmE/YS5sb29rQXQodGhpcy5wb3NpdGlvbixiLHRoaXMudXApOmEubG9va0F0KGIsdGhpcy5wb3NpdGlvbix0aGlzLnVwKTt0aGlzLnF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KGEpfX0oKSxcbiAgICBhZGQ6ZnVuY3Rpb24oYSl7aWYoMTxhcmd1bWVudHMubGVuZ3RoKXtmb3IodmFyIGI9MDtiPGFyZ3VtZW50cy5sZW5ndGg7YisrKXRoaXMuYWRkKGFyZ3VtZW50c1tiXSk7cmV0dXJuIHRoaXN9aWYoYT09PXRoaXMpcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJUSFJFRS5PYmplY3QzRC5hZGQ6IG9iamVjdCBjYW4ndCBiZSBhZGRlZCBhcyBhIGNoaWxkIG9mIGl0c2VsZi5cIixhKSx0aGlzO2EmJmEuaXNPYmplY3QzRD8obnVsbCE9PWEucGFyZW50JiZhLnBhcmVudC5yZW1vdmUoYSksYS5wYXJlbnQ9dGhpcyxhLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJhZGRlZFwifSksdGhpcy5jaGlsZHJlbi5wdXNoKGEpKTpjb25zb2xlLmVycm9yKFwiVEhSRUUuT2JqZWN0M0QuYWRkOiBvYmplY3Qgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLk9iamVjdDNELlwiLGEpO3JldHVybiB0aGlzfSxyZW1vdmU6ZnVuY3Rpb24oYSl7aWYoMTxhcmd1bWVudHMubGVuZ3RoKXtmb3IodmFyIGI9MDtiPGFyZ3VtZW50cy5sZW5ndGg7YisrKXRoaXMucmVtb3ZlKGFyZ3VtZW50c1tiXSk7XG4gICAgcmV0dXJuIHRoaXN9Yj10aGlzLmNoaWxkcmVuLmluZGV4T2YoYSk7LTEhPT1iJiYoYS5wYXJlbnQ9bnVsbCxhLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJyZW1vdmVkXCJ9KSx0aGlzLmNoaWxkcmVuLnNwbGljZShiLDEpKTtyZXR1cm4gdGhpc30sZ2V0T2JqZWN0QnlJZDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5nZXRPYmplY3RCeVByb3BlcnR5KFwiaWRcIixhKX0sZ2V0T2JqZWN0QnlOYW1lOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmdldE9iamVjdEJ5UHJvcGVydHkoXCJuYW1lXCIsYSl9LGdldE9iamVjdEJ5UHJvcGVydHk6ZnVuY3Rpb24oYSxiKXtpZih0aGlzW2FdPT09YilyZXR1cm4gdGhpcztmb3IodmFyIGM9MCxkPXRoaXMuY2hpbGRyZW4ubGVuZ3RoO2M8ZDtjKyspe3ZhciBlPXRoaXMuY2hpbGRyZW5bY10uZ2V0T2JqZWN0QnlQcm9wZXJ0eShhLGIpO2lmKHZvaWQgMCE9PWUpcmV0dXJuIGV9fSxnZXRXb3JsZFBvc2l0aW9uOmZ1bmN0aW9uKGEpe2E9YXx8bmV3IHA7dGhpcy51cGRhdGVNYXRyaXhXb3JsZCghMCk7XG4gICAgcmV0dXJuIGEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubWF0cml4V29ybGQpfSxnZXRXb3JsZFF1YXRlcm5pb246ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcCxiPW5ldyBwO3JldHVybiBmdW5jdGlvbihjKXtjPWN8fG5ldyBoYTt0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCEwKTt0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZShhLGMsYik7cmV0dXJuIGN9fSgpLGdldFdvcmxkUm90YXRpb246ZnVuY3Rpb24oKXt2YXIgYT1uZXcgaGE7cmV0dXJuIGZ1bmN0aW9uKGIpe2I9Ynx8bmV3IGdiO3RoaXMuZ2V0V29ybGRRdWF0ZXJuaW9uKGEpO3JldHVybiBiLnNldEZyb21RdWF0ZXJuaW9uKGEsdGhpcy5yb3RhdGlvbi5vcmRlciwhMSl9fSgpLGdldFdvcmxkU2NhbGU6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcCxiPW5ldyBoYTtyZXR1cm4gZnVuY3Rpb24oYyl7Yz1jfHxuZXcgcDt0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCEwKTt0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZShhLGIsYyk7cmV0dXJuIGN9fSgpLFxuICAgIGdldFdvcmxkRGlyZWN0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IGhhO3JldHVybiBmdW5jdGlvbihiKXtiPWJ8fG5ldyBwO3RoaXMuZ2V0V29ybGRRdWF0ZXJuaW9uKGEpO3JldHVybiBiLnNldCgwLDAsMSkuYXBwbHlRdWF0ZXJuaW9uKGEpfX0oKSxyYXljYXN0OmZ1bmN0aW9uKCl7fSx0cmF2ZXJzZTpmdW5jdGlvbihhKXthKHRoaXMpO2Zvcih2YXIgYj10aGlzLmNoaWxkcmVuLGM9MCxkPWIubGVuZ3RoO2M8ZDtjKyspYltjXS50cmF2ZXJzZShhKX0sdHJhdmVyc2VWaXNpYmxlOmZ1bmN0aW9uKGEpe2lmKCExIT09dGhpcy52aXNpYmxlKXthKHRoaXMpO2Zvcih2YXIgYj10aGlzLmNoaWxkcmVuLGM9MCxkPWIubGVuZ3RoO2M8ZDtjKyspYltjXS50cmF2ZXJzZVZpc2libGUoYSl9fSx0cmF2ZXJzZUFuY2VzdG9yczpmdW5jdGlvbihhKXt2YXIgYj10aGlzLnBhcmVudDtudWxsIT09YiYmKGEoYiksYi50cmF2ZXJzZUFuY2VzdG9ycyhhKSl9LHVwZGF0ZU1hdHJpeDpmdW5jdGlvbigpe3RoaXMubWF0cml4LmNvbXBvc2UodGhpcy5wb3NpdGlvbixcbiAgICB0aGlzLnF1YXRlcm5pb24sdGhpcy5zY2FsZSk7dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlPSEwfSx1cGRhdGVNYXRyaXhXb3JsZDpmdW5jdGlvbihhKXt0aGlzLm1hdHJpeEF1dG9VcGRhdGUmJnRoaXMudXBkYXRlTWF0cml4KCk7aWYodGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlfHxhKW51bGw9PT10aGlzLnBhcmVudD90aGlzLm1hdHJpeFdvcmxkLmNvcHkodGhpcy5tYXRyaXgpOnRoaXMubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyh0aGlzLnBhcmVudC5tYXRyaXhXb3JsZCx0aGlzLm1hdHJpeCksdGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlPSExLGE9ITA7Zm9yKHZhciBiPXRoaXMuY2hpbGRyZW4sYz0wLGQ9Yi5sZW5ndGg7YzxkO2MrKyliW2NdLnVwZGF0ZU1hdHJpeFdvcmxkKGEpfSx0b0pTT046ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihiLGMpe3ZvaWQgMD09PWJbYy51dWlkXSYmKGJbYy51dWlkXT1jLnRvSlNPTihhKSk7cmV0dXJuIGMudXVpZH1mdW5jdGlvbiBjKGEpe3ZhciBiPVxuICAgIFtdLGM7Zm9yKGMgaW4gYSl7dmFyIGQ9YVtjXTtkZWxldGUgZC5tZXRhZGF0YTtiLnB1c2goZCl9cmV0dXJuIGJ9dmFyIGQ9dm9pZCAwPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBhLGU9e307ZCYmKGE9e2dlb21ldHJpZXM6e30sbWF0ZXJpYWxzOnt9LHRleHR1cmVzOnt9LGltYWdlczp7fSxzaGFwZXM6e319LGUubWV0YWRhdGE9e3ZlcnNpb246NC41LHR5cGU6XCJPYmplY3RcIixnZW5lcmF0b3I6XCJPYmplY3QzRC50b0pTT05cIn0pO3ZhciBmPXt9O2YudXVpZD10aGlzLnV1aWQ7Zi50eXBlPXRoaXMudHlwZTtcIlwiIT09dGhpcy5uYW1lJiYoZi5uYW1lPXRoaXMubmFtZSk7ITA9PT10aGlzLmNhc3RTaGFkb3cmJihmLmNhc3RTaGFkb3c9ITApOyEwPT09dGhpcy5yZWNlaXZlU2hhZG93JiYoZi5yZWNlaXZlU2hhZG93PSEwKTshMT09PXRoaXMudmlzaWJsZSYmKGYudmlzaWJsZT0hMSk7XCJ7fVwiIT09SlNPTi5zdHJpbmdpZnkodGhpcy51c2VyRGF0YSkmJihmLnVzZXJEYXRhPXRoaXMudXNlckRhdGEpO1xuICAgIGYubWF0cml4PXRoaXMubWF0cml4LnRvQXJyYXkoKTtpZih2b2lkIDAhPT10aGlzLmdlb21ldHJ5KXtmLmdlb21ldHJ5PWIoYS5nZW9tZXRyaWVzLHRoaXMuZ2VvbWV0cnkpO3ZhciBnPXRoaXMuZ2VvbWV0cnkucGFyYW1ldGVycztpZih2b2lkIDAhPT1nJiZ2b2lkIDAhPT1nLnNoYXBlcylpZihnPWcuc2hhcGVzLEFycmF5LmlzQXJyYXkoZykpZm9yKHZhciBoPTAsaz1nLmxlbmd0aDtoPGs7aCsrKWIoYS5zaGFwZXMsZ1toXSk7ZWxzZSBiKGEuc2hhcGVzLGcpfWlmKHZvaWQgMCE9PXRoaXMubWF0ZXJpYWwpaWYoQXJyYXkuaXNBcnJheSh0aGlzLm1hdGVyaWFsKSl7Zz1bXTtoPTA7Zm9yKGs9dGhpcy5tYXRlcmlhbC5sZW5ndGg7aDxrO2grKylnLnB1c2goYihhLm1hdGVyaWFscyx0aGlzLm1hdGVyaWFsW2hdKSk7Zi5tYXRlcmlhbD1nfWVsc2UgZi5tYXRlcmlhbD1iKGEubWF0ZXJpYWxzLHRoaXMubWF0ZXJpYWwpO2lmKDA8dGhpcy5jaGlsZHJlbi5sZW5ndGgpZm9yKGYuY2hpbGRyZW49XG4gICAgW10saD0wO2g8dGhpcy5jaGlsZHJlbi5sZW5ndGg7aCsrKWYuY2hpbGRyZW4ucHVzaCh0aGlzLmNoaWxkcmVuW2hdLnRvSlNPTihhKS5vYmplY3QpO2lmKGQpe3ZhciBkPWMoYS5nZW9tZXRyaWVzKSxoPWMoYS5tYXRlcmlhbHMpLGs9YyhhLnRleHR1cmVzKSxtPWMoYS5pbWFnZXMpO2c9YyhhLnNoYXBlcyk7MDxkLmxlbmd0aCYmKGUuZ2VvbWV0cmllcz1kKTswPGgubGVuZ3RoJiYoZS5tYXRlcmlhbHM9aCk7MDxrLmxlbmd0aCYmKGUudGV4dHVyZXM9ayk7MDxtLmxlbmd0aCYmKGUuaW1hZ2VzPW0pOzA8Zy5sZW5ndGgmJihlLnNoYXBlcz1nKX1lLm9iamVjdD1mO3JldHVybiBlfSxjbG9uZTpmdW5jdGlvbihhKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyxhKX0sY29weTpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPSEwKTt0aGlzLm5hbWU9YS5uYW1lO3RoaXMudXAuY29weShhLnVwKTt0aGlzLnBvc2l0aW9uLmNvcHkoYS5wb3NpdGlvbik7dGhpcy5xdWF0ZXJuaW9uLmNvcHkoYS5xdWF0ZXJuaW9uKTtcbiAgICB0aGlzLnNjYWxlLmNvcHkoYS5zY2FsZSk7dGhpcy5tYXRyaXguY29weShhLm1hdHJpeCk7dGhpcy5tYXRyaXhXb3JsZC5jb3B5KGEubWF0cml4V29ybGQpO3RoaXMubWF0cml4QXV0b1VwZGF0ZT1hLm1hdHJpeEF1dG9VcGRhdGU7dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlPWEubWF0cml4V29ybGROZWVkc1VwZGF0ZTt0aGlzLmxheWVycy5tYXNrPWEubGF5ZXJzLm1hc2s7dGhpcy52aXNpYmxlPWEudmlzaWJsZTt0aGlzLmNhc3RTaGFkb3c9YS5jYXN0U2hhZG93O3RoaXMucmVjZWl2ZVNoYWRvdz1hLnJlY2VpdmVTaGFkb3c7dGhpcy5mcnVzdHVtQ3VsbGVkPWEuZnJ1c3R1bUN1bGxlZDt0aGlzLnJlbmRlck9yZGVyPWEucmVuZGVyT3JkZXI7dGhpcy51c2VyRGF0YT1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGEudXNlckRhdGEpKTtpZighMD09PWIpZm9yKGI9MDtiPGEuY2hpbGRyZW4ubGVuZ3RoO2IrKyl0aGlzLmFkZChhLmNoaWxkcmVuW2JdLmNsb25lKCkpO3JldHVybiB0aGlzfX0pO1xuICAgIFRhLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoeC5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpUYSxpc0NhbWVyYTohMCxjb3B5OmZ1bmN0aW9uKGEsYil7eC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSxiKTt0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZS5jb3B5KGEubWF0cml4V29ybGRJbnZlcnNlKTt0aGlzLnByb2plY3Rpb25NYXRyaXguY29weShhLnByb2plY3Rpb25NYXRyaXgpO3JldHVybiB0aGlzfSxnZXRXb3JsZERpcmVjdGlvbjpmdW5jdGlvbigpe3ZhciBhPW5ldyBoYTtyZXR1cm4gZnVuY3Rpb24oYil7Yj1ifHxuZXcgcDt0aGlzLmdldFdvcmxkUXVhdGVybmlvbihhKTtyZXR1cm4gYi5zZXQoMCwwLC0xKS5hcHBseVF1YXRlcm5pb24oYSl9fSgpLHVwZGF0ZU1hdHJpeFdvcmxkOmZ1bmN0aW9uKGEpe3gucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwodGhpcyxhKTt0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZS5nZXRJbnZlcnNlKHRoaXMubWF0cml4V29ybGQpfSxcbiAgICBjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX19KTtMYi5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKFRhLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOkxiLGlzT3J0aG9ncmFwaGljQ2FtZXJhOiEwLGNvcHk6ZnVuY3Rpb24oYSxiKXtUYS5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSxiKTt0aGlzLmxlZnQ9YS5sZWZ0O3RoaXMucmlnaHQ9YS5yaWdodDt0aGlzLnRvcD1hLnRvcDt0aGlzLmJvdHRvbT1hLmJvdHRvbTt0aGlzLm5lYXI9YS5uZWFyO3RoaXMuZmFyPWEuZmFyO3RoaXMuem9vbT1hLnpvb207dGhpcy52aWV3PW51bGw9PT1hLnZpZXc/bnVsbDpPYmplY3QuYXNzaWduKHt9LGEudmlldyk7cmV0dXJuIHRoaXN9LHNldFZpZXdPZmZzZXQ6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe251bGw9PT10aGlzLnZpZXcmJih0aGlzLnZpZXc9e2VuYWJsZWQ6ITAsZnVsbFdpZHRoOjEsZnVsbEhlaWdodDoxLG9mZnNldFg6MCxcbiAgICBvZmZzZXRZOjAsd2lkdGg6MSxoZWlnaHQ6MX0pO3RoaXMudmlldy5lbmFibGVkPSEwO3RoaXMudmlldy5mdWxsV2lkdGg9YTt0aGlzLnZpZXcuZnVsbEhlaWdodD1iO3RoaXMudmlldy5vZmZzZXRYPWM7dGhpcy52aWV3Lm9mZnNldFk9ZDt0aGlzLnZpZXcud2lkdGg9ZTt0aGlzLnZpZXcuaGVpZ2h0PWY7dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCl9LGNsZWFyVmlld09mZnNldDpmdW5jdGlvbigpe251bGwhPT10aGlzLnZpZXcmJih0aGlzLnZpZXcuZW5hYmxlZD0hMSk7dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCl9LHVwZGF0ZVByb2plY3Rpb25NYXRyaXg6ZnVuY3Rpb24oKXt2YXIgYT0odGhpcy5yaWdodC10aGlzLmxlZnQpLygyKnRoaXMuem9vbSksYj0odGhpcy50b3AtdGhpcy5ib3R0b20pLygyKnRoaXMuem9vbSksYz0odGhpcy5yaWdodCt0aGlzLmxlZnQpLzIsZD0odGhpcy50b3ArdGhpcy5ib3R0b20pLzIsZT1jLWEsYz1jK2EsYT1kK2IsYj1kLWI7aWYobnVsbCE9PVxuICAgIHRoaXMudmlldyYmdGhpcy52aWV3LmVuYWJsZWQpdmFyIGM9dGhpcy56b29tLyh0aGlzLnZpZXcud2lkdGgvdGhpcy52aWV3LmZ1bGxXaWR0aCksYj10aGlzLnpvb20vKHRoaXMudmlldy5oZWlnaHQvdGhpcy52aWV3LmZ1bGxIZWlnaHQpLGY9KHRoaXMucmlnaHQtdGhpcy5sZWZ0KS90aGlzLnZpZXcud2lkdGgsZD0odGhpcy50b3AtdGhpcy5ib3R0b20pL3RoaXMudmlldy5oZWlnaHQsZT1lK3RoaXMudmlldy5vZmZzZXRYL2MqZixjPWUrdGhpcy52aWV3LndpZHRoL2MqZixhPWEtdGhpcy52aWV3Lm9mZnNldFkvYipkLGI9YS10aGlzLnZpZXcuaGVpZ2h0L2IqZDt0aGlzLnByb2plY3Rpb25NYXRyaXgubWFrZU9ydGhvZ3JhcGhpYyhlLGMsYSxiLHRoaXMubmVhcix0aGlzLmZhcil9LHRvSlNPTjpmdW5jdGlvbihhKXthPXgucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsYSk7YS5vYmplY3Quem9vbT10aGlzLnpvb207YS5vYmplY3QubGVmdD10aGlzLmxlZnQ7YS5vYmplY3QucmlnaHQ9XG4gICAgdGhpcy5yaWdodDthLm9iamVjdC50b3A9dGhpcy50b3A7YS5vYmplY3QuYm90dG9tPXRoaXMuYm90dG9tO2Eub2JqZWN0Lm5lYXI9dGhpcy5uZWFyO2Eub2JqZWN0LmZhcj10aGlzLmZhcjtudWxsIT09dGhpcy52aWV3JiYoYS5vYmplY3Qudmlldz1PYmplY3QuYXNzaWduKHt9LHRoaXMudmlldykpO3JldHVybiBhfX0pO09iamVjdC5hc3NpZ24oWWEucHJvdG90eXBlLHtjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX0sY29weTpmdW5jdGlvbihhKXt0aGlzLmE9YS5hO3RoaXMuYj1hLmI7dGhpcy5jPWEuYzt0aGlzLm5vcm1hbC5jb3B5KGEubm9ybWFsKTt0aGlzLmNvbG9yLmNvcHkoYS5jb2xvcik7dGhpcy5tYXRlcmlhbEluZGV4PWEubWF0ZXJpYWxJbmRleDtmb3IodmFyIGI9MCxjPWEudmVydGV4Tm9ybWFscy5sZW5ndGg7YjxjO2IrKyl0aGlzLnZlcnRleE5vcm1hbHNbYl09YS52ZXJ0ZXhOb3JtYWxzW2JdLmNsb25lKCk7Yj0wO1xuICAgIGZvcihjPWEudmVydGV4Q29sb3JzLmxlbmd0aDtiPGM7YisrKXRoaXMudmVydGV4Q29sb3JzW2JdPWEudmVydGV4Q29sb3JzW2JdLmNsb25lKCk7cmV0dXJuIHRoaXN9fSk7dmFyIGRnPTA7TC5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHphLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOkwsaXNHZW9tZXRyeTohMCxhcHBseU1hdHJpeDpmdW5jdGlvbihhKXtmb3IodmFyIGI9KG5ldyBtYSkuZ2V0Tm9ybWFsTWF0cml4KGEpLGM9MCxkPXRoaXMudmVydGljZXMubGVuZ3RoO2M8ZDtjKyspdGhpcy52ZXJ0aWNlc1tjXS5hcHBseU1hdHJpeDQoYSk7Yz0wO2ZvcihkPXRoaXMuZmFjZXMubGVuZ3RoO2M8ZDtjKyspe2E9dGhpcy5mYWNlc1tjXTthLm5vcm1hbC5hcHBseU1hdHJpeDMoYikubm9ybWFsaXplKCk7Zm9yKHZhciBlPTAsZj1hLnZlcnRleE5vcm1hbHMubGVuZ3RoO2U8ZjtlKyspYS52ZXJ0ZXhOb3JtYWxzW2VdLmFwcGx5TWF0cml4MyhiKS5ub3JtYWxpemUoKX1udWxsIT09XG4gICAgdGhpcy5ib3VuZGluZ0JveCYmdGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtudWxsIT09dGhpcy5ib3VuZGluZ1NwaGVyZSYmdGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTt0aGlzLm5vcm1hbHNOZWVkVXBkYXRlPXRoaXMudmVydGljZXNOZWVkVXBkYXRlPSEwO3JldHVybiB0aGlzfSxyb3RhdGVYOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IE87cmV0dXJuIGZ1bmN0aW9uKGIpe2EubWFrZVJvdGF0aW9uWChiKTt0aGlzLmFwcGx5TWF0cml4KGEpO3JldHVybiB0aGlzfX0oKSxyb3RhdGVZOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IE87cmV0dXJuIGZ1bmN0aW9uKGIpe2EubWFrZVJvdGF0aW9uWShiKTt0aGlzLmFwcGx5TWF0cml4KGEpO3JldHVybiB0aGlzfX0oKSxyb3RhdGVaOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IE87cmV0dXJuIGZ1bmN0aW9uKGIpe2EubWFrZVJvdGF0aW9uWihiKTt0aGlzLmFwcGx5TWF0cml4KGEpO3JldHVybiB0aGlzfX0oKSx0cmFuc2xhdGU6ZnVuY3Rpb24oKXt2YXIgYT1cbiAgICBuZXcgTztyZXR1cm4gZnVuY3Rpb24oYixjLGQpe2EubWFrZVRyYW5zbGF0aW9uKGIsYyxkKTt0aGlzLmFwcGx5TWF0cml4KGEpO3JldHVybiB0aGlzfX0oKSxzY2FsZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBPO3JldHVybiBmdW5jdGlvbihiLGMsZCl7YS5tYWtlU2NhbGUoYixjLGQpO3RoaXMuYXBwbHlNYXRyaXgoYSk7cmV0dXJuIHRoaXN9fSgpLGxvb2tBdDpmdW5jdGlvbigpe3ZhciBhPW5ldyB4O3JldHVybiBmdW5jdGlvbihiKXthLmxvb2tBdChiKTthLnVwZGF0ZU1hdHJpeCgpO3RoaXMuYXBwbHlNYXRyaXgoYS5tYXRyaXgpfX0oKSxmcm9tQnVmZmVyR2VvbWV0cnk6ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYihhLGIsZCxlKXt2YXIgZj12b2lkIDAhPT1nP1tsW2FdLmNsb25lKCksbFtiXS5jbG9uZSgpLGxbZF0uY2xvbmUoKV06W10scT12b2lkIDAhPT1oP1tjLmNvbG9yc1thXS5jbG9uZSgpLGMuY29sb3JzW2JdLmNsb25lKCksYy5jb2xvcnNbZF0uY2xvbmUoKV06W107ZT1uZXcgWWEoYSxcbiAgICBiLGQsZixxLGUpO2MuZmFjZXMucHVzaChlKTt2b2lkIDAhPT1rJiZjLmZhY2VWZXJ0ZXhVdnNbMF0ucHVzaChbblthXS5jbG9uZSgpLG5bYl0uY2xvbmUoKSxuW2RdLmNsb25lKCldKTt2b2lkIDAhPT1tJiZjLmZhY2VWZXJ0ZXhVdnNbMV0ucHVzaChbdVthXS5jbG9uZSgpLHVbYl0uY2xvbmUoKSx1W2RdLmNsb25lKCldKX12YXIgYz10aGlzLGQ9bnVsbCE9PWEuaW5kZXg/YS5pbmRleC5hcnJheTp2b2lkIDAsZT1hLmF0dHJpYnV0ZXMsZj1lLnBvc2l0aW9uLmFycmF5LGc9dm9pZCAwIT09ZS5ub3JtYWw/ZS5ub3JtYWwuYXJyYXk6dm9pZCAwLGg9dm9pZCAwIT09ZS5jb2xvcj9lLmNvbG9yLmFycmF5OnZvaWQgMCxrPXZvaWQgMCE9PWUudXY/ZS51di5hcnJheTp2b2lkIDAsbT12b2lkIDAhPT1lLnV2Mj9lLnV2Mi5hcnJheTp2b2lkIDA7dm9pZCAwIT09bSYmKHRoaXMuZmFjZVZlcnRleFV2c1sxXT1bXSk7Zm9yKHZhciBsPVtdLG49W10sdT1bXSxyPWU9MDtlPGYubGVuZ3RoO2UrPTMsXG4gICAgcis9MiljLnZlcnRpY2VzLnB1c2gobmV3IHAoZltlXSxmW2UrMV0sZltlKzJdKSksdm9pZCAwIT09ZyYmbC5wdXNoKG5ldyBwKGdbZV0sZ1tlKzFdLGdbZSsyXSkpLHZvaWQgMCE9PWgmJmMuY29sb3JzLnB1c2gobmV3IEgoaFtlXSxoW2UrMV0saFtlKzJdKSksdm9pZCAwIT09ayYmbi5wdXNoKG5ldyBEKGtbcl0sa1tyKzFdKSksdm9pZCAwIT09bSYmdS5wdXNoKG5ldyBEKG1bcl0sbVtyKzFdKSk7dmFyIHQ9YS5ncm91cHM7aWYoMDx0Lmxlbmd0aClmb3IoZT0wO2U8dC5sZW5ndGg7ZSsrKWZvcih2YXIgZj10W2VdLHY9Zi5zdGFydCx3PWYuY291bnQscj12LHY9dit3O3I8djtyKz0zKXZvaWQgMCE9PWQ/YihkW3JdLGRbcisxXSxkW3IrMl0sZi5tYXRlcmlhbEluZGV4KTpiKHIscisxLHIrMixmLm1hdGVyaWFsSW5kZXgpO2Vsc2UgaWYodm9pZCAwIT09ZClmb3IoZT0wO2U8ZC5sZW5ndGg7ZSs9MyliKGRbZV0sZFtlKzFdLGRbZSsyXSk7ZWxzZSBmb3IoZT0wO2U8Zi5sZW5ndGgvMztlKz1cbiAgICAzKWIoZSxlKzEsZSsyKTt0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpO251bGwhPT1hLmJvdW5kaW5nQm94JiYodGhpcy5ib3VuZGluZ0JveD1hLmJvdW5kaW5nQm94LmNsb25lKCkpO251bGwhPT1hLmJvdW5kaW5nU3BoZXJlJiYodGhpcy5ib3VuZGluZ1NwaGVyZT1hLmJvdW5kaW5nU3BoZXJlLmNsb25lKCkpO3JldHVybiB0aGlzfSxjZW50ZXI6ZnVuY3Rpb24oKXt0aGlzLmNvbXB1dGVCb3VuZGluZ0JveCgpO3ZhciBhPXRoaXMuYm91bmRpbmdCb3guZ2V0Q2VudGVyKCkubmVnYXRlKCk7dGhpcy50cmFuc2xhdGUoYS54LGEueSxhLnopO3JldHVybiBhfSxub3JtYWxpemU6ZnVuY3Rpb24oKXt0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO3ZhciBhPXRoaXMuYm91bmRpbmdTcGhlcmUuY2VudGVyLGI9dGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMsYj0wPT09Yj8xOjEvYixjPW5ldyBPO2Muc2V0KGIsMCwwLC1iKmEueCwwLGIsMCwtYiphLnksMCwwLGIsLWIqYS56LDAsMCwwLDEpO1xuICAgIHRoaXMuYXBwbHlNYXRyaXgoYyk7cmV0dXJuIHRoaXN9LGNvbXB1dGVGYWNlTm9ybWFsczpmdW5jdGlvbigpe2Zvcih2YXIgYT1uZXcgcCxiPW5ldyBwLGM9MCxkPXRoaXMuZmFjZXMubGVuZ3RoO2M8ZDtjKyspe3ZhciBlPXRoaXMuZmFjZXNbY10sZj10aGlzLnZlcnRpY2VzW2UuYV0sZz10aGlzLnZlcnRpY2VzW2UuYl07YS5zdWJWZWN0b3JzKHRoaXMudmVydGljZXNbZS5jXSxnKTtiLnN1YlZlY3RvcnMoZixnKTthLmNyb3NzKGIpO2Eubm9ybWFsaXplKCk7ZS5ub3JtYWwuY29weShhKX19LGNvbXB1dGVWZXJ0ZXhOb3JtYWxzOmZ1bmN0aW9uKGEpe3ZvaWQgMD09PWEmJihhPSEwKTt2YXIgYjt2YXIgYz1BcnJheSh0aGlzLnZlcnRpY2VzLmxlbmd0aCk7dmFyIGQ9MDtmb3IoYj10aGlzLnZlcnRpY2VzLmxlbmd0aDtkPGI7ZCsrKWNbZF09bmV3IHA7aWYoYSl7dmFyIGU9bmV3IHAsZj1uZXcgcDthPTA7Zm9yKGQ9dGhpcy5mYWNlcy5sZW5ndGg7YTxkO2ErKyl7Yj10aGlzLmZhY2VzW2FdO1xuICAgIHZhciBnPXRoaXMudmVydGljZXNbYi5hXTt2YXIgaD10aGlzLnZlcnRpY2VzW2IuYl07dmFyIGs9dGhpcy52ZXJ0aWNlc1tiLmNdO2Uuc3ViVmVjdG9ycyhrLGgpO2Yuc3ViVmVjdG9ycyhnLGgpO2UuY3Jvc3MoZik7Y1tiLmFdLmFkZChlKTtjW2IuYl0uYWRkKGUpO2NbYi5jXS5hZGQoZSl9fWVsc2UgZm9yKHRoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCksYT0wLGQ9dGhpcy5mYWNlcy5sZW5ndGg7YTxkO2ErKyliPXRoaXMuZmFjZXNbYV0sY1tiLmFdLmFkZChiLm5vcm1hbCksY1tiLmJdLmFkZChiLm5vcm1hbCksY1tiLmNdLmFkZChiLm5vcm1hbCk7ZD0wO2ZvcihiPXRoaXMudmVydGljZXMubGVuZ3RoO2Q8YjtkKyspY1tkXS5ub3JtYWxpemUoKTthPTA7Zm9yKGQ9dGhpcy5mYWNlcy5sZW5ndGg7YTxkO2ErKyliPXRoaXMuZmFjZXNbYV0sZz1iLnZlcnRleE5vcm1hbHMsMz09PWcubGVuZ3RoPyhnWzBdLmNvcHkoY1tiLmFdKSxnWzFdLmNvcHkoY1tiLmJdKSxnWzJdLmNvcHkoY1tiLmNdKSk6XG4gICAgKGdbMF09Y1tiLmFdLmNsb25lKCksZ1sxXT1jW2IuYl0uY2xvbmUoKSxnWzJdPWNbYi5jXS5jbG9uZSgpKTswPHRoaXMuZmFjZXMubGVuZ3RoJiYodGhpcy5ub3JtYWxzTmVlZFVwZGF0ZT0hMCl9LGNvbXB1dGVGbGF0VmVydGV4Tm9ybWFsczpmdW5jdGlvbigpe3ZhciBhO3RoaXMuY29tcHV0ZUZhY2VOb3JtYWxzKCk7dmFyIGI9MDtmb3IoYT10aGlzLmZhY2VzLmxlbmd0aDtiPGE7YisrKXt2YXIgYz10aGlzLmZhY2VzW2JdO3ZhciBkPWMudmVydGV4Tm9ybWFsczszPT09ZC5sZW5ndGg/KGRbMF0uY29weShjLm5vcm1hbCksZFsxXS5jb3B5KGMubm9ybWFsKSxkWzJdLmNvcHkoYy5ub3JtYWwpKTooZFswXT1jLm5vcm1hbC5jbG9uZSgpLGRbMV09Yy5ub3JtYWwuY2xvbmUoKSxkWzJdPWMubm9ybWFsLmNsb25lKCkpfTA8dGhpcy5mYWNlcy5sZW5ndGgmJih0aGlzLm5vcm1hbHNOZWVkVXBkYXRlPSEwKX0sY29tcHV0ZU1vcnBoTm9ybWFsczpmdW5jdGlvbigpe3ZhciBhLGI7dmFyIGM9XG4gICAgMDtmb3IoYj10aGlzLmZhY2VzLmxlbmd0aDtjPGI7YysrKXt2YXIgZD10aGlzLmZhY2VzW2NdO2QuX19vcmlnaW5hbEZhY2VOb3JtYWw/ZC5fX29yaWdpbmFsRmFjZU5vcm1hbC5jb3B5KGQubm9ybWFsKTpkLl9fb3JpZ2luYWxGYWNlTm9ybWFsPWQubm9ybWFsLmNsb25lKCk7ZC5fX29yaWdpbmFsVmVydGV4Tm9ybWFsc3x8KGQuX19vcmlnaW5hbFZlcnRleE5vcm1hbHM9W10pO3ZhciBlPTA7Zm9yKGE9ZC52ZXJ0ZXhOb3JtYWxzLmxlbmd0aDtlPGE7ZSsrKWQuX19vcmlnaW5hbFZlcnRleE5vcm1hbHNbZV0/ZC5fX29yaWdpbmFsVmVydGV4Tm9ybWFsc1tlXS5jb3B5KGQudmVydGV4Tm9ybWFsc1tlXSk6ZC5fX29yaWdpbmFsVmVydGV4Tm9ybWFsc1tlXT1kLnZlcnRleE5vcm1hbHNbZV0uY2xvbmUoKX12YXIgZj1uZXcgTDtmLmZhY2VzPXRoaXMuZmFjZXM7ZT0wO2ZvcihhPXRoaXMubW9ycGhUYXJnZXRzLmxlbmd0aDtlPGE7ZSsrKXtpZighdGhpcy5tb3JwaE5vcm1hbHNbZV0pe3RoaXMubW9ycGhOb3JtYWxzW2VdPVxuICAgIHt9O3RoaXMubW9ycGhOb3JtYWxzW2VdLmZhY2VOb3JtYWxzPVtdO3RoaXMubW9ycGhOb3JtYWxzW2VdLnZlcnRleE5vcm1hbHM9W107ZD10aGlzLm1vcnBoTm9ybWFsc1tlXS5mYWNlTm9ybWFsczt2YXIgZz10aGlzLm1vcnBoTm9ybWFsc1tlXS52ZXJ0ZXhOb3JtYWxzO2M9MDtmb3IoYj10aGlzLmZhY2VzLmxlbmd0aDtjPGI7YysrKXt2YXIgaD1uZXcgcDt2YXIgaz17YTpuZXcgcCxiOm5ldyBwLGM6bmV3IHB9O2QucHVzaChoKTtnLnB1c2goayl9fWc9dGhpcy5tb3JwaE5vcm1hbHNbZV07Zi52ZXJ0aWNlcz10aGlzLm1vcnBoVGFyZ2V0c1tlXS52ZXJ0aWNlcztmLmNvbXB1dGVGYWNlTm9ybWFscygpO2YuY29tcHV0ZVZlcnRleE5vcm1hbHMoKTtjPTA7Zm9yKGI9dGhpcy5mYWNlcy5sZW5ndGg7YzxiO2MrKylkPXRoaXMuZmFjZXNbY10saD1nLmZhY2VOb3JtYWxzW2NdLGs9Zy52ZXJ0ZXhOb3JtYWxzW2NdLGguY29weShkLm5vcm1hbCksay5hLmNvcHkoZC52ZXJ0ZXhOb3JtYWxzWzBdKSxcbiAgICBrLmIuY29weShkLnZlcnRleE5vcm1hbHNbMV0pLGsuYy5jb3B5KGQudmVydGV4Tm9ybWFsc1syXSl9Yz0wO2ZvcihiPXRoaXMuZmFjZXMubGVuZ3RoO2M8YjtjKyspZD10aGlzLmZhY2VzW2NdLGQubm9ybWFsPWQuX19vcmlnaW5hbEZhY2VOb3JtYWwsZC52ZXJ0ZXhOb3JtYWxzPWQuX19vcmlnaW5hbFZlcnRleE5vcm1hbHN9LGNvbXB1dGVMaW5lRGlzdGFuY2VzOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPTAsYj10aGlzLnZlcnRpY2VzLGM9MCxkPWIubGVuZ3RoO2M8ZDtjKyspMDxjJiYoYSs9YltjXS5kaXN0YW5jZVRvKGJbYy0xXSkpLHRoaXMubGluZURpc3RhbmNlc1tjXT1hfSxjb21wdXRlQm91bmRpbmdCb3g6ZnVuY3Rpb24oKXtudWxsPT09dGhpcy5ib3VuZGluZ0JveCYmKHRoaXMuYm91bmRpbmdCb3g9bmV3IFhhKTt0aGlzLmJvdW5kaW5nQm94LnNldEZyb21Qb2ludHModGhpcy52ZXJ0aWNlcyl9LGNvbXB1dGVCb3VuZGluZ1NwaGVyZTpmdW5jdGlvbigpe251bGw9PT10aGlzLmJvdW5kaW5nU3BoZXJlJiZcbiAgICAodGhpcy5ib3VuZGluZ1NwaGVyZT1uZXcgSWEpO3RoaXMuYm91bmRpbmdTcGhlcmUuc2V0RnJvbVBvaW50cyh0aGlzLnZlcnRpY2VzKX0sbWVyZ2U6ZnVuY3Rpb24oYSxiLGMpe2lmKGEmJmEuaXNHZW9tZXRyeSl7dmFyIGQsZT10aGlzLnZlcnRpY2VzLmxlbmd0aCxmPXRoaXMudmVydGljZXMsZz1hLnZlcnRpY2VzLGg9dGhpcy5mYWNlcyxrPWEuZmFjZXMsbT10aGlzLmZhY2VWZXJ0ZXhVdnNbMF0sbD1hLmZhY2VWZXJ0ZXhVdnNbMF0sbj10aGlzLmNvbG9ycyxwPWEuY29sb3JzO3ZvaWQgMD09PWMmJihjPTApO3ZvaWQgMCE9PWImJihkPShuZXcgbWEpLmdldE5vcm1hbE1hdHJpeChiKSk7YT0wO2Zvcih2YXIgcj1nLmxlbmd0aDthPHI7YSsrKXt2YXIgdD1nW2FdLmNsb25lKCk7dm9pZCAwIT09YiYmdC5hcHBseU1hdHJpeDQoYik7Zi5wdXNoKHQpfWE9MDtmb3Iocj1wLmxlbmd0aDthPHI7YSsrKW4ucHVzaChwW2FdLmNsb25lKCkpO2E9MDtmb3Iocj1rLmxlbmd0aDthPHI7YSsrKXt2YXIgZz1cbiAgICBrW2FdLHY9Zy52ZXJ0ZXhOb3JtYWxzLHA9Zy52ZXJ0ZXhDb2xvcnMsbj1uZXcgWWEoZy5hK2UsZy5iK2UsZy5jK2UpO24ubm9ybWFsLmNvcHkoZy5ub3JtYWwpO3ZvaWQgMCE9PWQmJm4ubm9ybWFsLmFwcGx5TWF0cml4MyhkKS5ub3JtYWxpemUoKTtiPTA7Zm9yKGY9di5sZW5ndGg7YjxmO2IrKyl0PXZbYl0uY2xvbmUoKSx2b2lkIDAhPT1kJiZ0LmFwcGx5TWF0cml4MyhkKS5ub3JtYWxpemUoKSxuLnZlcnRleE5vcm1hbHMucHVzaCh0KTtuLmNvbG9yLmNvcHkoZy5jb2xvcik7Yj0wO2ZvcihmPXAubGVuZ3RoO2I8ZjtiKyspdD1wW2JdLG4udmVydGV4Q29sb3JzLnB1c2godC5jbG9uZSgpKTtuLm1hdGVyaWFsSW5kZXg9Zy5tYXRlcmlhbEluZGV4K2M7aC5wdXNoKG4pfWE9MDtmb3Iocj1sLmxlbmd0aDthPHI7YSsrKWlmKGM9bFthXSxkPVtdLHZvaWQgMCE9PWMpe2I9MDtmb3IoZj1jLmxlbmd0aDtiPGY7YisrKWQucHVzaChjW2JdLmNsb25lKCkpO20ucHVzaChkKX19ZWxzZSBjb25zb2xlLmVycm9yKFwiVEhSRUUuR2VvbWV0cnkubWVyZ2UoKTogZ2VvbWV0cnkgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLkdlb21ldHJ5LlwiLFxuICAgIGEpfSxtZXJnZU1lc2g6ZnVuY3Rpb24oYSl7YSYmYS5pc01lc2g/KGEubWF0cml4QXV0b1VwZGF0ZSYmYS51cGRhdGVNYXRyaXgoKSx0aGlzLm1lcmdlKGEuZ2VvbWV0cnksYS5tYXRyaXgpKTpjb25zb2xlLmVycm9yKFwiVEhSRUUuR2VvbWV0cnkubWVyZ2VNZXNoKCk6IG1lc2ggbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLk1lc2guXCIsYSl9LG1lcmdlVmVydGljZXM6ZnVuY3Rpb24oKXt2YXIgYT17fSxiPVtdLGM9W10sZD1NYXRoLnBvdygxMCw0KSxlO3ZhciBmPTA7Zm9yKGU9dGhpcy52ZXJ0aWNlcy5sZW5ndGg7ZjxlO2YrKyl7dmFyIGc9dGhpcy52ZXJ0aWNlc1tmXTtnPU1hdGgucm91bmQoZy54KmQpK1wiX1wiK01hdGgucm91bmQoZy55KmQpK1wiX1wiK01hdGgucm91bmQoZy56KmQpO3ZvaWQgMD09PWFbZ10/KGFbZ109ZixiLnB1c2godGhpcy52ZXJ0aWNlc1tmXSksY1tmXT1iLmxlbmd0aC0xKTpjW2ZdPWNbYVtnXV19YT1bXTtmPTA7Zm9yKGU9dGhpcy5mYWNlcy5sZW5ndGg7ZjxlO2YrKylmb3IoZD1cbiAgICB0aGlzLmZhY2VzW2ZdLGQuYT1jW2QuYV0sZC5iPWNbZC5iXSxkLmM9Y1tkLmNdLGQ9W2QuYSxkLmIsZC5jXSxnPTA7Mz5nO2crKylpZihkW2ddPT09ZFsoZysxKSUzXSl7YS5wdXNoKGYpO2JyZWFrfWZvcihmPWEubGVuZ3RoLTE7MDw9ZjtmLS0pZm9yKGQ9YVtmXSx0aGlzLmZhY2VzLnNwbGljZShkLDEpLGM9MCxlPXRoaXMuZmFjZVZlcnRleFV2cy5sZW5ndGg7YzxlO2MrKyl0aGlzLmZhY2VWZXJ0ZXhVdnNbY10uc3BsaWNlKGQsMSk7Zj10aGlzLnZlcnRpY2VzLmxlbmd0aC1iLmxlbmd0aDt0aGlzLnZlcnRpY2VzPWI7cmV0dXJuIGZ9LHNldEZyb21Qb2ludHM6ZnVuY3Rpb24oYSl7dGhpcy52ZXJ0aWNlcz1bXTtmb3IodmFyIGI9MCxjPWEubGVuZ3RoO2I8YztiKyspe3ZhciBkPWFbYl07dGhpcy52ZXJ0aWNlcy5wdXNoKG5ldyBwKGQueCxkLnksZC56fHwwKSl9cmV0dXJuIHRoaXN9LHNvcnRGYWNlc0J5TWF0ZXJpYWxJbmRleDpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLmZhY2VzLFxuICAgIGI9YS5sZW5ndGgsYz0wO2M8YjtjKyspYVtjXS5faWQ9YzthLnNvcnQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5tYXRlcmlhbEluZGV4LWIubWF0ZXJpYWxJbmRleH0pO3ZhciBkPXRoaXMuZmFjZVZlcnRleFV2c1swXSxlPXRoaXMuZmFjZVZlcnRleFV2c1sxXSxmLGc7ZCYmZC5sZW5ndGg9PT1iJiYoZj1bXSk7ZSYmZS5sZW5ndGg9PT1iJiYoZz1bXSk7Zm9yKGM9MDtjPGI7YysrKXt2YXIgaD1hW2NdLl9pZDtmJiZmLnB1c2goZFtoXSk7ZyYmZy5wdXNoKGVbaF0pfWYmJih0aGlzLmZhY2VWZXJ0ZXhVdnNbMF09Zik7ZyYmKHRoaXMuZmFjZVZlcnRleFV2c1sxXT1nKX0sdG9KU09OOmZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhLGIsYyl7cmV0dXJuIGM/YXwxPDxiOmEmfigxPDxiKX1mdW5jdGlvbiBiKGEpe3ZhciBiPWEueC50b1N0cmluZygpK2EueS50b1N0cmluZygpK2Euei50b1N0cmluZygpO2lmKHZvaWQgMCE9PW1bYl0pcmV0dXJuIG1bYl07bVtiXT1rLmxlbmd0aC8zO2sucHVzaChhLngsXG4gICAgYS55LGEueik7cmV0dXJuIG1bYl19ZnVuY3Rpb24gYyhhKXt2YXIgYj1hLnIudG9TdHJpbmcoKSthLmcudG9TdHJpbmcoKSthLmIudG9TdHJpbmcoKTtpZih2b2lkIDAhPT1uW2JdKXJldHVybiBuW2JdO25bYl09bC5sZW5ndGg7bC5wdXNoKGEuZ2V0SGV4KCkpO3JldHVybiBuW2JdfWZ1bmN0aW9uIGQoYSl7dmFyIGI9YS54LnRvU3RyaW5nKCkrYS55LnRvU3RyaW5nKCk7aWYodm9pZCAwIT09cltiXSlyZXR1cm4gcltiXTtyW2JdPXAubGVuZ3RoLzI7cC5wdXNoKGEueCxhLnkpO3JldHVybiByW2JdfXZhciBlPXttZXRhZGF0YTp7dmVyc2lvbjo0LjUsdHlwZTpcIkdlb21ldHJ5XCIsZ2VuZXJhdG9yOlwiR2VvbWV0cnkudG9KU09OXCJ9fTtlLnV1aWQ9dGhpcy51dWlkO2UudHlwZT10aGlzLnR5cGU7XCJcIiE9PXRoaXMubmFtZSYmKGUubmFtZT10aGlzLm5hbWUpO2lmKHZvaWQgMCE9PXRoaXMucGFyYW1ldGVycyl7dmFyIGY9dGhpcy5wYXJhbWV0ZXJzLGc7Zm9yKGcgaW4gZil2b2lkIDAhPT1mW2ddJiZcbiAgICAoZVtnXT1mW2ddKTtyZXR1cm4gZX1mPVtdO2ZvcihnPTA7Zzx0aGlzLnZlcnRpY2VzLmxlbmd0aDtnKyspe3ZhciBoPXRoaXMudmVydGljZXNbZ107Zi5wdXNoKGgueCxoLnksaC56KX12YXIgaD1bXSxrPVtdLG09e30sbD1bXSxuPXt9LHA9W10scj17fTtmb3IoZz0wO2c8dGhpcy5mYWNlcy5sZW5ndGg7ZysrKXt2YXIgdD10aGlzLmZhY2VzW2ddLHY9dm9pZCAwIT09dGhpcy5mYWNlVmVydGV4VXZzWzBdW2ddLHc9MDx0Lm5vcm1hbC5sZW5ndGgoKSx6PTA8dC52ZXJ0ZXhOb3JtYWxzLmxlbmd0aCx5PTEhPT10LmNvbG9yLnJ8fDEhPT10LmNvbG9yLmd8fDEhPT10LmNvbG9yLmIseD0wPHQudmVydGV4Q29sb3JzLmxlbmd0aCxBPTAsQT1hKEEsMCwwKSxBPWEoQSwxLCEwKSxBPWEoQSwyLCExKSxBPWEoQSwzLHYpLEE9YShBLDQsdyksQT1hKEEsNSx6KSxBPWEoQSw2LHkpLEE9YShBLDcseCk7aC5wdXNoKEEpO2gucHVzaCh0LmEsdC5iLHQuYyk7aC5wdXNoKHQubWF0ZXJpYWxJbmRleCk7XG4gICAgdiYmKHY9dGhpcy5mYWNlVmVydGV4VXZzWzBdW2ddLGgucHVzaChkKHZbMF0pLGQodlsxXSksZCh2WzJdKSkpO3cmJmgucHVzaChiKHQubm9ybWFsKSk7eiYmKHc9dC52ZXJ0ZXhOb3JtYWxzLGgucHVzaChiKHdbMF0pLGIod1sxXSksYih3WzJdKSkpO3kmJmgucHVzaChjKHQuY29sb3IpKTt4JiYodD10LnZlcnRleENvbG9ycyxoLnB1c2goYyh0WzBdKSxjKHRbMV0pLGModFsyXSkpKX1lLmRhdGE9e307ZS5kYXRhLnZlcnRpY2VzPWY7ZS5kYXRhLm5vcm1hbHM9azswPGwubGVuZ3RoJiYoZS5kYXRhLmNvbG9ycz1sKTswPHAubGVuZ3RoJiYoZS5kYXRhLnV2cz1bcF0pO2UuZGF0YS5mYWNlcz1oO3JldHVybiBlfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgTCkuY29weSh0aGlzKX0sY29weTpmdW5jdGlvbihhKXt2YXIgYixjLGQ7dGhpcy52ZXJ0aWNlcz1bXTt0aGlzLmNvbG9ycz1bXTt0aGlzLmZhY2VzPVtdO3RoaXMuZmFjZVZlcnRleFV2cz1bW11dO3RoaXMubW9ycGhUYXJnZXRzPVxuICAgIFtdO3RoaXMubW9ycGhOb3JtYWxzPVtdO3RoaXMuc2tpbldlaWdodHM9W107dGhpcy5za2luSW5kaWNlcz1bXTt0aGlzLmxpbmVEaXN0YW5jZXM9W107dGhpcy5ib3VuZGluZ1NwaGVyZT10aGlzLmJvdW5kaW5nQm94PW51bGw7dGhpcy5uYW1lPWEubmFtZTt2YXIgZT1hLnZlcnRpY2VzO3ZhciBmPTA7Zm9yKGI9ZS5sZW5ndGg7ZjxiO2YrKyl0aGlzLnZlcnRpY2VzLnB1c2goZVtmXS5jbG9uZSgpKTtlPWEuY29sb3JzO2Y9MDtmb3IoYj1lLmxlbmd0aDtmPGI7ZisrKXRoaXMuY29sb3JzLnB1c2goZVtmXS5jbG9uZSgpKTtlPWEuZmFjZXM7Zj0wO2ZvcihiPWUubGVuZ3RoO2Y8YjtmKyspdGhpcy5mYWNlcy5wdXNoKGVbZl0uY2xvbmUoKSk7Zj0wO2ZvcihiPWEuZmFjZVZlcnRleFV2cy5sZW5ndGg7ZjxiO2YrKyl7dmFyIGc9YS5mYWNlVmVydGV4VXZzW2ZdO3ZvaWQgMD09PXRoaXMuZmFjZVZlcnRleFV2c1tmXSYmKHRoaXMuZmFjZVZlcnRleFV2c1tmXT1bXSk7ZT0wO2ZvcihjPWcubGVuZ3RoO2U8XG4gICAgYztlKyspe3ZhciBoPWdbZV0saz1bXTt2YXIgbT0wO2ZvcihkPWgubGVuZ3RoO208ZDttKyspay5wdXNoKGhbbV0uY2xvbmUoKSk7dGhpcy5mYWNlVmVydGV4VXZzW2ZdLnB1c2goayl9fW09YS5tb3JwaFRhcmdldHM7Zj0wO2ZvcihiPW0ubGVuZ3RoO2Y8YjtmKyspe2Q9e307ZC5uYW1lPW1bZl0ubmFtZTtpZih2b2lkIDAhPT1tW2ZdLnZlcnRpY2VzKWZvcihkLnZlcnRpY2VzPVtdLGU9MCxjPW1bZl0udmVydGljZXMubGVuZ3RoO2U8YztlKyspZC52ZXJ0aWNlcy5wdXNoKG1bZl0udmVydGljZXNbZV0uY2xvbmUoKSk7aWYodm9pZCAwIT09bVtmXS5ub3JtYWxzKWZvcihkLm5vcm1hbHM9W10sZT0wLGM9bVtmXS5ub3JtYWxzLmxlbmd0aDtlPGM7ZSsrKWQubm9ybWFscy5wdXNoKG1bZl0ubm9ybWFsc1tlXS5jbG9uZSgpKTt0aGlzLm1vcnBoVGFyZ2V0cy5wdXNoKGQpfW09YS5tb3JwaE5vcm1hbHM7Zj0wO2ZvcihiPW0ubGVuZ3RoO2Y8YjtmKyspe2Q9e307aWYodm9pZCAwIT09bVtmXS52ZXJ0ZXhOb3JtYWxzKWZvcihkLnZlcnRleE5vcm1hbHM9XG4gICAgW10sZT0wLGM9bVtmXS52ZXJ0ZXhOb3JtYWxzLmxlbmd0aDtlPGM7ZSsrKWc9bVtmXS52ZXJ0ZXhOb3JtYWxzW2VdLGg9e30saC5hPWcuYS5jbG9uZSgpLGguYj1nLmIuY2xvbmUoKSxoLmM9Zy5jLmNsb25lKCksZC52ZXJ0ZXhOb3JtYWxzLnB1c2goaCk7aWYodm9pZCAwIT09bVtmXS5mYWNlTm9ybWFscylmb3IoZC5mYWNlTm9ybWFscz1bXSxlPTAsYz1tW2ZdLmZhY2VOb3JtYWxzLmxlbmd0aDtlPGM7ZSsrKWQuZmFjZU5vcm1hbHMucHVzaChtW2ZdLmZhY2VOb3JtYWxzW2VdLmNsb25lKCkpO3RoaXMubW9ycGhOb3JtYWxzLnB1c2goZCl9ZT1hLnNraW5XZWlnaHRzO2Y9MDtmb3IoYj1lLmxlbmd0aDtmPGI7ZisrKXRoaXMuc2tpbldlaWdodHMucHVzaChlW2ZdLmNsb25lKCkpO2U9YS5za2luSW5kaWNlcztmPTA7Zm9yKGI9ZS5sZW5ndGg7ZjxiO2YrKyl0aGlzLnNraW5JbmRpY2VzLnB1c2goZVtmXS5jbG9uZSgpKTtlPWEubGluZURpc3RhbmNlcztmPTA7Zm9yKGI9ZS5sZW5ndGg7ZjxcbiAgICBiO2YrKyl0aGlzLmxpbmVEaXN0YW5jZXMucHVzaChlW2ZdKTtmPWEuYm91bmRpbmdCb3g7bnVsbCE9PWYmJih0aGlzLmJvdW5kaW5nQm94PWYuY2xvbmUoKSk7Zj1hLmJvdW5kaW5nU3BoZXJlO251bGwhPT1mJiYodGhpcy5ib3VuZGluZ1NwaGVyZT1mLmNsb25lKCkpO3RoaXMuZWxlbWVudHNOZWVkVXBkYXRlPWEuZWxlbWVudHNOZWVkVXBkYXRlO3RoaXMudmVydGljZXNOZWVkVXBkYXRlPWEudmVydGljZXNOZWVkVXBkYXRlO3RoaXMudXZzTmVlZFVwZGF0ZT1hLnV2c05lZWRVcGRhdGU7dGhpcy5ub3JtYWxzTmVlZFVwZGF0ZT1hLm5vcm1hbHNOZWVkVXBkYXRlO3RoaXMuY29sb3JzTmVlZFVwZGF0ZT1hLmNvbG9yc05lZWRVcGRhdGU7dGhpcy5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZT1hLmxpbmVEaXN0YW5jZXNOZWVkVXBkYXRlO3RoaXMuZ3JvdXBzTmVlZFVwZGF0ZT1hLmdyb3Vwc05lZWRVcGRhdGU7cmV0dXJuIHRoaXN9LGRpc3Bvc2U6ZnVuY3Rpb24oKXt0aGlzLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJkaXNwb3NlXCJ9KX19KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTS5wcm90b3R5cGUsXCJuZWVkc1VwZGF0ZVwiLHtzZXQ6ZnVuY3Rpb24oYSl7ITA9PT1hJiZ0aGlzLnZlcnNpb24rK319KTtPYmplY3QuYXNzaWduKE0ucHJvdG90eXBlLHtpc0J1ZmZlckF0dHJpYnV0ZTohMCxzZXRBcnJheTpmdW5jdGlvbihhKXtpZihBcnJheS5pc0FycmF5KGEpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUSFJFRS5CdWZmZXJBdHRyaWJ1dGU6IGFycmF5IHNob3VsZCBiZSBhIFR5cGVkIEFycmF5LlwiKTt0aGlzLmNvdW50PXZvaWQgMCE9PWE/YS5sZW5ndGgvdGhpcy5pdGVtU2l6ZTowO3RoaXMuYXJyYXk9YX0sc2V0RHluYW1pYzpmdW5jdGlvbihhKXt0aGlzLmR5bmFtaWM9YTtyZXR1cm4gdGhpc30sY29weTpmdW5jdGlvbihhKXt0aGlzLmFycmF5PW5ldyBhLmFycmF5LmNvbnN0cnVjdG9yKGEuYXJyYXkpO3RoaXMuaXRlbVNpemU9YS5pdGVtU2l6ZTt0aGlzLmNvdW50PWEuY291bnQ7dGhpcy5ub3JtYWxpemVkPWEubm9ybWFsaXplZDtcbiAgICB0aGlzLmR5bmFtaWM9YS5keW5hbWljO3JldHVybiB0aGlzfSxjb3B5QXQ6ZnVuY3Rpb24oYSxiLGMpe2EqPXRoaXMuaXRlbVNpemU7Yyo9Yi5pdGVtU2l6ZTtmb3IodmFyIGQ9MCxlPXRoaXMuaXRlbVNpemU7ZDxlO2QrKyl0aGlzLmFycmF5W2ErZF09Yi5hcnJheVtjK2RdO3JldHVybiB0aGlzfSxjb3B5QXJyYXk6ZnVuY3Rpb24oYSl7dGhpcy5hcnJheS5zZXQoYSk7cmV0dXJuIHRoaXN9LGNvcHlDb2xvcnNBcnJheTpmdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcy5hcnJheSxjPTAsZD0wLGU9YS5sZW5ndGg7ZDxlO2QrKyl7dmFyIGY9YVtkXTt2b2lkIDA9PT1mJiYoY29uc29sZS53YXJuKFwiVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlDb2xvcnNBcnJheSgpOiBjb2xvciBpcyB1bmRlZmluZWRcIixkKSxmPW5ldyBIKTtiW2MrK109Zi5yO2JbYysrXT1mLmc7YltjKytdPWYuYn1yZXR1cm4gdGhpc30sY29weUluZGljZXNBcnJheTpmdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcy5hcnJheSxcbiAgICBjPTAsZD0wLGU9YS5sZW5ndGg7ZDxlO2QrKyl7dmFyIGY9YVtkXTtiW2MrK109Zi5hO2JbYysrXT1mLmI7YltjKytdPWYuY31yZXR1cm4gdGhpc30sY29weVZlY3RvcjJzQXJyYXk6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPXRoaXMuYXJyYXksYz0wLGQ9MCxlPWEubGVuZ3RoO2Q8ZTtkKyspe3ZhciBmPWFbZF07dm9pZCAwPT09ZiYmKGNvbnNvbGUud2FybihcIlRIUkVFLkJ1ZmZlckF0dHJpYnV0ZS5jb3B5VmVjdG9yMnNBcnJheSgpOiB2ZWN0b3IgaXMgdW5kZWZpbmVkXCIsZCksZj1uZXcgRCk7YltjKytdPWYueDtiW2MrK109Zi55fXJldHVybiB0aGlzfSxjb3B5VmVjdG9yM3NBcnJheTpmdW5jdGlvbihhKXtmb3IodmFyIGI9dGhpcy5hcnJheSxjPTAsZD0wLGU9YS5sZW5ndGg7ZDxlO2QrKyl7dmFyIGY9YVtkXTt2b2lkIDA9PT1mJiYoY29uc29sZS53YXJuKFwiVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlWZWN0b3Izc0FycmF5KCk6IHZlY3RvciBpcyB1bmRlZmluZWRcIixkKSxmPW5ldyBwKTtcbiAgICBiW2MrK109Zi54O2JbYysrXT1mLnk7YltjKytdPWYuen1yZXR1cm4gdGhpc30sY29weVZlY3RvcjRzQXJyYXk6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPXRoaXMuYXJyYXksYz0wLGQ9MCxlPWEubGVuZ3RoO2Q8ZTtkKyspe3ZhciBmPWFbZF07dm9pZCAwPT09ZiYmKGNvbnNvbGUud2FybihcIlRIUkVFLkJ1ZmZlckF0dHJpYnV0ZS5jb3B5VmVjdG9yNHNBcnJheSgpOiB2ZWN0b3IgaXMgdW5kZWZpbmVkXCIsZCksZj1uZXcgYWEpO2JbYysrXT1mLng7YltjKytdPWYueTtiW2MrK109Zi56O2JbYysrXT1mLnd9cmV0dXJuIHRoaXN9LHNldDpmdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPTApO3RoaXMuYXJyYXkuc2V0KGEsYik7cmV0dXJuIHRoaXN9LGdldFg6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYXJyYXlbYSp0aGlzLml0ZW1TaXplXX0sc2V0WDpmdW5jdGlvbihhLGIpe3RoaXMuYXJyYXlbYSp0aGlzLml0ZW1TaXplXT1iO3JldHVybiB0aGlzfSxnZXRZOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmFycmF5W2EqXG4gICAgdGhpcy5pdGVtU2l6ZSsxXX0sc2V0WTpmdW5jdGlvbihhLGIpe3RoaXMuYXJyYXlbYSp0aGlzLml0ZW1TaXplKzFdPWI7cmV0dXJuIHRoaXN9LGdldFo6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuYXJyYXlbYSp0aGlzLml0ZW1TaXplKzJdfSxzZXRaOmZ1bmN0aW9uKGEsYil7dGhpcy5hcnJheVthKnRoaXMuaXRlbVNpemUrMl09YjtyZXR1cm4gdGhpc30sZ2V0VzpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5hcnJheVthKnRoaXMuaXRlbVNpemUrM119LHNldFc6ZnVuY3Rpb24oYSxiKXt0aGlzLmFycmF5W2EqdGhpcy5pdGVtU2l6ZSszXT1iO3JldHVybiB0aGlzfSxzZXRYWTpmdW5jdGlvbihhLGIsYyl7YSo9dGhpcy5pdGVtU2l6ZTt0aGlzLmFycmF5W2ErMF09Yjt0aGlzLmFycmF5W2ErMV09YztyZXR1cm4gdGhpc30sc2V0WFlaOmZ1bmN0aW9uKGEsYixjLGQpe2EqPXRoaXMuaXRlbVNpemU7dGhpcy5hcnJheVthKzBdPWI7dGhpcy5hcnJheVthKzFdPWM7dGhpcy5hcnJheVthKzJdPVxuICAgIGQ7cmV0dXJuIHRoaXN9LHNldFhZWlc6ZnVuY3Rpb24oYSxiLGMsZCxlKXthKj10aGlzLml0ZW1TaXplO3RoaXMuYXJyYXlbYSswXT1iO3RoaXMuYXJyYXlbYSsxXT1jO3RoaXMuYXJyYXlbYSsyXT1kO3RoaXMuYXJyYXlbYSszXT1lO3JldHVybiB0aGlzfSxvblVwbG9hZDpmdW5jdGlvbihhKXt0aGlzLm9uVXBsb2FkQ2FsbGJhY2s9YTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5hcnJheSx0aGlzLml0ZW1TaXplKSkuY29weSh0aGlzKX19KTt1Yy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShNLnByb3RvdHlwZSk7dWMucHJvdG90eXBlLmNvbnN0cnVjdG9yPXVjO3ZjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKE0ucHJvdG90eXBlKTt2Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9dmM7d2MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTS5wcm90b3R5cGUpO3djLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj13Yzt4Yy5wcm90b3R5cGU9XG4gICAgT2JqZWN0LmNyZWF0ZShNLnByb3RvdHlwZSk7eGMucHJvdG90eXBlLmNvbnN0cnVjdG9yPXhjO29iLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKE0ucHJvdG90eXBlKTtvYi5wcm90b3R5cGUuY29uc3RydWN0b3I9b2I7eWMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTS5wcm90b3R5cGUpO3ljLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj15YztwYi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShNLnByb3RvdHlwZSk7cGIucHJvdG90eXBlLmNvbnN0cnVjdG9yPXBiO0IucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTS5wcm90b3R5cGUpO0IucHJvdG90eXBlLmNvbnN0cnVjdG9yPUI7emMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTS5wcm90b3R5cGUpO3pjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj16YztPYmplY3QuYXNzaWduKFZlLnByb3RvdHlwZSx7Y29tcHV0ZUdyb3VwczpmdW5jdGlvbihhKXt2YXIgYj1bXSxjPXZvaWQgMDthPWEuZmFjZXM7Zm9yKHZhciBkPTA7ZDxhLmxlbmd0aDtkKyspe3ZhciBlPVxuICAgIGFbZF07aWYoZS5tYXRlcmlhbEluZGV4IT09Yyl7Yz1lLm1hdGVyaWFsSW5kZXg7dm9pZCAwIT09ZiYmKGYuY291bnQ9MypkLWYuc3RhcnQsYi5wdXNoKGYpKTt2YXIgZj17c3RhcnQ6MypkLG1hdGVyaWFsSW5kZXg6Y319fXZvaWQgMCE9PWYmJihmLmNvdW50PTMqZC1mLnN0YXJ0LGIucHVzaChmKSk7dGhpcy5ncm91cHM9Yn0sZnJvbUdlb21ldHJ5OmZ1bmN0aW9uKGEpe3ZhciBiPWEuZmFjZXMsYz1hLnZlcnRpY2VzLGQ9YS5mYWNlVmVydGV4VXZzLGU9ZFswXSYmMDxkWzBdLmxlbmd0aCxmPWRbMV0mJjA8ZFsxXS5sZW5ndGgsZz1hLm1vcnBoVGFyZ2V0cyxoPWcubGVuZ3RoO2lmKDA8aCl7dmFyIGs9W107Zm9yKHZhciBtPTA7bTxoO20rKylrW21dPVtdO3RoaXMubW9ycGhUYXJnZXRzLnBvc2l0aW9uPWt9dmFyIGw9YS5tb3JwaE5vcm1hbHMsbj1sLmxlbmd0aDtpZigwPG4pe3ZhciBwPVtdO2ZvcihtPTA7bTxuO20rKylwW21dPVtdO3RoaXMubW9ycGhUYXJnZXRzLm5vcm1hbD1wfWZvcih2YXIgcj1cbiAgICBhLnNraW5JbmRpY2VzLHQ9YS5za2luV2VpZ2h0cyx2PXIubGVuZ3RoPT09Yy5sZW5ndGgsdz10Lmxlbmd0aD09PWMubGVuZ3RoLG09MDttPGIubGVuZ3RoO20rKyl7dmFyIHo9YlttXTt0aGlzLnZlcnRpY2VzLnB1c2goY1t6LmFdLGNbei5iXSxjW3ouY10pO3ZhciB5PXoudmVydGV4Tm9ybWFsczszPT09eS5sZW5ndGg/dGhpcy5ub3JtYWxzLnB1c2goeVswXSx5WzFdLHlbMl0pOih5PXoubm9ybWFsLHRoaXMubm9ybWFscy5wdXNoKHkseSx5KSk7eT16LnZlcnRleENvbG9yczszPT09eS5sZW5ndGg/dGhpcy5jb2xvcnMucHVzaCh5WzBdLHlbMV0seVsyXSk6KHk9ei5jb2xvcix0aGlzLmNvbG9ycy5wdXNoKHkseSx5KSk7ITA9PT1lJiYoeT1kWzBdW21dLHZvaWQgMCE9PXk/dGhpcy51dnMucHVzaCh5WzBdLHlbMV0seVsyXSk6KGNvbnNvbGUud2FybihcIlRIUkVFLkRpcmVjdEdlb21ldHJ5LmZyb21HZW9tZXRyeSgpOiBVbmRlZmluZWQgdmVydGV4VXYgXCIsbSksdGhpcy51dnMucHVzaChuZXcgRCxcbiAgICBuZXcgRCxuZXcgRCkpKTshMD09PWYmJih5PWRbMV1bbV0sdm9pZCAwIT09eT90aGlzLnV2czIucHVzaCh5WzBdLHlbMV0seVsyXSk6KGNvbnNvbGUud2FybihcIlRIUkVFLkRpcmVjdEdlb21ldHJ5LmZyb21HZW9tZXRyeSgpOiBVbmRlZmluZWQgdmVydGV4VXYyIFwiLG0pLHRoaXMudXZzMi5wdXNoKG5ldyBELG5ldyBELG5ldyBEKSkpO2Zvcih5PTA7eTxoO3krKyl7dmFyIHg9Z1t5XS52ZXJ0aWNlcztrW3ldLnB1c2goeFt6LmFdLHhbei5iXSx4W3ouY10pfWZvcih5PTA7eTxuO3krKyl4PWxbeV0udmVydGV4Tm9ybWFsc1ttXSxwW3ldLnB1c2goeC5hLHguYix4LmMpO3YmJnRoaXMuc2tpbkluZGljZXMucHVzaChyW3ouYV0sclt6LmJdLHJbei5jXSk7dyYmdGhpcy5za2luV2VpZ2h0cy5wdXNoKHRbei5hXSx0W3ouYl0sdFt6LmNdKX10aGlzLmNvbXB1dGVHcm91cHMoYSk7dGhpcy52ZXJ0aWNlc05lZWRVcGRhdGU9YS52ZXJ0aWNlc05lZWRVcGRhdGU7dGhpcy5ub3JtYWxzTmVlZFVwZGF0ZT1cbiAgICBhLm5vcm1hbHNOZWVkVXBkYXRlO3RoaXMuY29sb3JzTmVlZFVwZGF0ZT1hLmNvbG9yc05lZWRVcGRhdGU7dGhpcy51dnNOZWVkVXBkYXRlPWEudXZzTmVlZFVwZGF0ZTt0aGlzLmdyb3Vwc05lZWRVcGRhdGU9YS5ncm91cHNOZWVkVXBkYXRlO3JldHVybiB0aGlzfX0pO3ZhciBlZz0xO0UucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZSh6YS5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpFLGlzQnVmZmVyR2VvbWV0cnk6ITAsZ2V0SW5kZXg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbmRleH0sc2V0SW5kZXg6ZnVuY3Rpb24oYSl7QXJyYXkuaXNBcnJheShhKT90aGlzLmluZGV4PW5ldyAoNjU1MzU8WGQoYSk/cGI6b2IpKGEsMSk6dGhpcy5pbmRleD1hfSxhZGRBdHRyaWJ1dGU6ZnVuY3Rpb24oYSxiLGMpe2lmKGImJmIuaXNCdWZmZXJBdHRyaWJ1dGV8fGImJmIuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSlpZihcImluZGV4XCI9PT1hKWNvbnNvbGUud2FybihcIlRIUkVFLkJ1ZmZlckdlb21ldHJ5LmFkZEF0dHJpYnV0ZTogVXNlIC5zZXRJbmRleCgpIGZvciBpbmRleCBhdHRyaWJ1dGUuXCIpLFxuICAgIHRoaXMuc2V0SW5kZXgoYik7ZWxzZSByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW2FdPWIsdGhpcztlbHNlIGNvbnNvbGUud2FybihcIlRIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkQXR0cmlidXRlKCkgbm93IGV4cGVjdHMgKCBuYW1lLCBhdHRyaWJ1dGUgKS5cIiksdGhpcy5hZGRBdHRyaWJ1dGUoYSxuZXcgTShiLGMpKX0sZ2V0QXR0cmlidXRlOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmF0dHJpYnV0ZXNbYV19LHJlbW92ZUF0dHJpYnV0ZTpmdW5jdGlvbihhKXtkZWxldGUgdGhpcy5hdHRyaWJ1dGVzW2FdO3JldHVybiB0aGlzfSxhZGRHcm91cDpmdW5jdGlvbihhLGIsYyl7dGhpcy5ncm91cHMucHVzaCh7c3RhcnQ6YSxjb3VudDpiLG1hdGVyaWFsSW5kZXg6dm9pZCAwIT09Yz9jOjB9KX0sY2xlYXJHcm91cHM6ZnVuY3Rpb24oKXt0aGlzLmdyb3Vwcz1bXX0sc2V0RHJhd1JhbmdlOmZ1bmN0aW9uKGEsYil7dGhpcy5kcmF3UmFuZ2Uuc3RhcnQ9YTt0aGlzLmRyYXdSYW5nZS5jb3VudD1ifSxcbiAgICBhcHBseU1hdHJpeDpmdW5jdGlvbihhKXt2YXIgYj10aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247dm9pZCAwIT09YiYmKGEuYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZShiKSxiLm5lZWRzVXBkYXRlPSEwKTtiPXRoaXMuYXR0cmlidXRlcy5ub3JtYWw7dm9pZCAwIT09YiYmKChuZXcgbWEpLmdldE5vcm1hbE1hdHJpeChhKS5hcHBseVRvQnVmZmVyQXR0cmlidXRlKGIpLGIubmVlZHNVcGRhdGU9ITApO251bGwhPT10aGlzLmJvdW5kaW5nQm94JiZ0aGlzLmNvbXB1dGVCb3VuZGluZ0JveCgpO251bGwhPT10aGlzLmJvdW5kaW5nU3BoZXJlJiZ0aGlzLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO3JldHVybiB0aGlzfSxyb3RhdGVYOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IE87cmV0dXJuIGZ1bmN0aW9uKGIpe2EubWFrZVJvdGF0aW9uWChiKTt0aGlzLmFwcGx5TWF0cml4KGEpO3JldHVybiB0aGlzfX0oKSxyb3RhdGVZOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IE87cmV0dXJuIGZ1bmN0aW9uKGIpe2EubWFrZVJvdGF0aW9uWShiKTtcbiAgICB0aGlzLmFwcGx5TWF0cml4KGEpO3JldHVybiB0aGlzfX0oKSxyb3RhdGVaOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IE87cmV0dXJuIGZ1bmN0aW9uKGIpe2EubWFrZVJvdGF0aW9uWihiKTt0aGlzLmFwcGx5TWF0cml4KGEpO3JldHVybiB0aGlzfX0oKSx0cmFuc2xhdGU6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgTztyZXR1cm4gZnVuY3Rpb24oYixjLGQpe2EubWFrZVRyYW5zbGF0aW9uKGIsYyxkKTt0aGlzLmFwcGx5TWF0cml4KGEpO3JldHVybiB0aGlzfX0oKSxzY2FsZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBPO3JldHVybiBmdW5jdGlvbihiLGMsZCl7YS5tYWtlU2NhbGUoYixjLGQpO3RoaXMuYXBwbHlNYXRyaXgoYSk7cmV0dXJuIHRoaXN9fSgpLGxvb2tBdDpmdW5jdGlvbigpe3ZhciBhPW5ldyB4O3JldHVybiBmdW5jdGlvbihiKXthLmxvb2tBdChiKTthLnVwZGF0ZU1hdHJpeCgpO3RoaXMuYXBwbHlNYXRyaXgoYS5tYXRyaXgpfX0oKSxjZW50ZXI6ZnVuY3Rpb24oKXt0aGlzLmNvbXB1dGVCb3VuZGluZ0JveCgpO1xuICAgIHZhciBhPXRoaXMuYm91bmRpbmdCb3guZ2V0Q2VudGVyKCkubmVnYXRlKCk7dGhpcy50cmFuc2xhdGUoYS54LGEueSxhLnopO3JldHVybiBhfSxzZXRGcm9tT2JqZWN0OmZ1bmN0aW9uKGEpe3ZhciBiPWEuZ2VvbWV0cnk7aWYoYS5pc1BvaW50c3x8YS5pc0xpbmUpe2E9bmV3IEIoMypiLnZlcnRpY2VzLmxlbmd0aCwzKTt2YXIgYz1uZXcgQigzKmIuY29sb3JzLmxlbmd0aCwzKTt0aGlzLmFkZEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsYS5jb3B5VmVjdG9yM3NBcnJheShiLnZlcnRpY2VzKSk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJjb2xvclwiLGMuY29weUNvbG9yc0FycmF5KGIuY29sb3JzKSk7Yi5saW5lRGlzdGFuY2VzJiZiLmxpbmVEaXN0YW5jZXMubGVuZ3RoPT09Yi52ZXJ0aWNlcy5sZW5ndGgmJihhPW5ldyBCKGIubGluZURpc3RhbmNlcy5sZW5ndGgsMSksdGhpcy5hZGRBdHRyaWJ1dGUoXCJsaW5lRGlzdGFuY2VcIixhLmNvcHlBcnJheShiLmxpbmVEaXN0YW5jZXMpKSk7bnVsbCE9PWIuYm91bmRpbmdTcGhlcmUmJlxuICAgICh0aGlzLmJvdW5kaW5nU3BoZXJlPWIuYm91bmRpbmdTcGhlcmUuY2xvbmUoKSk7bnVsbCE9PWIuYm91bmRpbmdCb3gmJih0aGlzLmJvdW5kaW5nQm94PWIuYm91bmRpbmdCb3guY2xvbmUoKSl9ZWxzZSBhLmlzTWVzaCYmYiYmYi5pc0dlb21ldHJ5JiZ0aGlzLmZyb21HZW9tZXRyeShiKTtyZXR1cm4gdGhpc30sc2V0RnJvbVBvaW50czpmdW5jdGlvbihhKXtmb3IodmFyIGI9W10sYz0wLGQ9YS5sZW5ndGg7YzxkO2MrKyl7dmFyIGU9YVtjXTtiLnB1c2goZS54LGUueSxlLnp8fDApfXRoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihiLDMpKTtyZXR1cm4gdGhpc30sdXBkYXRlRnJvbU9iamVjdDpmdW5jdGlvbihhKXt2YXIgYj1hLmdlb21ldHJ5O2lmKGEuaXNNZXNoKXt2YXIgYz1iLl9fZGlyZWN0R2VvbWV0cnk7ITA9PT1iLmVsZW1lbnRzTmVlZFVwZGF0ZSYmKGM9dm9pZCAwLGIuZWxlbWVudHNOZWVkVXBkYXRlPSExKTtpZih2b2lkIDA9PT1jKXJldHVybiB0aGlzLmZyb21HZW9tZXRyeShiKTtcbiAgICBjLnZlcnRpY2VzTmVlZFVwZGF0ZT1iLnZlcnRpY2VzTmVlZFVwZGF0ZTtjLm5vcm1hbHNOZWVkVXBkYXRlPWIubm9ybWFsc05lZWRVcGRhdGU7Yy5jb2xvcnNOZWVkVXBkYXRlPWIuY29sb3JzTmVlZFVwZGF0ZTtjLnV2c05lZWRVcGRhdGU9Yi51dnNOZWVkVXBkYXRlO2MuZ3JvdXBzTmVlZFVwZGF0ZT1iLmdyb3Vwc05lZWRVcGRhdGU7Yi52ZXJ0aWNlc05lZWRVcGRhdGU9ITE7Yi5ub3JtYWxzTmVlZFVwZGF0ZT0hMTtiLmNvbG9yc05lZWRVcGRhdGU9ITE7Yi51dnNOZWVkVXBkYXRlPSExO2IuZ3JvdXBzTmVlZFVwZGF0ZT0hMTtiPWN9ITA9PT1iLnZlcnRpY2VzTmVlZFVwZGF0ZSYmKGM9dGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uLHZvaWQgMCE9PWMmJihjLmNvcHlWZWN0b3Izc0FycmF5KGIudmVydGljZXMpLGMubmVlZHNVcGRhdGU9ITApLGIudmVydGljZXNOZWVkVXBkYXRlPSExKTshMD09PWIubm9ybWFsc05lZWRVcGRhdGUmJihjPXRoaXMuYXR0cmlidXRlcy5ub3JtYWwsdm9pZCAwIT09XG4gICAgYyYmKGMuY29weVZlY3RvcjNzQXJyYXkoYi5ub3JtYWxzKSxjLm5lZWRzVXBkYXRlPSEwKSxiLm5vcm1hbHNOZWVkVXBkYXRlPSExKTshMD09PWIuY29sb3JzTmVlZFVwZGF0ZSYmKGM9dGhpcy5hdHRyaWJ1dGVzLmNvbG9yLHZvaWQgMCE9PWMmJihjLmNvcHlDb2xvcnNBcnJheShiLmNvbG9ycyksYy5uZWVkc1VwZGF0ZT0hMCksYi5jb2xvcnNOZWVkVXBkYXRlPSExKTtiLnV2c05lZWRVcGRhdGUmJihjPXRoaXMuYXR0cmlidXRlcy51dix2b2lkIDAhPT1jJiYoYy5jb3B5VmVjdG9yMnNBcnJheShiLnV2cyksYy5uZWVkc1VwZGF0ZT0hMCksYi51dnNOZWVkVXBkYXRlPSExKTtiLmxpbmVEaXN0YW5jZXNOZWVkVXBkYXRlJiYoYz10aGlzLmF0dHJpYnV0ZXMubGluZURpc3RhbmNlLHZvaWQgMCE9PWMmJihjLmNvcHlBcnJheShiLmxpbmVEaXN0YW5jZXMpLGMubmVlZHNVcGRhdGU9ITApLGIubGluZURpc3RhbmNlc05lZWRVcGRhdGU9ITEpO2IuZ3JvdXBzTmVlZFVwZGF0ZSYmKGIuY29tcHV0ZUdyb3VwcyhhLmdlb21ldHJ5KSxcbiAgICB0aGlzLmdyb3Vwcz1iLmdyb3VwcyxiLmdyb3Vwc05lZWRVcGRhdGU9ITEpO3JldHVybiB0aGlzfSxmcm9tR2VvbWV0cnk6ZnVuY3Rpb24oYSl7YS5fX2RpcmVjdEdlb21ldHJ5PShuZXcgVmUpLmZyb21HZW9tZXRyeShhKTtyZXR1cm4gdGhpcy5mcm9tRGlyZWN0R2VvbWV0cnkoYS5fX2RpcmVjdEdlb21ldHJ5KX0sZnJvbURpcmVjdEdlb21ldHJ5OmZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBGbG9hdDMyQXJyYXkoMyphLnZlcnRpY2VzLmxlbmd0aCk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLChuZXcgTShiLDMpKS5jb3B5VmVjdG9yM3NBcnJheShhLnZlcnRpY2VzKSk7MDxhLm5vcm1hbHMubGVuZ3RoJiYoYj1uZXcgRmxvYXQzMkFycmF5KDMqYS5ub3JtYWxzLmxlbmd0aCksdGhpcy5hZGRBdHRyaWJ1dGUoXCJub3JtYWxcIiwobmV3IE0oYiwzKSkuY29weVZlY3RvcjNzQXJyYXkoYS5ub3JtYWxzKSkpOzA8YS5jb2xvcnMubGVuZ3RoJiYoYj1uZXcgRmxvYXQzMkFycmF5KDMqYS5jb2xvcnMubGVuZ3RoKSxcbiAgICB0aGlzLmFkZEF0dHJpYnV0ZShcImNvbG9yXCIsKG5ldyBNKGIsMykpLmNvcHlDb2xvcnNBcnJheShhLmNvbG9ycykpKTswPGEudXZzLmxlbmd0aCYmKGI9bmV3IEZsb2F0MzJBcnJheSgyKmEudXZzLmxlbmd0aCksdGhpcy5hZGRBdHRyaWJ1dGUoXCJ1dlwiLChuZXcgTShiLDIpKS5jb3B5VmVjdG9yMnNBcnJheShhLnV2cykpKTswPGEudXZzMi5sZW5ndGgmJihiPW5ldyBGbG9hdDMyQXJyYXkoMiphLnV2czIubGVuZ3RoKSx0aGlzLmFkZEF0dHJpYnV0ZShcInV2MlwiLChuZXcgTShiLDIpKS5jb3B5VmVjdG9yMnNBcnJheShhLnV2czIpKSk7MDxhLmluZGljZXMubGVuZ3RoJiYoYj1uZXcgKDY1NTM1PFhkKGEuaW5kaWNlcyk/VWludDMyQXJyYXk6VWludDE2QXJyYXkpKDMqYS5pbmRpY2VzLmxlbmd0aCksdGhpcy5zZXRJbmRleCgobmV3IE0oYiwxKSkuY29weUluZGljZXNBcnJheShhLmluZGljZXMpKSk7dGhpcy5ncm91cHM9YS5ncm91cHM7Zm9yKHZhciBjIGluIGEubW9ycGhUYXJnZXRzKXtmb3IodmFyIGI9XG4gICAgW10sZD1hLm1vcnBoVGFyZ2V0c1tjXSxlPTAsZj1kLmxlbmd0aDtlPGY7ZSsrKXt2YXIgZz1kW2VdLGg9bmV3IEIoMypnLmxlbmd0aCwzKTtiLnB1c2goaC5jb3B5VmVjdG9yM3NBcnJheShnKSl9dGhpcy5tb3JwaEF0dHJpYnV0ZXNbY109Yn0wPGEuc2tpbkluZGljZXMubGVuZ3RoJiYoYz1uZXcgQig0KmEuc2tpbkluZGljZXMubGVuZ3RoLDQpLHRoaXMuYWRkQXR0cmlidXRlKFwic2tpbkluZGV4XCIsYy5jb3B5VmVjdG9yNHNBcnJheShhLnNraW5JbmRpY2VzKSkpOzA8YS5za2luV2VpZ2h0cy5sZW5ndGgmJihjPW5ldyBCKDQqYS5za2luV2VpZ2h0cy5sZW5ndGgsNCksdGhpcy5hZGRBdHRyaWJ1dGUoXCJza2luV2VpZ2h0XCIsYy5jb3B5VmVjdG9yNHNBcnJheShhLnNraW5XZWlnaHRzKSkpO251bGwhPT1hLmJvdW5kaW5nU3BoZXJlJiYodGhpcy5ib3VuZGluZ1NwaGVyZT1hLmJvdW5kaW5nU3BoZXJlLmNsb25lKCkpO251bGwhPT1hLmJvdW5kaW5nQm94JiYodGhpcy5ib3VuZGluZ0JveD1cbiAgICBhLmJvdW5kaW5nQm94LmNsb25lKCkpO3JldHVybiB0aGlzfSxjb21wdXRlQm91bmRpbmdCb3g6ZnVuY3Rpb24oKXtudWxsPT09dGhpcy5ib3VuZGluZ0JveCYmKHRoaXMuYm91bmRpbmdCb3g9bmV3IFhhKTt2YXIgYT10aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247dm9pZCAwIT09YT90aGlzLmJvdW5kaW5nQm94LnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoYSk6dGhpcy5ib3VuZGluZ0JveC5tYWtlRW1wdHkoKTsoaXNOYU4odGhpcy5ib3VuZGluZ0JveC5taW4ueCl8fGlzTmFOKHRoaXMuYm91bmRpbmdCb3gubWluLnkpfHxpc05hTih0aGlzLmJvdW5kaW5nQm94Lm1pbi56KSkmJmNvbnNvbGUuZXJyb3IoJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ0JveDogQ29tcHV0ZWQgbWluL21heCBoYXZlIE5hTiB2YWx1ZXMuIFRoZSBcInBvc2l0aW9uXCIgYXR0cmlidXRlIGlzIGxpa2VseSB0byBoYXZlIE5hTiB2YWx1ZXMuJyx0aGlzKX0sY29tcHV0ZUJvdW5kaW5nU3BoZXJlOmZ1bmN0aW9uKCl7dmFyIGE9XG4gICAgbmV3IFhhLGI9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKCl7bnVsbD09PXRoaXMuYm91bmRpbmdTcGhlcmUmJih0aGlzLmJvdW5kaW5nU3BoZXJlPW5ldyBJYSk7dmFyIGM9dGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO2lmKGMpe3ZhciBkPXRoaXMuYm91bmRpbmdTcGhlcmUuY2VudGVyO2Euc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZShjKTthLmdldENlbnRlcihkKTtmb3IodmFyIGU9MCxmPTAsZz1jLmNvdW50O2Y8ZztmKyspYi54PWMuZ2V0WChmKSxiLnk9Yy5nZXRZKGYpLGIuej1jLmdldFooZiksZT1NYXRoLm1heChlLGQuZGlzdGFuY2VUb1NxdWFyZWQoYikpO3RoaXMuYm91bmRpbmdTcGhlcmUucmFkaXVzPU1hdGguc3FydChlKTtpc05hTih0aGlzLmJvdW5kaW5nU3BoZXJlLnJhZGl1cykmJmNvbnNvbGUuZXJyb3IoJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpOiBDb21wdXRlZCByYWRpdXMgaXMgTmFOLiBUaGUgXCJwb3NpdGlvblwiIGF0dHJpYnV0ZSBpcyBsaWtlbHkgdG8gaGF2ZSBOYU4gdmFsdWVzLicsXG4gICAgdGhpcyl9fX0oKSxjb21wdXRlRmFjZU5vcm1hbHM6ZnVuY3Rpb24oKXt9LGNvbXB1dGVWZXJ0ZXhOb3JtYWxzOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5pbmRleCxiPXRoaXMuYXR0cmlidXRlcyxjPXRoaXMuZ3JvdXBzO2lmKGIucG9zaXRpb24pe3ZhciBkPWIucG9zaXRpb24uYXJyYXk7aWYodm9pZCAwPT09Yi5ub3JtYWwpdGhpcy5hZGRBdHRyaWJ1dGUoXCJub3JtYWxcIixuZXcgTShuZXcgRmxvYXQzMkFycmF5KGQubGVuZ3RoKSwzKSk7ZWxzZSBmb3IodmFyIGU9Yi5ub3JtYWwuYXJyYXksZj0wLGc9ZS5sZW5ndGg7ZjxnO2YrKyllW2ZdPTA7dmFyIGU9Yi5ub3JtYWwuYXJyYXksaD1uZXcgcCxrPW5ldyBwLG09bmV3IHAsbD1uZXcgcCxuPW5ldyBwO2lmKGEpe2E9YS5hcnJheTswPT09Yy5sZW5ndGgmJnRoaXMuYWRkR3JvdXAoMCxhLmxlbmd0aCk7Zm9yKHZhciB1PTAscj1jLmxlbmd0aDt1PHI7Kyt1KXtmPWNbdV07Zz1mLnN0YXJ0O3ZhciB0PWYuY291bnQ7Zj1nO2ZvcihnKz10O2Y8XG4gICAgZztmKz0zKXt0PTMqYVtmKzBdO3ZhciB2PTMqYVtmKzFdO3ZhciB3PTMqYVtmKzJdO2guZnJvbUFycmF5KGQsdCk7ay5mcm9tQXJyYXkoZCx2KTttLmZyb21BcnJheShkLHcpO2wuc3ViVmVjdG9ycyhtLGspO24uc3ViVmVjdG9ycyhoLGspO2wuY3Jvc3Mobik7ZVt0XSs9bC54O2VbdCsxXSs9bC55O2VbdCsyXSs9bC56O2Vbdl0rPWwueDtlW3YrMV0rPWwueTtlW3YrMl0rPWwuejtlW3ddKz1sLng7ZVt3KzFdKz1sLnk7ZVt3KzJdKz1sLnp9fX1lbHNlIGZvcihmPTAsZz1kLmxlbmd0aDtmPGc7Zis9OSloLmZyb21BcnJheShkLGYpLGsuZnJvbUFycmF5KGQsZiszKSxtLmZyb21BcnJheShkLGYrNiksbC5zdWJWZWN0b3JzKG0sayksbi5zdWJWZWN0b3JzKGgsayksbC5jcm9zcyhuKSxlW2ZdPWwueCxlW2YrMV09bC55LGVbZisyXT1sLnosZVtmKzNdPWwueCxlW2YrNF09bC55LGVbZis1XT1sLnosZVtmKzZdPWwueCxlW2YrN109bC55LGVbZis4XT1sLno7dGhpcy5ub3JtYWxpemVOb3JtYWxzKCk7XG4gICAgYi5ub3JtYWwubmVlZHNVcGRhdGU9ITB9fSxtZXJnZTpmdW5jdGlvbihhLGIpe2lmKGEmJmEuaXNCdWZmZXJHZW9tZXRyeSl7dm9pZCAwPT09YiYmKGI9MCk7dmFyIGM9dGhpcy5hdHRyaWJ1dGVzLGQ7Zm9yKGQgaW4gYylpZih2b2lkIDAhPT1hLmF0dHJpYnV0ZXNbZF0pZm9yKHZhciBlPWNbZF0uYXJyYXksZj1hLmF0dHJpYnV0ZXNbZF0sZz1mLmFycmF5LGg9MCxmPWYuaXRlbVNpemUqYjtoPGcubGVuZ3RoO2grKyxmKyspZVtmXT1nW2hdO3JldHVybiB0aGlzfWNvbnNvbGUuZXJyb3IoXCJUSFJFRS5CdWZmZXJHZW9tZXRyeS5tZXJnZSgpOiBnZW9tZXRyeSBub3QgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnkuXCIsYSl9LG5vcm1hbGl6ZU5vcm1hbHM6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oKXtmb3IodmFyIGI9dGhpcy5hdHRyaWJ1dGVzLm5vcm1hbCxjPTAsZD1iLmNvdW50O2M8ZDtjKyspYS54PWIuZ2V0WChjKSxhLnk9Yi5nZXRZKGMpLFxuICAgIGEuej1iLmdldFooYyksYS5ub3JtYWxpemUoKSxiLnNldFhZWihjLGEueCxhLnksYS56KX19KCksdG9Ob25JbmRleGVkOmZ1bmN0aW9uKCl7aWYobnVsbD09PXRoaXMuaW5kZXgpcmV0dXJuIGNvbnNvbGUud2FybihcIlRIUkVFLkJ1ZmZlckdlb21ldHJ5LnRvTm9uSW5kZXhlZCgpOiBHZW9tZXRyeSBpcyBhbHJlYWR5IG5vbi1pbmRleGVkLlwiKSx0aGlzO3ZhciBhPW5ldyBFLGI9dGhpcy5pbmRleC5hcnJheSxjPXRoaXMuYXR0cmlidXRlcyxkO2ZvcihkIGluIGMpe2Zvcih2YXIgZT1jW2RdLGY9ZS5hcnJheSxlPWUuaXRlbVNpemUsZz1uZXcgZi5jb25zdHJ1Y3RvcihiLmxlbmd0aCplKSxoLGs9MCxtPTAsbD1iLmxlbmd0aDttPGw7bSsrKXtoPWJbbV0qZTtmb3IodmFyIG49MDtuPGU7bisrKWdbaysrXT1mW2grK119YS5hZGRBdHRyaWJ1dGUoZCxuZXcgTShnLGUpKX1yZXR1cm4gYX0sdG9KU09OOmZ1bmN0aW9uKCl7dmFyIGE9e21ldGFkYXRhOnt2ZXJzaW9uOjQuNSx0eXBlOlwiQnVmZmVyR2VvbWV0cnlcIixcbiAgICBnZW5lcmF0b3I6XCJCdWZmZXJHZW9tZXRyeS50b0pTT05cIn19O2EudXVpZD10aGlzLnV1aWQ7YS50eXBlPXRoaXMudHlwZTtcIlwiIT09dGhpcy5uYW1lJiYoYS5uYW1lPXRoaXMubmFtZSk7aWYodm9pZCAwIT09dGhpcy5wYXJhbWV0ZXJzKXt2YXIgYj10aGlzLnBhcmFtZXRlcnM7Zm9yKHZhciBjIGluIGIpdm9pZCAwIT09YltjXSYmKGFbY109YltjXSk7cmV0dXJuIGF9YS5kYXRhPXthdHRyaWJ1dGVzOnt9fTt2YXIgZD10aGlzLmluZGV4O251bGwhPT1kJiYoYj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkLmFycmF5KSxhLmRhdGEuaW5kZXg9e3R5cGU6ZC5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLGFycmF5OmJ9KTtkPXRoaXMuYXR0cmlidXRlcztmb3IoYyBpbiBkKXt2YXIgZT1kW2NdO2I9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZS5hcnJheSk7YS5kYXRhLmF0dHJpYnV0ZXNbY109e2l0ZW1TaXplOmUuaXRlbVNpemUsdHlwZTplLmFycmF5LmNvbnN0cnVjdG9yLm5hbWUsXG4gICAgYXJyYXk6Yixub3JtYWxpemVkOmUubm9ybWFsaXplZH19Yz10aGlzLmdyb3VwczswPGMubGVuZ3RoJiYoYS5kYXRhLmdyb3Vwcz1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGMpKSk7Yz10aGlzLmJvdW5kaW5nU3BoZXJlO251bGwhPT1jJiYoYS5kYXRhLmJvdW5kaW5nU3BoZXJlPXtjZW50ZXI6Yy5jZW50ZXIudG9BcnJheSgpLHJhZGl1czpjLnJhZGl1c30pO3JldHVybiBhfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgRSkuY29weSh0aGlzKX0sY29weTpmdW5jdGlvbihhKXt2YXIgYjt0aGlzLmluZGV4PW51bGw7dGhpcy5hdHRyaWJ1dGVzPXt9O3RoaXMubW9ycGhBdHRyaWJ1dGVzPXt9O3RoaXMuZ3JvdXBzPVtdO3RoaXMuYm91bmRpbmdTcGhlcmU9dGhpcy5ib3VuZGluZ0JveD1udWxsO3RoaXMubmFtZT1hLm5hbWU7dmFyIGM9YS5pbmRleDtudWxsIT09YyYmdGhpcy5zZXRJbmRleChjLmNsb25lKCkpO2M9YS5hdHRyaWJ1dGVzO2ZvcihnIGluIGMpdGhpcy5hZGRBdHRyaWJ1dGUoZyxcbiAgICBjW2ddLmNsb25lKCkpO3ZhciBkPWEubW9ycGhBdHRyaWJ1dGVzO2ZvcihnIGluIGQpe3ZhciBlPVtdLGY9ZFtnXTtjPTA7Zm9yKGI9Zi5sZW5ndGg7YzxiO2MrKyllLnB1c2goZltjXS5jbG9uZSgpKTt0aGlzLm1vcnBoQXR0cmlidXRlc1tnXT1lfXZhciBnPWEuZ3JvdXBzO2M9MDtmb3IoYj1nLmxlbmd0aDtjPGI7YysrKWQ9Z1tjXSx0aGlzLmFkZEdyb3VwKGQuc3RhcnQsZC5jb3VudCxkLm1hdGVyaWFsSW5kZXgpO2c9YS5ib3VuZGluZ0JveDtudWxsIT09ZyYmKHRoaXMuYm91bmRpbmdCb3g9Zy5jbG9uZSgpKTtnPWEuYm91bmRpbmdTcGhlcmU7bnVsbCE9PWcmJih0aGlzLmJvdW5kaW5nU3BoZXJlPWcuY2xvbmUoKSk7dGhpcy5kcmF3UmFuZ2Uuc3RhcnQ9YS5kcmF3UmFuZ2Uuc3RhcnQ7dGhpcy5kcmF3UmFuZ2UuY291bnQ9YS5kcmF3UmFuZ2UuY291bnQ7cmV0dXJuIHRoaXN9LGRpc3Bvc2U6ZnVuY3Rpb24oKXt0aGlzLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJkaXNwb3NlXCJ9KX19KTtcbiAgICBNYi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShMLnByb3RvdHlwZSk7TWIucHJvdG90eXBlLmNvbnN0cnVjdG9yPU1iO3FiLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEUucHJvdG90eXBlKTtxYi5wcm90b3R5cGUuY29uc3RydWN0b3I9cWI7QWMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTC5wcm90b3R5cGUpO0FjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1BYztyYi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFLnByb3RvdHlwZSk7cmIucHJvdG90eXBlLmNvbnN0cnVjdG9yPXJiO0FhLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFAucHJvdG90eXBlKTtBYS5wcm90b3R5cGUuY29uc3RydWN0b3I9QWE7QWEucHJvdG90eXBlLmlzTWVzaEJhc2ljTWF0ZXJpYWw9ITA7QWEucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7UC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5jb2xvci5jb3B5KGEuY29sb3IpO3RoaXMubWFwPWEubWFwO3RoaXMubGlnaHRNYXA9YS5saWdodE1hcDtcbiAgICB0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5PWEubGlnaHRNYXBJbnRlbnNpdHk7dGhpcy5hb01hcD1hLmFvTWFwO3RoaXMuYW9NYXBJbnRlbnNpdHk9YS5hb01hcEludGVuc2l0eTt0aGlzLnNwZWN1bGFyTWFwPWEuc3BlY3VsYXJNYXA7dGhpcy5hbHBoYU1hcD1hLmFscGhhTWFwO3RoaXMuZW52TWFwPWEuZW52TWFwO3RoaXMuY29tYmluZT1hLmNvbWJpbmU7dGhpcy5yZWZsZWN0aXZpdHk9YS5yZWZsZWN0aXZpdHk7dGhpcy5yZWZyYWN0aW9uUmF0aW89YS5yZWZyYWN0aW9uUmF0aW87dGhpcy53aXJlZnJhbWU9YS53aXJlZnJhbWU7dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg9YS53aXJlZnJhbWVMaW5ld2lkdGg7dGhpcy53aXJlZnJhbWVMaW5lY2FwPWEud2lyZWZyYW1lTGluZWNhcDt0aGlzLndpcmVmcmFtZUxpbmVqb2luPWEud2lyZWZyYW1lTGluZWpvaW47dGhpcy5za2lubmluZz1hLnNraW5uaW5nO3RoaXMubW9ycGhUYXJnZXRzPWEubW9ycGhUYXJnZXRzO3JldHVybiB0aGlzfTtGYS5wcm90b3R5cGU9XG4gICAgT2JqZWN0LmNyZWF0ZShQLnByb3RvdHlwZSk7RmEucHJvdG90eXBlLmNvbnN0cnVjdG9yPUZhO0ZhLnByb3RvdHlwZS5pc1NoYWRlck1hdGVyaWFsPSEwO0ZhLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe1AucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMuZnJhZ21lbnRTaGFkZXI9YS5mcmFnbWVudFNoYWRlcjt0aGlzLnZlcnRleFNoYWRlcj1hLnZlcnRleFNoYWRlcjt0aGlzLnVuaWZvcm1zPUdhLmNsb25lKGEudW5pZm9ybXMpO3RoaXMuZGVmaW5lcz1hLmRlZmluZXM7dGhpcy53aXJlZnJhbWU9YS53aXJlZnJhbWU7dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg9YS53aXJlZnJhbWVMaW5ld2lkdGg7dGhpcy5saWdodHM9YS5saWdodHM7dGhpcy5jbGlwcGluZz1hLmNsaXBwaW5nO3RoaXMuc2tpbm5pbmc9YS5za2lubmluZzt0aGlzLm1vcnBoVGFyZ2V0cz1hLm1vcnBoVGFyZ2V0czt0aGlzLm1vcnBoTm9ybWFscz1hLm1vcnBoTm9ybWFsczt0aGlzLmV4dGVuc2lvbnM9XG4gICAgYS5leHRlbnNpb25zO3JldHVybiB0aGlzfTtGYS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKGEpe2E9UC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyxhKTthLnVuaWZvcm1zPXRoaXMudW5pZm9ybXM7YS52ZXJ0ZXhTaGFkZXI9dGhpcy52ZXJ0ZXhTaGFkZXI7YS5mcmFnbWVudFNoYWRlcj10aGlzLmZyYWdtZW50U2hhZGVyO3JldHVybiBhfTtPYmplY3QuYXNzaWduKHNiLnByb3RvdHlwZSx7c2V0OmZ1bmN0aW9uKGEsYil7dGhpcy5vcmlnaW4uY29weShhKTt0aGlzLmRpcmVjdGlvbi5jb3B5KGIpO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX0sY29weTpmdW5jdGlvbihhKXt0aGlzLm9yaWdpbi5jb3B5KGEub3JpZ2luKTt0aGlzLmRpcmVjdGlvbi5jb3B5KGEuZGlyZWN0aW9uKTtyZXR1cm4gdGhpc30sYXQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm4oYnx8bmV3IHApLmNvcHkodGhpcy5kaXJlY3Rpb24pLm11bHRpcGx5U2NhbGFyKGEpLmFkZCh0aGlzLm9yaWdpbil9LFxuICAgIGxvb2tBdDpmdW5jdGlvbihhKXt0aGlzLmRpcmVjdGlvbi5jb3B5KGEpLnN1Yih0aGlzLm9yaWdpbikubm9ybWFsaXplKCk7cmV0dXJuIHRoaXN9LHJlY2FzdDpmdW5jdGlvbigpe3ZhciBhPW5ldyBwO3JldHVybiBmdW5jdGlvbihiKXt0aGlzLm9yaWdpbi5jb3B5KHRoaXMuYXQoYixhKSk7cmV0dXJuIHRoaXN9fSgpLGNsb3Nlc3RQb2ludFRvUG9pbnQ6ZnVuY3Rpb24oYSxiKXtiPWJ8fG5ldyBwO2Iuc3ViVmVjdG9ycyhhLHRoaXMub3JpZ2luKTthPWIuZG90KHRoaXMuZGlyZWN0aW9uKTtyZXR1cm4gMD5hP2IuY29weSh0aGlzLm9yaWdpbik6Yi5jb3B5KHRoaXMuZGlyZWN0aW9uKS5tdWx0aXBseVNjYWxhcihhKS5hZGQodGhpcy5vcmlnaW4pfSxkaXN0YW5jZVRvUG9pbnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIE1hdGguc3FydCh0aGlzLmRpc3RhbmNlU3FUb1BvaW50KGEpKX0sZGlzdGFuY2VTcVRvUG9pbnQ6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oYil7dmFyIGM9XG4gICAgYS5zdWJWZWN0b3JzKGIsdGhpcy5vcmlnaW4pLmRvdCh0aGlzLmRpcmVjdGlvbik7aWYoMD5jKXJldHVybiB0aGlzLm9yaWdpbi5kaXN0YW5jZVRvU3F1YXJlZChiKTthLmNvcHkodGhpcy5kaXJlY3Rpb24pLm11bHRpcGx5U2NhbGFyKGMpLmFkZCh0aGlzLm9yaWdpbik7cmV0dXJuIGEuZGlzdGFuY2VUb1NxdWFyZWQoYil9fSgpLGRpc3RhbmNlU3FUb1NlZ21lbnQ6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcCxiPW5ldyBwLGM9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGQsZSxmLGcpe2EuY29weShkKS5hZGQoZSkubXVsdGlwbHlTY2FsYXIoLjUpO2IuY29weShlKS5zdWIoZCkubm9ybWFsaXplKCk7Yy5jb3B5KHRoaXMub3JpZ2luKS5zdWIoYSk7dmFyIGg9LjUqZC5kaXN0YW5jZVRvKGUpLGs9LXRoaXMuZGlyZWN0aW9uLmRvdChiKSxtPWMuZG90KHRoaXMuZGlyZWN0aW9uKSxsPS1jLmRvdChiKSxuPWMubGVuZ3RoU3EoKSxwPU1hdGguYWJzKDEtayprKTtpZigwPHApe2Q9aypsLW07ZT1rKlxuICAgIG0tbDt2YXIgcj1oKnA7MDw9ZD9lPj0tcj9lPD1yPyhoPTEvcCxkKj1oLGUqPWgsaz1kKihkK2sqZSsyKm0pK2UqKGsqZCtlKzIqbCkrbik6KGU9aCxkPU1hdGgubWF4KDAsLShrKmUrbSkpLGs9LWQqZCtlKihlKzIqbCkrbik6KGU9LWgsZD1NYXRoLm1heCgwLC0oayplK20pKSxrPS1kKmQrZSooZSsyKmwpK24pOmU8PS1yPyhkPU1hdGgubWF4KDAsLSgtaypoK20pKSxlPTA8ZD8taDpNYXRoLm1pbihNYXRoLm1heCgtaCwtbCksaCksaz0tZCpkK2UqKGUrMipsKStuKTplPD1yPyhkPTAsZT1NYXRoLm1pbihNYXRoLm1heCgtaCwtbCksaCksaz1lKihlKzIqbCkrbik6KGQ9TWF0aC5tYXgoMCwtKGsqaCttKSksZT0wPGQ/aDpNYXRoLm1pbihNYXRoLm1heCgtaCwtbCksaCksaz0tZCpkK2UqKGUrMipsKStuKX1lbHNlIGU9MDxrPy1oOmgsZD1NYXRoLm1heCgwLC0oayplK20pKSxrPS1kKmQrZSooZSsyKmwpK247ZiYmZi5jb3B5KHRoaXMuZGlyZWN0aW9uKS5tdWx0aXBseVNjYWxhcihkKS5hZGQodGhpcy5vcmlnaW4pO1xuICAgIGcmJmcuY29weShiKS5tdWx0aXBseVNjYWxhcihlKS5hZGQoYSk7cmV0dXJuIGt9fSgpLGludGVyc2VjdFNwaGVyZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBwO3JldHVybiBmdW5jdGlvbihiLGMpe2Euc3ViVmVjdG9ycyhiLmNlbnRlcix0aGlzLm9yaWdpbik7dmFyIGQ9YS5kb3QodGhpcy5kaXJlY3Rpb24pLGU9YS5kb3QoYSktZCpkO2I9Yi5yYWRpdXMqYi5yYWRpdXM7aWYoZT5iKXJldHVybiBudWxsO2I9TWF0aC5zcXJ0KGItZSk7ZT1kLWI7ZCs9YjtyZXR1cm4gMD5lJiYwPmQ/bnVsbDowPmU/dGhpcy5hdChkLGMpOnRoaXMuYXQoZSxjKX19KCksaW50ZXJzZWN0c1NwaGVyZTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5kaXN0YW5jZVRvUG9pbnQoYS5jZW50ZXIpPD1hLnJhZGl1c30sZGlzdGFuY2VUb1BsYW5lOmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9ybWFsLmRvdCh0aGlzLmRpcmVjdGlvbik7aWYoMD09PWIpcmV0dXJuIDA9PT1hLmRpc3RhbmNlVG9Qb2ludCh0aGlzLm9yaWdpbik/XG4gICAgMDpudWxsO2E9LSh0aGlzLm9yaWdpbi5kb3QoYS5ub3JtYWwpK2EuY29uc3RhbnQpL2I7cmV0dXJuIDA8PWE/YTpudWxsfSxpbnRlcnNlY3RQbGFuZTpmdW5jdGlvbihhLGIpe2E9dGhpcy5kaXN0YW5jZVRvUGxhbmUoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6dGhpcy5hdChhLGIpfSxpbnRlcnNlY3RzUGxhbmU6ZnVuY3Rpb24oYSl7dmFyIGI9YS5kaXN0YW5jZVRvUG9pbnQodGhpcy5vcmlnaW4pO3JldHVybiAwPT09Ynx8MD5hLm5vcm1hbC5kb3QodGhpcy5kaXJlY3Rpb24pKmI/ITA6ITF9LGludGVyc2VjdEJveDpmdW5jdGlvbihhLGIpe3ZhciBjPTEvdGhpcy5kaXJlY3Rpb24ueDt2YXIgZD0xL3RoaXMuZGlyZWN0aW9uLnk7dmFyIGU9MS90aGlzLmRpcmVjdGlvbi56LGY9dGhpcy5vcmlnaW47aWYoMDw9Yyl7dmFyIGc9KGEubWluLngtZi54KSpjO2MqPWEubWF4LngtZi54fWVsc2UgZz0oYS5tYXgueC1mLngpKmMsYyo9YS5taW4ueC1mLng7aWYoMDw9ZCl7dmFyIGg9KGEubWluLnktXG4gICAgZi55KSpkO2QqPWEubWF4LnktZi55fWVsc2UgaD0oYS5tYXgueS1mLnkpKmQsZCo9YS5taW4ueS1mLnk7aWYoZz5kfHxoPmMpcmV0dXJuIG51bGw7aWYoaD5nfHxnIT09ZylnPWg7aWYoZDxjfHxjIT09YyljPWQ7MDw9ZT8oaD0oYS5taW4uei1mLnopKmUsYT0oYS5tYXguei1mLnopKmUpOihoPShhLm1heC56LWYueikqZSxhPShhLm1pbi56LWYueikqZSk7aWYoZz5hfHxoPmMpcmV0dXJuIG51bGw7aWYoaD5nfHxnIT09ZylnPWg7aWYoYTxjfHxjIT09YyljPWE7cmV0dXJuIDA+Yz9udWxsOnRoaXMuYXQoMDw9Zz9nOmMsYil9LGludGVyc2VjdHNCb3g6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIG51bGwhPT10aGlzLmludGVyc2VjdEJveChiLGEpfX0oKSxpbnRlcnNlY3RUcmlhbmdsZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBwLGI9bmV3IHAsYz1uZXcgcCxkPW5ldyBwO3JldHVybiBmdW5jdGlvbihlLGYsZyxoLGspe2Iuc3ViVmVjdG9ycyhmLFxuICAgIGUpO2Muc3ViVmVjdG9ycyhnLGUpO2QuY3Jvc3NWZWN0b3JzKGIsYyk7Zj10aGlzLmRpcmVjdGlvbi5kb3QoZCk7aWYoMDxmKXtpZihoKXJldHVybiBudWxsO2g9MX1lbHNlIGlmKDA+ZiloPS0xLGY9LWY7ZWxzZSByZXR1cm4gbnVsbDthLnN1YlZlY3RvcnModGhpcy5vcmlnaW4sZSk7ZT1oKnRoaXMuZGlyZWN0aW9uLmRvdChjLmNyb3NzVmVjdG9ycyhhLGMpKTtpZigwPmUpcmV0dXJuIG51bGw7Zz1oKnRoaXMuZGlyZWN0aW9uLmRvdChiLmNyb3NzKGEpKTtpZigwPmd8fGUrZz5mKXJldHVybiBudWxsO2U9LWgqYS5kb3QoZCk7cmV0dXJuIDA+ZT9udWxsOnRoaXMuYXQoZS9mLGspfX0oKSxhcHBseU1hdHJpeDQ6ZnVuY3Rpb24oYSl7dGhpcy5vcmlnaW4uYXBwbHlNYXRyaXg0KGEpO3RoaXMuZGlyZWN0aW9uLnRyYW5zZm9ybURpcmVjdGlvbihhKTtyZXR1cm4gdGhpc30sZXF1YWxzOmZ1bmN0aW9uKGEpe3JldHVybiBhLm9yaWdpbi5lcXVhbHModGhpcy5vcmlnaW4pJiZhLmRpcmVjdGlvbi5lcXVhbHModGhpcy5kaXJlY3Rpb24pfX0pO1xuICAgIE9iamVjdC5hc3NpZ24oTmIucHJvdG90eXBlLHtzZXQ6ZnVuY3Rpb24oYSxiKXt0aGlzLnN0YXJ0LmNvcHkoYSk7dGhpcy5lbmQuY29weShiKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyl9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5zdGFydC5jb3B5KGEuc3RhcnQpO3RoaXMuZW5kLmNvcHkoYS5lbmQpO3JldHVybiB0aGlzfSxnZXRDZW50ZXI6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fG5ldyBwKS5hZGRWZWN0b3JzKHRoaXMuc3RhcnQsdGhpcy5lbmQpLm11bHRpcGx5U2NhbGFyKC41KX0sZGVsdGE6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fG5ldyBwKS5zdWJWZWN0b3JzKHRoaXMuZW5kLHRoaXMuc3RhcnQpfSxkaXN0YW5jZVNxOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RhcnQuZGlzdGFuY2VUb1NxdWFyZWQodGhpcy5lbmQpfSxkaXN0YW5jZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXJ0LmRpc3RhbmNlVG8odGhpcy5lbmQpfSxcbiAgICBhdDpmdW5jdGlvbihhLGIpe2I9Ynx8bmV3IHA7cmV0dXJuIHRoaXMuZGVsdGEoYikubXVsdGlwbHlTY2FsYXIoYSkuYWRkKHRoaXMuc3RhcnQpfSxjbG9zZXN0UG9pbnRUb1BvaW50UGFyYW1ldGVyOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAsYj1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oYyxkKXthLnN1YlZlY3RvcnMoYyx0aGlzLnN0YXJ0KTtiLnN1YlZlY3RvcnModGhpcy5lbmQsdGhpcy5zdGFydCk7Yz1iLmRvdChiKTtjPWIuZG90KGEpL2M7ZCYmKGM9US5jbGFtcChjLDAsMSkpO3JldHVybiBjfX0oKSxjbG9zZXN0UG9pbnRUb1BvaW50OmZ1bmN0aW9uKGEsYixjKXthPXRoaXMuY2xvc2VzdFBvaW50VG9Qb2ludFBhcmFtZXRlcihhLGIpO2M9Y3x8bmV3IHA7cmV0dXJuIHRoaXMuZGVsdGEoYykubXVsdGlwbHlTY2FsYXIoYSkuYWRkKHRoaXMuc3RhcnQpfSxhcHBseU1hdHJpeDQ6ZnVuY3Rpb24oYSl7dGhpcy5zdGFydC5hcHBseU1hdHJpeDQoYSk7dGhpcy5lbmQuYXBwbHlNYXRyaXg0KGEpO1xuICAgIHJldHVybiB0aGlzfSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuc3RhcnQuZXF1YWxzKHRoaXMuc3RhcnQpJiZhLmVuZC5lcXVhbHModGhpcy5lbmQpfX0pO09iamVjdC5hc3NpZ24oWmEse25vcm1hbDpmdW5jdGlvbigpe3ZhciBhPW5ldyBwO3JldHVybiBmdW5jdGlvbihiLGMsZCxlKXtlPWV8fG5ldyBwO2Uuc3ViVmVjdG9ycyhkLGMpO2Euc3ViVmVjdG9ycyhiLGMpO2UuY3Jvc3MoYSk7Yj1lLmxlbmd0aFNxKCk7cmV0dXJuIDA8Yj9lLm11bHRpcGx5U2NhbGFyKDEvTWF0aC5zcXJ0KGIpKTplLnNldCgwLDAsMCl9fSgpLGJhcnljb29yZEZyb21Qb2ludDpmdW5jdGlvbigpe3ZhciBhPW5ldyBwLGI9bmV3IHAsYz1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oZCxlLGYsZyxoKXthLnN1YlZlY3RvcnMoZyxlKTtiLnN1YlZlY3RvcnMoZixlKTtjLnN1YlZlY3RvcnMoZCxlKTtkPWEuZG90KGEpO2U9YS5kb3QoYik7Zj1hLmRvdChjKTt2YXIgaz1iLmRvdChiKTtnPWIuZG90KGMpO3ZhciBtPVxuICAgIGQqay1lKmU7aD1ofHxuZXcgcDtpZigwPT09bSlyZXR1cm4gaC5zZXQoLTIsLTEsLTEpO209MS9tO2s9KGsqZi1lKmcpKm07ZD0oZCpnLWUqZikqbTtyZXR1cm4gaC5zZXQoMS1rLWQsZCxrKX19KCksY29udGFpbnNQb2ludDpmdW5jdGlvbigpe3ZhciBhPW5ldyBwO3JldHVybiBmdW5jdGlvbihiLGMsZCxlKXtiPVphLmJhcnljb29yZEZyb21Qb2ludChiLGMsZCxlLGEpO3JldHVybiAwPD1iLngmJjA8PWIueSYmMT49Yi54K2IueX19KCl9KTtPYmplY3QuYXNzaWduKFphLnByb3RvdHlwZSx7c2V0OmZ1bmN0aW9uKGEsYixjKXt0aGlzLmEuY29weShhKTt0aGlzLmIuY29weShiKTt0aGlzLmMuY29weShjKTtyZXR1cm4gdGhpc30sc2V0RnJvbVBvaW50c0FuZEluZGljZXM6ZnVuY3Rpb24oYSxiLGMsZCl7dGhpcy5hLmNvcHkoYVtiXSk7dGhpcy5iLmNvcHkoYVtjXSk7dGhpcy5jLmNvcHkoYVtkXSk7cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5jb3B5KHRoaXMpfSxcbiAgICBjb3B5OmZ1bmN0aW9uKGEpe3RoaXMuYS5jb3B5KGEuYSk7dGhpcy5iLmNvcHkoYS5iKTt0aGlzLmMuY29weShhLmMpO3JldHVybiB0aGlzfSxhcmVhOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAsYj1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oKXthLnN1YlZlY3RvcnModGhpcy5jLHRoaXMuYik7Yi5zdWJWZWN0b3JzKHRoaXMuYSx0aGlzLmIpO3JldHVybi41KmEuY3Jvc3MoYikubGVuZ3RoKCl9fSgpLG1pZHBvaW50OmZ1bmN0aW9uKGEpe3JldHVybihhfHxuZXcgcCkuYWRkVmVjdG9ycyh0aGlzLmEsdGhpcy5iKS5hZGQodGhpcy5jKS5tdWx0aXBseVNjYWxhcigxLzMpfSxub3JtYWw6ZnVuY3Rpb24oYSl7cmV0dXJuIFphLm5vcm1hbCh0aGlzLmEsdGhpcy5iLHRoaXMuYyxhKX0scGxhbmU6ZnVuY3Rpb24oYSl7cmV0dXJuKGF8fG5ldyBFYSkuc2V0RnJvbUNvcGxhbmFyUG9pbnRzKHRoaXMuYSx0aGlzLmIsdGhpcy5jKX0sYmFyeWNvb3JkRnJvbVBvaW50OmZ1bmN0aW9uKGEsYil7cmV0dXJuIFphLmJhcnljb29yZEZyb21Qb2ludChhLFxuICAgIHRoaXMuYSx0aGlzLmIsdGhpcy5jLGIpfSxjb250YWluc1BvaW50OmZ1bmN0aW9uKGEpe3JldHVybiBaYS5jb250YWluc1BvaW50KGEsdGhpcy5hLHRoaXMuYix0aGlzLmMpfSxjbG9zZXN0UG9pbnRUb1BvaW50OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IEVhLGI9W25ldyBOYixuZXcgTmIsbmV3IE5iXSxjPW5ldyBwLGQ9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGUsZil7Zj1mfHxuZXcgcDt2YXIgZz1JbmZpbml0eTthLnNldEZyb21Db3BsYW5hclBvaW50cyh0aGlzLmEsdGhpcy5iLHRoaXMuYyk7YS5wcm9qZWN0UG9pbnQoZSxjKTtpZighMD09PXRoaXMuY29udGFpbnNQb2ludChjKSlmLmNvcHkoYyk7ZWxzZSBmb3IoYlswXS5zZXQodGhpcy5hLHRoaXMuYiksYlsxXS5zZXQodGhpcy5iLHRoaXMuYyksYlsyXS5zZXQodGhpcy5jLHRoaXMuYSksZT0wO2U8Yi5sZW5ndGg7ZSsrKXtiW2VdLmNsb3Nlc3RQb2ludFRvUG9pbnQoYywhMCxkKTt2YXIgaD1jLmRpc3RhbmNlVG9TcXVhcmVkKGQpO1xuICAgIGg8ZyYmKGc9aCxmLmNvcHkoZCkpfXJldHVybiBmfX0oKSxlcXVhbHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuYS5lcXVhbHModGhpcy5hKSYmYS5iLmVxdWFscyh0aGlzLmIpJiZhLmMuZXF1YWxzKHRoaXMuYyl9fSk7cmEucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZSh4LnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOnJhLGlzTWVzaDohMCxzZXREcmF3TW9kZTpmdW5jdGlvbihhKXt0aGlzLmRyYXdNb2RlPWF9LGNvcHk6ZnVuY3Rpb24oYSl7eC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5kcmF3TW9kZT1hLmRyYXdNb2RlO3ZvaWQgMCE9PWEubW9ycGhUYXJnZXRJbmZsdWVuY2VzJiYodGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXM9YS5tb3JwaFRhcmdldEluZmx1ZW5jZXMuc2xpY2UoKSk7dm9pZCAwIT09YS5tb3JwaFRhcmdldERpY3Rpb25hcnkmJih0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeT1PYmplY3QuYXNzaWduKHt9LGEubW9ycGhUYXJnZXREaWN0aW9uYXJ5KSk7XG4gICAgcmV0dXJuIHRoaXN9LHVwZGF0ZU1vcnBoVGFyZ2V0czpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZ2VvbWV0cnk7aWYoYS5pc0J1ZmZlckdlb21ldHJ5KXthPWEubW9ycGhBdHRyaWJ1dGVzO3ZhciBiPU9iamVjdC5rZXlzKGEpO2lmKDA8Yi5sZW5ndGgpe3ZhciBjPWFbYlswXV07aWYodm9pZCAwIT09Yylmb3IodGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXM9W10sdGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnk9e30sYT0wLGI9Yy5sZW5ndGg7YTxiO2ErKyl7dmFyIGQ9Y1thXS5uYW1lfHxTdHJpbmcoYSk7dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMucHVzaCgwKTt0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeVtkXT1hfX19ZWxzZSBpZihjPWEubW9ycGhUYXJnZXRzLHZvaWQgMCE9PWMmJjA8Yy5sZW5ndGgpZm9yKHRoaXMubW9ycGhUYXJnZXRJbmZsdWVuY2VzPVtdLHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5PXt9LGE9MCxiPWMubGVuZ3RoO2E8YjthKyspZD1jW2FdLm5hbWV8fFxuICAgIFN0cmluZyhhKSx0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcy5wdXNoKDApLHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5W2RdPWF9LHJheWNhc3Q6ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEsYixjLGQsZSxmLGcpe1phLmJhcnljb29yZEZyb21Qb2ludChhLGIsYyxkLHYpO2UubXVsdGlwbHlTY2FsYXIodi54KTtmLm11bHRpcGx5U2NhbGFyKHYueSk7Zy5tdWx0aXBseVNjYWxhcih2LnopO2UuYWRkKGYpLmFkZChnKTtyZXR1cm4gZS5jbG9uZSgpfWZ1bmN0aW9uIGIoYSxiLGMsZCxlLGYsZyxoKXtpZihudWxsPT09KDE9PT1iLnNpZGU/ZC5pbnRlcnNlY3RUcmlhbmdsZShnLGYsZSwhMCxoKTpkLmludGVyc2VjdFRyaWFuZ2xlKGUsZixnLDIhPT1iLnNpZGUsaCkpKXJldHVybiBudWxsO3ouY29weShoKTt6LmFwcGx5TWF0cml4NChhLm1hdHJpeFdvcmxkKTtiPWMucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKHopO3JldHVybiBiPGMubmVhcnx8Yj5jLmZhcj9udWxsOntkaXN0YW5jZTpiLFxuICAgIHBvaW50OnouY2xvbmUoKSxvYmplY3Q6YX19ZnVuY3Rpb24gYyhjLGQsZSxmLG0sbCxxLG4pe2cuZnJvbUJ1ZmZlckF0dHJpYnV0ZShmLGwpO2guZnJvbUJ1ZmZlckF0dHJpYnV0ZShmLHEpO2suZnJvbUJ1ZmZlckF0dHJpYnV0ZShmLG4pO2lmKGM9YihjLGMubWF0ZXJpYWwsZCxlLGcsaCxrLHcpKW0mJih1LmZyb21CdWZmZXJBdHRyaWJ1dGUobSxsKSxyLmZyb21CdWZmZXJBdHRyaWJ1dGUobSxxKSx0LmZyb21CdWZmZXJBdHRyaWJ1dGUobSxuKSxjLnV2PWEodyxnLGgsayx1LHIsdCkpLGMuZmFjZT1uZXcgWWEobCxxLG4sWmEubm9ybWFsKGcsaCxrKSksYy5mYWNlSW5kZXg9bDtyZXR1cm4gY312YXIgZD1uZXcgTyxlPW5ldyBzYixmPW5ldyBJYSxnPW5ldyBwLGg9bmV3IHAsaz1uZXcgcCxtPW5ldyBwLGw9bmV3IHAsbj1uZXcgcCx1PW5ldyBELHI9bmV3IEQsdD1uZXcgRCx2PW5ldyBwLHc9bmV3IHAsej1uZXcgcDtyZXR1cm4gZnVuY3Rpb24ocSxwKXt2YXIgdj10aGlzLmdlb21ldHJ5LFxuICAgIHo9dGhpcy5tYXRlcmlhbCx5PXRoaXMubWF0cml4V29ybGQ7aWYodm9pZCAwIT09eiYmKG51bGw9PT12LmJvdW5kaW5nU3BoZXJlJiZ2LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpLGYuY29weSh2LmJvdW5kaW5nU3BoZXJlKSxmLmFwcGx5TWF0cml4NCh5KSwhMSE9PXEucmF5LmludGVyc2VjdHNTcGhlcmUoZikmJihkLmdldEludmVyc2UoeSksZS5jb3B5KHEucmF5KS5hcHBseU1hdHJpeDQoZCksbnVsbD09PXYuYm91bmRpbmdCb3h8fCExIT09ZS5pbnRlcnNlY3RzQm94KHYuYm91bmRpbmdCb3gpKSkpe3ZhciB4O2lmKHYuaXNCdWZmZXJHZW9tZXRyeSl7dmFyIHo9di5pbmRleCxCPXYuYXR0cmlidXRlcy5wb3NpdGlvbix5PXYuYXR0cmlidXRlcy51dixEO2lmKG51bGwhPT16KXt2YXIgQz0wO2ZvcihEPXouY291bnQ7QzxEO0MrPTMpe3Y9ei5nZXRYKEMpO3ZhciBJPXouZ2V0WChDKzEpO3ZhciBFPXouZ2V0WChDKzIpO2lmKHg9Yyh0aGlzLHEsZSxCLHksdixJLEUpKXguZmFjZUluZGV4PVxuICAgIE1hdGguZmxvb3IoQy8zKSxwLnB1c2goeCl9fWVsc2UgaWYodm9pZCAwIT09Qilmb3IoQz0wLEQ9Qi5jb3VudDtDPEQ7Qys9MylpZih2PUMsST1DKzEsRT1DKzIseD1jKHRoaXMscSxlLEIseSx2LEksRSkpeC5pbmRleD12LHAucHVzaCh4KX1lbHNlIGlmKHYuaXNHZW9tZXRyeSl7dmFyIHk9QXJyYXkuaXNBcnJheSh6KTtDPXYudmVydGljZXM7RD12LmZhY2VzO0k9di5mYWNlVmVydGV4VXZzWzBdOzA8SS5sZW5ndGgmJihCPUkpO2Zvcih2YXIgSD0wLEs9RC5sZW5ndGg7SDxLO0grKyl7dmFyIE49RFtIXTt4PXk/eltOLm1hdGVyaWFsSW5kZXhdOno7aWYodm9pZCAwIT09eCl7ST1DW04uYV07RT1DW04uYl07dmFyIEw9Q1tOLmNdO2lmKCEwPT09eC5tb3JwaFRhcmdldHMpe3ZhciBNPXYubW9ycGhUYXJnZXRzLE89dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXM7Zy5zZXQoMCwwLDApO2guc2V0KDAsMCwwKTtrLnNldCgwLDAsMCk7Zm9yKHZhciBQPTAsUT1NLmxlbmd0aDtQPFE7UCsrKXt2YXIgUj1cbiAgICBPW1BdO2lmKDAhPT1SKXt2YXIgVT1NW1BdLnZlcnRpY2VzO2cuYWRkU2NhbGVkVmVjdG9yKG0uc3ViVmVjdG9ycyhVW04uYV0sSSksUik7aC5hZGRTY2FsZWRWZWN0b3IobC5zdWJWZWN0b3JzKFVbTi5iXSxFKSxSKTtrLmFkZFNjYWxlZFZlY3RvcihuLnN1YlZlY3RvcnMoVVtOLmNdLEwpLFIpfX1nLmFkZChJKTtoLmFkZChFKTtrLmFkZChMKTtJPWc7RT1oO0w9a31pZih4PWIodGhpcyx4LHEsZSxJLEUsTCx3KSlCJiZCW0hdJiYoTT1CW0hdLHUuY29weShNWzBdKSxyLmNvcHkoTVsxXSksdC5jb3B5KE1bMl0pLHgudXY9YSh3LEksRSxMLHUscix0KSkseC5mYWNlPU4seC5mYWNlSW5kZXg9SCxwLnB1c2goeCl9fX19fX0oKSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmdlb21ldHJ5LHRoaXMubWF0ZXJpYWwpKS5jb3B5KHRoaXMpfX0pO3ZhciB5Zz0wO2JhLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoVGEucHJvdG90eXBlKSxcbiAgICB7Y29uc3RydWN0b3I6YmEsaXNQZXJzcGVjdGl2ZUNhbWVyYTohMCxjb3B5OmZ1bmN0aW9uKGEsYil7VGEucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEsYik7dGhpcy5mb3Y9YS5mb3Y7dGhpcy56b29tPWEuem9vbTt0aGlzLm5lYXI9YS5uZWFyO3RoaXMuZmFyPWEuZmFyO3RoaXMuZm9jdXM9YS5mb2N1czt0aGlzLmFzcGVjdD1hLmFzcGVjdDt0aGlzLnZpZXc9bnVsbD09PWEudmlldz9udWxsOk9iamVjdC5hc3NpZ24oe30sYS52aWV3KTt0aGlzLmZpbG1HYXVnZT1hLmZpbG1HYXVnZTt0aGlzLmZpbG1PZmZzZXQ9YS5maWxtT2Zmc2V0O3JldHVybiB0aGlzfSxzZXRGb2NhbExlbmd0aDpmdW5jdGlvbihhKXthPS41KnRoaXMuZ2V0RmlsbUhlaWdodCgpL2E7dGhpcy5mb3Y9MipRLlJBRDJERUcqTWF0aC5hdGFuKGEpO3RoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpfSxnZXRGb2NhbExlbmd0aDpmdW5jdGlvbigpe3ZhciBhPU1hdGgudGFuKC41KlEuREVHMlJBRCp0aGlzLmZvdik7XG4gICAgcmV0dXJuLjUqdGhpcy5nZXRGaWxtSGVpZ2h0KCkvYX0sZ2V0RWZmZWN0aXZlRk9WOmZ1bmN0aW9uKCl7cmV0dXJuIDIqUS5SQUQyREVHKk1hdGguYXRhbihNYXRoLnRhbiguNSpRLkRFRzJSQUQqdGhpcy5mb3YpL3RoaXMuem9vbSl9LGdldEZpbG1XaWR0aDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmZpbG1HYXVnZSpNYXRoLm1pbih0aGlzLmFzcGVjdCwxKX0sZ2V0RmlsbUhlaWdodDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmZpbG1HYXVnZS9NYXRoLm1heCh0aGlzLmFzcGVjdCwxKX0sc2V0Vmlld09mZnNldDpmdW5jdGlvbihhLGIsYyxkLGUsZil7dGhpcy5hc3BlY3Q9YS9iO251bGw9PT10aGlzLnZpZXcmJih0aGlzLnZpZXc9e2VuYWJsZWQ6ITAsZnVsbFdpZHRoOjEsZnVsbEhlaWdodDoxLG9mZnNldFg6MCxvZmZzZXRZOjAsd2lkdGg6MSxoZWlnaHQ6MX0pO3RoaXMudmlldy5lbmFibGVkPSEwO3RoaXMudmlldy5mdWxsV2lkdGg9YTt0aGlzLnZpZXcuZnVsbEhlaWdodD1iO3RoaXMudmlldy5vZmZzZXRYPVxuICAgIGM7dGhpcy52aWV3Lm9mZnNldFk9ZDt0aGlzLnZpZXcud2lkdGg9ZTt0aGlzLnZpZXcuaGVpZ2h0PWY7dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCl9LGNsZWFyVmlld09mZnNldDpmdW5jdGlvbigpe251bGwhPT10aGlzLnZpZXcmJih0aGlzLnZpZXcuZW5hYmxlZD0hMSk7dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCl9LHVwZGF0ZVByb2plY3Rpb25NYXRyaXg6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5lYXIsYj1hKk1hdGgudGFuKC41KlEuREVHMlJBRCp0aGlzLmZvdikvdGhpcy56b29tLGM9MipiLGQ9dGhpcy5hc3BlY3QqYyxlPS0uNSpkLGY9dGhpcy52aWV3O2lmKG51bGwhPT10aGlzLnZpZXcmJnRoaXMudmlldy5lbmFibGVkKXZhciBnPWYuZnVsbFdpZHRoLGg9Zi5mdWxsSGVpZ2h0LGU9ZStmLm9mZnNldFgqZC9nLGI9Yi1mLm9mZnNldFkqYy9oLGQ9Zi53aWR0aC9nKmQsYz1mLmhlaWdodC9oKmM7Zj10aGlzLmZpbG1PZmZzZXQ7MCE9PWYmJihlKz1hKmYvdGhpcy5nZXRGaWxtV2lkdGgoKSk7XG4gICAgdGhpcy5wcm9qZWN0aW9uTWF0cml4Lm1ha2VQZXJzcGVjdGl2ZShlLGUrZCxiLGItYyxhLHRoaXMuZmFyKX0sdG9KU09OOmZ1bmN0aW9uKGEpe2E9eC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyxhKTthLm9iamVjdC5mb3Y9dGhpcy5mb3Y7YS5vYmplY3Quem9vbT10aGlzLnpvb207YS5vYmplY3QubmVhcj10aGlzLm5lYXI7YS5vYmplY3QuZmFyPXRoaXMuZmFyO2Eub2JqZWN0LmZvY3VzPXRoaXMuZm9jdXM7YS5vYmplY3QuYXNwZWN0PXRoaXMuYXNwZWN0O251bGwhPT10aGlzLnZpZXcmJihhLm9iamVjdC52aWV3PU9iamVjdC5hc3NpZ24oe30sdGhpcy52aWV3KSk7YS5vYmplY3QuZmlsbUdhdWdlPXRoaXMuZmlsbUdhdWdlO2Eub2JqZWN0LmZpbG1PZmZzZXQ9dGhpcy5maWxtT2Zmc2V0O3JldHVybiBhfX0pO3VkLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoYmEucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6dWQsaXNBcnJheUNhbWVyYTohMH0pO1BiLnByb3RvdHlwZS5pc0ZvZ0V4cDI9XG4gICAgITA7UGIucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBQYih0aGlzLmNvbG9yLmdldEhleCgpLHRoaXMuZGVuc2l0eSl9O1BiLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm57dHlwZTpcIkZvZ0V4cDJcIixjb2xvcjp0aGlzLmNvbG9yLmdldEhleCgpLGRlbnNpdHk6dGhpcy5kZW5zaXR5fX07UWIucHJvdG90eXBlLmlzRm9nPSEwO1FiLnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBuZXcgUWIodGhpcy5jb2xvci5nZXRIZXgoKSx0aGlzLm5lYXIsdGhpcy5mYXIpfTtRYi5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7cmV0dXJue3R5cGU6XCJGb2dcIixjb2xvcjp0aGlzLmNvbG9yLmdldEhleCgpLG5lYXI6dGhpcy5uZWFyLGZhcjp0aGlzLmZhcn19O3ZkLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoeC5wcm90b3R5cGUpLHtjb25zdHJ1Y3Rvcjp2ZCxjb3B5OmZ1bmN0aW9uKGEsYil7eC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsXG4gICAgYSxiKTtudWxsIT09YS5iYWNrZ3JvdW5kJiYodGhpcy5iYWNrZ3JvdW5kPWEuYmFja2dyb3VuZC5jbG9uZSgpKTtudWxsIT09YS5mb2cmJih0aGlzLmZvZz1hLmZvZy5jbG9uZSgpKTtudWxsIT09YS5vdmVycmlkZU1hdGVyaWFsJiYodGhpcy5vdmVycmlkZU1hdGVyaWFsPWEub3ZlcnJpZGVNYXRlcmlhbC5jbG9uZSgpKTt0aGlzLmF1dG9VcGRhdGU9YS5hdXRvVXBkYXRlO3RoaXMubWF0cml4QXV0b1VwZGF0ZT1hLm1hdHJpeEF1dG9VcGRhdGU7cmV0dXJuIHRoaXN9LHRvSlNPTjpmdW5jdGlvbihhKXt2YXIgYj14LnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzLGEpO251bGwhPT10aGlzLmJhY2tncm91bmQmJihiLm9iamVjdC5iYWNrZ3JvdW5kPXRoaXMuYmFja2dyb3VuZC50b0pTT04oYSkpO251bGwhPT10aGlzLmZvZyYmKGIub2JqZWN0LmZvZz10aGlzLmZvZy50b0pTT04oKSk7cmV0dXJuIGJ9fSk7ZGUucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZSh4LnByb3RvdHlwZSksXG4gICAge2NvbnN0cnVjdG9yOmRlLGlzTGVuc0ZsYXJlOiEwLGNvcHk6ZnVuY3Rpb24oYSl7eC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5wb3NpdGlvblNjcmVlbi5jb3B5KGEucG9zaXRpb25TY3JlZW4pO3RoaXMuY3VzdG9tVXBkYXRlQ2FsbGJhY2s9YS5jdXN0b21VcGRhdGVDYWxsYmFjaztmb3IodmFyIGI9MCxjPWEubGVuc0ZsYXJlcy5sZW5ndGg7YjxjO2IrKyl0aGlzLmxlbnNGbGFyZXMucHVzaChhLmxlbnNGbGFyZXNbYl0pO3JldHVybiB0aGlzfSxhZGQ6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3ZvaWQgMD09PWImJihiPS0xKTt2b2lkIDA9PT1jJiYoYz0wKTt2b2lkIDA9PT1mJiYoZj0xKTt2b2lkIDA9PT1lJiYoZT1uZXcgSCgxNjc3NzIxNSkpO3ZvaWQgMD09PWQmJihkPTEpO2M9TWF0aC5taW4oYyxNYXRoLm1heCgwLGMpKTt0aGlzLmxlbnNGbGFyZXMucHVzaCh7dGV4dHVyZTphLHNpemU6YixkaXN0YW5jZTpjLHg6MCx5OjAsejowLHNjYWxlOjEscm90YXRpb246MCxcbiAgICBvcGFjaXR5OmYsY29sb3I6ZSxibGVuZGluZzpkfSl9LHVwZGF0ZUxlbnNGbGFyZXM6ZnVuY3Rpb24oKXt2YXIgYSxiPXRoaXMubGVuc0ZsYXJlcy5sZW5ndGgsYz0yKi10aGlzLnBvc2l0aW9uU2NyZWVuLngsZD0yKi10aGlzLnBvc2l0aW9uU2NyZWVuLnk7Zm9yKGE9MDthPGI7YSsrKXt2YXIgZT10aGlzLmxlbnNGbGFyZXNbYV07ZS54PXRoaXMucG9zaXRpb25TY3JlZW4ueCtjKmUuZGlzdGFuY2U7ZS55PXRoaXMucG9zaXRpb25TY3JlZW4ueStkKmUuZGlzdGFuY2U7ZS53YW50ZWRSb3RhdGlvbj1lLngqTWF0aC5QSSouMjU7ZS5yb3RhdGlvbis9LjI1KihlLndhbnRlZFJvdGF0aW9uLWUucm90YXRpb24pfX19KTtoYi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShQLnByb3RvdHlwZSk7aGIucHJvdG90eXBlLmNvbnN0cnVjdG9yPWhiO2hiLnByb3RvdHlwZS5pc1Nwcml0ZU1hdGVyaWFsPSEwO2hiLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe1AucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLFxuICAgIGEpO3RoaXMuY29sb3IuY29weShhLmNvbG9yKTt0aGlzLm1hcD1hLm1hcDt0aGlzLnJvdGF0aW9uPWEucm90YXRpb247cmV0dXJuIHRoaXN9O0NjLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoeC5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpDYyxpc1Nwcml0ZTohMCxyYXljYXN0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAsYj1uZXcgcCxjPW5ldyBwO3JldHVybiBmdW5jdGlvbihkLGUpe2Iuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubWF0cml4V29ybGQpO2QucmF5LmNsb3Nlc3RQb2ludFRvUG9pbnQoYixhKTtjLnNldEZyb21NYXRyaXhTY2FsZSh0aGlzLm1hdHJpeFdvcmxkKTt2YXIgZj1jLngqYy55LzQ7Yi5kaXN0YW5jZVRvU3F1YXJlZChhKT5mfHwoZj1kLnJheS5vcmlnaW4uZGlzdGFuY2VUbyhhKSxmPGQubmVhcnx8Zj5kLmZhcnx8ZS5wdXNoKHtkaXN0YW5jZTpmLHBvaW50OmEuY2xvbmUoKSxmYWNlOm51bGwsb2JqZWN0OnRoaXN9KSl9fSgpLGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMubWF0ZXJpYWwpKS5jb3B5KHRoaXMpfX0pO1xuICAgIERjLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoeC5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpEYyxjb3B5OmZ1bmN0aW9uKGEpe3gucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEsITEpO2E9YS5sZXZlbHM7Zm9yKHZhciBiPTAsYz1hLmxlbmd0aDtiPGM7YisrKXt2YXIgZD1hW2JdO3RoaXMuYWRkTGV2ZWwoZC5vYmplY3QuY2xvbmUoKSxkLmRpc3RhbmNlKX1yZXR1cm4gdGhpc30sYWRkTGV2ZWw6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0wKTtiPU1hdGguYWJzKGIpO2Zvcih2YXIgYz10aGlzLmxldmVscyxkPTA7ZDxjLmxlbmd0aCYmIShiPGNbZF0uZGlzdGFuY2UpO2QrKyk7Yy5zcGxpY2UoZCwwLHtkaXN0YW5jZTpiLG9iamVjdDphfSk7dGhpcy5hZGQoYSl9LGdldE9iamVjdEZvckRpc3RhbmNlOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj10aGlzLmxldmVscyxjPTEsZD1iLmxlbmd0aDtjPGQmJiEoYTxiW2NdLmRpc3RhbmNlKTtjKyspO3JldHVybiBiW2MtXG4gICAgMV0ub2JqZWN0fSxyYXljYXN0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGIsYyl7YS5zZXRGcm9tTWF0cml4UG9zaXRpb24odGhpcy5tYXRyaXhXb3JsZCk7dmFyIGQ9Yi5yYXkub3JpZ2luLmRpc3RhbmNlVG8oYSk7dGhpcy5nZXRPYmplY3RGb3JEaXN0YW5jZShkKS5yYXljYXN0KGIsYyl9fSgpLHVwZGF0ZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBwLGI9bmV3IHA7cmV0dXJuIGZ1bmN0aW9uKGMpe3ZhciBkPXRoaXMubGV2ZWxzO2lmKDE8ZC5sZW5ndGgpe2Euc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGMubWF0cml4V29ybGQpO2Iuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubWF0cml4V29ybGQpO2M9YS5kaXN0YW5jZVRvKGIpO2RbMF0ub2JqZWN0LnZpc2libGU9ITA7Zm9yKHZhciBlPTEsZj1kLmxlbmd0aDtlPGY7ZSsrKWlmKGM+PWRbZV0uZGlzdGFuY2UpZFtlLTFdLm9iamVjdC52aXNpYmxlPSExLGRbZV0ub2JqZWN0LnZpc2libGU9ITA7ZWxzZSBicmVhaztcbiAgICBmb3IoO2U8ZjtlKyspZFtlXS5vYmplY3QudmlzaWJsZT0hMX19fSgpLHRvSlNPTjpmdW5jdGlvbihhKXthPXgucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMsYSk7YS5vYmplY3QubGV2ZWxzPVtdO2Zvcih2YXIgYj10aGlzLmxldmVscyxjPTAsZD1iLmxlbmd0aDtjPGQ7YysrKXt2YXIgZT1iW2NdO2Eub2JqZWN0LmxldmVscy5wdXNoKHtvYmplY3Q6ZS5vYmplY3QudXVpZCxkaXN0YW5jZTplLmRpc3RhbmNlfSl9cmV0dXJuIGF9fSk7T2JqZWN0LmFzc2lnbihFYy5wcm90b3R5cGUse2NhbGN1bGF0ZUludmVyc2VzOmZ1bmN0aW9uKCl7dGhpcy5ib25lSW52ZXJzZXM9W107Zm9yKHZhciBhPTAsYj10aGlzLmJvbmVzLmxlbmd0aDthPGI7YSsrKXt2YXIgYz1uZXcgTzt0aGlzLmJvbmVzW2FdJiZjLmdldEludmVyc2UodGhpcy5ib25lc1thXS5tYXRyaXhXb3JsZCk7dGhpcy5ib25lSW52ZXJzZXMucHVzaChjKX19LHBvc2U6ZnVuY3Rpb24oKXt2YXIgYSxiO3ZhciBjPTA7Zm9yKGI9dGhpcy5ib25lcy5sZW5ndGg7YzxcbiAgICBiO2MrKykoYT10aGlzLmJvbmVzW2NdKSYmYS5tYXRyaXhXb3JsZC5nZXRJbnZlcnNlKHRoaXMuYm9uZUludmVyc2VzW2NdKTtjPTA7Zm9yKGI9dGhpcy5ib25lcy5sZW5ndGg7YzxiO2MrKylpZihhPXRoaXMuYm9uZXNbY10pYS5wYXJlbnQmJmEucGFyZW50LmlzQm9uZT8oYS5tYXRyaXguZ2V0SW52ZXJzZShhLnBhcmVudC5tYXRyaXhXb3JsZCksYS5tYXRyaXgubXVsdGlwbHkoYS5tYXRyaXhXb3JsZCkpOmEubWF0cml4LmNvcHkoYS5tYXRyaXhXb3JsZCksYS5tYXRyaXguZGVjb21wb3NlKGEucG9zaXRpb24sYS5xdWF0ZXJuaW9uLGEuc2NhbGUpfSx1cGRhdGU6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgTyxiPW5ldyBPO3JldHVybiBmdW5jdGlvbigpe2Zvcih2YXIgYz10aGlzLmJvbmVzLGQ9dGhpcy5ib25lSW52ZXJzZXMsZT10aGlzLmJvbmVNYXRyaWNlcyxmPXRoaXMuYm9uZVRleHR1cmUsZz0wLGg9Yy5sZW5ndGg7ZzxoO2crKylhLm11bHRpcGx5TWF0cmljZXMoY1tnXT9jW2ddLm1hdHJpeFdvcmxkOlxuICAgIGIsZFtnXSksYS50b0FycmF5KGUsMTYqZyk7dm9pZCAwIT09ZiYmKGYubmVlZHNVcGRhdGU9ITApfX0oKSxjbG9uZTpmdW5jdGlvbigpe3JldHVybiBuZXcgRWModGhpcy5ib25lcyx0aGlzLmJvbmVJbnZlcnNlcyl9fSk7d2QucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZSh4LnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOndkLGlzQm9uZTohMH0pO3hkLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUocmEucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6eGQsaXNTa2lubmVkTWVzaDohMCxpbml0Qm9uZXM6ZnVuY3Rpb24oKXt2YXIgYT1bXSxiO2lmKHRoaXMuZ2VvbWV0cnkmJnZvaWQgMCE9PXRoaXMuZ2VvbWV0cnkuYm9uZXMpe3ZhciBjPTA7Zm9yKGI9dGhpcy5nZW9tZXRyeS5ib25lcy5sZW5ndGg7YzxiO2MrKyl7dmFyIGQ9dGhpcy5nZW9tZXRyeS5ib25lc1tjXTt2YXIgZT1uZXcgd2Q7YS5wdXNoKGUpO2UubmFtZT1kLm5hbWU7ZS5wb3NpdGlvbi5mcm9tQXJyYXkoZC5wb3MpO1xuICAgIGUucXVhdGVybmlvbi5mcm9tQXJyYXkoZC5yb3RxKTt2b2lkIDAhPT1kLnNjbCYmZS5zY2FsZS5mcm9tQXJyYXkoZC5zY2wpfWM9MDtmb3IoYj10aGlzLmdlb21ldHJ5LmJvbmVzLmxlbmd0aDtjPGI7YysrKWQ9dGhpcy5nZW9tZXRyeS5ib25lc1tjXSwtMSE9PWQucGFyZW50JiZudWxsIT09ZC5wYXJlbnQmJnZvaWQgMCE9PWFbZC5wYXJlbnRdP2FbZC5wYXJlbnRdLmFkZChhW2NdKTp0aGlzLmFkZChhW2NdKX10aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCEwKTtyZXR1cm4gYX0sYmluZDpmdW5jdGlvbihhLGIpe3RoaXMuc2tlbGV0b249YTt2b2lkIDA9PT1iJiYodGhpcy51cGRhdGVNYXRyaXhXb3JsZCghMCksdGhpcy5za2VsZXRvbi5jYWxjdWxhdGVJbnZlcnNlcygpLGI9dGhpcy5tYXRyaXhXb3JsZCk7dGhpcy5iaW5kTWF0cml4LmNvcHkoYik7dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKGIpfSxwb3NlOmZ1bmN0aW9uKCl7dGhpcy5za2VsZXRvbi5wb3NlKCl9LG5vcm1hbGl6ZVNraW5XZWlnaHRzOmZ1bmN0aW9uKCl7dmFyIGE7XG4gICAgaWYodGhpcy5nZW9tZXRyeSYmdGhpcy5nZW9tZXRyeS5pc0dlb21ldHJ5KWZvcihhPTA7YTx0aGlzLmdlb21ldHJ5LnNraW5XZWlnaHRzLmxlbmd0aDthKyspe3ZhciBiPXRoaXMuZ2VvbWV0cnkuc2tpbldlaWdodHNbYV07dmFyIGM9MS9iLm1hbmhhdHRhbkxlbmd0aCgpO0luZmluaXR5IT09Yz9iLm11bHRpcGx5U2NhbGFyKGMpOmIuc2V0KDEsMCwwLDApfWVsc2UgaWYodGhpcy5nZW9tZXRyeSYmdGhpcy5nZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5KXt2YXIgYj1uZXcgYWEsZD10aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXMuc2tpbldlaWdodDtmb3IoYT0wO2E8ZC5jb3VudDthKyspYi54PWQuZ2V0WChhKSxiLnk9ZC5nZXRZKGEpLGIuej1kLmdldFooYSksYi53PWQuZ2V0VyhhKSxjPTEvYi5tYW5oYXR0YW5MZW5ndGgoKSxJbmZpbml0eSE9PWM/Yi5tdWx0aXBseVNjYWxhcihjKTpiLnNldCgxLDAsMCwwKSxkLnNldFhZWlcoYSxiLngsYi55LGIueixiLncpfX0sdXBkYXRlTWF0cml4V29ybGQ6ZnVuY3Rpb24oYSl7cmEucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwodGhpcyxcbiAgICBhKTtcImF0dGFjaGVkXCI9PT10aGlzLmJpbmRNb2RlP3RoaXMuYmluZE1hdHJpeEludmVyc2UuZ2V0SW52ZXJzZSh0aGlzLm1hdHJpeFdvcmxkKTpcImRldGFjaGVkXCI9PT10aGlzLmJpbmRNb2RlP3RoaXMuYmluZE1hdHJpeEludmVyc2UuZ2V0SW52ZXJzZSh0aGlzLmJpbmRNYXRyaXgpOmNvbnNvbGUud2FybihcIlRIUkVFLlNraW5uZWRNZXNoOiBVbnJlY29nbml6ZWQgYmluZE1vZGU6IFwiK3RoaXMuYmluZE1vZGUpfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmdlb21ldHJ5LHRoaXMubWF0ZXJpYWwpKS5jb3B5KHRoaXMpfX0pO1cucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoUC5wcm90b3R5cGUpO1cucHJvdG90eXBlLmNvbnN0cnVjdG9yPVc7Vy5wcm90b3R5cGUuaXNMaW5lQmFzaWNNYXRlcmlhbD0hMDtXLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe1AucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMuY29sb3IuY29weShhLmNvbG9yKTtcbiAgICB0aGlzLmxpbmV3aWR0aD1hLmxpbmV3aWR0aDt0aGlzLmxpbmVjYXA9YS5saW5lY2FwO3RoaXMubGluZWpvaW49YS5saW5lam9pbjtyZXR1cm4gdGhpc307c2EucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZSh4LnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOnNhLGlzTGluZTohMCxyYXljYXN0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IE8sYj1uZXcgc2IsYz1uZXcgSWE7cmV0dXJuIGZ1bmN0aW9uKGQsZSl7dmFyIGY9ZC5saW5lUHJlY2lzaW9uLGY9ZipmLGc9dGhpcy5nZW9tZXRyeSxoPXRoaXMubWF0cml4V29ybGQ7bnVsbD09PWcuYm91bmRpbmdTcGhlcmUmJmcuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7Yy5jb3B5KGcuYm91bmRpbmdTcGhlcmUpO2MuYXBwbHlNYXRyaXg0KGgpO2lmKCExIT09ZC5yYXkuaW50ZXJzZWN0c1NwaGVyZShjKSl7YS5nZXRJbnZlcnNlKGgpO2IuY29weShkLnJheSkuYXBwbHlNYXRyaXg0KGEpO3ZhciBrPW5ldyBwLG09bmV3IHAsaD1uZXcgcCxcbiAgICBsPW5ldyBwLG49dGhpcyYmdGhpcy5pc0xpbmVTZWdtZW50cz8yOjE7aWYoZy5pc0J1ZmZlckdlb21ldHJ5KXt2YXIgdT1nLmluZGV4O3ZhciByPWcuYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtpZihudWxsIT09dSlmb3IodmFyIHQ9dS5hcnJheSxnPTAsdj10Lmxlbmd0aC0xO2c8djtnKz1uKXU9dFtnKzFdLGsuZnJvbUFycmF5KHIsMyp0W2ddKSxtLmZyb21BcnJheShyLDMqdSksdT1iLmRpc3RhbmNlU3FUb1NlZ21lbnQoayxtLGwsaCksdT5mfHwobC5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXhXb3JsZCksdT1kLnJheS5vcmlnaW4uZGlzdGFuY2VUbyhsKSx1PGQubmVhcnx8dT5kLmZhcnx8ZS5wdXNoKHtkaXN0YW5jZTp1LHBvaW50OmguY2xvbmUoKS5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXhXb3JsZCksaW5kZXg6ZyxmYWNlOm51bGwsZmFjZUluZGV4Om51bGwsb2JqZWN0OnRoaXN9KSk7ZWxzZSBmb3IoZz0wLHY9ci5sZW5ndGgvMy0xO2c8djtnKz1uKWsuZnJvbUFycmF5KHIsXG4gICAgMypnKSxtLmZyb21BcnJheShyLDMqZyszKSx1PWIuZGlzdGFuY2VTcVRvU2VnbWVudChrLG0sbCxoKSx1PmZ8fChsLmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeFdvcmxkKSx1PWQucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKGwpLHU8ZC5uZWFyfHx1PmQuZmFyfHxlLnB1c2goe2Rpc3RhbmNlOnUscG9pbnQ6aC5jbG9uZSgpLmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeFdvcmxkKSxpbmRleDpnLGZhY2U6bnVsbCxmYWNlSW5kZXg6bnVsbCxvYmplY3Q6dGhpc30pKX1lbHNlIGlmKGcuaXNHZW9tZXRyeSlmb3Ioaz1nLnZlcnRpY2VzLG09ay5sZW5ndGgsZz0wO2c8bS0xO2crPW4pdT1iLmRpc3RhbmNlU3FUb1NlZ21lbnQoa1tnXSxrW2crMV0sbCxoKSx1PmZ8fChsLmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeFdvcmxkKSx1PWQucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKGwpLHU8ZC5uZWFyfHx1PmQuZmFyfHxlLnB1c2goe2Rpc3RhbmNlOnUscG9pbnQ6aC5jbG9uZSgpLmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeFdvcmxkKSxcbiAgICBpbmRleDpnLGZhY2U6bnVsbCxmYWNlSW5kZXg6bnVsbCxvYmplY3Q6dGhpc30pKX19fSgpLGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMuZ2VvbWV0cnksdGhpcy5tYXRlcmlhbCkpLmNvcHkodGhpcyl9fSk7WC5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHNhLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOlgsaXNMaW5lU2VnbWVudHM6ITB9KTt5ZC5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHNhLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOnlkLGlzTGluZUxvb3A6ITB9KTtLYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShQLnByb3RvdHlwZSk7S2EucHJvdG90eXBlLmNvbnN0cnVjdG9yPUthO0thLnByb3RvdHlwZS5pc1BvaW50c01hdGVyaWFsPSEwO0thLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe1AucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMuY29sb3IuY29weShhLmNvbG9yKTtcbiAgICB0aGlzLm1hcD1hLm1hcDt0aGlzLnNpemU9YS5zaXplO3RoaXMuc2l6ZUF0dGVudWF0aW9uPWEuc2l6ZUF0dGVudWF0aW9uO3JldHVybiB0aGlzfTtSYi5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHgucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6UmIsaXNQb2ludHM6ITAscmF5Y2FzdDpmdW5jdGlvbigpe3ZhciBhPW5ldyBPLGI9bmV3IHNiLGM9bmV3IElhO3JldHVybiBmdW5jdGlvbihkLGUpe2Z1bmN0aW9uIGYoYSxjKXt2YXIgZj1iLmRpc3RhbmNlU3FUb1BvaW50KGEpO2lmKGY8bCl7YT1iLmNsb3Nlc3RQb2ludFRvUG9pbnQoYSk7YS5hcHBseU1hdHJpeDQoayk7dmFyIGg9ZC5yYXkub3JpZ2luLmRpc3RhbmNlVG8oYSk7aDxkLm5lYXJ8fGg+ZC5mYXJ8fGUucHVzaCh7ZGlzdGFuY2U6aCxkaXN0YW5jZVRvUmF5Ok1hdGguc3FydChmKSxwb2ludDphLmNsb25lKCksaW5kZXg6YyxmYWNlOm51bGwsb2JqZWN0Omd9KX19dmFyIGc9dGhpcyxoPXRoaXMuZ2VvbWV0cnksXG4gICAgaz10aGlzLm1hdHJpeFdvcmxkLG09ZC5wYXJhbXMuUG9pbnRzLnRocmVzaG9sZDtudWxsPT09aC5ib3VuZGluZ1NwaGVyZSYmaC5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtjLmNvcHkoaC5ib3VuZGluZ1NwaGVyZSk7Yy5hcHBseU1hdHJpeDQoayk7Yy5yYWRpdXMrPW07aWYoITEhPT1kLnJheS5pbnRlcnNlY3RzU3BoZXJlKGMpKXthLmdldEludmVyc2Uoayk7Yi5jb3B5KGQucmF5KS5hcHBseU1hdHJpeDQoYSk7dmFyIG09bS8oKHRoaXMuc2NhbGUueCt0aGlzLnNjYWxlLnkrdGhpcy5zY2FsZS56KS8zKSxsPW0qbSxtPW5ldyBwO2lmKGguaXNCdWZmZXJHZW9tZXRyeSl7dmFyIG49aC5pbmRleCxoPWguYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtpZihudWxsIT09bilmb3IodmFyIHU9bi5hcnJheSxuPTAscj11Lmxlbmd0aDtuPHI7bisrKXt2YXIgdD11W25dO20uZnJvbUFycmF5KGgsMyp0KTtmKG0sdCl9ZWxzZSBmb3Iobj0wLHU9aC5sZW5ndGgvMztuPHU7bisrKW0uZnJvbUFycmF5KGgsXG4gICAgMypuKSxmKG0sbil9ZWxzZSBmb3IobT1oLnZlcnRpY2VzLG49MCx1PW0ubGVuZ3RoO248dTtuKyspZihtW25dLG4pfX19KCksY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5nZW9tZXRyeSx0aGlzLm1hdGVyaWFsKSkuY29weSh0aGlzKX19KTtGYy5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHgucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6RmMsaXNHcm91cDohMH0pO2VlLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoVS5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjplZSxpc1ZpZGVvVGV4dHVyZTohMCx1cGRhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmltYWdlO2EucmVhZHlTdGF0ZT49YS5IQVZFX0NVUlJFTlRfREFUQSYmKHRoaXMubmVlZHNVcGRhdGU9ITApfX0pO1NiLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFUucHJvdG90eXBlKTtTYi5wcm90b3R5cGUuY29uc3RydWN0b3I9U2I7U2IucHJvdG90eXBlLmlzQ29tcHJlc3NlZFRleHR1cmU9XG4gICAgITA7R2MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoVS5wcm90b3R5cGUpO0djLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1HYztHYy5wcm90b3R5cGUuaXNEZXB0aFRleHR1cmU9ITA7VGIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoRS5wcm90b3R5cGUpO1RiLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1UYjtIYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShMLnByb3RvdHlwZSk7SGMucHJvdG90eXBlLmNvbnN0cnVjdG9yPUhjO1ViLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEUucHJvdG90eXBlKTtVYi5wcm90b3R5cGUuY29uc3RydWN0b3I9VWI7SWMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTC5wcm90b3R5cGUpO0ljLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1JYztqYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFLnByb3RvdHlwZSk7amEucHJvdG90eXBlLmNvbnN0cnVjdG9yPWphO0pjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEwucHJvdG90eXBlKTtKYy5wcm90b3R5cGUuY29uc3RydWN0b3I9XG4gICAgSmM7VmIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoamEucHJvdG90eXBlKTtWYi5wcm90b3R5cGUuY29uc3RydWN0b3I9VmI7S2MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTC5wcm90b3R5cGUpO0tjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1LYzt1Yi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShqYS5wcm90b3R5cGUpO3ViLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj11YjtMYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShMLnByb3RvdHlwZSk7TGMucHJvdG90eXBlLmNvbnN0cnVjdG9yPUxjO1diLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGphLnByb3RvdHlwZSk7V2IucHJvdG90eXBlLmNvbnN0cnVjdG9yPVdiO01jLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEwucHJvdG90eXBlKTtNYy5wcm90b3R5cGUuY29uc3RydWN0b3I9TWM7WGIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoamEucHJvdG90eXBlKTtYYi5wcm90b3R5cGUuY29uc3RydWN0b3I9WGI7TmMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTC5wcm90b3R5cGUpO1xuICAgIE5jLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1OYztZYi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFLnByb3RvdHlwZSk7WWIucHJvdG90eXBlLmNvbnN0cnVjdG9yPVliO09jLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEwucHJvdG90eXBlKTtPYy5wcm90b3R5cGUuY29uc3RydWN0b3I9T2M7WmIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoRS5wcm90b3R5cGUpO1piLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1aYjtQYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShMLnByb3RvdHlwZSk7UGMucHJvdG90eXBlLmNvbnN0cnVjdG9yPVBjOyRiLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEUucHJvdG90eXBlKTskYi5wcm90b3R5cGUuY29uc3RydWN0b3I9JGI7dmFyIExnPXt0cmlhbmd1bGF0ZTpmdW5jdGlvbihhLGIsYyl7Yz1jfHwyO3ZhciBkPWImJmIubGVuZ3RoLGU9ZD9iWzBdKmM6YS5sZW5ndGgsZj1iZihhLDAsZSxjLCEwKSxnPVtdO2lmKCFmKXJldHVybiBnO3ZhciBoO2lmKGQpe3ZhciBrPVxuICAgIGMsZD1bXSxtO3ZhciBsPTA7Zm9yKG09Yi5sZW5ndGg7bDxtO2wrKyl7dmFyIG49YltsXSprO3ZhciBwPWw8bS0xP2JbbCsxXSprOmEubGVuZ3RoO249YmYoYSxuLHAsaywhMSk7bj09PW4ubmV4dCYmKG4uc3RlaW5lcj0hMCk7ZC5wdXNoKEpnKG4pKX1kLnNvcnQoSGcpO2ZvcihsPTA7bDxkLmxlbmd0aDtsKyspe2I9ZFtsXTtrPWY7aWYoaz1JZyhiLGspKWI9ZWYoayxiKSxSYyhiLGIubmV4dCk7Zj1SYyhmLGYubmV4dCl9fWlmKGEubGVuZ3RoPjgwKmMpe3ZhciByPWg9YVswXTt2YXIgdD1kPWFbMV07Zm9yKGs9YztrPGU7ays9YylsPWFba10sYj1hW2srMV0sbDxyJiYocj1sKSxiPHQmJih0PWIpLGw+aCYmKGg9bCksYj5kJiYoZD1iKTtoPU1hdGgubWF4KGgtcixkLXQpO2g9MCE9PWg/MS9oOjB9U2MoZixnLGMscix0LGgpO3JldHVybiBnfX0sJGE9e2FyZWE6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPWEubGVuZ3RoLGM9MCxkPWItMSxlPTA7ZTxiO2Q9ZSsrKWMrPWFbZF0ueCphW2VdLnktXG4gICAgYVtlXS54KmFbZF0ueTtyZXR1cm4uNSpjfSxpc0Nsb2NrV2lzZTpmdW5jdGlvbihhKXtyZXR1cm4gMD4kYS5hcmVhKGEpfSx0cmlhbmd1bGF0ZVNoYXBlOmZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhKXt2YXIgYj1hLmxlbmd0aDsyPGImJmFbYi0xXS5lcXVhbHMoYVswXSkmJmEucG9wKCl9ZnVuY3Rpb24gZChhLGIpe2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKWEucHVzaChiW2NdLngpLGEucHVzaChiW2NdLnkpfXZhciBlPVtdLGY9W10sZz1bXTtjKGEpO2QoZSxhKTt2YXIgaD1hLmxlbmd0aDtiLmZvckVhY2goYyk7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKylmLnB1c2goaCksaCs9YlthXS5sZW5ndGgsZChlLGJbYV0pO2I9TGcudHJpYW5ndWxhdGUoZSxmKTtmb3IoYT0wO2E8Yi5sZW5ndGg7YSs9MylnLnB1c2goYi5zbGljZShhLGErMykpO3JldHVybiBnfX07aWIucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTC5wcm90b3R5cGUpO2liLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1pYjtcbiAgICBMYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFLnByb3RvdHlwZSk7TGEucHJvdG90eXBlLmNvbnN0cnVjdG9yPUxhO0xhLnByb3RvdHlwZS5nZXRBcnJheXM9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmdldEF0dHJpYnV0ZShcInBvc2l0aW9uXCIpLGE9YT9BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhLmFycmF5KTpbXSxiPXRoaXMuZ2V0QXR0cmlidXRlKFwidXZcIiksYj1iP0FycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGIuYXJyYXkpOltdLGM9dGhpcy5pbmRleCxjPWM/QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYy5hcnJheSk6W107cmV0dXJue3Bvc2l0aW9uOmEsdXY6YixpbmRleDpjfX07TGEucHJvdG90eXBlLmFkZFNoYXBlTGlzdD1mdW5jdGlvbihhLGIpe3ZhciBjPWEubGVuZ3RoO2IuYXJyYXlzPXRoaXMuZ2V0QXJyYXlzKCk7Zm9yKHZhciBkPTA7ZDxjO2QrKyl0aGlzLmFkZFNoYXBlKGFbZF0sYik7dGhpcy5zZXRJbmRleChiLmFycmF5cy5pbmRleCk7dGhpcy5hZGRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLFxuICAgIG5ldyBCKGIuYXJyYXlzLnBvc2l0aW9uLDMpKTt0aGlzLmFkZEF0dHJpYnV0ZShcInV2XCIsbmV3IEIoYi5hcnJheXMudXYsMikpfTtMYS5wcm90b3R5cGUuYWRkU2hhcGU9ZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEsYixjKXtifHxjb25zb2xlLmVycm9yKFwiVEhSRUUuRXh0cnVkZUdlb21ldHJ5OiB2ZWMgZG9lcyBub3QgZXhpc3RcIik7cmV0dXJuIGIuY2xvbmUoKS5tdWx0aXBseVNjYWxhcihjKS5hZGQoYSl9ZnVuY3Rpb24gZChhLGIsYyl7dmFyIGQ9YS54LWIueDt2YXIgZT1hLnktYi55O3ZhciBmPWMueC1hLng7dmFyIGc9Yy55LWEueSxoPWQqZCtlKmU7aWYoTWF0aC5hYnMoZCpnLWUqZik+TnVtYmVyLkVQU0lMT04pe3ZhciBrPU1hdGguc3FydChoKSxtPU1hdGguc3FydChmKmYrZypnKSxoPWIueC1lL2s7Yj1iLnkrZC9rO2c9KChjLngtZy9tLWgpKmctKGMueStmL20tYikqZikvKGQqZy1lKmYpO2Y9aCtkKmctYS54O2Q9YitlKmctYS55O2U9ZipmK2QqZDtpZigyPj1lKXJldHVybiBuZXcgRChmLFxuICAgIGQpO2U9TWF0aC5zcXJ0KGUvMil9ZWxzZSBhPSExLGQ+TnVtYmVyLkVQU0lMT04/Zj5OdW1iZXIuRVBTSUxPTiYmKGE9ITApOmQ8LU51bWJlci5FUFNJTE9OP2Y8LU51bWJlci5FUFNJTE9OJiYoYT0hMCk6TWF0aC5zaWduKGUpPT09TWF0aC5zaWduKGcpJiYoYT0hMCksYT8oZj0tZSxlPU1hdGguc3FydChoKSk6KGY9ZCxkPWUsZT1NYXRoLnNxcnQoaC8yKSk7cmV0dXJuIG5ldyBEKGYvZSxkL2UpfWZ1bmN0aW9uIGUoYSxiKXtmb3IoRz1hLmxlbmd0aDswPD0tLUc7KXt2YXIgYz1HO3ZhciBkPUctMTswPmQmJihkPWEubGVuZ3RoLTEpO3ZhciBlLGY9eCsyKnc7Zm9yKGU9MDtlPGY7ZSsrKXt2YXIgZz1YKmUsbT1YKihlKzEpLG49YitkK2cscT1iK2QrbSxtPWIrYyttO2goYitjK2cpO2gobik7aChtKTtoKG4pO2gocSk7aChtKTtnPWwubGVuZ3RoLzM7Zz1FLmdlbmVyYXRlU2lkZVdhbGxVVihTLGwsZy02LGctMyxnLTIsZy0xKTtrKGdbMF0pO2soZ1sxXSk7ayhnWzNdKTtrKGdbMV0pO1xuICAgIGsoZ1syXSk7ayhnWzNdKX19fWZ1bmN0aW9uIGYoYSxiLGMpe3IucHVzaChhKTtyLnB1c2goYik7ci5wdXNoKGMpfWZ1bmN0aW9uIGcoYSxiLGMpe2goYSk7aChiKTtoKGMpO2E9bC5sZW5ndGgvMzthPUUuZ2VuZXJhdGVUb3BVVihTLGwsYS0zLGEtMixhLTEpO2soYVswXSk7ayhhWzFdKTtrKGFbMl0pfWZ1bmN0aW9uIGgoYSl7bi5wdXNoKGwubGVuZ3RoLzMpO2wucHVzaChyWzMqYSswXSk7bC5wdXNoKHJbMyphKzFdKTtsLnB1c2goclszKmErMl0pfWZ1bmN0aW9uIGsoYSl7dS5wdXNoKGEueCk7dS5wdXNoKGEueSl9dmFyIG09Yi5hcnJheXM/Yi5hcnJheXM6dGhpcy5nZXRBcnJheXMoKSxsPW0ucG9zaXRpb24sbj1tLmluZGV4LHU9bS51dixyPVtdLG09dm9pZCAwIT09Yi5hbW91bnQ/Yi5hbW91bnQ6MTAwLHQ9dm9pZCAwIT09Yi5iZXZlbFRoaWNrbmVzcz9iLmJldmVsVGhpY2tuZXNzOjYsdj12b2lkIDAhPT1iLmJldmVsU2l6ZT9iLmJldmVsU2l6ZTp0LTIsdz12b2lkIDAhPT1iLmJldmVsU2VnbWVudHM/XG4gICAgYi5iZXZlbFNlZ21lbnRzOjMsej12b2lkIDAhPT1iLmJldmVsRW5hYmxlZD9iLmJldmVsRW5hYmxlZDohMCx5PXZvaWQgMCE9PWIuY3VydmVTZWdtZW50cz9iLmN1cnZlU2VnbWVudHM6MTIseD12b2lkIDAhPT1iLnN0ZXBzP2Iuc3RlcHM6MSxBPWIuZXh0cnVkZVBhdGgsQz0hMSxFPXZvaWQgMCE9PWIuVVZHZW5lcmF0b3I/Yi5VVkdlbmVyYXRvcjppYi5Xb3JsZFVWR2VuZXJhdG9yO2lmKEEpe3ZhciBIPUEuZ2V0U3BhY2VkUG9pbnRzKHgpO0M9ITA7ej0hMTt2YXIgSz12b2lkIDAhPT1iLmZyYW1lcz9iLmZyYW1lczpBLmNvbXB1dGVGcmVuZXRGcmFtZXMoeCwhMSk7dmFyIEw9bmV3IHA7dmFyIE09bmV3IHA7dmFyIFA9bmV3IHB9enx8KHY9dD13PTApO3ZhciBPLFM9dGhpcyx5PWEuZXh0cmFjdFBvaW50cyh5KTthPXkuc2hhcGU7dmFyIFE9eS5ob2xlcztpZighJGEuaXNDbG9ja1dpc2UoYSkpe2E9YS5yZXZlcnNlKCk7dmFyIE49MDtmb3IoTz1RLmxlbmd0aDtOPE87TisrKXt2YXIgUj1cbiAgICBRW05dOyRhLmlzQ2xvY2tXaXNlKFIpJiYoUVtOXT1SLnJldmVyc2UoKSl9fXZhciBVPSRhLnRyaWFuZ3VsYXRlU2hhcGUoYSxRKSxXPWE7Tj0wO2ZvcihPPVEubGVuZ3RoO048TztOKyspUj1RW05dLGE9YS5jb25jYXQoUik7dmFyIFYsWD1hLmxlbmd0aCxULGJhPVUubGVuZ3RoLHk9W10sRz0wO3ZhciBZPVcubGVuZ3RoO3ZhciBlYT1ZLTE7Zm9yKFY9RysxO0c8WTtHKyssZWErKyxWKyspZWE9PT1ZJiYoZWE9MCksVj09PVkmJihWPTApLHlbR109ZChXW0ddLFdbZWFdLFdbVl0pO3ZhciBBPVtdLGNhPXkuY29uY2F0KCk7Tj0wO2ZvcihPPVEubGVuZ3RoO048TztOKyspe1I9UVtOXTt2YXIgYWE9W107Rz0wO1k9Ui5sZW5ndGg7ZWE9WS0xO2ZvcihWPUcrMTtHPFk7RysrLGVhKyssVisrKWVhPT09WSYmKGVhPTApLFY9PT1ZJiYoVj0wKSxhYVtHXT1kKFJbR10sUltlYV0sUltWXSk7QS5wdXNoKGFhKTtjYT1jYS5jb25jYXQoYWEpfWZvcihlYT0wO2VhPHc7ZWErKyl7WT1lYS93O3ZhciBkYT1cbiAgICB0Kk1hdGguY29zKFkqTWF0aC5QSS8yKTtWPXYqTWF0aC5zaW4oWSpNYXRoLlBJLzIpO0c9MDtmb3IoWT1XLmxlbmd0aDtHPFk7RysrKXt2YXIgZmE9YyhXW0ddLHlbR10sVik7ZihmYS54LGZhLnksLWRhKX1OPTA7Zm9yKE89US5sZW5ndGg7TjxPO04rKylmb3IoUj1RW05dLGFhPUFbTl0sRz0wLFk9Ui5sZW5ndGg7RzxZO0crKylmYT1jKFJbR10sYWFbR10sViksZihmYS54LGZhLnksLWRhKX1WPXY7Zm9yKEc9MDtHPFg7RysrKWZhPXo/YyhhW0ddLGNhW0ddLFYpOmFbR10sQz8oTS5jb3B5KEsubm9ybWFsc1swXSkubXVsdGlwbHlTY2FsYXIoZmEueCksTC5jb3B5KEsuYmlub3JtYWxzWzBdKS5tdWx0aXBseVNjYWxhcihmYS55KSxQLmNvcHkoSFswXSkuYWRkKE0pLmFkZChMKSxmKFAueCxQLnksUC56KSk6ZihmYS54LGZhLnksMCk7Zm9yKFk9MTtZPD14O1krKylmb3IoRz0wO0c8WDtHKyspZmE9ej9jKGFbR10sY2FbR10sVik6YVtHXSxDPyhNLmNvcHkoSy5ub3JtYWxzW1ldKS5tdWx0aXBseVNjYWxhcihmYS54KSxcbiAgICBMLmNvcHkoSy5iaW5vcm1hbHNbWV0pLm11bHRpcGx5U2NhbGFyKGZhLnkpLFAuY29weShIW1ldKS5hZGQoTSkuYWRkKEwpLGYoUC54LFAueSxQLnopKTpmKGZhLngsZmEueSxtL3gqWSk7Zm9yKGVhPXctMTswPD1lYTtlYS0tKXtZPWVhL3c7ZGE9dCpNYXRoLmNvcyhZKk1hdGguUEkvMik7Vj12Kk1hdGguc2luKFkqTWF0aC5QSS8yKTtHPTA7Zm9yKFk9Vy5sZW5ndGg7RzxZO0crKylmYT1jKFdbR10seVtHXSxWKSxmKGZhLngsZmEueSxtK2RhKTtOPTA7Zm9yKE89US5sZW5ndGg7TjxPO04rKylmb3IoUj1RW05dLGFhPUFbTl0sRz0wLFk9Ui5sZW5ndGg7RzxZO0crKylmYT1jKFJbR10sYWFbR10sViksQz9mKGZhLngsZmEueStIW3gtMV0ueSxIW3gtMV0ueCtkYSk6ZihmYS54LGZhLnksbStkYSl9KGZ1bmN0aW9uKCl7dmFyIGE9bC5sZW5ndGgvMztpZih6KXt2YXIgYz0wKlg7Zm9yKEc9MDtHPGJhO0crKylUPVVbR10sZyhUWzJdK2MsVFsxXStjLFRbMF0rYyk7Yz1YKih4KzIqdyk7Zm9yKEc9XG4gICAgMDtHPGJhO0crKylUPVVbR10sZyhUWzBdK2MsVFsxXStjLFRbMl0rYyl9ZWxzZXtmb3IoRz0wO0c8YmE7RysrKVQ9VVtHXSxnKFRbMl0sVFsxXSxUWzBdKTtmb3IoRz0wO0c8YmE7RysrKVQ9VVtHXSxnKFRbMF0rWCp4LFRbMV0rWCp4LFRbMl0rWCp4KX1TLmFkZEdyb3VwKGEsbC5sZW5ndGgvMy1hLHZvaWQgMCE9PWIubWF0ZXJpYWw/Yi5tYXRlcmlhbDowKX0pKCk7KGZ1bmN0aW9uKCl7dmFyIGE9bC5sZW5ndGgvMyxjPTA7ZShXLGMpO2MrPVcubGVuZ3RoO049MDtmb3IoTz1RLmxlbmd0aDtOPE87TisrKVI9UVtOXSxlKFIsYyksYys9Ui5sZW5ndGg7Uy5hZGRHcm91cChhLGwubGVuZ3RoLzMtYSx2b2lkIDAhPT1iLmV4dHJ1ZGVNYXRlcmlhbD9iLmV4dHJ1ZGVNYXRlcmlhbDoxKX0pKCk7Yi5hcnJheXN8fCh0aGlzLnNldEluZGV4KG4pLHRoaXMuYWRkQXR0cmlidXRlKFwicG9zaXRpb25cIixuZXcgQihsLDMpKSx0aGlzLmFkZEF0dHJpYnV0ZShcInV2XCIsbmV3IEIodSwyKSkpfTtpYi5Xb3JsZFVWR2VuZXJhdG9yPVxuICAgIHtnZW5lcmF0ZVRvcFVWOmZ1bmN0aW9uKGEsYixjLGQsZSl7YT1iWzMqZF07ZD1iWzMqZCsxXTt2YXIgZj1iWzMqZV07ZT1iWzMqZSsxXTtyZXR1cm5bbmV3IEQoYlszKmNdLGJbMypjKzFdKSxuZXcgRChhLGQpLG5ldyBEKGYsZSldfSxnZW5lcmF0ZVNpZGVXYWxsVVY6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2E9YlszKmNdO3ZhciBnPWJbMypjKzFdO2M9YlszKmMrMl07dmFyIGg9YlszKmRdLGs9YlszKmQrMV07ZD1iWzMqZCsyXTt2YXIgbT1iWzMqZV0sbD1iWzMqZSsxXTtlPWJbMyplKzJdO3ZhciBuPWJbMypmXSxwPWJbMypmKzFdO2I9YlszKmYrMl07cmV0dXJuLjAxPk1hdGguYWJzKGctayk/W25ldyBEKGEsMS1jKSxuZXcgRChoLDEtZCksbmV3IEQobSwxLWUpLG5ldyBEKG4sMS1iKV06W25ldyBEKGcsMS1jKSxuZXcgRChrLDEtZCksbmV3IEQobCwxLWUpLG5ldyBEKHAsMS1iKV19fTtVYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShMLnByb3RvdHlwZSk7VWMucHJvdG90eXBlLmNvbnN0cnVjdG9yPVxuICAgIFVjO2FjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKExhLnByb3RvdHlwZSk7YWMucHJvdG90eXBlLmNvbnN0cnVjdG9yPWFjO1ZjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEwucHJvdG90eXBlKTtWYy5wcm90b3R5cGUuY29uc3RydWN0b3I9VmM7d2IucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoRS5wcm90b3R5cGUpO3diLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj13YjtXYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShMLnByb3RvdHlwZSk7V2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPVdjO2JjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEUucHJvdG90eXBlKTtiYy5wcm90b3R5cGUuY29uc3RydWN0b3I9YmM7WGMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTC5wcm90b3R5cGUpO1hjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1YYztjYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFLnByb3RvdHlwZSk7Y2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWNjO3hiLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEwucHJvdG90eXBlKTtcbiAgICB4Yi5wcm90b3R5cGUuY29uc3RydWN0b3I9eGI7eGIucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3ZhciBhPUwucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO3JldHVybiBmZih0aGlzLnBhcmFtZXRlcnMuc2hhcGVzLGEpfTt5Yi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFLnByb3RvdHlwZSk7eWIucHJvdG90eXBlLmNvbnN0cnVjdG9yPXliO3liLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXt2YXIgYT1FLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTtyZXR1cm4gZmYodGhpcy5wYXJhbWV0ZXJzLnNoYXBlcyxhKX07ZGMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoRS5wcm90b3R5cGUpO2RjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1kYzt6Yi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShMLnByb3RvdHlwZSk7emIucHJvdG90eXBlLmNvbnN0cnVjdG9yPXpiO2FiLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEUucHJvdG90eXBlKTthYi5wcm90b3R5cGUuY29uc3RydWN0b3I9XG4gICAgYWI7WWMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoemIucHJvdG90eXBlKTtZYy5wcm90b3R5cGUuY29uc3RydWN0b3I9WWM7WmMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoYWIucHJvdG90eXBlKTtaYy5wcm90b3R5cGUuY29uc3RydWN0b3I9WmM7JGMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoTC5wcm90b3R5cGUpOyRjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj0kYztlYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShFLnByb3RvdHlwZSk7ZWMucHJvdG90eXBlLmNvbnN0cnVjdG9yPWVjO3ZhciBrYT1PYmplY3QuZnJlZXplKHtXaXJlZnJhbWVHZW9tZXRyeTpUYixQYXJhbWV0cmljR2VvbWV0cnk6SGMsUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5OlViLFRldHJhaGVkcm9uR2VvbWV0cnk6SmMsVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeTpWYixPY3RhaGVkcm9uR2VvbWV0cnk6S2MsT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5OnViLEljb3NhaGVkcm9uR2VvbWV0cnk6TGMsSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeTpXYixcbiAgICBEb2RlY2FoZWRyb25HZW9tZXRyeTpNYyxEb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeTpYYixQb2x5aGVkcm9uR2VvbWV0cnk6SWMsUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5OmphLFR1YmVHZW9tZXRyeTpOYyxUdWJlQnVmZmVyR2VvbWV0cnk6WWIsVG9ydXNLbm90R2VvbWV0cnk6T2MsVG9ydXNLbm90QnVmZmVyR2VvbWV0cnk6WmIsVG9ydXNHZW9tZXRyeTpQYyxUb3J1c0J1ZmZlckdlb21ldHJ5OiRiLFRleHRHZW9tZXRyeTpVYyxUZXh0QnVmZmVyR2VvbWV0cnk6YWMsU3BoZXJlR2VvbWV0cnk6VmMsU3BoZXJlQnVmZmVyR2VvbWV0cnk6d2IsUmluZ0dlb21ldHJ5OldjLFJpbmdCdWZmZXJHZW9tZXRyeTpiYyxQbGFuZUdlb21ldHJ5OkFjLFBsYW5lQnVmZmVyR2VvbWV0cnk6cmIsTGF0aGVHZW9tZXRyeTpYYyxMYXRoZUJ1ZmZlckdlb21ldHJ5OmNjLFNoYXBlR2VvbWV0cnk6eGIsU2hhcGVCdWZmZXJHZW9tZXRyeTp5YixFeHRydWRlR2VvbWV0cnk6aWIsRXh0cnVkZUJ1ZmZlckdlb21ldHJ5OkxhLFxuICAgIEVkZ2VzR2VvbWV0cnk6ZGMsQ29uZUdlb21ldHJ5OlljLENvbmVCdWZmZXJHZW9tZXRyeTpaYyxDeWxpbmRlckdlb21ldHJ5OnpiLEN5bGluZGVyQnVmZmVyR2VvbWV0cnk6YWIsQ2lyY2xlR2VvbWV0cnk6JGMsQ2lyY2xlQnVmZmVyR2VvbWV0cnk6ZWMsQm94R2VvbWV0cnk6TWIsQm94QnVmZmVyR2VvbWV0cnk6cWJ9KTtmYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShQLnByb3RvdHlwZSk7ZmMucHJvdG90eXBlLmNvbnN0cnVjdG9yPWZjO2ZjLnByb3RvdHlwZS5pc1NoYWRvd01hdGVyaWFsPSEwO2djLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEZhLnByb3RvdHlwZSk7Z2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWdjO2djLnByb3RvdHlwZS5pc1Jhd1NoYWRlck1hdGVyaWFsPSEwO1VhLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFAucHJvdG90eXBlKTtVYS5wcm90b3R5cGUuY29uc3RydWN0b3I9VWE7VWEucHJvdG90eXBlLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWw9ITA7VWEucHJvdG90eXBlLmNvcHk9XG4gICAgZnVuY3Rpb24oYSl7UC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5kZWZpbmVzPXtTVEFOREFSRDpcIlwifTt0aGlzLmNvbG9yLmNvcHkoYS5jb2xvcik7dGhpcy5yb3VnaG5lc3M9YS5yb3VnaG5lc3M7dGhpcy5tZXRhbG5lc3M9YS5tZXRhbG5lc3M7dGhpcy5tYXA9YS5tYXA7dGhpcy5saWdodE1hcD1hLmxpZ2h0TWFwO3RoaXMubGlnaHRNYXBJbnRlbnNpdHk9YS5saWdodE1hcEludGVuc2l0eTt0aGlzLmFvTWFwPWEuYW9NYXA7dGhpcy5hb01hcEludGVuc2l0eT1hLmFvTWFwSW50ZW5zaXR5O3RoaXMuZW1pc3NpdmUuY29weShhLmVtaXNzaXZlKTt0aGlzLmVtaXNzaXZlTWFwPWEuZW1pc3NpdmVNYXA7dGhpcy5lbWlzc2l2ZUludGVuc2l0eT1hLmVtaXNzaXZlSW50ZW5zaXR5O3RoaXMuYnVtcE1hcD1hLmJ1bXBNYXA7dGhpcy5idW1wU2NhbGU9YS5idW1wU2NhbGU7dGhpcy5ub3JtYWxNYXA9YS5ub3JtYWxNYXA7dGhpcy5ub3JtYWxTY2FsZS5jb3B5KGEubm9ybWFsU2NhbGUpO1xuICAgIHRoaXMuZGlzcGxhY2VtZW50TWFwPWEuZGlzcGxhY2VtZW50TWFwO3RoaXMuZGlzcGxhY2VtZW50U2NhbGU9YS5kaXNwbGFjZW1lbnRTY2FsZTt0aGlzLmRpc3BsYWNlbWVudEJpYXM9YS5kaXNwbGFjZW1lbnRCaWFzO3RoaXMucm91Z2huZXNzTWFwPWEucm91Z2huZXNzTWFwO3RoaXMubWV0YWxuZXNzTWFwPWEubWV0YWxuZXNzTWFwO3RoaXMuYWxwaGFNYXA9YS5hbHBoYU1hcDt0aGlzLmVudk1hcD1hLmVudk1hcDt0aGlzLmVudk1hcEludGVuc2l0eT1hLmVudk1hcEludGVuc2l0eTt0aGlzLnJlZnJhY3Rpb25SYXRpbz1hLnJlZnJhY3Rpb25SYXRpbzt0aGlzLndpcmVmcmFtZT1hLndpcmVmcmFtZTt0aGlzLndpcmVmcmFtZUxpbmV3aWR0aD1hLndpcmVmcmFtZUxpbmV3aWR0aDt0aGlzLndpcmVmcmFtZUxpbmVjYXA9YS53aXJlZnJhbWVMaW5lY2FwO3RoaXMud2lyZWZyYW1lTGluZWpvaW49YS53aXJlZnJhbWVMaW5lam9pbjt0aGlzLnNraW5uaW5nPWEuc2tpbm5pbmc7dGhpcy5tb3JwaFRhcmdldHM9XG4gICAgYS5tb3JwaFRhcmdldHM7dGhpcy5tb3JwaE5vcm1hbHM9YS5tb3JwaE5vcm1hbHM7cmV0dXJuIHRoaXN9O0FiLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFVhLnByb3RvdHlwZSk7QWIucHJvdG90eXBlLmNvbnN0cnVjdG9yPUFiO0FiLnByb3RvdHlwZS5pc01lc2hQaHlzaWNhbE1hdGVyaWFsPSEwO0FiLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe1VhLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmRlZmluZXM9e1BIWVNJQ0FMOlwiXCJ9O3RoaXMucmVmbGVjdGl2aXR5PWEucmVmbGVjdGl2aXR5O3RoaXMuY2xlYXJDb2F0PWEuY2xlYXJDb2F0O3RoaXMuY2xlYXJDb2F0Um91Z2huZXNzPWEuY2xlYXJDb2F0Um91Z2huZXNzO3JldHVybiB0aGlzfTtNYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShQLnByb3RvdHlwZSk7TWEucHJvdG90eXBlLmNvbnN0cnVjdG9yPU1hO01hLnByb3RvdHlwZS5pc01lc2hQaG9uZ01hdGVyaWFsPSEwO01hLnByb3RvdHlwZS5jb3B5PWZ1bmN0aW9uKGEpe1AucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLFxuICAgIGEpO3RoaXMuY29sb3IuY29weShhLmNvbG9yKTt0aGlzLnNwZWN1bGFyLmNvcHkoYS5zcGVjdWxhcik7dGhpcy5zaGluaW5lc3M9YS5zaGluaW5lc3M7dGhpcy5tYXA9YS5tYXA7dGhpcy5saWdodE1hcD1hLmxpZ2h0TWFwO3RoaXMubGlnaHRNYXBJbnRlbnNpdHk9YS5saWdodE1hcEludGVuc2l0eTt0aGlzLmFvTWFwPWEuYW9NYXA7dGhpcy5hb01hcEludGVuc2l0eT1hLmFvTWFwSW50ZW5zaXR5O3RoaXMuZW1pc3NpdmUuY29weShhLmVtaXNzaXZlKTt0aGlzLmVtaXNzaXZlTWFwPWEuZW1pc3NpdmVNYXA7dGhpcy5lbWlzc2l2ZUludGVuc2l0eT1hLmVtaXNzaXZlSW50ZW5zaXR5O3RoaXMuYnVtcE1hcD1hLmJ1bXBNYXA7dGhpcy5idW1wU2NhbGU9YS5idW1wU2NhbGU7dGhpcy5ub3JtYWxNYXA9YS5ub3JtYWxNYXA7dGhpcy5ub3JtYWxTY2FsZS5jb3B5KGEubm9ybWFsU2NhbGUpO3RoaXMuZGlzcGxhY2VtZW50TWFwPWEuZGlzcGxhY2VtZW50TWFwO3RoaXMuZGlzcGxhY2VtZW50U2NhbGU9XG4gICAgYS5kaXNwbGFjZW1lbnRTY2FsZTt0aGlzLmRpc3BsYWNlbWVudEJpYXM9YS5kaXNwbGFjZW1lbnRCaWFzO3RoaXMuc3BlY3VsYXJNYXA9YS5zcGVjdWxhck1hcDt0aGlzLmFscGhhTWFwPWEuYWxwaGFNYXA7dGhpcy5lbnZNYXA9YS5lbnZNYXA7dGhpcy5jb21iaW5lPWEuY29tYmluZTt0aGlzLnJlZmxlY3Rpdml0eT1hLnJlZmxlY3Rpdml0eTt0aGlzLnJlZnJhY3Rpb25SYXRpbz1hLnJlZnJhY3Rpb25SYXRpbzt0aGlzLndpcmVmcmFtZT1hLndpcmVmcmFtZTt0aGlzLndpcmVmcmFtZUxpbmV3aWR0aD1hLndpcmVmcmFtZUxpbmV3aWR0aDt0aGlzLndpcmVmcmFtZUxpbmVjYXA9YS53aXJlZnJhbWVMaW5lY2FwO3RoaXMud2lyZWZyYW1lTGluZWpvaW49YS53aXJlZnJhbWVMaW5lam9pbjt0aGlzLnNraW5uaW5nPWEuc2tpbm5pbmc7dGhpcy5tb3JwaFRhcmdldHM9YS5tb3JwaFRhcmdldHM7dGhpcy5tb3JwaE5vcm1hbHM9YS5tb3JwaE5vcm1hbHM7cmV0dXJuIHRoaXN9O0JiLnByb3RvdHlwZT1cbiAgICBPYmplY3QuY3JlYXRlKE1hLnByb3RvdHlwZSk7QmIucHJvdG90eXBlLmNvbnN0cnVjdG9yPUJiO0JiLnByb3RvdHlwZS5pc01lc2hUb29uTWF0ZXJpYWw9ITA7QmIucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7TWEucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMuZ3JhZGllbnRNYXA9YS5ncmFkaWVudE1hcDtyZXR1cm4gdGhpc307Q2IucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoUC5wcm90b3R5cGUpO0NiLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1DYjtDYi5wcm90b3R5cGUuaXNNZXNoTm9ybWFsTWF0ZXJpYWw9ITA7Q2IucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7UC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5idW1wTWFwPWEuYnVtcE1hcDt0aGlzLmJ1bXBTY2FsZT1hLmJ1bXBTY2FsZTt0aGlzLm5vcm1hbE1hcD1hLm5vcm1hbE1hcDt0aGlzLm5vcm1hbFNjYWxlLmNvcHkoYS5ub3JtYWxTY2FsZSk7dGhpcy5kaXNwbGFjZW1lbnRNYXA9YS5kaXNwbGFjZW1lbnRNYXA7XG4gICAgdGhpcy5kaXNwbGFjZW1lbnRTY2FsZT1hLmRpc3BsYWNlbWVudFNjYWxlO3RoaXMuZGlzcGxhY2VtZW50Qmlhcz1hLmRpc3BsYWNlbWVudEJpYXM7dGhpcy53aXJlZnJhbWU9YS53aXJlZnJhbWU7dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg9YS53aXJlZnJhbWVMaW5ld2lkdGg7dGhpcy5za2lubmluZz1hLnNraW5uaW5nO3RoaXMubW9ycGhUYXJnZXRzPWEubW9ycGhUYXJnZXRzO3RoaXMubW9ycGhOb3JtYWxzPWEubW9ycGhOb3JtYWxzO3JldHVybiB0aGlzfTtEYi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShQLnByb3RvdHlwZSk7RGIucHJvdG90eXBlLmNvbnN0cnVjdG9yPURiO0RiLnByb3RvdHlwZS5pc01lc2hMYW1iZXJ0TWF0ZXJpYWw9ITA7RGIucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7UC5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5jb2xvci5jb3B5KGEuY29sb3IpO3RoaXMubWFwPWEubWFwO3RoaXMubGlnaHRNYXA9YS5saWdodE1hcDt0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5PVxuICAgIGEubGlnaHRNYXBJbnRlbnNpdHk7dGhpcy5hb01hcD1hLmFvTWFwO3RoaXMuYW9NYXBJbnRlbnNpdHk9YS5hb01hcEludGVuc2l0eTt0aGlzLmVtaXNzaXZlLmNvcHkoYS5lbWlzc2l2ZSk7dGhpcy5lbWlzc2l2ZU1hcD1hLmVtaXNzaXZlTWFwO3RoaXMuZW1pc3NpdmVJbnRlbnNpdHk9YS5lbWlzc2l2ZUludGVuc2l0eTt0aGlzLnNwZWN1bGFyTWFwPWEuc3BlY3VsYXJNYXA7dGhpcy5hbHBoYU1hcD1hLmFscGhhTWFwO3RoaXMuZW52TWFwPWEuZW52TWFwO3RoaXMuY29tYmluZT1hLmNvbWJpbmU7dGhpcy5yZWZsZWN0aXZpdHk9YS5yZWZsZWN0aXZpdHk7dGhpcy5yZWZyYWN0aW9uUmF0aW89YS5yZWZyYWN0aW9uUmF0aW87dGhpcy53aXJlZnJhbWU9YS53aXJlZnJhbWU7dGhpcy53aXJlZnJhbWVMaW5ld2lkdGg9YS53aXJlZnJhbWVMaW5ld2lkdGg7dGhpcy53aXJlZnJhbWVMaW5lY2FwPWEud2lyZWZyYW1lTGluZWNhcDt0aGlzLndpcmVmcmFtZUxpbmVqb2luPWEud2lyZWZyYW1lTGluZWpvaW47XG4gICAgdGhpcy5za2lubmluZz1hLnNraW5uaW5nO3RoaXMubW9ycGhUYXJnZXRzPWEubW9ycGhUYXJnZXRzO3RoaXMubW9ycGhOb3JtYWxzPWEubW9ycGhOb3JtYWxzO3JldHVybiB0aGlzfTtFYi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShXLnByb3RvdHlwZSk7RWIucHJvdG90eXBlLmNvbnN0cnVjdG9yPUViO0ViLnByb3RvdHlwZS5pc0xpbmVEYXNoZWRNYXRlcmlhbD0hMDtFYi5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtXLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLnNjYWxlPWEuc2NhbGU7dGhpcy5kYXNoU2l6ZT1hLmRhc2hTaXplO3RoaXMuZ2FwU2l6ZT1hLmdhcFNpemU7cmV0dXJuIHRoaXN9O3ZhciBNZz1PYmplY3QuZnJlZXplKHtTaGFkb3dNYXRlcmlhbDpmYyxTcHJpdGVNYXRlcmlhbDpoYixSYXdTaGFkZXJNYXRlcmlhbDpnYyxTaGFkZXJNYXRlcmlhbDpGYSxQb2ludHNNYXRlcmlhbDpLYSxNZXNoUGh5c2ljYWxNYXRlcmlhbDpBYixNZXNoU3RhbmRhcmRNYXRlcmlhbDpVYSxcbiAgICBNZXNoUGhvbmdNYXRlcmlhbDpNYSxNZXNoVG9vbk1hdGVyaWFsOkJiLE1lc2hOb3JtYWxNYXRlcmlhbDpDYixNZXNoTGFtYmVydE1hdGVyaWFsOkRiLE1lc2hEZXB0aE1hdGVyaWFsOmViLE1lc2hEaXN0YW5jZU1hdGVyaWFsOmZiLE1lc2hCYXNpY01hdGVyaWFsOkFhLExpbmVEYXNoZWRNYXRlcmlhbDpFYixMaW5lQmFzaWNNYXRlcmlhbDpXLE1hdGVyaWFsOlB9KSxJYj17ZW5hYmxlZDohMSxmaWxlczp7fSxhZGQ6ZnVuY3Rpb24oYSxiKXshMSE9PXRoaXMuZW5hYmxlZCYmKHRoaXMuZmlsZXNbYV09Yil9LGdldDpmdW5jdGlvbihhKXtpZighMSE9PXRoaXMuZW5hYmxlZClyZXR1cm4gdGhpcy5maWxlc1thXX0scmVtb3ZlOmZ1bmN0aW9uKGEpe2RlbGV0ZSB0aGlzLmZpbGVzW2FdfSxjbGVhcjpmdW5jdGlvbigpe3RoaXMuZmlsZXM9e319fSx4YT1uZXcgaGUsY2I9e307T2JqZWN0LmFzc2lnbihOYS5wcm90b3R5cGUse2xvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dm9pZCAwPT09YSYmKGE9XG4gICAgXCJcIik7dm9pZCAwIT09dGhpcy5wYXRoJiYoYT10aGlzLnBhdGgrYSk7YT10aGlzLm1hbmFnZXIucmVzb2x2ZVVSTChhKTt2YXIgZT10aGlzLGY9SWIuZ2V0KGEpO2lmKHZvaWQgMCE9PWYpcmV0dXJuIGUubWFuYWdlci5pdGVtU3RhcnQoYSksc2V0VGltZW91dChmdW5jdGlvbigpe2ImJmIoZik7ZS5tYW5hZ2VyLml0ZW1FbmQoYSl9LDApLGY7aWYodm9pZCAwIT09Y2JbYV0pY2JbYV0ucHVzaCh7b25Mb2FkOmIsb25Qcm9ncmVzczpjLG9uRXJyb3I6ZH0pO2Vsc2V7dmFyIGc9YS5tYXRjaCgvXmRhdGE6KC4qPykoO2Jhc2U2NCk/LCguKikkLyk7aWYoZyl7Yz1nWzFdO3ZhciBoPSEhZ1syXSxnPWdbM10sZz13aW5kb3cuZGVjb2RlVVJJQ29tcG9uZW50KGcpO2gmJihnPXdpbmRvdy5hdG9iKGcpKTt0cnl7dmFyIGs9KHRoaXMucmVzcG9uc2VUeXBlfHxcIlwiKS50b0xvd2VyQ2FzZSgpO3N3aXRjaChrKXtjYXNlIFwiYXJyYXlidWZmZXJcIjpjYXNlIFwiYmxvYlwiOmZvcih2YXIgbT1uZXcgVWludDhBcnJheShnLmxlbmd0aCksXG4gICAgaD0wO2g8Zy5sZW5ndGg7aCsrKW1baF09Zy5jaGFyQ29kZUF0KGgpO3ZhciBsPVwiYmxvYlwiPT09az9uZXcgQmxvYihbbS5idWZmZXJdLHt0eXBlOmN9KTptLmJ1ZmZlcjticmVhaztjYXNlIFwiZG9jdW1lbnRcIjpsPShuZXcgRE9NUGFyc2VyKS5wYXJzZUZyb21TdHJpbmcoZyxjKTticmVhaztjYXNlIFwianNvblwiOmw9SlNPTi5wYXJzZShnKTticmVhaztkZWZhdWx0Omw9Z313aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe2ImJmIobCk7ZS5tYW5hZ2VyLml0ZW1FbmQoYSl9LDApfWNhdGNoKHUpe3dpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7ZCYmZCh1KTtlLm1hbmFnZXIuaXRlbUVuZChhKTtlLm1hbmFnZXIuaXRlbUVycm9yKGEpfSwwKX19ZWxzZXtjYlthXT1bXTtjYlthXS5wdXNoKHtvbkxvYWQ6YixvblByb2dyZXNzOmMsb25FcnJvcjpkfSk7dmFyIG49bmV3IFhNTEh0dHBSZXF1ZXN0O24ub3BlbihcIkdFVFwiLGEsITApO24uYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixmdW5jdGlvbihiKXt2YXIgYz1cbiAgICB0aGlzLnJlc3BvbnNlO0liLmFkZChhLGMpO3ZhciBkPWNiW2FdO2RlbGV0ZSBjYlthXTtpZigyMDA9PT10aGlzLnN0YXR1cyl7Zm9yKHZhciBmPTAsZz1kLmxlbmd0aDtmPGc7ZisrKXt2YXIgaD1kW2ZdO2lmKGgub25Mb2FkKWgub25Mb2FkKGMpfWUubWFuYWdlci5pdGVtRW5kKGEpfWVsc2UgaWYoMD09PXRoaXMuc3RhdHVzKXtjb25zb2xlLndhcm4oXCJUSFJFRS5GaWxlTG9hZGVyOiBIVFRQIFN0YXR1cyAwIHJlY2VpdmVkLlwiKTtmPTA7Zm9yKGc9ZC5sZW5ndGg7ZjxnO2YrKylpZihoPWRbZl0saC5vbkxvYWQpaC5vbkxvYWQoYyk7ZS5tYW5hZ2VyLml0ZW1FbmQoYSl9ZWxzZXtmPTA7Zm9yKGc9ZC5sZW5ndGg7ZjxnO2YrKylpZihoPWRbZl0saC5vbkVycm9yKWgub25FcnJvcihiKTtlLm1hbmFnZXIuaXRlbUVuZChhKTtlLm1hbmFnZXIuaXRlbUVycm9yKGEpfX0sITEpO24uYWRkRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIsZnVuY3Rpb24oYil7Zm9yKHZhciBjPWNiW2FdLGQ9MCxlPVxuICAgIGMubGVuZ3RoO2Q8ZTtkKyspe3ZhciBmPWNbZF07aWYoZi5vblByb2dyZXNzKWYub25Qcm9ncmVzcyhiKX19LCExKTtuLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLGZ1bmN0aW9uKGIpe3ZhciBjPWNiW2FdO2RlbGV0ZSBjYlthXTtmb3IodmFyIGQ9MCxmPWMubGVuZ3RoO2Q8ZjtkKyspe3ZhciBnPWNbZF07aWYoZy5vbkVycm9yKWcub25FcnJvcihiKX1lLm1hbmFnZXIuaXRlbUVuZChhKTtlLm1hbmFnZXIuaXRlbUVycm9yKGEpfSwhMSk7dm9pZCAwIT09dGhpcy5yZXNwb25zZVR5cGUmJihuLnJlc3BvbnNlVHlwZT10aGlzLnJlc3BvbnNlVHlwZSk7dm9pZCAwIT09dGhpcy53aXRoQ3JlZGVudGlhbHMmJihuLndpdGhDcmVkZW50aWFscz10aGlzLndpdGhDcmVkZW50aWFscyk7bi5vdmVycmlkZU1pbWVUeXBlJiZuLm92ZXJyaWRlTWltZVR5cGUodm9pZCAwIT09dGhpcy5taW1lVHlwZT90aGlzLm1pbWVUeXBlOlwidGV4dC9wbGFpblwiKTtmb3IoaCBpbiB0aGlzLnJlcXVlc3RIZWFkZXIpbi5zZXRSZXF1ZXN0SGVhZGVyKGgsXG4gICAgdGhpcy5yZXF1ZXN0SGVhZGVyW2hdKTtuLnNlbmQobnVsbCl9ZS5tYW5hZ2VyLml0ZW1TdGFydChhKTtyZXR1cm4gbn19LHNldFBhdGg6ZnVuY3Rpb24oYSl7dGhpcy5wYXRoPWE7cmV0dXJuIHRoaXN9LHNldFJlc3BvbnNlVHlwZTpmdW5jdGlvbihhKXt0aGlzLnJlc3BvbnNlVHlwZT1hO3JldHVybiB0aGlzfSxzZXRXaXRoQ3JlZGVudGlhbHM6ZnVuY3Rpb24oYSl7dGhpcy53aXRoQ3JlZGVudGlhbHM9YTtyZXR1cm4gdGhpc30sc2V0TWltZVR5cGU6ZnVuY3Rpb24oYSl7dGhpcy5taW1lVHlwZT1hO3JldHVybiB0aGlzfSxzZXRSZXF1ZXN0SGVhZGVyOmZ1bmN0aW9uKGEpe3RoaXMucmVxdWVzdEhlYWRlcj1hO3JldHVybiB0aGlzfX0pO09iamVjdC5hc3NpZ24oZ2YucHJvdG90eXBlLHtsb2FkOmZ1bmN0aW9uKGEsYixjLGQpe2Z1bmN0aW9uIGUoZSl7bS5sb2FkKGFbZV0sZnVuY3Rpb24oYSl7YT1nLl9wYXJzZXIoYSwhMCk7aFtlXT17d2lkdGg6YS53aWR0aCxoZWlnaHQ6YS5oZWlnaHQsXG4gICAgZm9ybWF0OmEuZm9ybWF0LG1pcG1hcHM6YS5taXBtYXBzfTtmKz0xOzY9PT1mJiYoMT09PWEubWlwbWFwQ291bnQmJihrLm1pbkZpbHRlcj0xMDA2KSxrLmZvcm1hdD1hLmZvcm1hdCxrLm5lZWRzVXBkYXRlPSEwLGImJmIoaykpfSxjLGQpfXZhciBmLGc9dGhpcyxoPVtdLGs9bmV3IFNiO2suaW1hZ2U9aDt2YXIgbT1uZXcgTmEodGhpcy5tYW5hZ2VyKTttLnNldFBhdGgodGhpcy5wYXRoKTttLnNldFJlc3BvbnNlVHlwZShcImFycmF5YnVmZmVyXCIpO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBsPWY9MCxuPWEubGVuZ3RoO2w8bjsrK2wpZShsKTtlbHNlIG0ubG9hZChhLGZ1bmN0aW9uKGEpe2E9Zy5fcGFyc2VyKGEsITApO2lmKGEuaXNDdWJlbWFwKWZvcih2YXIgYz1hLm1pcG1hcHMubGVuZ3RoL2EubWlwbWFwQ291bnQsZD0wO2Q8YztkKyspe2hbZF09e21pcG1hcHM6W119O2Zvcih2YXIgZT0wO2U8YS5taXBtYXBDb3VudDtlKyspaFtkXS5taXBtYXBzLnB1c2goYS5taXBtYXBzW2QqXG4gICAgYS5taXBtYXBDb3VudCtlXSksaFtkXS5mb3JtYXQ9YS5mb3JtYXQsaFtkXS53aWR0aD1hLndpZHRoLGhbZF0uaGVpZ2h0PWEuaGVpZ2h0fWVsc2Ugay5pbWFnZS53aWR0aD1hLndpZHRoLGsuaW1hZ2UuaGVpZ2h0PWEuaGVpZ2h0LGsubWlwbWFwcz1hLm1pcG1hcHM7MT09PWEubWlwbWFwQ291bnQmJihrLm1pbkZpbHRlcj0xMDA2KTtrLmZvcm1hdD1hLmZvcm1hdDtrLm5lZWRzVXBkYXRlPSEwO2ImJmIoayl9LGMsZCk7cmV0dXJuIGt9LHNldFBhdGg6ZnVuY3Rpb24oYSl7dGhpcy5wYXRoPWE7cmV0dXJuIHRoaXN9fSk7T2JqZWN0LmFzc2lnbihpZS5wcm90b3R5cGUse2xvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcyxmPW5ldyBsYixnPW5ldyBOYSh0aGlzLm1hbmFnZXIpO2cuc2V0UmVzcG9uc2VUeXBlKFwiYXJyYXlidWZmZXJcIik7Zy5sb2FkKGEsZnVuY3Rpb24oYSl7aWYoYT1lLl9wYXJzZXIoYSkpdm9pZCAwIT09YS5pbWFnZT9mLmltYWdlPWEuaW1hZ2U6dm9pZCAwIT09XG4gICAgYS5kYXRhJiYoZi5pbWFnZS53aWR0aD1hLndpZHRoLGYuaW1hZ2UuaGVpZ2h0PWEuaGVpZ2h0LGYuaW1hZ2UuZGF0YT1hLmRhdGEpLGYud3JhcFM9dm9pZCAwIT09YS53cmFwUz9hLndyYXBTOjEwMDEsZi53cmFwVD12b2lkIDAhPT1hLndyYXBUP2Eud3JhcFQ6MTAwMSxmLm1hZ0ZpbHRlcj12b2lkIDAhPT1hLm1hZ0ZpbHRlcj9hLm1hZ0ZpbHRlcjoxMDA2LGYubWluRmlsdGVyPXZvaWQgMCE9PWEubWluRmlsdGVyP2EubWluRmlsdGVyOjEwMDgsZi5hbmlzb3Ryb3B5PXZvaWQgMCE9PWEuYW5pc290cm9weT9hLmFuaXNvdHJvcHk6MSx2b2lkIDAhPT1hLmZvcm1hdCYmKGYuZm9ybWF0PWEuZm9ybWF0KSx2b2lkIDAhPT1hLnR5cGUmJihmLnR5cGU9YS50eXBlKSx2b2lkIDAhPT1hLm1pcG1hcHMmJihmLm1pcG1hcHM9YS5taXBtYXBzKSwxPT09YS5taXBtYXBDb3VudCYmKGYubWluRmlsdGVyPTEwMDYpLGYubmVlZHNVcGRhdGU9ITAsYiYmYihmLGEpfSxjLGQpO3JldHVybiBmfX0pO09iamVjdC5hc3NpZ24oYWQucHJvdG90eXBlLFxuICAgIHtjcm9zc09yaWdpbjpcIkFub255bW91c1wiLGxvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dm9pZCAwPT09YSYmKGE9XCJcIik7dm9pZCAwIT09dGhpcy5wYXRoJiYoYT10aGlzLnBhdGgrYSk7YT10aGlzLm1hbmFnZXIucmVzb2x2ZVVSTChhKTt2YXIgZT10aGlzLGY9SWIuZ2V0KGEpO2lmKHZvaWQgMCE9PWYpcmV0dXJuIGUubWFuYWdlci5pdGVtU3RhcnQoYSksc2V0VGltZW91dChmdW5jdGlvbigpe2ImJmIoZik7ZS5tYW5hZ2VyLml0ZW1FbmQoYSl9LDApLGY7Yz1kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsXCJpbWdcIik7Yy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLGZ1bmN0aW9uKCl7SWIuYWRkKGEsdGhpcyk7YiYmYih0aGlzKTtlLm1hbmFnZXIuaXRlbUVuZChhKX0sITEpO2MuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsZnVuY3Rpb24oYil7ZCYmZChiKTtlLm1hbmFnZXIuaXRlbUVuZChhKTtlLm1hbmFnZXIuaXRlbUVycm9yKGEpfSxcbiAgICAhMSk7XCJkYXRhOlwiIT09YS5zdWJzdHIoMCw1KSYmdm9pZCAwIT09dGhpcy5jcm9zc09yaWdpbiYmKGMuY3Jvc3NPcmlnaW49dGhpcy5jcm9zc09yaWdpbik7ZS5tYW5hZ2VyLml0ZW1TdGFydChhKTtjLnNyYz1hO3JldHVybiBjfSxzZXRDcm9zc09yaWdpbjpmdW5jdGlvbihhKXt0aGlzLmNyb3NzT3JpZ2luPWE7cmV0dXJuIHRoaXN9LHNldFBhdGg6ZnVuY3Rpb24oYSl7dGhpcy5wYXRoPWE7cmV0dXJuIHRoaXN9fSk7T2JqZWN0LmFzc2lnbihqZS5wcm90b3R5cGUse2Nyb3NzT3JpZ2luOlwiQW5vbnltb3VzXCIsbG9hZDpmdW5jdGlvbihhLGIsYyxkKXtmdW5jdGlvbiBlKGMpe2cubG9hZChhW2NdLGZ1bmN0aW9uKGEpe2YuaW1hZ2VzW2NdPWE7aCsrOzY9PT1oJiYoZi5uZWVkc1VwZGF0ZT0hMCxiJiZiKGYpKX0sdm9pZCAwLGQpfXZhciBmPW5ldyBkYixnPW5ldyBhZCh0aGlzLm1hbmFnZXIpO2cuc2V0Q3Jvc3NPcmlnaW4odGhpcy5jcm9zc09yaWdpbik7Zy5zZXRQYXRoKHRoaXMucGF0aCk7XG4gICAgdmFyIGg9MDtmb3IoYz0wO2M8YS5sZW5ndGg7KytjKWUoYyk7cmV0dXJuIGZ9LHNldENyb3NzT3JpZ2luOmZ1bmN0aW9uKGEpe3RoaXMuY3Jvc3NPcmlnaW49YTtyZXR1cm4gdGhpc30sc2V0UGF0aDpmdW5jdGlvbihhKXt0aGlzLnBhdGg9YTtyZXR1cm4gdGhpc319KTtPYmplY3QuYXNzaWduKEFkLnByb3RvdHlwZSx7Y3Jvc3NPcmlnaW46XCJBbm9ueW1vdXNcIixsb2FkOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPW5ldyBVLGY9bmV3IGFkKHRoaXMubWFuYWdlcik7Zi5zZXRDcm9zc09yaWdpbih0aGlzLmNyb3NzT3JpZ2luKTtmLnNldFBhdGgodGhpcy5wYXRoKTtmLmxvYWQoYSxmdW5jdGlvbihjKXtlLmltYWdlPWM7Yz0wPGEuc2VhcmNoKC9cXC4oanBnfGpwZWcpJC8pfHwwPT09YS5zZWFyY2goL15kYXRhXFw6aW1hZ2VcXC9qcGVnLyk7ZS5mb3JtYXQ9Yz8xMDIyOjEwMjM7ZS5uZWVkc1VwZGF0ZT0hMDt2b2lkIDAhPT1iJiZiKGUpfSxjLGQpO3JldHVybiBlfSxzZXRDcm9zc09yaWdpbjpmdW5jdGlvbihhKXt0aGlzLmNyb3NzT3JpZ2luPVxuICAgIGE7cmV0dXJuIHRoaXN9LHNldFBhdGg6ZnVuY3Rpb24oYSl7dGhpcy5wYXRoPWE7cmV0dXJuIHRoaXN9fSk7T2JqZWN0LmFzc2lnbihDLnByb3RvdHlwZSx7Z2V0UG9pbnQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5DdXJ2ZTogLmdldFBvaW50KCkgbm90IGltcGxlbWVudGVkLlwiKTtyZXR1cm4gbnVsbH0sZ2V0UG9pbnRBdDpmdW5jdGlvbihhLGIpe2E9dGhpcy5nZXRVdG9UbWFwcGluZyhhKTtyZXR1cm4gdGhpcy5nZXRQb2ludChhLGIpfSxnZXRQb2ludHM6ZnVuY3Rpb24oYSl7dm9pZCAwPT09YSYmKGE9NSk7Zm9yKHZhciBiPVtdLGM9MDtjPD1hO2MrKyliLnB1c2godGhpcy5nZXRQb2ludChjL2EpKTtyZXR1cm4gYn0sZ2V0U3BhY2VkUG9pbnRzOmZ1bmN0aW9uKGEpe3ZvaWQgMD09PWEmJihhPTUpO2Zvcih2YXIgYj1bXSxjPTA7Yzw9YTtjKyspYi5wdXNoKHRoaXMuZ2V0UG9pbnRBdChjL2EpKTtyZXR1cm4gYn0sZ2V0TGVuZ3RoOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5nZXRMZW5ndGhzKCk7XG4gICAgcmV0dXJuIGFbYS5sZW5ndGgtMV19LGdldExlbmd0aHM6ZnVuY3Rpb24oYSl7dm9pZCAwPT09YSYmKGE9dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMpO2lmKHRoaXMuY2FjaGVBcmNMZW5ndGhzJiZ0aGlzLmNhY2hlQXJjTGVuZ3Rocy5sZW5ndGg9PT1hKzEmJiF0aGlzLm5lZWRzVXBkYXRlKXJldHVybiB0aGlzLmNhY2hlQXJjTGVuZ3Roczt0aGlzLm5lZWRzVXBkYXRlPSExO3ZhciBiPVtdLGM9dGhpcy5nZXRQb2ludCgwKSxkLGU9MDtiLnB1c2goMCk7Zm9yKGQ9MTtkPD1hO2QrKyl7dmFyIGY9dGhpcy5nZXRQb2ludChkL2EpO2UrPWYuZGlzdGFuY2VUbyhjKTtiLnB1c2goZSk7Yz1mfXJldHVybiB0aGlzLmNhY2hlQXJjTGVuZ3Rocz1ifSx1cGRhdGVBcmNMZW5ndGhzOmZ1bmN0aW9uKCl7dGhpcy5uZWVkc1VwZGF0ZT0hMDt0aGlzLmdldExlbmd0aHMoKX0sZ2V0VXRvVG1hcHBpbmc6ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmdldExlbmd0aHMoKSxkPWMubGVuZ3RoO2I9Yj9iOmEqXG4gICAgY1tkLTFdO2Zvcih2YXIgZT0wLGY9ZC0xLGc7ZTw9ZjspaWYoYT1NYXRoLmZsb29yKGUrKGYtZSkvMiksZz1jW2FdLWIsMD5nKWU9YSsxO2Vsc2UgaWYoMDxnKWY9YS0xO2Vsc2V7Zj1hO2JyZWFrfWE9ZjtpZihjW2FdPT09YilyZXR1cm4gYS8oZC0xKTtlPWNbYV07cmV0dXJuKGErKGItZSkvKGNbYSsxXS1lKSkvKGQtMSl9LGdldFRhbmdlbnQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS0xRS00O2ErPTFFLTQ7MD5iJiYoYj0wKTsxPGEmJihhPTEpO2I9dGhpcy5nZXRQb2ludChiKTtyZXR1cm4gdGhpcy5nZXRQb2ludChhKS5jbG9uZSgpLnN1YihiKS5ub3JtYWxpemUoKX0sZ2V0VGFuZ2VudEF0OmZ1bmN0aW9uKGEpe2E9dGhpcy5nZXRVdG9UbWFwcGluZyhhKTtyZXR1cm4gdGhpcy5nZXRUYW5nZW50KGEpfSxjb21wdXRlRnJlbmV0RnJhbWVzOmZ1bmN0aW9uKGEsYil7dmFyIGM9bmV3IHAsZD1bXSxlPVtdLGY9W10sZz1uZXcgcCxoPW5ldyBPLGs7Zm9yKGs9MDtrPD1hO2srKyl7dmFyIG09XG4gICAgay9hO2Rba109dGhpcy5nZXRUYW5nZW50QXQobSk7ZFtrXS5ub3JtYWxpemUoKX1lWzBdPW5ldyBwO2ZbMF09bmV3IHA7az1OdW1iZXIuTUFYX1ZBTFVFO209TWF0aC5hYnMoZFswXS54KTt2YXIgbD1NYXRoLmFicyhkWzBdLnkpLG49TWF0aC5hYnMoZFswXS56KTttPD1rJiYoaz1tLGMuc2V0KDEsMCwwKSk7bDw9ayYmKGs9bCxjLnNldCgwLDEsMCkpO248PWsmJmMuc2V0KDAsMCwxKTtnLmNyb3NzVmVjdG9ycyhkWzBdLGMpLm5vcm1hbGl6ZSgpO2VbMF0uY3Jvc3NWZWN0b3JzKGRbMF0sZyk7ZlswXS5jcm9zc1ZlY3RvcnMoZFswXSxlWzBdKTtmb3Ioaz0xO2s8PWE7aysrKWVba109ZVtrLTFdLmNsb25lKCksZltrXT1mW2stMV0uY2xvbmUoKSxnLmNyb3NzVmVjdG9ycyhkW2stMV0sZFtrXSksZy5sZW5ndGgoKT5OdW1iZXIuRVBTSUxPTiYmKGcubm9ybWFsaXplKCksYz1NYXRoLmFjb3MoUS5jbGFtcChkW2stMV0uZG90KGRba10pLC0xLDEpKSxlW2tdLmFwcGx5TWF0cml4NChoLm1ha2VSb3RhdGlvbkF4aXMoZyxcbiAgICBjKSkpLGZba10uY3Jvc3NWZWN0b3JzKGRba10sZVtrXSk7aWYoITA9PT1iKWZvcihjPU1hdGguYWNvcyhRLmNsYW1wKGVbMF0uZG90KGVbYV0pLC0xLDEpKSxjLz1hLDA8ZFswXS5kb3QoZy5jcm9zc1ZlY3RvcnMoZVswXSxlW2FdKSkmJihjPS1jKSxrPTE7azw9YTtrKyspZVtrXS5hcHBseU1hdHJpeDQoaC5tYWtlUm90YXRpb25BeGlzKGRba10sYyprKSksZltrXS5jcm9zc1ZlY3RvcnMoZFtrXSxlW2tdKTtyZXR1cm57dGFuZ2VudHM6ZCxub3JtYWxzOmUsYmlub3JtYWxzOmZ9fSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX0sY29weTpmdW5jdGlvbihhKXt0aGlzLmFyY0xlbmd0aERpdmlzaW9ucz1hLmFyY0xlbmd0aERpdmlzaW9ucztyZXR1cm4gdGhpc30sdG9KU09OOmZ1bmN0aW9uKCl7dmFyIGE9e21ldGFkYXRhOnt2ZXJzaW9uOjQuNSx0eXBlOlwiQ3VydmVcIixnZW5lcmF0b3I6XCJDdXJ2ZS50b0pTT05cIn19O2EuYXJjTGVuZ3RoRGl2aXNpb25zPVxuICAgIHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zO2EudHlwZT10aGlzLnR5cGU7cmV0dXJuIGF9LGZyb21KU09OOmZ1bmN0aW9uKGEpe3RoaXMuYXJjTGVuZ3RoRGl2aXNpb25zPWEuYXJjTGVuZ3RoRGl2aXNpb25zO3JldHVybiB0aGlzfX0pO0JhLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEMucHJvdG90eXBlKTtCYS5wcm90b3R5cGUuY29uc3RydWN0b3I9QmE7QmEucHJvdG90eXBlLmlzRWxsaXBzZUN1cnZlPSEwO0JhLnByb3RvdHlwZS5nZXRQb2ludD1mdW5jdGlvbihhLGIpe2I9Ynx8bmV3IEQ7Zm9yKHZhciBjPTIqTWF0aC5QSSxkPXRoaXMuYUVuZEFuZ2xlLXRoaXMuYVN0YXJ0QW5nbGUsZT1NYXRoLmFicyhkKTxOdW1iZXIuRVBTSUxPTjswPmQ7KWQrPWM7Zm9yKDtkPmM7KWQtPWM7ZDxOdW1iZXIuRVBTSUxPTiYmKGQ9ZT8wOmMpOyEwIT09dGhpcy5hQ2xvY2t3aXNlfHxlfHwoZD1kPT09Yz8tYzpkLWMpO2M9dGhpcy5hU3RhcnRBbmdsZSthKmQ7YT10aGlzLmFYK3RoaXMueFJhZGl1cypcbiAgICBNYXRoLmNvcyhjKTt2YXIgZj10aGlzLmFZK3RoaXMueVJhZGl1cypNYXRoLnNpbihjKTswIT09dGhpcy5hUm90YXRpb24mJihjPU1hdGguY29zKHRoaXMuYVJvdGF0aW9uKSxkPU1hdGguc2luKHRoaXMuYVJvdGF0aW9uKSxlPWEtdGhpcy5hWCxmLT10aGlzLmFZLGE9ZSpjLWYqZCt0aGlzLmFYLGY9ZSpkK2YqYyt0aGlzLmFZKTtyZXR1cm4gYi5zZXQoYSxmKX07QmEucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7Qy5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5hWD1hLmFYO3RoaXMuYVk9YS5hWTt0aGlzLnhSYWRpdXM9YS54UmFkaXVzO3RoaXMueVJhZGl1cz1hLnlSYWRpdXM7dGhpcy5hU3RhcnRBbmdsZT1hLmFTdGFydEFuZ2xlO3RoaXMuYUVuZEFuZ2xlPWEuYUVuZEFuZ2xlO3RoaXMuYUNsb2Nrd2lzZT1hLmFDbG9ja3dpc2U7dGhpcy5hUm90YXRpb249YS5hUm90YXRpb247cmV0dXJuIHRoaXN9O0JhLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXt2YXIgYT1cbiAgICBDLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTthLmFYPXRoaXMuYVg7YS5hWT10aGlzLmFZO2EueFJhZGl1cz10aGlzLnhSYWRpdXM7YS55UmFkaXVzPXRoaXMueVJhZGl1czthLmFTdGFydEFuZ2xlPXRoaXMuYVN0YXJ0QW5nbGU7YS5hRW5kQW5nbGU9dGhpcy5hRW5kQW5nbGU7YS5hQ2xvY2t3aXNlPXRoaXMuYUNsb2Nrd2lzZTthLmFSb3RhdGlvbj10aGlzLmFSb3RhdGlvbjtyZXR1cm4gYX07QmEucHJvdG90eXBlLmZyb21KU09OPWZ1bmN0aW9uKGEpe0MucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcyxhKTt0aGlzLmFYPWEuYVg7dGhpcy5hWT1hLmFZO3RoaXMueFJhZGl1cz1hLnhSYWRpdXM7dGhpcy55UmFkaXVzPWEueVJhZGl1czt0aGlzLmFTdGFydEFuZ2xlPWEuYVN0YXJ0QW5nbGU7dGhpcy5hRW5kQW5nbGU9YS5hRW5kQW5nbGU7dGhpcy5hQ2xvY2t3aXNlPWEuYUNsb2Nrd2lzZTt0aGlzLmFSb3RhdGlvbj1hLmFSb3RhdGlvbjtyZXR1cm4gdGhpc307aGMucHJvdG90eXBlPVxuICAgIE9iamVjdC5jcmVhdGUoQmEucHJvdG90eXBlKTtoYy5wcm90b3R5cGUuY29uc3RydWN0b3I9aGM7aGMucHJvdG90eXBlLmlzQXJjQ3VydmU9ITA7dmFyIFRkPW5ldyBwLEVlPW5ldyBrZSxGZT1uZXcga2UsR2U9bmV3IGtlO2NhLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEMucHJvdG90eXBlKTtjYS5wcm90b3R5cGUuY29uc3RydWN0b3I9Y2E7Y2EucHJvdG90eXBlLmlzQ2F0bXVsbFJvbUN1cnZlMz0hMDtjYS5wcm90b3R5cGUuZ2V0UG9pbnQ9ZnVuY3Rpb24oYSxiKXtiPWJ8fG5ldyBwO3ZhciBjPXRoaXMucG9pbnRzLGQ9Yy5sZW5ndGg7YSo9ZC0odGhpcy5jbG9zZWQ/MDoxKTt2YXIgZT1NYXRoLmZsb29yKGEpO2EtPWU7dGhpcy5jbG9zZWQ/ZSs9MDxlPzA6KE1hdGguZmxvb3IoTWF0aC5hYnMoZSkvYy5sZW5ndGgpKzEpKmMubGVuZ3RoOjA9PT1hJiZlPT09ZC0xJiYoZT1kLTIsYT0xKTtpZih0aGlzLmNsb3NlZHx8MDxlKXZhciBmPWNbKGUtMSklZF07ZWxzZSBUZC5zdWJWZWN0b3JzKGNbMF0sXG4gICAgY1sxXSkuYWRkKGNbMF0pLGY9VGQ7dmFyIGc9Y1tlJWRdO3ZhciBoPWNbKGUrMSklZF07dGhpcy5jbG9zZWR8fGUrMjxkP2M9Y1soZSsyKSVkXTooVGQuc3ViVmVjdG9ycyhjW2QtMV0sY1tkLTJdKS5hZGQoY1tkLTFdKSxjPVRkKTtpZihcImNlbnRyaXBldGFsXCI9PT10aGlzLmN1cnZlVHlwZXx8XCJjaG9yZGFsXCI9PT10aGlzLmN1cnZlVHlwZSl7dmFyIGs9XCJjaG9yZGFsXCI9PT10aGlzLmN1cnZlVHlwZT8uNTouMjUsZD1NYXRoLnBvdyhmLmRpc3RhbmNlVG9TcXVhcmVkKGcpLGspLGU9TWF0aC5wb3coZy5kaXN0YW5jZVRvU3F1YXJlZChoKSxrKSxrPU1hdGgucG93KGguZGlzdGFuY2VUb1NxdWFyZWQoYyksayk7MUUtND5lJiYoZT0xKTsxRS00PmQmJihkPWUpOzFFLTQ+ayYmKGs9ZSk7RWUuaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tKGYueCxnLngsaC54LGMueCxkLGUsayk7RmUuaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tKGYueSxnLnksaC55LGMueSxkLGUsayk7R2UuaW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tKGYueixcbiAgICBnLnosaC56LGMueixkLGUsayl9ZWxzZVwiY2F0bXVsbHJvbVwiPT09dGhpcy5jdXJ2ZVR5cGUmJihFZS5pbml0Q2F0bXVsbFJvbShmLngsZy54LGgueCxjLngsdGhpcy50ZW5zaW9uKSxGZS5pbml0Q2F0bXVsbFJvbShmLnksZy55LGgueSxjLnksdGhpcy50ZW5zaW9uKSxHZS5pbml0Q2F0bXVsbFJvbShmLnosZy56LGgueixjLnosdGhpcy50ZW5zaW9uKSk7Yi5zZXQoRWUuY2FsYyhhKSxGZS5jYWxjKGEpLEdlLmNhbGMoYSkpO3JldHVybiBifTtjYS5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtDLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLnBvaW50cz1bXTtmb3IodmFyIGI9MCxjPWEucG9pbnRzLmxlbmd0aDtiPGM7YisrKXRoaXMucG9pbnRzLnB1c2goYS5wb2ludHNbYl0uY2xvbmUoKSk7dGhpcy5jbG9zZWQ9YS5jbG9zZWQ7dGhpcy5jdXJ2ZVR5cGU9YS5jdXJ2ZVR5cGU7dGhpcy50ZW5zaW9uPWEudGVuc2lvbjtyZXR1cm4gdGhpc307Y2EucHJvdG90eXBlLnRvSlNPTj1cbiAgICBmdW5jdGlvbigpe3ZhciBhPUMucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO2EucG9pbnRzPVtdO2Zvcih2YXIgYj0wLGM9dGhpcy5wb2ludHMubGVuZ3RoO2I8YztiKyspYS5wb2ludHMucHVzaCh0aGlzLnBvaW50c1tiXS50b0FycmF5KCkpO2EuY2xvc2VkPXRoaXMuY2xvc2VkO2EuY3VydmVUeXBlPXRoaXMuY3VydmVUeXBlO2EudGVuc2lvbj10aGlzLnRlbnNpb247cmV0dXJuIGF9O2NhLnByb3RvdHlwZS5mcm9tSlNPTj1mdW5jdGlvbihhKXtDLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsYSk7dGhpcy5wb2ludHM9W107Zm9yKHZhciBiPTAsYz1hLnBvaW50cy5sZW5ndGg7YjxjO2IrKyl7dmFyIGQ9YS5wb2ludHNbYl07dGhpcy5wb2ludHMucHVzaCgobmV3IHApLmZyb21BcnJheShkKSl9dGhpcy5jbG9zZWQ9YS5jbG9zZWQ7dGhpcy5jdXJ2ZVR5cGU9YS5jdXJ2ZVR5cGU7dGhpcy50ZW5zaW9uPWEudGVuc2lvbjtyZXR1cm4gdGhpc307T2EucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoQy5wcm90b3R5cGUpO1xuICAgIE9hLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1PYTtPYS5wcm90b3R5cGUuaXNDdWJpY0JlemllckN1cnZlPSEwO09hLnByb3RvdHlwZS5nZXRQb2ludD1mdW5jdGlvbihhLGIpe2I9Ynx8bmV3IEQ7dmFyIGM9dGhpcy52MCxkPXRoaXMudjEsZT10aGlzLnYyLGY9dGhpcy52MztiLnNldChjZChhLGMueCxkLngsZS54LGYueCksY2QoYSxjLnksZC55LGUueSxmLnkpKTtyZXR1cm4gYn07T2EucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7Qy5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy52MC5jb3B5KGEudjApO3RoaXMudjEuY29weShhLnYxKTt0aGlzLnYyLmNvcHkoYS52Mik7dGhpcy52My5jb3B5KGEudjMpO3JldHVybiB0aGlzfTtPYS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7dmFyIGE9Qy5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7YS52MD10aGlzLnYwLnRvQXJyYXkoKTthLnYxPXRoaXMudjEudG9BcnJheSgpO2EudjI9dGhpcy52Mi50b0FycmF5KCk7YS52Mz1cbiAgICB0aGlzLnYzLnRvQXJyYXkoKTtyZXR1cm4gYX07T2EucHJvdG90eXBlLmZyb21KU09OPWZ1bmN0aW9uKGEpe0MucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcyxhKTt0aGlzLnYwLmZyb21BcnJheShhLnYwKTt0aGlzLnYxLmZyb21BcnJheShhLnYxKTt0aGlzLnYyLmZyb21BcnJheShhLnYyKTt0aGlzLnYzLmZyb21BcnJheShhLnYzKTtyZXR1cm4gdGhpc307VmEucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoQy5wcm90b3R5cGUpO1ZhLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1WYTtWYS5wcm90b3R5cGUuaXNDdWJpY0JlemllckN1cnZlMz0hMDtWYS5wcm90b3R5cGUuZ2V0UG9pbnQ9ZnVuY3Rpb24oYSxiKXtiPWJ8fG5ldyBwO3ZhciBjPXRoaXMudjAsZD10aGlzLnYxLGU9dGhpcy52MixmPXRoaXMudjM7Yi5zZXQoY2QoYSxjLngsZC54LGUueCxmLngpLGNkKGEsYy55LGQueSxlLnksZi55KSxjZChhLGMueixkLnosZS56LGYueikpO3JldHVybiBifTtWYS5wcm90b3R5cGUuY29weT1cbiAgICBmdW5jdGlvbihhKXtDLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLnYwLmNvcHkoYS52MCk7dGhpcy52MS5jb3B5KGEudjEpO3RoaXMudjIuY29weShhLnYyKTt0aGlzLnYzLmNvcHkoYS52Myk7cmV0dXJuIHRoaXN9O1ZhLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXt2YXIgYT1DLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTthLnYwPXRoaXMudjAudG9BcnJheSgpO2EudjE9dGhpcy52MS50b0FycmF5KCk7YS52Mj10aGlzLnYyLnRvQXJyYXkoKTthLnYzPXRoaXMudjMudG9BcnJheSgpO3JldHVybiBhfTtWYS5wcm90b3R5cGUuZnJvbUpTT049ZnVuY3Rpb24oYSl7Qy5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLGEpO3RoaXMudjAuZnJvbUFycmF5KGEudjApO3RoaXMudjEuZnJvbUFycmF5KGEudjEpO3RoaXMudjIuZnJvbUFycmF5KGEudjIpO3RoaXMudjMuZnJvbUFycmF5KGEudjMpO3JldHVybiB0aGlzfTt5YS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShDLnByb3RvdHlwZSk7XG4gICAgeWEucHJvdG90eXBlLmNvbnN0cnVjdG9yPXlhO3lhLnByb3RvdHlwZS5pc0xpbmVDdXJ2ZT0hMDt5YS5wcm90b3R5cGUuZ2V0UG9pbnQ9ZnVuY3Rpb24oYSxiKXtiPWJ8fG5ldyBEOzE9PT1hP2IuY29weSh0aGlzLnYyKTooYi5jb3B5KHRoaXMudjIpLnN1Yih0aGlzLnYxKSxiLm11bHRpcGx5U2NhbGFyKGEpLmFkZCh0aGlzLnYxKSk7cmV0dXJuIGJ9O3lhLnByb3RvdHlwZS5nZXRQb2ludEF0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuZ2V0UG9pbnQoYSxiKX07eWEucHJvdG90eXBlLmdldFRhbmdlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52Mi5jbG9uZSgpLnN1Yih0aGlzLnYxKS5ub3JtYWxpemUoKX07eWEucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7Qy5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy52MS5jb3B5KGEudjEpO3RoaXMudjIuY29weShhLnYyKTtyZXR1cm4gdGhpc307eWEucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3ZhciBhPUMucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO1xuICAgIGEudjE9dGhpcy52MS50b0FycmF5KCk7YS52Mj10aGlzLnYyLnRvQXJyYXkoKTtyZXR1cm4gYX07eWEucHJvdG90eXBlLmZyb21KU09OPWZ1bmN0aW9uKGEpe0MucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcyxhKTt0aGlzLnYxLmZyb21BcnJheShhLnYxKTt0aGlzLnYyLmZyb21BcnJheShhLnYyKTtyZXR1cm4gdGhpc307UGEucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoQy5wcm90b3R5cGUpO1BhLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1QYTtQYS5wcm90b3R5cGUuaXNMaW5lQ3VydmUzPSEwO1BhLnByb3RvdHlwZS5nZXRQb2ludD1mdW5jdGlvbihhLGIpe2I9Ynx8bmV3IHA7MT09PWE/Yi5jb3B5KHRoaXMudjIpOihiLmNvcHkodGhpcy52Mikuc3ViKHRoaXMudjEpLGIubXVsdGlwbHlTY2FsYXIoYSkuYWRkKHRoaXMudjEpKTtyZXR1cm4gYn07UGEucHJvdG90eXBlLmdldFBvaW50QXQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5nZXRQb2ludChhLGIpfTtQYS5wcm90b3R5cGUuY29weT1cbiAgICBmdW5jdGlvbihhKXtDLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLnYxLmNvcHkoYS52MSk7dGhpcy52Mi5jb3B5KGEudjIpO3JldHVybiB0aGlzfTtQYS5wcm90b3R5cGUudG9KU09OPWZ1bmN0aW9uKCl7dmFyIGE9Qy5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyk7YS52MT10aGlzLnYxLnRvQXJyYXkoKTthLnYyPXRoaXMudjIudG9BcnJheSgpO3JldHVybiBhfTtQYS5wcm90b3R5cGUuZnJvbUpTT049ZnVuY3Rpb24oYSl7Qy5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLGEpO3RoaXMudjEuZnJvbUFycmF5KGEudjEpO3RoaXMudjIuZnJvbUFycmF5KGEudjIpO3JldHVybiB0aGlzfTtRYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShDLnByb3RvdHlwZSk7UWEucHJvdG90eXBlLmNvbnN0cnVjdG9yPVFhO1FhLnByb3RvdHlwZS5pc1F1YWRyYXRpY0JlemllckN1cnZlPSEwO1FhLnByb3RvdHlwZS5nZXRQb2ludD1mdW5jdGlvbihhLGIpe2I9Ynx8bmV3IEQ7dmFyIGM9XG4gICAgdGhpcy52MCxkPXRoaXMudjEsZT10aGlzLnYyO2Iuc2V0KGJkKGEsYy54LGQueCxlLngpLGJkKGEsYy55LGQueSxlLnkpKTtyZXR1cm4gYn07UWEucHJvdG90eXBlLmNvcHk9ZnVuY3Rpb24oYSl7Qy5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy52MC5jb3B5KGEudjApO3RoaXMudjEuY29weShhLnYxKTt0aGlzLnYyLmNvcHkoYS52Mik7cmV0dXJuIHRoaXN9O1FhLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXt2YXIgYT1DLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTthLnYwPXRoaXMudjAudG9BcnJheSgpO2EudjE9dGhpcy52MS50b0FycmF5KCk7YS52Mj10aGlzLnYyLnRvQXJyYXkoKTtyZXR1cm4gYX07UWEucHJvdG90eXBlLmZyb21KU09OPWZ1bmN0aW9uKGEpe0MucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcyxhKTt0aGlzLnYwLmZyb21BcnJheShhLnYwKTt0aGlzLnYxLmZyb21BcnJheShhLnYxKTt0aGlzLnYyLmZyb21BcnJheShhLnYyKTtyZXR1cm4gdGhpc307XG4gICAgV2EucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoQy5wcm90b3R5cGUpO1dhLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1XYTtXYS5wcm90b3R5cGUuaXNRdWFkcmF0aWNCZXppZXJDdXJ2ZTM9ITA7V2EucHJvdG90eXBlLmdldFBvaW50PWZ1bmN0aW9uKGEsYil7Yj1ifHxuZXcgcDt2YXIgYz10aGlzLnYwLGQ9dGhpcy52MSxlPXRoaXMudjI7Yi5zZXQoYmQoYSxjLngsZC54LGUueCksYmQoYSxjLnksZC55LGUueSksYmQoYSxjLnosZC56LGUueikpO3JldHVybiBifTtXYS5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtDLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLnYwLmNvcHkoYS52MCk7dGhpcy52MS5jb3B5KGEudjEpO3RoaXMudjIuY29weShhLnYyKTtyZXR1cm4gdGhpc307V2EucHJvdG90eXBlLnRvSlNPTj1mdW5jdGlvbigpe3ZhciBhPUMucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO2EudjA9dGhpcy52MC50b0FycmF5KCk7YS52MT10aGlzLnYxLnRvQXJyYXkoKTtcbiAgICBhLnYyPXRoaXMudjIudG9BcnJheSgpO3JldHVybiBhfTtXYS5wcm90b3R5cGUuZnJvbUpTT049ZnVuY3Rpb24oYSl7Qy5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLGEpO3RoaXMudjAuZnJvbUFycmF5KGEudjApO3RoaXMudjEuZnJvbUFycmF5KGEudjEpO3RoaXMudjIuZnJvbUFycmF5KGEudjIpO3JldHVybiB0aGlzfTtSYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShDLnByb3RvdHlwZSk7UmEucHJvdG90eXBlLmNvbnN0cnVjdG9yPVJhO1JhLnByb3RvdHlwZS5pc1NwbGluZUN1cnZlPSEwO1JhLnByb3RvdHlwZS5nZXRQb2ludD1mdW5jdGlvbihhLGIpe2I9Ynx8bmV3IEQ7dmFyIGM9dGhpcy5wb2ludHMsZD0oYy5sZW5ndGgtMSkqYTthPU1hdGguZmxvb3IoZCk7dmFyIGQ9ZC1hLGU9Y1swPT09YT9hOmEtMV0sZj1jW2FdLGc9Y1thPmMubGVuZ3RoLTI/Yy5sZW5ndGgtMTphKzFdLGM9Y1thPmMubGVuZ3RoLTM/Yy5sZW5ndGgtMTphKzJdO2Iuc2V0KGhmKGQsZS54LGYueCxcbiAgICBnLngsYy54KSxoZihkLGUueSxmLnksZy55LGMueSkpO3JldHVybiBifTtSYS5wcm90b3R5cGUuY29weT1mdW5jdGlvbihhKXtDLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLnBvaW50cz1bXTtmb3IodmFyIGI9MCxjPWEucG9pbnRzLmxlbmd0aDtiPGM7YisrKXRoaXMucG9pbnRzLnB1c2goYS5wb2ludHNbYl0uY2xvbmUoKSk7cmV0dXJuIHRoaXN9O1JhLnByb3RvdHlwZS50b0pTT049ZnVuY3Rpb24oKXt2YXIgYT1DLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTthLnBvaW50cz1bXTtmb3IodmFyIGI9MCxjPXRoaXMucG9pbnRzLmxlbmd0aDtiPGM7YisrKWEucG9pbnRzLnB1c2godGhpcy5wb2ludHNbYl0udG9BcnJheSgpKTtyZXR1cm4gYX07UmEucHJvdG90eXBlLmZyb21KU09OPWZ1bmN0aW9uKGEpe0MucHJvdG90eXBlLmZyb21KU09OLmNhbGwodGhpcyxhKTt0aGlzLnBvaW50cz1bXTtmb3IodmFyIGI9MCxjPWEucG9pbnRzLmxlbmd0aDtiPGM7YisrKXt2YXIgZD1cbiAgICBhLnBvaW50c1tiXTt0aGlzLnBvaW50cy5wdXNoKChuZXcgRCkuZnJvbUFycmF5KGQpKX1yZXR1cm4gdGhpc307dmFyIE5nPU9iamVjdC5mcmVlemUoe0FyY0N1cnZlOmhjLENhdG11bGxSb21DdXJ2ZTM6Y2EsQ3ViaWNCZXppZXJDdXJ2ZTpPYSxDdWJpY0JlemllckN1cnZlMzpWYSxFbGxpcHNlQ3VydmU6QmEsTGluZUN1cnZlOnlhLExpbmVDdXJ2ZTM6UGEsUXVhZHJhdGljQmV6aWVyQ3VydmU6UWEsUXVhZHJhdGljQmV6aWVyQ3VydmUzOldhLFNwbGluZUN1cnZlOlJhfSk7YmIucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShDLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOmJiLGFkZDpmdW5jdGlvbihhKXt0aGlzLmN1cnZlcy5wdXNoKGEpfSxjbG9zZVBhdGg6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmN1cnZlc1swXS5nZXRQb2ludCgwKSxiPXRoaXMuY3VydmVzW3RoaXMuY3VydmVzLmxlbmd0aC0xXS5nZXRQb2ludCgxKTthLmVxdWFscyhiKXx8dGhpcy5jdXJ2ZXMucHVzaChuZXcgeWEoYixcbiAgICBhKSl9LGdldFBvaW50OmZ1bmN0aW9uKGEpe3ZhciBiPWEqdGhpcy5nZXRMZW5ndGgoKSxjPXRoaXMuZ2V0Q3VydmVMZW5ndGhzKCk7Zm9yKGE9MDthPGMubGVuZ3RoOyl7aWYoY1thXT49YilyZXR1cm4gYj1jW2FdLWIsYT10aGlzLmN1cnZlc1thXSxjPWEuZ2V0TGVuZ3RoKCksYS5nZXRQb2ludEF0KDA9PT1jPzA6MS1iL2MpO2ErK31yZXR1cm4gbnVsbH0sZ2V0TGVuZ3RoOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5nZXRDdXJ2ZUxlbmd0aHMoKTtyZXR1cm4gYVthLmxlbmd0aC0xXX0sdXBkYXRlQXJjTGVuZ3RoczpmdW5jdGlvbigpe3RoaXMubmVlZHNVcGRhdGU9ITA7dGhpcy5jYWNoZUxlbmd0aHM9bnVsbDt0aGlzLmdldEN1cnZlTGVuZ3RocygpfSxnZXRDdXJ2ZUxlbmd0aHM6ZnVuY3Rpb24oKXtpZih0aGlzLmNhY2hlTGVuZ3RocyYmdGhpcy5jYWNoZUxlbmd0aHMubGVuZ3RoPT09dGhpcy5jdXJ2ZXMubGVuZ3RoKXJldHVybiB0aGlzLmNhY2hlTGVuZ3Rocztmb3IodmFyIGE9W10sXG4gICAgYj0wLGM9MCxkPXRoaXMuY3VydmVzLmxlbmd0aDtjPGQ7YysrKWIrPXRoaXMuY3VydmVzW2NdLmdldExlbmd0aCgpLGEucHVzaChiKTtyZXR1cm4gdGhpcy5jYWNoZUxlbmd0aHM9YX0sZ2V0U3BhY2VkUG9pbnRzOmZ1bmN0aW9uKGEpe3ZvaWQgMD09PWEmJihhPTQwKTtmb3IodmFyIGI9W10sYz0wO2M8PWE7YysrKWIucHVzaCh0aGlzLmdldFBvaW50KGMvYSkpO3RoaXMuYXV0b0Nsb3NlJiZiLnB1c2goYlswXSk7cmV0dXJuIGJ9LGdldFBvaW50czpmdW5jdGlvbihhKXthPWF8fDEyO2Zvcih2YXIgYj1bXSxjLGQ9MCxlPXRoaXMuY3VydmVzO2Q8ZS5sZW5ndGg7ZCsrKWZvcih2YXIgZj1lW2RdLGY9Zi5nZXRQb2ludHMoZiYmZi5pc0VsbGlwc2VDdXJ2ZT8yKmE6ZiYmZi5pc0xpbmVDdXJ2ZT8xOmYmJmYuaXNTcGxpbmVDdXJ2ZT9hKmYucG9pbnRzLmxlbmd0aDphKSxnPTA7ZzxmLmxlbmd0aDtnKyspe3ZhciBoPWZbZ107YyYmYy5lcXVhbHMoaCl8fChiLnB1c2goaCksYz1oKX10aGlzLmF1dG9DbG9zZSYmXG4gICAgMTxiLmxlbmd0aCYmIWJbYi5sZW5ndGgtMV0uZXF1YWxzKGJbMF0pJiZiLnB1c2goYlswXSk7cmV0dXJuIGJ9LGNvcHk6ZnVuY3Rpb24oYSl7Qy5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5jdXJ2ZXM9W107Zm9yKHZhciBiPTAsYz1hLmN1cnZlcy5sZW5ndGg7YjxjO2IrKyl0aGlzLmN1cnZlcy5wdXNoKGEuY3VydmVzW2JdLmNsb25lKCkpO3RoaXMuYXV0b0Nsb3NlPWEuYXV0b0Nsb3NlO3JldHVybiB0aGlzfSx0b0pTT046ZnVuY3Rpb24oKXt2YXIgYT1DLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTthLmF1dG9DbG9zZT10aGlzLmF1dG9DbG9zZTthLmN1cnZlcz1bXTtmb3IodmFyIGI9MCxjPXRoaXMuY3VydmVzLmxlbmd0aDtiPGM7YisrKWEuY3VydmVzLnB1c2godGhpcy5jdXJ2ZXNbYl0udG9KU09OKCkpO3JldHVybiBhfSxmcm9tSlNPTjpmdW5jdGlvbihhKXtDLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsYSk7dGhpcy5hdXRvQ2xvc2U9YS5hdXRvQ2xvc2U7XG4gICAgdGhpcy5jdXJ2ZXM9W107Zm9yKHZhciBiPTAsYz1hLmN1cnZlcy5sZW5ndGg7YjxjO2IrKyl7dmFyIGQ9YS5jdXJ2ZXNbYl07dGhpcy5jdXJ2ZXMucHVzaCgobmV3IE5nW2QudHlwZV0pLmZyb21KU09OKGQpKX1yZXR1cm4gdGhpc319KTtTYS5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKGJiLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOlNhLHNldEZyb21Qb2ludHM6ZnVuY3Rpb24oYSl7dGhpcy5tb3ZlVG8oYVswXS54LGFbMF0ueSk7Zm9yKHZhciBiPTEsYz1hLmxlbmd0aDtiPGM7YisrKXRoaXMubGluZVRvKGFbYl0ueCxhW2JdLnkpfSxtb3ZlVG86ZnVuY3Rpb24oYSxiKXt0aGlzLmN1cnJlbnRQb2ludC5zZXQoYSxiKX0sbGluZVRvOmZ1bmN0aW9uKGEsYil7dmFyIGM9bmV3IHlhKHRoaXMuY3VycmVudFBvaW50LmNsb25lKCksbmV3IEQoYSxiKSk7dGhpcy5jdXJ2ZXMucHVzaChjKTt0aGlzLmN1cnJlbnRQb2ludC5zZXQoYSxiKX0scXVhZHJhdGljQ3VydmVUbzpmdW5jdGlvbihhLFxuICAgIGIsYyxkKXthPW5ldyBRYSh0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpLG5ldyBEKGEsYiksbmV3IEQoYyxkKSk7dGhpcy5jdXJ2ZXMucHVzaChhKTt0aGlzLmN1cnJlbnRQb2ludC5zZXQoYyxkKX0sYmV6aWVyQ3VydmVUbzpmdW5jdGlvbihhLGIsYyxkLGUsZil7YT1uZXcgT2EodGhpcy5jdXJyZW50UG9pbnQuY2xvbmUoKSxuZXcgRChhLGIpLG5ldyBEKGMsZCksbmV3IEQoZSxmKSk7dGhpcy5jdXJ2ZXMucHVzaChhKTt0aGlzLmN1cnJlbnRQb2ludC5zZXQoZSxmKX0sc3BsaW5lVGhydTpmdW5jdGlvbihhKXt2YXIgYj1bdGhpcy5jdXJyZW50UG9pbnQuY2xvbmUoKV0uY29uY2F0KGEpLGI9bmV3IFJhKGIpO3RoaXMuY3VydmVzLnB1c2goYik7dGhpcy5jdXJyZW50UG9pbnQuY29weShhW2EubGVuZ3RoLTFdKX0sYXJjOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXt0aGlzLmFic2FyYyhhK3RoaXMuY3VycmVudFBvaW50LngsYit0aGlzLmN1cnJlbnRQb2ludC55LGMsZCxlLGYpfSxhYnNhcmM6ZnVuY3Rpb24oYSxcbiAgICBiLGMsZCxlLGYpe3RoaXMuYWJzZWxsaXBzZShhLGIsYyxjLGQsZSxmKX0sZWxsaXBzZTpmdW5jdGlvbihhLGIsYyxkLGUsZixnLGgpe3RoaXMuYWJzZWxsaXBzZShhK3RoaXMuY3VycmVudFBvaW50LngsYit0aGlzLmN1cnJlbnRQb2ludC55LGMsZCxlLGYsZyxoKX0sYWJzZWxsaXBzZTpmdW5jdGlvbihhLGIsYyxkLGUsZixnLGgpe2E9bmV3IEJhKGEsYixjLGQsZSxmLGcsaCk7MDx0aGlzLmN1cnZlcy5sZW5ndGgmJihiPWEuZ2V0UG9pbnQoMCksYi5lcXVhbHModGhpcy5jdXJyZW50UG9pbnQpfHx0aGlzLmxpbmVUbyhiLngsYi55KSk7dGhpcy5jdXJ2ZXMucHVzaChhKTthPWEuZ2V0UG9pbnQoMSk7dGhpcy5jdXJyZW50UG9pbnQuY29weShhKX0sY29weTpmdW5jdGlvbihhKXtiYi5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5jdXJyZW50UG9pbnQuY29weShhLmN1cnJlbnRQb2ludCk7cmV0dXJuIHRoaXN9LHRvSlNPTjpmdW5jdGlvbigpe3ZhciBhPWJiLnByb3RvdHlwZS50b0pTT04uY2FsbCh0aGlzKTtcbiAgICBhLmN1cnJlbnRQb2ludD10aGlzLmN1cnJlbnRQb2ludC50b0FycmF5KCk7cmV0dXJuIGF9LGZyb21KU09OOmZ1bmN0aW9uKGEpe2JiLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKHRoaXMsYSk7dGhpcy5jdXJyZW50UG9pbnQuZnJvbUFycmF5KGEuY3VycmVudFBvaW50KTtyZXR1cm4gdGhpc319KTtqYi5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKFNhLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOmpiLGdldFBvaW50c0hvbGVzOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1bXSxjPTAsZD10aGlzLmhvbGVzLmxlbmd0aDtjPGQ7YysrKWJbY109dGhpcy5ob2xlc1tjXS5nZXRQb2ludHMoYSk7cmV0dXJuIGJ9LGV4dHJhY3RQb2ludHM6ZnVuY3Rpb24oYSl7cmV0dXJue3NoYXBlOnRoaXMuZ2V0UG9pbnRzKGEpLGhvbGVzOnRoaXMuZ2V0UG9pbnRzSG9sZXMoYSl9fSxjb3B5OmZ1bmN0aW9uKGEpe1NhLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmhvbGVzPVtdO1xuICAgIGZvcih2YXIgYj0wLGM9YS5ob2xlcy5sZW5ndGg7YjxjO2IrKyl0aGlzLmhvbGVzLnB1c2goYS5ob2xlc1tiXS5jbG9uZSgpKTtyZXR1cm4gdGhpc30sdG9KU09OOmZ1bmN0aW9uKCl7dmFyIGE9U2EucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO2EudXVpZD10aGlzLnV1aWQ7YS5ob2xlcz1bXTtmb3IodmFyIGI9MCxjPXRoaXMuaG9sZXMubGVuZ3RoO2I8YztiKyspYS5ob2xlcy5wdXNoKHRoaXMuaG9sZXNbYl0udG9KU09OKCkpO3JldHVybiBhfSxmcm9tSlNPTjpmdW5jdGlvbihhKXtTYS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCh0aGlzLGEpO3RoaXMudXVpZD1hLnV1aWQ7dGhpcy5ob2xlcz1bXTtmb3IodmFyIGI9MCxjPWEuaG9sZXMubGVuZ3RoO2I8YztiKyspe3ZhciBkPWEuaG9sZXNbYl07dGhpcy5ob2xlcy5wdXNoKChuZXcgU2EpLmZyb21KU09OKGQpKX1yZXR1cm4gdGhpc319KTtkYS5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHgucHJvdG90eXBlKSxcbiAgICB7Y29uc3RydWN0b3I6ZGEsaXNMaWdodDohMCxjb3B5OmZ1bmN0aW9uKGEpe3gucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMuY29sb3IuY29weShhLmNvbG9yKTt0aGlzLmludGVuc2l0eT1hLmludGVuc2l0eTtyZXR1cm4gdGhpc30sdG9KU09OOmZ1bmN0aW9uKGEpe2E9eC5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyxhKTthLm9iamVjdC5jb2xvcj10aGlzLmNvbG9yLmdldEhleCgpO2Eub2JqZWN0LmludGVuc2l0eT10aGlzLmludGVuc2l0eTt2b2lkIDAhPT10aGlzLmdyb3VuZENvbG9yJiYoYS5vYmplY3QuZ3JvdW5kQ29sb3I9dGhpcy5ncm91bmRDb2xvci5nZXRIZXgoKSk7dm9pZCAwIT09dGhpcy5kaXN0YW5jZSYmKGEub2JqZWN0LmRpc3RhbmNlPXRoaXMuZGlzdGFuY2UpO3ZvaWQgMCE9PXRoaXMuYW5nbGUmJihhLm9iamVjdC5hbmdsZT10aGlzLmFuZ2xlKTt2b2lkIDAhPT10aGlzLmRlY2F5JiYoYS5vYmplY3QuZGVjYXk9dGhpcy5kZWNheSk7dm9pZCAwIT09XG4gICAgdGhpcy5wZW51bWJyYSYmKGEub2JqZWN0LnBlbnVtYnJhPXRoaXMucGVudW1icmEpO3ZvaWQgMCE9PXRoaXMuc2hhZG93JiYoYS5vYmplY3Quc2hhZG93PXRoaXMuc2hhZG93LnRvSlNPTigpKTtyZXR1cm4gYX19KTtCZC5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKGRhLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOkJkLGlzSGVtaXNwaGVyZUxpZ2h0OiEwLGNvcHk6ZnVuY3Rpb24oYSl7ZGEucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMuZ3JvdW5kQ29sb3IuY29weShhLmdyb3VuZENvbG9yKTtyZXR1cm4gdGhpc319KTtPYmplY3QuYXNzaWduKEZiLnByb3RvdHlwZSx7Y29weTpmdW5jdGlvbihhKXt0aGlzLmNhbWVyYT1hLmNhbWVyYS5jbG9uZSgpO3RoaXMuYmlhcz1hLmJpYXM7dGhpcy5yYWRpdXM9YS5yYWRpdXM7dGhpcy5tYXBTaXplLmNvcHkoYS5tYXBTaXplKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyl9LFxuICAgIHRvSlNPTjpmdW5jdGlvbigpe3ZhciBhPXt9OzAhPT10aGlzLmJpYXMmJihhLmJpYXM9dGhpcy5iaWFzKTsxIT09dGhpcy5yYWRpdXMmJihhLnJhZGl1cz10aGlzLnJhZGl1cyk7aWYoNTEyIT09dGhpcy5tYXBTaXplLnh8fDUxMiE9PXRoaXMubWFwU2l6ZS55KWEubWFwU2l6ZT10aGlzLm1hcFNpemUudG9BcnJheSgpO2EuY2FtZXJhPXRoaXMuY2FtZXJhLnRvSlNPTighMSkub2JqZWN0O2RlbGV0ZSBhLmNhbWVyYS5tYXRyaXg7cmV0dXJuIGF9fSk7Q2QucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShGYi5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpDZCxpc1Nwb3RMaWdodFNoYWRvdzohMCx1cGRhdGU6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5jYW1lcmEsYz0yKlEuUkFEMkRFRyphLmFuZ2xlLGQ9dGhpcy5tYXBTaXplLndpZHRoL3RoaXMubWFwU2l6ZS5oZWlnaHQ7YT1hLmRpc3RhbmNlfHxiLmZhcjtpZihjIT09Yi5mb3Z8fGQhPT1iLmFzcGVjdHx8YSE9PWIuZmFyKWIuZm92PVxuICAgIGMsYi5hc3BlY3Q9ZCxiLmZhcj1hLGIudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpfX0pO0RkLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoZGEucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6RGQsaXNTcG90TGlnaHQ6ITAsY29weTpmdW5jdGlvbihhKXtkYS5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5kaXN0YW5jZT1hLmRpc3RhbmNlO3RoaXMuYW5nbGU9YS5hbmdsZTt0aGlzLnBlbnVtYnJhPWEucGVudW1icmE7dGhpcy5kZWNheT1hLmRlY2F5O3RoaXMudGFyZ2V0PWEudGFyZ2V0LmNsb25lKCk7dGhpcy5zaGFkb3c9YS5zaGFkb3cuY2xvbmUoKTtyZXR1cm4gdGhpc319KTtFZC5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKGRhLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOkVkLGlzUG9pbnRMaWdodDohMCxjb3B5OmZ1bmN0aW9uKGEpe2RhLnByb3RvdHlwZS5jb3B5LmNhbGwodGhpcyxhKTt0aGlzLmRpc3RhbmNlPWEuZGlzdGFuY2U7XG4gICAgdGhpcy5kZWNheT1hLmRlY2F5O3RoaXMuc2hhZG93PWEuc2hhZG93LmNsb25lKCk7cmV0dXJuIHRoaXN9fSk7RmQucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShGYi5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpGZH0pO0dkLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoZGEucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6R2QsaXNEaXJlY3Rpb25hbExpZ2h0OiEwLGNvcHk6ZnVuY3Rpb24oYSl7ZGEucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMudGFyZ2V0PWEudGFyZ2V0LmNsb25lKCk7dGhpcy5zaGFkb3c9YS5zaGFkb3cuY2xvbmUoKTtyZXR1cm4gdGhpc319KTtIZC5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKGRhLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOkhkLGlzQW1iaWVudExpZ2h0OiEwfSk7SWQucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShkYS5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpJZCxcbiAgICBpc1JlY3RBcmVhTGlnaHQ6ITAsY29weTpmdW5jdGlvbihhKXtkYS5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy53aWR0aD1hLndpZHRoO3RoaXMuaGVpZ2h0PWEuaGVpZ2h0O3JldHVybiB0aGlzfSx0b0pTT046ZnVuY3Rpb24oYSl7YT1kYS5wcm90b3R5cGUudG9KU09OLmNhbGwodGhpcyxhKTthLm9iamVjdC53aWR0aD10aGlzLndpZHRoO2Eub2JqZWN0LmhlaWdodD10aGlzLmhlaWdodDtyZXR1cm4gYX19KTtKZC5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKFQucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6SmQsVmFsdWVUeXBlTmFtZTpcInN0cmluZ1wiLFZhbHVlQnVmZmVyVHlwZTpBcnJheSxEZWZhdWx0SW50ZXJwb2xhdGlvbjoyMzAwLEludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjp2b2lkIDAsSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOnZvaWQgMH0pO0tkLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoVC5wcm90b3R5cGUpLFxuICAgIHtjb25zdHJ1Y3RvcjpLZCxWYWx1ZVR5cGVOYW1lOlwiYm9vbFwiLFZhbHVlQnVmZmVyVHlwZTpBcnJheSxEZWZhdWx0SW50ZXJwb2xhdGlvbjoyMzAwLEludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjp2b2lkIDAsSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOnZvaWQgMH0pO09iamVjdC5hc3NpZ24ocGEucHJvdG90eXBlLHtldmFsdWF0ZTpmdW5jdGlvbihhKXt2YXIgYj10aGlzLnBhcmFtZXRlclBvc2l0aW9ucyxjPXRoaXMuX2NhY2hlZEluZGV4LGQ9YltjXSxlPWJbYy0xXTthOntiOntjOntkOmlmKCEoYTxkKSl7Zm9yKHZhciBmPWMrMjs7KXtpZih2b2lkIDA9PT1kKXtpZihhPGUpYnJlYWsgZDt0aGlzLl9jYWNoZWRJbmRleD1jPWIubGVuZ3RoO3JldHVybiB0aGlzLmFmdGVyRW5kXyhjLTEsYSxlKX1pZihjPT09ZilicmVhaztlPWQ7ZD1iWysrY107aWYoYTxkKWJyZWFrIGJ9ZD1iLmxlbmd0aDticmVhayBjfWlmKGE+PWUpYnJlYWsgYTtlbHNle2Y9YlsxXTthPGYmJlxuICAgIChjPTIsZT1mKTtmb3IoZj1jLTI7Oyl7aWYodm9pZCAwPT09ZSlyZXR1cm4gdGhpcy5fY2FjaGVkSW5kZXg9MCx0aGlzLmJlZm9yZVN0YXJ0XygwLGEsZCk7aWYoYz09PWYpYnJlYWs7ZD1lO2U9YlstLWMtMV07aWYoYT49ZSlicmVhayBifWQ9YztjPTB9fWZvcig7YzxkOyllPWMrZD4+PjEsYTxiW2VdP2Q9ZTpjPWUrMTtkPWJbY107ZT1iW2MtMV07aWYodm9pZCAwPT09ZSlyZXR1cm4gdGhpcy5fY2FjaGVkSW5kZXg9MCx0aGlzLmJlZm9yZVN0YXJ0XygwLGEsZCk7aWYodm9pZCAwPT09ZClyZXR1cm4gdGhpcy5fY2FjaGVkSW5kZXg9Yz1iLmxlbmd0aCx0aGlzLmFmdGVyRW5kXyhjLTEsZSxhKX10aGlzLl9jYWNoZWRJbmRleD1jO3RoaXMuaW50ZXJ2YWxDaGFuZ2VkXyhjLGUsZCl9cmV0dXJuIHRoaXMuaW50ZXJwb2xhdGVfKGMsZSxhLGQpfSxzZXR0aW5nczpudWxsLERlZmF1bHRTZXR0aW5nc186e30sZ2V0U2V0dGluZ3NfOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2V0dGluZ3N8fFxuICAgIHRoaXMuRGVmYXVsdFNldHRpbmdzX30sY29weVNhbXBsZVZhbHVlXzpmdW5jdGlvbihhKXt2YXIgYj10aGlzLnJlc3VsdEJ1ZmZlcixjPXRoaXMuc2FtcGxlVmFsdWVzLGQ9dGhpcy52YWx1ZVNpemU7YSo9ZDtmb3IodmFyIGU9MDtlIT09ZDsrK2UpYltlXT1jW2ErZV07cmV0dXJuIGJ9LGludGVycG9sYXRlXzpmdW5jdGlvbigpe3Rocm93IEVycm9yKFwiY2FsbCB0byBhYnN0cmFjdCBtZXRob2RcIik7fSxpbnRlcnZhbENoYW5nZWRfOmZ1bmN0aW9uKCl7fX0pO09iamVjdC5hc3NpZ24ocGEucHJvdG90eXBlLHtiZWZvcmVTdGFydF86cGEucHJvdG90eXBlLmNvcHlTYW1wbGVWYWx1ZV8sYWZ0ZXJFbmRfOnBhLnByb3RvdHlwZS5jb3B5U2FtcGxlVmFsdWVffSk7TGQucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShwYS5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpMZCxpbnRlcnBvbGF0ZV86ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcy5yZXN1bHRCdWZmZXIsZj10aGlzLnNhbXBsZVZhbHVlcyxcbiAgICBnPXRoaXMudmFsdWVTaXplO2EqPWc7Yj0oYy1iKS8oZC1iKTtmb3IoYz1hK2c7YSE9PWM7YSs9NCloYS5zbGVycEZsYXQoZSwwLGYsYS1nLGYsYSxiKTtyZXR1cm4gZX19KTtkZC5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKFQucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6ZGQsVmFsdWVUeXBlTmFtZTpcInF1YXRlcm5pb25cIixEZWZhdWx0SW50ZXJwb2xhdGlvbjoyMzAxLEludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjpmdW5jdGlvbihhKXtyZXR1cm4gbmV3IExkKHRoaXMudGltZXMsdGhpcy52YWx1ZXMsdGhpcy5nZXRWYWx1ZVNpemUoKSxhKX0sSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOnZvaWQgMH0pO01kLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoVC5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpNZCxWYWx1ZVR5cGVOYW1lOlwiY29sb3JcIn0pO2ljLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoVC5wcm90b3R5cGUpLFxuICAgIHtjb25zdHJ1Y3RvcjppYyxWYWx1ZVR5cGVOYW1lOlwibnVtYmVyXCJ9KTtOZC5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHBhLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOk5kLERlZmF1bHRTZXR0aW5nc186e2VuZGluZ1N0YXJ0OjI0MDAsZW5kaW5nRW5kOjI0MDB9LGludGVydmFsQ2hhbmdlZF86ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMucGFyYW1ldGVyUG9zaXRpb25zLGU9YS0yLGY9YSsxLGc9ZFtlXSxoPWRbZl07aWYodm9pZCAwPT09Zylzd2l0Y2godGhpcy5nZXRTZXR0aW5nc18oKS5lbmRpbmdTdGFydCl7Y2FzZSAyNDAxOmU9YTtnPTIqYi1jO2JyZWFrO2Nhc2UgMjQwMjplPWQubGVuZ3RoLTI7Zz1iK2RbZV0tZFtlKzFdO2JyZWFrO2RlZmF1bHQ6ZT1hLGc9Y31pZih2b2lkIDA9PT1oKXN3aXRjaCh0aGlzLmdldFNldHRpbmdzXygpLmVuZGluZ0VuZCl7Y2FzZSAyNDAxOmY9YTtoPTIqYy1iO2JyZWFrO2Nhc2UgMjQwMjpmPTE7aD1jK2RbMV0tZFswXTtcbiAgICBicmVhaztkZWZhdWx0OmY9YS0xLGg9Yn1hPS41KihjLWIpO2Q9dGhpcy52YWx1ZVNpemU7dGhpcy5fd2VpZ2h0UHJldj1hLyhiLWcpO3RoaXMuX3dlaWdodE5leHQ9YS8oaC1jKTt0aGlzLl9vZmZzZXRQcmV2PWUqZDt0aGlzLl9vZmZzZXROZXh0PWYqZH0saW50ZXJwb2xhdGVfOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXRoaXMucmVzdWx0QnVmZmVyLGY9dGhpcy5zYW1wbGVWYWx1ZXMsZz10aGlzLnZhbHVlU2l6ZTthKj1nO3ZhciBoPWEtZyxrPXRoaXMuX29mZnNldFByZXYsbT10aGlzLl9vZmZzZXROZXh0LGw9dGhpcy5fd2VpZ2h0UHJldixuPXRoaXMuX3dlaWdodE5leHQscD0oYy1iKS8oZC1iKTtjPXAqcDtkPWMqcDtiPS1sKmQrMipsKmMtbCpwO2w9KDErbCkqZCsoLTEuNS0yKmwpKmMrKC0uNStsKSpwKzE7cD0oLTEtbikqZCsoMS41K24pKmMrLjUqcDtuPW4qZC1uKmM7Zm9yKGM9MDtjIT09ZzsrK2MpZVtjXT1iKmZbaytjXStsKmZbaCtjXStwKmZbYStjXStuKmZbbStjXTtcbiAgICByZXR1cm4gZX19KTtlZC5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHBhLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOmVkLGludGVycG9sYXRlXzpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT10aGlzLnJlc3VsdEJ1ZmZlcixmPXRoaXMuc2FtcGxlVmFsdWVzLGc9dGhpcy52YWx1ZVNpemU7YSo9Zzt2YXIgaD1hLWc7Yj0oYy1iKS8oZC1iKTtjPTEtYjtmb3IoZD0wO2QhPT1nOysrZCllW2RdPWZbaCtkXSpjK2ZbYStkXSpiO3JldHVybiBlfX0pO09kLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUocGEucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6T2QsaW50ZXJwb2xhdGVfOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmNvcHlTYW1wbGVWYWx1ZV8oYS0xKX19KTt2YXIgZ2E9e2FycmF5U2xpY2U6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBnYS5pc1R5cGVkQXJyYXkoYSk/bmV3IGEuY29uc3RydWN0b3IoYS5zdWJhcnJheShiLHZvaWQgMCE9PWM/YzpcbiAgICBhLmxlbmd0aCkpOmEuc2xpY2UoYixjKX0sY29udmVydEFycmF5OmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4hYXx8IWMmJmEuY29uc3RydWN0b3I9PT1iP2E6XCJudW1iZXJcIj09PXR5cGVvZiBiLkJZVEVTX1BFUl9FTEVNRU5UP25ldyBiKGEpOkFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEpfSxpc1R5cGVkQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIEFycmF5QnVmZmVyLmlzVmlldyhhKSYmIShhIGluc3RhbmNlb2YgRGF0YVZpZXcpfSxnZXRLZXlmcmFtZU9yZGVyOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hLmxlbmd0aCxjPUFycmF5KGIpLGQ9MDtkIT09YjsrK2QpY1tkXT1kO2Muc29ydChmdW5jdGlvbihiLGMpe3JldHVybiBhW2JdLWFbY119KTtyZXR1cm4gY30sc29ydGVkQXJyYXk6ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD1hLmxlbmd0aCxlPW5ldyBhLmNvbnN0cnVjdG9yKGQpLGY9MCxnPTA7ZyE9PWQ7KytmKWZvcih2YXIgaD1jW2ZdKmIsaz0wO2shPT1iOysrayllW2crK109XG4gICAgYVtoK2tdO3JldHVybiBlfSxmbGF0dGVuSlNPTjpmdW5jdGlvbihhLGIsYyxkKXtmb3IodmFyIGU9MSxmPWFbMF07dm9pZCAwIT09ZiYmdm9pZCAwPT09ZltkXTspZj1hW2UrK107aWYodm9pZCAwIT09Zil7dmFyIGc9ZltkXTtpZih2b2lkIDAhPT1nKWlmKEFycmF5LmlzQXJyYXkoZykpe2RvIGc9ZltkXSx2b2lkIDAhPT1nJiYoYi5wdXNoKGYudGltZSksYy5wdXNoLmFwcGx5KGMsZykpLGY9YVtlKytdO3doaWxlKHZvaWQgMCE9PWYpfWVsc2UgaWYodm9pZCAwIT09Zy50b0FycmF5KXtkbyBnPWZbZF0sdm9pZCAwIT09ZyYmKGIucHVzaChmLnRpbWUpLGcudG9BcnJheShjLGMubGVuZ3RoKSksZj1hW2UrK107d2hpbGUodm9pZCAwIT09Zil9ZWxzZXtkbyBnPWZbZF0sdm9pZCAwIT09ZyYmKGIucHVzaChmLnRpbWUpLGMucHVzaChnKSksZj1hW2UrK107d2hpbGUodm9pZCAwIT09Zil9fX19O09iamVjdC5hc3NpZ24oVCx7cGFyc2U6ZnVuY3Rpb24oYSl7aWYodm9pZCAwPT09YS50eXBlKXRocm93IEVycm9yKFwiVEhSRUUuS2V5ZnJhbWVUcmFjazogdHJhY2sgdHlwZSB1bmRlZmluZWQsIGNhbiBub3QgcGFyc2VcIik7XG4gICAgdmFyIGI9VC5fZ2V0VHJhY2tUeXBlRm9yVmFsdWVUeXBlTmFtZShhLnR5cGUpO2lmKHZvaWQgMD09PWEudGltZXMpe3ZhciBjPVtdLGQ9W107Z2EuZmxhdHRlbkpTT04oYS5rZXlzLGMsZCxcInZhbHVlXCIpO2EudGltZXM9YzthLnZhbHVlcz1kfXJldHVybiB2b2lkIDAhPT1iLnBhcnNlP2IucGFyc2UoYSk6bmV3IGIoYS5uYW1lLGEudGltZXMsYS52YWx1ZXMsYS5pbnRlcnBvbGF0aW9uKX0sdG9KU09OOmZ1bmN0aW9uKGEpe3ZhciBiPWEuY29uc3RydWN0b3I7aWYodm9pZCAwIT09Yi50b0pTT04pYj1iLnRvSlNPTihhKTtlbHNle3ZhciBiPXtuYW1lOmEubmFtZSx0aW1lczpnYS5jb252ZXJ0QXJyYXkoYS50aW1lcyxBcnJheSksdmFsdWVzOmdhLmNvbnZlcnRBcnJheShhLnZhbHVlcyxBcnJheSl9LGM9YS5nZXRJbnRlcnBvbGF0aW9uKCk7YyE9PWEuRGVmYXVsdEludGVycG9sYXRpb24mJihiLmludGVycG9sYXRpb249Yyl9Yi50eXBlPWEuVmFsdWVUeXBlTmFtZTtyZXR1cm4gYn0sX2dldFRyYWNrVHlwZUZvclZhbHVlVHlwZU5hbWU6ZnVuY3Rpb24oYSl7c3dpdGNoKGEudG9Mb3dlckNhc2UoKSl7Y2FzZSBcInNjYWxhclwiOmNhc2UgXCJkb3VibGVcIjpjYXNlIFwiZmxvYXRcIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcImludGVnZXJcIjpyZXR1cm4gaWM7XG4gICAgY2FzZSBcInZlY3RvclwiOmNhc2UgXCJ2ZWN0b3IyXCI6Y2FzZSBcInZlY3RvcjNcIjpjYXNlIFwidmVjdG9yNFwiOnJldHVybiBqYztjYXNlIFwiY29sb3JcIjpyZXR1cm4gTWQ7Y2FzZSBcInF1YXRlcm5pb25cIjpyZXR1cm4gZGQ7Y2FzZSBcImJvb2xcIjpjYXNlIFwiYm9vbGVhblwiOnJldHVybiBLZDtjYXNlIFwic3RyaW5nXCI6cmV0dXJuIEpkfXRocm93IEVycm9yKFwiVEhSRUUuS2V5ZnJhbWVUcmFjazogVW5zdXBwb3J0ZWQgdHlwZU5hbWU6IFwiK2EpO319KTtPYmplY3QuYXNzaWduKFQucHJvdG90eXBlLHtjb25zdHJ1Y3RvcjpULFRpbWVCdWZmZXJUeXBlOkZsb2F0MzJBcnJheSxWYWx1ZUJ1ZmZlclR5cGU6RmxvYXQzMkFycmF5LERlZmF1bHRJbnRlcnBvbGF0aW9uOjIzMDEsSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kRGlzY3JldGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBPZCh0aGlzLnRpbWVzLHRoaXMudmFsdWVzLHRoaXMuZ2V0VmFsdWVTaXplKCksYSl9LEludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjpmdW5jdGlvbihhKXtyZXR1cm4gbmV3IGVkKHRoaXMudGltZXMsXG4gICAgdGhpcy52YWx1ZXMsdGhpcy5nZXRWYWx1ZVNpemUoKSxhKX0sSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOmZ1bmN0aW9uKGEpe3JldHVybiBuZXcgTmQodGhpcy50aW1lcyx0aGlzLnZhbHVlcyx0aGlzLmdldFZhbHVlU2l6ZSgpLGEpfSxzZXRJbnRlcnBvbGF0aW9uOmZ1bmN0aW9uKGEpe3N3aXRjaChhKXtjYXNlIDIzMDA6dmFyIGI9dGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2REaXNjcmV0ZTticmVhaztjYXNlIDIzMDE6Yj10aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjticmVhaztjYXNlIDIzMDI6Yj10aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aH1pZih2b2lkIDA9PT1iKXtiPVwidW5zdXBwb3J0ZWQgaW50ZXJwb2xhdGlvbiBmb3IgXCIrdGhpcy5WYWx1ZVR5cGVOYW1lK1wiIGtleWZyYW1lIHRyYWNrIG5hbWVkIFwiK3RoaXMubmFtZTtpZih2b2lkIDA9PT10aGlzLmNyZWF0ZUludGVycG9sYW50KWlmKGEhPT10aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uKXRoaXMuc2V0SW50ZXJwb2xhdGlvbih0aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uKTtcbiAgICBlbHNlIHRocm93IEVycm9yKGIpO2NvbnNvbGUud2FybihcIlRIUkVFLktleWZyYW1lVHJhY2s6XCIsYil9ZWxzZSB0aGlzLmNyZWF0ZUludGVycG9sYW50PWJ9LGdldEludGVycG9sYXRpb246ZnVuY3Rpb24oKXtzd2l0Y2godGhpcy5jcmVhdGVJbnRlcnBvbGFudCl7Y2FzZSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlOnJldHVybiAyMzAwO2Nhc2UgdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI6cmV0dXJuIDIzMDE7Y2FzZSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aDpyZXR1cm4gMjMwMn19LGdldFZhbHVlU2l6ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlcy5sZW5ndGgvdGhpcy50aW1lcy5sZW5ndGh9LHNoaWZ0OmZ1bmN0aW9uKGEpe2lmKDAhPT1hKWZvcih2YXIgYj10aGlzLnRpbWVzLGM9MCxkPWIubGVuZ3RoO2MhPT1kOysrYyliW2NdKz1hO3JldHVybiB0aGlzfSxzY2FsZTpmdW5jdGlvbihhKXtpZigxIT09YSlmb3IodmFyIGI9XG4gICAgdGhpcy50aW1lcyxjPTAsZD1iLmxlbmd0aDtjIT09ZDsrK2MpYltjXSo9YTtyZXR1cm4gdGhpc30sdHJpbTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz10aGlzLnRpbWVzLGQ9Yy5sZW5ndGgsZT0wLGY9ZC0xO2UhPT1kJiZjW2VdPGE7KSsrZTtmb3IoOy0xIT09ZiYmY1tmXT5iOyktLWY7KytmO2lmKDAhPT1lfHxmIT09ZCllPj1mJiYoZj1NYXRoLm1heChmLDEpLGU9Zi0xKSxhPXRoaXMuZ2V0VmFsdWVTaXplKCksdGhpcy50aW1lcz1nYS5hcnJheVNsaWNlKGMsZSxmKSx0aGlzLnZhbHVlcz1nYS5hcnJheVNsaWNlKHRoaXMudmFsdWVzLGUqYSxmKmEpO3JldHVybiB0aGlzfSx2YWxpZGF0ZTpmdW5jdGlvbigpe3ZhciBhPSEwLGI9dGhpcy5nZXRWYWx1ZVNpemUoKTswIT09Yi1NYXRoLmZsb29yKGIpJiYoY29uc29sZS5lcnJvcihcIlRIUkVFLktleWZyYW1lVHJhY2s6IEludmFsaWQgdmFsdWUgc2l6ZSBpbiB0cmFjay5cIix0aGlzKSxhPSExKTt2YXIgYz10aGlzLnRpbWVzLGI9dGhpcy52YWx1ZXMsXG4gICAgZD1jLmxlbmd0aDswPT09ZCYmKGNvbnNvbGUuZXJyb3IoXCJUSFJFRS5LZXlmcmFtZVRyYWNrOiBUcmFjayBpcyBlbXB0eS5cIix0aGlzKSxhPSExKTtmb3IodmFyIGU9bnVsbCxmPTA7ZiE9PWQ7ZisrKXt2YXIgZz1jW2ZdO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgZyYmaXNOYU4oZykpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5LZXlmcmFtZVRyYWNrOiBUaW1lIGlzIG5vdCBhIHZhbGlkIG51bWJlci5cIix0aGlzLGYsZyk7YT0hMTticmVha31pZihudWxsIT09ZSYmZT5nKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuS2V5ZnJhbWVUcmFjazogT3V0IG9mIG9yZGVyIGtleXMuXCIsdGhpcyxmLGcsZSk7YT0hMTticmVha31lPWd9aWYodm9pZCAwIT09YiYmZ2EuaXNUeXBlZEFycmF5KGIpKWZvcihmPTAsYz1iLmxlbmd0aDtmIT09YzsrK2YpaWYoZD1iW2ZdLGlzTmFOKGQpKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuS2V5ZnJhbWVUcmFjazogVmFsdWUgaXMgbm90IGEgdmFsaWQgbnVtYmVyLlwiLHRoaXMsZixcbiAgICBkKTthPSExO2JyZWFrfXJldHVybiBhfSxvcHRpbWl6ZTpmdW5jdGlvbigpe2Zvcih2YXIgYSxiLGM9dGhpcy50aW1lcyxkPXRoaXMudmFsdWVzLGU9dGhpcy5nZXRWYWx1ZVNpemUoKSxmPTIzMDI9PT10aGlzLmdldEludGVycG9sYXRpb24oKSxnPTEsaD1jLmxlbmd0aC0xLGs9MTtrPGg7KytrKXthPSExO3ZhciBtPWNba107aWYobSE9PWNbaysxXSYmKDEhPT1rfHxtIT09bVswXSkpaWYoZilhPSEwO2Vsc2V7Yj1rKmU7Zm9yKHZhciBsPWItZSxuPWIrZSxtPTA7bSE9PWU7KyttKXt2YXIgcD1kW2IrbV07aWYocCE9PWRbbCttXXx8cCE9PWRbbittXSl7YT0hMDticmVha319fWlmKGEpe2lmKGshPT1nKWZvcihjW2ddPWNba10sYj1rKmUsYT1nKmUsbT0wO20hPT1lOysrbSlkW2ErbV09ZFtiK21dOysrZ319aWYoMDxoKXtjW2ddPWNbaF07Yj1oKmU7YT1nKmU7Zm9yKG09MDttIT09ZTsrK20pZFthK21dPWRbYittXTsrK2d9ZyE9PWMubGVuZ3RoJiYodGhpcy50aW1lcz1nYS5hcnJheVNsaWNlKGMsXG4gICAgMCxnKSx0aGlzLnZhbHVlcz1nYS5hcnJheVNsaWNlKGQsMCxnKmUpKTtyZXR1cm4gdGhpc319KTtqYy5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKFQucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6amMsVmFsdWVUeXBlTmFtZTpcInZlY3RvclwifSk7T2JqZWN0LmFzc2lnbihDYSx7cGFyc2U6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9YS50cmFja3MsZD0xLyhhLmZwc3x8MSksZT0wLGY9Yy5sZW5ndGg7ZSE9PWY7KytlKWIucHVzaChULnBhcnNlKGNbZV0pLnNjYWxlKGQpKTtyZXR1cm4gbmV3IENhKGEubmFtZSxhLmR1cmF0aW9uLGIpfSx0b0pTT046ZnVuY3Rpb24oYSl7dmFyIGI9W10sYz1hLnRyYWNrczthPXtuYW1lOmEubmFtZSxkdXJhdGlvbjphLmR1cmF0aW9uLHRyYWNrczpifTtmb3IodmFyIGQ9MCxlPWMubGVuZ3RoO2QhPT1lOysrZCliLnB1c2goVC50b0pTT04oY1tkXSkpO3JldHVybiBhfSxDcmVhdGVGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZTpmdW5jdGlvbihhLFxuICAgIGIsYyxkKXtmb3IodmFyIGU9Yi5sZW5ndGgsZj1bXSxnPTA7ZzxlO2crKyl7dmFyIGg9W10saz1bXTtoLnB1c2goKGcrZS0xKSVlLGcsKGcrMSklZSk7ay5wdXNoKDAsMSwwKTt2YXIgbT1nYS5nZXRLZXlmcmFtZU9yZGVyKGgpLGg9Z2Euc29ydGVkQXJyYXkoaCwxLG0pLGs9Z2Euc29ydGVkQXJyYXkoaywxLG0pO2R8fDAhPT1oWzBdfHwoaC5wdXNoKGUpLGsucHVzaChrWzBdKSk7Zi5wdXNoKChuZXcgaWMoXCIubW9ycGhUYXJnZXRJbmZsdWVuY2VzW1wiK2JbZ10ubmFtZStcIl1cIixoLGspKS5zY2FsZSgxL2MpKX1yZXR1cm4gbmV3IENhKGEsLTEsZil9LGZpbmRCeU5hbWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hO0FycmF5LmlzQXJyYXkoYSl8fChjPWEuZ2VvbWV0cnkmJmEuZ2VvbWV0cnkuYW5pbWF0aW9uc3x8YS5hbmltYXRpb25zKTtmb3IoYT0wO2E8Yy5sZW5ndGg7YSsrKWlmKGNbYV0ubmFtZT09PWIpcmV0dXJuIGNbYV07cmV0dXJuIG51bGx9LENyZWF0ZUNsaXBzRnJvbU1vcnBoVGFyZ2V0U2VxdWVuY2VzOmZ1bmN0aW9uKGEsXG4gICAgYixjKXtmb3IodmFyIGQsZT17fSxmPS9eKFtcXHctXSo/KShbXFxkXSspJC8sZz0wLGg9YS5sZW5ndGg7ZzxoO2crKyl7dmFyIGs9YVtnXSxtPWsubmFtZS5tYXRjaChmKTttJiYxPG0ubGVuZ3RoJiYoZD1tWzFdLChtPWVbZF0pfHwoZVtkXT1tPVtdKSxtLnB1c2goaykpfWE9W107Zm9yKGQgaW4gZSlhLnB1c2goQ2EuQ3JlYXRlRnJvbU1vcnBoVGFyZ2V0U2VxdWVuY2UoZCxlW2RdLGIsYykpO3JldHVybiBhfSxwYXJzZUFuaW1hdGlvbjpmdW5jdGlvbihhLGIpe2lmKCFhKXJldHVybiBjb25zb2xlLmVycm9yKFwiVEhSRUUuQW5pbWF0aW9uQ2xpcDogTm8gYW5pbWF0aW9uIGluIEpTT05Mb2FkZXIgZGF0YS5cIiksbnVsbDt2YXIgYz1mdW5jdGlvbihhLGIsYyxkLGUpe2lmKDAhPT1jLmxlbmd0aCl7dmFyIGY9W10sZz1bXTtnYS5mbGF0dGVuSlNPTihjLGYsZyxkKTswIT09Zi5sZW5ndGgmJmUucHVzaChuZXcgYShiLGYsZykpfX0sZD1bXSxlPWEubmFtZXx8XCJkZWZhdWx0XCIsZj1hLmxlbmd0aHx8XG4gICAgLTEsZz1hLmZwc3x8MzA7YT1hLmhpZXJhcmNoeXx8W107Zm9yKHZhciBoPTA7aDxhLmxlbmd0aDtoKyspe3ZhciBrPWFbaF0ua2V5cztpZihrJiYwIT09ay5sZW5ndGgpaWYoa1swXS5tb3JwaFRhcmdldHMpe2Zvcih2YXIgZj17fSxtPTA7bTxrLmxlbmd0aDttKyspaWYoa1ttXS5tb3JwaFRhcmdldHMpZm9yKHZhciBsPTA7bDxrW21dLm1vcnBoVGFyZ2V0cy5sZW5ndGg7bCsrKWZba1ttXS5tb3JwaFRhcmdldHNbbF1dPS0xO2Zvcih2YXIgbiBpbiBmKXtmb3IodmFyIHA9W10scj1bXSxsPTA7bCE9PWtbbV0ubW9ycGhUYXJnZXRzLmxlbmd0aDsrK2wpe3ZhciB0PWtbbV07cC5wdXNoKHQudGltZSk7ci5wdXNoKHQubW9ycGhUYXJnZXQ9PT1uPzE6MCl9ZC5wdXNoKG5ldyBpYyhcIi5tb3JwaFRhcmdldEluZmx1ZW5jZVtcIituK1wiXVwiLHAscikpfWY9Zi5sZW5ndGgqKGd8fDEpfWVsc2UgbT1cIi5ib25lc1tcIitiW2hdLm5hbWUrXCJdXCIsYyhqYyxtK1wiLnBvc2l0aW9uXCIsayxcInBvc1wiLGQpLGMoZGQsXG4gICAgbStcIi5xdWF0ZXJuaW9uXCIsayxcInJvdFwiLGQpLGMoamMsbStcIi5zY2FsZVwiLGssXCJzY2xcIixkKX1yZXR1cm4gMD09PWQubGVuZ3RoP251bGw6bmV3IENhKGUsZixkKX19KTtPYmplY3QuYXNzaWduKENhLnByb3RvdHlwZSx7cmVzZXREdXJhdGlvbjpmdW5jdGlvbigpe2Zvcih2YXIgYT0wLGI9MCxjPXRoaXMudHJhY2tzLmxlbmd0aDtiIT09YzsrK2IpdmFyIGQ9dGhpcy50cmFja3NbYl0sYT1NYXRoLm1heChhLGQudGltZXNbZC50aW1lcy5sZW5ndGgtMV0pO3RoaXMuZHVyYXRpb249YX0sdHJpbTpmdW5jdGlvbigpe2Zvcih2YXIgYT0wO2E8dGhpcy50cmFja3MubGVuZ3RoO2ErKyl0aGlzLnRyYWNrc1thXS50cmltKDAsdGhpcy5kdXJhdGlvbik7cmV0dXJuIHRoaXN9LG9wdGltaXplOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPTA7YTx0aGlzLnRyYWNrcy5sZW5ndGg7YSsrKXRoaXMudHJhY2tzW2FdLm9wdGltaXplKCk7cmV0dXJuIHRoaXN9fSk7T2JqZWN0LmFzc2lnbihQZC5wcm90b3R5cGUsXG4gICAge2xvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpczsobmV3IE5hKGUubWFuYWdlcikpLmxvYWQoYSxmdW5jdGlvbihhKXtiKGUucGFyc2UoSlNPTi5wYXJzZShhKSkpfSxjLGQpfSxzZXRUZXh0dXJlczpmdW5jdGlvbihhKXt0aGlzLnRleHR1cmVzPWF9LHBhcnNlOmZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoYSl7dm9pZCAwPT09Y1thXSYmY29uc29sZS53YXJuKFwiVEhSRUUuTWF0ZXJpYWxMb2FkZXI6IFVuZGVmaW5lZCB0ZXh0dXJlXCIsYSk7cmV0dXJuIGNbYV19dmFyIGM9dGhpcy50ZXh0dXJlcyxkPW5ldyBNZ1thLnR5cGVdO3ZvaWQgMCE9PWEudXVpZCYmKGQudXVpZD1hLnV1aWQpO3ZvaWQgMCE9PWEubmFtZSYmKGQubmFtZT1hLm5hbWUpO3ZvaWQgMCE9PWEuY29sb3ImJmQuY29sb3Iuc2V0SGV4KGEuY29sb3IpO3ZvaWQgMCE9PWEucm91Z2huZXNzJiYoZC5yb3VnaG5lc3M9YS5yb3VnaG5lc3MpO3ZvaWQgMCE9PWEubWV0YWxuZXNzJiYoZC5tZXRhbG5lc3M9YS5tZXRhbG5lc3MpO1xuICAgIHZvaWQgMCE9PWEuZW1pc3NpdmUmJmQuZW1pc3NpdmUuc2V0SGV4KGEuZW1pc3NpdmUpO3ZvaWQgMCE9PWEuc3BlY3VsYXImJmQuc3BlY3VsYXIuc2V0SGV4KGEuc3BlY3VsYXIpO3ZvaWQgMCE9PWEuc2hpbmluZXNzJiYoZC5zaGluaW5lc3M9YS5zaGluaW5lc3MpO3ZvaWQgMCE9PWEuY2xlYXJDb2F0JiYoZC5jbGVhckNvYXQ9YS5jbGVhckNvYXQpO3ZvaWQgMCE9PWEuY2xlYXJDb2F0Um91Z2huZXNzJiYoZC5jbGVhckNvYXRSb3VnaG5lc3M9YS5jbGVhckNvYXRSb3VnaG5lc3MpO3ZvaWQgMCE9PWEudW5pZm9ybXMmJihkLnVuaWZvcm1zPWEudW5pZm9ybXMpO3ZvaWQgMCE9PWEudmVydGV4U2hhZGVyJiYoZC52ZXJ0ZXhTaGFkZXI9YS52ZXJ0ZXhTaGFkZXIpO3ZvaWQgMCE9PWEuZnJhZ21lbnRTaGFkZXImJihkLmZyYWdtZW50U2hhZGVyPWEuZnJhZ21lbnRTaGFkZXIpO3ZvaWQgMCE9PWEudmVydGV4Q29sb3JzJiYoZC52ZXJ0ZXhDb2xvcnM9YS52ZXJ0ZXhDb2xvcnMpO3ZvaWQgMCE9PVxuICAgIGEuZm9nJiYoZC5mb2c9YS5mb2cpO3ZvaWQgMCE9PWEuZmxhdFNoYWRpbmcmJihkLmZsYXRTaGFkaW5nPWEuZmxhdFNoYWRpbmcpO3ZvaWQgMCE9PWEuYmxlbmRpbmcmJihkLmJsZW5kaW5nPWEuYmxlbmRpbmcpO3ZvaWQgMCE9PWEuc2lkZSYmKGQuc2lkZT1hLnNpZGUpO3ZvaWQgMCE9PWEub3BhY2l0eSYmKGQub3BhY2l0eT1hLm9wYWNpdHkpO3ZvaWQgMCE9PWEudHJhbnNwYXJlbnQmJihkLnRyYW5zcGFyZW50PWEudHJhbnNwYXJlbnQpO3ZvaWQgMCE9PWEuYWxwaGFUZXN0JiYoZC5hbHBoYVRlc3Q9YS5hbHBoYVRlc3QpO3ZvaWQgMCE9PWEuZGVwdGhUZXN0JiYoZC5kZXB0aFRlc3Q9YS5kZXB0aFRlc3QpO3ZvaWQgMCE9PWEuZGVwdGhXcml0ZSYmKGQuZGVwdGhXcml0ZT1hLmRlcHRoV3JpdGUpO3ZvaWQgMCE9PWEuY29sb3JXcml0ZSYmKGQuY29sb3JXcml0ZT1hLmNvbG9yV3JpdGUpO3ZvaWQgMCE9PWEud2lyZWZyYW1lJiYoZC53aXJlZnJhbWU9YS53aXJlZnJhbWUpO3ZvaWQgMCE9PVxuICAgIGEud2lyZWZyYW1lTGluZXdpZHRoJiYoZC53aXJlZnJhbWVMaW5ld2lkdGg9YS53aXJlZnJhbWVMaW5ld2lkdGgpO3ZvaWQgMCE9PWEud2lyZWZyYW1lTGluZWNhcCYmKGQud2lyZWZyYW1lTGluZWNhcD1hLndpcmVmcmFtZUxpbmVjYXApO3ZvaWQgMCE9PWEud2lyZWZyYW1lTGluZWpvaW4mJihkLndpcmVmcmFtZUxpbmVqb2luPWEud2lyZWZyYW1lTGluZWpvaW4pO3ZvaWQgMCE9PWEucm90YXRpb24mJihkLnJvdGF0aW9uPWEucm90YXRpb24pOzEhPT1hLmxpbmV3aWR0aCYmKGQubGluZXdpZHRoPWEubGluZXdpZHRoKTt2b2lkIDAhPT1hLmRhc2hTaXplJiYoZC5kYXNoU2l6ZT1hLmRhc2hTaXplKTt2b2lkIDAhPT1hLmdhcFNpemUmJihkLmdhcFNpemU9YS5nYXBTaXplKTt2b2lkIDAhPT1hLnNjYWxlJiYoZC5zY2FsZT1hLnNjYWxlKTt2b2lkIDAhPT1hLnNraW5uaW5nJiYoZC5za2lubmluZz1hLnNraW5uaW5nKTt2b2lkIDAhPT1hLm1vcnBoVGFyZ2V0cyYmKGQubW9ycGhUYXJnZXRzPVxuICAgIGEubW9ycGhUYXJnZXRzKTt2b2lkIDAhPT1hLmRpdGhlcmluZyYmKGQuZGl0aGVyaW5nPWEuZGl0aGVyaW5nKTt2b2lkIDAhPT1hLnZpc2libGUmJihkLnZpc2libGU9YS52aXNpYmxlKTt2b2lkIDAhPT1hLnVzZXJEYXRhJiYoZC51c2VyRGF0YT1hLnVzZXJEYXRhKTt2b2lkIDAhPT1hLnNoYWRpbmcmJihkLmZsYXRTaGFkaW5nPTE9PT1hLnNoYWRpbmcpO3ZvaWQgMCE9PWEuc2l6ZSYmKGQuc2l6ZT1hLnNpemUpO3ZvaWQgMCE9PWEuc2l6ZUF0dGVudWF0aW9uJiYoZC5zaXplQXR0ZW51YXRpb249YS5zaXplQXR0ZW51YXRpb24pO3ZvaWQgMCE9PWEubWFwJiYoZC5tYXA9YihhLm1hcCkpO3ZvaWQgMCE9PWEuYWxwaGFNYXAmJihkLmFscGhhTWFwPWIoYS5hbHBoYU1hcCksZC50cmFuc3BhcmVudD0hMCk7dm9pZCAwIT09YS5idW1wTWFwJiYoZC5idW1wTWFwPWIoYS5idW1wTWFwKSk7dm9pZCAwIT09YS5idW1wU2NhbGUmJihkLmJ1bXBTY2FsZT1hLmJ1bXBTY2FsZSk7dm9pZCAwIT09YS5ub3JtYWxNYXAmJlxuICAgIChkLm5vcm1hbE1hcD1iKGEubm9ybWFsTWFwKSk7aWYodm9pZCAwIT09YS5ub3JtYWxTY2FsZSl7dmFyIGU9YS5ub3JtYWxTY2FsZTshMT09PUFycmF5LmlzQXJyYXkoZSkmJihlPVtlLGVdKTtkLm5vcm1hbFNjYWxlPShuZXcgRCkuZnJvbUFycmF5KGUpfXZvaWQgMCE9PWEuZGlzcGxhY2VtZW50TWFwJiYoZC5kaXNwbGFjZW1lbnRNYXA9YihhLmRpc3BsYWNlbWVudE1hcCkpO3ZvaWQgMCE9PWEuZGlzcGxhY2VtZW50U2NhbGUmJihkLmRpc3BsYWNlbWVudFNjYWxlPWEuZGlzcGxhY2VtZW50U2NhbGUpO3ZvaWQgMCE9PWEuZGlzcGxhY2VtZW50QmlhcyYmKGQuZGlzcGxhY2VtZW50Qmlhcz1hLmRpc3BsYWNlbWVudEJpYXMpO3ZvaWQgMCE9PWEucm91Z2huZXNzTWFwJiYoZC5yb3VnaG5lc3NNYXA9YihhLnJvdWdobmVzc01hcCkpO3ZvaWQgMCE9PWEubWV0YWxuZXNzTWFwJiYoZC5tZXRhbG5lc3NNYXA9YihhLm1ldGFsbmVzc01hcCkpO3ZvaWQgMCE9PWEuZW1pc3NpdmVNYXAmJihkLmVtaXNzaXZlTWFwPVxuICAgIGIoYS5lbWlzc2l2ZU1hcCkpO3ZvaWQgMCE9PWEuZW1pc3NpdmVJbnRlbnNpdHkmJihkLmVtaXNzaXZlSW50ZW5zaXR5PWEuZW1pc3NpdmVJbnRlbnNpdHkpO3ZvaWQgMCE9PWEuc3BlY3VsYXJNYXAmJihkLnNwZWN1bGFyTWFwPWIoYS5zcGVjdWxhck1hcCkpO3ZvaWQgMCE9PWEuZW52TWFwJiYoZC5lbnZNYXA9YihhLmVudk1hcCkpO3ZvaWQgMCE9PWEucmVmbGVjdGl2aXR5JiYoZC5yZWZsZWN0aXZpdHk9YS5yZWZsZWN0aXZpdHkpO3ZvaWQgMCE9PWEubGlnaHRNYXAmJihkLmxpZ2h0TWFwPWIoYS5saWdodE1hcCkpO3ZvaWQgMCE9PWEubGlnaHRNYXBJbnRlbnNpdHkmJihkLmxpZ2h0TWFwSW50ZW5zaXR5PWEubGlnaHRNYXBJbnRlbnNpdHkpO3ZvaWQgMCE9PWEuYW9NYXAmJihkLmFvTWFwPWIoYS5hb01hcCkpO3ZvaWQgMCE9PWEuYW9NYXBJbnRlbnNpdHkmJihkLmFvTWFwSW50ZW5zaXR5PWEuYW9NYXBJbnRlbnNpdHkpO3ZvaWQgMCE9PWEuZ3JhZGllbnRNYXAmJihkLmdyYWRpZW50TWFwPVxuICAgIGIoYS5ncmFkaWVudE1hcCkpO3JldHVybiBkfX0pO09iamVjdC5hc3NpZ24obGUucHJvdG90eXBlLHtsb2FkOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXRoaXM7KG5ldyBOYShlLm1hbmFnZXIpKS5sb2FkKGEsZnVuY3Rpb24oYSl7YihlLnBhcnNlKEpTT04ucGFyc2UoYSkpKX0sYyxkKX0scGFyc2U6ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IEU7dmFyIGM9YS5kYXRhLmluZGV4O3ZvaWQgMCE9PWMmJihjPW5ldyB4ZltjLnR5cGVdKGMuYXJyYXkpLGIuc2V0SW5kZXgobmV3IE0oYywxKSkpO3ZhciBkPWEuZGF0YS5hdHRyaWJ1dGVzO2ZvcihmIGluIGQpe3ZhciBlPWRbZl07Yz1uZXcgeGZbZS50eXBlXShlLmFycmF5KTtiLmFkZEF0dHJpYnV0ZShmLG5ldyBNKGMsZS5pdGVtU2l6ZSxlLm5vcm1hbGl6ZWQpKX12YXIgZj1hLmRhdGEuZ3JvdXBzfHxhLmRhdGEuZHJhd2NhbGxzfHxhLmRhdGEub2Zmc2V0cztpZih2b2lkIDAhPT1mKWZvcihjPTAsZD1mLmxlbmd0aDtjIT09ZDsrK2MpZT1mW2NdLFxuICAgIGIuYWRkR3JvdXAoZS5zdGFydCxlLmNvdW50LGUubWF0ZXJpYWxJbmRleCk7YT1hLmRhdGEuYm91bmRpbmdTcGhlcmU7dm9pZCAwIT09YSYmKGY9bmV3IHAsdm9pZCAwIT09YS5jZW50ZXImJmYuZnJvbUFycmF5KGEuY2VudGVyKSxiLmJvdW5kaW5nU3BoZXJlPW5ldyBJYShmLGEucmFkaXVzKSk7cmV0dXJuIGJ9fSk7dmFyIHhmPXtJbnQ4QXJyYXk6SW50OEFycmF5LFVpbnQ4QXJyYXk6VWludDhBcnJheSxVaW50OENsYW1wZWRBcnJheTpcInVuZGVmaW5lZFwiIT09dHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5P1VpbnQ4Q2xhbXBlZEFycmF5OlVpbnQ4QXJyYXksSW50MTZBcnJheTpJbnQxNkFycmF5LFVpbnQxNkFycmF5OlVpbnQxNkFycmF5LEludDMyQXJyYXk6SW50MzJBcnJheSxVaW50MzJBcnJheTpVaW50MzJBcnJheSxGbG9hdDMyQXJyYXk6RmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheTpGbG9hdDY0QXJyYXl9O2tjLkhhbmRsZXJzPXtoYW5kbGVyczpbXSxhZGQ6ZnVuY3Rpb24oYSxiKXt0aGlzLmhhbmRsZXJzLnB1c2goYSxcbiAgICBiKX0sZ2V0OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj10aGlzLmhhbmRsZXJzLGM9MCxkPWIubGVuZ3RoO2M8ZDtjKz0yKXt2YXIgZT1iW2MrMV07aWYoYltjXS50ZXN0KGEpKXJldHVybiBlfXJldHVybiBudWxsfX07T2JqZWN0LmFzc2lnbihrYy5wcm90b3R5cGUse2Nyb3NzT3JpZ2luOnZvaWQgMCxpbml0TWF0ZXJpYWxzOmZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9W10sZT0wO2U8YS5sZW5ndGg7KytlKWRbZV09dGhpcy5jcmVhdGVNYXRlcmlhbChhW2VdLGIsYyk7cmV0dXJuIGR9LGNyZWF0ZU1hdGVyaWFsOmZ1bmN0aW9uKCl7dmFyIGE9e05vQmxlbmRpbmc6MCxOb3JtYWxCbGVuZGluZzoxLEFkZGl0aXZlQmxlbmRpbmc6MixTdWJ0cmFjdGl2ZUJsZW5kaW5nOjMsTXVsdGlwbHlCbGVuZGluZzo0LEN1c3RvbUJsZW5kaW5nOjV9LGI9bmV3IEgsYz1uZXcgQWQsZD1uZXcgUGQ7cmV0dXJuIGZ1bmN0aW9uKGUsZixnKXtmdW5jdGlvbiBoKGEsYixkLGUsaCl7YT1mK2E7dmFyIG09a2MuSGFuZGxlcnMuZ2V0KGEpO1xuICAgIG51bGwhPT1tP2E9bS5sb2FkKGEpOihjLnNldENyb3NzT3JpZ2luKGcpLGE9Yy5sb2FkKGEpKTt2b2lkIDAhPT1iJiYoYS5yZXBlYXQuZnJvbUFycmF5KGIpLDEhPT1iWzBdJiYoYS53cmFwUz0xRTMpLDEhPT1iWzFdJiYoYS53cmFwVD0xRTMpKTt2b2lkIDAhPT1kJiZhLm9mZnNldC5mcm9tQXJyYXkoZCk7dm9pZCAwIT09ZSYmKFwicmVwZWF0XCI9PT1lWzBdJiYoYS53cmFwUz0xRTMpLFwibWlycm9yXCI9PT1lWzBdJiYoYS53cmFwUz0xMDAyKSxcInJlcGVhdFwiPT09ZVsxXSYmKGEud3JhcFQ9MUUzKSxcIm1pcnJvclwiPT09ZVsxXSYmKGEud3JhcFQ9MTAwMikpO3ZvaWQgMCE9PWgmJihhLmFuaXNvdHJvcHk9aCk7Yj1RLmdlbmVyYXRlVVVJRCgpO2tbYl09YTtyZXR1cm4gYn12YXIgaz17fSxtPXt1dWlkOlEuZ2VuZXJhdGVVVUlEKCksdHlwZTpcIk1lc2hMYW1iZXJ0TWF0ZXJpYWxcIn0sbDtmb3IobCBpbiBlKXt2YXIgbj1lW2xdO3N3aXRjaChsKXtjYXNlIFwiRGJnQ29sb3JcIjpjYXNlIFwiRGJnSW5kZXhcIjpjYXNlIFwib3B0aWNhbERlbnNpdHlcIjpjYXNlIFwiaWxsdW1pbmF0aW9uXCI6YnJlYWs7XG4gICAgY2FzZSBcIkRiZ05hbWVcIjptLm5hbWU9bjticmVhaztjYXNlIFwiYmxlbmRpbmdcIjptLmJsZW5kaW5nPWFbbl07YnJlYWs7Y2FzZSBcImNvbG9yQW1iaWVudFwiOmNhc2UgXCJtYXBBbWJpZW50XCI6Y29uc29sZS53YXJuKFwiVEhSRUUuTG9hZGVyLmNyZWF0ZU1hdGVyaWFsOlwiLGwsXCJpcyBubyBsb25nZXIgc3VwcG9ydGVkLlwiKTticmVhaztjYXNlIFwiY29sb3JEaWZmdXNlXCI6bS5jb2xvcj1iLmZyb21BcnJheShuKS5nZXRIZXgoKTticmVhaztjYXNlIFwiY29sb3JTcGVjdWxhclwiOm0uc3BlY3VsYXI9Yi5mcm9tQXJyYXkobikuZ2V0SGV4KCk7YnJlYWs7Y2FzZSBcImNvbG9yRW1pc3NpdmVcIjptLmVtaXNzaXZlPWIuZnJvbUFycmF5KG4pLmdldEhleCgpO2JyZWFrO2Nhc2UgXCJzcGVjdWxhckNvZWZcIjptLnNoaW5pbmVzcz1uO2JyZWFrO2Nhc2UgXCJzaGFkaW5nXCI6XCJiYXNpY1wiPT09bi50b0xvd2VyQ2FzZSgpJiYobS50eXBlPVwiTWVzaEJhc2ljTWF0ZXJpYWxcIik7XCJwaG9uZ1wiPT09bi50b0xvd2VyQ2FzZSgpJiZcbiAgICAobS50eXBlPVwiTWVzaFBob25nTWF0ZXJpYWxcIik7XCJzdGFuZGFyZFwiPT09bi50b0xvd2VyQ2FzZSgpJiYobS50eXBlPVwiTWVzaFN0YW5kYXJkTWF0ZXJpYWxcIik7YnJlYWs7Y2FzZSBcIm1hcERpZmZ1c2VcIjptLm1hcD1oKG4sZS5tYXBEaWZmdXNlUmVwZWF0LGUubWFwRGlmZnVzZU9mZnNldCxlLm1hcERpZmZ1c2VXcmFwLGUubWFwRGlmZnVzZUFuaXNvdHJvcHkpO2JyZWFrO2Nhc2UgXCJtYXBEaWZmdXNlUmVwZWF0XCI6Y2FzZSBcIm1hcERpZmZ1c2VPZmZzZXRcIjpjYXNlIFwibWFwRGlmZnVzZVdyYXBcIjpjYXNlIFwibWFwRGlmZnVzZUFuaXNvdHJvcHlcIjpicmVhaztjYXNlIFwibWFwRW1pc3NpdmVcIjptLmVtaXNzaXZlTWFwPWgobixlLm1hcEVtaXNzaXZlUmVwZWF0LGUubWFwRW1pc3NpdmVPZmZzZXQsZS5tYXBFbWlzc2l2ZVdyYXAsZS5tYXBFbWlzc2l2ZUFuaXNvdHJvcHkpO2JyZWFrO2Nhc2UgXCJtYXBFbWlzc2l2ZVJlcGVhdFwiOmNhc2UgXCJtYXBFbWlzc2l2ZU9mZnNldFwiOmNhc2UgXCJtYXBFbWlzc2l2ZVdyYXBcIjpjYXNlIFwibWFwRW1pc3NpdmVBbmlzb3Ryb3B5XCI6YnJlYWs7XG4gICAgY2FzZSBcIm1hcExpZ2h0XCI6bS5saWdodE1hcD1oKG4sZS5tYXBMaWdodFJlcGVhdCxlLm1hcExpZ2h0T2Zmc2V0LGUubWFwTGlnaHRXcmFwLGUubWFwTGlnaHRBbmlzb3Ryb3B5KTticmVhaztjYXNlIFwibWFwTGlnaHRSZXBlYXRcIjpjYXNlIFwibWFwTGlnaHRPZmZzZXRcIjpjYXNlIFwibWFwTGlnaHRXcmFwXCI6Y2FzZSBcIm1hcExpZ2h0QW5pc290cm9weVwiOmJyZWFrO2Nhc2UgXCJtYXBBT1wiOm0uYW9NYXA9aChuLGUubWFwQU9SZXBlYXQsZS5tYXBBT09mZnNldCxlLm1hcEFPV3JhcCxlLm1hcEFPQW5pc290cm9weSk7YnJlYWs7Y2FzZSBcIm1hcEFPUmVwZWF0XCI6Y2FzZSBcIm1hcEFPT2Zmc2V0XCI6Y2FzZSBcIm1hcEFPV3JhcFwiOmNhc2UgXCJtYXBBT0FuaXNvdHJvcHlcIjpicmVhaztjYXNlIFwibWFwQnVtcFwiOm0uYnVtcE1hcD1oKG4sZS5tYXBCdW1wUmVwZWF0LGUubWFwQnVtcE9mZnNldCxlLm1hcEJ1bXBXcmFwLGUubWFwQnVtcEFuaXNvdHJvcHkpO2JyZWFrO2Nhc2UgXCJtYXBCdW1wU2NhbGVcIjptLmJ1bXBTY2FsZT1cbiAgICBuO2JyZWFrO2Nhc2UgXCJtYXBCdW1wUmVwZWF0XCI6Y2FzZSBcIm1hcEJ1bXBPZmZzZXRcIjpjYXNlIFwibWFwQnVtcFdyYXBcIjpjYXNlIFwibWFwQnVtcEFuaXNvdHJvcHlcIjpicmVhaztjYXNlIFwibWFwTm9ybWFsXCI6bS5ub3JtYWxNYXA9aChuLGUubWFwTm9ybWFsUmVwZWF0LGUubWFwTm9ybWFsT2Zmc2V0LGUubWFwTm9ybWFsV3JhcCxlLm1hcE5vcm1hbEFuaXNvdHJvcHkpO2JyZWFrO2Nhc2UgXCJtYXBOb3JtYWxGYWN0b3JcIjptLm5vcm1hbFNjYWxlPVtuLG5dO2JyZWFrO2Nhc2UgXCJtYXBOb3JtYWxSZXBlYXRcIjpjYXNlIFwibWFwTm9ybWFsT2Zmc2V0XCI6Y2FzZSBcIm1hcE5vcm1hbFdyYXBcIjpjYXNlIFwibWFwTm9ybWFsQW5pc290cm9weVwiOmJyZWFrO2Nhc2UgXCJtYXBTcGVjdWxhclwiOm0uc3BlY3VsYXJNYXA9aChuLGUubWFwU3BlY3VsYXJSZXBlYXQsZS5tYXBTcGVjdWxhck9mZnNldCxlLm1hcFNwZWN1bGFyV3JhcCxlLm1hcFNwZWN1bGFyQW5pc290cm9weSk7YnJlYWs7Y2FzZSBcIm1hcFNwZWN1bGFyUmVwZWF0XCI6Y2FzZSBcIm1hcFNwZWN1bGFyT2Zmc2V0XCI6Y2FzZSBcIm1hcFNwZWN1bGFyV3JhcFwiOmNhc2UgXCJtYXBTcGVjdWxhckFuaXNvdHJvcHlcIjpicmVhaztcbiAgICBjYXNlIFwibWFwTWV0YWxuZXNzXCI6bS5tZXRhbG5lc3NNYXA9aChuLGUubWFwTWV0YWxuZXNzUmVwZWF0LGUubWFwTWV0YWxuZXNzT2Zmc2V0LGUubWFwTWV0YWxuZXNzV3JhcCxlLm1hcE1ldGFsbmVzc0FuaXNvdHJvcHkpO2JyZWFrO2Nhc2UgXCJtYXBNZXRhbG5lc3NSZXBlYXRcIjpjYXNlIFwibWFwTWV0YWxuZXNzT2Zmc2V0XCI6Y2FzZSBcIm1hcE1ldGFsbmVzc1dyYXBcIjpjYXNlIFwibWFwTWV0YWxuZXNzQW5pc290cm9weVwiOmJyZWFrO2Nhc2UgXCJtYXBSb3VnaG5lc3NcIjptLnJvdWdobmVzc01hcD1oKG4sZS5tYXBSb3VnaG5lc3NSZXBlYXQsZS5tYXBSb3VnaG5lc3NPZmZzZXQsZS5tYXBSb3VnaG5lc3NXcmFwLGUubWFwUm91Z2huZXNzQW5pc290cm9weSk7YnJlYWs7Y2FzZSBcIm1hcFJvdWdobmVzc1JlcGVhdFwiOmNhc2UgXCJtYXBSb3VnaG5lc3NPZmZzZXRcIjpjYXNlIFwibWFwUm91Z2huZXNzV3JhcFwiOmNhc2UgXCJtYXBSb3VnaG5lc3NBbmlzb3Ryb3B5XCI6YnJlYWs7Y2FzZSBcIm1hcEFscGhhXCI6bS5hbHBoYU1hcD1cbiAgICBoKG4sZS5tYXBBbHBoYVJlcGVhdCxlLm1hcEFscGhhT2Zmc2V0LGUubWFwQWxwaGFXcmFwLGUubWFwQWxwaGFBbmlzb3Ryb3B5KTticmVhaztjYXNlIFwibWFwQWxwaGFSZXBlYXRcIjpjYXNlIFwibWFwQWxwaGFPZmZzZXRcIjpjYXNlIFwibWFwQWxwaGFXcmFwXCI6Y2FzZSBcIm1hcEFscGhhQW5pc290cm9weVwiOmJyZWFrO2Nhc2UgXCJmbGlwU2lkZWRcIjptLnNpZGU9MTticmVhaztjYXNlIFwiZG91YmxlU2lkZWRcIjptLnNpZGU9MjticmVhaztjYXNlIFwidHJhbnNwYXJlbmN5XCI6Y29uc29sZS53YXJuKFwiVEhSRUUuTG9hZGVyLmNyZWF0ZU1hdGVyaWFsOiB0cmFuc3BhcmVuY3kgaGFzIGJlZW4gcmVuYW1lZCB0byBvcGFjaXR5XCIpO20ub3BhY2l0eT1uO2JyZWFrO2Nhc2UgXCJkZXB0aFRlc3RcIjpjYXNlIFwiZGVwdGhXcml0ZVwiOmNhc2UgXCJjb2xvcldyaXRlXCI6Y2FzZSBcIm9wYWNpdHlcIjpjYXNlIFwicmVmbGVjdGl2aXR5XCI6Y2FzZSBcInRyYW5zcGFyZW50XCI6Y2FzZSBcInZpc2libGVcIjpjYXNlIFwid2lyZWZyYW1lXCI6bVtsXT1cbiAgICBuO2JyZWFrO2Nhc2UgXCJ2ZXJ0ZXhDb2xvcnNcIjohMD09PW4mJihtLnZlcnRleENvbG9ycz0yKTtcImZhY2VcIj09PW4mJihtLnZlcnRleENvbG9ycz0xKTticmVhaztkZWZhdWx0OmNvbnNvbGUuZXJyb3IoXCJUSFJFRS5Mb2FkZXIuY3JlYXRlTWF0ZXJpYWw6IFVuc3VwcG9ydGVkXCIsbCxuKX19XCJNZXNoQmFzaWNNYXRlcmlhbFwiPT09bS50eXBlJiZkZWxldGUgbS5lbWlzc2l2ZTtcIk1lc2hQaG9uZ01hdGVyaWFsXCIhPT1tLnR5cGUmJmRlbGV0ZSBtLnNwZWN1bGFyOzE+bS5vcGFjaXR5JiYobS50cmFuc3BhcmVudD0hMCk7ZC5zZXRUZXh0dXJlcyhrKTtyZXR1cm4gZC5wYXJzZShtKX19KCl9KTt2YXIgSGU9e2RlY29kZVRleHQ6ZnVuY3Rpb24oYSl7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBUZXh0RGVjb2RlcilyZXR1cm4obmV3IFRleHREZWNvZGVyKS5kZWNvZGUoYSk7Zm9yKHZhciBiPVwiXCIsYz0wLGQ9YS5sZW5ndGg7YzxkO2MrKyliKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGFbY10pO3JldHVybiBifSxcbiAgICBleHRyYWN0VXJsQmFzZTpmdW5jdGlvbihhKXthPWEuc3BsaXQoXCIvXCIpO2lmKDE9PT1hLmxlbmd0aClyZXR1cm5cIi4vXCI7YS5wb3AoKTtyZXR1cm4gYS5qb2luKFwiL1wiKStcIi9cIn19O09iamVjdC5hc3NpZ24obWUucHJvdG90eXBlLHtsb2FkOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXRoaXMsZj10aGlzLnRleHR1cmVQYXRoJiZcInN0cmluZ1wiPT09dHlwZW9mIHRoaXMudGV4dHVyZVBhdGg/dGhpcy50ZXh0dXJlUGF0aDpIZS5leHRyYWN0VXJsQmFzZShhKSxnPW5ldyBOYSh0aGlzLm1hbmFnZXIpO2cuc2V0V2l0aENyZWRlbnRpYWxzKHRoaXMud2l0aENyZWRlbnRpYWxzKTtnLmxvYWQoYSxmdW5jdGlvbihjKXtjPUpTT04ucGFyc2UoYyk7dmFyIGQ9Yy5tZXRhZGF0YTtpZih2b2lkIDAhPT1kJiYoZD1kLnR5cGUsdm9pZCAwIT09ZCkpe2lmKFwib2JqZWN0XCI9PT1kLnRvTG93ZXJDYXNlKCkpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5KU09OTG9hZGVyOiBcIithK1wiIHNob3VsZCBiZSBsb2FkZWQgd2l0aCBUSFJFRS5PYmplY3RMb2FkZXIgaW5zdGVhZC5cIik7XG4gICAgcmV0dXJufWlmKFwic2NlbmVcIj09PWQudG9Mb3dlckNhc2UoKSl7Y29uc29sZS5lcnJvcihcIlRIUkVFLkpTT05Mb2FkZXI6IFwiK2ErXCIgc2hvdWxkIGJlIGxvYWRlZCB3aXRoIFRIUkVFLlNjZW5lTG9hZGVyIGluc3RlYWQuXCIpO3JldHVybn19Yz1lLnBhcnNlKGMsZik7YihjLmdlb21ldHJ5LGMubWF0ZXJpYWxzKX0sYyxkKX0sc2V0VGV4dHVyZVBhdGg6ZnVuY3Rpb24oYSl7dGhpcy50ZXh0dXJlUGF0aD1hfSxwYXJzZTpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihhLGIpe3ZvaWQgMCE9PWEuZGF0YSYmKGE9YS5kYXRhKTthLnNjYWxlPXZvaWQgMCE9PWEuc2NhbGU/MS9hLnNjYWxlOjE7dmFyIGM9bmV3IEwsZD1hLGUsZixnLGg9ZC5mYWNlczt2YXIgaz1kLnZlcnRpY2VzO3ZhciBtPWQubm9ybWFscyxsPWQuY29sb3JzO3ZhciBuPWQuc2NhbGU7dmFyIHU9MDtpZih2b2lkIDAhPT1kLnV2cyl7Zm9yKGU9MDtlPGQudXZzLmxlbmd0aDtlKyspZC51dnNbZV0ubGVuZ3RoJiZ1Kys7Zm9yKGU9XG4gICAgMDtlPHU7ZSsrKWMuZmFjZVZlcnRleFV2c1tlXT1bXX12YXIgcj0wO2ZvcihnPWsubGVuZ3RoO3I8ZzspZT1uZXcgcCxlLng9a1tyKytdKm4sZS55PWtbcisrXSpuLGUuej1rW3IrK10qbixjLnZlcnRpY2VzLnB1c2goZSk7cj0wO2ZvcihnPWgubGVuZ3RoO3I8Zzspe2s9aFtyKytdO3ZhciB0PWsmMTt2YXIgdj1rJjI7ZT1rJjg7dmFyIHc9ayYxNjt2YXIgej1rJjMyO249ayY2NDtrJj0xMjg7aWYodCl7dD1uZXcgWWE7dC5hPWhbcl07dC5iPWhbcisxXTt0LmM9aFtyKzNdO3ZhciB5PW5ldyBZYTt5LmE9aFtyKzFdO3kuYj1oW3IrMl07eS5jPWhbciszXTtyKz00O3YmJih2PWhbcisrXSx0Lm1hdGVyaWFsSW5kZXg9dix5Lm1hdGVyaWFsSW5kZXg9dik7dj1jLmZhY2VzLmxlbmd0aDtpZihlKWZvcihlPTA7ZTx1O2UrKyl7dmFyIHg9ZC51dnNbZV07Yy5mYWNlVmVydGV4VXZzW2VdW3ZdPVtdO2MuZmFjZVZlcnRleFV2c1tlXVt2KzFdPVtdO2ZvcihmPTA7ND5mO2YrKyl7dmFyIEE9aFtyKytdO1xuICAgIHZhciBCPXhbMipBXTtBPXhbMipBKzFdO0I9bmV3IEQoQixBKTsyIT09ZiYmYy5mYWNlVmVydGV4VXZzW2VdW3ZdLnB1c2goQik7MCE9PWYmJmMuZmFjZVZlcnRleFV2c1tlXVt2KzFdLnB1c2goQil9fXcmJih3PTMqaFtyKytdLHQubm9ybWFsLnNldChtW3crK10sbVt3KytdLG1bd10pLHkubm9ybWFsLmNvcHkodC5ub3JtYWwpKTtpZih6KWZvcihlPTA7ND5lO2UrKyl3PTMqaFtyKytdLHo9bmV3IHAobVt3KytdLG1bdysrXSxtW3ddKSwyIT09ZSYmdC52ZXJ0ZXhOb3JtYWxzLnB1c2goeiksMCE9PWUmJnkudmVydGV4Tm9ybWFscy5wdXNoKHopO24mJihuPWhbcisrXSxuPWxbbl0sdC5jb2xvci5zZXRIZXgobikseS5jb2xvci5zZXRIZXgobikpO2lmKGspZm9yKGU9MDs0PmU7ZSsrKW49aFtyKytdLG49bFtuXSwyIT09ZSYmdC52ZXJ0ZXhDb2xvcnMucHVzaChuZXcgSChuKSksMCE9PWUmJnkudmVydGV4Q29sb3JzLnB1c2gobmV3IEgobikpO2MuZmFjZXMucHVzaCh0KTtjLmZhY2VzLnB1c2goeSl9ZWxzZXt0PVxuICAgIG5ldyBZYTt0LmE9aFtyKytdO3QuYj1oW3IrK107dC5jPWhbcisrXTt2JiYodj1oW3IrK10sdC5tYXRlcmlhbEluZGV4PXYpO3Y9Yy5mYWNlcy5sZW5ndGg7aWYoZSlmb3IoZT0wO2U8dTtlKyspZm9yKHg9ZC51dnNbZV0sYy5mYWNlVmVydGV4VXZzW2VdW3ZdPVtdLGY9MDszPmY7ZisrKUE9aFtyKytdLEI9eFsyKkFdLEE9eFsyKkErMV0sQj1uZXcgRChCLEEpLGMuZmFjZVZlcnRleFV2c1tlXVt2XS5wdXNoKEIpO3cmJih3PTMqaFtyKytdLHQubm9ybWFsLnNldChtW3crK10sbVt3KytdLG1bd10pKTtpZih6KWZvcihlPTA7Mz5lO2UrKyl3PTMqaFtyKytdLHo9bmV3IHAobVt3KytdLG1bdysrXSxtW3ddKSx0LnZlcnRleE5vcm1hbHMucHVzaCh6KTtuJiYobj1oW3IrK10sdC5jb2xvci5zZXRIZXgobFtuXSkpO2lmKGspZm9yKGU9MDszPmU7ZSsrKW49aFtyKytdLHQudmVydGV4Q29sb3JzLnB1c2gobmV3IEgobFtuXSkpO2MuZmFjZXMucHVzaCh0KX19ZD1hO3I9dm9pZCAwIT09ZC5pbmZsdWVuY2VzUGVyVmVydGV4P1xuICAgIGQuaW5mbHVlbmNlc1BlclZlcnRleDoyO2lmKGQuc2tpbldlaWdodHMpZm9yKGc9MCxoPWQuc2tpbldlaWdodHMubGVuZ3RoO2c8aDtnKz1yKWMuc2tpbldlaWdodHMucHVzaChuZXcgYWEoZC5za2luV2VpZ2h0c1tnXSwxPHI/ZC5za2luV2VpZ2h0c1tnKzFdOjAsMjxyP2Quc2tpbldlaWdodHNbZysyXTowLDM8cj9kLnNraW5XZWlnaHRzW2crM106MCkpO2lmKGQuc2tpbkluZGljZXMpZm9yKGc9MCxoPWQuc2tpbkluZGljZXMubGVuZ3RoO2c8aDtnKz1yKWMuc2tpbkluZGljZXMucHVzaChuZXcgYWEoZC5za2luSW5kaWNlc1tnXSwxPHI/ZC5za2luSW5kaWNlc1tnKzFdOjAsMjxyP2Quc2tpbkluZGljZXNbZysyXTowLDM8cj9kLnNraW5JbmRpY2VzW2crM106MCkpO2MuYm9uZXM9ZC5ib25lcztjLmJvbmVzJiYwPGMuYm9uZXMubGVuZ3RoJiYoYy5za2luV2VpZ2h0cy5sZW5ndGghPT1jLnNraW5JbmRpY2VzLmxlbmd0aHx8Yy5za2luSW5kaWNlcy5sZW5ndGghPT1jLnZlcnRpY2VzLmxlbmd0aCkmJlxuICAgIGNvbnNvbGUud2FybihcIldoZW4gc2tpbm5pbmcsIG51bWJlciBvZiB2ZXJ0aWNlcyAoXCIrYy52ZXJ0aWNlcy5sZW5ndGgrXCIpLCBza2luSW5kaWNlcyAoXCIrYy5za2luSW5kaWNlcy5sZW5ndGgrXCIpLCBhbmQgc2tpbldlaWdodHMgKFwiK2Muc2tpbldlaWdodHMubGVuZ3RoK1wiKSBzaG91bGQgbWF0Y2guXCIpO2c9YTtoPWcuc2NhbGU7aWYodm9pZCAwIT09Zy5tb3JwaFRhcmdldHMpZm9yKGQ9MCxyPWcubW9ycGhUYXJnZXRzLmxlbmd0aDtkPHI7ZCsrKWZvcihjLm1vcnBoVGFyZ2V0c1tkXT17fSxjLm1vcnBoVGFyZ2V0c1tkXS5uYW1lPWcubW9ycGhUYXJnZXRzW2RdLm5hbWUsYy5tb3JwaFRhcmdldHNbZF0udmVydGljZXM9W10sbT1jLm1vcnBoVGFyZ2V0c1tkXS52ZXJ0aWNlcyxsPWcubW9ycGhUYXJnZXRzW2RdLnZlcnRpY2VzLHU9MCxrPWwubGVuZ3RoO3U8azt1Kz0zKW49bmV3IHAsbi54PWxbdV0qaCxuLnk9bFt1KzFdKmgsbi56PWxbdSsyXSpoLG0ucHVzaChuKTtpZih2b2lkIDAhPT1cbiAgICBnLm1vcnBoQ29sb3JzJiYwPGcubW9ycGhDb2xvcnMubGVuZ3RoKWZvcihjb25zb2xlLndhcm4oJ1RIUkVFLkpTT05Mb2FkZXI6IFwibW9ycGhDb2xvcnNcIiBubyBsb25nZXIgc3VwcG9ydGVkLiBVc2luZyB0aGVtIGFzIGZhY2UgY29sb3JzLicpLGg9Yy5mYWNlcyxnPWcubW9ycGhDb2xvcnNbMF0uY29sb3JzLGQ9MCxyPWgubGVuZ3RoO2Q8cjtkKyspaFtkXS5jb2xvci5mcm9tQXJyYXkoZywzKmQpO2c9YTtkPVtdO3I9W107dm9pZCAwIT09Zy5hbmltYXRpb24mJnIucHVzaChnLmFuaW1hdGlvbik7dm9pZCAwIT09Zy5hbmltYXRpb25zJiYoZy5hbmltYXRpb25zLmxlbmd0aD9yPXIuY29uY2F0KGcuYW5pbWF0aW9ucyk6ci5wdXNoKGcuYW5pbWF0aW9ucykpO2ZvcihnPTA7ZzxyLmxlbmd0aDtnKyspKGg9Q2EucGFyc2VBbmltYXRpb24ocltnXSxjLmJvbmVzKSkmJmQucHVzaChoKTtjLm1vcnBoVGFyZ2V0cyYmKHI9Q2EuQ3JlYXRlQ2xpcHNGcm9tTW9ycGhUYXJnZXRTZXF1ZW5jZXMoYy5tb3JwaFRhcmdldHMsXG4gICAgMTApLGQ9ZC5jb25jYXQocikpOzA8ZC5sZW5ndGgmJihjLmFuaW1hdGlvbnM9ZCk7Yy5jb21wdXRlRmFjZU5vcm1hbHMoKTtjLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO2lmKHZvaWQgMD09PWEubWF0ZXJpYWxzfHwwPT09YS5tYXRlcmlhbHMubGVuZ3RoKXJldHVybntnZW9tZXRyeTpjfTthPWtjLnByb3RvdHlwZS5pbml0TWF0ZXJpYWxzKGEubWF0ZXJpYWxzLGIsdGhpcy5jcm9zc09yaWdpbik7cmV0dXJue2dlb21ldHJ5OmMsbWF0ZXJpYWxzOmF9fX0oKX0pO09iamVjdC5hc3NpZ24oamYucHJvdG90eXBlLHtsb2FkOmZ1bmN0aW9uKGEsYixjLGQpe1wiXCI9PT10aGlzLnRleHR1cmVQYXRoJiYodGhpcy50ZXh0dXJlUGF0aD1hLnN1YnN0cmluZygwLGEubGFzdEluZGV4T2YoXCIvXCIpKzEpKTt2YXIgZT10aGlzOyhuZXcgTmEoZS5tYW5hZ2VyKSkubG9hZChhLGZ1bmN0aW9uKGMpe3ZhciBmPW51bGw7dHJ5e2Y9SlNPTi5wYXJzZShjKX1jYXRjaChoKXt2b2lkIDAhPT1kJiZkKGgpO2NvbnNvbGUuZXJyb3IoXCJUSFJFRTpPYmplY3RMb2FkZXI6IENhbid0IHBhcnNlIFwiK1xuICAgIGErXCIuXCIsaC5tZXNzYWdlKTtyZXR1cm59Yz1mLm1ldGFkYXRhO3ZvaWQgMD09PWN8fHZvaWQgMD09PWMudHlwZXx8XCJnZW9tZXRyeVwiPT09Yy50eXBlLnRvTG93ZXJDYXNlKCk/Y29uc29sZS5lcnJvcihcIlRIUkVFLk9iamVjdExvYWRlcjogQ2FuJ3QgbG9hZCBcIithK1wiLiBVc2UgVEhSRUUuSlNPTkxvYWRlciBpbnN0ZWFkLlwiKTplLnBhcnNlKGYsYil9LGMsZCl9LHNldFRleHR1cmVQYXRoOmZ1bmN0aW9uKGEpe3RoaXMudGV4dHVyZVBhdGg9YX0sc2V0Q3Jvc3NPcmlnaW46ZnVuY3Rpb24oYSl7dGhpcy5jcm9zc09yaWdpbj1hfSxwYXJzZTpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMucGFyc2VTaGFwZShhLnNoYXBlcyksYz10aGlzLnBhcnNlR2VvbWV0cmllcyhhLmdlb21ldHJpZXMsYyksZD10aGlzLnBhcnNlSW1hZ2VzKGEuaW1hZ2VzLGZ1bmN0aW9uKCl7dm9pZCAwIT09YiYmYihlKX0pLGQ9dGhpcy5wYXJzZVRleHR1cmVzKGEudGV4dHVyZXMsZCksZD10aGlzLnBhcnNlTWF0ZXJpYWxzKGEubWF0ZXJpYWxzLFxuICAgIGQpLGU9dGhpcy5wYXJzZU9iamVjdChhLm9iamVjdCxjLGQpO2EuYW5pbWF0aW9ucyYmKGUuYW5pbWF0aW9ucz10aGlzLnBhcnNlQW5pbWF0aW9ucyhhLmFuaW1hdGlvbnMpKTt2b2lkIDAhPT1hLmltYWdlcyYmMCE9PWEuaW1hZ2VzLmxlbmd0aHx8dm9pZCAwPT09Ynx8YihlKTtyZXR1cm4gZX0scGFyc2VTaGFwZTpmdW5jdGlvbihhKXt2YXIgYj17fTtpZih2b2lkIDAhPT1hKWZvcih2YXIgYz0wLGQ9YS5sZW5ndGg7YzxkO2MrKyl7dmFyIGU9KG5ldyBqYikuZnJvbUpTT04oYVtjXSk7YltlLnV1aWRdPWV9cmV0dXJuIGJ9LHBhcnNlR2VvbWV0cmllczpmdW5jdGlvbihhLGIpe3ZhciBjPXt9O2lmKHZvaWQgMCE9PWEpZm9yKHZhciBkPW5ldyBtZSxlPW5ldyBsZSxmPTAsZz1hLmxlbmd0aDtmPGc7ZisrKXt2YXIgaD1hW2ZdO3N3aXRjaChoLnR5cGUpe2Nhc2UgXCJQbGFuZUdlb21ldHJ5XCI6Y2FzZSBcIlBsYW5lQnVmZmVyR2VvbWV0cnlcIjp2YXIgaz1uZXcga2FbaC50eXBlXShoLndpZHRoLFxuICAgIGguaGVpZ2h0LGgud2lkdGhTZWdtZW50cyxoLmhlaWdodFNlZ21lbnRzKTticmVhaztjYXNlIFwiQm94R2VvbWV0cnlcIjpjYXNlIFwiQm94QnVmZmVyR2VvbWV0cnlcIjpjYXNlIFwiQ3ViZUdlb21ldHJ5XCI6az1uZXcga2FbaC50eXBlXShoLndpZHRoLGguaGVpZ2h0LGguZGVwdGgsaC53aWR0aFNlZ21lbnRzLGguaGVpZ2h0U2VnbWVudHMsaC5kZXB0aFNlZ21lbnRzKTticmVhaztjYXNlIFwiQ2lyY2xlR2VvbWV0cnlcIjpjYXNlIFwiQ2lyY2xlQnVmZmVyR2VvbWV0cnlcIjprPW5ldyBrYVtoLnR5cGVdKGgucmFkaXVzLGguc2VnbWVudHMsaC50aGV0YVN0YXJ0LGgudGhldGFMZW5ndGgpO2JyZWFrO2Nhc2UgXCJDeWxpbmRlckdlb21ldHJ5XCI6Y2FzZSBcIkN5bGluZGVyQnVmZmVyR2VvbWV0cnlcIjprPW5ldyBrYVtoLnR5cGVdKGgucmFkaXVzVG9wLGgucmFkaXVzQm90dG9tLGguaGVpZ2h0LGgucmFkaWFsU2VnbWVudHMsaC5oZWlnaHRTZWdtZW50cyxoLm9wZW5FbmRlZCxoLnRoZXRhU3RhcnQsaC50aGV0YUxlbmd0aCk7XG4gICAgYnJlYWs7Y2FzZSBcIkNvbmVHZW9tZXRyeVwiOmNhc2UgXCJDb25lQnVmZmVyR2VvbWV0cnlcIjprPW5ldyBrYVtoLnR5cGVdKGgucmFkaXVzLGguaGVpZ2h0LGgucmFkaWFsU2VnbWVudHMsaC5oZWlnaHRTZWdtZW50cyxoLm9wZW5FbmRlZCxoLnRoZXRhU3RhcnQsaC50aGV0YUxlbmd0aCk7YnJlYWs7Y2FzZSBcIlNwaGVyZUdlb21ldHJ5XCI6Y2FzZSBcIlNwaGVyZUJ1ZmZlckdlb21ldHJ5XCI6az1uZXcga2FbaC50eXBlXShoLnJhZGl1cyxoLndpZHRoU2VnbWVudHMsaC5oZWlnaHRTZWdtZW50cyxoLnBoaVN0YXJ0LGgucGhpTGVuZ3RoLGgudGhldGFTdGFydCxoLnRoZXRhTGVuZ3RoKTticmVhaztjYXNlIFwiRG9kZWNhaGVkcm9uR2VvbWV0cnlcIjpjYXNlIFwiRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnlcIjpjYXNlIFwiSWNvc2FoZWRyb25HZW9tZXRyeVwiOmNhc2UgXCJJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5XCI6Y2FzZSBcIk9jdGFoZWRyb25HZW9tZXRyeVwiOmNhc2UgXCJPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnlcIjpjYXNlIFwiVGV0cmFoZWRyb25HZW9tZXRyeVwiOmNhc2UgXCJUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5XCI6az1cbiAgICBuZXcga2FbaC50eXBlXShoLnJhZGl1cyxoLmRldGFpbCk7YnJlYWs7Y2FzZSBcIlJpbmdHZW9tZXRyeVwiOmNhc2UgXCJSaW5nQnVmZmVyR2VvbWV0cnlcIjprPW5ldyBrYVtoLnR5cGVdKGguaW5uZXJSYWRpdXMsaC5vdXRlclJhZGl1cyxoLnRoZXRhU2VnbWVudHMsaC5waGlTZWdtZW50cyxoLnRoZXRhU3RhcnQsaC50aGV0YUxlbmd0aCk7YnJlYWs7Y2FzZSBcIlRvcnVzR2VvbWV0cnlcIjpjYXNlIFwiVG9ydXNCdWZmZXJHZW9tZXRyeVwiOms9bmV3IGthW2gudHlwZV0oaC5yYWRpdXMsaC50dWJlLGgucmFkaWFsU2VnbWVudHMsaC50dWJ1bGFyU2VnbWVudHMsaC5hcmMpO2JyZWFrO2Nhc2UgXCJUb3J1c0tub3RHZW9tZXRyeVwiOmNhc2UgXCJUb3J1c0tub3RCdWZmZXJHZW9tZXRyeVwiOms9bmV3IGthW2gudHlwZV0oaC5yYWRpdXMsaC50dWJlLGgudHVidWxhclNlZ21lbnRzLGgucmFkaWFsU2VnbWVudHMsaC5wLGgucSk7YnJlYWs7Y2FzZSBcIkxhdGhlR2VvbWV0cnlcIjpjYXNlIFwiTGF0aGVCdWZmZXJHZW9tZXRyeVwiOms9XG4gICAgbmV3IGthW2gudHlwZV0oaC5wb2ludHMsaC5zZWdtZW50cyxoLnBoaVN0YXJ0LGgucGhpTGVuZ3RoKTticmVhaztjYXNlIFwiUG9seWhlZHJvbkdlb21ldHJ5XCI6Y2FzZSBcIlBvbHloZWRyb25CdWZmZXJHZW9tZXRyeVwiOms9bmV3IGthW2gudHlwZV0oaC52ZXJ0aWNlcyxoLmluZGljZXMsaC5yYWRpdXMsaC5kZXRhaWxzKTticmVhaztjYXNlIFwiU2hhcGVHZW9tZXRyeVwiOmNhc2UgXCJTaGFwZUJ1ZmZlckdlb21ldHJ5XCI6az1bXTtmPTA7Zm9yKGc9aC5zaGFwZXMubGVuZ3RoO2Y8ZztmKyspay5wdXNoKGJbaC5zaGFwZXNbZl1dKTtrPW5ldyBrYVtoLnR5cGVdKGssaC5jdXJ2ZVNlZ21lbnRzKTticmVhaztjYXNlIFwiQnVmZmVyR2VvbWV0cnlcIjprPWUucGFyc2UoaCk7YnJlYWs7Y2FzZSBcIkdlb21ldHJ5XCI6az1kLnBhcnNlKGgsdGhpcy50ZXh0dXJlUGF0aCkuZ2VvbWV0cnk7YnJlYWs7ZGVmYXVsdDpjb25zb2xlLndhcm4oJ1RIUkVFLk9iamVjdExvYWRlcjogVW5zdXBwb3J0ZWQgZ2VvbWV0cnkgdHlwZSBcIicrXG4gICAgaC50eXBlKydcIicpO2NvbnRpbnVlfWsudXVpZD1oLnV1aWQ7dm9pZCAwIT09aC5uYW1lJiYoay5uYW1lPWgubmFtZSk7Y1toLnV1aWRdPWt9cmV0dXJuIGN9LHBhcnNlTWF0ZXJpYWxzOmZ1bmN0aW9uKGEsYil7dmFyIGM9e307aWYodm9pZCAwIT09YSl7dmFyIGQ9bmV3IFBkO2Quc2V0VGV4dHVyZXMoYik7Yj0wO2Zvcih2YXIgZT1hLmxlbmd0aDtiPGU7YisrKXt2YXIgZj1hW2JdO2lmKFwiTXVsdGlNYXRlcmlhbFwiPT09Zi50eXBlKXtmb3IodmFyIGc9W10saD0wO2g8Zi5tYXRlcmlhbHMubGVuZ3RoO2grKylnLnB1c2goZC5wYXJzZShmLm1hdGVyaWFsc1toXSkpO2NbZi51dWlkXT1nfWVsc2UgY1tmLnV1aWRdPWQucGFyc2UoZil9fXJldHVybiBjfSxwYXJzZUFuaW1hdGlvbnM6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9Q2EucGFyc2UoYVtjXSk7Yi5wdXNoKGQpfXJldHVybiBifSxwYXJzZUltYWdlczpmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYSl7ZC5tYW5hZ2VyLml0ZW1TdGFydChhKTtcbiAgICByZXR1cm4gZi5sb2FkKGEsZnVuY3Rpb24oKXtkLm1hbmFnZXIuaXRlbUVuZChhKX0sdm9pZCAwLGZ1bmN0aW9uKCl7ZC5tYW5hZ2VyLml0ZW1FbmQoYSk7ZC5tYW5hZ2VyLml0ZW1FcnJvcihhKX0pfXZhciBkPXRoaXMsZT17fTtpZih2b2lkIDAhPT1hJiYwPGEubGVuZ3RoKXtiPW5ldyBoZShiKTt2YXIgZj1uZXcgYWQoYik7Zi5zZXRDcm9zc09yaWdpbih0aGlzLmNyb3NzT3JpZ2luKTtiPTA7Zm9yKHZhciBnPWEubGVuZ3RoO2I8ZztiKyspe3ZhciBoPWFbYl0saz0vXihcXC9cXC8pfChbYS16XSs6KFxcL1xcLyk/KS9pLnRlc3QoaC51cmwpP2gudXJsOmQudGV4dHVyZVBhdGgraC51cmw7ZVtoLnV1aWRdPWMoayl9fXJldHVybiBlfSxwYXJzZVRleHR1cmVzOmZ1bmN0aW9uKGEsYil7ZnVuY3Rpb24gYyhhLGIpe2lmKFwibnVtYmVyXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtjb25zb2xlLndhcm4oXCJUSFJFRS5PYmplY3RMb2FkZXIucGFyc2VUZXh0dXJlOiBDb25zdGFudCBzaG91bGQgYmUgaW4gbnVtZXJpYyBmb3JtLlwiLFxuICAgIGEpO3JldHVybiBiW2FdfXZhciBkPXt9O2lmKHZvaWQgMCE9PWEpZm9yKHZhciBlPTAsZj1hLmxlbmd0aDtlPGY7ZSsrKXt2YXIgZz1hW2VdO3ZvaWQgMD09PWcuaW1hZ2UmJmNvbnNvbGUud2FybignVEhSRUUuT2JqZWN0TG9hZGVyOiBObyBcImltYWdlXCIgc3BlY2lmaWVkIGZvcicsZy51dWlkKTt2b2lkIDA9PT1iW2cuaW1hZ2VdJiZjb25zb2xlLndhcm4oXCJUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBpbWFnZVwiLGcuaW1hZ2UpO3ZhciBoPW5ldyBVKGJbZy5pbWFnZV0pO2gubmVlZHNVcGRhdGU9ITA7aC51dWlkPWcudXVpZDt2b2lkIDAhPT1nLm5hbWUmJihoLm5hbWU9Zy5uYW1lKTt2b2lkIDAhPT1nLm1hcHBpbmcmJihoLm1hcHBpbmc9YyhnLm1hcHBpbmcsT2cpKTt2b2lkIDAhPT1nLm9mZnNldCYmaC5vZmZzZXQuZnJvbUFycmF5KGcub2Zmc2V0KTt2b2lkIDAhPT1nLnJlcGVhdCYmaC5yZXBlYXQuZnJvbUFycmF5KGcucmVwZWF0KTt2b2lkIDAhPT1nLmNlbnRlciYmaC5jZW50ZXIuZnJvbUFycmF5KGcuY2VudGVyKTtcbiAgICB2b2lkIDAhPT1nLnJvdGF0aW9uJiYoaC5yb3RhdGlvbj1nLnJvdGF0aW9uKTt2b2lkIDAhPT1nLndyYXAmJihoLndyYXBTPWMoZy53cmFwWzBdLHlmKSxoLndyYXBUPWMoZy53cmFwWzFdLHlmKSk7dm9pZCAwIT09Zy5taW5GaWx0ZXImJihoLm1pbkZpbHRlcj1jKGcubWluRmlsdGVyLHpmKSk7dm9pZCAwIT09Zy5tYWdGaWx0ZXImJihoLm1hZ0ZpbHRlcj1jKGcubWFnRmlsdGVyLHpmKSk7dm9pZCAwIT09Zy5hbmlzb3Ryb3B5JiYoaC5hbmlzb3Ryb3B5PWcuYW5pc290cm9weSk7dm9pZCAwIT09Zy5mbGlwWSYmKGguZmxpcFk9Zy5mbGlwWSk7ZFtnLnV1aWRdPWh9cmV0dXJuIGR9LHBhcnNlT2JqZWN0OmZ1bmN0aW9uKCl7dmFyIGE9bmV3IE87cmV0dXJuIGZ1bmN0aW9uKGIsYyxkKXtmdW5jdGlvbiBlKGEpe3ZvaWQgMD09PWNbYV0mJmNvbnNvbGUud2FybihcIlRIUkVFLk9iamVjdExvYWRlcjogVW5kZWZpbmVkIGdlb21ldHJ5XCIsYSk7cmV0dXJuIGNbYV19ZnVuY3Rpb24gZihhKXtpZih2b2lkIDAhPT1cbiAgICBhKXtpZihBcnJheS5pc0FycmF5KGEpKXtmb3IodmFyIGI9W10sYz0wLGU9YS5sZW5ndGg7YzxlO2MrKyl7dmFyIGY9YVtjXTt2b2lkIDA9PT1kW2ZdJiZjb25zb2xlLndhcm4oXCJUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBtYXRlcmlhbFwiLGYpO2IucHVzaChkW2ZdKX1yZXR1cm4gYn12b2lkIDA9PT1kW2FdJiZjb25zb2xlLndhcm4oXCJUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBtYXRlcmlhbFwiLGEpO3JldHVybiBkW2FdfX1zd2l0Y2goYi50eXBlKXtjYXNlIFwiU2NlbmVcIjp2YXIgZz1uZXcgdmQ7dm9pZCAwIT09Yi5iYWNrZ3JvdW5kJiZOdW1iZXIuaXNJbnRlZ2VyKGIuYmFja2dyb3VuZCkmJihnLmJhY2tncm91bmQ9bmV3IEgoYi5iYWNrZ3JvdW5kKSk7dm9pZCAwIT09Yi5mb2cmJihcIkZvZ1wiPT09Yi5mb2cudHlwZT9nLmZvZz1uZXcgUWIoYi5mb2cuY29sb3IsYi5mb2cubmVhcixiLmZvZy5mYXIpOlwiRm9nRXhwMlwiPT09Yi5mb2cudHlwZSYmKGcuZm9nPW5ldyBQYihiLmZvZy5jb2xvcixcbiAgICBiLmZvZy5kZW5zaXR5KSkpO2JyZWFrO2Nhc2UgXCJQZXJzcGVjdGl2ZUNhbWVyYVwiOmc9bmV3IGJhKGIuZm92LGIuYXNwZWN0LGIubmVhcixiLmZhcik7dm9pZCAwIT09Yi5mb2N1cyYmKGcuZm9jdXM9Yi5mb2N1cyk7dm9pZCAwIT09Yi56b29tJiYoZy56b29tPWIuem9vbSk7dm9pZCAwIT09Yi5maWxtR2F1Z2UmJihnLmZpbG1HYXVnZT1iLmZpbG1HYXVnZSk7dm9pZCAwIT09Yi5maWxtT2Zmc2V0JiYoZy5maWxtT2Zmc2V0PWIuZmlsbU9mZnNldCk7dm9pZCAwIT09Yi52aWV3JiYoZy52aWV3PU9iamVjdC5hc3NpZ24oe30sYi52aWV3KSk7YnJlYWs7Y2FzZSBcIk9ydGhvZ3JhcGhpY0NhbWVyYVwiOmc9bmV3IExiKGIubGVmdCxiLnJpZ2h0LGIudG9wLGIuYm90dG9tLGIubmVhcixiLmZhcik7YnJlYWs7Y2FzZSBcIkFtYmllbnRMaWdodFwiOmc9bmV3IEhkKGIuY29sb3IsYi5pbnRlbnNpdHkpO2JyZWFrO2Nhc2UgXCJEaXJlY3Rpb25hbExpZ2h0XCI6Zz1uZXcgR2QoYi5jb2xvcixiLmludGVuc2l0eSk7XG4gICAgYnJlYWs7Y2FzZSBcIlBvaW50TGlnaHRcIjpnPW5ldyBFZChiLmNvbG9yLGIuaW50ZW5zaXR5LGIuZGlzdGFuY2UsYi5kZWNheSk7YnJlYWs7Y2FzZSBcIlJlY3RBcmVhTGlnaHRcIjpnPW5ldyBJZChiLmNvbG9yLGIuaW50ZW5zaXR5LGIud2lkdGgsYi5oZWlnaHQpO2JyZWFrO2Nhc2UgXCJTcG90TGlnaHRcIjpnPW5ldyBEZChiLmNvbG9yLGIuaW50ZW5zaXR5LGIuZGlzdGFuY2UsYi5hbmdsZSxiLnBlbnVtYnJhLGIuZGVjYXkpO2JyZWFrO2Nhc2UgXCJIZW1pc3BoZXJlTGlnaHRcIjpnPW5ldyBCZChiLmNvbG9yLGIuZ3JvdW5kQ29sb3IsYi5pbnRlbnNpdHkpO2JyZWFrO2Nhc2UgXCJTa2lubmVkTWVzaFwiOmNvbnNvbGUud2FybihcIlRIUkVFLk9iamVjdExvYWRlci5wYXJzZU9iamVjdCgpIGRvZXMgbm90IHN1cHBvcnQgU2tpbm5lZE1lc2ggeWV0LlwiKTtjYXNlIFwiTWVzaFwiOmc9ZShiLmdlb21ldHJ5KTt2YXIgaD1mKGIubWF0ZXJpYWwpO2c9Zy5ib25lcyYmMDxnLmJvbmVzLmxlbmd0aD9uZXcgeGQoZyxcbiAgICBoKTpuZXcgcmEoZyxoKTticmVhaztjYXNlIFwiTE9EXCI6Zz1uZXcgRGM7YnJlYWs7Y2FzZSBcIkxpbmVcIjpnPW5ldyBzYShlKGIuZ2VvbWV0cnkpLGYoYi5tYXRlcmlhbCksYi5tb2RlKTticmVhaztjYXNlIFwiTGluZUxvb3BcIjpnPW5ldyB5ZChlKGIuZ2VvbWV0cnkpLGYoYi5tYXRlcmlhbCkpO2JyZWFrO2Nhc2UgXCJMaW5lU2VnbWVudHNcIjpnPW5ldyBYKGUoYi5nZW9tZXRyeSksZihiLm1hdGVyaWFsKSk7YnJlYWs7Y2FzZSBcIlBvaW50Q2xvdWRcIjpjYXNlIFwiUG9pbnRzXCI6Zz1uZXcgUmIoZShiLmdlb21ldHJ5KSxmKGIubWF0ZXJpYWwpKTticmVhaztjYXNlIFwiU3ByaXRlXCI6Zz1uZXcgQ2MoZihiLm1hdGVyaWFsKSk7YnJlYWs7Y2FzZSBcIkdyb3VwXCI6Zz1uZXcgRmM7YnJlYWs7ZGVmYXVsdDpnPW5ldyB4fWcudXVpZD1iLnV1aWQ7dm9pZCAwIT09Yi5uYW1lJiYoZy5uYW1lPWIubmFtZSk7dm9pZCAwIT09Yi5tYXRyaXg/KGEuZnJvbUFycmF5KGIubWF0cml4KSxhLmRlY29tcG9zZShnLnBvc2l0aW9uLFxuICAgIGcucXVhdGVybmlvbixnLnNjYWxlKSk6KHZvaWQgMCE9PWIucG9zaXRpb24mJmcucG9zaXRpb24uZnJvbUFycmF5KGIucG9zaXRpb24pLHZvaWQgMCE9PWIucm90YXRpb24mJmcucm90YXRpb24uZnJvbUFycmF5KGIucm90YXRpb24pLHZvaWQgMCE9PWIucXVhdGVybmlvbiYmZy5xdWF0ZXJuaW9uLmZyb21BcnJheShiLnF1YXRlcm5pb24pLHZvaWQgMCE9PWIuc2NhbGUmJmcuc2NhbGUuZnJvbUFycmF5KGIuc2NhbGUpKTt2b2lkIDAhPT1iLmNhc3RTaGFkb3cmJihnLmNhc3RTaGFkb3c9Yi5jYXN0U2hhZG93KTt2b2lkIDAhPT1iLnJlY2VpdmVTaGFkb3cmJihnLnJlY2VpdmVTaGFkb3c9Yi5yZWNlaXZlU2hhZG93KTtiLnNoYWRvdyYmKHZvaWQgMCE9PWIuc2hhZG93LmJpYXMmJihnLnNoYWRvdy5iaWFzPWIuc2hhZG93LmJpYXMpLHZvaWQgMCE9PWIuc2hhZG93LnJhZGl1cyYmKGcuc2hhZG93LnJhZGl1cz1iLnNoYWRvdy5yYWRpdXMpLHZvaWQgMCE9PWIuc2hhZG93Lm1hcFNpemUmJlxuICAgIGcuc2hhZG93Lm1hcFNpemUuZnJvbUFycmF5KGIuc2hhZG93Lm1hcFNpemUpLHZvaWQgMCE9PWIuc2hhZG93LmNhbWVyYSYmKGcuc2hhZG93LmNhbWVyYT10aGlzLnBhcnNlT2JqZWN0KGIuc2hhZG93LmNhbWVyYSkpKTt2b2lkIDAhPT1iLnZpc2libGUmJihnLnZpc2libGU9Yi52aXNpYmxlKTt2b2lkIDAhPT1iLnVzZXJEYXRhJiYoZy51c2VyRGF0YT1iLnVzZXJEYXRhKTtpZih2b2lkIDAhPT1iLmNoaWxkcmVuKWZvcih2YXIgaD1iLmNoaWxkcmVuLGs9MDtrPGgubGVuZ3RoO2srKylnLmFkZCh0aGlzLnBhcnNlT2JqZWN0KGhba10sYyxkKSk7aWYoXCJMT0RcIj09PWIudHlwZSlmb3IoYj1iLmxldmVscyxoPTA7aDxiLmxlbmd0aDtoKyspe3ZhciBrPWJbaF0sbT1nLmdldE9iamVjdEJ5UHJvcGVydHkoXCJ1dWlkXCIsay5vYmplY3QpO3ZvaWQgMCE9PW0mJmcuYWRkTGV2ZWwobSxrLmRpc3RhbmNlKX1yZXR1cm4gZ319KCl9KTt2YXIgT2c9e1VWTWFwcGluZzozMDAsQ3ViZVJlZmxlY3Rpb25NYXBwaW5nOjMwMSxcbiAgICBDdWJlUmVmcmFjdGlvbk1hcHBpbmc6MzAyLEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nOjMwMyxFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZzozMDQsU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmc6MzA1LEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nOjMwNixDdWJlVVZSZWZyYWN0aW9uTWFwcGluZzozMDd9LHlmPXtSZXBlYXRXcmFwcGluZzoxRTMsQ2xhbXBUb0VkZ2VXcmFwcGluZzoxMDAxLE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc6MTAwMn0semY9e05lYXJlc3RGaWx0ZXI6MTAwMyxOZWFyZXN0TWlwTWFwTmVhcmVzdEZpbHRlcjoxMDA0LE5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXI6MTAwNSxMaW5lYXJGaWx0ZXI6MTAwNixMaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyOjEwMDcsTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyOjEwMDh9O25lLnByb3RvdHlwZT17Y29uc3RydWN0b3I6bmUsc2V0T3B0aW9uczpmdW5jdGlvbihhKXt0aGlzLm9wdGlvbnM9YTtyZXR1cm4gdGhpc30sXG4gICAgbG9hZDpmdW5jdGlvbihhLGIsYyxkKXt2b2lkIDA9PT1hJiYoYT1cIlwiKTt2b2lkIDAhPT10aGlzLnBhdGgmJihhPXRoaXMucGF0aCthKTt2YXIgZT10aGlzLGY9SWIuZ2V0KGEpO2lmKHZvaWQgMCE9PWYpcmV0dXJuIGUubWFuYWdlci5pdGVtU3RhcnQoYSksc2V0VGltZW91dChmdW5jdGlvbigpe2ImJmIoZik7ZS5tYW5hZ2VyLml0ZW1FbmQoYSl9LDApLGY7ZmV0Y2goYSkudGhlbihmdW5jdGlvbihhKXtyZXR1cm4gYS5ibG9iKCl9KS50aGVuKGZ1bmN0aW9uKGEpe3JldHVybiBjcmVhdGVJbWFnZUJpdG1hcChhLGUub3B0aW9ucyl9KS50aGVuKGZ1bmN0aW9uKGMpe0liLmFkZChhLGMpO2ImJmIoYyk7ZS5tYW5hZ2VyLml0ZW1FbmQoYSl9KS5jYXRjaChmdW5jdGlvbihiKXtkJiZkKGIpO2UubWFuYWdlci5pdGVtRW5kKGEpO2UubWFuYWdlci5pdGVtRXJyb3IoYSl9KX0sc2V0Q3Jvc3NPcmlnaW46ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sc2V0UGF0aDpmdW5jdGlvbihhKXt0aGlzLnBhdGg9XG4gICAgYTtyZXR1cm4gdGhpc319O09iamVjdC5hc3NpZ24ob2UucHJvdG90eXBlLHttb3ZlVG86ZnVuY3Rpb24oYSxiKXt0aGlzLmN1cnJlbnRQYXRoPW5ldyBTYTt0aGlzLnN1YlBhdGhzLnB1c2godGhpcy5jdXJyZW50UGF0aCk7dGhpcy5jdXJyZW50UGF0aC5tb3ZlVG8oYSxiKX0sbGluZVRvOmZ1bmN0aW9uKGEsYil7dGhpcy5jdXJyZW50UGF0aC5saW5lVG8oYSxiKX0scXVhZHJhdGljQ3VydmVUbzpmdW5jdGlvbihhLGIsYyxkKXt0aGlzLmN1cnJlbnRQYXRoLnF1YWRyYXRpY0N1cnZlVG8oYSxiLGMsZCl9LGJlemllckN1cnZlVG86ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe3RoaXMuY3VycmVudFBhdGguYmV6aWVyQ3VydmVUbyhhLGIsYyxkLGUsZil9LHNwbGluZVRocnU6ZnVuY3Rpb24oYSl7dGhpcy5jdXJyZW50UGF0aC5zcGxpbmVUaHJ1KGEpfSx0b1NoYXBlczpmdW5jdGlvbihhLGIpe2Z1bmN0aW9uIGMoYSl7Zm9yKHZhciBiPVtdLGM9MCxkPWEubGVuZ3RoO2M8ZDtjKyspe3ZhciBlPVxuICAgIGFbY10sZj1uZXcgamI7Zi5jdXJ2ZXM9ZS5jdXJ2ZXM7Yi5wdXNoKGYpfXJldHVybiBifWZ1bmN0aW9uIGQoYSxiKXtmb3IodmFyIGM9Yi5sZW5ndGgsZD0hMSxlPWMtMSxmPTA7ZjxjO2U9ZisrKXt2YXIgZz1iW2VdLGg9YltmXSxrPWgueC1nLngsbT1oLnktZy55O2lmKE1hdGguYWJzKG0pPk51bWJlci5FUFNJTE9OKXtpZigwPm0mJihnPWJbZl0saz0tayxoPWJbZV0sbT0tbSksIShhLnk8Zy55fHxhLnk+aC55KSlpZihhLnk9PT1nLnkpe2lmKGEueD09PWcueClyZXR1cm4hMH1lbHNle2U9bSooYS54LWcueCktayooYS55LWcueSk7aWYoMD09PWUpcmV0dXJuITA7MD5lfHwoZD0hZCl9fWVsc2UgaWYoYS55PT09Zy55JiYoaC54PD1hLngmJmEueDw9Zy54fHxnLng8PWEueCYmYS54PD1oLngpKXJldHVybiEwfXJldHVybiBkfXZhciBlPSRhLmlzQ2xvY2tXaXNlLGY9dGhpcy5zdWJQYXRocztpZigwPT09Zi5sZW5ndGgpcmV0dXJuW107aWYoITA9PT1iKXJldHVybiBjKGYpO2I9W107aWYoMT09PVxuICAgIGYubGVuZ3RoKXt2YXIgZz1mWzBdO3ZhciBoPW5ldyBqYjtoLmN1cnZlcz1nLmN1cnZlcztiLnB1c2goaCk7cmV0dXJuIGJ9dmFyIGs9IWUoZlswXS5nZXRQb2ludHMoKSksaz1hPyFrOms7aD1bXTt2YXIgbT1bXSxsPVtdLG49MDttW25dPXZvaWQgMDtsW25dPVtdO2Zvcih2YXIgcD0wLHI9Zi5sZW5ndGg7cDxyO3ArKyl7Zz1mW3BdO3ZhciB0PWcuZ2V0UG9pbnRzKCk7dmFyIHY9ZSh0KTsodj1hPyF2OnYpPyghayYmbVtuXSYmbisrLG1bbl09e3M6bmV3IGpiLHA6dH0sbVtuXS5zLmN1cnZlcz1nLmN1cnZlcyxrJiZuKyssbFtuXT1bXSk6bFtuXS5wdXNoKHtoOmcscDp0WzBdfSl9aWYoIW1bMF0pcmV0dXJuIGMoZik7aWYoMTxtLmxlbmd0aCl7cD0hMTthPVtdO2U9MDtmb3IoZj1tLmxlbmd0aDtlPGY7ZSsrKWhbZV09W107ZT0wO2ZvcihmPW0ubGVuZ3RoO2U8ZjtlKyspZm9yKGc9bFtlXSx2PTA7djxnLmxlbmd0aDt2Kyspe2s9Z1t2XTtuPSEwO2Zvcih0PTA7dDxtLmxlbmd0aDt0KyspZChrLnAsXG4gICAgbVt0XS5wKSYmKGUhPT10JiZhLnB1c2goe2Zyb21zOmUsdG9zOnQsaG9sZTp2fSksbj8obj0hMSxoW3RdLnB1c2goaykpOnA9ITApO24mJmhbZV0ucHVzaChrKX0wPGEubGVuZ3RoJiYocHx8KGw9aCkpfXA9MDtmb3IoZT1tLmxlbmd0aDtwPGU7cCsrKWZvcihoPW1bcF0ucyxiLnB1c2goaCksYT1sW3BdLGY9MCxnPWEubGVuZ3RoO2Y8ZztmKyspaC5ob2xlcy5wdXNoKGFbZl0uaCk7cmV0dXJuIGJ9fSk7T2JqZWN0LmFzc2lnbihwZS5wcm90b3R5cGUse2lzRm9udDohMCxnZW5lcmF0ZVNoYXBlczpmdW5jdGlvbihhLGIsYyl7dm9pZCAwPT09YiYmKGI9MTAwKTtjPXRoaXMuZGF0YTthPVN0cmluZyhhKS5zcGxpdChcIlwiKTt2YXIgZD1iL2MucmVzb2x1dGlvbixlPShjLmJvdW5kaW5nQm94LnlNYXgtYy5ib3VuZGluZ0JveC55TWluK2MudW5kZXJsaW5lVGhpY2tuZXNzKSpkLGY9MCxnPTA7Yj1bXTtmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7dmFyIGs9YVtoXTtpZihcIlxcblwiPT09aylmPVxuICAgIDAsZy09ZTtlbHNle3ZhciBtPWQ7dmFyIGw9ZixuPWc7aWYoaz1jLmdseXBoc1trXXx8Yy5nbHlwaHNbXCI/XCJdKXt2YXIgcD1uZXcgb2U7aWYoay5vKWZvcih2YXIgcj1rLl9jYWNoZWRPdXRsaW5lfHwoay5fY2FjaGVkT3V0bGluZT1rLm8uc3BsaXQoXCIgXCIpKSx0PTAsdj1yLmxlbmd0aDt0PHY7KXN3aXRjaChyW3QrK10pe2Nhc2UgXCJtXCI6dmFyIHc9clt0KytdKm0rbDt2YXIgeD1yW3QrK10qbStuO3AubW92ZVRvKHcseCk7YnJlYWs7Y2FzZSBcImxcIjp3PXJbdCsrXSptK2w7eD1yW3QrK10qbStuO3AubGluZVRvKHcseCk7YnJlYWs7Y2FzZSBcInFcIjp2YXIgeT1yW3QrK10qbStsO3ZhciBCPXJbdCsrXSptK247dmFyIEE9clt0KytdKm0rbDt2YXIgQz1yW3QrK10qbStuO3AucXVhZHJhdGljQ3VydmVUbyhBLEMseSxCKTticmVhaztjYXNlIFwiYlwiOnk9clt0KytdKm0rbCxCPXJbdCsrXSptK24sQT1yW3QrK10qbStsLEM9clt0KytdKm0rbix3PXJbdCsrXSptK2wseD1yW3QrK10qbStuLHAuYmV6aWVyQ3VydmVUbyhBLFxuICAgIEMsdyx4LHksQil9bT17b2Zmc2V0WDprLmhhKm0scGF0aDpwfX1lbHNlIG09dm9pZCAwO2YrPW0ub2Zmc2V0WDtiLnB1c2gobS5wYXRoKX19Yz1bXTthPTA7Zm9yKGQ9Yi5sZW5ndGg7YTxkO2ErKylBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShjLGJbYV0udG9TaGFwZXMoKSk7cmV0dXJuIGN9fSk7T2JqZWN0LmFzc2lnbihrZi5wcm90b3R5cGUse2xvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcyxmPW5ldyBOYSh0aGlzLm1hbmFnZXIpO2Yuc2V0UGF0aCh0aGlzLnBhdGgpO2YubG9hZChhLGZ1bmN0aW9uKGEpe3RyeXt2YXIgYz1KU09OLnBhcnNlKGEpfWNhdGNoKGspe2NvbnNvbGUud2FybihcIlRIUkVFLkZvbnRMb2FkZXI6IHR5cGVmYWNlLmpzIHN1cHBvcnQgaXMgYmVpbmcgZGVwcmVjYXRlZC4gVXNlIHR5cGVmYWNlLmpzb24gaW5zdGVhZC5cIiksYz1KU09OLnBhcnNlKGEuc3Vic3RyaW5nKDY1LGEubGVuZ3RoLTIpKX1hPWUucGFyc2UoYyk7YiYmYihhKX0sYyxkKX0sXG4gICAgcGFyc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBwZShhKX0sc2V0UGF0aDpmdW5jdGlvbihhKXt0aGlzLnBhdGg9YTtyZXR1cm4gdGhpc319KTt2YXIgVWQsc2U9e2dldENvbnRleHQ6ZnVuY3Rpb24oKXt2b2lkIDA9PT1VZCYmKFVkPW5ldyAod2luZG93LkF1ZGlvQ29udGV4dHx8d2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCkpO3JldHVybiBVZH0sc2V0Q29udGV4dDpmdW5jdGlvbihhKXtVZD1hfX07T2JqZWN0LmFzc2lnbihxZS5wcm90b3R5cGUse2xvYWQ6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9bmV3IE5hKHRoaXMubWFuYWdlcik7ZS5zZXRSZXNwb25zZVR5cGUoXCJhcnJheWJ1ZmZlclwiKTtlLmxvYWQoYSxmdW5jdGlvbihhKXtzZS5nZXRDb250ZXh0KCkuZGVjb2RlQXVkaW9EYXRhKGEsZnVuY3Rpb24oYSl7YihhKX0pfSxjLGQpfX0pO09iamVjdC5hc3NpZ24obGYucHJvdG90eXBlLHt1cGRhdGU6ZnVuY3Rpb24oKXt2YXIgYSxiLGMsZCxlLGYsZyxoLGs9bmV3IE8sbT1uZXcgTztcbiAgICByZXR1cm4gZnVuY3Rpb24obCl7aWYoYSE9PXRoaXN8fGIhPT1sLmZvY3VzfHxjIT09bC5mb3Z8fGQhPT1sLmFzcGVjdCp0aGlzLmFzcGVjdHx8ZSE9PWwubmVhcnx8ZiE9PWwuZmFyfHxnIT09bC56b29tfHxoIT09dGhpcy5leWVTZXApe2E9dGhpcztiPWwuZm9jdXM7Yz1sLmZvdjtkPWwuYXNwZWN0KnRoaXMuYXNwZWN0O2U9bC5uZWFyO2Y9bC5mYXI7Zz1sLnpvb207dmFyIG49bC5wcm9qZWN0aW9uTWF0cml4LmNsb25lKCk7aD10aGlzLmV5ZVNlcC8yO3ZhciBwPWgqZS9iLHE9ZSpNYXRoLnRhbihRLkRFRzJSQUQqYyouNSkvZzttLmVsZW1lbnRzWzEyXT0taDtrLmVsZW1lbnRzWzEyXT1oO3ZhciB0PS1xKmQrcDt2YXIgdj1xKmQrcDtuLmVsZW1lbnRzWzBdPTIqZS8odi10KTtuLmVsZW1lbnRzWzhdPSh2K3QpLyh2LXQpO3RoaXMuY2FtZXJhTC5wcm9qZWN0aW9uTWF0cml4LmNvcHkobik7dD0tcSpkLXA7dj1xKmQtcDtuLmVsZW1lbnRzWzBdPTIqZS8odi10KTtuLmVsZW1lbnRzWzhdPVxuICAgICh2K3QpLyh2LXQpO3RoaXMuY2FtZXJhUi5wcm9qZWN0aW9uTWF0cml4LmNvcHkobil9dGhpcy5jYW1lcmFMLm1hdHJpeFdvcmxkLmNvcHkobC5tYXRyaXhXb3JsZCkubXVsdGlwbHkobSk7dGhpcy5jYW1lcmFSLm1hdHJpeFdvcmxkLmNvcHkobC5tYXRyaXhXb3JsZCkubXVsdGlwbHkoayl9fSgpfSk7ZmQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoeC5wcm90b3R5cGUpO2ZkLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1mZDtyZS5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHgucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6cmUsZ2V0SW5wdXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nYWlufSxyZW1vdmVGaWx0ZXI6ZnVuY3Rpb24oKXtudWxsIT09dGhpcy5maWx0ZXImJih0aGlzLmdhaW4uZGlzY29ubmVjdCh0aGlzLmZpbHRlciksdGhpcy5maWx0ZXIuZGlzY29ubmVjdCh0aGlzLmNvbnRleHQuZGVzdGluYXRpb24pLHRoaXMuZ2Fpbi5jb25uZWN0KHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbiksXG4gICAgdGhpcy5maWx0ZXI9bnVsbCl9LGdldEZpbHRlcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmZpbHRlcn0sc2V0RmlsdGVyOmZ1bmN0aW9uKGEpe251bGwhPT10aGlzLmZpbHRlcj8odGhpcy5nYWluLmRpc2Nvbm5lY3QodGhpcy5maWx0ZXIpLHRoaXMuZmlsdGVyLmRpc2Nvbm5lY3QodGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uKSk6dGhpcy5nYWluLmRpc2Nvbm5lY3QodGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uKTt0aGlzLmZpbHRlcj1hO3RoaXMuZ2Fpbi5jb25uZWN0KHRoaXMuZmlsdGVyKTt0aGlzLmZpbHRlci5jb25uZWN0KHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbil9LGdldE1hc3RlclZvbHVtZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdhaW4uZ2Fpbi52YWx1ZX0sc2V0TWFzdGVyVm9sdW1lOmZ1bmN0aW9uKGEpe3RoaXMuZ2Fpbi5nYWluLnZhbHVlPWF9LHVwZGF0ZU1hdHJpeFdvcmxkOmZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAsYj1uZXcgaGEsYz1uZXcgcCxkPW5ldyBwO3JldHVybiBmdW5jdGlvbihlKXt4LnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKHRoaXMsXG4gICAgZSk7ZT10aGlzLmNvbnRleHQubGlzdGVuZXI7dmFyIGY9dGhpcy51cDt0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZShhLGIsYyk7ZC5zZXQoMCwwLC0xKS5hcHBseVF1YXRlcm5pb24oYik7ZS5wb3NpdGlvblg/KGUucG9zaXRpb25YLnNldFZhbHVlQXRUaW1lKGEueCx0aGlzLmNvbnRleHQuY3VycmVudFRpbWUpLGUucG9zaXRpb25ZLnNldFZhbHVlQXRUaW1lKGEueSx0aGlzLmNvbnRleHQuY3VycmVudFRpbWUpLGUucG9zaXRpb25aLnNldFZhbHVlQXRUaW1lKGEueix0aGlzLmNvbnRleHQuY3VycmVudFRpbWUpLGUuZm9yd2FyZFguc2V0VmFsdWVBdFRpbWUoZC54LHRoaXMuY29udGV4dC5jdXJyZW50VGltZSksZS5mb3J3YXJkWS5zZXRWYWx1ZUF0VGltZShkLnksdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lKSxlLmZvcndhcmRaLnNldFZhbHVlQXRUaW1lKGQueix0aGlzLmNvbnRleHQuY3VycmVudFRpbWUpLGUudXBYLnNldFZhbHVlQXRUaW1lKGYueCx0aGlzLmNvbnRleHQuY3VycmVudFRpbWUpLFxuICAgIGUudXBZLnNldFZhbHVlQXRUaW1lKGYueSx0aGlzLmNvbnRleHQuY3VycmVudFRpbWUpLGUudXBaLnNldFZhbHVlQXRUaW1lKGYueix0aGlzLmNvbnRleHQuY3VycmVudFRpbWUpKTooZS5zZXRQb3NpdGlvbihhLngsYS55LGEueiksZS5zZXRPcmllbnRhdGlvbihkLngsZC55LGQueixmLngsZi55LGYueikpfX0oKX0pO2xjLnByb3RvdHlwZT1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoeC5wcm90b3R5cGUpLHtjb25zdHJ1Y3RvcjpsYyxnZXRPdXRwdXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nYWlufSxzZXROb2RlU291cmNlOmZ1bmN0aW9uKGEpe3RoaXMuaGFzUGxheWJhY2tDb250cm9sPSExO3RoaXMuc291cmNlVHlwZT1cImF1ZGlvTm9kZVwiO3RoaXMuc291cmNlPWE7dGhpcy5jb25uZWN0KCk7cmV0dXJuIHRoaXN9LHNldEJ1ZmZlcjpmdW5jdGlvbihhKXt0aGlzLmJ1ZmZlcj1hO3RoaXMuc291cmNlVHlwZT1cImJ1ZmZlclwiO3RoaXMuYXV0b3BsYXkmJnRoaXMucGxheSgpO3JldHVybiB0aGlzfSxcbiAgICBwbGF5OmZ1bmN0aW9uKCl7aWYoITA9PT10aGlzLmlzUGxheWluZyljb25zb2xlLndhcm4oXCJUSFJFRS5BdWRpbzogQXVkaW8gaXMgYWxyZWFkeSBwbGF5aW5nLlwiKTtlbHNlIGlmKCExPT09dGhpcy5oYXNQbGF5YmFja0NvbnRyb2wpY29uc29sZS53YXJuKFwiVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuXCIpO2Vsc2V7dmFyIGE9dGhpcy5jb250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO2EuYnVmZmVyPXRoaXMuYnVmZmVyO2EubG9vcD10aGlzLmxvb3A7YS5vbmVuZGVkPXRoaXMub25FbmRlZC5iaW5kKHRoaXMpO2EucGxheWJhY2tSYXRlLnNldFZhbHVlQXRUaW1lKHRoaXMucGxheWJhY2tSYXRlLHRoaXMuc3RhcnRUaW1lKTt0aGlzLnN0YXJ0VGltZT10aGlzLmNvbnRleHQuY3VycmVudFRpbWU7YS5zdGFydCh0aGlzLnN0YXJ0VGltZSx0aGlzLm9mZnNldCk7dGhpcy5pc1BsYXlpbmc9ITA7dGhpcy5zb3VyY2U9YTtyZXR1cm4gdGhpcy5jb25uZWN0KCl9fSxcbiAgICBwYXVzZTpmdW5jdGlvbigpe2lmKCExPT09dGhpcy5oYXNQbGF5YmFja0NvbnRyb2wpY29uc29sZS53YXJuKFwiVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuXCIpO2Vsc2UgcmV0dXJuITA9PT10aGlzLmlzUGxheWluZyYmKHRoaXMuc291cmNlLnN0b3AoKSx0aGlzLm9mZnNldCs9KHRoaXMuY29udGV4dC5jdXJyZW50VGltZS10aGlzLnN0YXJ0VGltZSkqdGhpcy5wbGF5YmFja1JhdGUsdGhpcy5pc1BsYXlpbmc9ITEpLHRoaXN9LHN0b3A6ZnVuY3Rpb24oKXtpZighMT09PXRoaXMuaGFzUGxheWJhY2tDb250cm9sKWNvbnNvbGUud2FybihcIlRIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLlwiKTtlbHNlIHJldHVybiB0aGlzLnNvdXJjZS5zdG9wKCksdGhpcy5vZmZzZXQ9MCx0aGlzLmlzUGxheWluZz0hMSx0aGlzfSxjb25uZWN0OmZ1bmN0aW9uKCl7aWYoMDx0aGlzLmZpbHRlcnMubGVuZ3RoKXt0aGlzLnNvdXJjZS5jb25uZWN0KHRoaXMuZmlsdGVyc1swXSk7XG4gICAgZm9yKHZhciBhPTEsYj10aGlzLmZpbHRlcnMubGVuZ3RoO2E8YjthKyspdGhpcy5maWx0ZXJzW2EtMV0uY29ubmVjdCh0aGlzLmZpbHRlcnNbYV0pO3RoaXMuZmlsdGVyc1t0aGlzLmZpbHRlcnMubGVuZ3RoLTFdLmNvbm5lY3QodGhpcy5nZXRPdXRwdXQoKSl9ZWxzZSB0aGlzLnNvdXJjZS5jb25uZWN0KHRoaXMuZ2V0T3V0cHV0KCkpO3JldHVybiB0aGlzfSxkaXNjb25uZWN0OmZ1bmN0aW9uKCl7aWYoMDx0aGlzLmZpbHRlcnMubGVuZ3RoKXt0aGlzLnNvdXJjZS5kaXNjb25uZWN0KHRoaXMuZmlsdGVyc1swXSk7Zm9yKHZhciBhPTEsYj10aGlzLmZpbHRlcnMubGVuZ3RoO2E8YjthKyspdGhpcy5maWx0ZXJzW2EtMV0uZGlzY29ubmVjdCh0aGlzLmZpbHRlcnNbYV0pO3RoaXMuZmlsdGVyc1t0aGlzLmZpbHRlcnMubGVuZ3RoLTFdLmRpc2Nvbm5lY3QodGhpcy5nZXRPdXRwdXQoKSl9ZWxzZSB0aGlzLnNvdXJjZS5kaXNjb25uZWN0KHRoaXMuZ2V0T3V0cHV0KCkpO3JldHVybiB0aGlzfSxcbiAgICBnZXRGaWx0ZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZmlsdGVyc30sc2V0RmlsdGVyczpmdW5jdGlvbihhKXthfHwoYT1bXSk7ITA9PT10aGlzLmlzUGxheWluZz8odGhpcy5kaXNjb25uZWN0KCksdGhpcy5maWx0ZXJzPWEsdGhpcy5jb25uZWN0KCkpOnRoaXMuZmlsdGVycz1hO3JldHVybiB0aGlzfSxnZXRGaWx0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRGaWx0ZXJzKClbMF19LHNldEZpbHRlcjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5zZXRGaWx0ZXJzKGE/W2FdOltdKX0sc2V0UGxheWJhY2tSYXRlOmZ1bmN0aW9uKGEpe2lmKCExPT09dGhpcy5oYXNQbGF5YmFja0NvbnRyb2wpY29uc29sZS53YXJuKFwiVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuXCIpO2Vsc2UgcmV0dXJuIHRoaXMucGxheWJhY2tSYXRlPWEsITA9PT10aGlzLmlzUGxheWluZyYmdGhpcy5zb3VyY2UucGxheWJhY2tSYXRlLnNldFZhbHVlQXRUaW1lKHRoaXMucGxheWJhY2tSYXRlLFxuICAgIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSksdGhpc30sZ2V0UGxheWJhY2tSYXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGxheWJhY2tSYXRlfSxvbkVuZGVkOmZ1bmN0aW9uKCl7dGhpcy5pc1BsYXlpbmc9ITF9LGdldExvb3A6ZnVuY3Rpb24oKXtyZXR1cm4hMT09PXRoaXMuaGFzUGxheWJhY2tDb250cm9sPyhjb25zb2xlLndhcm4oXCJUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC5cIiksITEpOnRoaXMubG9vcH0sc2V0TG9vcDpmdW5jdGlvbihhKXtpZighMT09PXRoaXMuaGFzUGxheWJhY2tDb250cm9sKWNvbnNvbGUud2FybihcIlRIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLlwiKTtlbHNlIHJldHVybiB0aGlzLmxvb3A9YSwhMD09PXRoaXMuaXNQbGF5aW5nJiYodGhpcy5zb3VyY2UubG9vcD10aGlzLmxvb3ApLHRoaXN9LGdldFZvbHVtZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmdhaW4uZ2Fpbi52YWx1ZX0sXG4gICAgc2V0Vm9sdW1lOmZ1bmN0aW9uKGEpe3RoaXMuZ2Fpbi5nYWluLnZhbHVlPWE7cmV0dXJuIHRoaXN9fSk7dGUucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShsYy5wcm90b3R5cGUpLHtjb25zdHJ1Y3Rvcjp0ZSxnZXRPdXRwdXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wYW5uZXJ9LGdldFJlZkRpc3RhbmNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGFubmVyLnJlZkRpc3RhbmNlfSxzZXRSZWZEaXN0YW5jZTpmdW5jdGlvbihhKXt0aGlzLnBhbm5lci5yZWZEaXN0YW5jZT1hfSxnZXRSb2xsb2ZmRmFjdG9yOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGFubmVyLnJvbGxvZmZGYWN0b3J9LHNldFJvbGxvZmZGYWN0b3I6ZnVuY3Rpb24oYSl7dGhpcy5wYW5uZXIucm9sbG9mZkZhY3Rvcj1hfSxnZXREaXN0YW5jZU1vZGVsOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGFubmVyLmRpc3RhbmNlTW9kZWx9LHNldERpc3RhbmNlTW9kZWw6ZnVuY3Rpb24oYSl7dGhpcy5wYW5uZXIuZGlzdGFuY2VNb2RlbD1cbiAgICBhfSxnZXRNYXhEaXN0YW5jZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBhbm5lci5tYXhEaXN0YW5jZX0sc2V0TWF4RGlzdGFuY2U6ZnVuY3Rpb24oYSl7dGhpcy5wYW5uZXIubWF4RGlzdGFuY2U9YX0sdXBkYXRlTWF0cml4V29ybGQ6ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcDtyZXR1cm4gZnVuY3Rpb24oYil7eC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCh0aGlzLGIpO2Euc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubWF0cml4V29ybGQpO3RoaXMucGFubmVyLnNldFBvc2l0aW9uKGEueCxhLnksYS56KX19KCl9KTtPYmplY3QuYXNzaWduKHVlLnByb3RvdHlwZSx7Z2V0RnJlcXVlbmN5RGF0YTpmdW5jdGlvbigpe3RoaXMuYW5hbHlzZXIuZ2V0Qnl0ZUZyZXF1ZW5jeURhdGEodGhpcy5kYXRhKTtyZXR1cm4gdGhpcy5kYXRhfSxnZXRBdmVyYWdlRnJlcXVlbmN5OmZ1bmN0aW9uKCl7Zm9yKHZhciBhPTAsYj10aGlzLmdldEZyZXF1ZW5jeURhdGEoKSxjPTA7YzxiLmxlbmd0aDtjKyspYSs9XG4gICAgYltjXTtyZXR1cm4gYS9iLmxlbmd0aH19KTtPYmplY3QuYXNzaWduKHZlLnByb3RvdHlwZSx7YWNjdW11bGF0ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuYnVmZmVyLGQ9dGhpcy52YWx1ZVNpemU7YT1hKmQrZDt2YXIgZT10aGlzLmN1bXVsYXRpdmVXZWlnaHQ7aWYoMD09PWUpe2ZvcihlPTA7ZSE9PWQ7KytlKWNbYStlXT1jW2VdO2U9Yn1lbHNlIGUrPWIsdGhpcy5fbWl4QnVmZmVyUmVnaW9uKGMsYSwwLGIvZSxkKTt0aGlzLmN1bXVsYXRpdmVXZWlnaHQ9ZX0sYXBwbHk6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy52YWx1ZVNpemUsYz10aGlzLmJ1ZmZlcjthPWEqYitiO3ZhciBkPXRoaXMuY3VtdWxhdGl2ZVdlaWdodCxlPXRoaXMuYmluZGluZzt0aGlzLmN1bXVsYXRpdmVXZWlnaHQ9MDsxPmQmJnRoaXMuX21peEJ1ZmZlclJlZ2lvbihjLGEsMypiLDEtZCxiKTtmb3IodmFyIGQ9YixmPWIrYjtkIT09ZjsrK2QpaWYoY1tkXSE9PWNbZCtiXSl7ZS5zZXRWYWx1ZShjLGEpO2JyZWFrfX0sXG4gICAgc2F2ZU9yaWdpbmFsU3RhdGU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmJ1ZmZlcixiPXRoaXMudmFsdWVTaXplLGM9MypiO3RoaXMuYmluZGluZy5nZXRWYWx1ZShhLGMpO2Zvcih2YXIgZD1iO2QhPT1jOysrZClhW2RdPWFbYytkJWJdO3RoaXMuY3VtdWxhdGl2ZVdlaWdodD0wfSxyZXN0b3JlT3JpZ2luYWxTdGF0ZTpmdW5jdGlvbigpe3RoaXMuYmluZGluZy5zZXRWYWx1ZSh0aGlzLmJ1ZmZlciwzKnRoaXMudmFsdWVTaXplKX0sX3NlbGVjdDpmdW5jdGlvbihhLGIsYyxkLGUpe2lmKC41PD1kKWZvcihkPTA7ZCE9PWU7KytkKWFbYitkXT1hW2MrZF19LF9zbGVycDpmdW5jdGlvbihhLGIsYyxkKXtoYS5zbGVycEZsYXQoYSxiLGEsYixhLGMsZCl9LF9sZXJwOmZ1bmN0aW9uKGEsYixjLGQsZSl7Zm9yKHZhciBmPTEtZCxnPTA7ZyE9PWU7KytnKXt2YXIgaD1iK2c7YVtoXT1hW2hdKmYrYVtjK2ddKmR9fX0pO09iamVjdC5hc3NpZ24obWYucHJvdG90eXBlLHtnZXRWYWx1ZTpmdW5jdGlvbihhLFxuICAgIGIpe3RoaXMuYmluZCgpO3ZhciBjPXRoaXMuX2JpbmRpbmdzW3RoaXMuX3RhcmdldEdyb3VwLm5DYWNoZWRPYmplY3RzX107dm9pZCAwIT09YyYmYy5nZXRWYWx1ZShhLGIpfSxzZXRWYWx1ZTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz10aGlzLl9iaW5kaW5ncyxkPXRoaXMuX3RhcmdldEdyb3VwLm5DYWNoZWRPYmplY3RzXyxlPWMubGVuZ3RoO2QhPT1lOysrZCljW2RdLnNldFZhbHVlKGEsYil9LGJpbmQ6ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5fYmluZGluZ3MsYj10aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sYz1hLmxlbmd0aDtiIT09YzsrK2IpYVtiXS5iaW5kKCl9LHVuYmluZDpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLl9iaW5kaW5ncyxiPXRoaXMuX3RhcmdldEdyb3VwLm5DYWNoZWRPYmplY3RzXyxjPWEubGVuZ3RoO2IhPT1jOysrYilhW2JdLnVuYmluZCgpfX0pO09iamVjdC5hc3NpZ24ocWEse0NvbXBvc2l0ZTptZixjcmVhdGU6ZnVuY3Rpb24oYSxcbiAgICBiLGMpe3JldHVybiBhJiZhLmlzQW5pbWF0aW9uT2JqZWN0R3JvdXA/bmV3IHFhLkNvbXBvc2l0ZShhLGIsYyk6bmV3IHFhKGEsYixjKX0sc2FuaXRpemVOb2RlTmFtZTpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZXBsYWNlKC9cXHMvZyxcIl9cIikucmVwbGFjZSgvW15cXHctXS9nLFwiXCIpfSxwYXJzZVRyYWNrTmFtZTpmdW5jdGlvbigpe3ZhciBhPW5ldyBSZWdFeHAoXCJeXCIrLygoPzpbXFx3LV0rW1xcLzpdKSopLy5zb3VyY2UrLyhbXFx3LVxcLl0rKT8vLnNvdXJjZSsvKD86XFwuKFtcXHctXSspKD86XFxbKC4rKVxcXSk/KT8vLnNvdXJjZSsvXFwuKFtcXHctXSspKD86XFxbKC4rKVxcXSk/Ly5zb3VyY2UrXCIkXCIpLGI9W1wibWF0ZXJpYWxcIixcIm1hdGVyaWFsc1wiLFwiYm9uZXNcIl07cmV0dXJuIGZ1bmN0aW9uKGMpe3ZhciBkPWEuZXhlYyhjKTtpZighZCl0aHJvdyBFcnJvcihcIlByb3BlcnR5QmluZGluZzogQ2Fubm90IHBhcnNlIHRyYWNrTmFtZTogXCIrYyk7dmFyIGQ9e25vZGVOYW1lOmRbMl0sb2JqZWN0TmFtZTpkWzNdLFxuICAgIG9iamVjdEluZGV4OmRbNF0scHJvcGVydHlOYW1lOmRbNV0scHJvcGVydHlJbmRleDpkWzZdfSxlPWQubm9kZU5hbWUmJmQubm9kZU5hbWUubGFzdEluZGV4T2YoXCIuXCIpO2lmKHZvaWQgMCE9PWUmJi0xIT09ZSl7dmFyIGY9ZC5ub2RlTmFtZS5zdWJzdHJpbmcoZSsxKTstMSE9PWIuaW5kZXhPZihmKSYmKGQubm9kZU5hbWU9ZC5ub2RlTmFtZS5zdWJzdHJpbmcoMCxlKSxkLm9iamVjdE5hbWU9Zil9aWYobnVsbD09PWQucHJvcGVydHlOYW1lfHwwPT09ZC5wcm9wZXJ0eU5hbWUubGVuZ3RoKXRocm93IEVycm9yKFwiUHJvcGVydHlCaW5kaW5nOiBjYW4gbm90IHBhcnNlIHByb3BlcnR5TmFtZSBmcm9tIHRyYWNrTmFtZTogXCIrYyk7cmV0dXJuIGR9fSgpLGZpbmROb2RlOmZ1bmN0aW9uKGEsYil7aWYoIWJ8fFwiXCI9PT1ifHxcInJvb3RcIj09PWJ8fFwiLlwiPT09Ynx8LTE9PT1ifHxiPT09YS5uYW1lfHxiPT09YS51dWlkKXJldHVybiBhO2lmKGEuc2tlbGV0b24pe3ZhciBjPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYz1cbiAgICAwO2M8YS5ib25lcy5sZW5ndGg7YysrKXt2YXIgZD1hLmJvbmVzW2NdO2lmKGQubmFtZT09PWIpcmV0dXJuIGR9cmV0dXJuIG51bGx9KGEuc2tlbGV0b24pO2lmKGMpcmV0dXJuIGN9aWYoYS5jaGlsZHJlbil7dmFyIGQ9ZnVuY3Rpb24oYSl7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBlPWFbY107aWYoZS5uYW1lPT09Ynx8ZS51dWlkPT09Ynx8KGU9ZChlLmNoaWxkcmVuKSkpcmV0dXJuIGV9cmV0dXJuIG51bGx9O2lmKGE9ZChhLmNoaWxkcmVuKSlyZXR1cm4gYX1yZXR1cm4gbnVsbH19KTtPYmplY3QuYXNzaWduKHFhLnByb3RvdHlwZSx7X2dldFZhbHVlX3VuYXZhaWxhYmxlOmZ1bmN0aW9uKCl7fSxfc2V0VmFsdWVfdW5hdmFpbGFibGU6ZnVuY3Rpb24oKXt9LEJpbmRpbmdUeXBlOntEaXJlY3Q6MCxFbnRpcmVBcnJheToxLEFycmF5RWxlbWVudDoyLEhhc0Zyb21Ub0FycmF5OjN9LFZlcnNpb25pbmc6e05vbmU6MCxOZWVkc1VwZGF0ZToxLE1hdHJpeFdvcmxkTmVlZHNVcGRhdGU6Mn0sXG4gICAgR2V0dGVyQnlCaW5kaW5nVHlwZTpbZnVuY3Rpb24oYSxiKXthW2JdPXRoaXMubm9kZVt0aGlzLnByb3BlcnR5TmFtZV19LGZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPXRoaXMucmVzb2x2ZWRQcm9wZXJ0eSxkPTAsZT1jLmxlbmd0aDtkIT09ZTsrK2QpYVtiKytdPWNbZF19LGZ1bmN0aW9uKGEsYil7YVtiXT10aGlzLnJlc29sdmVkUHJvcGVydHlbdGhpcy5wcm9wZXJ0eUluZGV4XX0sZnVuY3Rpb24oYSxiKXt0aGlzLnJlc29sdmVkUHJvcGVydHkudG9BcnJheShhLGIpfV0sU2V0dGVyQnlCaW5kaW5nVHlwZUFuZFZlcnNpb25pbmc6W1tmdW5jdGlvbihhLGIpe3RoaXMudGFyZ2V0T2JqZWN0W3RoaXMucHJvcGVydHlOYW1lXT1hW2JdfSxmdW5jdGlvbihhLGIpe3RoaXMudGFyZ2V0T2JqZWN0W3RoaXMucHJvcGVydHlOYW1lXT1hW2JdO3RoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlPSEwfSxmdW5jdGlvbihhLGIpe3RoaXMudGFyZ2V0T2JqZWN0W3RoaXMucHJvcGVydHlOYW1lXT1hW2JdO1xuICAgIHRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU9ITB9XSxbZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9dGhpcy5yZXNvbHZlZFByb3BlcnR5LGQ9MCxlPWMubGVuZ3RoO2QhPT1lOysrZCljW2RdPWFbYisrXX0sZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9dGhpcy5yZXNvbHZlZFByb3BlcnR5LGQ9MCxlPWMubGVuZ3RoO2QhPT1lOysrZCljW2RdPWFbYisrXTt0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZT0hMH0sZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9dGhpcy5yZXNvbHZlZFByb3BlcnR5LGQ9MCxlPWMubGVuZ3RoO2QhPT1lOysrZCljW2RdPWFbYisrXTt0aGlzLnRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlPSEwfV0sW2Z1bmN0aW9uKGEsYil7dGhpcy5yZXNvbHZlZFByb3BlcnR5W3RoaXMucHJvcGVydHlJbmRleF09YVtiXX0sZnVuY3Rpb24oYSxiKXt0aGlzLnJlc29sdmVkUHJvcGVydHlbdGhpcy5wcm9wZXJ0eUluZGV4XT1hW2JdO1xuICAgIHRoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlPSEwfSxmdW5jdGlvbihhLGIpe3RoaXMucmVzb2x2ZWRQcm9wZXJ0eVt0aGlzLnByb3BlcnR5SW5kZXhdPWFbYl07dGhpcy50YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZT0hMH1dLFtmdW5jdGlvbihhLGIpe3RoaXMucmVzb2x2ZWRQcm9wZXJ0eS5mcm9tQXJyYXkoYSxiKX0sZnVuY3Rpb24oYSxiKXt0aGlzLnJlc29sdmVkUHJvcGVydHkuZnJvbUFycmF5KGEsYik7dGhpcy50YXJnZXRPYmplY3QubmVlZHNVcGRhdGU9ITB9LGZ1bmN0aW9uKGEsYil7dGhpcy5yZXNvbHZlZFByb3BlcnR5LmZyb21BcnJheShhLGIpO3RoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGU9ITB9XV0sZ2V0VmFsdWU6ZnVuY3Rpb24oYSxiKXt0aGlzLmJpbmQoKTt0aGlzLmdldFZhbHVlKGEsYil9LHNldFZhbHVlOmZ1bmN0aW9uKGEsYil7dGhpcy5iaW5kKCk7dGhpcy5zZXRWYWx1ZShhLGIpfSxiaW5kOmZ1bmN0aW9uKCl7dmFyIGE9XG4gICAgdGhpcy5ub2RlLGI9dGhpcy5wYXJzZWRQYXRoLGM9Yi5vYmplY3ROYW1lLGQ9Yi5wcm9wZXJ0eU5hbWUsZT1iLnByb3BlcnR5SW5kZXg7YXx8KHRoaXMubm9kZT1hPXFhLmZpbmROb2RlKHRoaXMucm9vdE5vZGUsYi5ub2RlTmFtZSl8fHRoaXMucm9vdE5vZGUpO3RoaXMuZ2V0VmFsdWU9dGhpcy5fZ2V0VmFsdWVfdW5hdmFpbGFibGU7dGhpcy5zZXRWYWx1ZT10aGlzLl9zZXRWYWx1ZV91bmF2YWlsYWJsZTtpZihhKXtpZihjKXt2YXIgZj1iLm9iamVjdEluZGV4O3N3aXRjaChjKXtjYXNlIFwibWF0ZXJpYWxzXCI6aWYoIWEubWF0ZXJpYWwpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtYXRlcmlhbCBhcyBub2RlIGRvZXMgbm90IGhhdmUgYSBtYXRlcmlhbC5cIix0aGlzKTtyZXR1cm59aWYoIWEubWF0ZXJpYWwubWF0ZXJpYWxzKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gbWF0ZXJpYWwubWF0ZXJpYWxzIGFzIG5vZGUubWF0ZXJpYWwgZG9lcyBub3QgaGF2ZSBhIG1hdGVyaWFscyBhcnJheS5cIixcbiAgICB0aGlzKTtyZXR1cm59YT1hLm1hdGVyaWFsLm1hdGVyaWFsczticmVhaztjYXNlIFwiYm9uZXNcIjppZighYS5za2VsZXRvbil7Y29uc29sZS5lcnJvcihcIlRIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIGJvbmVzIGFzIG5vZGUgZG9lcyBub3QgaGF2ZSBhIHNrZWxldG9uLlwiLHRoaXMpO3JldHVybn1hPWEuc2tlbGV0b24uYm9uZXM7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKylpZihhW2NdLm5hbWU9PT1mKXtmPWM7YnJlYWt9YnJlYWs7ZGVmYXVsdDppZih2b2lkIDA9PT1hW2NdKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBDYW4gbm90IGJpbmQgdG8gb2JqZWN0TmFtZSBvZiBub2RlIHVuZGVmaW5lZC5cIix0aGlzKTtyZXR1cm59YT1hW2NdfWlmKHZvaWQgMCE9PWYpe2lmKHZvaWQgMD09PWFbZl0pe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IFRyeWluZyB0byBiaW5kIHRvIG9iamVjdEluZGV4IG9mIG9iamVjdE5hbWUsIGJ1dCBpcyB1bmRlZmluZWQuXCIsXG4gICAgdGhpcyxhKTtyZXR1cm59YT1hW2ZdfX1mPWFbZF07aWYodm9pZCAwPT09Ziljb25zb2xlLmVycm9yKFwiVEhSRUUuUHJvcGVydHlCaW5kaW5nOiBUcnlpbmcgdG8gdXBkYXRlIHByb3BlcnR5IGZvciB0cmFjazogXCIrYi5ub2RlTmFtZStcIi5cIitkK1wiIGJ1dCBpdCB3YXNuJ3QgZm91bmQuXCIsYSk7ZWxzZXtiPXRoaXMuVmVyc2lvbmluZy5Ob25lO3ZvaWQgMCE9PWEubmVlZHNVcGRhdGU/KGI9dGhpcy5WZXJzaW9uaW5nLk5lZWRzVXBkYXRlLHRoaXMudGFyZ2V0T2JqZWN0PWEpOnZvaWQgMCE9PWEubWF0cml4V29ybGROZWVkc1VwZGF0ZSYmKGI9dGhpcy5WZXJzaW9uaW5nLk1hdHJpeFdvcmxkTmVlZHNVcGRhdGUsdGhpcy50YXJnZXRPYmplY3Q9YSk7Yz10aGlzLkJpbmRpbmdUeXBlLkRpcmVjdDtpZih2b2lkIDAhPT1lKXtpZihcIm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1wiPT09ZCl7aWYoIWEuZ2VvbWV0cnkpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtb3JwaFRhcmdldEluZmx1ZW5jZXMgYmVjYXVzZSBub2RlIGRvZXMgbm90IGhhdmUgYSBnZW9tZXRyeS5cIixcbiAgICB0aGlzKTtyZXR1cm59aWYoYS5nZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5KXtpZighYS5nZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtb3JwaFRhcmdldEluZmx1ZW5jZXMgYmVjYXVzZSBub2RlIGRvZXMgbm90IGhhdmUgYSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuXCIsdGhpcyk7cmV0dXJufWZvcihjPTA7Yzx0aGlzLm5vZGUuZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uLmxlbmd0aDtjKyspaWYoYS5nZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb25bY10ubmFtZT09PWUpe2U9YzticmVha319ZWxzZXtpZighYS5nZW9tZXRyeS5tb3JwaFRhcmdldHMpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtb3JwaFRhcmdldEluZmx1ZW5jZXMgYmVjYXVzZSBub2RlIGRvZXMgbm90IGhhdmUgYSBnZW9tZXRyeS5tb3JwaFRhcmdldHMuXCIsXG4gICAgdGhpcyk7cmV0dXJufWZvcihjPTA7Yzx0aGlzLm5vZGUuZ2VvbWV0cnkubW9ycGhUYXJnZXRzLmxlbmd0aDtjKyspaWYoYS5nZW9tZXRyeS5tb3JwaFRhcmdldHNbY10ubmFtZT09PWUpe2U9YzticmVha319fWM9dGhpcy5CaW5kaW5nVHlwZS5BcnJheUVsZW1lbnQ7dGhpcy5yZXNvbHZlZFByb3BlcnR5PWY7dGhpcy5wcm9wZXJ0eUluZGV4PWV9ZWxzZSB2b2lkIDAhPT1mLmZyb21BcnJheSYmdm9pZCAwIT09Zi50b0FycmF5PyhjPXRoaXMuQmluZGluZ1R5cGUuSGFzRnJvbVRvQXJyYXksdGhpcy5yZXNvbHZlZFByb3BlcnR5PWYpOkFycmF5LmlzQXJyYXkoZik/KGM9dGhpcy5CaW5kaW5nVHlwZS5FbnRpcmVBcnJheSx0aGlzLnJlc29sdmVkUHJvcGVydHk9Zik6dGhpcy5wcm9wZXJ0eU5hbWU9ZDt0aGlzLmdldFZhbHVlPXRoaXMuR2V0dGVyQnlCaW5kaW5nVHlwZVtjXTt0aGlzLnNldFZhbHVlPXRoaXMuU2V0dGVyQnlCaW5kaW5nVHlwZUFuZFZlcnNpb25pbmdbY11bYl19fWVsc2UgY29uc29sZS5lcnJvcihcIlRIUkVFLlByb3BlcnR5QmluZGluZzogVHJ5aW5nIHRvIHVwZGF0ZSBub2RlIGZvciB0cmFjazogXCIrXG4gICAgdGhpcy5wYXRoK1wiIGJ1dCBpdCB3YXNuJ3QgZm91bmQuXCIpfSx1bmJpbmQ6ZnVuY3Rpb24oKXt0aGlzLm5vZGU9bnVsbDt0aGlzLmdldFZhbHVlPXRoaXMuX2dldFZhbHVlX3VuYm91bmQ7dGhpcy5zZXRWYWx1ZT10aGlzLl9zZXRWYWx1ZV91bmJvdW5kfX0pO09iamVjdC5hc3NpZ24ocWEucHJvdG90eXBlLHtfZ2V0VmFsdWVfdW5ib3VuZDpxYS5wcm90b3R5cGUuZ2V0VmFsdWUsX3NldFZhbHVlX3VuYm91bmQ6cWEucHJvdG90eXBlLnNldFZhbHVlfSk7T2JqZWN0LmFzc2lnbihuZi5wcm90b3R5cGUse2lzQW5pbWF0aW9uT2JqZWN0R3JvdXA6ITAsYWRkOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMuX29iamVjdHMsYj1hLmxlbmd0aCxjPXRoaXMubkNhY2hlZE9iamVjdHNfLGQ9dGhpcy5faW5kaWNlc0J5VVVJRCxlPXRoaXMuX3BhdGhzLGY9dGhpcy5fcGFyc2VkUGF0aHMsZz10aGlzLl9iaW5kaW5ncyxoPWcubGVuZ3RoLGs9MCxtPWFyZ3VtZW50cy5sZW5ndGg7ayE9PW07KytrKXt2YXIgbD1cbiAgICBhcmd1bWVudHNba10sbj1sLnV1aWQscD1kW25dO2lmKHZvaWQgMD09PXApe3A9YisrO2Rbbl09cDthLnB1c2gobCk7Zm9yKHZhciBuPTAscj1oO24hPT1yOysrbilnW25dLnB1c2gobmV3IHFhKGwsZVtuXSxmW25dKSl9ZWxzZSBpZihwPGMpe3ZhciB0PS0tYyxyPWFbdF07ZFtyLnV1aWRdPXA7YVtwXT1yO2Rbbl09dDthW3RdPWw7bj0wO2ZvcihyPWg7biE9PXI7KytuKXt2YXIgdj1nW25dLHc9dltwXTt2W3BdPXZbdF07dm9pZCAwPT09dyYmKHc9bmV3IHFhKGwsZVtuXSxmW25dKSk7dlt0XT13fX1lbHNlIHZvaWQgMCE9PWFbcF0mJmNvbnNvbGUuZXJyb3IoXCJUSFJFRS5BbmltYXRpb25PYmplY3RHcm91cDogRGlmZmVyZW50IG9iamVjdHMgd2l0aCB0aGUgc2FtZSBVVUlEIGRldGVjdGVkLiBDbGVhbiB0aGUgY2FjaGVzIG9yIHJlY3JlYXRlIHlvdXIgaW5mcmFzdHJ1Y3R1cmUgd2hlbiByZWxvYWRpbmcgc2NlbmVzLlwiKX10aGlzLm5DYWNoZWRPYmplY3RzXz1jfSxyZW1vdmU6ZnVuY3Rpb24oKXtmb3IodmFyIGE9XG4gICAgdGhpcy5fb2JqZWN0cyxiPXRoaXMubkNhY2hlZE9iamVjdHNfLGM9dGhpcy5faW5kaWNlc0J5VVVJRCxkPXRoaXMuX2JpbmRpbmdzLGU9ZC5sZW5ndGgsZj0wLGc9YXJndW1lbnRzLmxlbmd0aDtmIT09ZzsrK2Ype3ZhciBoPWFyZ3VtZW50c1tmXSxrPWgudXVpZCxtPWNba107aWYodm9pZCAwIT09bSYmbT49Yil7dmFyIGw9YisrLG49YVtsXTtjW24udXVpZF09bTthW21dPW47Y1trXT1sO2FbbF09aDtoPTA7Zm9yKGs9ZTtoIT09azsrK2gpe3ZhciBuPWRbaF0scD1uW21dO25bbV09bltsXTtuW2xdPXB9fX10aGlzLm5DYWNoZWRPYmplY3RzXz1ifSx1bmNhY2hlOmZ1bmN0aW9uKCl7Zm9yKHZhciBhLGIsYz10aGlzLl9vYmplY3RzLGQ9Yy5sZW5ndGgsZT10aGlzLm5DYWNoZWRPYmplY3RzXyxmPXRoaXMuX2luZGljZXNCeVVVSUQsZz10aGlzLl9iaW5kaW5ncyxoPWcubGVuZ3RoLGs9MCxtPWFyZ3VtZW50cy5sZW5ndGg7ayE9PW07KytrKXtiPWFyZ3VtZW50c1trXS51dWlkO3ZhciBsPVxuICAgIGZbYl07aWYodm9pZCAwIT09bClpZihkZWxldGUgZltiXSxsPGUpe3ZhciBuPS0tZSxwPWNbbl07Yj0tLWQ7YT1jW2JdO2ZbcC51dWlkXT1sO2NbbF09cDtmW2EudXVpZF09bjtjW25dPWE7Yy5wb3AoKTtmb3IodmFyIHA9MCxyPWg7cCE9PXI7KytwKXthPWdbcF07dmFyIHQ9YVtiXTthW2xdPWFbbl07YVtuXT10O2EucG9wKCl9fWVsc2UgZm9yKGI9LS1kLGE9Y1tiXSxmW2EudXVpZF09bCxjW2xdPWEsYy5wb3AoKSxwPTAscj1oO3AhPT1yOysrcClhPWdbcF0sYVtsXT1hW2JdLGEucG9wKCl9dGhpcy5uQ2FjaGVkT2JqZWN0c189ZX0sc3Vic2NyaWJlXzpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2JpbmRpbmdzSW5kaWNlc0J5UGF0aCxkPWNbYV0sZT10aGlzLl9iaW5kaW5ncztpZih2b2lkIDAhPT1kKXJldHVybiBlW2RdO3ZhciBmPXRoaXMuX3BhdGhzLGc9dGhpcy5fcGFyc2VkUGF0aHMsaD10aGlzLl9vYmplY3RzLGs9dGhpcy5uQ2FjaGVkT2JqZWN0c18sbT1BcnJheShoLmxlbmd0aCksXG4gICAgZD1lLmxlbmd0aDtjW2FdPWQ7Zi5wdXNoKGEpO2cucHVzaChiKTtlLnB1c2gobSk7Yz1rO2ZvcihkPWgubGVuZ3RoO2MhPT1kOysrYyltW2NdPW5ldyBxYShoW2NdLGEsYik7cmV0dXJuIG19LHVuc3Vic2NyaWJlXzpmdW5jdGlvbihhKXt2YXIgYj10aGlzLl9iaW5kaW5nc0luZGljZXNCeVBhdGgsYz1iW2FdO2lmKHZvaWQgMCE9PWMpe3ZhciBkPXRoaXMuX3BhdGhzLGU9dGhpcy5fcGFyc2VkUGF0aHMsZj10aGlzLl9iaW5kaW5ncyxnPWYubGVuZ3RoLTEsaD1mW2ddO2JbYVtnXV09YztmW2NdPWg7Zi5wb3AoKTtlW2NdPWVbZ107ZS5wb3AoKTtkW2NdPWRbZ107ZC5wb3AoKX19fSk7T2JqZWN0LmFzc2lnbihvZi5wcm90b3R5cGUse3BsYXk6ZnVuY3Rpb24oKXt0aGlzLl9taXhlci5fYWN0aXZhdGVBY3Rpb24odGhpcyk7cmV0dXJuIHRoaXN9LHN0b3A6ZnVuY3Rpb24oKXt0aGlzLl9taXhlci5fZGVhY3RpdmF0ZUFjdGlvbih0aGlzKTtyZXR1cm4gdGhpcy5yZXNldCgpfSxyZXNldDpmdW5jdGlvbigpe3RoaXMucGF1c2VkPVxuICAgICExO3RoaXMuZW5hYmxlZD0hMDt0aGlzLnRpbWU9MDt0aGlzLl9sb29wQ291bnQ9LTE7dGhpcy5fc3RhcnRUaW1lPW51bGw7cmV0dXJuIHRoaXMuc3RvcEZhZGluZygpLnN0b3BXYXJwaW5nKCl9LGlzUnVubmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVuYWJsZWQmJiF0aGlzLnBhdXNlZCYmMCE9PXRoaXMudGltZVNjYWxlJiZudWxsPT09dGhpcy5fc3RhcnRUaW1lJiZ0aGlzLl9taXhlci5faXNBY3RpdmVBY3Rpb24odGhpcyl9LGlzU2NoZWR1bGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21peGVyLl9pc0FjdGl2ZUFjdGlvbih0aGlzKX0sc3RhcnRBdDpmdW5jdGlvbihhKXt0aGlzLl9zdGFydFRpbWU9YTtyZXR1cm4gdGhpc30sc2V0TG9vcDpmdW5jdGlvbihhLGIpe3RoaXMubG9vcD1hO3RoaXMucmVwZXRpdGlvbnM9YjtyZXR1cm4gdGhpc30sc2V0RWZmZWN0aXZlV2VpZ2h0OmZ1bmN0aW9uKGEpe3RoaXMud2VpZ2h0PWE7dGhpcy5fZWZmZWN0aXZlV2VpZ2h0PXRoaXMuZW5hYmxlZD9cbiAgICBhOjA7cmV0dXJuIHRoaXMuc3RvcEZhZGluZygpfSxnZXRFZmZlY3RpdmVXZWlnaHQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZWZmZWN0aXZlV2VpZ2h0fSxmYWRlSW46ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuX3NjaGVkdWxlRmFkaW5nKGEsMCwxKX0sZmFkZU91dDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5fc2NoZWR1bGVGYWRpbmcoYSwxLDApfSxjcm9zc0ZhZGVGcm9tOmZ1bmN0aW9uKGEsYixjKXthLmZhZGVPdXQoYik7dGhpcy5mYWRlSW4oYik7aWYoYyl7Yz10aGlzLl9jbGlwLmR1cmF0aW9uO3ZhciBkPWEuX2NsaXAuZHVyYXRpb24sZT1jL2Q7YS53YXJwKDEsZC9jLGIpO3RoaXMud2FycChlLDEsYil9cmV0dXJuIHRoaXN9LGNyb3NzRmFkZVRvOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gYS5jcm9zc0ZhZGVGcm9tKHRoaXMsYixjKX0sc3RvcEZhZGluZzpmdW5jdGlvbigpe3ZhciBhPXRoaXMuX3dlaWdodEludGVycG9sYW50O251bGwhPT1hJiYodGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQ9XG4gICAgbnVsbCx0aGlzLl9taXhlci5fdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQoYSkpO3JldHVybiB0aGlzfSxzZXRFZmZlY3RpdmVUaW1lU2NhbGU6ZnVuY3Rpb24oYSl7dGhpcy50aW1lU2NhbGU9YTt0aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGU9dGhpcy5wYXVzZWQ/MDphO3JldHVybiB0aGlzLnN0b3BXYXJwaW5nKCl9LGdldEVmZmVjdGl2ZVRpbWVTY2FsZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGV9LHNldER1cmF0aW9uOmZ1bmN0aW9uKGEpe3RoaXMudGltZVNjYWxlPXRoaXMuX2NsaXAuZHVyYXRpb24vYTtyZXR1cm4gdGhpcy5zdG9wV2FycGluZygpfSxzeW5jV2l0aDpmdW5jdGlvbihhKXt0aGlzLnRpbWU9YS50aW1lO3RoaXMudGltZVNjYWxlPWEudGltZVNjYWxlO3JldHVybiB0aGlzLnN0b3BXYXJwaW5nKCl9LGhhbHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMud2FycCh0aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGUsMCxhKX0sd2FycDpmdW5jdGlvbihhLFxuICAgIGIsYyl7dmFyIGQ9dGhpcy5fbWl4ZXIsZT1kLnRpbWUsZj10aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudCxnPXRoaXMudGltZVNjYWxlO251bGw9PT1mJiYodGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQ9Zj1kLl9sZW5kQ29udHJvbEludGVycG9sYW50KCkpO2Q9Zi5wYXJhbWV0ZXJQb3NpdGlvbnM7Zj1mLnNhbXBsZVZhbHVlcztkWzBdPWU7ZFsxXT1lK2M7ZlswXT1hL2c7ZlsxXT1iL2c7cmV0dXJuIHRoaXN9LHN0b3BXYXJwaW5nOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQ7bnVsbCE9PWEmJih0aGlzLl90aW1lU2NhbGVJbnRlcnBvbGFudD1udWxsLHRoaXMuX21peGVyLl90YWtlQmFja0NvbnRyb2xJbnRlcnBvbGFudChhKSk7cmV0dXJuIHRoaXN9LGdldE1peGVyOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21peGVyfSxnZXRDbGlwOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NsaXB9LGdldFJvb3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbG9jYWxSb290fHxcbiAgICB0aGlzLl9taXhlci5fcm9vdH0sX3VwZGF0ZTpmdW5jdGlvbihhLGIsYyxkKXtpZih0aGlzLmVuYWJsZWQpe3ZhciBlPXRoaXMuX3N0YXJ0VGltZTtpZihudWxsIT09ZSl7Yj0oYS1lKSpjO2lmKDA+Ynx8MD09PWMpcmV0dXJuO3RoaXMuX3N0YXJ0VGltZT1udWxsO2IqPWN9Yio9dGhpcy5fdXBkYXRlVGltZVNjYWxlKGEpO2M9dGhpcy5fdXBkYXRlVGltZShiKTthPXRoaXMuX3VwZGF0ZVdlaWdodChhKTtpZigwPGEpe2I9dGhpcy5faW50ZXJwb2xhbnRzO2Zvcih2YXIgZT10aGlzLl9wcm9wZXJ0eUJpbmRpbmdzLGY9MCxnPWIubGVuZ3RoO2YhPT1nOysrZiliW2ZdLmV2YWx1YXRlKGMpLGVbZl0uYWNjdW11bGF0ZShkLGEpfX1lbHNlIHRoaXMuX3VwZGF0ZVdlaWdodChhKX0sX3VwZGF0ZVdlaWdodDpmdW5jdGlvbihhKXt2YXIgYj0wO2lmKHRoaXMuZW5hYmxlZCl7dmFyIGI9dGhpcy53ZWlnaHQsYz10aGlzLl93ZWlnaHRJbnRlcnBvbGFudDtpZihudWxsIT09Yyl7dmFyIGQ9Yy5ldmFsdWF0ZShhKVswXSxcbiAgICBiPWIqZDthPmMucGFyYW1ldGVyUG9zaXRpb25zWzFdJiYodGhpcy5zdG9wRmFkaW5nKCksMD09PWQmJih0aGlzLmVuYWJsZWQ9ITEpKX19cmV0dXJuIHRoaXMuX2VmZmVjdGl2ZVdlaWdodD1ifSxfdXBkYXRlVGltZVNjYWxlOmZ1bmN0aW9uKGEpe3ZhciBiPTA7aWYoIXRoaXMucGF1c2VkKXt2YXIgYj10aGlzLnRpbWVTY2FsZSxjPXRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50O2lmKG51bGwhPT1jKXt2YXIgZD1jLmV2YWx1YXRlKGEpWzBdLGI9YipkO2E+Yy5wYXJhbWV0ZXJQb3NpdGlvbnNbMV0mJih0aGlzLnN0b3BXYXJwaW5nKCksMD09PWI/dGhpcy5wYXVzZWQ9ITA6dGhpcy50aW1lU2NhbGU9Yil9fXJldHVybiB0aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGU9Yn0sX3VwZGF0ZVRpbWU6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy50aW1lK2E7aWYoMD09PWEpcmV0dXJuIGI7dmFyIGM9dGhpcy5fY2xpcC5kdXJhdGlvbixkPXRoaXMubG9vcCxlPXRoaXMuX2xvb3BDb3VudDtpZigyMjAwPT09XG4gICAgZClhOntpZigtMT09PWUmJih0aGlzLl9sb29wQ291bnQ9MCx0aGlzLl9zZXRFbmRpbmdzKCEwLCEwLCExKSksYj49YyliPWM7ZWxzZSBpZigwPmIpYj0wO2Vsc2UgYnJlYWsgYTt0aGlzLmNsYW1wV2hlbkZpbmlzaGVkP3RoaXMucGF1c2VkPSEwOnRoaXMuZW5hYmxlZD0hMTt0aGlzLl9taXhlci5kaXNwYXRjaEV2ZW50KHt0eXBlOlwiZmluaXNoZWRcIixhY3Rpb246dGhpcyxkaXJlY3Rpb246MD5hPy0xOjF9KX1lbHNle2Q9MjIwMj09PWQ7LTE9PT1lJiYoMDw9YT8oZT0wLHRoaXMuX3NldEVuZGluZ3MoITAsMD09PXRoaXMucmVwZXRpdGlvbnMsZCkpOnRoaXMuX3NldEVuZGluZ3MoMD09PXRoaXMucmVwZXRpdGlvbnMsITAsZCkpO2lmKGI+PWN8fDA+Yil7dmFyIGY9TWF0aC5mbG9vcihiL2MpLGI9Yi1jKmYsZT1lK01hdGguYWJzKGYpLGc9dGhpcy5yZXBldGl0aW9ucy1lOzA+Zz8odGhpcy5jbGFtcFdoZW5GaW5pc2hlZD90aGlzLnBhdXNlZD0hMDp0aGlzLmVuYWJsZWQ9ITEsYj0wPGE/XG4gICAgYzowLHRoaXMuX21peGVyLmRpc3BhdGNoRXZlbnQoe3R5cGU6XCJmaW5pc2hlZFwiLGFjdGlvbjp0aGlzLGRpcmVjdGlvbjowPGE/MTotMX0pKTooMD09PWc/KGE9MD5hLHRoaXMuX3NldEVuZGluZ3MoYSwhYSxkKSk6dGhpcy5fc2V0RW5kaW5ncyghMSwhMSxkKSx0aGlzLl9sb29wQ291bnQ9ZSx0aGlzLl9taXhlci5kaXNwYXRjaEV2ZW50KHt0eXBlOlwibG9vcFwiLGFjdGlvbjp0aGlzLGxvb3BEZWx0YTpmfSkpfWlmKGQmJjE9PT0oZSYxKSlyZXR1cm4gdGhpcy50aW1lPWIsYy1ifXJldHVybiB0aGlzLnRpbWU9Yn0sX3NldEVuZGluZ3M6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuX2ludGVycG9sYW50U2V0dGluZ3M7Yz8oZC5lbmRpbmdTdGFydD0yNDAxLGQuZW5kaW5nRW5kPTI0MDEpOihkLmVuZGluZ1N0YXJ0PWE/dGhpcy56ZXJvU2xvcGVBdFN0YXJ0PzI0MDE6MjQwMDoyNDAyLGQuZW5kaW5nRW5kPWI/dGhpcy56ZXJvU2xvcGVBdEVuZD8yNDAxOjI0MDA6MjQwMil9LF9zY2hlZHVsZUZhZGluZzpmdW5jdGlvbihhLFxuICAgIGIsYyl7dmFyIGQ9dGhpcy5fbWl4ZXIsZT1kLnRpbWUsZj10aGlzLl93ZWlnaHRJbnRlcnBvbGFudDtudWxsPT09ZiYmKHRoaXMuX3dlaWdodEludGVycG9sYW50PWY9ZC5fbGVuZENvbnRyb2xJbnRlcnBvbGFudCgpKTtkPWYucGFyYW1ldGVyUG9zaXRpb25zO2Y9Zi5zYW1wbGVWYWx1ZXM7ZFswXT1lO2ZbMF09YjtkWzFdPWUrYTtmWzFdPWM7cmV0dXJuIHRoaXN9fSk7d2UucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZSh6YS5wcm90b3R5cGUpLHtjb25zdHJ1Y3Rvcjp3ZSxfYmluZEFjdGlvbjpmdW5jdGlvbihhLGIpe3ZhciBjPWEuX2xvY2FsUm9vdHx8dGhpcy5fcm9vdCxkPWEuX2NsaXAudHJhY2tzLGU9ZC5sZW5ndGgsZj1hLl9wcm9wZXJ0eUJpbmRpbmdzO2E9YS5faW50ZXJwb2xhbnRzO3ZhciBnPWMudXVpZCxoPXRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxrPWhbZ107dm9pZCAwPT09ayYmKGs9e30saFtnXT1rKTtmb3IoaD0wO2ghPT1lOysraCl7dmFyIG09XG4gICAgZFtoXSxsPW0ubmFtZSxuPWtbbF07aWYodm9pZCAwPT09bil7bj1mW2hdO2lmKHZvaWQgMCE9PW4pe251bGw9PT1uLl9jYWNoZUluZGV4JiYoKytuLnJlZmVyZW5jZUNvdW50LHRoaXMuX2FkZEluYWN0aXZlQmluZGluZyhuLGcsbCkpO2NvbnRpbnVlfW49bmV3IHZlKHFhLmNyZWF0ZShjLGwsYiYmYi5fcHJvcGVydHlCaW5kaW5nc1toXS5iaW5kaW5nLnBhcnNlZFBhdGgpLG0uVmFsdWVUeXBlTmFtZSxtLmdldFZhbHVlU2l6ZSgpKTsrK24ucmVmZXJlbmNlQ291bnQ7dGhpcy5fYWRkSW5hY3RpdmVCaW5kaW5nKG4sZyxsKX1mW2hdPW47YVtoXS5yZXN1bHRCdWZmZXI9bi5idWZmZXJ9fSxfYWN0aXZhdGVBY3Rpb246ZnVuY3Rpb24oYSl7aWYoIXRoaXMuX2lzQWN0aXZlQWN0aW9uKGEpKXtpZihudWxsPT09YS5fY2FjaGVJbmRleCl7dmFyIGI9KGEuX2xvY2FsUm9vdHx8dGhpcy5fcm9vdCkudXVpZCxjPWEuX2NsaXAudXVpZCxkPXRoaXMuX2FjdGlvbnNCeUNsaXBbY107dGhpcy5fYmluZEFjdGlvbihhLFxuICAgIGQmJmQua25vd25BY3Rpb25zWzBdKTt0aGlzLl9hZGRJbmFjdGl2ZUFjdGlvbihhLGMsYil9Yj1hLl9wcm9wZXJ0eUJpbmRpbmdzO2M9MDtmb3IoZD1iLmxlbmd0aDtjIT09ZDsrK2Mpe3ZhciBlPWJbY107MD09PWUudXNlQ291bnQrKyYmKHRoaXMuX2xlbmRCaW5kaW5nKGUpLGUuc2F2ZU9yaWdpbmFsU3RhdGUoKSl9dGhpcy5fbGVuZEFjdGlvbihhKX19LF9kZWFjdGl2YXRlQWN0aW9uOmZ1bmN0aW9uKGEpe2lmKHRoaXMuX2lzQWN0aXZlQWN0aW9uKGEpKXtmb3IodmFyIGI9YS5fcHJvcGVydHlCaW5kaW5ncyxjPTAsZD1iLmxlbmd0aDtjIT09ZDsrK2Mpe3ZhciBlPWJbY107MD09PS0tZS51c2VDb3VudCYmKGUucmVzdG9yZU9yaWdpbmFsU3RhdGUoKSx0aGlzLl90YWtlQmFja0JpbmRpbmcoZSkpfXRoaXMuX3Rha2VCYWNrQWN0aW9uKGEpfX0sX2luaXRNZW1vcnlNYW5hZ2VyOmZ1bmN0aW9uKCl7dGhpcy5fYWN0aW9ucz1bXTt0aGlzLl9uQWN0aXZlQWN0aW9ucz0wO3RoaXMuX2FjdGlvbnNCeUNsaXA9XG4gICAge307dGhpcy5fYmluZGluZ3M9W107dGhpcy5fbkFjdGl2ZUJpbmRpbmdzPTA7dGhpcy5fYmluZGluZ3NCeVJvb3RBbmROYW1lPXt9O3RoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHM9W107dGhpcy5fbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHM9MDt2YXIgYT10aGlzO3RoaXMuc3RhdHM9e2FjdGlvbnM6e2dldCB0b3RhbCgpe3JldHVybiBhLl9hY3Rpb25zLmxlbmd0aH0sZ2V0IGluVXNlKCl7cmV0dXJuIGEuX25BY3RpdmVBY3Rpb25zfX0sYmluZGluZ3M6e2dldCB0b3RhbCgpe3JldHVybiBhLl9iaW5kaW5ncy5sZW5ndGh9LGdldCBpblVzZSgpe3JldHVybiBhLl9uQWN0aXZlQmluZGluZ3N9fSxjb250cm9sSW50ZXJwb2xhbnRzOntnZXQgdG90YWwoKXtyZXR1cm4gYS5fY29udHJvbEludGVycG9sYW50cy5sZW5ndGh9LGdldCBpblVzZSgpe3JldHVybiBhLl9uQWN0aXZlQ29udHJvbEludGVycG9sYW50c319fX0sX2lzQWN0aXZlQWN0aW9uOmZ1bmN0aW9uKGEpe2E9YS5fY2FjaGVJbmRleDtcbiAgICByZXR1cm4gbnVsbCE9PWEmJmE8dGhpcy5fbkFjdGl2ZUFjdGlvbnN9LF9hZGRJbmFjdGl2ZUFjdGlvbjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5fYWN0aW9ucyxlPXRoaXMuX2FjdGlvbnNCeUNsaXAsZj1lW2JdO3ZvaWQgMD09PWY/KGY9e2tub3duQWN0aW9uczpbYV0sYWN0aW9uQnlSb290Ont9fSxhLl9ieUNsaXBDYWNoZUluZGV4PTAsZVtiXT1mKTooYj1mLmtub3duQWN0aW9ucyxhLl9ieUNsaXBDYWNoZUluZGV4PWIubGVuZ3RoLGIucHVzaChhKSk7YS5fY2FjaGVJbmRleD1kLmxlbmd0aDtkLnB1c2goYSk7Zi5hY3Rpb25CeVJvb3RbY109YX0sX3JlbW92ZUluYWN0aXZlQWN0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2FjdGlvbnMsYz1iW2IubGVuZ3RoLTFdLGQ9YS5fY2FjaGVJbmRleDtjLl9jYWNoZUluZGV4PWQ7YltkXT1jO2IucG9wKCk7YS5fY2FjaGVJbmRleD1udWxsO3ZhciBiPWEuX2NsaXAudXVpZCxjPXRoaXMuX2FjdGlvbnNCeUNsaXAsZD1jW2JdLGU9XG4gICAgZC5rbm93bkFjdGlvbnMsZj1lW2UubGVuZ3RoLTFdLGc9YS5fYnlDbGlwQ2FjaGVJbmRleDtmLl9ieUNsaXBDYWNoZUluZGV4PWc7ZVtnXT1mO2UucG9wKCk7YS5fYnlDbGlwQ2FjaGVJbmRleD1udWxsO2RlbGV0ZSBkLmFjdGlvbkJ5Um9vdFsoYS5fbG9jYWxSb290fHx0aGlzLl9yb290KS51dWlkXTswPT09ZS5sZW5ndGgmJmRlbGV0ZSBjW2JdO3RoaXMuX3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb24oYSl9LF9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uOmZ1bmN0aW9uKGEpe2E9YS5fcHJvcGVydHlCaW5kaW5ncztmb3IodmFyIGI9MCxjPWEubGVuZ3RoO2IhPT1jOysrYil7dmFyIGQ9YVtiXTswPT09LS1kLnJlZmVyZW5jZUNvdW50JiZ0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmcoZCl9fSxfbGVuZEFjdGlvbjpmdW5jdGlvbihhKXt2YXIgYj10aGlzLl9hY3Rpb25zLGM9YS5fY2FjaGVJbmRleCxkPXRoaXMuX25BY3RpdmVBY3Rpb25zKyssZT1iW2RdO2EuX2NhY2hlSW5kZXg9XG4gICAgZDtiW2RdPWE7ZS5fY2FjaGVJbmRleD1jO2JbY109ZX0sX3Rha2VCYWNrQWN0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2FjdGlvbnMsYz1hLl9jYWNoZUluZGV4LGQ9LS10aGlzLl9uQWN0aXZlQWN0aW9ucyxlPWJbZF07YS5fY2FjaGVJbmRleD1kO2JbZF09YTtlLl9jYWNoZUluZGV4PWM7YltjXT1lfSxfYWRkSW5hY3RpdmVCaW5kaW5nOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUsZT1kW2JdLGY9dGhpcy5fYmluZGluZ3M7dm9pZCAwPT09ZSYmKGU9e30sZFtiXT1lKTtlW2NdPWE7YS5fY2FjaGVJbmRleD1mLmxlbmd0aDtmLnB1c2goYSl9LF9yZW1vdmVJbmFjdGl2ZUJpbmRpbmc6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5fYmluZGluZ3MsYz1hLmJpbmRpbmcsZD1jLnJvb3ROb2RlLnV1aWQsYz1jLnBhdGgsZT10aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUsZj1lW2RdLGc9YltiLmxlbmd0aC0xXTthPWEuX2NhY2hlSW5kZXg7XG4gICAgZy5fY2FjaGVJbmRleD1hO2JbYV09ZztiLnBvcCgpO2RlbGV0ZSBmW2NdO2E6e2Zvcih2YXIgaCBpbiBmKWJyZWFrIGE7ZGVsZXRlIGVbZF19fSxfbGVuZEJpbmRpbmc6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5fYmluZGluZ3MsYz1hLl9jYWNoZUluZGV4LGQ9dGhpcy5fbkFjdGl2ZUJpbmRpbmdzKyssZT1iW2RdO2EuX2NhY2hlSW5kZXg9ZDtiW2RdPWE7ZS5fY2FjaGVJbmRleD1jO2JbY109ZX0sX3Rha2VCYWNrQmluZGluZzpmdW5jdGlvbihhKXt2YXIgYj10aGlzLl9iaW5kaW5ncyxjPWEuX2NhY2hlSW5kZXgsZD0tLXRoaXMuX25BY3RpdmVCaW5kaW5ncyxlPWJbZF07YS5fY2FjaGVJbmRleD1kO2JbZF09YTtlLl9jYWNoZUluZGV4PWM7YltjXT1lfSxfbGVuZENvbnRyb2xJbnRlcnBvbGFudDpmdW5jdGlvbigpe3ZhciBhPXRoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHMsYj10aGlzLl9uQWN0aXZlQ29udHJvbEludGVycG9sYW50cysrLGM9YVtiXTt2b2lkIDA9PT1jJiYoYz1uZXcgZWQobmV3IEZsb2F0MzJBcnJheSgyKSxcbiAgICBuZXcgRmxvYXQzMkFycmF5KDIpLDEsdGhpcy5fY29udHJvbEludGVycG9sYW50c1Jlc3VsdEJ1ZmZlciksYy5fX2NhY2hlSW5kZXg9YixhW2JdPWMpO3JldHVybiBjfSxfdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQ6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5fY29udHJvbEludGVycG9sYW50cyxjPWEuX19jYWNoZUluZGV4LGQ9LS10aGlzLl9uQWN0aXZlQ29udHJvbEludGVycG9sYW50cyxlPWJbZF07YS5fX2NhY2hlSW5kZXg9ZDtiW2RdPWE7ZS5fX2NhY2hlSW5kZXg9YztiW2NdPWV9LF9jb250cm9sSW50ZXJwb2xhbnRzUmVzdWx0QnVmZmVyOm5ldyBGbG9hdDMyQXJyYXkoMSksY2xpcEFjdGlvbjpmdW5jdGlvbihhLGIpe3ZhciBjPWJ8fHRoaXMuX3Jvb3QsZD1jLnV1aWQsYz1cInN0cmluZ1wiPT09dHlwZW9mIGE/Q2EuZmluZEJ5TmFtZShjLGEpOmE7YT1udWxsIT09Yz9jLnV1aWQ6YTt2YXIgZT10aGlzLl9hY3Rpb25zQnlDbGlwW2FdLGY9bnVsbDtpZih2b2lkIDAhPT1lKXtmPVxuICAgIGUuYWN0aW9uQnlSb290W2RdO2lmKHZvaWQgMCE9PWYpcmV0dXJuIGY7Zj1lLmtub3duQWN0aW9uc1swXTtudWxsPT09YyYmKGM9Zi5fY2xpcCl9aWYobnVsbD09PWMpcmV0dXJuIG51bGw7Yj1uZXcgb2YodGhpcyxjLGIpO3RoaXMuX2JpbmRBY3Rpb24oYixmKTt0aGlzLl9hZGRJbmFjdGl2ZUFjdGlvbihiLGEsZCk7cmV0dXJuIGJ9LGV4aXN0aW5nQWN0aW9uOmZ1bmN0aW9uKGEsYil7dmFyIGM9Ynx8dGhpcy5fcm9vdDtiPWMudXVpZDtjPVwic3RyaW5nXCI9PT10eXBlb2YgYT9DYS5maW5kQnlOYW1lKGMsYSk6YTthPXRoaXMuX2FjdGlvbnNCeUNsaXBbYz9jLnV1aWQ6YV07cmV0dXJuIHZvaWQgMCE9PWE/YS5hY3Rpb25CeVJvb3RbYl18fG51bGw6bnVsbH0sc3RvcEFsbEFjdGlvbjpmdW5jdGlvbigpe2Zvcih2YXIgYT10aGlzLl9hY3Rpb25zLGI9dGhpcy5fbkFjdGl2ZUFjdGlvbnMsYz10aGlzLl9iaW5kaW5ncyxkPXRoaXMuX25BY3RpdmVCaW5kaW5ncyxlPXRoaXMuX25BY3RpdmVCaW5kaW5ncz1cbiAgICB0aGlzLl9uQWN0aXZlQWN0aW9ucz0wO2UhPT1iOysrZSlhW2VdLnJlc2V0KCk7Zm9yKGU9MDtlIT09ZDsrK2UpY1tlXS51c2VDb3VudD0wO3JldHVybiB0aGlzfSx1cGRhdGU6ZnVuY3Rpb24oYSl7YSo9dGhpcy50aW1lU2NhbGU7Zm9yKHZhciBiPXRoaXMuX2FjdGlvbnMsYz10aGlzLl9uQWN0aXZlQWN0aW9ucyxkPXRoaXMudGltZSs9YSxlPU1hdGguc2lnbihhKSxmPXRoaXMuX2FjY3VJbmRleF49MSxnPTA7ZyE9PWM7KytnKWJbZ10uX3VwZGF0ZShkLGEsZSxmKTthPXRoaXMuX2JpbmRpbmdzO2I9dGhpcy5fbkFjdGl2ZUJpbmRpbmdzO2ZvcihnPTA7ZyE9PWI7KytnKWFbZ10uYXBwbHkoZik7cmV0dXJuIHRoaXN9LGdldFJvb3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcm9vdH0sdW5jYWNoZUNsaXA6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5fYWN0aW9uczthPWEudXVpZDt2YXIgYz10aGlzLl9hY3Rpb25zQnlDbGlwLGQ9Y1thXTtpZih2b2lkIDAhPT1kKXtmb3IodmFyIGQ9ZC5rbm93bkFjdGlvbnMsXG4gICAgZT0wLGY9ZC5sZW5ndGg7ZSE9PWY7KytlKXt2YXIgZz1kW2VdO3RoaXMuX2RlYWN0aXZhdGVBY3Rpb24oZyk7dmFyIGg9Zy5fY2FjaGVJbmRleCxrPWJbYi5sZW5ndGgtMV07Zy5fY2FjaGVJbmRleD1udWxsO2cuX2J5Q2xpcENhY2hlSW5kZXg9bnVsbDtrLl9jYWNoZUluZGV4PWg7YltoXT1rO2IucG9wKCk7dGhpcy5fcmVtb3ZlSW5hY3RpdmVCaW5kaW5nc0ZvckFjdGlvbihnKX1kZWxldGUgY1thXX19LHVuY2FjaGVSb290OmZ1bmN0aW9uKGEpe2E9YS51dWlkO3ZhciBiPXRoaXMuX2FjdGlvbnNCeUNsaXA7Zm9yKGQgaW4gYil7dmFyIGM9YltkXS5hY3Rpb25CeVJvb3RbYV07dm9pZCAwIT09YyYmKHRoaXMuX2RlYWN0aXZhdGVBY3Rpb24oYyksdGhpcy5fcmVtb3ZlSW5hY3RpdmVBY3Rpb24oYykpfXZhciBkPXRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZVthXTtpZih2b2lkIDAhPT1kKWZvcih2YXIgZSBpbiBkKWE9ZFtlXSxhLnJlc3RvcmVPcmlnaW5hbFN0YXRlKCksdGhpcy5fcmVtb3ZlSW5hY3RpdmVCaW5kaW5nKGEpfSxcbiAgICB1bmNhY2hlQWN0aW9uOmZ1bmN0aW9uKGEsYil7YT10aGlzLmV4aXN0aW5nQWN0aW9uKGEsYik7bnVsbCE9PWEmJih0aGlzLl9kZWFjdGl2YXRlQWN0aW9uKGEpLHRoaXMuX3JlbW92ZUluYWN0aXZlQWN0aW9uKGEpKX19KTtRZC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFFkKHZvaWQgMD09PXRoaXMudmFsdWUuY2xvbmU/dGhpcy52YWx1ZTp0aGlzLnZhbHVlLmNsb25lKCkpfTt4ZS5wcm90b3R5cGU9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKEUucHJvdG90eXBlKSx7Y29uc3RydWN0b3I6eGUsaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeTohMCxjb3B5OmZ1bmN0aW9uKGEpe0UucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMubWF4SW5zdGFuY2VkQ291bnQ9YS5tYXhJbnN0YW5jZWRDb3VudDtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoeWUucHJvdG90eXBlLFxuICAgIHtjb3VudDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGF0YS5jb3VudH19LGFycmF5OntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kYXRhLmFycmF5fX19KTtPYmplY3QuYXNzaWduKHllLnByb3RvdHlwZSx7aXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZTohMCxzZXRYOmZ1bmN0aW9uKGEsYil7dGhpcy5kYXRhLmFycmF5W2EqdGhpcy5kYXRhLnN0cmlkZSt0aGlzLm9mZnNldF09YjtyZXR1cm4gdGhpc30sc2V0WTpmdW5jdGlvbihhLGIpe3RoaXMuZGF0YS5hcnJheVthKnRoaXMuZGF0YS5zdHJpZGUrdGhpcy5vZmZzZXQrMV09YjtyZXR1cm4gdGhpc30sc2V0WjpmdW5jdGlvbihhLGIpe3RoaXMuZGF0YS5hcnJheVthKnRoaXMuZGF0YS5zdHJpZGUrdGhpcy5vZmZzZXQrMl09YjtyZXR1cm4gdGhpc30sc2V0VzpmdW5jdGlvbihhLGIpe3RoaXMuZGF0YS5hcnJheVthKnRoaXMuZGF0YS5zdHJpZGUrdGhpcy5vZmZzZXQrM109YjtyZXR1cm4gdGhpc30sZ2V0WDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5kYXRhLmFycmF5W2EqXG4gICAgdGhpcy5kYXRhLnN0cmlkZSt0aGlzLm9mZnNldF19LGdldFk6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZGF0YS5hcnJheVthKnRoaXMuZGF0YS5zdHJpZGUrdGhpcy5vZmZzZXQrMV19LGdldFo6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZGF0YS5hcnJheVthKnRoaXMuZGF0YS5zdHJpZGUrdGhpcy5vZmZzZXQrMl19LGdldFc6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZGF0YS5hcnJheVthKnRoaXMuZGF0YS5zdHJpZGUrdGhpcy5vZmZzZXQrM119LHNldFhZOmZ1bmN0aW9uKGEsYixjKXthPWEqdGhpcy5kYXRhLnN0cmlkZSt0aGlzLm9mZnNldDt0aGlzLmRhdGEuYXJyYXlbYSswXT1iO3RoaXMuZGF0YS5hcnJheVthKzFdPWM7cmV0dXJuIHRoaXN9LHNldFhZWjpmdW5jdGlvbihhLGIsYyxkKXthPWEqdGhpcy5kYXRhLnN0cmlkZSt0aGlzLm9mZnNldDt0aGlzLmRhdGEuYXJyYXlbYSswXT1iO3RoaXMuZGF0YS5hcnJheVthKzFdPWM7dGhpcy5kYXRhLmFycmF5W2ErMl09ZDtyZXR1cm4gdGhpc30sXG4gICAgc2V0WFlaVzpmdW5jdGlvbihhLGIsYyxkLGUpe2E9YSp0aGlzLmRhdGEuc3RyaWRlK3RoaXMub2Zmc2V0O3RoaXMuZGF0YS5hcnJheVthKzBdPWI7dGhpcy5kYXRhLmFycmF5W2ErMV09Yzt0aGlzLmRhdGEuYXJyYXlbYSsyXT1kO3RoaXMuZGF0YS5hcnJheVthKzNdPWU7cmV0dXJuIHRoaXN9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KG1jLnByb3RvdHlwZSxcIm5lZWRzVXBkYXRlXCIse3NldDpmdW5jdGlvbihhKXshMD09PWEmJnRoaXMudmVyc2lvbisrfX0pO09iamVjdC5hc3NpZ24obWMucHJvdG90eXBlLHtpc0ludGVybGVhdmVkQnVmZmVyOiEwLHNldEFycmF5OmZ1bmN0aW9uKGEpe2lmKEFycmF5LmlzQXJyYXkoYSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRIUkVFLkJ1ZmZlckF0dHJpYnV0ZTogYXJyYXkgc2hvdWxkIGJlIGEgVHlwZWQgQXJyYXkuXCIpO3RoaXMuY291bnQ9dm9pZCAwIT09YT9hLmxlbmd0aC90aGlzLnN0cmlkZTowO3RoaXMuYXJyYXk9YX0sc2V0RHluYW1pYzpmdW5jdGlvbihhKXt0aGlzLmR5bmFtaWM9XG4gICAgYTtyZXR1cm4gdGhpc30sY29weTpmdW5jdGlvbihhKXt0aGlzLmFycmF5PW5ldyBhLmFycmF5LmNvbnN0cnVjdG9yKGEuYXJyYXkpO3RoaXMuY291bnQ9YS5jb3VudDt0aGlzLnN0cmlkZT1hLnN0cmlkZTt0aGlzLmR5bmFtaWM9YS5keW5hbWljO3JldHVybiB0aGlzfSxjb3B5QXQ6ZnVuY3Rpb24oYSxiLGMpe2EqPXRoaXMuc3RyaWRlO2MqPWIuc3RyaWRlO2Zvcih2YXIgZD0wLGU9dGhpcy5zdHJpZGU7ZDxlO2QrKyl0aGlzLmFycmF5W2ErZF09Yi5hcnJheVtjK2RdO3JldHVybiB0aGlzfSxzZXQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj0wKTt0aGlzLmFycmF5LnNldChhLGIpO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbigpe3JldHVybihuZXcgdGhpcy5jb25zdHJ1Y3RvcikuY29weSh0aGlzKX0sb25VcGxvYWQ6ZnVuY3Rpb24oYSl7dGhpcy5vblVwbG9hZENhbGxiYWNrPWE7cmV0dXJuIHRoaXN9fSk7emUucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShtYy5wcm90b3R5cGUpLFxuICAgIHtjb25zdHJ1Y3Rvcjp6ZSxpc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyOiEwLGNvcHk6ZnVuY3Rpb24oYSl7bWMucHJvdG90eXBlLmNvcHkuY2FsbCh0aGlzLGEpO3RoaXMubWVzaFBlckF0dHJpYnV0ZT1hLm1lc2hQZXJBdHRyaWJ1dGU7cmV0dXJuIHRoaXN9fSk7QWUucHJvdG90eXBlPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShNLnByb3RvdHlwZSkse2NvbnN0cnVjdG9yOkFlLGlzSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlOiEwLGNvcHk6ZnVuY3Rpb24oYSl7TS5wcm90b3R5cGUuY29weS5jYWxsKHRoaXMsYSk7dGhpcy5tZXNoUGVyQXR0cmlidXRlPWEubWVzaFBlckF0dHJpYnV0ZTtyZXR1cm4gdGhpc319KTtPYmplY3QuYXNzaWduKHBmLnByb3RvdHlwZSx7bGluZVByZWNpc2lvbjoxLHNldDpmdW5jdGlvbihhLGIpe3RoaXMucmF5LnNldChhLGIpfSxzZXRGcm9tQ2FtZXJhOmZ1bmN0aW9uKGEsYil7YiYmYi5pc1BlcnNwZWN0aXZlQ2FtZXJhPyh0aGlzLnJheS5vcmlnaW4uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGIubWF0cml4V29ybGQpLFxuICAgIHRoaXMucmF5LmRpcmVjdGlvbi5zZXQoYS54LGEueSwuNSkudW5wcm9qZWN0KGIpLnN1Yih0aGlzLnJheS5vcmlnaW4pLm5vcm1hbGl6ZSgpKTpiJiZiLmlzT3J0aG9ncmFwaGljQ2FtZXJhPyh0aGlzLnJheS5vcmlnaW4uc2V0KGEueCxhLnksKGIubmVhcitiLmZhcikvKGIubmVhci1iLmZhcikpLnVucHJvamVjdChiKSx0aGlzLnJheS5kaXJlY3Rpb24uc2V0KDAsMCwtMSkudHJhbnNmb3JtRGlyZWN0aW9uKGIubWF0cml4V29ybGQpKTpjb25zb2xlLmVycm9yKFwiVEhSRUUuUmF5Y2FzdGVyOiBVbnN1cHBvcnRlZCBjYW1lcmEgdHlwZS5cIil9LGludGVyc2VjdE9iamVjdDpmdW5jdGlvbihhLGIpe3ZhciBjPVtdO0JlKGEsdGhpcyxjLGIpO2Muc29ydChxZik7cmV0dXJuIGN9LGludGVyc2VjdE9iamVjdHM6ZnVuY3Rpb24oYSxiKXt2YXIgYz1bXTtpZighMT09PUFycmF5LmlzQXJyYXkoYSkpcmV0dXJuIGNvbnNvbGUud2FybihcIlRIUkVFLlJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzOiBvYmplY3RzIGlzIG5vdCBhbiBBcnJheS5cIiksXG4gICAgYztmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTtkKyspQmUoYVtkXSx0aGlzLGMsYik7Yy5zb3J0KHFmKTtyZXR1cm4gY319KTtPYmplY3QuYXNzaWduKHJmLnByb3RvdHlwZSx7c3RhcnQ6ZnVuY3Rpb24oKXt0aGlzLm9sZFRpbWU9dGhpcy5zdGFydFRpbWU9KFwidW5kZWZpbmVkXCI9PT10eXBlb2YgcGVyZm9ybWFuY2U/RGF0ZTpwZXJmb3JtYW5jZSkubm93KCk7dGhpcy5lbGFwc2VkVGltZT0wO3RoaXMucnVubmluZz0hMH0sc3RvcDpmdW5jdGlvbigpe3RoaXMuZ2V0RWxhcHNlZFRpbWUoKTt0aGlzLmF1dG9TdGFydD10aGlzLnJ1bm5pbmc9ITF9LGdldEVsYXBzZWRUaW1lOmZ1bmN0aW9uKCl7dGhpcy5nZXREZWx0YSgpO3JldHVybiB0aGlzLmVsYXBzZWRUaW1lfSxnZXREZWx0YTpmdW5jdGlvbigpe3ZhciBhPTA7aWYodGhpcy5hdXRvU3RhcnQmJiF0aGlzLnJ1bm5pbmcpcmV0dXJuIHRoaXMuc3RhcnQoKSwwO2lmKHRoaXMucnVubmluZyl7dmFyIGI9KFwidW5kZWZpbmVkXCI9PT10eXBlb2YgcGVyZm9ybWFuY2U/XG4gICAgRGF0ZTpwZXJmb3JtYW5jZSkubm93KCksYT0oYi10aGlzLm9sZFRpbWUpLzFFMzt0aGlzLm9sZFRpbWU9Yjt0aGlzLmVsYXBzZWRUaW1lKz1hfXJldHVybiBhfX0pO09iamVjdC5hc3NpZ24oc2YucHJvdG90eXBlLHtzZXQ6ZnVuY3Rpb24oYSxiLGMpe3RoaXMucmFkaXVzPWE7dGhpcy5waGk9Yjt0aGlzLnRoZXRhPWM7cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuKG5ldyB0aGlzLmNvbnN0cnVjdG9yKS5jb3B5KHRoaXMpfSxjb3B5OmZ1bmN0aW9uKGEpe3RoaXMucmFkaXVzPWEucmFkaXVzO3RoaXMucGhpPWEucGhpO3RoaXMudGhldGE9YS50aGV0YTtyZXR1cm4gdGhpc30sbWFrZVNhZmU6ZnVuY3Rpb24oKXt0aGlzLnBoaT1NYXRoLm1heCgxRS02LE1hdGgubWluKE1hdGguUEktMUUtNix0aGlzLnBoaSkpO3JldHVybiB0aGlzfSxzZXRGcm9tVmVjdG9yMzpmdW5jdGlvbihhKXt0aGlzLnJhZGl1cz1hLmxlbmd0aCgpOzA9PT10aGlzLnJhZGl1cz90aGlzLnBoaT10aGlzLnRoZXRhPVxuICAgIDA6KHRoaXMudGhldGE9TWF0aC5hdGFuMihhLngsYS56KSx0aGlzLnBoaT1NYXRoLmFjb3MoUS5jbGFtcChhLnkvdGhpcy5yYWRpdXMsLTEsMSkpKTtyZXR1cm4gdGhpc319KTtPYmplY3QuYXNzaWduKHRmLnByb3RvdHlwZSx7c2V0OmZ1bmN0aW9uKGEsYixjKXt0aGlzLnJhZGl1cz1hO3RoaXMudGhldGE9Yjt0aGlzLnk9YztyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oKXtyZXR1cm4obmV3IHRoaXMuY29uc3RydWN0b3IpLmNvcHkodGhpcyl9LGNvcHk6ZnVuY3Rpb24oYSl7dGhpcy5yYWRpdXM9YS5yYWRpdXM7dGhpcy50aGV0YT1hLnRoZXRhO3RoaXMueT1hLnk7cmV0dXJuIHRoaXN9LHNldEZyb21WZWN0b3IzOmZ1bmN0aW9uKGEpe3RoaXMucmFkaXVzPU1hdGguc3FydChhLngqYS54K2EueiphLnopO3RoaXMudGhldGE9TWF0aC5hdGFuMihhLngsYS56KTt0aGlzLnk9YS55O3JldHVybiB0aGlzfX0pO2dkLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHgucHJvdG90eXBlKTtnZC5wcm90b3R5cGUuY29uc3RydWN0b3I9XG4gICAgZ2Q7Z2QucHJvdG90eXBlLmlzSW1tZWRpYXRlUmVuZGVyT2JqZWN0PSEwO2hkLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFgucHJvdG90eXBlKTtoZC5wcm90b3R5cGUuY29uc3RydWN0b3I9aGQ7aGQucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBwLGI9bmV3IHAsYz1uZXcgbWE7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGQsZT1bXCJhXCIsXCJiXCIsXCJjXCJdO3RoaXMub2JqZWN0LnVwZGF0ZU1hdHJpeFdvcmxkKCEwKTtjLmdldE5vcm1hbE1hdHJpeCh0aGlzLm9iamVjdC5tYXRyaXhXb3JsZCk7dmFyIGY9dGhpcy5vYmplY3QubWF0cml4V29ybGQsZz10aGlzLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb247aWYoKGQ9dGhpcy5vYmplY3QuZ2VvbWV0cnkpJiZkLmlzR2VvbWV0cnkpZm9yKHZhciBoPWQudmVydGljZXMsaz1kLmZhY2VzLGw9ZD0wLHA9ay5sZW5ndGg7bDxwO2wrKylmb3IodmFyIG49a1tsXSx1PTAscj1uLnZlcnRleE5vcm1hbHMubGVuZ3RoO3U8cjt1Kyspe3ZhciB0PVxuICAgIG4udmVydGV4Tm9ybWFsc1t1XTthLmNvcHkoaFtuW2VbdV1dXSkuYXBwbHlNYXRyaXg0KGYpO2IuY29weSh0KS5hcHBseU1hdHJpeDMoYykubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIodGhpcy5zaXplKS5hZGQoYSk7Zy5zZXRYWVooZCxhLngsYS55LGEueik7ZCs9MTtnLnNldFhZWihkLGIueCxiLnksYi56KTtkKz0xfWVsc2UgaWYoZCYmZC5pc0J1ZmZlckdlb21ldHJ5KWZvcihlPWQuYXR0cmlidXRlcy5wb3NpdGlvbixoPWQuYXR0cmlidXRlcy5ub3JtYWwsdT1kPTAscj1lLmNvdW50O3U8cjt1KyspYS5zZXQoZS5nZXRYKHUpLGUuZ2V0WSh1KSxlLmdldFoodSkpLmFwcGx5TWF0cml4NChmKSxiLnNldChoLmdldFgodSksaC5nZXRZKHUpLGguZ2V0Wih1KSksYi5hcHBseU1hdHJpeDMoYykubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIodGhpcy5zaXplKS5hZGQoYSksZy5zZXRYWVooZCxhLngsYS55LGEueiksZCs9MSxnLnNldFhZWihkLGIueCxiLnksYi56KSxkKz0xO2cubmVlZHNVcGRhdGU9XG4gICAgITB9fSgpO25jLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHgucHJvdG90eXBlKTtuYy5wcm90b3R5cGUuY29uc3RydWN0b3I9bmM7bmMucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLmNvbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO3RoaXMuY29uZS5tYXRlcmlhbC5kaXNwb3NlKCl9O25jLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcCxiPW5ldyBwO3JldHVybiBmdW5jdGlvbigpe3RoaXMubGlnaHQudXBkYXRlTWF0cml4V29ybGQoKTt2YXIgYz10aGlzLmxpZ2h0LmRpc3RhbmNlP3RoaXMubGlnaHQuZGlzdGFuY2U6MUUzLGQ9YypNYXRoLnRhbih0aGlzLmxpZ2h0LmFuZ2xlKTt0aGlzLmNvbmUuc2NhbGUuc2V0KGQsZCxjKTthLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLmxpZ2h0Lm1hdHJpeFdvcmxkKTtiLnNldEZyb21NYXRyaXhQb3NpdGlvbih0aGlzLmxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCk7dGhpcy5jb25lLmxvb2tBdChiLnN1YihhKSk7XG4gICAgdm9pZCAwIT09dGhpcy5jb2xvcj90aGlzLmNvbmUubWF0ZXJpYWwuY29sb3Iuc2V0KHRoaXMuY29sb3IpOnRoaXMuY29uZS5tYXRlcmlhbC5jb2xvci5jb3B5KHRoaXMubGlnaHQuY29sb3IpfX0oKTtvYy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShYLnByb3RvdHlwZSk7b2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPW9jO29jLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZD1mdW5jdGlvbigpe3ZhciBhPW5ldyBwLGI9bmV3IE8sYz1uZXcgTztyZXR1cm4gZnVuY3Rpb24oZCl7dmFyIGU9dGhpcy5ib25lcyxmPXRoaXMuZ2VvbWV0cnksZz1mLmdldEF0dHJpYnV0ZShcInBvc2l0aW9uXCIpO2MuZ2V0SW52ZXJzZSh0aGlzLnJvb3QubWF0cml4V29ybGQpO2Zvcih2YXIgaD0wLGs9MDtoPGUubGVuZ3RoO2grKyl7dmFyIGw9ZVtoXTtsLnBhcmVudCYmbC5wYXJlbnQuaXNCb25lJiYoYi5tdWx0aXBseU1hdHJpY2VzKGMsbC5tYXRyaXhXb3JsZCksYS5zZXRGcm9tTWF0cml4UG9zaXRpb24oYiksXG4gICAgZy5zZXRYWVooayxhLngsYS55LGEueiksYi5tdWx0aXBseU1hdHJpY2VzKGMsbC5wYXJlbnQubWF0cml4V29ybGQpLGEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGIpLGcuc2V0WFlaKGsrMSxhLngsYS55LGEueiksays9Mil9Zi5nZXRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiKS5uZWVkc1VwZGF0ZT0hMDt4LnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKHRoaXMsZCl9fSgpO3BjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHJhLnByb3RvdHlwZSk7cGMucHJvdG90eXBlLmNvbnN0cnVjdG9yPXBjO3BjLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7dGhpcy5tYXRlcmlhbC5kaXNwb3NlKCl9O3BjLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2b2lkIDAhPT10aGlzLmNvbG9yP3RoaXMubWF0ZXJpYWwuY29sb3Iuc2V0KHRoaXMuY29sb3IpOnRoaXMubWF0ZXJpYWwuY29sb3IuY29weSh0aGlzLmxpZ2h0LmNvbG9yKX07cWMucHJvdG90eXBlPVxuICAgIE9iamVjdC5jcmVhdGUoeC5wcm90b3R5cGUpO3FjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1xYztxYy5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuY2hpbGRyZW5bMF0uZ2VvbWV0cnkuZGlzcG9zZSgpO3RoaXMuY2hpbGRyZW5bMF0ubWF0ZXJpYWwuZGlzcG9zZSgpfTtxYy5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7dmFyIGE9LjUqdGhpcy5saWdodC53aWR0aCxiPS41KnRoaXMubGlnaHQuaGVpZ2h0LGM9dGhpcy5saW5lLmdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24sZD1jLmFycmF5O2RbMF09YTtkWzFdPS1iO2RbMl09MDtkWzNdPWE7ZFs0XT1iO2RbNV09MDtkWzZdPS1hO2RbN109YjtkWzhdPTA7ZFs5XT0tYTtkWzEwXT0tYjtkWzExXT0wO2RbMTJdPWE7ZFsxM109LWI7ZFsxNF09MDtjLm5lZWRzVXBkYXRlPSEwO3ZvaWQgMCE9PXRoaXMuY29sb3I/dGhpcy5saW5lLm1hdGVyaWFsLmNvbG9yLnNldCh0aGlzLmNvbG9yKTp0aGlzLmxpbmUubWF0ZXJpYWwuY29sb3IuY29weSh0aGlzLmxpZ2h0LmNvbG9yKX07XG4gICAgcmMucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoeC5wcm90b3R5cGUpO3JjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1yYztyYy5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuY2hpbGRyZW5bMF0uZ2VvbWV0cnkuZGlzcG9zZSgpO3RoaXMuY2hpbGRyZW5bMF0ubWF0ZXJpYWwuZGlzcG9zZSgpfTtyYy5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAsYj1uZXcgSCxjPW5ldyBIO3JldHVybiBmdW5jdGlvbigpe3ZhciBkPXRoaXMuY2hpbGRyZW5bMF07aWYodm9pZCAwIT09dGhpcy5jb2xvcil0aGlzLm1hdGVyaWFsLmNvbG9yLnNldCh0aGlzLmNvbG9yKTtlbHNle3ZhciBlPWQuZ2VvbWV0cnkuZ2V0QXR0cmlidXRlKFwiY29sb3JcIik7Yi5jb3B5KHRoaXMubGlnaHQuY29sb3IpO2MuY29weSh0aGlzLmxpZ2h0Lmdyb3VuZENvbG9yKTtmb3IodmFyIGY9MCxnPWUuY291bnQ7ZjxnO2YrKyl7dmFyIGg9ZjxnLzI/YjpjO2Uuc2V0WFlaKGYsaC5yLGguZyxoLmIpfWUubmVlZHNVcGRhdGU9XG4gICAgITB9ZC5sb29rQXQoYS5zZXRGcm9tTWF0cml4UG9zaXRpb24odGhpcy5saWdodC5tYXRyaXhXb3JsZCkubmVnYXRlKCkpfX0oKTtpZC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShYLnByb3RvdHlwZSk7aWQucHJvdG90eXBlLmNvbnN0cnVjdG9yPWlkO1JkLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFgucHJvdG90eXBlKTtSZC5wcm90b3R5cGUuY29uc3RydWN0b3I9UmQ7amQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoWC5wcm90b3R5cGUpO2pkLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1qZDtqZC5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAsYj1uZXcgcCxjPW5ldyBtYTtyZXR1cm4gZnVuY3Rpb24oKXt0aGlzLm9iamVjdC51cGRhdGVNYXRyaXhXb3JsZCghMCk7Yy5nZXROb3JtYWxNYXRyaXgodGhpcy5vYmplY3QubWF0cml4V29ybGQpO2Zvcih2YXIgZD10aGlzLm9iamVjdC5tYXRyaXhXb3JsZCxlPXRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbixcbiAgICBmPXRoaXMub2JqZWN0Lmdlb21ldHJ5LGc9Zi52ZXJ0aWNlcyxmPWYuZmFjZXMsaD0wLGs9MCxsPWYubGVuZ3RoO2s8bDtrKyspe3ZhciBwPWZba10sbj1wLm5vcm1hbDthLmNvcHkoZ1twLmFdKS5hZGQoZ1twLmJdKS5hZGQoZ1twLmNdKS5kaXZpZGVTY2FsYXIoMykuYXBwbHlNYXRyaXg0KGQpO2IuY29weShuKS5hcHBseU1hdHJpeDMoYykubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIodGhpcy5zaXplKS5hZGQoYSk7ZS5zZXRYWVooaCxhLngsYS55LGEueik7aCs9MTtlLnNldFhZWihoLGIueCxiLnksYi56KTtoKz0xfWUubmVlZHNVcGRhdGU9ITB9fSgpO3NjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHgucHJvdG90eXBlKTtzYy5wcm90b3R5cGUuY29uc3RydWN0b3I9c2M7c2MucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLmxpZ2h0UGxhbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO3RoaXMubGlnaHRQbGFuZS5tYXRlcmlhbC5kaXNwb3NlKCk7dGhpcy50YXJnZXRMaW5lLmdlb21ldHJ5LmRpc3Bvc2UoKTtcbiAgICB0aGlzLnRhcmdldExpbmUubWF0ZXJpYWwuZGlzcG9zZSgpfTtzYy5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IHAsYj1uZXcgcCxjPW5ldyBwO3JldHVybiBmdW5jdGlvbigpe2Euc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubGlnaHQubWF0cml4V29ybGQpO2Iuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKHRoaXMubGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkKTtjLnN1YlZlY3RvcnMoYixhKTt0aGlzLmxpZ2h0UGxhbmUubG9va0F0KGMpO3ZvaWQgMCE9PXRoaXMuY29sb3I/KHRoaXMubGlnaHRQbGFuZS5tYXRlcmlhbC5jb2xvci5zZXQodGhpcy5jb2xvciksdGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmNvbG9yLnNldCh0aGlzLmNvbG9yKSk6KHRoaXMubGlnaHRQbGFuZS5tYXRlcmlhbC5jb2xvci5jb3B5KHRoaXMubGlnaHQuY29sb3IpLHRoaXMudGFyZ2V0TGluZS5tYXRlcmlhbC5jb2xvci5jb3B5KHRoaXMubGlnaHQuY29sb3IpKTt0aGlzLnRhcmdldExpbmUubG9va0F0KGMpO1xuICAgIHRoaXMudGFyZ2V0TGluZS5zY2FsZS56PWMubGVuZ3RoKCl9fSgpO2tkLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFgucHJvdG90eXBlKTtrZC5wcm90b3R5cGUuY29uc3RydWN0b3I9a2Q7a2QucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoYSxnLGgsayl7ZC5zZXQoZyxoLGspLnVucHJvamVjdChlKTthPWNbYV07aWYodm9pZCAwIT09YSlmb3IoZz1iLmdldEF0dHJpYnV0ZShcInBvc2l0aW9uXCIpLGg9MCxrPWEubGVuZ3RoO2g8aztoKyspZy5zZXRYWVooYVtoXSxkLngsZC55LGQueil9dmFyIGIsYyxkPW5ldyBwLGU9bmV3IFRhO3JldHVybiBmdW5jdGlvbigpe2I9dGhpcy5nZW9tZXRyeTtjPXRoaXMucG9pbnRNYXA7ZS5wcm9qZWN0aW9uTWF0cml4LmNvcHkodGhpcy5jYW1lcmEucHJvamVjdGlvbk1hdHJpeCk7YShcImNcIiwwLDAsLTEpO2EoXCJ0XCIsMCwwLDEpO2EoXCJuMVwiLC0xLC0xLC0xKTthKFwibjJcIiwxLC0xLC0xKTthKFwibjNcIiwtMSwxLC0xKTthKFwibjRcIiwxLFxuICAgIDEsLTEpO2EoXCJmMVwiLC0xLC0xLDEpO2EoXCJmMlwiLDEsLTEsMSk7YShcImYzXCIsLTEsMSwxKTthKFwiZjRcIiwxLDEsMSk7YShcInUxXCIsLjcsMS4xLC0xKTthKFwidTJcIiwtLjcsMS4xLC0xKTthKFwidTNcIiwwLDIsLTEpO2EoXCJjZjFcIiwtMSwwLDEpO2EoXCJjZjJcIiwxLDAsMSk7YShcImNmM1wiLDAsLTEsMSk7YShcImNmNFwiLDAsMSwxKTthKFwiY24xXCIsLTEsMCwtMSk7YShcImNuMlwiLDEsMCwtMSk7YShcImNuM1wiLDAsLTEsLTEpO2EoXCJjbjRcIiwwLDEsLTEpO2IuZ2V0QXR0cmlidXRlKFwicG9zaXRpb25cIikubmVlZHNVcGRhdGU9ITB9fSgpO0diLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFgucHJvdG90eXBlKTtHYi5wcm90b3R5cGUuY29uc3RydWN0b3I9R2I7R2IucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3ZhciBhPW5ldyBYYTtyZXR1cm4gZnVuY3Rpb24oYil7dm9pZCAwIT09YiYmY29uc29sZS53YXJuKFwiVEhSRUUuQm94SGVscGVyOiAudXBkYXRlKCkgaGFzIG5vIGxvbmdlciBhcmd1bWVudHMuXCIpO1xuICAgIHZvaWQgMCE9PXRoaXMub2JqZWN0JiZhLnNldEZyb21PYmplY3QodGhpcy5vYmplY3QpO2lmKCFhLmlzRW1wdHkoKSl7Yj1hLm1pbjt2YXIgYz1hLm1heCxkPXRoaXMuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbixlPWQuYXJyYXk7ZVswXT1jLng7ZVsxXT1jLnk7ZVsyXT1jLno7ZVszXT1iLng7ZVs0XT1jLnk7ZVs1XT1jLno7ZVs2XT1iLng7ZVs3XT1iLnk7ZVs4XT1jLno7ZVs5XT1jLng7ZVsxMF09Yi55O2VbMTFdPWMuejtlWzEyXT1jLng7ZVsxM109Yy55O2VbMTRdPWIuejtlWzE1XT1iLng7ZVsxNl09Yy55O2VbMTddPWIuejtlWzE4XT1iLng7ZVsxOV09Yi55O2VbMjBdPWIuejtlWzIxXT1jLng7ZVsyMl09Yi55O2VbMjNdPWIuejtkLm5lZWRzVXBkYXRlPSEwO3RoaXMuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCl9fX0oKTtHYi5wcm90b3R5cGUuc2V0RnJvbU9iamVjdD1mdW5jdGlvbihhKXt0aGlzLm9iamVjdD1hO3RoaXMudXBkYXRlKCk7cmV0dXJuIHRoaXN9O1xuICAgIGxkLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFgucHJvdG90eXBlKTtsZC5wcm90b3R5cGUuY29uc3RydWN0b3I9bGQ7bGQucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuYm94O2IuaXNFbXB0eSgpfHwoYi5nZXRDZW50ZXIodGhpcy5wb3NpdGlvbiksYi5nZXRTaXplKHRoaXMuc2NhbGUpLHRoaXMuc2NhbGUubXVsdGlwbHlTY2FsYXIoLjUpLHgucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwodGhpcyxhKSl9O21kLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHNhLnByb3RvdHlwZSk7bWQucHJvdG90eXBlLmNvbnN0cnVjdG9yPW1kO21kLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZD1mdW5jdGlvbihhKXt2YXIgYj0tdGhpcy5wbGFuZS5jb25zdGFudDsxRS04Pk1hdGguYWJzKGIpJiYoYj0xRS04KTt0aGlzLnNjYWxlLnNldCguNSp0aGlzLnNpemUsLjUqdGhpcy5zaXplLGIpO3RoaXMubG9va0F0KHRoaXMucGxhbmUubm9ybWFsKTtcbiAgICB4LnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZC5jYWxsKHRoaXMsYSl9O3ZhciBTZCxDZTtIYi5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh4LnByb3RvdHlwZSk7SGIucHJvdG90eXBlLmNvbnN0cnVjdG9yPUhiO0hiLnByb3RvdHlwZS5zZXREaXJlY3Rpb249ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcCxiO3JldHVybiBmdW5jdGlvbihjKXsuOTk5OTk8Yy55P3RoaXMucXVhdGVybmlvbi5zZXQoMCwwLDAsMSk6LS45OTk5OT5jLnk/dGhpcy5xdWF0ZXJuaW9uLnNldCgxLDAsMCwwKTooYS5zZXQoYy56LDAsLWMueCkubm9ybWFsaXplKCksYj1NYXRoLmFjb3MoYy55KSx0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZShhLGIpKX19KCk7SGIucHJvdG90eXBlLnNldExlbmd0aD1mdW5jdGlvbihhLGIsYyl7dm9pZCAwPT09YiYmKGI9LjIqYSk7dm9pZCAwPT09YyYmKGM9LjIqYik7dGhpcy5saW5lLnNjYWxlLnNldCgxLE1hdGgubWF4KDAsYS1iKSwxKTt0aGlzLmxpbmUudXBkYXRlTWF0cml4KCk7XG4gICAgdGhpcy5jb25lLnNjYWxlLnNldChjLGIsYyk7dGhpcy5jb25lLnBvc2l0aW9uLnk9YTt0aGlzLmNvbmUudXBkYXRlTWF0cml4KCl9O0hiLnByb3RvdHlwZS5zZXRDb2xvcj1mdW5jdGlvbihhKXt0aGlzLmxpbmUubWF0ZXJpYWwuY29sb3IuY29weShhKTt0aGlzLmNvbmUubWF0ZXJpYWwuY29sb3IuY29weShhKX07bmQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoWC5wcm90b3R5cGUpO25kLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1uZDtDLmNyZWF0ZT1mdW5jdGlvbihhLGIpe2NvbnNvbGUubG9nKFwiVEhSRUUuQ3VydmUuY3JlYXRlKCkgaGFzIGJlZW4gZGVwcmVjYXRlZFwiKTthLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEMucHJvdG90eXBlKTthLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1hO2EucHJvdG90eXBlLmdldFBvaW50PWI7cmV0dXJuIGF9O09iamVjdC5hc3NpZ24oYmIucHJvdG90eXBlLHtjcmVhdGVQb2ludHNHZW9tZXRyeTpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5DdXJ2ZVBhdGg6IC5jcmVhdGVQb2ludHNHZW9tZXRyeSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuR2VvbWV0cnkoKS5zZXRGcm9tUG9pbnRzKCBwb2ludHMgKSBpbnN0ZWFkLlwiKTtcbiAgICBhPXRoaXMuZ2V0UG9pbnRzKGEpO3JldHVybiB0aGlzLmNyZWF0ZUdlb21ldHJ5KGEpfSxjcmVhdGVTcGFjZWRQb2ludHNHZW9tZXRyeTpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5DdXJ2ZVBhdGg6IC5jcmVhdGVTcGFjZWRQb2ludHNHZW9tZXRyeSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuR2VvbWV0cnkoKS5zZXRGcm9tUG9pbnRzKCBwb2ludHMgKSBpbnN0ZWFkLlwiKTthPXRoaXMuZ2V0U3BhY2VkUG9pbnRzKGEpO3JldHVybiB0aGlzLmNyZWF0ZUdlb21ldHJ5KGEpfSxjcmVhdGVHZW9tZXRyeTpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5DdXJ2ZVBhdGg6IC5jcmVhdGVHZW9tZXRyeSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuR2VvbWV0cnkoKS5zZXRGcm9tUG9pbnRzKCBwb2ludHMgKSBpbnN0ZWFkLlwiKTtmb3IodmFyIGI9bmV3IEwsYz0wLGQ9YS5sZW5ndGg7YzxkO2MrKyl7dmFyIGU9YVtjXTtiLnZlcnRpY2VzLnB1c2gobmV3IHAoZS54LFxuICAgIGUueSxlLnp8fDApKX1yZXR1cm4gYn19KTtPYmplY3QuYXNzaWduKFNhLnByb3RvdHlwZSx7ZnJvbVBvaW50czpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5QYXRoOiAuZnJvbVBvaW50cygpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21Qb2ludHMoKS5cIik7dGhpcy5zZXRGcm9tUG9pbnRzKGEpfX0pO3ZmLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGNhLnByb3RvdHlwZSk7d2YucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoY2EucHJvdG90eXBlKTtEZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShjYS5wcm90b3R5cGUpO09iamVjdC5hc3NpZ24oRGUucHJvdG90eXBlLHtpbml0RnJvbUFycmF5OmZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcIlRIUkVFLlNwbGluZTogLmluaXRGcm9tQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLlwiKX0sZ2V0Q29udHJvbFBvaW50c0FycmF5OmZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcIlRIUkVFLlNwbGluZTogLmdldENvbnRyb2xQb2ludHNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfSxcbiAgICByZXBhcmFtZXRyaXplQnlBcmNMZW5ndGg6ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuU3BsaW5lOiAucmVwYXJhbWV0cml6ZUJ5QXJjTGVuZ3RoKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9fSk7aWQucHJvdG90eXBlLnNldENvbG9ycz1mdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5HcmlkSGVscGVyOiBzZXRDb2xvcnMoKSBoYXMgYmVlbiBkZXByZWNhdGVkLCBwYXNzIHRoZW0gaW4gdGhlIGNvbnN0cnVjdG9yIGluc3RlYWQuXCIpfTtvYy5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcIlRIUkVFLlNrZWxldG9uSGVscGVyOiB1cGRhdGUoKSBubyBsb25nZXIgbmVlZHMgdG8gYmUgY2FsbGVkLlwiKX07T2JqZWN0LmFzc2lnbihrYy5wcm90b3R5cGUse2V4dHJhY3RVcmxCYXNlOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkxvYWRlcjogLmV4dHJhY3RVcmxCYXNlKCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIFRIUkVFLkxvYWRlclV0aWxzLmV4dHJhY3RVcmxCYXNlKCkgaW5zdGVhZC5cIik7XG4gICAgcmV0dXJuIEhlLmV4dHJhY3RVcmxCYXNlKGEpfX0pO09iamVjdC5hc3NpZ24ob2QucHJvdG90eXBlLHtjZW50ZXI6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuQm94MjogLmNlbnRlcigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldENlbnRlcigpLlwiKTtyZXR1cm4gdGhpcy5nZXRDZW50ZXIoYSl9LGVtcHR5OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuQm94MjogLmVtcHR5KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaXNFbXB0eSgpLlwiKTtyZXR1cm4gdGhpcy5pc0VtcHR5KCl9LGlzSW50ZXJzZWN0aW9uQm94OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkJveDI6IC5pc0ludGVyc2VjdGlvbkJveCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNCb3goKS5cIik7cmV0dXJuIHRoaXMuaW50ZXJzZWN0c0JveChhKX0sc2l6ZTpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5Cb3gyOiAuc2l6ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldFNpemUoKS5cIik7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U2l6ZShhKX19KTtPYmplY3QuYXNzaWduKFhhLnByb3RvdHlwZSx7Y2VudGVyOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkJveDM6IC5jZW50ZXIoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRDZW50ZXIoKS5cIik7cmV0dXJuIHRoaXMuZ2V0Q2VudGVyKGEpfSxlbXB0eTpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLkJveDM6IC5lbXB0eSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmlzRW1wdHkoKS5cIik7cmV0dXJuIHRoaXMuaXNFbXB0eSgpfSxpc0ludGVyc2VjdGlvbkJveDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5Cb3gzOiAuaXNJbnRlcnNlY3Rpb25Cb3goKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzQm94KCkuXCIpO3JldHVybiB0aGlzLmludGVyc2VjdHNCb3goYSl9LGlzSW50ZXJzZWN0aW9uU3BoZXJlOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkJveDM6IC5pc0ludGVyc2VjdGlvblNwaGVyZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNTcGhlcmUoKS5cIik7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJzZWN0c1NwaGVyZShhKX0sc2l6ZTpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5Cb3gzOiAuc2l6ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldFNpemUoKS5cIik7cmV0dXJuIHRoaXMuZ2V0U2l6ZShhKX19KTtOYi5wcm90b3R5cGUuY2VudGVyPWZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkxpbmUzOiAuY2VudGVyKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Q2VudGVyKCkuXCIpO3JldHVybiB0aGlzLmdldENlbnRlcihhKX07T2JqZWN0LmFzc2lnbihRLHtyYW5kb20xNjpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLk1hdGg6IC5yYW5kb20xNigpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBNYXRoLnJhbmRvbSgpIGluc3RlYWQuXCIpO3JldHVybiBNYXRoLnJhbmRvbSgpfSxuZWFyZXN0UG93ZXJPZlR3bzpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRoOiAubmVhcmVzdFBvd2VyT2ZUd28oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5mbG9vclBvd2VyT2ZUd28oKS5cIik7XG4gICAgcmV0dXJuIFEuZmxvb3JQb3dlck9mVHdvKGEpfSxuZXh0UG93ZXJPZlR3bzpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRoOiAubmV4dFBvd2VyT2ZUd28oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5jZWlsUG93ZXJPZlR3bygpLlwiKTtyZXR1cm4gUS5jZWlsUG93ZXJPZlR3byhhKX19KTtPYmplY3QuYXNzaWduKG1hLnByb3RvdHlwZSx7ZmxhdHRlblRvQXJyYXlPZmZzZXQ6ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRyaXgzOiAuZmxhdHRlblRvQXJyYXlPZmZzZXQoKSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnRvQXJyYXkoKSBpbnN0ZWFkLlwiKTtyZXR1cm4gdGhpcy50b0FycmF5KGEsYil9LG11bHRpcGx5VmVjdG9yMzpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRyaXgzOiAubXVsdGlwbHlWZWN0b3IzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIHZlY3Rvci5hcHBseU1hdHJpeDMoIG1hdHJpeCApIGluc3RlYWQuXCIpO3JldHVybiBhLmFwcGx5TWF0cml4Myh0aGlzKX0sXG4gICAgbXVsdGlwbHlWZWN0b3IzQXJyYXk6ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuTWF0cml4MzogLm11bHRpcGx5VmVjdG9yM0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LGFwcGx5VG9CdWZmZXI6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTWF0cml4MzogLmFwcGx5VG9CdWZmZXIoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbWF0cml4LmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApIGluc3RlYWQuXCIpO3JldHVybiB0aGlzLmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoYSl9LGFwcGx5VG9WZWN0b3IzQXJyYXk6ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuTWF0cml4MzogLmFwcGx5VG9WZWN0b3IzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLlwiKX19KTtPYmplY3QuYXNzaWduKE8ucHJvdG90eXBlLHtleHRyYWN0UG9zaXRpb246ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTWF0cml4NDogLmV4dHJhY3RQb3NpdGlvbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmNvcHlQb3NpdGlvbigpLlwiKTtcbiAgICByZXR1cm4gdGhpcy5jb3B5UG9zaXRpb24oYSl9LGZsYXR0ZW5Ub0FycmF5T2Zmc2V0OmZ1bmN0aW9uKGEsYil7Y29uc29sZS53YXJuKFwiVEhSRUUuTWF0cml4NDogLmZsYXR0ZW5Ub0FycmF5T2Zmc2V0KCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC50b0FycmF5KCkgaW5zdGVhZC5cIik7cmV0dXJuIHRoaXMudG9BcnJheShhLGIpfSxnZXRQb3NpdGlvbjpmdW5jdGlvbigpe3ZhciBhO3JldHVybiBmdW5jdGlvbigpe3ZvaWQgMD09PWEmJihhPW5ldyBwKTtjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRyaXg0OiAuZ2V0UG9zaXRpb24oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG1hdHJpeCApIGluc3RlYWQuXCIpO3JldHVybiBhLnNldEZyb21NYXRyaXhDb2x1bW4odGhpcywzKX19KCksc2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbjpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRyaXg0OiAuc2V0Um90YXRpb25Gcm9tUXVhdGVybmlvbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCkuXCIpO1xuICAgIHJldHVybiB0aGlzLm1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKGEpfSxtdWx0aXBseVRvQXJyYXk6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRyaXg0OiAubXVsdGlwbHlUb0FycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LG11bHRpcGx5VmVjdG9yMzpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRyaXg0OiAubXVsdGlwbHlWZWN0b3IzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIHZlY3Rvci5hcHBseU1hdHJpeDQoIG1hdHJpeCApIGluc3RlYWQuXCIpO3JldHVybiBhLmFwcGx5TWF0cml4NCh0aGlzKX0sbXVsdGlwbHlWZWN0b3I0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVZlY3RvcjQoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4NCggbWF0cml4ICkgaW5zdGVhZC5cIik7cmV0dXJuIGEuYXBwbHlNYXRyaXg0KHRoaXMpfSxtdWx0aXBseVZlY3RvcjNBcnJheTpmdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5NYXRyaXg0OiAubXVsdGlwbHlWZWN0b3IzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLlwiKX0sXG4gICAgcm90YXRlQXhpczpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRyaXg0OiAucm90YXRlQXhpcygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBWZWN0b3IzLnRyYW5zZm9ybURpcmVjdGlvbiggbWF0cml4ICkgaW5zdGVhZC5cIik7YS50cmFuc2Zvcm1EaXJlY3Rpb24odGhpcyl9LGNyb3NzVmVjdG9yOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5jcm9zc1ZlY3RvcigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtYXRyaXggKSBpbnN0ZWFkLlwiKTtyZXR1cm4gYS5hcHBseU1hdHJpeDQodGhpcyl9LHRyYW5zbGF0ZTpmdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5NYXRyaXg0OiAudHJhbnNsYXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LHJvdGF0ZVg6ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuTWF0cml4NDogLnJvdGF0ZVgoKSBoYXMgYmVlbiByZW1vdmVkLlwiKX0scm90YXRlWTpmdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5NYXRyaXg0OiAucm90YXRlWSgpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfSxcbiAgICByb3RhdGVaOmZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcIlRIUkVFLk1hdHJpeDQ6IC5yb3RhdGVaKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LHJvdGF0ZUJ5QXhpczpmdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5NYXRyaXg0OiAucm90YXRlQnlBeGlzKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LGFwcGx5VG9CdWZmZXI6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTWF0cml4NDogLmFwcGx5VG9CdWZmZXIoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbWF0cml4LmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSApIGluc3RlYWQuXCIpO3JldHVybiB0aGlzLmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoYSl9LGFwcGx5VG9WZWN0b3IzQXJyYXk6ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuTWF0cml4NDogLmFwcGx5VG9WZWN0b3IzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLlwiKX0sbWFrZUZydXN0dW06ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2NvbnNvbGUud2FybihcIlRIUkVFLk1hdHJpeDQ6IC5tYWtlRnJ1c3R1bSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAubWFrZVBlcnNwZWN0aXZlKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciApIGluc3RlYWQuXCIpO1xuICAgIHJldHVybiB0aGlzLm1ha2VQZXJzcGVjdGl2ZShhLGIsZCxjLGUsZil9fSk7RWEucHJvdG90eXBlLmlzSW50ZXJzZWN0aW9uTGluZT1mdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5QbGFuZTogLmlzSW50ZXJzZWN0aW9uTGluZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNMaW5lKCkuXCIpO3JldHVybiB0aGlzLmludGVyc2VjdHNMaW5lKGEpfTtoYS5wcm90b3R5cGUubXVsdGlwbHlWZWN0b3IzPWZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlF1YXRlcm5pb246IC5tdWx0aXBseVZlY3RvcjMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgaXMgbm93IHZlY3Rvci5hcHBseVF1YXRlcm5pb24oIHF1YXRlcm5pb24gKSBpbnN0ZWFkLlwiKTtyZXR1cm4gYS5hcHBseVF1YXRlcm5pb24odGhpcyl9O09iamVjdC5hc3NpZ24oc2IucHJvdG90eXBlLHtpc0ludGVyc2VjdGlvbkJveDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5SYXk6IC5pc0ludGVyc2VjdGlvbkJveCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNCb3goKS5cIik7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJzZWN0c0JveChhKX0saXNJbnRlcnNlY3Rpb25QbGFuZTpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5SYXk6IC5pc0ludGVyc2VjdGlvblBsYW5lKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c1BsYW5lKCkuXCIpO3JldHVybiB0aGlzLmludGVyc2VjdHNQbGFuZShhKX0saXNJbnRlcnNlY3Rpb25TcGhlcmU6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuUmF5OiAuaXNJbnRlcnNlY3Rpb25TcGhlcmUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzU3BoZXJlKCkuXCIpO3JldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoYSl9fSk7T2JqZWN0LmFzc2lnbihqYi5wcm90b3R5cGUse2V4dHJhY3RBbGxQb2ludHM6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuU2hhcGU6IC5leHRyYWN0QWxsUG9pbnRzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5leHRyYWN0UG9pbnRzKCkgaW5zdGVhZC5cIik7cmV0dXJuIHRoaXMuZXh0cmFjdFBvaW50cyhhKX0sXG4gICAgZXh0cnVkZTpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5TaGFwZTogLmV4dHJ1ZGUoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgRXh0cnVkZUdlb21ldHJ5KCkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBpYih0aGlzLGEpfSxtYWtlR2VvbWV0cnk6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuU2hhcGU6IC5tYWtlR2VvbWV0cnkoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgU2hhcGVHZW9tZXRyeSgpIGluc3RlYWQuXCIpO3JldHVybiBuZXcgeGIodGhpcyxhKX19KTtPYmplY3QuYXNzaWduKEQucHJvdG90eXBlLHtmcm9tQXR0cmlidXRlOmZ1bmN0aW9uKGEsYixjKXtjb25zb2xlLndhcm4oXCJUSFJFRS5WZWN0b3IyOiAuZnJvbUF0dHJpYnV0ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS5cIik7cmV0dXJuIHRoaXMuZnJvbUJ1ZmZlckF0dHJpYnV0ZShhLGIsYyl9LGRpc3RhbmNlVG9NYW5oYXR0YW46ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yMjogLmRpc3RhbmNlVG9NYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5EaXN0YW5jZVRvKCkuXCIpO1xuICAgIHJldHVybiB0aGlzLm1hbmhhdHRhbkRpc3RhbmNlVG8oYSl9LGxlbmd0aE1hbmhhdHRhbjpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjI6IC5sZW5ndGhNYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5MZW5ndGgoKS5cIik7cmV0dXJuIHRoaXMubWFuaGF0dGFuTGVuZ3RoKCl9fSk7T2JqZWN0LmFzc2lnbihwLnByb3RvdHlwZSx7c2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXg6ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuVmVjdG9yMzogLnNldEV1bGVyRnJvbVJvdGF0aW9uTWF0cml4KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIEV1bGVyLnNldEZyb21Sb3RhdGlvbk1hdHJpeCgpIGluc3RlYWQuXCIpfSxzZXRFdWxlckZyb21RdWF0ZXJuaW9uOmZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcIlRIUkVFLlZlY3RvcjM6IC5zZXRFdWxlckZyb21RdWF0ZXJuaW9uKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIEV1bGVyLnNldEZyb21RdWF0ZXJuaW9uKCkgaW5zdGVhZC5cIil9LFxuICAgIGdldFBvc2l0aW9uRnJvbU1hdHJpeDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5WZWN0b3IzOiAuZ2V0UG9zaXRpb25Gcm9tTWF0cml4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCkuXCIpO3JldHVybiB0aGlzLnNldEZyb21NYXRyaXhQb3NpdGlvbihhKX0sZ2V0U2NhbGVGcm9tTWF0cml4OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjM6IC5nZXRTY2FsZUZyb21NYXRyaXgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRGcm9tTWF0cml4U2NhbGUoKS5cIik7cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeFNjYWxlKGEpfSxnZXRDb2x1bW5Gcm9tTWF0cml4OmZ1bmN0aW9uKGEsYil7Y29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yMzogLmdldENvbHVtbkZyb21NYXRyaXgoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRGcm9tTWF0cml4Q29sdW1uKCkuXCIpO3JldHVybiB0aGlzLnNldEZyb21NYXRyaXhDb2x1bW4oYixcbiAgICBhKX0sYXBwbHlQcm9qZWN0aW9uOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjM6IC5hcHBseVByb2plY3Rpb24oKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLmFwcGx5TWF0cml4NCggbSApIGluc3RlYWQuXCIpO3JldHVybiB0aGlzLmFwcGx5TWF0cml4NChhKX0sZnJvbUF0dHJpYnV0ZTpmdW5jdGlvbihhLGIsYyl7Y29uc29sZS53YXJuKFwiVEhSRUUuVmVjdG9yMzogLmZyb21BdHRyaWJ1dGUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuXCIpO3JldHVybiB0aGlzLmZyb21CdWZmZXJBdHRyaWJ1dGUoYSxiLGMpfSxkaXN0YW5jZVRvTWFuaGF0dGFuOmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjM6IC5kaXN0YW5jZVRvTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuRGlzdGFuY2VUbygpLlwiKTtyZXR1cm4gdGhpcy5tYW5oYXR0YW5EaXN0YW5jZVRvKGEpfSxsZW5ndGhNYW5oYXR0YW46ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5WZWN0b3IzOiAubGVuZ3RoTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuTGVuZ3RoKCkuXCIpO1xuICAgIHJldHVybiB0aGlzLm1hbmhhdHRhbkxlbmd0aCgpfX0pO09iamVjdC5hc3NpZ24oYWEucHJvdG90eXBlLHtmcm9tQXR0cmlidXRlOmZ1bmN0aW9uKGEsYixjKXtjb25zb2xlLndhcm4oXCJUSFJFRS5WZWN0b3I0OiAuZnJvbUF0dHJpYnV0ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS5cIik7cmV0dXJuIHRoaXMuZnJvbUJ1ZmZlckF0dHJpYnV0ZShhLGIsYyl9LGxlbmd0aE1hbmhhdHRhbjpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLlZlY3RvcjQ6IC5sZW5ndGhNYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5MZW5ndGgoKS5cIik7cmV0dXJuIHRoaXMubWFuaGF0dGFuTGVuZ3RoKCl9fSk7TC5wcm90b3R5cGUuY29tcHV0ZVRhbmdlbnRzPWZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuR2VvbWV0cnk6IC5jb21wdXRlVGFuZ2VudHMoKSBoYXMgYmVlbiByZW1vdmVkLlwiKX07T2JqZWN0LmFzc2lnbih4LnByb3RvdHlwZSxcbiAgICB7Z2V0Q2hpbGRCeU5hbWU6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuT2JqZWN0M0Q6IC5nZXRDaGlsZEJ5TmFtZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldE9iamVjdEJ5TmFtZSgpLlwiKTtyZXR1cm4gdGhpcy5nZXRPYmplY3RCeU5hbWUoYSl9LHJlbmRlckRlcHRoOmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuT2JqZWN0M0Q6IC5yZW5kZXJEZXB0aCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLnJlbmRlck9yZGVyLCBpbnN0ZWFkLlwiKX0sdHJhbnNsYXRlOmZ1bmN0aW9uKGEsYil7Y29uc29sZS53YXJuKFwiVEhSRUUuT2JqZWN0M0Q6IC50cmFuc2xhdGUoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLnRyYW5zbGF0ZU9uQXhpcyggYXhpcywgZGlzdGFuY2UgKSBpbnN0ZWFkLlwiKTtyZXR1cm4gdGhpcy50cmFuc2xhdGVPbkF4aXMoYixhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyh4LnByb3RvdHlwZSx7ZXVsZXJPcmRlcjp7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuT2JqZWN0M0Q6IC5ldWxlck9yZGVyIGlzIG5vdyAucm90YXRpb24ub3JkZXIuXCIpO1xuICAgIHJldHVybiB0aGlzLnJvdGF0aW9uLm9yZGVyfSxzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuT2JqZWN0M0Q6IC5ldWxlck9yZGVyIGlzIG5vdyAucm90YXRpb24ub3JkZXIuXCIpO3RoaXMucm90YXRpb24ub3JkZXI9YX19LHVzZVF1YXRlcm5pb246e2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLk9iamVjdDNEOiAudXNlUXVhdGVybmlvbiBoYXMgYmVlbiByZW1vdmVkLiBUaGUgbGlicmFyeSBub3cgdXNlcyBxdWF0ZXJuaW9ucyBieSBkZWZhdWx0LlwiKX0sc2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuT2JqZWN0M0Q6IC51c2VRdWF0ZXJuaW9uIGhhcyBiZWVuIHJlbW92ZWQuIFRoZSBsaWJyYXJ5IG5vdyB1c2VzIHF1YXRlcm5pb25zIGJ5IGRlZmF1bHQuXCIpfX19KTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhEYy5wcm90b3R5cGUse29iamVjdHM6e2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLkxPRDogLm9iamVjdHMgaGFzIGJlZW4gcmVuYW1lZCB0byAubGV2ZWxzLlwiKTtcbiAgICByZXR1cm4gdGhpcy5sZXZlbHN9fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShFYy5wcm90b3R5cGUsXCJ1c2VWZXJ0ZXhUZXh0dXJlXCIse2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLlNrZWxldG9uOiB1c2VWZXJ0ZXhUZXh0dXJlIGhhcyBiZWVuIHJlbW92ZWQuXCIpfSxzZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5Ta2VsZXRvbjogdXNlVmVydGV4VGV4dHVyZSBoYXMgYmVlbiByZW1vdmVkLlwiKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoQy5wcm90b3R5cGUsXCJfX2FyY0xlbmd0aERpdmlzaW9uc1wiLHtnZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5DdXJ2ZTogLl9fYXJjTGVuZ3RoRGl2aXNpb25zIGlzIG5vdyAuYXJjTGVuZ3RoRGl2aXNpb25zLlwiKTtyZXR1cm4gdGhpcy5hcmNMZW5ndGhEaXZpc2lvbnN9LHNldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5DdXJ2ZTogLl9fYXJjTGVuZ3RoRGl2aXNpb25zIGlzIG5vdyAuYXJjTGVuZ3RoRGl2aXNpb25zLlwiKTtcbiAgICB0aGlzLmFyY0xlbmd0aERpdmlzaW9ucz1hfX0pO2JhLnByb3RvdHlwZS5zZXRMZW5zPWZ1bmN0aW9uKGEsYil7Y29uc29sZS53YXJuKFwiVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEuc2V0TGVucyBpcyBkZXByZWNhdGVkLiBVc2UgLnNldEZvY2FsTGVuZ3RoIGFuZCAuZmlsbUdhdWdlIGZvciBhIHBob3RvZ3JhcGhpYyBzZXR1cC5cIik7dm9pZCAwIT09YiYmKHRoaXMuZmlsbUdhdWdlPWIpO3RoaXMuc2V0Rm9jYWxMZW5ndGgoYSl9O09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGRhLnByb3RvdHlwZSx7b25seVNoYWRvdzp7c2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuTGlnaHQ6IC5vbmx5U2hhZG93IGhhcyBiZWVuIHJlbW92ZWQuXCIpfX0sc2hhZG93Q2FtZXJhRm92OntzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFGb3YgaXMgbm93IC5zaGFkb3cuY2FtZXJhLmZvdi5cIik7dGhpcy5zaGFkb3cuY2FtZXJhLmZvdj1hfX0sXG4gICAgc2hhZG93Q2FtZXJhTGVmdDp7c2V0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhTGVmdCBpcyBub3cgLnNoYWRvdy5jYW1lcmEubGVmdC5cIik7dGhpcy5zaGFkb3cuY2FtZXJhLmxlZnQ9YX19LHNoYWRvd0NhbWVyYVJpZ2h0OntzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFSaWdodCBpcyBub3cgLnNoYWRvdy5jYW1lcmEucmlnaHQuXCIpO3RoaXMuc2hhZG93LmNhbWVyYS5yaWdodD1hfX0sc2hhZG93Q2FtZXJhVG9wOntzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFUb3AgaXMgbm93IC5zaGFkb3cuY2FtZXJhLnRvcC5cIik7dGhpcy5zaGFkb3cuY2FtZXJhLnRvcD1hfX0sc2hhZG93Q2FtZXJhQm90dG9tOntzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFCb3R0b20gaXMgbm93IC5zaGFkb3cuY2FtZXJhLmJvdHRvbS5cIik7XG4gICAgdGhpcy5zaGFkb3cuY2FtZXJhLmJvdHRvbT1hfX0sc2hhZG93Q2FtZXJhTmVhcjp7c2V0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhTmVhciBpcyBub3cgLnNoYWRvdy5jYW1lcmEubmVhci5cIik7dGhpcy5zaGFkb3cuY2FtZXJhLm5lYXI9YX19LHNoYWRvd0NhbWVyYUZhcjp7c2V0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhRmFyIGlzIG5vdyAuc2hhZG93LmNhbWVyYS5mYXIuXCIpO3RoaXMuc2hhZG93LmNhbWVyYS5mYXI9YX19LHNoYWRvd0NhbWVyYVZpc2libGU6e3NldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhVmlzaWJsZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkNhbWVyYUhlbHBlciggbGlnaHQuc2hhZG93LmNhbWVyYSApIGluc3RlYWQuXCIpfX0sc2hhZG93Qmlhczp7c2V0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkxpZ2h0OiAuc2hhZG93QmlhcyBpcyBub3cgLnNoYWRvdy5iaWFzLlwiKTtcbiAgICB0aGlzLnNoYWRvdy5iaWFzPWF9fSxzaGFkb3dEYXJrbmVzczp7c2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuTGlnaHQ6IC5zaGFkb3dEYXJrbmVzcyBoYXMgYmVlbiByZW1vdmVkLlwiKX19LHNoYWRvd01hcFdpZHRoOntzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuTGlnaHQ6IC5zaGFkb3dNYXBXaWR0aCBpcyBub3cgLnNoYWRvdy5tYXBTaXplLndpZHRoLlwiKTt0aGlzLnNoYWRvdy5tYXBTaXplLndpZHRoPWF9fSxzaGFkb3dNYXBIZWlnaHQ6e3NldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5MaWdodDogLnNoYWRvd01hcEhlaWdodCBpcyBub3cgLnNoYWRvdy5tYXBTaXplLmhlaWdodC5cIik7dGhpcy5zaGFkb3cubWFwU2l6ZS5oZWlnaHQ9YX19fSk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTS5wcm90b3R5cGUse2xlbmd0aDp7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAubGVuZ3RoIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuY291bnQgaW5zdGVhZC5cIik7XG4gICAgcmV0dXJuIHRoaXMuYXJyYXkubGVuZ3RofX19KTtPYmplY3QuYXNzaWduKEUucHJvdG90eXBlLHthZGRJbmRleDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmFkZEluZGV4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0SW5kZXgoKS5cIik7dGhpcy5zZXRJbmRleChhKX0sYWRkRHJhd0NhbGw6ZnVuY3Rpb24oYSxiLGMpe3ZvaWQgMCE9PWMmJmNvbnNvbGUud2FybihcIlRIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkRHJhd0NhbGwoKSBubyBsb25nZXIgc3VwcG9ydHMgaW5kZXhPZmZzZXQuXCIpO2NvbnNvbGUud2FybihcIlRIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuYWRkRHJhd0NhbGwoKSBpcyBub3cgLmFkZEdyb3VwKCkuXCIpO3RoaXMuYWRkR3JvdXAoYSxiKX0sY2xlYXJEcmF3Q2FsbHM6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmNsZWFyRHJhd0NhbGxzKCkgaXMgbm93IC5jbGVhckdyb3VwcygpLlwiKTtcbiAgICB0aGlzLmNsZWFyR3JvdXBzKCl9LGNvbXB1dGVUYW5nZW50czpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuY29tcHV0ZVRhbmdlbnRzKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LGNvbXB1dGVPZmZzZXRzOmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5jb21wdXRlT2Zmc2V0cygpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEUucHJvdG90eXBlLHtkcmF3Y2FsbHM6e2dldDpmdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmRyYXdjYWxscyBoYXMgYmVlbiByZW5hbWVkIHRvIC5ncm91cHMuXCIpO3JldHVybiB0aGlzLmdyb3Vwc319LG9mZnNldHM6e2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLkJ1ZmZlckdlb21ldHJ5OiAub2Zmc2V0cyBoYXMgYmVlbiByZW5hbWVkIHRvIC5ncm91cHMuXCIpO3JldHVybiB0aGlzLmdyb3Vwc319fSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUWQucHJvdG90eXBlLHtkeW5hbWljOntzZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5Vbmlmb3JtOiAuZHluYW1pYyBoYXMgYmVlbiByZW1vdmVkLiBVc2Ugb2JqZWN0Lm9uQmVmb3JlUmVuZGVyKCkgaW5zdGVhZC5cIil9fSxvblVwZGF0ZTp7dmFsdWU6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5Vbmlmb3JtOiAub25VcGRhdGUoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2Ugb2JqZWN0Lm9uQmVmb3JlUmVuZGVyKCkgaW5zdGVhZC5cIik7cmV0dXJuIHRoaXN9fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFAucHJvdG90eXBlLHt3cmFwQXJvdW5kOntnZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5NYXRlcmlhbDogLndyYXBBcm91bmQgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LHNldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLk1hdGVyaWFsOiAud3JhcEFyb3VuZCBoYXMgYmVlbiByZW1vdmVkLlwiKX19LFxuICAgIHdyYXBSR0I6e2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLk1hdGVyaWFsOiAud3JhcFJHQiBoYXMgYmVlbiByZW1vdmVkLlwiKTtyZXR1cm4gbmV3IEh9fSxzaGFkaW5nOntnZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuXCIrdGhpcy50eXBlK1wiOiAuc2hhZGluZyBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdGhlIGJvb2xlYW4gLmZsYXRTaGFkaW5nIGluc3RlYWQuXCIpfSxzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuXCIrdGhpcy50eXBlK1wiOiAuc2hhZGluZyBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdGhlIGJvb2xlYW4gLmZsYXRTaGFkaW5nIGluc3RlYWQuXCIpO3RoaXMuZmxhdFNoYWRpbmc9MT09PWF9fX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE1hLnByb3RvdHlwZSx7bWV0YWw6e2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsOiAubWV0YWwgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsIGluc3RlYWQuXCIpO1xuICAgIHJldHVybiExfSxzZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbDogLm1ldGFsIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5NZXNoU3RhbmRhcmRNYXRlcmlhbCBpbnN0ZWFkXCIpfX19KTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhGYS5wcm90b3R5cGUse2Rlcml2YXRpdmVzOntnZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5TaGFkZXJNYXRlcmlhbDogLmRlcml2YXRpdmVzIGhhcyBiZWVuIG1vdmVkIHRvIC5leHRlbnNpb25zLmRlcml2YXRpdmVzLlwiKTtyZXR1cm4gdGhpcy5leHRlbnNpb25zLmRlcml2YXRpdmVzfSxzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuIFNoYWRlck1hdGVyaWFsOiAuZGVyaXZhdGl2ZXMgaGFzIGJlZW4gbW92ZWQgdG8gLmV4dGVuc2lvbnMuZGVyaXZhdGl2ZXMuXCIpO3RoaXMuZXh0ZW5zaW9ucy5kZXJpdmF0aXZlcz1hfX19KTtPYmplY3QuYXNzaWduKGNlLnByb3RvdHlwZSxcbiAgICB7Z2V0Q3VycmVudFJlbmRlclRhcmdldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRDdXJyZW50UmVuZGVyVGFyZ2V0KCkgaXMgbm93IC5nZXRSZW5kZXJUYXJnZXQoKS5cIik7cmV0dXJuIHRoaXMuZ2V0UmVuZGVyVGFyZ2V0KCl9LGdldE1heEFuaXNvdHJvcHk6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZ2V0TWF4QW5pc290cm9weSgpIGlzIG5vdyAuY2FwYWJpbGl0aWVzLmdldE1heEFuaXNvdHJvcHkoKS5cIik7cmV0dXJuIHRoaXMuY2FwYWJpbGl0aWVzLmdldE1heEFuaXNvdHJvcHkoKX0sZ2V0UHJlY2lzaW9uOmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLmdldFByZWNpc2lvbigpIGlzIG5vdyAuY2FwYWJpbGl0aWVzLnByZWNpc2lvbi5cIik7cmV0dXJuIHRoaXMuY2FwYWJpbGl0aWVzLnByZWNpc2lvbn0scmVzZXRHTFN0YXRlOmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnJlc2V0R0xTdGF0ZSgpIGlzIG5vdyAuc3RhdGUucmVzZXQoKS5cIik7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUucmVzZXQoKX0sc3VwcG9ydHNGbG9hdFRleHR1cmVzOmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzRmxvYXRUZXh0dXJlcygpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9mbG9hdCcgKS5cIik7cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoXCJPRVNfdGV4dHVyZV9mbG9hdFwiKX0sc3VwcG9ydHNIYWxmRmxvYXRUZXh0dXJlczpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c0hhbGZGbG9hdFRleHR1cmVzKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnICkuXCIpO3JldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdFwiKX0sc3VwcG9ydHNTdGFuZGFyZERlcml2YXRpdmVzOmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzU3RhbmRhcmREZXJpdmF0aXZlcygpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoICdPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMnICkuXCIpO1xuICAgIHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KFwiT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzXCIpfSxzdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUzNUQzpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUzNUQygpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKS5cIik7cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y1wiKX0sc3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVBWUlRDOmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVQVlJUQygpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnICkuXCIpO3JldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpfSxcbiAgICBzdXBwb3J0c0JsZW5kTWluTWF4OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzQmxlbmRNaW5NYXgoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCAnRVhUX2JsZW5kX21pbm1heCcgKS5cIik7cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoXCJFWFRfYmxlbmRfbWlubWF4XCIpfSxzdXBwb3J0c1ZlcnRleFRleHR1cmVzOmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzVmVydGV4VGV4dHVyZXMoKSBpcyBub3cgLmNhcGFiaWxpdGllcy52ZXJ0ZXhUZXh0dXJlcy5cIik7cmV0dXJuIHRoaXMuY2FwYWJpbGl0aWVzLnZlcnRleFRleHR1cmVzfSxzdXBwb3J0c0luc3RhbmNlZEFycmF5czpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c0luc3RhbmNlZEFycmF5cygpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApLlwiKTtcbiAgICByZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldChcIkFOR0xFX2luc3RhbmNlZF9hcnJheXNcIil9LGVuYWJsZVNjaXNzb3JUZXN0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IC5lbmFibGVTY2lzc29yVGVzdCgpIGlzIG5vdyAuc2V0U2Npc3NvclRlc3QoKS5cIik7dGhpcy5zZXRTY2lzc29yVGVzdChhKX0saW5pdE1hdGVyaWFsOmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLmluaXRNYXRlcmlhbCgpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfSxhZGRQcmVQbHVnaW46ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuYWRkUHJlUGx1Z2luKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9LGFkZFBvc3RQbHVnaW46ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAuYWRkUG9zdFBsdWdpbigpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfSx1cGRhdGVTaGFkb3dNYXA6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlcmVyOiAudXBkYXRlU2hhZG93TWFwKCkgaGFzIGJlZW4gcmVtb3ZlZC5cIil9fSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY2UucHJvdG90eXBlLHtzaGFkb3dNYXBFbmFibGVkOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zaGFkb3dNYXAuZW5hYmxlZH0sc2V0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBFbmFibGVkIGlzIG5vdyAuc2hhZG93TWFwLmVuYWJsZWQuXCIpO3RoaXMuc2hhZG93TWFwLmVuYWJsZWQ9YX19LHNoYWRvd01hcFR5cGU6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNoYWRvd01hcC50eXBlfSxzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcFR5cGUgaXMgbm93IC5zaGFkb3dNYXAudHlwZS5cIik7dGhpcy5zaGFkb3dNYXAudHlwZT1hfX0sc2hhZG93TWFwQ3VsbEZhY2U6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNoYWRvd01hcC5jdWxsRmFjZX0sc2V0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBDdWxsRmFjZSBpcyBub3cgLnNoYWRvd01hcC5jdWxsRmFjZS5cIik7XG4gICAgdGhpcy5zaGFkb3dNYXAuY3VsbEZhY2U9YX19fSk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoVWUucHJvdG90eXBlLHtjdWxsRmFjZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVuZGVyUmV2ZXJzZVNpZGVkPzI6MX0sc2V0OmZ1bmN0aW9uKGEpe2E9MSE9PWE7Y29uc29sZS53YXJuKFwiV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5jdWxsRmFjZSBpcyBkZXByZWNhdGVkLiBTZXQgLnNoYWRvd01hcC5yZW5kZXJSZXZlcnNlU2lkZWQgdG8gXCIrYStcIi5cIik7dGhpcy5yZW5kZXJSZXZlcnNlU2lkZWQ9YX19fSk7T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoa2IucHJvdG90eXBlLHt3cmFwUzp7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC53cmFwUyBpcyBub3cgLnRleHR1cmUud3JhcFMuXCIpO3JldHVybiB0aGlzLnRleHR1cmUud3JhcFN9LHNldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBTIGlzIG5vdyAudGV4dHVyZS53cmFwUy5cIik7XG4gICAgdGhpcy50ZXh0dXJlLndyYXBTPWF9fSx3cmFwVDp7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC53cmFwVCBpcyBub3cgLnRleHR1cmUud3JhcFQuXCIpO3JldHVybiB0aGlzLnRleHR1cmUud3JhcFR9LHNldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBUIGlzIG5vdyAudGV4dHVyZS53cmFwVC5cIik7dGhpcy50ZXh0dXJlLndyYXBUPWF9fSxtYWdGaWx0ZXI6e2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAubWFnRmlsdGVyIGlzIG5vdyAudGV4dHVyZS5tYWdGaWx0ZXIuXCIpO3JldHVybiB0aGlzLnRleHR1cmUubWFnRmlsdGVyfSxzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5tYWdGaWx0ZXIgaXMgbm93IC50ZXh0dXJlLm1hZ0ZpbHRlci5cIik7dGhpcy50ZXh0dXJlLm1hZ0ZpbHRlcj1cbiAgICBhfX0sbWluRmlsdGVyOntnZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm1pbkZpbHRlciBpcyBub3cgLnRleHR1cmUubWluRmlsdGVyLlwiKTtyZXR1cm4gdGhpcy50ZXh0dXJlLm1pbkZpbHRlcn0sc2V0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAubWluRmlsdGVyIGlzIG5vdyAudGV4dHVyZS5taW5GaWx0ZXIuXCIpO3RoaXMudGV4dHVyZS5taW5GaWx0ZXI9YX19LGFuaXNvdHJvcHk6e2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuYW5pc290cm9weSBpcyBub3cgLnRleHR1cmUuYW5pc290cm9weS5cIik7cmV0dXJuIHRoaXMudGV4dHVyZS5hbmlzb3Ryb3B5fSxzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5hbmlzb3Ryb3B5IGlzIG5vdyAudGV4dHVyZS5hbmlzb3Ryb3B5LlwiKTt0aGlzLnRleHR1cmUuYW5pc290cm9weT1cbiAgICBhfX0sb2Zmc2V0OntnZXQ6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm9mZnNldCBpcyBub3cgLnRleHR1cmUub2Zmc2V0LlwiKTtyZXR1cm4gdGhpcy50ZXh0dXJlLm9mZnNldH0sc2V0OmZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAub2Zmc2V0IGlzIG5vdyAudGV4dHVyZS5vZmZzZXQuXCIpO3RoaXMudGV4dHVyZS5vZmZzZXQ9YX19LHJlcGVhdDp7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5yZXBlYXQgaXMgbm93IC50ZXh0dXJlLnJlcGVhdC5cIik7cmV0dXJuIHRoaXMudGV4dHVyZS5yZXBlYXR9LHNldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnJlcGVhdCBpcyBub3cgLnRleHR1cmUucmVwZWF0LlwiKTt0aGlzLnRleHR1cmUucmVwZWF0PWF9fSxmb3JtYXQ6e2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuZm9ybWF0IGlzIG5vdyAudGV4dHVyZS5mb3JtYXQuXCIpO1xuICAgIHJldHVybiB0aGlzLnRleHR1cmUuZm9ybWF0fSxzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5mb3JtYXQgaXMgbm93IC50ZXh0dXJlLmZvcm1hdC5cIik7dGhpcy50ZXh0dXJlLmZvcm1hdD1hfX0sdHlwZTp7Z2V0OmZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC50eXBlIGlzIG5vdyAudGV4dHVyZS50eXBlLlwiKTtyZXR1cm4gdGhpcy50ZXh0dXJlLnR5cGV9LHNldDpmdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnR5cGUgaXMgbm93IC50ZXh0dXJlLnR5cGUuXCIpO3RoaXMudGV4dHVyZS50eXBlPWF9fSxnZW5lcmF0ZU1pcG1hcHM6e2dldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuZ2VuZXJhdGVNaXBtYXBzIGlzIG5vdyAudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMuXCIpO3JldHVybiB0aGlzLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzfSxcbiAgICBzZXQ6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5nZW5lcmF0ZU1pcG1hcHMgaXMgbm93IC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcy5cIik7dGhpcy50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcz1hfX19KTtPYmplY3QuYXNzaWduKGJlLnByb3RvdHlwZSx7Z2V0U3RhbmRpbmdNYXRyaXg6ZnVuY3Rpb24oKXtjb25zb2xlLndhcm4oXCJUSFJFRS5XZWJWUk1hbmFnZXI6IC5nZXRTdGFuZGluZ01hdHJpeCgpIGhhcyBiZWVuIHJlbW92ZWQuXCIpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGJlLnByb3RvdHlwZSx7c3RhbmRpbmc6e3NldDpmdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlRIUkVFLldlYlZSTWFuYWdlcjogLnN0YW5kaW5nIGhhcyBiZWVuIHJlbW92ZWQuXCIpfX19KTtsYy5wcm90b3R5cGUubG9hZD1mdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5BdWRpbzogLmxvYWQgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIFRIUkVFLkF1ZGlvTG9hZGVyIGluc3RlYWQuXCIpO1xuICAgIHZhciBiPXRoaXM7KG5ldyBxZSkubG9hZChhLGZ1bmN0aW9uKGEpe2Iuc2V0QnVmZmVyKGEpfSk7cmV0dXJuIHRoaXN9O3VlLnByb3RvdHlwZS5nZXREYXRhPWZ1bmN0aW9uKCl7Y29uc29sZS53YXJuKFwiVEhSRUUuQXVkaW9BbmFseXNlcjogLmdldERhdGEoKSBpcyBub3cgLmdldEZyZXF1ZW5jeURhdGEoKS5cIik7cmV0dXJuIHRoaXMuZ2V0RnJlcXVlbmN5RGF0YSgpfTtmZC5wcm90b3R5cGUudXBkYXRlQ3ViZU1hcD1mdW5jdGlvbihhLGIpe2NvbnNvbGUud2FybihcIlRIUkVFLkN1YmVDYW1lcmE6IC51cGRhdGVDdWJlTWFwKCkgaXMgbm93IC51cGRhdGUoKS5cIik7cmV0dXJuIHRoaXMudXBkYXRlKGEsYil9O2wuV2ViR0xSZW5kZXJUYXJnZXRDdWJlPUpiO2wuV2ViR0xSZW5kZXJUYXJnZXQ9a2I7bC5XZWJHTFJlbmRlcmVyPWNlO2wuU2hhZGVyTGliPXRiO2wuVW5pZm9ybXNMaWI9SztsLlVuaWZvcm1zVXRpbHM9R2E7bC5TaGFkZXJDaHVuaz1SO2wuRm9nRXhwMj1QYjtsLkZvZz1RYjtcbiAgICBsLlNjZW5lPXZkO2wuTGVuc0ZsYXJlPWRlO2wuU3ByaXRlPUNjO2wuTE9EPURjO2wuU2tpbm5lZE1lc2g9eGQ7bC5Ta2VsZXRvbj1FYztsLkJvbmU9d2Q7bC5NZXNoPXJhO2wuTGluZVNlZ21lbnRzPVg7bC5MaW5lTG9vcD15ZDtsLkxpbmU9c2E7bC5Qb2ludHM9UmI7bC5Hcm91cD1GYztsLlZpZGVvVGV4dHVyZT1lZTtsLkRhdGFUZXh0dXJlPWxiO2wuQ29tcHJlc3NlZFRleHR1cmU9U2I7bC5DdWJlVGV4dHVyZT1kYjtsLkNhbnZhc1RleHR1cmU9dGM7bC5EZXB0aFRleHR1cmU9R2M7bC5UZXh0dXJlPVU7bC5Db21wcmVzc2VkVGV4dHVyZUxvYWRlcj1nZjtsLkRhdGFUZXh0dXJlTG9hZGVyPWllO2wuQ3ViZVRleHR1cmVMb2FkZXI9amU7bC5UZXh0dXJlTG9hZGVyPUFkO2wuT2JqZWN0TG9hZGVyPWpmO2wuTWF0ZXJpYWxMb2FkZXI9UGQ7bC5CdWZmZXJHZW9tZXRyeUxvYWRlcj1sZTtsLkRlZmF1bHRMb2FkaW5nTWFuYWdlcj14YTtsLkxvYWRpbmdNYW5hZ2VyPWhlO2wuSlNPTkxvYWRlcj1cbiAgICBtZTtsLkltYWdlTG9hZGVyPWFkO2wuSW1hZ2VCaXRtYXBMb2FkZXI9bmU7bC5Gb250TG9hZGVyPWtmO2wuRmlsZUxvYWRlcj1OYTtsLkxvYWRlcj1rYztsLkxvYWRlclV0aWxzPUhlO2wuQ2FjaGU9SWI7bC5BdWRpb0xvYWRlcj1xZTtsLlNwb3RMaWdodFNoYWRvdz1DZDtsLlNwb3RMaWdodD1EZDtsLlBvaW50TGlnaHQ9RWQ7bC5SZWN0QXJlYUxpZ2h0PUlkO2wuSGVtaXNwaGVyZUxpZ2h0PUJkO2wuRGlyZWN0aW9uYWxMaWdodFNoYWRvdz1GZDtsLkRpcmVjdGlvbmFsTGlnaHQ9R2Q7bC5BbWJpZW50TGlnaHQ9SGQ7bC5MaWdodFNoYWRvdz1GYjtsLkxpZ2h0PWRhO2wuU3RlcmVvQ2FtZXJhPWxmO2wuUGVyc3BlY3RpdmVDYW1lcmE9YmE7bC5PcnRob2dyYXBoaWNDYW1lcmE9TGI7bC5DdWJlQ2FtZXJhPWZkO2wuQXJyYXlDYW1lcmE9dWQ7bC5DYW1lcmE9VGE7bC5BdWRpb0xpc3RlbmVyPXJlO2wuUG9zaXRpb25hbEF1ZGlvPXRlO2wuQXVkaW9Db250ZXh0PXNlO2wuQXVkaW9BbmFseXNlcj1cbiAgICB1ZTtsLkF1ZGlvPWxjO2wuVmVjdG9yS2V5ZnJhbWVUcmFjaz1qYztsLlN0cmluZ0tleWZyYW1lVHJhY2s9SmQ7bC5RdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjaz1kZDtsLk51bWJlcktleWZyYW1lVHJhY2s9aWM7bC5Db2xvcktleWZyYW1lVHJhY2s9TWQ7bC5Cb29sZWFuS2V5ZnJhbWVUcmFjaz1LZDtsLlByb3BlcnR5TWl4ZXI9dmU7bC5Qcm9wZXJ0eUJpbmRpbmc9cWE7bC5LZXlmcmFtZVRyYWNrPVQ7bC5BbmltYXRpb25VdGlscz1nYTtsLkFuaW1hdGlvbk9iamVjdEdyb3VwPW5mO2wuQW5pbWF0aW9uTWl4ZXI9d2U7bC5BbmltYXRpb25DbGlwPUNhO2wuVW5pZm9ybT1RZDtsLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5PXhlO2wuQnVmZmVyR2VvbWV0cnk9RTtsLkdlb21ldHJ5PUw7bC5JbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZT15ZTtsLkluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyPXplO2wuSW50ZXJsZWF2ZWRCdWZmZXI9bWM7bC5JbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGU9QWU7XG4gICAgbC5GYWNlMz1ZYTtsLk9iamVjdDNEPXg7bC5SYXljYXN0ZXI9cGY7bC5MYXllcnM9V2Q7bC5FdmVudERpc3BhdGNoZXI9emE7bC5DbG9jaz1yZjtsLlF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudD1MZDtsLkxpbmVhckludGVycG9sYW50PWVkO2wuRGlzY3JldGVJbnRlcnBvbGFudD1PZDtsLkN1YmljSW50ZXJwb2xhbnQ9TmQ7bC5JbnRlcnBvbGFudD1wYTtsLlRyaWFuZ2xlPVphO2wuTWF0aD1RO2wuU3BoZXJpY2FsPXNmO2wuQ3lsaW5kcmljYWw9dGY7bC5QbGFuZT1FYTtsLkZydXN0dW09cmQ7bC5TcGhlcmU9SWE7bC5SYXk9c2I7bC5NYXRyaXg0PU87bC5NYXRyaXgzPW1hO2wuQm94Mz1YYTtsLkJveDI9b2Q7bC5MaW5lMz1OYjtsLkV1bGVyPWdiO2wuVmVjdG9yND1hYTtsLlZlY3RvcjM9cDtsLlZlY3RvcjI9RDtsLlF1YXRlcm5pb249aGE7bC5Db2xvcj1IO2wuSW1tZWRpYXRlUmVuZGVyT2JqZWN0PWdkO2wuVmVydGV4Tm9ybWFsc0hlbHBlcj1oZDtsLlNwb3RMaWdodEhlbHBlcj1cbiAgICBuYztsLlNrZWxldG9uSGVscGVyPW9jO2wuUG9pbnRMaWdodEhlbHBlcj1wYztsLlJlY3RBcmVhTGlnaHRIZWxwZXI9cWM7bC5IZW1pc3BoZXJlTGlnaHRIZWxwZXI9cmM7bC5HcmlkSGVscGVyPWlkO2wuUG9sYXJHcmlkSGVscGVyPVJkO2wuRmFjZU5vcm1hbHNIZWxwZXI9amQ7bC5EaXJlY3Rpb25hbExpZ2h0SGVscGVyPXNjO2wuQ2FtZXJhSGVscGVyPWtkO2wuQm94SGVscGVyPUdiO2wuQm94M0hlbHBlcj1sZDtsLlBsYW5lSGVscGVyPW1kO2wuQXJyb3dIZWxwZXI9SGI7bC5BeGVzSGVscGVyPW5kO2wuU2hhcGU9amI7bC5QYXRoPVNhO2wuU2hhcGVQYXRoPW9lO2wuRm9udD1wZTtsLkN1cnZlUGF0aD1iYjtsLkN1cnZlPUM7bC5TaGFwZVV0aWxzPSRhO2wuU2NlbmVVdGlscz17Y3JlYXRlTXVsdGlNYXRlcmlhbE9iamVjdDpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1uZXcgRmMsZD0wLGU9Yi5sZW5ndGg7ZDxlO2QrKyljLmFkZChuZXcgcmEoYSxiW2RdKSk7cmV0dXJuIGN9LGRldGFjaDpmdW5jdGlvbihhLFxuICAgIGIsYyl7YS5hcHBseU1hdHJpeChiLm1hdHJpeFdvcmxkKTtiLnJlbW92ZShhKTtjLmFkZChhKX0sYXR0YWNoOmZ1bmN0aW9uKGEsYixjKXthLmFwcGx5TWF0cml4KChuZXcgTykuZ2V0SW52ZXJzZShjLm1hdHJpeFdvcmxkKSk7Yi5yZW1vdmUoYSk7Yy5hZGQoYSl9fTtsLldlYkdMVXRpbHM9YWY7bC5XaXJlZnJhbWVHZW9tZXRyeT1UYjtsLlBhcmFtZXRyaWNHZW9tZXRyeT1IYztsLlBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeT1VYjtsLlRldHJhaGVkcm9uR2VvbWV0cnk9SmM7bC5UZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5PVZiO2wuT2N0YWhlZHJvbkdlb21ldHJ5PUtjO2wuT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5PXViO2wuSWNvc2FoZWRyb25HZW9tZXRyeT1MYztsLkljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnk9V2I7bC5Eb2RlY2FoZWRyb25HZW9tZXRyeT1NYztsLkRvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5PVhiO2wuUG9seWhlZHJvbkdlb21ldHJ5PUljO2wuUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5PVxuICAgIGphO2wuVHViZUdlb21ldHJ5PU5jO2wuVHViZUJ1ZmZlckdlb21ldHJ5PVliO2wuVG9ydXNLbm90R2VvbWV0cnk9T2M7bC5Ub3J1c0tub3RCdWZmZXJHZW9tZXRyeT1aYjtsLlRvcnVzR2VvbWV0cnk9UGM7bC5Ub3J1c0J1ZmZlckdlb21ldHJ5PSRiO2wuVGV4dEdlb21ldHJ5PVVjO2wuVGV4dEJ1ZmZlckdlb21ldHJ5PWFjO2wuU3BoZXJlR2VvbWV0cnk9VmM7bC5TcGhlcmVCdWZmZXJHZW9tZXRyeT13YjtsLlJpbmdHZW9tZXRyeT1XYztsLlJpbmdCdWZmZXJHZW9tZXRyeT1iYztsLlBsYW5lR2VvbWV0cnk9QWM7bC5QbGFuZUJ1ZmZlckdlb21ldHJ5PXJiO2wuTGF0aGVHZW9tZXRyeT1YYztsLkxhdGhlQnVmZmVyR2VvbWV0cnk9Y2M7bC5TaGFwZUdlb21ldHJ5PXhiO2wuU2hhcGVCdWZmZXJHZW9tZXRyeT15YjtsLkV4dHJ1ZGVHZW9tZXRyeT1pYjtsLkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeT1MYTtsLkVkZ2VzR2VvbWV0cnk9ZGM7bC5Db25lR2VvbWV0cnk9WWM7bC5Db25lQnVmZmVyR2VvbWV0cnk9XG4gICAgWmM7bC5DeWxpbmRlckdlb21ldHJ5PXpiO2wuQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeT1hYjtsLkNpcmNsZUdlb21ldHJ5PSRjO2wuQ2lyY2xlQnVmZmVyR2VvbWV0cnk9ZWM7bC5Cb3hHZW9tZXRyeT1NYjtsLkJveEJ1ZmZlckdlb21ldHJ5PXFiO2wuU2hhZG93TWF0ZXJpYWw9ZmM7bC5TcHJpdGVNYXRlcmlhbD1oYjtsLlJhd1NoYWRlck1hdGVyaWFsPWdjO2wuU2hhZGVyTWF0ZXJpYWw9RmE7bC5Qb2ludHNNYXRlcmlhbD1LYTtsLk1lc2hQaHlzaWNhbE1hdGVyaWFsPUFiO2wuTWVzaFN0YW5kYXJkTWF0ZXJpYWw9VWE7bC5NZXNoUGhvbmdNYXRlcmlhbD1NYTtsLk1lc2hUb29uTWF0ZXJpYWw9QmI7bC5NZXNoTm9ybWFsTWF0ZXJpYWw9Q2I7bC5NZXNoTGFtYmVydE1hdGVyaWFsPURiO2wuTWVzaERlcHRoTWF0ZXJpYWw9ZWI7bC5NZXNoRGlzdGFuY2VNYXRlcmlhbD1mYjtsLk1lc2hCYXNpY01hdGVyaWFsPUFhO2wuTGluZURhc2hlZE1hdGVyaWFsPUViO2wuTGluZUJhc2ljTWF0ZXJpYWw9XG4gICAgVztsLk1hdGVyaWFsPVA7bC5GbG9hdDY0QnVmZmVyQXR0cmlidXRlPXpjO2wuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZT1CO2wuVWludDMyQnVmZmVyQXR0cmlidXRlPXBiO2wuSW50MzJCdWZmZXJBdHRyaWJ1dGU9eWM7bC5VaW50MTZCdWZmZXJBdHRyaWJ1dGU9b2I7bC5JbnQxNkJ1ZmZlckF0dHJpYnV0ZT14YztsLlVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZT13YztsLlVpbnQ4QnVmZmVyQXR0cmlidXRlPXZjO2wuSW50OEJ1ZmZlckF0dHJpYnV0ZT11YztsLkJ1ZmZlckF0dHJpYnV0ZT1NO2wuQXJjQ3VydmU9aGM7bC5DYXRtdWxsUm9tQ3VydmUzPWNhO2wuQ3ViaWNCZXppZXJDdXJ2ZT1PYTtsLkN1YmljQmV6aWVyQ3VydmUzPVZhO2wuRWxsaXBzZUN1cnZlPUJhO2wuTGluZUN1cnZlPXlhO2wuTGluZUN1cnZlMz1QYTtsLlF1YWRyYXRpY0JlemllckN1cnZlPVFhO2wuUXVhZHJhdGljQmV6aWVyQ3VydmUzPVdhO2wuU3BsaW5lQ3VydmU9UmE7bC5SRVZJU0lPTj1cIjg5XCI7bC5NT1VTRT1cbiAgICB7TEVGVDowLE1JRERMRToxLFJJR0hUOjJ9O2wuQ3VsbEZhY2VOb25lPTA7bC5DdWxsRmFjZUJhY2s9MTtsLkN1bGxGYWNlRnJvbnQ9MjtsLkN1bGxGYWNlRnJvbnRCYWNrPTM7bC5Gcm9udEZhY2VEaXJlY3Rpb25DVz0wO2wuRnJvbnRGYWNlRGlyZWN0aW9uQ0NXPTE7bC5CYXNpY1NoYWRvd01hcD0wO2wuUENGU2hhZG93TWFwPTE7bC5QQ0ZTb2Z0U2hhZG93TWFwPTI7bC5Gcm9udFNpZGU9MDtsLkJhY2tTaWRlPTE7bC5Eb3VibGVTaWRlPTI7bC5GbGF0U2hhZGluZz0xO2wuU21vb3RoU2hhZGluZz0yO2wuTm9Db2xvcnM9MDtsLkZhY2VDb2xvcnM9MTtsLlZlcnRleENvbG9ycz0yO2wuTm9CbGVuZGluZz0wO2wuTm9ybWFsQmxlbmRpbmc9MTtsLkFkZGl0aXZlQmxlbmRpbmc9MjtsLlN1YnRyYWN0aXZlQmxlbmRpbmc9MztsLk11bHRpcGx5QmxlbmRpbmc9NDtsLkN1c3RvbUJsZW5kaW5nPTU7bC5BZGRFcXVhdGlvbj0xMDA7bC5TdWJ0cmFjdEVxdWF0aW9uPTEwMTtsLlJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uPVxuICAgIDEwMjtsLk1pbkVxdWF0aW9uPTEwMztsLk1heEVxdWF0aW9uPTEwNDtsLlplcm9GYWN0b3I9MjAwO2wuT25lRmFjdG9yPTIwMTtsLlNyY0NvbG9yRmFjdG9yPTIwMjtsLk9uZU1pbnVzU3JjQ29sb3JGYWN0b3I9MjAzO2wuU3JjQWxwaGFGYWN0b3I9MjA0O2wuT25lTWludXNTcmNBbHBoYUZhY3Rvcj0yMDU7bC5Ec3RBbHBoYUZhY3Rvcj0yMDY7bC5PbmVNaW51c0RzdEFscGhhRmFjdG9yPTIwNztsLkRzdENvbG9yRmFjdG9yPTIwODtsLk9uZU1pbnVzRHN0Q29sb3JGYWN0b3I9MjA5O2wuU3JjQWxwaGFTYXR1cmF0ZUZhY3Rvcj0yMTA7bC5OZXZlckRlcHRoPTA7bC5BbHdheXNEZXB0aD0xO2wuTGVzc0RlcHRoPTI7bC5MZXNzRXF1YWxEZXB0aD0zO2wuRXF1YWxEZXB0aD00O2wuR3JlYXRlckVxdWFsRGVwdGg9NTtsLkdyZWF0ZXJEZXB0aD02O2wuTm90RXF1YWxEZXB0aD03O2wuTXVsdGlwbHlPcGVyYXRpb249MDtsLk1peE9wZXJhdGlvbj0xO2wuQWRkT3BlcmF0aW9uPTI7bC5Ob1RvbmVNYXBwaW5nPVxuICAgIDA7bC5MaW5lYXJUb25lTWFwcGluZz0xO2wuUmVpbmhhcmRUb25lTWFwcGluZz0yO2wuVW5jaGFydGVkMlRvbmVNYXBwaW5nPTM7bC5DaW5lb25Ub25lTWFwcGluZz00O2wuVVZNYXBwaW5nPTMwMDtsLkN1YmVSZWZsZWN0aW9uTWFwcGluZz0zMDE7bC5DdWJlUmVmcmFjdGlvbk1hcHBpbmc9MzAyO2wuRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmc9MzAzO2wuRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmc9MzA0O2wuU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmc9MzA1O2wuQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmc9MzA2O2wuQ3ViZVVWUmVmcmFjdGlvbk1hcHBpbmc9MzA3O2wuUmVwZWF0V3JhcHBpbmc9MUUzO2wuQ2xhbXBUb0VkZ2VXcmFwcGluZz0xMDAxO2wuTWlycm9yZWRSZXBlYXRXcmFwcGluZz0xMDAyO2wuTmVhcmVzdEZpbHRlcj0xMDAzO2wuTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXI9MTAwNDtsLk5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXI9MTAwNTtcbiAgICBsLkxpbmVhckZpbHRlcj0xMDA2O2wuTGluZWFyTWlwTWFwTmVhcmVzdEZpbHRlcj0xMDA3O2wuTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyPTEwMDg7bC5VbnNpZ25lZEJ5dGVUeXBlPTEwMDk7bC5CeXRlVHlwZT0xMDEwO2wuU2hvcnRUeXBlPTEwMTE7bC5VbnNpZ25lZFNob3J0VHlwZT0xMDEyO2wuSW50VHlwZT0xMDEzO2wuVW5zaWduZWRJbnRUeXBlPTEwMTQ7bC5GbG9hdFR5cGU9MTAxNTtsLkhhbGZGbG9hdFR5cGU9MTAxNjtsLlVuc2lnbmVkU2hvcnQ0NDQ0VHlwZT0xMDE3O2wuVW5zaWduZWRTaG9ydDU1NTFUeXBlPTEwMTg7bC5VbnNpZ25lZFNob3J0NTY1VHlwZT0xMDE5O2wuVW5zaWduZWRJbnQyNDhUeXBlPTEwMjA7bC5BbHBoYUZvcm1hdD0xMDIxO2wuUkdCRm9ybWF0PTEwMjI7bC5SR0JBRm9ybWF0PTEwMjM7bC5MdW1pbmFuY2VGb3JtYXQ9MTAyNDtsLkx1bWluYW5jZUFscGhhRm9ybWF0PTEwMjU7bC5SR0JFRm9ybWF0PTEwMjM7bC5EZXB0aEZvcm1hdD0xMDI2O2wuRGVwdGhTdGVuY2lsRm9ybWF0PVxuICAgIDEwMjc7bC5SR0JfUzNUQ19EWFQxX0Zvcm1hdD0yMDAxO2wuUkdCQV9TM1RDX0RYVDFfRm9ybWF0PTIwMDI7bC5SR0JBX1MzVENfRFhUM19Gb3JtYXQ9MjAwMztsLlJHQkFfUzNUQ19EWFQ1X0Zvcm1hdD0yMDA0O2wuUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQ9MjEwMDtsLlJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0PTIxMDE7bC5SR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQ9MjEwMjtsLlJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdD0yMTAzO2wuUkdCX0VUQzFfRm9ybWF0PTIxNTE7bC5Mb29wT25jZT0yMjAwO2wuTG9vcFJlcGVhdD0yMjAxO2wuTG9vcFBpbmdQb25nPTIyMDI7bC5JbnRlcnBvbGF0ZURpc2NyZXRlPTIzMDA7bC5JbnRlcnBvbGF0ZUxpbmVhcj0yMzAxO2wuSW50ZXJwb2xhdGVTbW9vdGg9MjMwMjtsLlplcm9DdXJ2YXR1cmVFbmRpbmc9MjQwMDtsLlplcm9TbG9wZUVuZGluZz0yNDAxO2wuV3JhcEFyb3VuZEVuZGluZz0yNDAyO2wuVHJpYW5nbGVzRHJhd01vZGU9MDtsLlRyaWFuZ2xlU3RyaXBEcmF3TW9kZT1cbiAgICAxO2wuVHJpYW5nbGVGYW5EcmF3TW9kZT0yO2wuTGluZWFyRW5jb2Rpbmc9M0UzO2wuc1JHQkVuY29kaW5nPTMwMDE7bC5HYW1tYUVuY29kaW5nPTMwMDc7bC5SR0JFRW5jb2Rpbmc9MzAwMjtsLkxvZ0x1dkVuY29kaW5nPTMwMDM7bC5SR0JNN0VuY29kaW5nPTMwMDQ7bC5SR0JNMTZFbmNvZGluZz0zMDA1O2wuUkdCREVuY29kaW5nPTMwMDY7bC5CYXNpY0RlcHRoUGFja2luZz0zMjAwO2wuUkdCQURlcHRoUGFja2luZz0zMjAxO2wuQ3ViZUdlb21ldHJ5PU1iO2wuRmFjZTQ9ZnVuY3Rpb24oYSxiLGMsZCxlLGYsZyl7Y29uc29sZS53YXJuKFwiVEhSRUUuRmFjZTQgaGFzIGJlZW4gcmVtb3ZlZC4gQSBUSFJFRS5GYWNlMyB3aWxsIGJlIGNyZWF0ZWQgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBZYShhLGIsYyxlLGYsZyl9O2wuTGluZVN0cmlwPTA7bC5MaW5lUGllY2VzPTE7bC5NZXNoRmFjZU1hdGVyaWFsPWZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLk1lc2hGYWNlTWF0ZXJpYWwgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGFuIEFycmF5IGluc3RlYWQuXCIpO1xuICAgIHJldHVybiBhfTtsLk11bHRpTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7dm9pZCAwPT09YSYmKGE9W10pO2NvbnNvbGUud2FybihcIlRIUkVFLk11bHRpTWF0ZXJpYWwgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIGFuIEFycmF5IGluc3RlYWQuXCIpO2EuaXNNdWx0aU1hdGVyaWFsPSEwO2EubWF0ZXJpYWxzPWE7YS5jbG9uZT1mdW5jdGlvbigpe3JldHVybiBhLnNsaWNlKCl9O3JldHVybiBhfTtsLlBvaW50Q2xvdWQ9ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5Qb2ludENsb3VkIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzLlwiKTtyZXR1cm4gbmV3IFJiKGEsYil9O2wuUGFydGljbGU9ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuUGFydGljbGUgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5TcHJpdGUuXCIpO3JldHVybiBuZXcgQ2MoYSl9O2wuUGFydGljbGVTeXN0ZW09ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5QYXJ0aWNsZVN5c3RlbSBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlBvaW50cy5cIik7XG4gICAgcmV0dXJuIG5ldyBSYihhLGIpfTtsLlBvaW50Q2xvdWRNYXRlcmlhbD1mdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5Qb2ludENsb3VkTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHNNYXRlcmlhbC5cIik7cmV0dXJuIG5ldyBLYShhKX07bC5QYXJ0aWNsZUJhc2ljTWF0ZXJpYWw9ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuUGFydGljbGVCYXNpY01hdGVyaWFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzTWF0ZXJpYWwuXCIpO3JldHVybiBuZXcgS2EoYSl9O2wuUGFydGljbGVTeXN0ZW1NYXRlcmlhbD1mdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5QYXJ0aWNsZVN5c3RlbU1hdGVyaWFsIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzTWF0ZXJpYWwuXCIpO3JldHVybiBuZXcgS2EoYSl9O2wuVmVydGV4PWZ1bmN0aW9uKGEsYixjKXtjb25zb2xlLndhcm4oXCJUSFJFRS5WZXJ0ZXggaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLlZlY3RvcjMgaW5zdGVhZC5cIik7XG4gICAgcmV0dXJuIG5ldyBwKGEsYixjKX07bC5EeW5hbWljQnVmZmVyQXR0cmlidXRlPWZ1bmN0aW9uKGEsYil7Y29uc29sZS53YXJuKFwiVEhSRUUuRHluYW1pY0J1ZmZlckF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSgpLnNldER5bmFtaWMoIHRydWUgKSBpbnN0ZWFkLlwiKTtyZXR1cm4obmV3IE0oYSxiKSkuc2V0RHluYW1pYyghMCl9O2wuSW50OEF0dHJpYnV0ZT1mdW5jdGlvbihhLGIpe2NvbnNvbGUud2FybihcIlRIUkVFLkludDhBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5JbnQ4QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyB1YyhhLGIpfTtsLlVpbnQ4QXR0cmlidXRlPWZ1bmN0aW9uKGEsYil7Y29uc29sZS53YXJuKFwiVEhSRUUuVWludDhBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5VaW50OEJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuXCIpO3JldHVybiBuZXcgdmMoYSxcbiAgICBiKX07bC5VaW50OENsYW1wZWRBdHRyaWJ1dGU9ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5VaW50OENsYW1wZWRBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5VaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLlwiKTtyZXR1cm4gbmV3IHdjKGEsYil9O2wuSW50MTZBdHRyaWJ1dGU9ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5JbnQxNkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkludDE2QnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyB4YyhhLGIpfTtsLlVpbnQxNkF0dHJpYnV0ZT1mdW5jdGlvbihhLGIpe2NvbnNvbGUud2FybihcIlRIUkVFLlVpbnQxNkF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLlVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuXCIpO3JldHVybiBuZXcgb2IoYSxiKX07bC5JbnQzMkF0dHJpYnV0ZT1cbiAgICBmdW5jdGlvbihhLGIpe2NvbnNvbGUud2FybihcIlRIUkVFLkludDMyQXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuSW50MzJCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLlwiKTtyZXR1cm4gbmV3IHljKGEsYil9O2wuVWludDMyQXR0cmlidXRlPWZ1bmN0aW9uKGEsYil7Y29uc29sZS53YXJuKFwiVEhSRUUuVWludDMyQXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuVWludDMyQnVmZmVyQXR0cmlidXRlKCkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBwYihhLGIpfTtsLkZsb2F0MzJBdHRyaWJ1dGU9ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5GbG9hdDMyQXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuXCIpO3JldHVybiBuZXcgQihhLGIpfTtsLkZsb2F0NjRBdHRyaWJ1dGU9ZnVuY3Rpb24oYSxiKXtjb25zb2xlLndhcm4oXCJUSFJFRS5GbG9hdDY0QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuXCIpO1xuICAgIHJldHVybiBuZXcgemMoYSxiKX07bC5DbG9zZWRTcGxpbmVDdXJ2ZTM9dmY7bC5TcGxpbmVDdXJ2ZTM9d2Y7bC5TcGxpbmU9RGU7bC5BeGlzSGVscGVyPWZ1bmN0aW9uKGEpe2NvbnNvbGUud2FybihcIlRIUkVFLkF4aXNIZWxwZXIgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5BeGVzSGVscGVyLlwiKTtyZXR1cm4gbmV3IG5kKGEpfTtsLkJvdW5kaW5nQm94SGVscGVyPWZ1bmN0aW9uKGEsYil7Y29uc29sZS53YXJuKFwiVEhSRUUuQm91bmRpbmdCb3hIZWxwZXIgaGFzIGJlZW4gZGVwcmVjYXRlZC4gQ3JlYXRpbmcgYSBUSFJFRS5Cb3hIZWxwZXIgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBHYihhLGIpfTtsLkVkZ2VzSGVscGVyPWZ1bmN0aW9uKGEsYil7Y29uc29sZS53YXJuKFwiVEhSRUUuRWRnZXNIZWxwZXIgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkVkZ2VzR2VvbWV0cnkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBYKG5ldyBkYyhhLmdlb21ldHJ5KSxuZXcgVyh7Y29sb3I6dm9pZCAwIT09XG4gICAgYj9iOjE2Nzc3MjE1fSkpfTtsLldpcmVmcmFtZUhlbHBlcj1mdW5jdGlvbihhLGIpe2NvbnNvbGUud2FybihcIlRIUkVFLldpcmVmcmFtZUhlbHBlciBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuV2lyZWZyYW1lR2VvbWV0cnkgaW5zdGVhZC5cIik7cmV0dXJuIG5ldyBYKG5ldyBUYihhLmdlb21ldHJ5KSxuZXcgVyh7Y29sb3I6dm9pZCAwIT09Yj9iOjE2Nzc3MjE1fSkpfTtsLlhIUkxvYWRlcj1mdW5jdGlvbihhKXtjb25zb2xlLndhcm4oXCJUSFJFRS5YSFJMb2FkZXIgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5GaWxlTG9hZGVyLlwiKTtyZXR1cm4gbmV3IE5hKGEpfTtsLkJpbmFyeVRleHR1cmVMb2FkZXI9ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuQmluYXJ5VGV4dHVyZUxvYWRlciBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLkRhdGFUZXh0dXJlTG9hZGVyLlwiKTtyZXR1cm4gbmV3IGllKGEpfTtsLkdlb21ldHJ5VXRpbHM9e21lcmdlOmZ1bmN0aW9uKGEsYixjKXtjb25zb2xlLndhcm4oXCJUSFJFRS5HZW9tZXRyeVV0aWxzOiAubWVyZ2UoKSBoYXMgYmVlbiBtb3ZlZCB0byBHZW9tZXRyeS4gVXNlIGdlb21ldHJ5Lm1lcmdlKCBnZW9tZXRyeTIsIG1hdHJpeCwgbWF0ZXJpYWxJbmRleE9mZnNldCApIGluc3RlYWQuXCIpO1xuICAgIGlmKGIuaXNNZXNoKXtiLm1hdHJpeEF1dG9VcGRhdGUmJmIudXBkYXRlTWF0cml4KCk7dmFyIGQ9Yi5tYXRyaXg7Yj1iLmdlb21ldHJ5fWEubWVyZ2UoYixkLGMpfSxjZW50ZXI6ZnVuY3Rpb24oYSl7Y29uc29sZS53YXJuKFwiVEhSRUUuR2VvbWV0cnlVdGlsczogLmNlbnRlcigpIGhhcyBiZWVuIG1vdmVkIHRvIEdlb21ldHJ5LiBVc2UgZ2VvbWV0cnkuY2VudGVyKCkgaW5zdGVhZC5cIik7cmV0dXJuIGEuY2VudGVyKCl9fTtsLkltYWdlVXRpbHM9e2Nyb3NzT3JpZ2luOnZvaWQgMCxsb2FkVGV4dHVyZTpmdW5jdGlvbihhLGIsYyxkKXtjb25zb2xlLndhcm4oXCJUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBUSFJFRS5UZXh0dXJlTG9hZGVyKCkgaW5zdGVhZC5cIik7dmFyIGU9bmV3IEFkO2Uuc2V0Q3Jvc3NPcmlnaW4odGhpcy5jcm9zc09yaWdpbik7YT1lLmxvYWQoYSxjLHZvaWQgMCxkKTtiJiYoYS5tYXBwaW5nPWIpO3JldHVybiBhfSxcbiAgICBsb2FkVGV4dHVyZUN1YmU6ZnVuY3Rpb24oYSxiLGMsZCl7Y29uc29sZS53YXJuKFwiVEhSRUUuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZUN1YmUgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIFRIUkVFLkN1YmVUZXh0dXJlTG9hZGVyKCkgaW5zdGVhZC5cIik7dmFyIGU9bmV3IGplO2Uuc2V0Q3Jvc3NPcmlnaW4odGhpcy5jcm9zc09yaWdpbik7YT1lLmxvYWQoYSxjLHZvaWQgMCxkKTtiJiYoYS5tYXBwaW5nPWIpO3JldHVybiBhfSxsb2FkQ29tcHJlc3NlZFRleHR1cmU6ZnVuY3Rpb24oKXtjb25zb2xlLmVycm9yKFwiVEhSRUUuSW1hZ2VVdGlscy5sb2FkQ29tcHJlc3NlZFRleHR1cmUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkREU0xvYWRlciBpbnN0ZWFkLlwiKX0sbG9hZENvbXByZXNzZWRUZXh0dXJlQ3ViZTpmdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5JbWFnZVV0aWxzLmxvYWRDb21wcmVzc2VkVGV4dHVyZUN1YmUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkREU0xvYWRlciBpbnN0ZWFkLlwiKX19O1xuICAgIGwuUHJvamVjdG9yPWZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcIlRIUkVFLlByb2plY3RvciBoYXMgYmVlbiBtb3ZlZCB0byAvZXhhbXBsZXMvanMvcmVuZGVyZXJzL1Byb2plY3Rvci5qcy5cIik7dGhpcy5wcm9qZWN0VmVjdG9yPWZ1bmN0aW9uKGEsYil7Y29uc29sZS53YXJuKFwiVEhSRUUuUHJvamVjdG9yOiAucHJvamVjdFZlY3RvcigpIGlzIG5vdyB2ZWN0b3IucHJvamVjdCgpLlwiKTthLnByb2plY3QoYil9O3RoaXMudW5wcm9qZWN0VmVjdG9yPWZ1bmN0aW9uKGEsYil7Y29uc29sZS53YXJuKFwiVEhSRUUuUHJvamVjdG9yOiAudW5wcm9qZWN0VmVjdG9yKCkgaXMgbm93IHZlY3Rvci51bnByb2plY3QoKS5cIik7YS51bnByb2plY3QoYil9O3RoaXMucGlja2luZ1JheT1mdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5Qcm9qZWN0b3I6IC5waWNraW5nUmF5KCkgaXMgbm93IHJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKCkuXCIpfX07bC5DYW52YXNSZW5kZXJlcj1mdW5jdGlvbigpe2NvbnNvbGUuZXJyb3IoXCJUSFJFRS5DYW52YXNSZW5kZXJlciBoYXMgYmVlbiBtb3ZlZCB0byAvZXhhbXBsZXMvanMvcmVuZGVyZXJzL0NhbnZhc1JlbmRlcmVyLmpzXCIpO1xuICAgIHRoaXMuZG9tRWxlbWVudD1kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsXCJjYW52YXNcIik7dGhpcy5jbGVhcj1mdW5jdGlvbigpe307dGhpcy5yZW5kZXI9ZnVuY3Rpb24oKXt9O3RoaXMuc2V0Q2xlYXJDb2xvcj1mdW5jdGlvbigpe307dGhpcy5zZXRTaXplPWZ1bmN0aW9uKCl7fX07T2JqZWN0LmRlZmluZVByb3BlcnR5KGwsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9KTsiLCIvKiogQGxpY2Vuc2UgemxpYi5qcyAyMDEyIC0gaW1heWEgWyBodHRwczovL2dpdGh1Yi5jb20vaW1heWEvemxpYi5qcyBdIFRoZSBNSVQgTGljZW5zZSAqLyhmdW5jdGlvbigpIHsndXNlIHN0cmljdCc7dmFyIGw9dm9pZCAwLGFhPXRoaXM7ZnVuY3Rpb24gcihjLGQpe3ZhciBhPWMuc3BsaXQoXCIuXCIpLGI9YWE7IShhWzBdaW4gYikmJmIuZXhlY1NjcmlwdCYmYi5leGVjU2NyaXB0KFwidmFyIFwiK2FbMF0pO2Zvcih2YXIgZTthLmxlbmd0aCYmKGU9YS5zaGlmdCgpKTspIWEubGVuZ3RoJiZkIT09bD9iW2VdPWQ6Yj1iW2VdP2JbZV06YltlXT17fX07dmFyIHQ9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBVaW50OEFycmF5JiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIFVpbnQxNkFycmF5JiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIFVpbnQzMkFycmF5JiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIERhdGFWaWV3O2Z1bmN0aW9uIHYoYyl7dmFyIGQ9Yy5sZW5ndGgsYT0wLGI9TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLGUsZixnLGgsayxtLG4scCxzLHg7Zm9yKHA9MDtwPGQ7KytwKWNbcF0+YSYmKGE9Y1twXSksY1twXTxiJiYoYj1jW3BdKTtlPTE8PGE7Zj1uZXcgKHQ/VWludDMyQXJyYXk6QXJyYXkpKGUpO2c9MTtoPTA7Zm9yKGs9MjtnPD1hOyl7Zm9yKHA9MDtwPGQ7KytwKWlmKGNbcF09PT1nKXttPTA7bj1oO2ZvcihzPTA7czxnOysrcyltPW08PDF8biYxLG4+Pj0xO3g9Zzw8MTZ8cDtmb3Iocz1tO3M8ZTtzKz1rKWZbc109eDsrK2h9KytnO2g8PD0xO2s8PD0xfXJldHVybltmLGEsYl19O2Z1bmN0aW9uIHcoYyxkKXt0aGlzLmc9W107dGhpcy5oPTMyNzY4O3RoaXMuZD10aGlzLmY9dGhpcy5hPXRoaXMubD0wO3RoaXMuaW5wdXQ9dD9uZXcgVWludDhBcnJheShjKTpjO3RoaXMubT0hMTt0aGlzLmk9eTt0aGlzLnI9ITE7aWYoZHx8IShkPXt9KSlkLmluZGV4JiYodGhpcy5hPWQuaW5kZXgpLGQuYnVmZmVyU2l6ZSYmKHRoaXMuaD1kLmJ1ZmZlclNpemUpLGQuYnVmZmVyVHlwZSYmKHRoaXMuaT1kLmJ1ZmZlclR5cGUpLGQucmVzaXplJiYodGhpcy5yPWQucmVzaXplKTtzd2l0Y2godGhpcy5pKXtjYXNlIEE6dGhpcy5iPTMyNzY4O3RoaXMuYz1uZXcgKHQ/VWludDhBcnJheTpBcnJheSkoMzI3NjgrdGhpcy5oKzI1OCk7YnJlYWs7Y2FzZSB5OnRoaXMuYj0wO3RoaXMuYz1uZXcgKHQ/VWludDhBcnJheTpBcnJheSkodGhpcy5oKTt0aGlzLmU9dGhpcy56O3RoaXMubj10aGlzLnY7dGhpcy5qPXRoaXMudzticmVhaztkZWZhdWx0OnRocm93IEVycm9yKFwiaW52YWxpZCBpbmZsYXRlIG1vZGVcIik7XG59fXZhciBBPTAseT0xLEI9e3Q6QSxzOnl9O1xudy5wcm90b3R5cGUuaz1mdW5jdGlvbigpe2Zvcig7IXRoaXMubTspe3ZhciBjPUModGhpcywzKTtjJjEmJih0aGlzLm09ITApO2M+Pj49MTtzd2l0Y2goYyl7Y2FzZSAwOnZhciBkPXRoaXMuaW5wdXQsYT10aGlzLmEsYj10aGlzLmMsZT10aGlzLmIsZj1kLmxlbmd0aCxnPWwsaD1sLGs9Yi5sZW5ndGgsbT1sO3RoaXMuZD10aGlzLmY9MDtpZihhKzE+PWYpdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHVuY29tcHJlc3NlZCBibG9jayBoZWFkZXI6IExFTlwiKTtnPWRbYSsrXXxkW2ErK108PDg7aWYoYSsxPj1mKXRocm93IEVycm9yKFwiaW52YWxpZCB1bmNvbXByZXNzZWQgYmxvY2sgaGVhZGVyOiBOTEVOXCIpO2g9ZFthKytdfGRbYSsrXTw8ODtpZihnPT09fmgpdGhyb3cgRXJyb3IoXCJpbnZhbGlkIHVuY29tcHJlc3NlZCBibG9jayBoZWFkZXI6IGxlbmd0aCB2ZXJpZnlcIik7aWYoYStnPmQubGVuZ3RoKXRocm93IEVycm9yKFwiaW5wdXQgYnVmZmVyIGlzIGJyb2tlblwiKTtzd2l0Y2godGhpcy5pKXtjYXNlIEE6Zm9yKDtlK1xuZz5iLmxlbmd0aDspe209ay1lO2ctPW07aWYodCliLnNldChkLnN1YmFycmF5KGEsYSttKSxlKSxlKz1tLGErPW07ZWxzZSBmb3IoO20tLTspYltlKytdPWRbYSsrXTt0aGlzLmI9ZTtiPXRoaXMuZSgpO2U9dGhpcy5ifWJyZWFrO2Nhc2UgeTpmb3IoO2UrZz5iLmxlbmd0aDspYj10aGlzLmUoe3A6Mn0pO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJpbnZhbGlkIGluZmxhdGUgbW9kZVwiKTt9aWYodCliLnNldChkLnN1YmFycmF5KGEsYStnKSxlKSxlKz1nLGErPWc7ZWxzZSBmb3IoO2ctLTspYltlKytdPWRbYSsrXTt0aGlzLmE9YTt0aGlzLmI9ZTt0aGlzLmM9YjticmVhaztjYXNlIDE6dGhpcy5qKGJhLGNhKTticmVhaztjYXNlIDI6Zm9yKHZhciBuPUModGhpcyw1KSsyNTcscD1DKHRoaXMsNSkrMSxzPUModGhpcyw0KSs0LHg9bmV3ICh0P1VpbnQ4QXJyYXk6QXJyYXkpKEQubGVuZ3RoKSxTPWwsVD1sLFU9bCx1PWwsTT1sLEY9bCx6PWwscT1sLFY9bCxxPTA7cTxzOysrcSl4W0RbcV1dPVxuQyh0aGlzLDMpO2lmKCF0KXtxPXM7Zm9yKHM9eC5sZW5ndGg7cTxzOysrcSl4W0RbcV1dPTB9Uz12KHgpO3U9bmV3ICh0P1VpbnQ4QXJyYXk6QXJyYXkpKG4rcCk7cT0wO2ZvcihWPW4rcDtxPFY7KXN3aXRjaChNPUUodGhpcyxTKSxNKXtjYXNlIDE2OmZvcih6PTMrQyh0aGlzLDIpO3otLTspdVtxKytdPUY7YnJlYWs7Y2FzZSAxNzpmb3Ioej0zK0ModGhpcywzKTt6LS07KXVbcSsrXT0wO0Y9MDticmVhaztjYXNlIDE4OmZvcih6PTExK0ModGhpcyw3KTt6LS07KXVbcSsrXT0wO0Y9MDticmVhaztkZWZhdWx0OkY9dVtxKytdPU19VD10P3YodS5zdWJhcnJheSgwLG4pKTp2KHUuc2xpY2UoMCxuKSk7VT10P3YodS5zdWJhcnJheShuKSk6dih1LnNsaWNlKG4pKTt0aGlzLmooVCxVKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKFwidW5rbm93biBCVFlQRTogXCIrYyk7fX1yZXR1cm4gdGhpcy5uKCl9O1xudmFyIEc9WzE2LDE3LDE4LDAsOCw3LDksNiwxMCw1LDExLDQsMTIsMywxMywyLDE0LDEsMTVdLEQ9dD9uZXcgVWludDE2QXJyYXkoRyk6RyxIPVszLDQsNSw2LDcsOCw5LDEwLDExLDEzLDE1LDE3LDE5LDIzLDI3LDMxLDM1LDQzLDUxLDU5LDY3LDgzLDk5LDExNSwxMzEsMTYzLDE5NSwyMjcsMjU4LDI1OCwyNThdLEk9dD9uZXcgVWludDE2QXJyYXkoSCk6SCxKPVswLDAsMCwwLDAsMCwwLDAsMSwxLDEsMSwyLDIsMiwyLDMsMywzLDMsNCw0LDQsNCw1LDUsNSw1LDAsMCwwXSxLPXQ/bmV3IFVpbnQ4QXJyYXkoSik6SixMPVsxLDIsMyw0LDUsNyw5LDEzLDE3LDI1LDMzLDQ5LDY1LDk3LDEyOSwxOTMsMjU3LDM4NSw1MTMsNzY5LDEwMjUsMTUzNywyMDQ5LDMwNzMsNDA5Nyw2MTQ1LDgxOTMsMTIyODksMTYzODUsMjQ1NzddLGRhPXQ/bmV3IFVpbnQxNkFycmF5KEwpOkwsZWE9WzAsMCwwLDAsMSwxLDIsMiwzLDMsNCw0LDUsNSw2LDYsNyw3LDgsOCw5LDksMTAsMTAsMTEsMTEsMTIsMTIsXG4xMywxM10sTj10P25ldyBVaW50OEFycmF5KGVhKTplYSxPPW5ldyAodD9VaW50OEFycmF5OkFycmF5KSgyODgpLFAsZmE7UD0wO2ZvcihmYT1PLmxlbmd0aDtQPGZhOysrUClPW1BdPTE0Mz49UD84OjI1NT49UD85OjI3OT49UD83Ojg7dmFyIGJhPXYoTyksUT1uZXcgKHQ/VWludDhBcnJheTpBcnJheSkoMzApLFIsZ2E7Uj0wO2ZvcihnYT1RLmxlbmd0aDtSPGdhOysrUilRW1JdPTU7dmFyIGNhPXYoUSk7ZnVuY3Rpb24gQyhjLGQpe2Zvcih2YXIgYT1jLmYsYj1jLmQsZT1jLmlucHV0LGY9Yy5hLGc9ZS5sZW5ndGgsaDtiPGQ7KXtpZihmPj1nKXRocm93IEVycm9yKFwiaW5wdXQgYnVmZmVyIGlzIGJyb2tlblwiKTthfD1lW2YrK108PGI7Yis9OH1oPWEmKDE8PGQpLTE7Yy5mPWE+Pj5kO2MuZD1iLWQ7Yy5hPWY7cmV0dXJuIGh9XG5mdW5jdGlvbiBFKGMsZCl7Zm9yKHZhciBhPWMuZixiPWMuZCxlPWMuaW5wdXQsZj1jLmEsZz1lLmxlbmd0aCxoPWRbMF0saz1kWzFdLG0sbjtiPGsmJiEoZj49Zyk7KWF8PWVbZisrXTw8YixiKz04O209aFthJigxPDxrKS0xXTtuPW0+Pj4xNjtpZihuPmIpdGhyb3cgRXJyb3IoXCJpbnZhbGlkIGNvZGUgbGVuZ3RoOiBcIituKTtjLmY9YT4+bjtjLmQ9Yi1uO2MuYT1mO3JldHVybiBtJjY1NTM1fVxudy5wcm90b3R5cGUuaj1mdW5jdGlvbihjLGQpe3ZhciBhPXRoaXMuYyxiPXRoaXMuYjt0aGlzLm89Yztmb3IodmFyIGU9YS5sZW5ndGgtMjU4LGYsZyxoLGs7MjU2IT09KGY9RSh0aGlzLGMpKTspaWYoMjU2PmYpYj49ZSYmKHRoaXMuYj1iLGE9dGhpcy5lKCksYj10aGlzLmIpLGFbYisrXT1mO2Vsc2V7Zz1mLTI1NztrPUlbZ107MDxLW2ddJiYoays9Qyh0aGlzLEtbZ10pKTtmPUUodGhpcyxkKTtoPWRhW2ZdOzA8TltmXSYmKGgrPUModGhpcyxOW2ZdKSk7Yj49ZSYmKHRoaXMuYj1iLGE9dGhpcy5lKCksYj10aGlzLmIpO2Zvcig7ay0tOylhW2JdPWFbYisrLWhdfWZvcig7ODw9dGhpcy5kOyl0aGlzLmQtPTgsdGhpcy5hLS07dGhpcy5iPWJ9O1xudy5wcm90b3R5cGUudz1mdW5jdGlvbihjLGQpe3ZhciBhPXRoaXMuYyxiPXRoaXMuYjt0aGlzLm89Yztmb3IodmFyIGU9YS5sZW5ndGgsZixnLGgsazsyNTYhPT0oZj1FKHRoaXMsYykpOylpZigyNTY+ZiliPj1lJiYoYT10aGlzLmUoKSxlPWEubGVuZ3RoKSxhW2IrK109ZjtlbHNle2c9Zi0yNTc7az1JW2ddOzA8S1tnXSYmKGsrPUModGhpcyxLW2ddKSk7Zj1FKHRoaXMsZCk7aD1kYVtmXTswPE5bZl0mJihoKz1DKHRoaXMsTltmXSkpO2Iraz5lJiYoYT10aGlzLmUoKSxlPWEubGVuZ3RoKTtmb3IoO2stLTspYVtiXT1hW2IrKy1oXX1mb3IoOzg8PXRoaXMuZDspdGhpcy5kLT04LHRoaXMuYS0tO3RoaXMuYj1ifTtcbncucHJvdG90eXBlLmU9ZnVuY3Rpb24oKXt2YXIgYz1uZXcgKHQ/VWludDhBcnJheTpBcnJheSkodGhpcy5iLTMyNzY4KSxkPXRoaXMuYi0zMjc2OCxhLGIsZT10aGlzLmM7aWYodCljLnNldChlLnN1YmFycmF5KDMyNzY4LGMubGVuZ3RoKSk7ZWxzZXthPTA7Zm9yKGI9Yy5sZW5ndGg7YTxiOysrYSljW2FdPWVbYSszMjc2OF19dGhpcy5nLnB1c2goYyk7dGhpcy5sKz1jLmxlbmd0aDtpZih0KWUuc2V0KGUuc3ViYXJyYXkoZCxkKzMyNzY4KSk7ZWxzZSBmb3IoYT0wOzMyNzY4PmE7KythKWVbYV09ZVtkK2FdO3RoaXMuYj0zMjc2ODtyZXR1cm4gZX07XG53LnByb3RvdHlwZS56PWZ1bmN0aW9uKGMpe3ZhciBkLGE9dGhpcy5pbnB1dC5sZW5ndGgvdGhpcy5hKzF8MCxiLGUsZixnPXRoaXMuaW5wdXQsaD10aGlzLmM7YyYmKFwibnVtYmVyXCI9PT10eXBlb2YgYy5wJiYoYT1jLnApLFwibnVtYmVyXCI9PT10eXBlb2YgYy51JiYoYSs9Yy51KSk7Mj5hPyhiPShnLmxlbmd0aC10aGlzLmEpL3RoaXMub1syXSxmPTI1OCooYi8yKXwwLGU9ZjxoLmxlbmd0aD9oLmxlbmd0aCtmOmgubGVuZ3RoPDwxKTplPWgubGVuZ3RoKmE7dD8oZD1uZXcgVWludDhBcnJheShlKSxkLnNldChoKSk6ZD1oO3JldHVybiB0aGlzLmM9ZH07XG53LnByb3RvdHlwZS5uPWZ1bmN0aW9uKCl7dmFyIGM9MCxkPXRoaXMuYyxhPXRoaXMuZyxiLGU9bmV3ICh0P1VpbnQ4QXJyYXk6QXJyYXkpKHRoaXMubCsodGhpcy5iLTMyNzY4KSksZixnLGgsaztpZigwPT09YS5sZW5ndGgpcmV0dXJuIHQ/dGhpcy5jLnN1YmFycmF5KDMyNzY4LHRoaXMuYik6dGhpcy5jLnNsaWNlKDMyNzY4LHRoaXMuYik7Zj0wO2ZvcihnPWEubGVuZ3RoO2Y8ZzsrK2Ype2I9YVtmXTtoPTA7Zm9yKGs9Yi5sZW5ndGg7aDxrOysraCllW2MrK109YltoXX1mPTMyNzY4O2ZvcihnPXRoaXMuYjtmPGc7KytmKWVbYysrXT1kW2ZdO3RoaXMuZz1bXTtyZXR1cm4gdGhpcy5idWZmZXI9ZX07XG53LnByb3RvdHlwZS52PWZ1bmN0aW9uKCl7dmFyIGMsZD10aGlzLmI7dD90aGlzLnI/KGM9bmV3IFVpbnQ4QXJyYXkoZCksYy5zZXQodGhpcy5jLnN1YmFycmF5KDAsZCkpKTpjPXRoaXMuYy5zdWJhcnJheSgwLGQpOih0aGlzLmMubGVuZ3RoPmQmJih0aGlzLmMubGVuZ3RoPWQpLGM9dGhpcy5jKTtyZXR1cm4gdGhpcy5idWZmZXI9Y307ZnVuY3Rpb24gVyhjLGQpe3ZhciBhLGI7dGhpcy5pbnB1dD1jO3RoaXMuYT0wO2lmKGR8fCEoZD17fSkpZC5pbmRleCYmKHRoaXMuYT1kLmluZGV4KSxkLnZlcmlmeSYmKHRoaXMuQT1kLnZlcmlmeSk7YT1jW3RoaXMuYSsrXTtiPWNbdGhpcy5hKytdO3N3aXRjaChhJjE1KXtjYXNlIGhhOnRoaXMubWV0aG9kPWhhO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJ1bnN1cHBvcnRlZCBjb21wcmVzc2lvbiBtZXRob2RcIik7fWlmKDAhPT0oKGE8PDgpK2IpJTMxKXRocm93IEVycm9yKFwiaW52YWxpZCBmY2hlY2sgZmxhZzpcIisoKGE8PDgpK2IpJTMxKTtpZihiJjMyKXRocm93IEVycm9yKFwiZmRpY3QgZmxhZyBpcyBub3Qgc3VwcG9ydGVkXCIpO3RoaXMucT1uZXcgdyhjLHtpbmRleDp0aGlzLmEsYnVmZmVyU2l6ZTpkLmJ1ZmZlclNpemUsYnVmZmVyVHlwZTpkLmJ1ZmZlclR5cGUscmVzaXplOmQucmVzaXplfSl9XG5XLnByb3RvdHlwZS5rPWZ1bmN0aW9uKCl7dmFyIGM9dGhpcy5pbnB1dCxkLGE7ZD10aGlzLnEuaygpO3RoaXMuYT10aGlzLnEuYTtpZih0aGlzLkEpe2E9KGNbdGhpcy5hKytdPDwyNHxjW3RoaXMuYSsrXTw8MTZ8Y1t0aGlzLmErK108PDh8Y1t0aGlzLmErK10pPj4+MDt2YXIgYj1kO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYil7dmFyIGU9Yi5zcGxpdChcIlwiKSxmLGc7Zj0wO2ZvcihnPWUubGVuZ3RoO2Y8ZztmKyspZVtmXT0oZVtmXS5jaGFyQ29kZUF0KDApJjI1NSk+Pj4wO2I9ZX1mb3IodmFyIGg9MSxrPTAsbT1iLmxlbmd0aCxuLHA9MDswPG07KXtuPTEwMjQ8bT8xMDI0Om07bS09bjtkbyBoKz1iW3ArK10says9aDt3aGlsZSgtLW4pO2glPTY1NTIxO2slPTY1NTIxfWlmKGEhPT0oazw8MTZ8aCk+Pj4wKXRocm93IEVycm9yKFwiaW52YWxpZCBhZGxlci0zMiBjaGVja3N1bVwiKTt9cmV0dXJuIGR9O3ZhciBoYT04O3IoXCJabGliLkluZmxhdGVcIixXKTtyKFwiWmxpYi5JbmZsYXRlLnByb3RvdHlwZS5kZWNvbXByZXNzXCIsVy5wcm90b3R5cGUuayk7dmFyIFg9e0FEQVBUSVZFOkIucyxCTE9DSzpCLnR9LFksWiwkLGlhO2lmKE9iamVjdC5rZXlzKVk9T2JqZWN0LmtleXMoWCk7ZWxzZSBmb3IoWiBpbiBZPVtdLCQ9MCxYKVlbJCsrXT1aOyQ9MDtmb3IoaWE9WS5sZW5ndGg7JDxpYTsrKyQpWj1ZWyRdLHIoXCJabGliLkluZmxhdGUuQnVmZmVyVHlwZS5cIitaLFhbWl0pO30pLmNhbGwodGhpcyk7IiwiLyoqXG4gKiBAYXV0aG9yIHFpYW8gLyBodHRwczovL2dpdGh1Yi5jb20vcWlhb1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbVxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICogQGF1dGhvciBlcmljaDY2NiAvIGh0dHA6Ly9lcmljaGFpbmVzLmNvbVxuICovXG5cbi8vIFRoaXMgc2V0IG9mIGNvbnRyb2xzIHBlcmZvcm1zIG9yYml0aW5nLCBkb2xseWluZyAoem9vbWluZyksIGFuZCBwYW5uaW5nLlxuLy8gVW5saWtlIFRyYWNrYmFsbENvbnRyb2xzLCBpdCBtYWludGFpbnMgdGhlIFwidXBcIiBkaXJlY3Rpb24gb2JqZWN0LnVwICgrWSBieSBkZWZhdWx0KS5cbi8vXG4vLyAgICBPcmJpdCAtIGxlZnQgbW91c2UgLyB0b3VjaDogb25lIGZpbmdlciBtb3ZlXG4vLyAgICBab29tIC0gbWlkZGxlIG1vdXNlLCBvciBtb3VzZXdoZWVsIC8gdG91Y2g6IHR3byBmaW5nZXIgc3ByZWFkIG9yIHNxdWlzaFxuLy8gICAgUGFuIC0gcmlnaHQgbW91c2UsIG9yIGFycm93IGtleXMgLyB0b3VjaDogdGhyZWUgZmluZ2VyIHN3aXBlXG5cblRIUkVFLk9yYml0Q29udHJvbHMgPSBmdW5jdGlvbiAoIG9iamVjdCwgZG9tRWxlbWVudCApIHtcblxuXHR0aGlzLm9iamVjdCA9IG9iamVjdDtcblxuXHR0aGlzLmRvbUVsZW1lbnQgPSAoIGRvbUVsZW1lbnQgIT09IHVuZGVmaW5lZCApID8gZG9tRWxlbWVudCA6IGRvY3VtZW50O1xuXG5cdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHRoaXMgY29udHJvbFxuXHR0aGlzLmVuYWJsZWQgPSB0cnVlO1xuXG5cdC8vIFwidGFyZ2V0XCIgc2V0cyB0aGUgbG9jYXRpb24gb2YgZm9jdXMsIHdoZXJlIHRoZSBvYmplY3Qgb3JiaXRzIGFyb3VuZFxuXHR0aGlzLnRhcmdldCA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5cblx0Ly8gSG93IGZhciB5b3UgY2FuIGRvbGx5IGluIGFuZCBvdXQgKCBQZXJzcGVjdGl2ZUNhbWVyYSBvbmx5IClcblx0dGhpcy5taW5EaXN0YW5jZSA9IDA7XG5cdHRoaXMubWF4RGlzdGFuY2UgPSBJbmZpbml0eTtcblxuXHQvLyBIb3cgZmFyIHlvdSBjYW4gem9vbSBpbiBhbmQgb3V0ICggT3J0aG9ncmFwaGljQ2FtZXJhIG9ubHkgKVxuXHR0aGlzLm1pblpvb20gPSAwO1xuXHR0aGlzLm1heFpvb20gPSBJbmZpbml0eTtcblxuXHQvLyBIb3cgZmFyIHlvdSBjYW4gb3JiaXQgdmVydGljYWxseSwgdXBwZXIgYW5kIGxvd2VyIGxpbWl0cy5cblx0Ly8gUmFuZ2UgaXMgMCB0byBNYXRoLlBJIHJhZGlhbnMuXG5cdHRoaXMubWluUG9sYXJBbmdsZSA9IDA7IC8vIHJhZGlhbnNcblx0dGhpcy5tYXhQb2xhckFuZ2xlID0gTWF0aC5QSTsgLy8gcmFkaWFuc1xuXG5cdC8vIEhvdyBmYXIgeW91IGNhbiBvcmJpdCBob3Jpem9udGFsbHksIHVwcGVyIGFuZCBsb3dlciBsaW1pdHMuXG5cdC8vIElmIHNldCwgbXVzdCBiZSBhIHN1Yi1pbnRlcnZhbCBvZiB0aGUgaW50ZXJ2YWwgWyAtIE1hdGguUEksIE1hdGguUEkgXS5cblx0dGhpcy5taW5BemltdXRoQW5nbGUgPSAtIEluZmluaXR5OyAvLyByYWRpYW5zXG5cdHRoaXMubWF4QXppbXV0aEFuZ2xlID0gSW5maW5pdHk7IC8vIHJhZGlhbnNcblxuXHQvLyBTZXQgdG8gdHJ1ZSB0byBlbmFibGUgZGFtcGluZyAoaW5lcnRpYSlcblx0Ly8gSWYgZGFtcGluZyBpcyBlbmFibGVkLCB5b3UgbXVzdCBjYWxsIGNvbnRyb2xzLnVwZGF0ZSgpIGluIHlvdXIgYW5pbWF0aW9uIGxvb3Bcblx0dGhpcy5lbmFibGVEYW1waW5nID0gZmFsc2U7XG5cdHRoaXMuZGFtcGluZ0ZhY3RvciA9IDAuMjU7XG5cblx0Ly8gVGhpcyBvcHRpb24gYWN0dWFsbHkgZW5hYmxlcyBkb2xseWluZyBpbiBhbmQgb3V0OyBsZWZ0IGFzIFwiem9vbVwiIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cblx0Ly8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgem9vbWluZ1xuXHR0aGlzLmVuYWJsZVpvb20gPSB0cnVlO1xuXHR0aGlzLnpvb21TcGVlZCA9IDEuMDtcblxuXHQvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSByb3RhdGluZ1xuXHR0aGlzLmVuYWJsZVJvdGF0ZSA9IHRydWU7XG5cdHRoaXMucm90YXRlU3BlZWQgPSAxLjA7XG5cblx0Ly8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgcGFubmluZ1xuXHR0aGlzLmVuYWJsZVBhbiA9IHRydWU7XG5cdHRoaXMua2V5UGFuU3BlZWQgPSA3LjA7XHQvLyBwaXhlbHMgbW92ZWQgcGVyIGFycm93IGtleSBwdXNoXG5cblx0Ly8gU2V0IHRvIHRydWUgdG8gYXV0b21hdGljYWxseSByb3RhdGUgYXJvdW5kIHRoZSB0YXJnZXRcblx0Ly8gSWYgYXV0by1yb3RhdGUgaXMgZW5hYmxlZCwgeW91IG11c3QgY2FsbCBjb250cm9scy51cGRhdGUoKSBpbiB5b3VyIGFuaW1hdGlvbiBsb29wXG5cdHRoaXMuYXV0b1JvdGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmF1dG9Sb3RhdGVTcGVlZCA9IDIuMDsgLy8gMzAgc2Vjb25kcyBwZXIgcm91bmQgd2hlbiBmcHMgaXMgNjBcblxuXHQvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSB1c2Ugb2YgdGhlIGtleXNcblx0dGhpcy5lbmFibGVLZXlzID0gdHJ1ZTtcblxuXHQvLyBUaGUgZm91ciBhcnJvdyBrZXlzXG5cdHRoaXMua2V5cyA9IHsgTEVGVDogMzcsIFVQOiAzOCwgUklHSFQ6IDM5LCBCT1RUT006IDQwIH07XG5cblx0Ly8gTW91c2UgYnV0dG9uc1xuXHR0aGlzLm1vdXNlQnV0dG9ucyA9IHsgT1JCSVQ6IFRIUkVFLk1PVVNFLkxFRlQsIFpPT006IFRIUkVFLk1PVVNFLk1JRERMRSwgUEFOOiBUSFJFRS5NT1VTRS5SSUdIVCB9O1xuXG5cdC8vIGZvciByZXNldFxuXHR0aGlzLnRhcmdldDAgPSB0aGlzLnRhcmdldC5jbG9uZSgpO1xuXHR0aGlzLnBvc2l0aW9uMCA9IHRoaXMub2JqZWN0LnBvc2l0aW9uLmNsb25lKCk7XG5cdHRoaXMuem9vbTAgPSB0aGlzLm9iamVjdC56b29tO1xuXG5cdC8vXG5cdC8vIHB1YmxpYyBtZXRob2RzXG5cdC8vXG5cblx0dGhpcy5nZXRQb2xhckFuZ2xlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHNwaGVyaWNhbC5waGk7XG5cblx0fTtcblxuXHR0aGlzLmdldEF6aW11dGhhbEFuZ2xlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHNwaGVyaWNhbC50aGV0YTtcblxuXHR9O1xuXG5cdHRoaXMuc2F2ZVN0YXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0c2NvcGUudGFyZ2V0MC5jb3B5KCBzY29wZS50YXJnZXQgKTtcblx0XHRzY29wZS5wb3NpdGlvbjAuY29weSggc2NvcGUub2JqZWN0LnBvc2l0aW9uICk7XG5cdFx0c2NvcGUuem9vbTAgPSBzY29wZS5vYmplY3Quem9vbTtcblxuXHR9O1xuXG5cdHRoaXMucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRzY29wZS50YXJnZXQuY29weSggc2NvcGUudGFyZ2V0MCApO1xuXHRcdHNjb3BlLm9iamVjdC5wb3NpdGlvbi5jb3B5KCBzY29wZS5wb3NpdGlvbjAgKTtcblx0XHRzY29wZS5vYmplY3Quem9vbSA9IHNjb3BlLnpvb20wO1xuXG5cdFx0c2NvcGUub2JqZWN0LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBjaGFuZ2VFdmVudCApO1xuXG5cdFx0c2NvcGUudXBkYXRlKCk7XG5cblx0XHRzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cblx0fTtcblxuXHQvLyB0aGlzIG1ldGhvZCBpcyBleHBvc2VkLCBidXQgcGVyaGFwcyBpdCB3b3VsZCBiZSBiZXR0ZXIgaWYgd2UgY2FuIG1ha2UgaXQgcHJpdmF0ZS4uLlxuXHR0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvZmZzZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuXG5cdFx0Ly8gc28gY2FtZXJhLnVwIGlzIHRoZSBvcmJpdCBheGlzXG5cdFx0dmFyIHF1YXQgPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpLnNldEZyb21Vbml0VmVjdG9ycyggb2JqZWN0LnVwLCBuZXcgVEhSRUUuVmVjdG9yMyggMCwgMSwgMCApICk7XG5cdFx0dmFyIHF1YXRJbnZlcnNlID0gcXVhdC5jbG9uZSgpLmludmVyc2UoKTtcblxuXHRcdHZhciBsYXN0UG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuXHRcdHZhciBsYXN0UXVhdGVybmlvbiA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCk7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlKCkge1xuXG5cdFx0XHR2YXIgcG9zaXRpb24gPSBzY29wZS5vYmplY3QucG9zaXRpb247XG5cblx0XHRcdG9mZnNldC5jb3B5KCBwb3NpdGlvbiApLnN1Yiggc2NvcGUudGFyZ2V0ICk7XG5cblx0XHRcdC8vIHJvdGF0ZSBvZmZzZXQgdG8gXCJ5LWF4aXMtaXMtdXBcIiBzcGFjZVxuXHRcdFx0b2Zmc2V0LmFwcGx5UXVhdGVybmlvbiggcXVhdCApO1xuXG5cdFx0XHQvLyBhbmdsZSBmcm9tIHotYXhpcyBhcm91bmQgeS1heGlzXG5cdFx0XHRzcGhlcmljYWwuc2V0RnJvbVZlY3RvcjMoIG9mZnNldCApO1xuXG5cdFx0XHRpZiAoIHNjb3BlLmF1dG9Sb3RhdGUgJiYgc3RhdGUgPT09IFNUQVRFLk5PTkUgKSB7XG5cblx0XHRcdFx0cm90YXRlTGVmdCggZ2V0QXV0b1JvdGF0aW9uQW5nbGUoKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNwaGVyaWNhbC50aGV0YSArPSBzcGhlcmljYWxEZWx0YS50aGV0YTtcblx0XHRcdHNwaGVyaWNhbC5waGkgKz0gc3BoZXJpY2FsRGVsdGEucGhpO1xuXG5cdFx0XHQvLyByZXN0cmljdCB0aGV0YSB0byBiZSBiZXR3ZWVuIGRlc2lyZWQgbGltaXRzXG5cdFx0XHRzcGhlcmljYWwudGhldGEgPSBNYXRoLm1heCggc2NvcGUubWluQXppbXV0aEFuZ2xlLCBNYXRoLm1pbiggc2NvcGUubWF4QXppbXV0aEFuZ2xlLCBzcGhlcmljYWwudGhldGEgKSApO1xuXG5cdFx0XHQvLyByZXN0cmljdCBwaGkgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xuXHRcdFx0c3BoZXJpY2FsLnBoaSA9IE1hdGgubWF4KCBzY29wZS5taW5Qb2xhckFuZ2xlLCBNYXRoLm1pbiggc2NvcGUubWF4UG9sYXJBbmdsZSwgc3BoZXJpY2FsLnBoaSApICk7XG5cblx0XHRcdHNwaGVyaWNhbC5tYWtlU2FmZSgpO1xuXG5cblx0XHRcdHNwaGVyaWNhbC5yYWRpdXMgKj0gc2NhbGU7XG5cblx0XHRcdC8vIHJlc3RyaWN0IHJhZGl1cyB0byBiZSBiZXR3ZWVuIGRlc2lyZWQgbGltaXRzXG5cdFx0XHRzcGhlcmljYWwucmFkaXVzID0gTWF0aC5tYXgoIHNjb3BlLm1pbkRpc3RhbmNlLCBNYXRoLm1pbiggc2NvcGUubWF4RGlzdGFuY2UsIHNwaGVyaWNhbC5yYWRpdXMgKSApO1xuXG5cdFx0XHQvLyBtb3ZlIHRhcmdldCB0byBwYW5uZWQgbG9jYXRpb25cblx0XHRcdHNjb3BlLnRhcmdldC5hZGQoIHBhbk9mZnNldCApO1xuXG5cdFx0XHRvZmZzZXQuc2V0RnJvbVNwaGVyaWNhbCggc3BoZXJpY2FsICk7XG5cblx0XHRcdC8vIHJvdGF0ZSBvZmZzZXQgYmFjayB0byBcImNhbWVyYS11cC12ZWN0b3ItaXMtdXBcIiBzcGFjZVxuXHRcdFx0b2Zmc2V0LmFwcGx5UXVhdGVybmlvbiggcXVhdEludmVyc2UgKTtcblxuXHRcdFx0cG9zaXRpb24uY29weSggc2NvcGUudGFyZ2V0ICkuYWRkKCBvZmZzZXQgKTtcblxuXHRcdFx0c2NvcGUub2JqZWN0Lmxvb2tBdCggc2NvcGUudGFyZ2V0ICk7XG5cblx0XHRcdGlmICggc2NvcGUuZW5hYmxlRGFtcGluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRzcGhlcmljYWxEZWx0YS50aGV0YSAqPSAoIDEgLSBzY29wZS5kYW1waW5nRmFjdG9yICk7XG5cdFx0XHRcdHNwaGVyaWNhbERlbHRhLnBoaSAqPSAoIDEgLSBzY29wZS5kYW1waW5nRmFjdG9yICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c3BoZXJpY2FsRGVsdGEuc2V0KCAwLCAwLCAwICk7XG5cblx0XHRcdH1cblxuXHRcdFx0c2NhbGUgPSAxO1xuXHRcdFx0cGFuT2Zmc2V0LnNldCggMCwgMCwgMCApO1xuXG5cdFx0XHQvLyB1cGRhdGUgY29uZGl0aW9uIGlzOlxuXHRcdFx0Ly8gbWluKGNhbWVyYSBkaXNwbGFjZW1lbnQsIGNhbWVyYSByb3RhdGlvbiBpbiByYWRpYW5zKV4yID4gRVBTXG5cdFx0XHQvLyB1c2luZyBzbWFsbC1hbmdsZSBhcHByb3hpbWF0aW9uIGNvcyh4LzIpID0gMSAtIHheMiAvIDhcblxuXHRcdFx0aWYgKCB6b29tQ2hhbmdlZCB8fFxuXHRcdFx0XHRsYXN0UG9zaXRpb24uZGlzdGFuY2VUb1NxdWFyZWQoIHNjb3BlLm9iamVjdC5wb3NpdGlvbiApID4gRVBTIHx8XG5cdFx0XHRcdDggKiAoIDEgLSBsYXN0UXVhdGVybmlvbi5kb3QoIHNjb3BlLm9iamVjdC5xdWF0ZXJuaW9uICkgKSA+IEVQUyApIHtcblxuXHRcdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBjaGFuZ2VFdmVudCApO1xuXG5cdFx0XHRcdGxhc3RQb3NpdGlvbi5jb3B5KCBzY29wZS5vYmplY3QucG9zaXRpb24gKTtcblx0XHRcdFx0bGFzdFF1YXRlcm5pb24uY29weSggc2NvcGUub2JqZWN0LnF1YXRlcm5pb24gKTtcblx0XHRcdFx0em9vbUNoYW5nZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9O1xuXG5cdH0oKTtcblxuXHR0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRzY29wZS5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdjb250ZXh0bWVudScsIG9uQ29udGV4dE1lbnUsIGZhbHNlICk7XG5cdFx0c2NvcGUuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2Vkb3duJywgb25Nb3VzZURvd24sIGZhbHNlICk7XG5cdFx0c2NvcGUuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnd2hlZWwnLCBvbk1vdXNlV2hlZWwsIGZhbHNlICk7XG5cblx0XHRzY29wZS5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICd0b3VjaHN0YXJ0Jywgb25Ub3VjaFN0YXJ0LCBmYWxzZSApO1xuXHRcdHNjb3BlLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3RvdWNoZW5kJywgb25Ub3VjaEVuZCwgZmFsc2UgKTtcblx0XHRzY29wZS5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICd0b3VjaG1vdmUnLCBvblRvdWNoTW92ZSwgZmFsc2UgKTtcblxuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZW1vdmUnLCBvbk1vdXNlTW92ZSwgZmFsc2UgKTtcblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2V1cCcsIG9uTW91c2VVcCwgZmFsc2UgKTtcblxuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIG9uS2V5RG93biwgZmFsc2UgKTtcblxuXHRcdC8vc2NvcGUuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzcG9zZScgfSApOyAvLyBzaG91bGQgdGhpcyBiZSBhZGRlZCBoZXJlP1xuXG5cdH07XG5cblx0Ly9cblx0Ly8gaW50ZXJuYWxzXG5cdC8vXG5cblx0dmFyIHNjb3BlID0gdGhpcztcblxuXHR2YXIgY2hhbmdlRXZlbnQgPSB7IHR5cGU6ICdjaGFuZ2UnIH07XG5cdHZhciBzdGFydEV2ZW50ID0geyB0eXBlOiAnc3RhcnQnIH07XG5cdHZhciBlbmRFdmVudCA9IHsgdHlwZTogJ2VuZCcgfTtcblxuXHR2YXIgU1RBVEUgPSB7IE5PTkU6IC0gMSwgUk9UQVRFOiAwLCBET0xMWTogMSwgUEFOOiAyLCBUT1VDSF9ST1RBVEU6IDMsIFRPVUNIX0RPTExZOiA0LCBUT1VDSF9QQU46IDUgfTtcblxuXHR2YXIgc3RhdGUgPSBTVEFURS5OT05FO1xuXG5cdHZhciBFUFMgPSAwLjAwMDAwMTtcblxuXHQvLyBjdXJyZW50IHBvc2l0aW9uIGluIHNwaGVyaWNhbCBjb29yZGluYXRlc1xuXHR2YXIgc3BoZXJpY2FsID0gbmV3IFRIUkVFLlNwaGVyaWNhbCgpO1xuXHR2YXIgc3BoZXJpY2FsRGVsdGEgPSBuZXcgVEhSRUUuU3BoZXJpY2FsKCk7XG5cblx0dmFyIHNjYWxlID0gMTtcblx0dmFyIHBhbk9mZnNldCA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG5cdHZhciB6b29tQ2hhbmdlZCA9IGZhbHNlO1xuXG5cdHZhciByb3RhdGVTdGFydCA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cdHZhciByb3RhdGVFbmQgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuXHR2YXIgcm90YXRlRGVsdGEgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuXG5cdHZhciBwYW5TdGFydCA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cdHZhciBwYW5FbmQgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuXHR2YXIgcGFuRGVsdGEgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuXG5cdHZhciBkb2xseVN0YXJ0ID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcblx0dmFyIGRvbGx5RW5kID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcblx0dmFyIGRvbGx5RGVsdGEgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuXG5cdGZ1bmN0aW9uIGdldEF1dG9Sb3RhdGlvbkFuZ2xlKCkge1xuXG5cdFx0cmV0dXJuIDIgKiBNYXRoLlBJIC8gNjAgLyA2MCAqIHNjb3BlLmF1dG9Sb3RhdGVTcGVlZDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0Wm9vbVNjYWxlKCkge1xuXG5cdFx0cmV0dXJuIE1hdGgucG93KCAwLjk1LCBzY29wZS56b29tU3BlZWQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcm90YXRlTGVmdCggYW5nbGUgKSB7XG5cblx0XHRzcGhlcmljYWxEZWx0YS50aGV0YSAtPSBhbmdsZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcm90YXRlVXAoIGFuZ2xlICkge1xuXG5cdFx0c3BoZXJpY2FsRGVsdGEucGhpIC09IGFuZ2xlO1xuXG5cdH1cblxuXHR2YXIgcGFuTGVmdCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBwYW5MZWZ0KCBkaXN0YW5jZSwgb2JqZWN0TWF0cml4ICkge1xuXG5cdFx0XHR2LnNldEZyb21NYXRyaXhDb2x1bW4oIG9iamVjdE1hdHJpeCwgMCApOyAvLyBnZXQgWCBjb2x1bW4gb2Ygb2JqZWN0TWF0cml4XG5cdFx0XHR2Lm11bHRpcGx5U2NhbGFyKCAtIGRpc3RhbmNlICk7XG5cblx0XHRcdHBhbk9mZnNldC5hZGQoIHYgKTtcblxuXHRcdH07XG5cblx0fSgpO1xuXG5cdHZhciBwYW5VcCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB2ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBwYW5VcCggZGlzdGFuY2UsIG9iamVjdE1hdHJpeCApIHtcblxuXHRcdFx0di5zZXRGcm9tTWF0cml4Q29sdW1uKCBvYmplY3RNYXRyaXgsIDEgKTsgLy8gZ2V0IFkgY29sdW1uIG9mIG9iamVjdE1hdHJpeFxuXHRcdFx0di5tdWx0aXBseVNjYWxhciggZGlzdGFuY2UgKTtcblxuXHRcdFx0cGFuT2Zmc2V0LmFkZCggdiApO1xuXG5cdFx0fTtcblxuXHR9KCk7XG5cblx0Ly8gZGVsdGFYIGFuZCBkZWx0YVkgYXJlIGluIHBpeGVsczsgcmlnaHQgYW5kIGRvd24gYXJlIHBvc2l0aXZlXG5cdHZhciBwYW4gPSBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgb2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiBwYW4oIGRlbHRhWCwgZGVsdGFZICkge1xuXG5cdFx0XHR2YXIgZWxlbWVudCA9IHNjb3BlLmRvbUVsZW1lbnQgPT09IGRvY3VtZW50ID8gc2NvcGUuZG9tRWxlbWVudC5ib2R5IDogc2NvcGUuZG9tRWxlbWVudDtcblxuXHRcdFx0aWYgKCBzY29wZS5vYmplY3QuaXNQZXJzcGVjdGl2ZUNhbWVyYSApIHtcblxuXHRcdFx0XHQvLyBwZXJzcGVjdGl2ZVxuXHRcdFx0XHR2YXIgcG9zaXRpb24gPSBzY29wZS5vYmplY3QucG9zaXRpb247XG5cdFx0XHRcdG9mZnNldC5jb3B5KCBwb3NpdGlvbiApLnN1Yiggc2NvcGUudGFyZ2V0ICk7XG5cdFx0XHRcdHZhciB0YXJnZXREaXN0YW5jZSA9IG9mZnNldC5sZW5ndGgoKTtcblxuXHRcdFx0XHQvLyBoYWxmIG9mIHRoZSBmb3YgaXMgY2VudGVyIHRvIHRvcCBvZiBzY3JlZW5cblx0XHRcdFx0dGFyZ2V0RGlzdGFuY2UgKj0gTWF0aC50YW4oICggc2NvcGUub2JqZWN0LmZvdiAvIDIgKSAqIE1hdGguUEkgLyAxODAuMCApO1xuXG5cdFx0XHRcdC8vIHdlIGFjdHVhbGx5IGRvbid0IHVzZSBzY3JlZW5XaWR0aCwgc2luY2UgcGVyc3BlY3RpdmUgY2FtZXJhIGlzIGZpeGVkIHRvIHNjcmVlbiBoZWlnaHRcblx0XHRcdFx0cGFuTGVmdCggMiAqIGRlbHRhWCAqIHRhcmdldERpc3RhbmNlIC8gZWxlbWVudC5jbGllbnRIZWlnaHQsIHNjb3BlLm9iamVjdC5tYXRyaXggKTtcblx0XHRcdFx0cGFuVXAoIDIgKiBkZWx0YVkgKiB0YXJnZXREaXN0YW5jZSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0LCBzY29wZS5vYmplY3QubWF0cml4ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHNjb3BlLm9iamVjdC5pc09ydGhvZ3JhcGhpY0NhbWVyYSApIHtcblxuXHRcdFx0XHQvLyBvcnRob2dyYXBoaWNcblx0XHRcdFx0cGFuTGVmdCggZGVsdGFYICogKCBzY29wZS5vYmplY3QucmlnaHQgLSBzY29wZS5vYmplY3QubGVmdCApIC8gc2NvcGUub2JqZWN0Lnpvb20gLyBlbGVtZW50LmNsaWVudFdpZHRoLCBzY29wZS5vYmplY3QubWF0cml4ICk7XG5cdFx0XHRcdHBhblVwKCBkZWx0YVkgKiAoIHNjb3BlLm9iamVjdC50b3AgLSBzY29wZS5vYmplY3QuYm90dG9tICkgLyBzY29wZS5vYmplY3Quem9vbSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0LCBzY29wZS5vYmplY3QubWF0cml4ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gY2FtZXJhIG5laXRoZXIgb3J0aG9ncmFwaGljIG5vciBwZXJzcGVjdGl2ZVxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdXQVJOSU5HOiBPcmJpdENvbnRyb2xzLmpzIGVuY291bnRlcmVkIGFuIHVua25vd24gY2FtZXJhIHR5cGUgLSBwYW4gZGlzYWJsZWQuJyApO1xuXHRcdFx0XHRzY29wZS5lbmFibGVQYW4gPSBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fTtcblxuXHR9KCk7XG5cblx0ZnVuY3Rpb24gZG9sbHlJbiggZG9sbHlTY2FsZSApIHtcblxuXHRcdGlmICggc2NvcGUub2JqZWN0LmlzUGVyc3BlY3RpdmVDYW1lcmEgKSB7XG5cblx0XHRcdHNjYWxlIC89IGRvbGx5U2NhbGU7XG5cblx0XHR9IGVsc2UgaWYgKCBzY29wZS5vYmplY3QuaXNPcnRob2dyYXBoaWNDYW1lcmEgKSB7XG5cblx0XHRcdHNjb3BlLm9iamVjdC56b29tID0gTWF0aC5tYXgoIHNjb3BlLm1pblpvb20sIE1hdGgubWluKCBzY29wZS5tYXhab29tLCBzY29wZS5vYmplY3Quem9vbSAqIGRvbGx5U2NhbGUgKSApO1xuXHRcdFx0c2NvcGUub2JqZWN0LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblx0XHRcdHpvb21DaGFuZ2VkID0gdHJ1ZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZSAtIGRvbGx5L3pvb20gZGlzYWJsZWQuJyApO1xuXHRcdFx0c2NvcGUuZW5hYmxlWm9vbSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBkb2xseU91dCggZG9sbHlTY2FsZSApIHtcblxuXHRcdGlmICggc2NvcGUub2JqZWN0LmlzUGVyc3BlY3RpdmVDYW1lcmEgKSB7XG5cblx0XHRcdHNjYWxlICo9IGRvbGx5U2NhbGU7XG5cblx0XHR9IGVsc2UgaWYgKCBzY29wZS5vYmplY3QuaXNPcnRob2dyYXBoaWNDYW1lcmEgKSB7XG5cblx0XHRcdHNjb3BlLm9iamVjdC56b29tID0gTWF0aC5tYXgoIHNjb3BlLm1pblpvb20sIE1hdGgubWluKCBzY29wZS5tYXhab29tLCBzY29wZS5vYmplY3Quem9vbSAvIGRvbGx5U2NhbGUgKSApO1xuXHRcdFx0c2NvcGUub2JqZWN0LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblx0XHRcdHpvb21DaGFuZ2VkID0gdHJ1ZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZSAtIGRvbGx5L3pvb20gZGlzYWJsZWQuJyApO1xuXHRcdFx0c2NvcGUuZW5hYmxlWm9vbSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXHQvLyBldmVudCBjYWxsYmFja3MgLSB1cGRhdGUgdGhlIG9iamVjdCBzdGF0ZVxuXHQvL1xuXG5cdGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93blJvdGF0ZSggZXZlbnQgKSB7XG5cblx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlTW91c2VEb3duUm90YXRlJyApO1xuXG5cdFx0cm90YXRlU3RhcnQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bkRvbGx5KCBldmVudCApIHtcblxuXHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVNb3VzZURvd25Eb2xseScgKTtcblxuXHRcdGRvbGx5U3RhcnQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93blBhbiggZXZlbnQgKSB7XG5cblx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlTW91c2VEb3duUGFuJyApO1xuXG5cdFx0cGFuU3RhcnQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZVJvdGF0ZSggZXZlbnQgKSB7XG5cblx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlTW91c2VNb3ZlUm90YXRlJyApO1xuXG5cdFx0cm90YXRlRW5kLnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuXHRcdHJvdGF0ZURlbHRhLnN1YlZlY3RvcnMoIHJvdGF0ZUVuZCwgcm90YXRlU3RhcnQgKTtcblxuXHRcdHZhciBlbGVtZW50ID0gc2NvcGUuZG9tRWxlbWVudCA9PT0gZG9jdW1lbnQgPyBzY29wZS5kb21FbGVtZW50LmJvZHkgOiBzY29wZS5kb21FbGVtZW50O1xuXG5cdFx0Ly8gcm90YXRpbmcgYWNyb3NzIHdob2xlIHNjcmVlbiBnb2VzIDM2MCBkZWdyZWVzIGFyb3VuZFxuXHRcdHJvdGF0ZUxlZnQoIDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueCAvIGVsZW1lbnQuY2xpZW50V2lkdGggKiBzY29wZS5yb3RhdGVTcGVlZCApO1xuXG5cdFx0Ly8gcm90YXRpbmcgdXAgYW5kIGRvd24gYWxvbmcgd2hvbGUgc2NyZWVuIGF0dGVtcHRzIHRvIGdvIDM2MCwgYnV0IGxpbWl0ZWQgdG8gMTgwXG5cdFx0cm90YXRlVXAoIDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0ICogc2NvcGUucm90YXRlU3BlZWQgKTtcblxuXHRcdHJvdGF0ZVN0YXJ0LmNvcHkoIHJvdGF0ZUVuZCApO1xuXG5cdFx0c2NvcGUudXBkYXRlKCk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZURvbGx5KCBldmVudCApIHtcblxuXHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVNb3VzZU1vdmVEb2xseScgKTtcblxuXHRcdGRvbGx5RW5kLnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuXG5cdFx0ZG9sbHlEZWx0YS5zdWJWZWN0b3JzKCBkb2xseUVuZCwgZG9sbHlTdGFydCApO1xuXG5cdFx0aWYgKCBkb2xseURlbHRhLnkgPiAwICkge1xuXG5cdFx0XHRkb2xseUluKCBnZXRab29tU2NhbGUoKSApO1xuXG5cdFx0fSBlbHNlIGlmICggZG9sbHlEZWx0YS55IDwgMCApIHtcblxuXHRcdFx0ZG9sbHlPdXQoIGdldFpvb21TY2FsZSgpICk7XG5cblx0XHR9XG5cblx0XHRkb2xseVN0YXJ0LmNvcHkoIGRvbGx5RW5kICk7XG5cblx0XHRzY29wZS51cGRhdGUoKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlUGFuKCBldmVudCApIHtcblxuXHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVNb3VzZU1vdmVQYW4nICk7XG5cblx0XHRwYW5FbmQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cblx0XHRwYW5EZWx0YS5zdWJWZWN0b3JzKCBwYW5FbmQsIHBhblN0YXJ0ICk7XG5cblx0XHRwYW4oIHBhbkRlbHRhLngsIHBhbkRlbHRhLnkgKTtcblxuXHRcdHBhblN0YXJ0LmNvcHkoIHBhbkVuZCApO1xuXG5cdFx0c2NvcGUudXBkYXRlKCk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZU1vdXNlVXAoIGV2ZW50ICkge1xuXG5cdFx0Ly8gY29uc29sZS5sb2coICdoYW5kbGVNb3VzZVVwJyApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVNb3VzZVdoZWVsKCBldmVudCApIHtcblxuXHRcdC8vIGNvbnNvbGUubG9nKCAnaGFuZGxlTW91c2VXaGVlbCcgKTtcblxuXHRcdGlmICggZXZlbnQuZGVsdGFZIDwgMCApIHtcblxuXHRcdFx0ZG9sbHlPdXQoIGdldFpvb21TY2FsZSgpICk7XG5cblx0XHR9IGVsc2UgaWYgKCBldmVudC5kZWx0YVkgPiAwICkge1xuXG5cdFx0XHRkb2xseUluKCBnZXRab29tU2NhbGUoKSApO1xuXG5cdFx0fVxuXG5cdFx0c2NvcGUudXBkYXRlKCk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZUtleURvd24oIGV2ZW50ICkge1xuXG5cdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZUtleURvd24nICk7XG5cblx0XHRzd2l0Y2ggKCBldmVudC5rZXlDb2RlICkge1xuXG5cdFx0XHRjYXNlIHNjb3BlLmtleXMuVVA6XG5cdFx0XHRcdHBhbiggMCwgc2NvcGUua2V5UGFuU3BlZWQgKTtcblx0XHRcdFx0c2NvcGUudXBkYXRlKCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIHNjb3BlLmtleXMuQk9UVE9NOlxuXHRcdFx0XHRwYW4oIDAsIC0gc2NvcGUua2V5UGFuU3BlZWQgKTtcblx0XHRcdFx0c2NvcGUudXBkYXRlKCk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIHNjb3BlLmtleXMuTEVGVDpcblx0XHRcdFx0cGFuKCBzY29wZS5rZXlQYW5TcGVlZCwgMCApO1xuXHRcdFx0XHRzY29wZS51cGRhdGUoKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2Ugc2NvcGUua2V5cy5SSUdIVDpcblx0XHRcdFx0cGFuKCAtIHNjb3BlLmtleVBhblNwZWVkLCAwICk7XG5cdFx0XHRcdHNjb3BlLnVwZGF0ZSgpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydFJvdGF0ZSggZXZlbnQgKSB7XG5cblx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlVG91Y2hTdGFydFJvdGF0ZScgKTtcblxuXHRcdHJvdGF0ZVN0YXJ0LnNldCggZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VYLCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydERvbGx5KCBldmVudCApIHtcblxuXHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVUb3VjaFN0YXJ0RG9sbHknICk7XG5cblx0XHR2YXIgZHggPSBldmVudC50b3VjaGVzWyAwIF0ucGFnZVggLSBldmVudC50b3VjaGVzWyAxIF0ucGFnZVg7XG5cdFx0dmFyIGR5ID0gZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VZIC0gZXZlbnQudG91Y2hlc1sgMSBdLnBhZ2VZO1xuXG5cdFx0dmFyIGRpc3RhbmNlID0gTWF0aC5zcXJ0KCBkeCAqIGR4ICsgZHkgKiBkeSApO1xuXG5cdFx0ZG9sbHlTdGFydC5zZXQoIDAsIGRpc3RhbmNlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnRQYW4oIGV2ZW50ICkge1xuXG5cdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZVRvdWNoU3RhcnRQYW4nICk7XG5cblx0XHRwYW5TdGFydC5zZXQoIGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWCwgZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VZICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGhhbmRsZVRvdWNoTW92ZVJvdGF0ZSggZXZlbnQgKSB7XG5cblx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlVG91Y2hNb3ZlUm90YXRlJyApO1xuXG5cdFx0cm90YXRlRW5kLnNldCggZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VYLCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgKTtcblx0XHRyb3RhdGVEZWx0YS5zdWJWZWN0b3JzKCByb3RhdGVFbmQsIHJvdGF0ZVN0YXJ0ICk7XG5cblx0XHR2YXIgZWxlbWVudCA9IHNjb3BlLmRvbUVsZW1lbnQgPT09IGRvY3VtZW50ID8gc2NvcGUuZG9tRWxlbWVudC5ib2R5IDogc2NvcGUuZG9tRWxlbWVudDtcblxuXHRcdC8vIHJvdGF0aW5nIGFjcm9zcyB3aG9sZSBzY3JlZW4gZ29lcyAzNjAgZGVncmVlcyBhcm91bmRcblx0XHRyb3RhdGVMZWZ0KCAyICogTWF0aC5QSSAqIHJvdGF0ZURlbHRhLnggLyBlbGVtZW50LmNsaWVudFdpZHRoICogc2NvcGUucm90YXRlU3BlZWQgKTtcblxuXHRcdC8vIHJvdGF0aW5nIHVwIGFuZCBkb3duIGFsb25nIHdob2xlIHNjcmVlbiBhdHRlbXB0cyB0byBnbyAzNjAsIGJ1dCBsaW1pdGVkIHRvIDE4MFxuXHRcdHJvdGF0ZVVwKCAyICogTWF0aC5QSSAqIHJvdGF0ZURlbHRhLnkgLyBlbGVtZW50LmNsaWVudEhlaWdodCAqIHNjb3BlLnJvdGF0ZVNwZWVkICk7XG5cblx0XHRyb3RhdGVTdGFydC5jb3B5KCByb3RhdGVFbmQgKTtcblxuXHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmVEb2xseSggZXZlbnQgKSB7XG5cblx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlVG91Y2hNb3ZlRG9sbHknICk7XG5cblx0XHR2YXIgZHggPSBldmVudC50b3VjaGVzWyAwIF0ucGFnZVggLSBldmVudC50b3VjaGVzWyAxIF0ucGFnZVg7XG5cdFx0dmFyIGR5ID0gZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VZIC0gZXZlbnQudG91Y2hlc1sgMSBdLnBhZ2VZO1xuXG5cdFx0dmFyIGRpc3RhbmNlID0gTWF0aC5zcXJ0KCBkeCAqIGR4ICsgZHkgKiBkeSApO1xuXG5cdFx0ZG9sbHlFbmQuc2V0KCAwLCBkaXN0YW5jZSApO1xuXG5cdFx0ZG9sbHlEZWx0YS5zdWJWZWN0b3JzKCBkb2xseUVuZCwgZG9sbHlTdGFydCApO1xuXG5cdFx0aWYgKCBkb2xseURlbHRhLnkgPiAwICkge1xuXG5cdFx0XHRkb2xseU91dCggZ2V0Wm9vbVNjYWxlKCkgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGRvbGx5RGVsdGEueSA8IDAgKSB7XG5cblx0XHRcdGRvbGx5SW4oIGdldFpvb21TY2FsZSgpICk7XG5cblx0XHR9XG5cblx0XHRkb2xseVN0YXJ0LmNvcHkoIGRvbGx5RW5kICk7XG5cblx0XHRzY29wZS51cGRhdGUoKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlUGFuKCBldmVudCApIHtcblxuXHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVUb3VjaE1vdmVQYW4nICk7XG5cblx0XHRwYW5FbmQuc2V0KCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVgsIGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSApO1xuXG5cdFx0cGFuRGVsdGEuc3ViVmVjdG9ycyggcGFuRW5kLCBwYW5TdGFydCApO1xuXG5cdFx0cGFuKCBwYW5EZWx0YS54LCBwYW5EZWx0YS55ICk7XG5cblx0XHRwYW5TdGFydC5jb3B5KCBwYW5FbmQgKTtcblxuXHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBoYW5kbGVUb3VjaEVuZCggZXZlbnQgKSB7XG5cblx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlVG91Y2hFbmQnICk7XG5cblx0fVxuXG5cdC8vXG5cdC8vIGV2ZW50IGhhbmRsZXJzIC0gRlNNOiBsaXN0ZW4gZm9yIGV2ZW50cyBhbmQgcmVzZXQgc3RhdGVcblx0Ly9cblxuXHRmdW5jdGlvbiBvbk1vdXNlRG93biggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdHN3aXRjaCAoIGV2ZW50LmJ1dHRvbiApIHtcblxuXHRcdFx0Y2FzZSBzY29wZS5tb3VzZUJ1dHRvbnMuT1JCSVQ6XG5cblx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdGhhbmRsZU1vdXNlRG93blJvdGF0ZSggZXZlbnQgKTtcblxuXHRcdFx0XHRzdGF0ZSA9IFNUQVRFLlJPVEFURTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBzY29wZS5tb3VzZUJ1dHRvbnMuWk9PTTpcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVpvb20gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdGhhbmRsZU1vdXNlRG93bkRvbGx5KCBldmVudCApO1xuXG5cdFx0XHRcdHN0YXRlID0gU1RBVEUuRE9MTFk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2Ugc2NvcGUubW91c2VCdXR0b25zLlBBTjpcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVBhbiA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0aGFuZGxlTW91c2VEb3duUGFuKCBldmVudCApO1xuXG5cdFx0XHRcdHN0YXRlID0gU1RBVEUuUEFOO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBzdGF0ZSAhPT0gU1RBVEUuTk9ORSApIHtcblxuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlLCBmYWxzZSApO1xuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNldXAnLCBvbk1vdXNlVXAsIGZhbHNlICk7XG5cblx0XHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIHN0YXJ0RXZlbnQgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gb25Nb3VzZU1vdmUoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRzd2l0Y2ggKCBzdGF0ZSApIHtcblxuXHRcdFx0Y2FzZSBTVEFURS5ST1RBVEU6XG5cblx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdGhhbmRsZU1vdXNlTW92ZVJvdGF0ZSggZXZlbnQgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBTVEFURS5ET0xMWTpcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVpvb20gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdGhhbmRsZU1vdXNlTW92ZURvbGx5KCBldmVudCApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIFNUQVRFLlBBTjpcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVBhbiA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0aGFuZGxlTW91c2VNb3ZlUGFuKCBldmVudCApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBvbk1vdXNlVXAoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdGhhbmRsZU1vdXNlVXAoIGV2ZW50ICk7XG5cblx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUsIGZhbHNlICk7XG5cdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ21vdXNldXAnLCBvbk1vdXNlVXAsIGZhbHNlICk7XG5cblx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBlbmRFdmVudCApO1xuXG5cdFx0c3RhdGUgPSBTVEFURS5OT05FO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBvbk1vdXNlV2hlZWwoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSB8fCBzY29wZS5lbmFibGVab29tID09PSBmYWxzZSB8fCAoIHN0YXRlICE9PSBTVEFURS5OT05FICYmIHN0YXRlICE9PSBTVEFURS5ST1RBVEUgKSApIHJldHVybjtcblxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBzdGFydEV2ZW50ICk7XG5cblx0XHRoYW5kbGVNb3VzZVdoZWVsKCBldmVudCApO1xuXG5cdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggZW5kRXZlbnQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25LZXlEb3duKCBldmVudCApIHtcblxuXHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgfHwgc2NvcGUuZW5hYmxlS2V5cyA9PT0gZmFsc2UgfHwgc2NvcGUuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdGhhbmRsZUtleURvd24oIGV2ZW50ICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uVG91Y2hTdGFydCggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0c3dpdGNoICggZXZlbnQudG91Y2hlcy5sZW5ndGggKSB7XG5cblx0XHRcdGNhc2UgMTpcdC8vIG9uZS1maW5nZXJlZCB0b3VjaDogcm90YXRlXG5cblx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdGhhbmRsZVRvdWNoU3RhcnRSb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdFx0c3RhdGUgPSBTVEFURS5UT1VDSF9ST1RBVEU7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMjpcdC8vIHR3by1maW5nZXJlZCB0b3VjaDogZG9sbHlcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVpvb20gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdGhhbmRsZVRvdWNoU3RhcnREb2xseSggZXZlbnQgKTtcblxuXHRcdFx0XHRzdGF0ZSA9IFNUQVRFLlRPVUNIX0RPTExZO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDM6IC8vIHRocmVlLWZpbmdlcmVkIHRvdWNoOiBwYW5cblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVBhbiA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0aGFuZGxlVG91Y2hTdGFydFBhbiggZXZlbnQgKTtcblxuXHRcdFx0XHRzdGF0ZSA9IFNUQVRFLlRPVUNIX1BBTjtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cblx0XHR9XG5cblx0XHRpZiAoIHN0YXRlICE9PSBTVEFURS5OT05FICkge1xuXG5cdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBzdGFydEV2ZW50ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uVG91Y2hNb3ZlKCBldmVudCApIHtcblxuXHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0c3dpdGNoICggZXZlbnQudG91Y2hlcy5sZW5ndGggKSB7XG5cblx0XHRcdGNhc2UgMTogLy8gb25lLWZpbmdlcmVkIHRvdWNoOiByb3RhdGVcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVJvdGF0ZSA9PT0gZmFsc2UgKSByZXR1cm47XG5cdFx0XHRcdGlmICggc3RhdGUgIT09IFNUQVRFLlRPVUNIX1JPVEFURSApIHJldHVybjsgLy8gaXMgdGhpcyBuZWVkZWQ/Li4uXG5cblx0XHRcdFx0aGFuZGxlVG91Y2hNb3ZlUm90YXRlKCBldmVudCApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDI6IC8vIHR3by1maW5nZXJlZCB0b3VjaDogZG9sbHlcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVpvb20gPT09IGZhbHNlICkgcmV0dXJuO1xuXHRcdFx0XHRpZiAoIHN0YXRlICE9PSBTVEFURS5UT1VDSF9ET0xMWSApIHJldHVybjsgLy8gaXMgdGhpcyBuZWVkZWQ/Li4uXG5cblx0XHRcdFx0aGFuZGxlVG91Y2hNb3ZlRG9sbHkoIGV2ZW50ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMzogLy8gdGhyZWUtZmluZ2VyZWQgdG91Y2g6IHBhblxuXG5cdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblx0XHRcdFx0aWYgKCBzdGF0ZSAhPT0gU1RBVEUuVE9VQ0hfUEFOICkgcmV0dXJuOyAvLyBpcyB0aGlzIG5lZWRlZD8uLi5cblxuXHRcdFx0XHRoYW5kbGVUb3VjaE1vdmVQYW4oIGV2ZW50ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0c3RhdGUgPSBTVEFURS5OT05FO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBvblRvdWNoRW5kKCBldmVudCApIHtcblxuXHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRoYW5kbGVUb3VjaEVuZCggZXZlbnQgKTtcblxuXHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIGVuZEV2ZW50ICk7XG5cblx0XHRzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uQ29udGV4dE1lbnUoIGV2ZW50ICkge1xuXG5cdFx0aWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0fVxuXG5cdC8vXG5cblx0c2NvcGUuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAnY29udGV4dG1lbnUnLCBvbkNvbnRleHRNZW51LCBmYWxzZSApO1xuXG5cdHNjb3BlLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlZG93bicsIG9uTW91c2VEb3duLCBmYWxzZSApO1xuXHRzY29wZS5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICd3aGVlbCcsIG9uTW91c2VXaGVlbCwgZmFsc2UgKTtcblxuXHRzY29wZS5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICd0b3VjaHN0YXJ0Jywgb25Ub3VjaFN0YXJ0LCBmYWxzZSApO1xuXHRzY29wZS5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICd0b3VjaGVuZCcsIG9uVG91Y2hFbmQsIGZhbHNlICk7XG5cdHNjb3BlLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCBmYWxzZSApO1xuXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAna2V5ZG93bicsIG9uS2V5RG93biwgZmFsc2UgKTtcblxuXHQvLyBmb3JjZSBhbiB1cGRhdGUgYXQgc3RhcnRcblxuXHR0aGlzLnVwZGF0ZSgpO1xuXG59O1xuXG5USFJFRS5PcmJpdENvbnRyb2xzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFRIUkVFLkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUgKTtcblRIUkVFLk9yYml0Q29udHJvbHMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVEhSRUUuT3JiaXRDb250cm9scztcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFRIUkVFLk9yYml0Q29udHJvbHMucHJvdG90eXBlLCB7XG5cblx0Y2VudGVyOiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogLmNlbnRlciBoYXMgYmVlbiByZW5hbWVkIHRvIC50YXJnZXQnICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50YXJnZXQ7XG5cblx0XHR9XG5cblx0fSxcblxuXHQvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5cblx0bm9ab29tOiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogLm5vWm9vbSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZVpvb20gaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gISB0aGlzLmVuYWJsZVpvb207XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAubm9ab29tIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlWm9vbSBpbnN0ZWFkLicgKTtcblx0XHRcdHRoaXMuZW5hYmxlWm9vbSA9ICEgdmFsdWU7XG5cblx0XHR9XG5cblx0fSxcblxuXHRub1JvdGF0ZToge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5ub1JvdGF0ZSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZVJvdGF0ZSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiAhIHRoaXMuZW5hYmxlUm90YXRlO1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogLm5vUm90YXRlIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlUm90YXRlIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5lbmFibGVSb3RhdGUgPSAhIHZhbHVlO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0bm9QYW46IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAubm9QYW4gaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVQYW4gaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gISB0aGlzLmVuYWJsZVBhbjtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5ub1BhbiBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZVBhbiBpbnN0ZWFkLicgKTtcblx0XHRcdHRoaXMuZW5hYmxlUGFuID0gISB2YWx1ZTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdG5vS2V5czoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5ub0tleXMgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVLZXlzIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuICEgdGhpcy5lbmFibGVLZXlzO1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogLm5vS2V5cyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZUtleXMgaW5zdGVhZC4nICk7XG5cdFx0XHR0aGlzLmVuYWJsZUtleXMgPSAhIHZhbHVlO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0c3RhdGljTW92aW5nOiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogLnN0YXRpY01vdmluZyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZURhbXBpbmcgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gISB0aGlzLmVuYWJsZURhbXBpbmc7XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAuc3RhdGljTW92aW5nIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlRGFtcGluZyBpbnN0ZWFkLicgKTtcblx0XHRcdHRoaXMuZW5hYmxlRGFtcGluZyA9ICEgdmFsdWU7XG5cblx0XHR9XG5cblx0fSxcblxuXHRkeW5hbWljRGFtcGluZ0ZhY3Rvcjoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5keW5hbWljRGFtcGluZ0ZhY3RvciBoYXMgYmVlbiByZW5hbWVkLiBVc2UgLmRhbXBpbmdGYWN0b3IgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5kYW1waW5nRmFjdG9yO1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogLmR5bmFtaWNEYW1waW5nRmFjdG9yIGhhcyBiZWVuIHJlbmFtZWQuIFVzZSAuZGFtcGluZ0ZhY3RvciBpbnN0ZWFkLicgKTtcblx0XHRcdHRoaXMuZGFtcGluZ0ZhY3RvciA9IHZhbHVlO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuIiwiLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cblRIUkVFLk9CSkxvYWRlciA9IGZ1bmN0aW9uICggbWFuYWdlciApIHtcbiAgICBcbiAgICAgICAgdGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBUSFJFRS5EZWZhdWx0TG9hZGluZ01hbmFnZXI7XG4gICAgXG4gICAgICAgIHRoaXMubWF0ZXJpYWxzID0gbnVsbDtcbiAgICBcbiAgICAgICAgdGhpcy5yZWdleHAgPSB7XG4gICAgICAgICAgICAvLyB2IGZsb2F0IGZsb2F0IGZsb2F0XG4gICAgICAgICAgICB2ZXJ0ZXhfcGF0dGVybiAgICAgICAgICAgOiAvXnZcXHMrKFtcXGR8XFwufFxcK3xcXC18ZXxFXSspXFxzKyhbXFxkfFxcLnxcXCt8XFwtfGV8RV0rKVxccysoW1xcZHxcXC58XFwrfFxcLXxlfEVdKykvLFxuICAgICAgICAgICAgLy8gdm4gZmxvYXQgZmxvYXQgZmxvYXRcbiAgICAgICAgICAgIG5vcm1hbF9wYXR0ZXJuICAgICAgICAgICA6IC9edm5cXHMrKFtcXGR8XFwufFxcK3xcXC18ZXxFXSspXFxzKyhbXFxkfFxcLnxcXCt8XFwtfGV8RV0rKVxccysoW1xcZHxcXC58XFwrfFxcLXxlfEVdKykvLFxuICAgICAgICAgICAgLy8gdnQgZmxvYXQgZmxvYXRcbiAgICAgICAgICAgIHV2X3BhdHRlcm4gICAgICAgICAgICAgICA6IC9ednRcXHMrKFtcXGR8XFwufFxcK3xcXC18ZXxFXSspXFxzKyhbXFxkfFxcLnxcXCt8XFwtfGV8RV0rKS8sXG4gICAgICAgICAgICAvLyBmIHZlcnRleCB2ZXJ0ZXggdmVydGV4XG4gICAgICAgICAgICBmYWNlX3ZlcnRleCAgICAgICAgICAgICAgOiAvXmZcXHMrKC0/XFxkKylcXHMrKC0/XFxkKylcXHMrKC0/XFxkKykoPzpcXHMrKC0/XFxkKykpPy8sXG4gICAgICAgICAgICAvLyBmIHZlcnRleC91diB2ZXJ0ZXgvdXYgdmVydGV4L3V2XG4gICAgICAgICAgICBmYWNlX3ZlcnRleF91diAgICAgICAgICAgOiAvXmZcXHMrKC0/XFxkKylcXC8oLT9cXGQrKVxccysoLT9cXGQrKVxcLygtP1xcZCspXFxzKygtP1xcZCspXFwvKC0/XFxkKykoPzpcXHMrKC0/XFxkKylcXC8oLT9cXGQrKSk/LyxcbiAgICAgICAgICAgIC8vIGYgdmVydGV4L3V2L25vcm1hbCB2ZXJ0ZXgvdXYvbm9ybWFsIHZlcnRleC91di9ub3JtYWxcbiAgICAgICAgICAgIGZhY2VfdmVydGV4X3V2X25vcm1hbCAgICA6IC9eZlxccysoLT9cXGQrKVxcLygtP1xcZCspXFwvKC0/XFxkKylcXHMrKC0/XFxkKylcXC8oLT9cXGQrKVxcLygtP1xcZCspXFxzKygtP1xcZCspXFwvKC0/XFxkKylcXC8oLT9cXGQrKSg/OlxccysoLT9cXGQrKVxcLygtP1xcZCspXFwvKC0/XFxkKykpPy8sXG4gICAgICAgICAgICAvLyBmIHZlcnRleC8vbm9ybWFsIHZlcnRleC8vbm9ybWFsIHZlcnRleC8vbm9ybWFsXG4gICAgICAgICAgICBmYWNlX3ZlcnRleF9ub3JtYWwgICAgICAgOiAvXmZcXHMrKC0/XFxkKylcXC9cXC8oLT9cXGQrKVxccysoLT9cXGQrKVxcL1xcLygtP1xcZCspXFxzKygtP1xcZCspXFwvXFwvKC0/XFxkKykoPzpcXHMrKC0/XFxkKylcXC9cXC8oLT9cXGQrKSk/LyxcbiAgICAgICAgICAgIC8vIG8gb2JqZWN0X25hbWUgfCBnIGdyb3VwX25hbWVcbiAgICAgICAgICAgIG9iamVjdF9wYXR0ZXJuICAgICAgICAgICA6IC9eW29nXVxccyooLispPy8sXG4gICAgICAgICAgICAvLyBzIGJvb2xlYW5cbiAgICAgICAgICAgIHNtb290aGluZ19wYXR0ZXJuICAgICAgICA6IC9ec1xccysoXFxkK3xvbnxvZmYpLyxcbiAgICAgICAgICAgIC8vIG10bGxpYiBmaWxlX3JlZmVyZW5jZVxuICAgICAgICAgICAgbWF0ZXJpYWxfbGlicmFyeV9wYXR0ZXJuIDogL15tdGxsaWIgLyxcbiAgICAgICAgICAgIC8vIHVzZW10bCBtYXRlcmlhbF9uYW1lXG4gICAgICAgICAgICBtYXRlcmlhbF91c2VfcGF0dGVybiAgICAgOiAvXnVzZW10bCAvXG4gICAgICAgIH07XG4gICAgXG4gICAgfTtcbiAgICBcbiAgICBUSFJFRS5PQkpMb2FkZXIucHJvdG90eXBlID0ge1xuICAgIFxuICAgICAgICBjb25zdHJ1Y3RvcjogVEhSRUUuT0JKTG9hZGVyLFxuICAgIFxuICAgICAgICBsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHNjb3BlID0gdGhpcztcbiAgICBcbiAgICAgICAgICAgIHZhciBsb2FkZXIgPSBuZXcgVEhSRUUuRmlsZUxvYWRlciggc2NvcGUubWFuYWdlciApO1xuICAgICAgICAgICAgbG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuICAgICAgICAgICAgbG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIG9uTG9hZCggc2NvcGUucGFyc2UoIHRleHQgKSApO1xuICAgIFxuICAgICAgICAgICAgfSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuICAgIFxuICAgICAgICB9LFxuICAgIFxuICAgICAgICBzZXRQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuICAgIFxuICAgICAgICAgICAgdGhpcy5wYXRoID0gdmFsdWU7XG4gICAgXG4gICAgICAgIH0sXG4gICAgXG4gICAgICAgIHNldE1hdGVyaWFsczogZnVuY3Rpb24gKCBtYXRlcmlhbHMgKSB7XG4gICAgXG4gICAgICAgICAgICB0aGlzLm1hdGVyaWFscyA9IG1hdGVyaWFscztcbiAgICBcbiAgICAgICAgfSxcbiAgICBcbiAgICAgICAgX2NyZWF0ZVBhcnNlclN0YXRlIDogZnVuY3Rpb24gKCkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHN0YXRlID0ge1xuICAgICAgICAgICAgICAgIG9iamVjdHMgIDogW10sXG4gICAgICAgICAgICAgICAgb2JqZWN0ICAgOiB7fSxcbiAgICBcbiAgICAgICAgICAgICAgICB2ZXJ0aWNlcyA6IFtdLFxuICAgICAgICAgICAgICAgIG5vcm1hbHMgIDogW10sXG4gICAgICAgICAgICAgICAgdXZzICAgICAgOiBbXSxcbiAgICBcbiAgICAgICAgICAgICAgICBtYXRlcmlhbExpYnJhcmllcyA6IFtdLFxuICAgIFxuICAgICAgICAgICAgICAgIHN0YXJ0T2JqZWN0OiBmdW5jdGlvbiAoIG5hbWUsIGZyb21EZWNsYXJhdGlvbiApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGN1cnJlbnQgb2JqZWN0IChpbml0aWFsIGZyb20gcmVzZXQpIGlzIG5vdCBmcm9tIGEgZy9vIGRlY2xhcmF0aW9uIGluIHRoZSBwYXJzZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gZmlsZS4gV2UgbmVlZCB0byB1c2UgaXQgZm9yIHRoZSBmaXJzdCBwYXJzZWQgZy9vIHRvIGtlZXAgdGhpbmdzIGluIHN5bmMuXG4gICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5vYmplY3QgJiYgdGhpcy5vYmplY3QuZnJvbURlY2xhcmF0aW9uID09PSBmYWxzZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2JqZWN0Lm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vYmplY3QuZnJvbURlY2xhcmF0aW9uID0gKCBmcm9tRGVjbGFyYXRpb24gIT09IGZhbHNlICk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzTWF0ZXJpYWwgPSAoIHRoaXMub2JqZWN0ICYmIHR5cGVvZiB0aGlzLm9iamVjdC5jdXJyZW50TWF0ZXJpYWwgPT09ICdmdW5jdGlvbicgPyB0aGlzLm9iamVjdC5jdXJyZW50TWF0ZXJpYWwoKSA6IHVuZGVmaW5lZCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMub2JqZWN0ICYmIHR5cGVvZiB0aGlzLm9iamVjdC5fZmluYWxpemUgPT09ICdmdW5jdGlvbicgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9iamVjdC5fZmluYWxpemUoIHRydWUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9iamVjdCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgOiBuYW1lIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnJvbURlY2xhcmF0aW9uIDogKCBmcm9tRGVjbGFyYXRpb24gIT09IGZhbHNlICksXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeSA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlcyA6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbHMgIDogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXZzICAgICAgOiBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFscyA6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc21vb3RoIDogdHJ1ZSxcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TWF0ZXJpYWwgOiBmdW5jdGlvbiggbmFtZSwgbGlicmFyaWVzICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91cyA9IHRoaXMuX2ZpbmFsaXplKCBmYWxzZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5ldyB1c2VtdGwgZGVjbGFyYXRpb24gb3ZlcndyaXRlcyBhbiBpbmhlcml0ZWQgbWF0ZXJpYWwsIGV4Y2VwdCBpZiBmYWNlcyB3ZXJlIGRlY2xhcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWZ0ZXIgdGhlIG1hdGVyaWFsLCB0aGVuIGl0IG11c3QgYmUgcHJlc2VydmVkIGZvciBwcm9wZXIgTXVsdGlNYXRlcmlhbCBjb250aW51YXRpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwcmV2aW91cyAmJiAoIHByZXZpb3VzLmluaGVyaXRlZCB8fCBwcmV2aW91cy5ncm91cENvdW50IDw9IDAgKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRlcmlhbHMuc3BsaWNlKCBwcmV2aW91cy5pbmRleCwgMSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ICAgICAgOiB0aGlzLm1hdGVyaWFscy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgICAgICAgOiBuYW1lIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdGxsaWIgICAgIDogKCBBcnJheS5pc0FycmF5KCBsaWJyYXJpZXMgKSAmJiBsaWJyYXJpZXMubGVuZ3RoID4gMCA/IGxpYnJhcmllc1sgbGlicmFyaWVzLmxlbmd0aCAtIDEgXSA6ICcnICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtb290aCAgICAgOiAoIHByZXZpb3VzICE9PSB1bmRlZmluZWQgPyBwcmV2aW91cy5zbW9vdGggOiB0aGlzLnNtb290aCApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cFN0YXJ0IDogKCBwcmV2aW91cyAhPT0gdW5kZWZpbmVkID8gcHJldmlvdXMuZ3JvdXBFbmQgOiAwICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwRW5kICAgOiAtMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBDb3VudCA6IC0xLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0ZWQgIDogZmFsc2UsXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lIDogZnVuY3Rpb24oIGluZGV4ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsb25lZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCAgICAgIDogKCB0eXBlb2YgaW5kZXggPT09ICdudW1iZXInID8gaW5kZXggOiB0aGlzLmluZGV4ICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSAgICAgICA6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdGxsaWIgICAgIDogdGhpcy5tdGxsaWIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc21vb3RoICAgICA6IHRoaXMuc21vb3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwU3RhcnQgOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwRW5kICAgOiAtMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cENvdW50IDogLTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5oZXJpdGVkICA6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVkLmNsb25lID0gdGhpcy5jbG9uZS5iaW5kKGNsb25lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGVyaWFscy5wdXNoKCBtYXRlcmlhbCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRlcmlhbDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TWF0ZXJpYWwgOiBmdW5jdGlvbigpIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMubWF0ZXJpYWxzLmxlbmd0aCA+IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1hdGVyaWFsc1sgdGhpcy5tYXRlcmlhbHMubGVuZ3RoIC0gMSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIF9maW5hbGl6ZSA6IGZ1bmN0aW9uKCBlbmQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RNdWx0aU1hdGVyaWFsID0gdGhpcy5jdXJyZW50TWF0ZXJpYWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGxhc3RNdWx0aU1hdGVyaWFsICYmIGxhc3RNdWx0aU1hdGVyaWFsLmdyb3VwRW5kID09PSAtMSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdE11bHRpTWF0ZXJpYWwuZ3JvdXBFbmQgPSB0aGlzLmdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aCAvIDM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNdWx0aU1hdGVyaWFsLmdyb3VwQ291bnQgPSBsYXN0TXVsdGlNYXRlcmlhbC5ncm91cEVuZCAtIGxhc3RNdWx0aU1hdGVyaWFsLmdyb3VwU3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RNdWx0aU1hdGVyaWFsLmluaGVyaXRlZCA9IGZhbHNlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZ25vcmUgb2JqZWN0cyB0YWlsIG1hdGVyaWFscyBpZiBubyBmYWNlIGRlY2xhcmF0aW9ucyBmb2xsb3dlZCB0aGVtIGJlZm9yZSBhIG5ldyBvL2cgc3RhcnRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGVuZCAmJiB0aGlzLm1hdGVyaWFscy5sZW5ndGggPiAxICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgbWkgPSB0aGlzLm1hdGVyaWFscy5sZW5ndGggLSAxOyBtaSA+PSAwOyBtaS0tICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzLm1hdGVyaWFsc1ttaV0uZ3JvdXBDb3VudCA8PSAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxzLnNwbGljZSggbWksIDEgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHdWFyYW50ZWUgYXQgbGVhc3Qgb25lIGVtcHR5IG1hdGVyaWFsLCB0aGlzIG1ha2VzIHRoZSBjcmVhdGlvbiBsYXRlciBtb3JlIHN0cmFpZ2h0IGZvcndhcmQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBlbmQgJiYgdGhpcy5tYXRlcmlhbHMubGVuZ3RoID09PSAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGVyaWFscy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgICA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc21vb3RoIDogdGhpcy5zbW9vdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsYXN0TXVsdGlNYXRlcmlhbDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gSW5oZXJpdCBwcmV2aW91cyBvYmplY3RzIG1hdGVyaWFsLlxuICAgICAgICAgICAgICAgICAgICAvLyBTcGVjIHRlbGxzIHVzIHRoYXQgYSBkZWNsYXJlZCBtYXRlcmlhbCBtdXN0IGJlIHNldCB0byBhbGwgb2JqZWN0cyB1bnRpbCBhIG5ldyBtYXRlcmlhbCBpcyBkZWNsYXJlZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgYSB1c2VtdGwgZGVjbGFyYXRpb24gaXMgZW5jb3VudGVyZWQgd2hpbGUgdGhpcyBuZXcgb2JqZWN0IGlzIGJlaW5nIHBhcnNlZCwgaXQgd2lsbFxuICAgICAgICAgICAgICAgICAgICAvLyBvdmVyd3JpdGUgdGhlIGluaGVyaXRlZCBtYXRlcmlhbC4gRXhjZXB0aW9uIGJlaW5nIHRoYXQgdGhlcmUgd2FzIGFscmVhZHkgZmFjZSBkZWNsYXJhdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gdGhlIGluaGVyaXRlZCBtYXRlcmlhbCwgdGhlbiBpdCB3aWxsIGJlIHByZXNlcnZlZCBmb3IgcHJvcGVyIE11bHRpTWF0ZXJpYWwgY29udGludWF0aW9uLlxuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIHByZXZpb3VzTWF0ZXJpYWwgJiYgcHJldmlvdXNNYXRlcmlhbC5uYW1lICYmIHR5cGVvZiBwcmV2aW91c01hdGVyaWFsLmNsb25lID09PSBcImZ1bmN0aW9uXCIgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVjbGFyZWQgPSBwcmV2aW91c01hdGVyaWFsLmNsb25lKCAwICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNsYXJlZC5pbmhlcml0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vYmplY3QubWF0ZXJpYWxzLnB1c2goIGRlY2xhcmVkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vYmplY3RzLnB1c2goIHRoaXMub2JqZWN0ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICBmaW5hbGl6ZSA6IGZ1bmN0aW9uKCkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMub2JqZWN0ICYmIHR5cGVvZiB0aGlzLm9iamVjdC5fZmluYWxpemUgPT09ICdmdW5jdGlvbicgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9iamVjdC5fZmluYWxpemUoIHRydWUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAgICAgcGFyc2VWZXJ0ZXhJbmRleDogZnVuY3Rpb24gKCB2YWx1ZSwgbGVuICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludCggdmFsdWUsIDEwICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoIGluZGV4ID49IDAgPyBpbmRleCAtIDEgOiBpbmRleCArIGxlbiAvIDMgKSAqIDM7XG4gICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICBwYXJzZU5vcm1hbEluZGV4OiBmdW5jdGlvbiAoIHZhbHVlLCBsZW4gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHBhcnNlSW50KCB2YWx1ZSwgMTAgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICggaW5kZXggPj0gMCA/IGluZGV4IC0gMSA6IGluZGV4ICsgbGVuIC8gMyApICogMztcbiAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgIHBhcnNlVVZJbmRleDogZnVuY3Rpb24gKCB2YWx1ZSwgbGVuICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludCggdmFsdWUsIDEwICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoIGluZGV4ID49IDAgPyBpbmRleCAtIDEgOiBpbmRleCArIGxlbiAvIDIgKSAqIDI7XG4gICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICBhZGRWZXJ0ZXg6IGZ1bmN0aW9uICggYSwgYiwgYyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNyYyA9IHRoaXMudmVydGljZXM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS52ZXJ0aWNlcztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYSArIDAgXSApO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBhICsgMSBdICk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGEgKyAyIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYiArIDAgXSApO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBiICsgMSBdICk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGIgKyAyIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYyArIDAgXSApO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBjICsgMSBdICk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGMgKyAyIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgIGFkZFZlcnRleExpbmU6IGZ1bmN0aW9uICggYSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNyYyA9IHRoaXMudmVydGljZXM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS52ZXJ0aWNlcztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYSArIDAgXSApO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBhICsgMSBdICk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGEgKyAyIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgIGFkZE5vcm1hbCA6IGZ1bmN0aW9uICggYSwgYiwgYyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNyYyA9IHRoaXMubm9ybWFscztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRzdCA9IHRoaXMub2JqZWN0Lmdlb21ldHJ5Lm5vcm1hbHM7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGEgKyAwIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYSArIDEgXSApO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBhICsgMiBdICk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGIgKyAwIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYiArIDEgXSApO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBiICsgMiBdICk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGMgKyAwIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYyArIDEgXSApO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBjICsgMiBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICBhZGRVVjogZnVuY3Rpb24gKCBhLCBiLCBjICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc3JjID0gdGhpcy51dnM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkc3QgPSB0aGlzLm9iamVjdC5nZW9tZXRyeS51dnM7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGEgKyAwIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYSArIDEgXSApO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBiICsgMCBdICk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGIgKyAxIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgZHN0LnB1c2goIHNyY1sgYyArIDAgXSApO1xuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBjICsgMSBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICBhZGRVVkxpbmU6IGZ1bmN0aW9uICggYSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNyYyA9IHRoaXMudXZzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZHN0ID0gdGhpcy5vYmplY3QuZ2VvbWV0cnkudXZzO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBkc3QucHVzaCggc3JjWyBhICsgMCBdICk7XG4gICAgICAgICAgICAgICAgICAgIGRzdC5wdXNoKCBzcmNbIGEgKyAxIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgIGFkZEZhY2U6IGZ1bmN0aW9uICggYSwgYiwgYywgZCwgdWEsIHViLCB1YywgdWQsIG5hLCBuYiwgbmMsIG5kICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgdkxlbiA9IHRoaXMudmVydGljZXMubGVuZ3RoO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgaWEgPSB0aGlzLnBhcnNlVmVydGV4SW5kZXgoIGEsIHZMZW4gKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGliID0gdGhpcy5wYXJzZVZlcnRleEluZGV4KCBiLCB2TGVuICk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpYyA9IHRoaXMucGFyc2VWZXJ0ZXhJbmRleCggYywgdkxlbiApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaWQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggZCA9PT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRWZXJ0ZXgoIGlhLCBpYiwgaWMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gdGhpcy5wYXJzZVZlcnRleEluZGV4KCBkLCB2TGVuICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFZlcnRleCggaWEsIGliLCBpZCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRWZXJ0ZXgoIGliLCBpYywgaWQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIHVhICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXZMZW4gPSB0aGlzLnV2cy5sZW5ndGg7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpYSA9IHRoaXMucGFyc2VVVkluZGV4KCB1YSwgdXZMZW4gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGliID0gdGhpcy5wYXJzZVVWSW5kZXgoIHViLCB1dkxlbiApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWMgPSB0aGlzLnBhcnNlVVZJbmRleCggdWMsIHV2TGVuICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGQgPT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFVWKCBpYSwgaWIsIGljICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gdGhpcy5wYXJzZVVWSW5kZXgoIHVkLCB1dkxlbiApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVVYoIGlhLCBpYiwgaWQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZFVWKCBpYiwgaWMsIGlkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBuYSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm9ybWFscyBhcmUgbWFueSB0aW1lcyB0aGUgc2FtZS4gSWYgc28sIHNraXAgZnVuY3Rpb24gY2FsbCBhbmQgcGFyc2VJbnQuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbkxlbiA9IHRoaXMubm9ybWFscy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpYSA9IHRoaXMucGFyc2VOb3JtYWxJbmRleCggbmEsIG5MZW4gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGliID0gbmEgPT09IG5iID8gaWEgOiB0aGlzLnBhcnNlTm9ybWFsSW5kZXgoIG5iLCBuTGVuICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpYyA9IG5hID09PSBuYyA/IGlhIDogdGhpcy5wYXJzZU5vcm1hbEluZGV4KCBuYywgbkxlbiApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBkID09PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGROb3JtYWwoIGlhLCBpYiwgaWMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQgPSB0aGlzLnBhcnNlTm9ybWFsSW5kZXgoIG5kLCBuTGVuICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGROb3JtYWwoIGlhLCBpYiwgaWQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZE5vcm1hbCggaWIsIGljLCBpZCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICBhZGRMaW5lR2VvbWV0cnk6IGZ1bmN0aW9uICggdmVydGljZXMsIHV2cyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vYmplY3QuZ2VvbWV0cnkudHlwZSA9ICdMaW5lJztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZMZW4gPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHV2TGVuID0gdGhpcy51dnMubGVuZ3RoO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgdmkgPSAwLCBsID0gdmVydGljZXMubGVuZ3RoOyB2aSA8IGw7IHZpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRWZXJ0ZXhMaW5lKCB0aGlzLnBhcnNlVmVydGV4SW5kZXgoIHZlcnRpY2VzWyB2aSBdLCB2TGVuICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgdXZpID0gMCwgbCA9IHV2cy5sZW5ndGg7IHV2aSA8IGw7IHV2aSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVVZMaW5lKCB0aGlzLnBhcnNlVVZJbmRleCggdXZzWyB1dmkgXSwgdXZMZW4gKSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgIHN0YXRlLnN0YXJ0T2JqZWN0KCAnJywgZmFsc2UgKTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICBcbiAgICAgICAgfSxcbiAgICBcbiAgICAgICAgcGFyc2U6IGZ1bmN0aW9uICggdGV4dCApIHtcbiAgICBcbiAgICAgICAgICAgIGNvbnNvbGUudGltZSggJ09CSkxvYWRlcicgKTtcbiAgICBcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuX2NyZWF0ZVBhcnNlclN0YXRlKCk7XG4gICAgXG4gICAgICAgICAgICBpZiAoIHRleHQuaW5kZXhPZiggJ1xcclxcbicgKSAhPT0gLSAxICkge1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgZmFzdGVyIHRoYW4gU3RyaW5nLnNwbGl0IHdpdGggcmVnZXggdGhhdCBzcGxpdHMgb24gYm90aFxuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoIC9cXHJcXG4vZywgJ1xcbicgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmICggdGV4dC5pbmRleE9mKCAnXFxcXFxcbicgKSAhPT0gLSAxKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gam9pbiBsaW5lcyBzZXBhcmF0ZWQgYnkgYSBsaW5lIGNvbnRpbnVhdGlvbiBjaGFyYWN0ZXIgKFxcKVxuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoIC9cXFxcXFxuL2csICcnICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB2YXIgbGluZXMgPSB0ZXh0LnNwbGl0KCAnXFxuJyApO1xuICAgICAgICAgICAgdmFyIGxpbmUgPSAnJywgbGluZUZpcnN0Q2hhciA9ICcnLCBsaW5lU2Vjb25kQ2hhciA9ICcnO1xuICAgICAgICAgICAgdmFyIGxpbmVMZW5ndGggPSAwO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIFxuICAgICAgICAgICAgLy8gRmFzdGVyIHRvIGp1c3QgdHJpbSBsZWZ0IHNpZGUgb2YgdGhlIGxpbmUuIFVzZSBpZiBhdmFpbGFibGUuXG4gICAgICAgICAgICB2YXIgdHJpbUxlZnQgPSAoIHR5cGVvZiAnJy50cmltTGVmdCA9PT0gJ2Z1bmN0aW9uJyApO1xuICAgIFxuICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0gbGluZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBsaW5lID0gbGluZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICBsaW5lID0gdHJpbUxlZnQgPyBsaW5lLnRyaW1MZWZ0KCkgOiBsaW5lLnRyaW0oKTtcbiAgICBcbiAgICAgICAgICAgICAgICBsaW5lTGVuZ3RoID0gbGluZS5sZW5ndGg7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBsaW5lTGVuZ3RoID09PSAwICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgbGluZUZpcnN0Q2hhciA9IGxpbmUuY2hhckF0KCAwICk7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gQHRvZG8gaW52b2tlIHBhc3NlZCBpbiBoYW5kbGVyIGlmIGFueVxuICAgICAgICAgICAgICAgIGlmICggbGluZUZpcnN0Q2hhciA9PT0gJyMnICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBsaW5lRmlyc3RDaGFyID09PSAndicgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGxpbmVTZWNvbmRDaGFyID0gbGluZS5jaGFyQXQoIDEgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBsaW5lU2Vjb25kQ2hhciA9PT0gJyAnICYmICggcmVzdWx0ID0gdGhpcy5yZWdleHAudmVydGV4X3BhdHRlcm4uZXhlYyggbGluZSApICkgIT09IG51bGwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAwICAgICAgICAgICAgICAgICAgMSAgICAgIDIgICAgICAzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBbXCJ2IDEuMCAyLjAgMy4wXCIsIFwiMS4wXCIsIFwiMi4wXCIsIFwiMy4wXCJdXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS52ZXJ0aWNlcy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQoIHJlc3VsdFsgMSBdICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCggcmVzdWx0WyAyIF0gKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KCByZXN1bHRbIDMgXSApXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBsaW5lU2Vjb25kQ2hhciA9PT0gJ24nICYmICggcmVzdWx0ID0gdGhpcy5yZWdleHAubm9ybWFsX3BhdHRlcm4uZXhlYyggbGluZSApICkgIT09IG51bGwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAwICAgICAgICAgICAgICAgICAgIDEgICAgICAyICAgICAgM1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gW1widm4gMS4wIDIuMCAzLjBcIiwgXCIxLjBcIiwgXCIyLjBcIiwgXCIzLjBcIl1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLm5vcm1hbHMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KCByZXN1bHRbIDEgXSApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQoIHJlc3VsdFsgMiBdICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCggcmVzdWx0WyAzIF0gKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggbGluZVNlY29uZENoYXIgPT09ICd0JyAmJiAoIHJlc3VsdCA9IHRoaXMucmVnZXhwLnV2X3BhdHRlcm4uZXhlYyggbGluZSApICkgIT09IG51bGwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAwICAgICAgICAgICAgICAgMSAgICAgIDJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFtcInZ0IDAuMSAwLjJcIiwgXCIwLjFcIiwgXCIwLjJcIl1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnV2cy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQoIHJlc3VsdFsgMSBdICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdCggcmVzdWx0WyAyIF0gKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggXCJVbmV4cGVjdGVkIHZlcnRleC9ub3JtYWwvdXYgbGluZTogJ1wiICsgbGluZSAgKyBcIidcIiApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggbGluZUZpcnN0Q2hhciA9PT0gXCJmXCIgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggKCByZXN1bHQgPSB0aGlzLnJlZ2V4cC5mYWNlX3ZlcnRleF91dl9ub3JtYWwuZXhlYyggbGluZSApICkgIT09IG51bGwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmIHZlcnRleC91di9ub3JtYWwgdmVydGV4L3V2L25vcm1hbCB2ZXJ0ZXgvdXYvbm9ybWFsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAwICAgICAgICAgICAgICAgICAgICAgICAgMSAgICAyICAgIDMgICAgNCAgICA1ICAgIDYgICAgNyAgICA4ICAgIDkgICAxMCAgICAgICAgIDExICAgICAgICAgMTJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFtcImYgMS8xLzEgMi8yLzIgMy8zLzNcIiwgXCIxXCIsIFwiMVwiLCBcIjFcIiwgXCIyXCIsIFwiMlwiLCBcIjJcIiwgXCIzXCIsIFwiM1wiLCBcIjNcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmFkZEZhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0WyAxIF0sIHJlc3VsdFsgNCBdLCByZXN1bHRbIDcgXSwgcmVzdWx0WyAxMCBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFsgMiBdLCByZXN1bHRbIDUgXSwgcmVzdWx0WyA4IF0sIHJlc3VsdFsgMTEgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbIDMgXSwgcmVzdWx0WyA2IF0sIHJlc3VsdFsgOSBdLCByZXN1bHRbIDEyIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoICggcmVzdWx0ID0gdGhpcy5yZWdleHAuZmFjZV92ZXJ0ZXhfdXYuZXhlYyggbGluZSApICkgIT09IG51bGwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmIHZlcnRleC91diB2ZXJ0ZXgvdXYgdmVydGV4L3V2XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAwICAgICAgICAgICAgICAgICAgMSAgICAyICAgIDMgICAgNCAgICA1ICAgIDYgICA3ICAgICAgICAgIDhcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFtcImYgMS8xIDIvMiAzLzNcIiwgXCIxXCIsIFwiMVwiLCBcIjJcIiwgXCIyXCIsIFwiM1wiLCBcIjNcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5hZGRGYWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFsgMSBdLCByZXN1bHRbIDMgXSwgcmVzdWx0WyA1IF0sIHJlc3VsdFsgNyBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFsgMiBdLCByZXN1bHRbIDQgXSwgcmVzdWx0WyA2IF0sIHJlc3VsdFsgOCBdXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAoIHJlc3VsdCA9IHRoaXMucmVnZXhwLmZhY2VfdmVydGV4X25vcm1hbC5leGVjKCBsaW5lICkgKSAhPT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGYgdmVydGV4Ly9ub3JtYWwgdmVydGV4Ly9ub3JtYWwgdmVydGV4Ly9ub3JtYWxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDAgICAgICAgICAgICAgICAgICAgICAxICAgIDIgICAgMyAgICA0ICAgIDUgICAgNiAgIDcgICAgICAgICAgOFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gW1wiZiAxLy8xIDIvLzIgMy8vM1wiLCBcIjFcIiwgXCIxXCIsIFwiMlwiLCBcIjJcIiwgXCIzXCIsIFwiM1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLmFkZEZhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0WyAxIF0sIHJlc3VsdFsgMyBdLCByZXN1bHRbIDUgXSwgcmVzdWx0WyA3IF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFsgMiBdLCByZXN1bHRbIDQgXSwgcmVzdWx0WyA2IF0sIHJlc3VsdFsgOCBdXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAoIHJlc3VsdCA9IHRoaXMucmVnZXhwLmZhY2VfdmVydGV4LmV4ZWMoIGxpbmUgKSApICE9PSBudWxsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZiB2ZXJ0ZXggdmVydGV4IHZlcnRleFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMCAgICAgICAgICAgIDEgICAgMiAgICAzICAgNFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gW1wiZiAxIDIgM1wiLCBcIjFcIiwgXCIyXCIsIFwiM1wiLCB1bmRlZmluZWRdXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5hZGRGYWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFsgMSBdLCByZXN1bHRbIDIgXSwgcmVzdWx0WyAzIF0sIHJlc3VsdFsgNCBdXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCBcIlVuZXhwZWN0ZWQgZmFjZSBsaW5lOiAnXCIgKyBsaW5lICArIFwiJ1wiICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBsaW5lRmlyc3RDaGFyID09PSBcImxcIiApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmVQYXJ0cyA9IGxpbmUuc3Vic3RyaW5nKCAxICkudHJpbSgpLnNwbGl0KCBcIiBcIiApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGluZVZlcnRpY2VzID0gW10sIGxpbmVVVnMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBsaW5lLmluZGV4T2YoIFwiL1wiICkgPT09IC0gMSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVWZXJ0aWNlcyA9IGxpbmVQYXJ0cztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBsaSA9IDAsIGxsZW4gPSBsaW5lUGFydHMubGVuZ3RoOyBsaSA8IGxsZW47IGxpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0cyA9IGxpbmVQYXJ0c1sgbGkgXS5zcGxpdCggXCIvXCIgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHBhcnRzWyAwIF0gIT09IFwiXCIgKSBsaW5lVmVydGljZXMucHVzaCggcGFydHNbIDAgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcGFydHNbIDEgXSAhPT0gXCJcIiApIGxpbmVVVnMucHVzaCggcGFydHNbIDEgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmFkZExpbmVHZW9tZXRyeSggbGluZVZlcnRpY2VzLCBsaW5lVVZzICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggKCByZXN1bHQgPSB0aGlzLnJlZ2V4cC5vYmplY3RfcGF0dGVybi5leGVjKCBsaW5lICkgKSAhPT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gbyBvYmplY3RfbmFtZVxuICAgICAgICAgICAgICAgICAgICAvLyBvclxuICAgICAgICAgICAgICAgICAgICAvLyBnIGdyb3VwX25hbWVcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gV09SS0FST1VORDogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Mjg2OVxuICAgICAgICAgICAgICAgICAgICAvLyB2YXIgbmFtZSA9IHJlc3VsdFsgMCBdLnN1YnN0ciggMSApLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSAoIFwiIFwiICsgcmVzdWx0WyAwIF0uc3Vic3RyKCAxICkudHJpbSgpICkuc3Vic3RyKCAxICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnN0YXJ0T2JqZWN0KCBuYW1lICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggdGhpcy5yZWdleHAubWF0ZXJpYWxfdXNlX3BhdHRlcm4udGVzdCggbGluZSApICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBtYXRlcmlhbFxuICAgIFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5vYmplY3Quc3RhcnRNYXRlcmlhbCggbGluZS5zdWJzdHJpbmcoIDcgKS50cmltKCksIHN0YXRlLm1hdGVyaWFsTGlicmFyaWVzICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggdGhpcy5yZWdleHAubWF0ZXJpYWxfbGlicmFyeV9wYXR0ZXJuLnRlc3QoIGxpbmUgKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gbXRsIGZpbGVcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUubWF0ZXJpYWxMaWJyYXJpZXMucHVzaCggbGluZS5zdWJzdHJpbmcoIDcgKS50cmltKCkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAoIHJlc3VsdCA9IHRoaXMucmVnZXhwLnNtb290aGluZ19wYXR0ZXJuLmV4ZWMoIGxpbmUgKSApICE9PSBudWxsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBzbW9vdGggc2hhZGluZ1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBAdG9kbyBIYW5kbGUgZmlsZXMgdGhhdCBoYXZlIHZhcnlpbmcgc21vb3RoIHZhbHVlcyBmb3IgYSBzZXQgb2YgZmFjZXMgaW5zaWRlIG9uZSBnZW9tZXRyeSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGRvZXMgbm90IGRlZmluZSBhIHVzZW10bCBmb3IgZWFjaCBmYWNlIHNldC5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBzaG91bGQgYmUgZGV0ZWN0ZWQgYW5kIGEgZHVtbXkgbWF0ZXJpYWwgY3JlYXRlZCAobGF0ZXIgTXVsdGlNYXRlcmlhbCBhbmQgZ2VvbWV0cnkgZ3JvdXBzKS5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyByZXF1aXJlcyBzb21lIGNhcmUgdG8gbm90IGNyZWF0ZSBleHRyYSBtYXRlcmlhbCBvbiBlYWNoIHNtb290aCB2YWx1ZSBmb3IgXCJub3JtYWxcIiBvYmogZmlsZXMuXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZXJlIGV4cGxpY2l0IHVzZW10bCBkZWZpbmVzIGdlb21ldHJ5IGdyb3Vwcy5cbiAgICAgICAgICAgICAgICAgICAgLy8gRXhhbXBsZSBhc3NldDogZXhhbXBsZXMvbW9kZWxzL29iai9jZXJiZXJ1cy9DZXJiZXJ1cy5vYmpcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0WyAxIF0udHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLm9iamVjdC5zbW9vdGggPSAoIHZhbHVlID09PSAnMScgfHwgdmFsdWUgPT09ICdvbicgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGVyaWFsID0gc3RhdGUub2JqZWN0LmN1cnJlbnRNYXRlcmlhbCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIG1hdGVyaWFsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuc21vb3RoID0gc3RhdGUub2JqZWN0LnNtb290aDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBudWxsIHRlcm1pbmF0ZWQgZmlsZXMgd2l0aG91dCBleGNlcHRpb25cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBsaW5lID09PSAnXFwwJyApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIFwiVW5leHBlY3RlZCBsaW5lOiAnXCIgKyBsaW5lICArIFwiJ1wiICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgc3RhdGUuZmluYWxpemUoKTtcbiAgICBcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBuZXcgVEhSRUUuR3JvdXAoKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5tYXRlcmlhbExpYnJhcmllcyA9IFtdLmNvbmNhdCggc3RhdGUubWF0ZXJpYWxMaWJyYXJpZXMgKTtcbiAgICBcbiAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHN0YXRlLm9iamVjdHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgb2JqZWN0ID0gc3RhdGUub2JqZWN0c1sgaSBdO1xuICAgICAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcbiAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWxzID0gb2JqZWN0Lm1hdGVyaWFscztcbiAgICAgICAgICAgICAgICB2YXIgaXNMaW5lID0gKCBnZW9tZXRyeS50eXBlID09PSAnTGluZScgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBTa2lwIG8vZyBsaW5lIGRlY2xhcmF0aW9ucyB0aGF0IGRpZCBub3QgZm9sbG93IHdpdGggYW55IGZhY2VzXG4gICAgICAgICAgICAgICAgaWYgKCBnZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGggPT09IDAgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKTtcbiAgICBcbiAgICAgICAgICAgICAgICBidWZmZXJnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIGdlb21ldHJ5LnZlcnRpY2VzICksIDMgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggZ2VvbWV0cnkubm9ybWFscy5sZW5ndGggPiAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBidWZmZXJnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCBnZW9tZXRyeS5ub3JtYWxzICksIDMgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlcmdlb21ldHJ5LmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggZ2VvbWV0cnkudXZzLmxlbmd0aCA+IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlcmdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3V2JywgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkudXZzICksIDIgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgbWF0ZXJpYWxzXG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGNyZWF0ZWRNYXRlcmlhbHMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgbWkgPSAwLCBtaUxlbiA9IG1hdGVyaWFscy5sZW5ndGg7IG1pIDwgbWlMZW4gOyBtaSsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc291cmNlTWF0ZXJpYWwgPSBtYXRlcmlhbHNbbWldO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSB1bmRlZmluZWQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5tYXRlcmlhbHMgIT09IG51bGwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWxzLmNyZWF0ZSggc291cmNlTWF0ZXJpYWwubmFtZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbXRsIGV0Yy4gbG9hZGVycyBwcm9iYWJseSBjYW4ndCBjcmVhdGUgbGluZSBtYXRlcmlhbHMgY29ycmVjdGx5LCBjb3B5IHByb3BlcnRpZXMgdG8gYSBsaW5lIG1hdGVyaWFsLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBpc0xpbmUgJiYgbWF0ZXJpYWwgJiYgISAoIG1hdGVyaWFsIGluc3RhbmNlb2YgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwgKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWxMaW5lID0gbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxMaW5lLmNvcHkoIG1hdGVyaWFsICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBtYXRlcmlhbExpbmU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAhIG1hdGVyaWFsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSAoICEgaXNMaW5lID8gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKCkgOiBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwubmFtZSA9IHNvdXJjZU1hdGVyaWFsLm5hbWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuc2hhZGluZyA9IHNvdXJjZU1hdGVyaWFsLnNtb290aCA/IFRIUkVFLlNtb290aFNoYWRpbmcgOiBUSFJFRS5GbGF0U2hhZGluZztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlZE1hdGVyaWFscy5wdXNoKG1hdGVyaWFsKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIG1lc2hcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbWVzaDtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGNyZWF0ZWRNYXRlcmlhbHMubGVuZ3RoID4gMSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIG1pID0gMCwgbWlMZW4gPSBtYXRlcmlhbHMubGVuZ3RoOyBtaSA8IG1pTGVuIDsgbWkrKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2VNYXRlcmlhbCA9IG1hdGVyaWFsc1ttaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJnZW9tZXRyeS5hZGRHcm91cCggc291cmNlTWF0ZXJpYWwuZ3JvdXBTdGFydCwgc291cmNlTWF0ZXJpYWwuZ3JvdXBDb3VudCwgbWkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBtZXNoID0gKCAhIGlzTGluZSA/IG5ldyBUSFJFRS5NZXNoKCBidWZmZXJnZW9tZXRyeSwgY3JlYXRlZE1hdGVyaWFscyApIDogbmV3IFRIUkVFLkxpbmVTZWdtZW50cyggYnVmZmVyZ2VvbWV0cnksIGNyZWF0ZWRNYXRlcmlhbHMgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1lc2ggPSAoICEgaXNMaW5lID8gbmV3IFRIUkVFLk1lc2goIGJ1ZmZlcmdlb21ldHJ5LCBjcmVhdGVkTWF0ZXJpYWxzWyAwIF0gKSA6IG5ldyBUSFJFRS5MaW5lU2VnbWVudHMoIGJ1ZmZlcmdlb21ldHJ5LCBjcmVhdGVkTWF0ZXJpYWxzWyAwIF0gKSApO1xuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBtZXNoLm5hbWUgPSBvYmplY3QubmFtZTtcbiAgICBcbiAgICAgICAgICAgICAgICBjb250YWluZXIuYWRkKCBtZXNoICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBjb25zb2xlLnRpbWVFbmQoICdPQkpMb2FkZXInICk7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgfTsgICAgIiwiLyoqXG4gKiBMb2FkcyBhIFdhdmVmcm9udCAubXRsIGZpbGUgc3BlY2lmeWluZyBtYXRlcmlhbHNcbiAqXG4gKiBAYXV0aG9yIGFuZ2VseHVhbmNoYW5nXG4gKi9cblxuVEhSRUUuTVRMTG9hZGVyID0gZnVuY3Rpb24gKCBtYW5hZ2VyICkge1xuXG5cdHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogVEhSRUUuRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuXG59O1xuXG5USFJFRS5NVExMb2FkZXIucHJvdG90eXBlID0ge1xuXG5cdGNvbnN0cnVjdG9yOiBUSFJFRS5NVExMb2FkZXIsXG5cblx0LyoqXG5cdCAqIExvYWRzIGFuZCBwYXJzZXMgYSBNVEwgYXNzZXQgZnJvbSBhIFVSTC5cblx0ICpcblx0ICogQHBhcmFtIHtTdHJpbmd9IHVybCAtIFVSTCB0byB0aGUgTVRMIGZpbGUuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IFtvbkxvYWRdIC0gQ2FsbGJhY2sgaW52b2tlZCB3aXRoIHRoZSBsb2FkZWQgb2JqZWN0LlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb25Qcm9ncmVzc10gLSBDYWxsYmFjayBmb3IgZG93bmxvYWQgcHJvZ3Jlc3MuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IFtvbkVycm9yXSAtIENhbGxiYWNrIGZvciBkb3dubG9hZCBlcnJvcnMuXG5cdCAqXG5cdCAqIEBzZWUgc2V0UGF0aCBzZXRUZXh0dXJlUGF0aFxuXHQgKlxuXHQgKiBAbm90ZSBJbiBvcmRlciBmb3IgcmVsYXRpdmUgdGV4dHVyZSByZWZlcmVuY2VzIHRvIHJlc29sdmUgY29ycmVjdGx5XG5cdCAqIHlvdSBtdXN0IGNhbGwgc2V0UGF0aCBhbmQvb3Igc2V0VGV4dHVyZVBhdGggZXhwbGljaXRseSBwcmlvciB0byBsb2FkLlxuXHQgKi9cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR2YXIgbG9hZGVyID0gbmV3IFRIUkVFLkZpbGVMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIHRleHQgKSB7XG5cblx0XHRcdG9uTG9hZCggc2NvcGUucGFyc2UoIHRleHQgKSApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH0sXG5cblx0LyoqXG5cdCAqIFNldCBiYXNlIHBhdGggZm9yIHJlc29sdmluZyByZWZlcmVuY2VzLlxuXHQgKiBJZiBzZXQgdGhpcyBwYXRoIHdpbGwgYmUgcHJlcGVuZGVkIHRvIGVhY2ggbG9hZGVkIGFuZCBmb3VuZCByZWZlcmVuY2UuXG5cdCAqXG5cdCAqIEBzZWUgc2V0VGV4dHVyZVBhdGhcblx0ICogQHBhcmFtIHtTdHJpbmd9IHBhdGhcblx0ICpcblx0ICogQGV4YW1wbGVcblx0ICogICAgIG10bExvYWRlci5zZXRQYXRoKCAnYXNzZXRzL29iai8nICk7XG5cdCAqICAgICBtdGxMb2FkZXIubG9hZCggJ215Lm10bCcsIC4uLiApO1xuXHQgKi9cblx0c2V0UGF0aDogZnVuY3Rpb24gKCBwYXRoICkge1xuXG5cdFx0dGhpcy5wYXRoID0gcGF0aDtcblxuXHR9LFxuXG5cdC8qKlxuXHQgKiBTZXQgYmFzZSBwYXRoIGZvciByZXNvbHZpbmcgdGV4dHVyZSByZWZlcmVuY2VzLlxuXHQgKiBJZiBzZXQgdGhpcyBwYXRoIHdpbGwgYmUgcHJlcGVuZGVkIGZvdW5kIHRleHR1cmUgcmVmZXJlbmNlLlxuXHQgKiBJZiBub3Qgc2V0IGFuZCBzZXRQYXRoIGlzLCBpdCB3aWxsIGJlIHVzZWQgYXMgdGV4dHVyZSBiYXNlIHBhdGguXG5cdCAqXG5cdCAqIEBzZWUgc2V0UGF0aFxuXHQgKiBAcGFyYW0ge1N0cmluZ30gcGF0aFxuXHQgKlxuXHQgKiBAZXhhbXBsZVxuXHQgKiAgICAgbXRsTG9hZGVyLnNldFBhdGgoICdhc3NldHMvb2JqLycgKTtcblx0ICogICAgIG10bExvYWRlci5zZXRUZXh0dXJlUGF0aCggJ2Fzc2V0cy90ZXh0dXJlcy8nICk7XG5cdCAqICAgICBtdGxMb2FkZXIubG9hZCggJ215Lm10bCcsIC4uLiApO1xuXHQgKi9cblx0c2V0VGV4dHVyZVBhdGg6IGZ1bmN0aW9uICggcGF0aCApIHtcblxuXHRcdHRoaXMudGV4dHVyZVBhdGggPSBwYXRoO1xuXG5cdH0sXG5cblx0c2V0QmFzZVVybDogZnVuY3Rpb24gKCBwYXRoICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTVRMTG9hZGVyOiAuc2V0QmFzZVVybCgpIGlzIGRlcHJlY2F0ZWQuIFVzZSAuc2V0VGV4dHVyZVBhdGgoIHBhdGggKSBmb3IgdGV4dHVyZSBwYXRoIG9yIC5zZXRQYXRoKCBwYXRoICkgZm9yIGdlbmVyYWwgYmFzZSBwYXRoIGluc3RlYWQuJyApO1xuXG5cdFx0dGhpcy5zZXRUZXh0dXJlUGF0aCggcGF0aCApO1xuXG5cdH0sXG5cblx0c2V0Q3Jvc3NPcmlnaW46IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmNyb3NzT3JpZ2luID0gdmFsdWU7XG5cblx0fSxcblxuXHRzZXRNYXRlcmlhbE9wdGlvbnM6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLm1hdGVyaWFsT3B0aW9ucyA9IHZhbHVlO1xuXG5cdH0sXG5cblx0LyoqXG5cdCAqIFBhcnNlcyBhIE1UTCBmaWxlLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdGV4dCAtIENvbnRlbnQgb2YgTVRMIGZpbGVcblx0ICogQHJldHVybiB7VEhSRUUuTVRMTG9hZGVyLk1hdGVyaWFsQ3JlYXRvcn1cblx0ICpcblx0ICogQHNlZSBzZXRQYXRoIHNldFRleHR1cmVQYXRoXG5cdCAqXG5cdCAqIEBub3RlIEluIG9yZGVyIGZvciByZWxhdGl2ZSB0ZXh0dXJlIHJlZmVyZW5jZXMgdG8gcmVzb2x2ZSBjb3JyZWN0bHlcblx0ICogeW91IG11c3QgY2FsbCBzZXRQYXRoIGFuZC9vciBzZXRUZXh0dXJlUGF0aCBleHBsaWNpdGx5IHByaW9yIHRvIHBhcnNlLlxuXHQgKi9cblx0cGFyc2U6IGZ1bmN0aW9uICggdGV4dCApIHtcblxuXHRcdHZhciBsaW5lcyA9IHRleHQuc3BsaXQoICdcXG4nICk7XG5cdFx0dmFyIGluZm8gPSB7fTtcblx0XHR2YXIgZGVsaW1pdGVyX3BhdHRlcm4gPSAvXFxzKy87XG5cdFx0dmFyIG1hdGVyaWFsc0luZm8gPSB7fTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGxpbmUgPSBsaW5lc1sgaSBdO1xuXHRcdFx0bGluZSA9IGxpbmUudHJpbSgpO1xuXG5cdFx0XHRpZiAoIGxpbmUubGVuZ3RoID09PSAwIHx8IGxpbmUuY2hhckF0KCAwICkgPT09ICcjJyApIHtcblxuXHRcdFx0XHQvLyBCbGFuayBsaW5lIG9yIGNvbW1lbnQgaWdub3JlXG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBwb3MgPSBsaW5lLmluZGV4T2YoICcgJyApO1xuXG5cdFx0XHR2YXIga2V5ID0gKCBwb3MgPj0gMCApID8gbGluZS5zdWJzdHJpbmcoIDAsIHBvcyApIDogbGluZTtcblx0XHRcdGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHR2YXIgdmFsdWUgPSAoIHBvcyA+PSAwICkgPyBsaW5lLnN1YnN0cmluZyggcG9zICsgMSApIDogJyc7XG5cdFx0XHR2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcblxuXHRcdFx0aWYgKCBrZXkgPT09ICduZXdtdGwnICkge1xuXG5cdFx0XHRcdC8vIE5ldyBtYXRlcmlhbFxuXG5cdFx0XHRcdGluZm8gPSB7IG5hbWU6IHZhbHVlIH07XG5cdFx0XHRcdG1hdGVyaWFsc0luZm9bIHZhbHVlIF0gPSBpbmZvO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBpbmZvICkge1xuXG5cdFx0XHRcdGlmICgga2V5ID09PSAna2EnIHx8IGtleSA9PT0gJ2tkJyB8fCBrZXkgPT09ICdrcycgKSB7XG5cblx0XHRcdFx0XHR2YXIgc3MgPSB2YWx1ZS5zcGxpdCggZGVsaW1pdGVyX3BhdHRlcm4sIDMgKTtcblx0XHRcdFx0XHRpbmZvWyBrZXkgXSA9IFsgcGFyc2VGbG9hdCggc3NbIDAgXSApLCBwYXJzZUZsb2F0KCBzc1sgMSBdICksIHBhcnNlRmxvYXQoIHNzWyAyIF0gKSBdO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpbmZvWyBrZXkgXSA9IHZhbHVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIG1hdGVyaWFsQ3JlYXRvciA9IG5ldyBUSFJFRS5NVExMb2FkZXIuTWF0ZXJpYWxDcmVhdG9yKCB0aGlzLnRleHR1cmVQYXRoIHx8IHRoaXMucGF0aCwgdGhpcy5tYXRlcmlhbE9wdGlvbnMgKTtcblx0XHRtYXRlcmlhbENyZWF0b3Iuc2V0Q3Jvc3NPcmlnaW4oIHRoaXMuY3Jvc3NPcmlnaW4gKTtcblx0XHRtYXRlcmlhbENyZWF0b3Iuc2V0TWFuYWdlciggdGhpcy5tYW5hZ2VyICk7XG5cdFx0bWF0ZXJpYWxDcmVhdG9yLnNldE1hdGVyaWFscyggbWF0ZXJpYWxzSW5mbyApO1xuXHRcdHJldHVybiBtYXRlcmlhbENyZWF0b3I7XG5cblx0fVxuXG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBUSFJFRS1NVExMb2FkZXIuTWF0ZXJpYWxDcmVhdG9yXG4gKiBAcGFyYW0gYmFzZVVybCAtIFVybCByZWxhdGl2ZSB0byB3aGljaCB0ZXh0dXJlcyBhcmUgbG9hZGVkXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFNldCBvZiBvcHRpb25zIG9uIGhvdyB0byBjb25zdHJ1Y3QgdGhlIG1hdGVyaWFsc1xuICogICAgICAgICAgICAgICAgICBzaWRlOiBXaGljaCBzaWRlIHRvIGFwcGx5IHRoZSBtYXRlcmlhbFxuICogICAgICAgICAgICAgICAgICAgICAgICBUSFJFRS5Gcm9udFNpZGUgKGRlZmF1bHQpLCBUSFJFRS5CYWNrU2lkZSwgVEhSRUUuRG91YmxlU2lkZVxuICogICAgICAgICAgICAgICAgICB3cmFwOiBXaGF0IHR5cGUgb2Ygd3JhcHBpbmcgdG8gYXBwbHkgZm9yIHRleHR1cmVzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIFRIUkVFLlJlcGVhdFdyYXBwaW5nIChkZWZhdWx0KSwgVEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZywgVEhSRUUuTWlycm9yZWRSZXBlYXRXcmFwcGluZ1xuICogICAgICAgICAgICAgICAgICBub3JtYWxpemVSR0I6IFJHQnMgbmVlZCB0byBiZSBub3JtYWxpemVkIHRvIDAtMSBmcm9tIDAtMjU1XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdDogZmFsc2UsIGFzc3VtZWQgdG8gYmUgYWxyZWFkeSBub3JtYWxpemVkXG4gKiAgICAgICAgICAgICAgICAgIGlnbm9yZVplcm9SR0JzOiBJZ25vcmUgdmFsdWVzIG9mIFJHQnMgKEthLEtkLEtzKSB0aGF0IGFyZSBhbGwgMCdzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0OiBmYWxzZVxuICogQGNvbnN0cnVjdG9yXG4gKi9cblxuVEhSRUUuTVRMTG9hZGVyLk1hdGVyaWFsQ3JlYXRvciA9IGZ1bmN0aW9uICggYmFzZVVybCwgb3B0aW9ucyApIHtcblxuXHR0aGlzLmJhc2VVcmwgPSBiYXNlVXJsIHx8ICcnO1xuXHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHR0aGlzLm1hdGVyaWFsc0luZm8gPSB7fTtcblx0dGhpcy5tYXRlcmlhbHMgPSB7fTtcblx0dGhpcy5tYXRlcmlhbHNBcnJheSA9IFtdO1xuXHR0aGlzLm5hbWVMb29rdXAgPSB7fTtcblxuXHR0aGlzLnNpZGUgPSAoIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMuc2lkZSApID8gdGhpcy5vcHRpb25zLnNpZGUgOiBUSFJFRS5Gcm9udFNpZGU7XG5cdHRoaXMud3JhcCA9ICggdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy53cmFwICkgPyB0aGlzLm9wdGlvbnMud3JhcCA6IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xuXG59O1xuXG5USFJFRS5NVExMb2FkZXIuTWF0ZXJpYWxDcmVhdG9yLnByb3RvdHlwZSA9IHtcblxuXHRjb25zdHJ1Y3RvcjogVEhSRUUuTVRMTG9hZGVyLk1hdGVyaWFsQ3JlYXRvcixcblxuXHRjcm9zc09yaWdpbjogJ0Fub255bW91cycsXG5cblx0c2V0Q3Jvc3NPcmlnaW46IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmNyb3NzT3JpZ2luID0gdmFsdWU7XG5cblx0fSxcblxuXHRzZXRNYW5hZ2VyOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5tYW5hZ2VyID0gdmFsdWU7XG5cblx0fSxcblxuXHRzZXRNYXRlcmlhbHM6IGZ1bmN0aW9uICggbWF0ZXJpYWxzSW5mbyApIHtcblxuXHRcdHRoaXMubWF0ZXJpYWxzSW5mbyA9IHRoaXMuY29udmVydCggbWF0ZXJpYWxzSW5mbyApO1xuXHRcdHRoaXMubWF0ZXJpYWxzID0ge307XG5cdFx0dGhpcy5tYXRlcmlhbHNBcnJheSA9IFtdO1xuXHRcdHRoaXMubmFtZUxvb2t1cCA9IHt9O1xuXG5cdH0sXG5cblx0Y29udmVydDogZnVuY3Rpb24gKCBtYXRlcmlhbHNJbmZvICkge1xuXG5cdFx0aWYgKCAhIHRoaXMub3B0aW9ucyApIHJldHVybiBtYXRlcmlhbHNJbmZvO1xuXG5cdFx0dmFyIGNvbnZlcnRlZCA9IHt9O1xuXG5cdFx0Zm9yICggdmFyIG1uIGluIG1hdGVyaWFsc0luZm8gKSB7XG5cblx0XHRcdC8vIENvbnZlcnQgbWF0ZXJpYWxzIGluZm8gaW50byBub3JtYWxpemVkIGZvcm0gYmFzZWQgb24gb3B0aW9uc1xuXG5cdFx0XHR2YXIgbWF0ID0gbWF0ZXJpYWxzSW5mb1sgbW4gXTtcblxuXHRcdFx0dmFyIGNvdm1hdCA9IHt9O1xuXG5cdFx0XHRjb252ZXJ0ZWRbIG1uIF0gPSBjb3ZtYXQ7XG5cblx0XHRcdGZvciAoIHZhciBwcm9wIGluIG1hdCApIHtcblxuXHRcdFx0XHR2YXIgc2F2ZSA9IHRydWU7XG5cdFx0XHRcdHZhciB2YWx1ZSA9IG1hdFsgcHJvcCBdO1xuXHRcdFx0XHR2YXIgbHByb3AgPSBwcm9wLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdFx0c3dpdGNoICggbHByb3AgKSB7XG5cblx0XHRcdFx0XHRjYXNlICdrZCc6XG5cdFx0XHRcdFx0Y2FzZSAna2EnOlxuXHRcdFx0XHRcdGNhc2UgJ2tzJzpcblxuXHRcdFx0XHRcdFx0Ly8gRGlmZnVzZSBjb2xvciAoY29sb3IgdW5kZXIgd2hpdGUgbGlnaHQpIHVzaW5nIFJHQiB2YWx1ZXNcblxuXHRcdFx0XHRcdFx0aWYgKCB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLm5vcm1hbGl6ZVJHQiApIHtcblxuXHRcdFx0XHRcdFx0XHR2YWx1ZSA9IFsgdmFsdWVbIDAgXSAvIDI1NSwgdmFsdWVbIDEgXSAvIDI1NSwgdmFsdWVbIDIgXSAvIDI1NSBdO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICggdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5pZ25vcmVaZXJvUkdCcyApIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHZhbHVlWyAwIF0gPT09IDAgJiYgdmFsdWVbIDEgXSA9PT0gMCAmJiB2YWx1ZVsgMiBdID09PSAwICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gaWdub3JlXG5cblx0XHRcdFx0XHRcdFx0XHRzYXZlID0gZmFsc2U7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2F2ZSApIHtcblxuXHRcdFx0XHRcdGNvdm1hdFsgbHByb3AgXSA9IHZhbHVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbnZlcnRlZDtcblxuXHR9LFxuXG5cdHByZWxvYWQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGZvciAoIHZhciBtbiBpbiB0aGlzLm1hdGVyaWFsc0luZm8gKSB7XG5cblx0XHRcdHRoaXMuY3JlYXRlKCBtbiApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Z2V0SW5kZXg6IGZ1bmN0aW9uICggbWF0ZXJpYWxOYW1lICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubmFtZUxvb2t1cFsgbWF0ZXJpYWxOYW1lIF07XG5cblx0fSxcblxuXHRnZXRBc0FycmF5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgaW5kZXggPSAwO1xuXG5cdFx0Zm9yICggdmFyIG1uIGluIHRoaXMubWF0ZXJpYWxzSW5mbyApIHtcblxuXHRcdFx0dGhpcy5tYXRlcmlhbHNBcnJheVsgaW5kZXggXSA9IHRoaXMuY3JlYXRlKCBtbiApO1xuXHRcdFx0dGhpcy5uYW1lTG9va3VwWyBtbiBdID0gaW5kZXg7XG5cdFx0XHRpbmRleCArKztcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm1hdGVyaWFsc0FycmF5O1xuXG5cdH0sXG5cblx0Y3JlYXRlOiBmdW5jdGlvbiAoIG1hdGVyaWFsTmFtZSApIHtcblxuXHRcdGlmICggdGhpcy5tYXRlcmlhbHNbIG1hdGVyaWFsTmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMuY3JlYXRlTWF0ZXJpYWxfKCBtYXRlcmlhbE5hbWUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm1hdGVyaWFsc1sgbWF0ZXJpYWxOYW1lIF07XG5cblx0fSxcblxuXHRjcmVhdGVNYXRlcmlhbF86IGZ1bmN0aW9uICggbWF0ZXJpYWxOYW1lICkge1xuXG5cdFx0Ly8gQ3JlYXRlIG1hdGVyaWFsXG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXHRcdHZhciBtYXQgPSB0aGlzLm1hdGVyaWFsc0luZm9bIG1hdGVyaWFsTmFtZSBdO1xuXHRcdHZhciBwYXJhbXMgPSB7XG5cblx0XHRcdG5hbWU6IG1hdGVyaWFsTmFtZSxcblx0XHRcdHNpZGU6IHRoaXMuc2lkZVxuXG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIHJlc29sdmVVUkwoIGJhc2VVcmwsIHVybCApIHtcblxuXHRcdFx0aWYgKCB0eXBlb2YgdXJsICE9PSAnc3RyaW5nJyB8fCB1cmwgPT09ICcnIClcblx0XHRcdFx0cmV0dXJuICcnO1xuXG5cdFx0XHQvLyBBYnNvbHV0ZSBVUkxcblx0XHRcdGlmICggL15odHRwcz86XFwvXFwvL2kudGVzdCggdXJsICkgKSByZXR1cm4gdXJsO1xuXG5cdFx0XHRyZXR1cm4gYmFzZVVybCArIHVybDtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHNldE1hcEZvclR5cGUoIG1hcFR5cGUsIHZhbHVlICkge1xuXG5cdFx0XHRpZiAoIHBhcmFtc1sgbWFwVHlwZSBdICkgcmV0dXJuOyAvLyBLZWVwIHRoZSBmaXJzdCBlbmNvdW50ZXJlZCB0ZXh0dXJlXG5cblx0XHRcdHZhciB0ZXhQYXJhbXMgPSBzY29wZS5nZXRUZXh0dXJlUGFyYW1zKCB2YWx1ZSwgcGFyYW1zICk7XG5cdFx0XHR2YXIgbWFwID0gc2NvcGUubG9hZFRleHR1cmUoIHJlc29sdmVVUkwoIHNjb3BlLmJhc2VVcmwsIHRleFBhcmFtcy51cmwgKSApO1xuXG5cdFx0XHRtYXAucmVwZWF0LmNvcHkoIHRleFBhcmFtcy5zY2FsZSApO1xuXHRcdFx0bWFwLm9mZnNldC5jb3B5KCB0ZXhQYXJhbXMub2Zmc2V0ICk7XG5cblx0XHRcdG1hcC53cmFwUyA9IHNjb3BlLndyYXA7XG5cdFx0XHRtYXAud3JhcFQgPSBzY29wZS53cmFwO1xuXG5cdFx0XHRwYXJhbXNbIG1hcFR5cGUgXSA9IG1hcDtcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBwcm9wIGluIG1hdCApIHtcblxuXHRcdFx0dmFyIHZhbHVlID0gbWF0WyBwcm9wIF07XG5cdFx0XHR2YXIgbjtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gJycgKSBjb250aW51ZTtcblxuXHRcdFx0c3dpdGNoICggcHJvcC50b0xvd2VyQ2FzZSgpICkge1xuXG5cdFx0XHRcdC8vIE5zIGlzIG1hdGVyaWFsIHNwZWN1bGFyIGV4cG9uZW50XG5cblx0XHRcdFx0Y2FzZSAna2QnOlxuXG5cdFx0XHRcdFx0Ly8gRGlmZnVzZSBjb2xvciAoY29sb3IgdW5kZXIgd2hpdGUgbGlnaHQpIHVzaW5nIFJHQiB2YWx1ZXNcblxuXHRcdFx0XHRcdHBhcmFtcy5jb2xvciA9IG5ldyBUSFJFRS5Db2xvcigpLmZyb21BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2tzJzpcblxuXHRcdFx0XHRcdC8vIFNwZWN1bGFyIGNvbG9yIChjb2xvciB3aGVuIGxpZ2h0IGlzIHJlZmxlY3RlZCBmcm9tIHNoaW55IHN1cmZhY2UpIHVzaW5nIFJHQiB2YWx1ZXNcblx0XHRcdFx0XHRwYXJhbXMuc3BlY3VsYXIgPSBuZXcgVEhSRUUuQ29sb3IoKS5mcm9tQXJyYXkoIHZhbHVlICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdtYXBfa2QnOlxuXG5cdFx0XHRcdFx0Ly8gRGlmZnVzZSB0ZXh0dXJlIG1hcFxuXG5cdFx0XHRcdFx0c2V0TWFwRm9yVHlwZSggXCJtYXBcIiwgdmFsdWUgKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ21hcF9rcyc6XG5cblx0XHRcdFx0XHQvLyBTcGVjdWxhciBtYXBcblxuXHRcdFx0XHRcdHNldE1hcEZvclR5cGUoIFwic3BlY3VsYXJNYXBcIiwgdmFsdWUgKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ25vcm0nOlxuXG5cdFx0XHRcdFx0c2V0TWFwRm9yVHlwZSggXCJub3JtYWxNYXBcIiwgdmFsdWUgKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ21hcF9idW1wJzpcblx0XHRcdFx0Y2FzZSAnYnVtcCc6XG5cblx0XHRcdFx0XHQvLyBCdW1wIHRleHR1cmUgbWFwXG5cblx0XHRcdFx0XHRzZXRNYXBGb3JUeXBlKCBcImJ1bXBNYXBcIiwgdmFsdWUgKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ25zJzpcblxuXHRcdFx0XHRcdC8vIFRoZSBzcGVjdWxhciBleHBvbmVudCAoZGVmaW5lcyB0aGUgZm9jdXMgb2YgdGhlIHNwZWN1bGFyIGhpZ2hsaWdodClcblx0XHRcdFx0XHQvLyBBIGhpZ2ggZXhwb25lbnQgcmVzdWx0cyBpbiBhIHRpZ2h0LCBjb25jZW50cmF0ZWQgaGlnaGxpZ2h0LiBOcyB2YWx1ZXMgbm9ybWFsbHkgcmFuZ2UgZnJvbSAwIHRvIDEwMDAuXG5cblx0XHRcdFx0XHRwYXJhbXMuc2hpbmluZXNzID0gcGFyc2VGbG9hdCggdmFsdWUgKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2QnOlxuXHRcdFx0XHRcdG4gPSBwYXJzZUZsb2F0KCB2YWx1ZSApO1xuXG5cdFx0XHRcdFx0aWYgKCBuIDwgMSApIHtcblxuXHRcdFx0XHRcdFx0cGFyYW1zLm9wYWNpdHkgPSBuO1xuXHRcdFx0XHRcdFx0cGFyYW1zLnRyYW5zcGFyZW50ID0gdHJ1ZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ3RyJzpcblx0XHRcdFx0XHRuID0gcGFyc2VGbG9hdCggdmFsdWUgKTtcblxuXHRcdFx0XHRcdGlmICggdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5pbnZlcnRUclByb3BlcnR5ICkgbiA9IDEgLSBuO1xuXG5cdFx0XHRcdFx0aWYgKCBuIDwgMSApIHtcblxuXHRcdFx0XHRcdFx0cGFyYW1zLm9wYWNpdHkgPSBuO1xuXHRcdFx0XHRcdFx0cGFyYW1zLnRyYW5zcGFyZW50ID0gdHJ1ZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMubWF0ZXJpYWxzWyBtYXRlcmlhbE5hbWUgXSA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCggcGFyYW1zICk7XG5cdFx0cmV0dXJuIHRoaXMubWF0ZXJpYWxzWyBtYXRlcmlhbE5hbWUgXTtcblxuXHR9LFxuXG5cdGdldFRleHR1cmVQYXJhbXM6IGZ1bmN0aW9uICggdmFsdWUsIG1hdFBhcmFtcyApIHtcblxuXHRcdHZhciB0ZXhQYXJhbXMgPSB7XG5cblx0XHRcdHNjYWxlOiBuZXcgVEhSRUUuVmVjdG9yMiggMSwgMSApLFxuXHRcdFx0b2Zmc2V0OiBuZXcgVEhSRUUuVmVjdG9yMiggMCwgMCApXG5cblx0XHQgfTtcblxuXHRcdHZhciBpdGVtcyA9IHZhbHVlLnNwbGl0KCAvXFxzKy8gKTtcblx0XHR2YXIgcG9zO1xuXG5cdFx0cG9zID0gaXRlbXMuaW5kZXhPZiggJy1ibScgKTtcblxuXHRcdGlmICggcG9zID49IDAgKSB7XG5cblx0XHRcdG1hdFBhcmFtcy5idW1wU2NhbGUgPSBwYXJzZUZsb2F0KCBpdGVtc1sgcG9zICsgMSBdICk7XG5cdFx0XHRpdGVtcy5zcGxpY2UoIHBvcywgMiApO1xuXG5cdFx0fVxuXG5cdFx0cG9zID0gaXRlbXMuaW5kZXhPZiggJy1zJyApO1xuXG5cdFx0aWYgKCBwb3MgPj0gMCApIHtcblxuXHRcdFx0dGV4UGFyYW1zLnNjYWxlLnNldCggcGFyc2VGbG9hdCggaXRlbXNbIHBvcyArIDEgXSApLCBwYXJzZUZsb2F0KCBpdGVtc1sgcG9zICsgMiBdICkgKTtcblx0XHRcdGl0ZW1zLnNwbGljZSggcG9zLCA0ICk7IC8vIHdlIGV4cGVjdCAzIHBhcmFtZXRlcnMgaGVyZSFcblxuXHRcdH1cblxuXHRcdHBvcyA9IGl0ZW1zLmluZGV4T2YoICctbycgKTtcblxuXHRcdGlmICggcG9zID49IDAgKSB7XG5cblx0XHRcdHRleFBhcmFtcy5vZmZzZXQuc2V0KCBwYXJzZUZsb2F0KCBpdGVtc1sgcG9zICsgMSBdICksIHBhcnNlRmxvYXQoIGl0ZW1zWyBwb3MgKyAyIF0gKSApO1xuXHRcdFx0aXRlbXMuc3BsaWNlKCBwb3MsIDQgKTsgLy8gd2UgZXhwZWN0IDMgcGFyYW1ldGVycyBoZXJlIVxuXG5cdFx0fVxuXG5cdFx0dGV4UGFyYW1zLnVybCA9IGl0ZW1zLmpvaW4oICcgJyApLnRyaW0oKTtcblx0XHRyZXR1cm4gdGV4UGFyYW1zO1xuXG5cdH0sXG5cblx0bG9hZFRleHR1cmU6IGZ1bmN0aW9uICggdXJsLCBtYXBwaW5nLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgdGV4dHVyZTtcblx0XHR2YXIgbG9hZGVyID0gVEhSRUUuTG9hZGVyLkhhbmRsZXJzLmdldCggdXJsICk7XG5cdFx0dmFyIG1hbmFnZXIgPSAoIHRoaXMubWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyB0aGlzLm1hbmFnZXIgOiBUSFJFRS5EZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cblx0XHRpZiAoIGxvYWRlciA9PT0gbnVsbCApIHtcblxuXHRcdFx0bG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoIG1hbmFnZXIgKTtcblxuXHRcdH1cblxuXHRcdGlmICggbG9hZGVyLnNldENyb3NzT3JpZ2luICkgbG9hZGVyLnNldENyb3NzT3JpZ2luKCB0aGlzLmNyb3NzT3JpZ2luICk7XG5cdFx0dGV4dHVyZSA9IGxvYWRlci5sb2FkKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdFx0aWYgKCBtYXBwaW5nICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLm1hcHBpbmcgPSBtYXBwaW5nO1xuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fVxuXG59O1xuIiwiLyoqXG4gKiBAYXV0aG9yIFJpY2ggVGliYmV0dCAvIGh0dHBzOi8vZ2l0aHViLmNvbS9yaWNodHJcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIFRvbnkgUGFyaXNpIC8gaHR0cDovL3d3dy50b255cGFyaXNpLmNvbS9cbiAqIEBhdXRob3IgVGFrYWhpcm8gLyBodHRwczovL2dpdGh1Yi5jb20vdGFrYWhpcm94XG4gKiBAYXV0aG9yIERvbiBNY0N1cmR5IC8gaHR0cHM6Ly93d3cuZG9ubWNjdXJkeS5jb21cbiAqL1xuXG5USFJFRS5HTFRGTG9hZGVyID0gKCBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIEdMVEZMb2FkZXIoIG1hbmFnZXIgKSB7XG4gICAgXG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IFRIUkVFLkRlZmF1bHRMb2FkaW5nTWFuYWdlcjtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBHTFRGTG9hZGVyLnByb3RvdHlwZSA9IHtcbiAgICBcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yOiBHTFRGTG9hZGVyLFxuICAgIFxuICAgICAgICAgICAgY3Jvc3NPcmlnaW46ICdBbm9ueW1vdXMnLFxuICAgIFxuICAgICAgICAgICAgbG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgc2NvcGUgPSB0aGlzO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBwYXRoID0gdGhpcy5wYXRoICE9PSB1bmRlZmluZWQgPyB0aGlzLnBhdGggOiBUSFJFRS5Mb2FkZXJVdGlscy5leHRyYWN0VXJsQmFzZSggdXJsICk7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGxvYWRlciA9IG5ldyBUSFJFRS5GaWxlTG9hZGVyKCBzY29wZS5tYW5hZ2VyICk7XG4gICAgXG4gICAgICAgICAgICAgICAgbG9hZGVyLnNldFJlc3BvbnNlVHlwZSggJ2FycmF5YnVmZmVyJyApO1xuICAgIFxuICAgICAgICAgICAgICAgIGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggZGF0YSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnBhcnNlKCBkYXRhLCBwYXRoLCBvbkxvYWQsIG9uRXJyb3IgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoIGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG9uRXJyb3IgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKCBlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgc2V0Q3Jvc3NPcmlnaW46IGZ1bmN0aW9uICggdmFsdWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdGhpcy5jcm9zc09yaWdpbiA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIHNldFBhdGg6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdGhpcy5wYXRoID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgcGFyc2U6IGZ1bmN0aW9uICggZGF0YSwgcGF0aCwgb25Mb2FkLCBvbkVycm9yICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBjb250ZW50O1xuICAgICAgICAgICAgICAgIHZhciBleHRlbnNpb25zID0ge307XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCB0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBkYXRhO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYWdpYyA9IFRIUkVFLkxvYWRlclV0aWxzLmRlY29kZVRleHQoIG5ldyBVaW50OEFycmF5KCBkYXRhLCAwLCA0ICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBtYWdpYyA9PT0gQklOQVJZX0VYVEVOU0lPTl9IRUFERVJfTUFHSUMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0JJTkFSWV9HTFRGIF0gPSBuZXcgR0xURkJpbmFyeUV4dGVuc2lvbiggZGF0YSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoIGVycm9yICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggb25FcnJvciApIG9uRXJyb3IoIGVycm9yICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0JJTkFSWV9HTFRGIF0uY29udGVudDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBUSFJFRS5Mb2FkZXJVdGlscy5kZWNvZGVUZXh0KCBuZXcgVWludDhBcnJheSggZGF0YSApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKCBjb250ZW50ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBqc29uLmFzc2V0ID09PSB1bmRlZmluZWQgfHwganNvbi5hc3NldC52ZXJzaW9uWyAwIF0gPCAyICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIG9uRXJyb3IgKSBvbkVycm9yKCBuZXcgRXJyb3IoICdUSFJFRS5HTFRGTG9hZGVyOiBVbnN1cHBvcnRlZCBhc3NldC4gZ2xURiB2ZXJzaW9ucyA+PTIuMCBhcmUgc3VwcG9ydGVkLiBVc2UgTGVnYWN5R0xURkxvYWRlciBpbnN0ZWFkLicgKSApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICgganNvbi5leHRlbnNpb25zVXNlZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBqc29uLmV4dGVuc2lvbnNVc2VkLmluZGV4T2YoIEVYVEVOU0lPTlMuS0hSX0xJR0hUUyApID49IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9MSUdIVFMgXSA9IG5ldyBHTFRGTGlnaHRzRXh0ZW5zaW9uKCBqc29uICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBqc29uLmV4dGVuc2lvbnNVc2VkLmluZGV4T2YoIEVYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTUyApID49IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfUEJSX1NQRUNVTEFSX0dMT1NTSU5FU1MgXSA9IG5ldyBHTFRGTWF0ZXJpYWxzUGJyU3BlY3VsYXJHbG9zc2luZXNzRXh0ZW5zaW9uKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgY29uc29sZS50aW1lKCAnR0xURkxvYWRlcicgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcGFyc2VyID0gbmV3IEdMVEZQYXJzZXIoIGpzb24sIGV4dGVuc2lvbnMsIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogcGF0aCB8fCB0aGlzLnBhdGggfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIGNyb3NzT3JpZ2luOiB0aGlzLmNyb3NzT3JpZ2luLFxuICAgICAgICAgICAgICAgICAgICBtYW5hZ2VyOiB0aGlzLm1hbmFnZXJcbiAgICBcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgcGFyc2VyLnBhcnNlKCBmdW5jdGlvbiAoIHNjZW5lLCBzY2VuZXMsIGNhbWVyYXMsIGFuaW1hdGlvbnMsIGFzc2V0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLnRpbWVFbmQoICdHTFRGTG9hZGVyJyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgZ2xURiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjZW5lOiBzY2VuZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjZW5lczogc2NlbmVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FtZXJhczogY2FtZXJhcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbnM6IGFuaW1hdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NldDogYXNzZXRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgb25Mb2FkKCBnbFRGICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSwgb25FcnJvciApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvKiBHTFRGUkVHSVNUUlkgKi9cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gR0xURlJlZ2lzdHJ5KCkge1xuICAgIFxuICAgICAgICAgICAgdmFyIG9iamVjdHMgPSB7fTtcbiAgICBcbiAgICAgICAgICAgIHJldHVyblx0e1xuICAgIFxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3RzWyBrZXkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgIGFkZDogZnVuY3Rpb24gKCBrZXksIG9iamVjdCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0c1sga2V5IF0gPSBvYmplY3Q7XG4gICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uICgga2V5ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgb2JqZWN0c1sga2V5IF07XG4gICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICByZW1vdmVBbGw6IGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0cyA9IHt9O1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAgICAgLyoqKioqKioqKiogRVhURU5TSU9OUyAqKioqKioqKioqKi9cbiAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICBcbiAgICAgICAgdmFyIEVYVEVOU0lPTlMgPSB7XG4gICAgICAgICAgICBLSFJfQklOQVJZX0dMVEY6ICdLSFJfYmluYXJ5X2dsVEYnLFxuICAgICAgICAgICAgS0hSX0xJR0hUUzogJ0tIUl9saWdodHMnLFxuICAgICAgICAgICAgS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTUzogJ0tIUl9tYXRlcmlhbHNfcGJyU3BlY3VsYXJHbG9zc2luZXNzJ1xuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogTGlnaHRzIEV4dGVuc2lvblxuICAgICAgICAgKlxuICAgICAgICAgKiBTcGVjaWZpY2F0aW9uOiBQRU5ESU5HXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBHTFRGTGlnaHRzRXh0ZW5zaW9uKCBqc29uICkge1xuICAgIFxuICAgICAgICAgICAgdGhpcy5uYW1lID0gRVhURU5TSU9OUy5LSFJfTElHSFRTO1xuICAgIFxuICAgICAgICAgICAgdGhpcy5saWdodHMgPSB7fTtcbiAgICBcbiAgICAgICAgICAgIHZhciBleHRlbnNpb24gPSAoIGpzb24uZXh0ZW5zaW9ucyAmJiBqc29uLmV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0xJR0hUUyBdICkgfHwge307XG4gICAgICAgICAgICB2YXIgbGlnaHRzID0gZXh0ZW5zaW9uLmxpZ2h0cyB8fCB7fTtcbiAgICBcbiAgICAgICAgICAgIGZvciAoIHZhciBsaWdodElkIGluIGxpZ2h0cyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbGlnaHQgPSBsaWdodHNbIGxpZ2h0SWQgXTtcbiAgICAgICAgICAgICAgICB2YXIgbGlnaHROb2RlO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IG5ldyBUSFJFRS5Db2xvcigpLmZyb21BcnJheSggbGlnaHQuY29sb3IgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKCBsaWdodC50eXBlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdkaXJlY3Rpb25hbCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsaWdodE5vZGUgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCggY29sb3IgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0Tm9kZS5wb3NpdGlvbi5zZXQoIDAsIDAsIDEgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdwb2ludCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsaWdodE5vZGUgPSBuZXcgVEhSRUUuUG9pbnRMaWdodCggY29sb3IgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdzcG90JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0Tm9kZSA9IG5ldyBUSFJFRS5TcG90TGlnaHQoIGNvbG9yICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaWdodE5vZGUucG9zaXRpb24uc2V0KCAwLCAwLCAxICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYW1iaWVudCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBsaWdodE5vZGUgPSBuZXcgVEhSRUUuQW1iaWVudExpZ2h0KCBjb2xvciApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbGlnaHROb2RlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGxpZ2h0LmNvbnN0YW50QXR0ZW51YXRpb24gIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0Tm9kZS5pbnRlbnNpdHkgPSBsaWdodC5jb25zdGFudEF0dGVudWF0aW9uO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggbGlnaHQubGluZWFyQXR0ZW51YXRpb24gIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0Tm9kZS5kaXN0YW5jZSA9IDEgLyBsaWdodC5saW5lYXJBdHRlbnVhdGlvbjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGxpZ2h0LnF1YWRyYXRpY0F0dGVudWF0aW9uICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBsaWdodE5vZGUuZGVjYXkgPSBsaWdodC5xdWFkcmF0aWNBdHRlbnVhdGlvbjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGxpZ2h0LmZhbGxPZmZBbmdsZSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHROb2RlLmFuZ2xlID0gbGlnaHQuZmFsbE9mZkFuZ2xlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggbGlnaHQuZmFsbE9mZkV4cG9uZW50ICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5HTFRGTG9hZGVyOjogbGlnaHQuZmFsbE9mZkV4cG9uZW50IG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkLicgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBsaWdodE5vZGUubmFtZSA9IGxpZ2h0Lm5hbWUgfHwgKCAnbGlnaHRfJyArIGxpZ2h0SWQgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saWdodHNbIGxpZ2h0SWQgXSA9IGxpZ2h0Tm9kZTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLyogQklOQVJZIEVYVEVOU0lPTiAqL1xuICAgIFxuICAgICAgICB2YXIgQklOQVJZX0VYVEVOU0lPTl9CVUZGRVJfTkFNRSA9ICdiaW5hcnlfZ2xURic7XG4gICAgICAgIHZhciBCSU5BUllfRVhURU5TSU9OX0hFQURFUl9NQUdJQyA9ICdnbFRGJztcbiAgICAgICAgdmFyIEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX0xFTkdUSCA9IDEyO1xuICAgICAgICB2YXIgQklOQVJZX0VYVEVOU0lPTl9DSFVOS19UWVBFUyA9IHsgSlNPTjogMHg0RTRGNTM0QSwgQklOOiAweDAwNEU0OTQyIH07XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIEdMVEZCaW5hcnlFeHRlbnNpb24oIGRhdGEgKSB7XG4gICAgXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBFWFRFTlNJT05TLktIUl9CSU5BUllfR0xURjtcbiAgICAgICAgICAgIHRoaXMuY29udGVudCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmJvZHkgPSBudWxsO1xuICAgIFxuICAgICAgICAgICAgdmFyIGhlYWRlclZpZXcgPSBuZXcgRGF0YVZpZXcoIGRhdGEsIDAsIEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX0xFTkdUSCApO1xuICAgIFxuICAgICAgICAgICAgdGhpcy5oZWFkZXIgPSB7XG4gICAgICAgICAgICAgICAgbWFnaWM6IFRIUkVFLkxvYWRlclV0aWxzLmRlY29kZVRleHQoIG5ldyBVaW50OEFycmF5KCBkYXRhLnNsaWNlKCAwLCA0ICkgKSApLFxuICAgICAgICAgICAgICAgIHZlcnNpb246IGhlYWRlclZpZXcuZ2V0VWludDMyKCA0LCB0cnVlICksXG4gICAgICAgICAgICAgICAgbGVuZ3RoOiBoZWFkZXJWaWV3LmdldFVpbnQzMiggOCwgdHJ1ZSApXG4gICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgaWYgKCB0aGlzLmhlYWRlci5tYWdpYyAhPT0gQklOQVJZX0VYVEVOU0lPTl9IRUFERVJfTUFHSUMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogVW5zdXBwb3J0ZWQgZ2xURi1CaW5hcnkgaGVhZGVyLicgKTtcbiAgICBcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHRoaXMuaGVhZGVyLnZlcnNpb24gPCAyLjAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogTGVnYWN5IGJpbmFyeSBmaWxlIGRldGVjdGVkLiBVc2UgTGVnYWN5R0xURkxvYWRlciBpbnN0ZWFkLicgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHZhciBjaHVua1ZpZXcgPSBuZXcgRGF0YVZpZXcoIGRhdGEsIEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX0xFTkdUSCApO1xuICAgICAgICAgICAgdmFyIGNodW5rSW5kZXggPSAwO1xuICAgIFxuICAgICAgICAgICAgd2hpbGUgKCBjaHVua0luZGV4IDwgY2h1bmtWaWV3LmJ5dGVMZW5ndGggKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGNodW5rTGVuZ3RoID0gY2h1bmtWaWV3LmdldFVpbnQzMiggY2h1bmtJbmRleCwgdHJ1ZSApO1xuICAgICAgICAgICAgICAgIGNodW5rSW5kZXggKz0gNDtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgY2h1bmtUeXBlID0gY2h1bmtWaWV3LmdldFVpbnQzMiggY2h1bmtJbmRleCwgdHJ1ZSApO1xuICAgICAgICAgICAgICAgIGNodW5rSW5kZXggKz0gNDtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGNodW5rVHlwZSA9PT0gQklOQVJZX0VYVEVOU0lPTl9DSFVOS19UWVBFUy5KU09OICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoIGRhdGEsIEJJTkFSWV9FWFRFTlNJT05fSEVBREVSX0xFTkdUSCArIGNodW5rSW5kZXgsIGNodW5rTGVuZ3RoICk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGVudCA9IFRIUkVFLkxvYWRlclV0aWxzLmRlY29kZVRleHQoIGNvbnRlbnRBcnJheSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGNodW5rVHlwZSA9PT0gQklOQVJZX0VYVEVOU0lPTl9DSFVOS19UWVBFUy5CSU4gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBieXRlT2Zmc2V0ID0gQklOQVJZX0VYVEVOU0lPTl9IRUFERVJfTEVOR1RIICsgY2h1bmtJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ib2R5ID0gZGF0YS5zbGljZSggYnl0ZU9mZnNldCwgYnl0ZU9mZnNldCArIGNodW5rTGVuZ3RoICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIENsaWVudHMgbXVzdCBpZ25vcmUgY2h1bmtzIHdpdGggdW5rbm93biB0eXBlcy5cbiAgICBcbiAgICAgICAgICAgICAgICBjaHVua0luZGV4ICs9IGNodW5rTGVuZ3RoO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCB0aGlzLmNvbnRlbnQgPT09IG51bGwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogSlNPTiBjb250ZW50IG5vdCBmb3VuZC4nICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWN1bGFyLUdsb3NzaW5lc3MgRXh0ZW5zaW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9leHRlbnNpb25zLzIuMC9LaHJvbm9zL0tIUl9tYXRlcmlhbHNfcGJyU3BlY3VsYXJHbG9zc2luZXNzXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBHTFRGTWF0ZXJpYWxzUGJyU3BlY3VsYXJHbG9zc2luZXNzRXh0ZW5zaW9uKCkge1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICBcbiAgICAgICAgICAgICAgICBuYW1lOiBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfUEJSX1NQRUNVTEFSX0dMT1NTSU5FU1MsXG4gICAgXG4gICAgICAgICAgICAgICAgc3BlY3VsYXJHbG9zc2luZXNzUGFyYW1zOiBbXG4gICAgICAgICAgICAgICAgICAgICdjb2xvcicsXG4gICAgICAgICAgICAgICAgICAgICdtYXAnLFxuICAgICAgICAgICAgICAgICAgICAnbGlnaHRNYXAnLFxuICAgICAgICAgICAgICAgICAgICAnbGlnaHRNYXBJbnRlbnNpdHknLFxuICAgICAgICAgICAgICAgICAgICAnYW9NYXAnLFxuICAgICAgICAgICAgICAgICAgICAnYW9NYXBJbnRlbnNpdHknLFxuICAgICAgICAgICAgICAgICAgICAnZW1pc3NpdmUnLFxuICAgICAgICAgICAgICAgICAgICAnZW1pc3NpdmVJbnRlbnNpdHknLFxuICAgICAgICAgICAgICAgICAgICAnZW1pc3NpdmVNYXAnLFxuICAgICAgICAgICAgICAgICAgICAnYnVtcE1hcCcsXG4gICAgICAgICAgICAgICAgICAgICdidW1wU2NhbGUnLFxuICAgICAgICAgICAgICAgICAgICAnbm9ybWFsTWFwJyxcbiAgICAgICAgICAgICAgICAgICAgJ2Rpc3BsYWNlbWVudE1hcCcsXG4gICAgICAgICAgICAgICAgICAgICdkaXNwbGFjZW1lbnRTY2FsZScsXG4gICAgICAgICAgICAgICAgICAgICdkaXNwbGFjZW1lbnRCaWFzJyxcbiAgICAgICAgICAgICAgICAgICAgJ3NwZWN1bGFyTWFwJyxcbiAgICAgICAgICAgICAgICAgICAgJ3NwZWN1bGFyJyxcbiAgICAgICAgICAgICAgICAgICAgJ2dsb3NzaW5lc3NNYXAnLFxuICAgICAgICAgICAgICAgICAgICAnZ2xvc3NpbmVzcycsXG4gICAgICAgICAgICAgICAgICAgICdhbHBoYU1hcCcsXG4gICAgICAgICAgICAgICAgICAgICdlbnZNYXAnLFxuICAgICAgICAgICAgICAgICAgICAnZW52TWFwSW50ZW5zaXR5JyxcbiAgICAgICAgICAgICAgICAgICAgJ3JlZnJhY3Rpb25SYXRpbycsXG4gICAgICAgICAgICAgICAgXSxcbiAgICBcbiAgICAgICAgICAgICAgICBnZXRNYXRlcmlhbFR5cGU6IGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRIUkVFLlNoYWRlck1hdGVyaWFsO1xuICAgIFxuICAgICAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAgICAgZXh0ZW5kUGFyYW1zOiBmdW5jdGlvbiAoIHBhcmFtcywgbWF0ZXJpYWwsIHBhcnNlciApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBiclNwZWN1bGFyR2xvc3NpbmVzcyA9IG1hdGVyaWFsLmV4dGVuc2lvbnNbIHRoaXMubmFtZSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc2hhZGVyID0gVEhSRUUuU2hhZGVyTGliWyAnc3RhbmRhcmQnIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciB1bmlmb3JtcyA9IFRIUkVFLlVuaWZvcm1zVXRpbHMuY2xvbmUoIHNoYWRlci51bmlmb3JtcyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc3BlY3VsYXJNYXBQYXJzRnJhZ21lbnRDaHVuayA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICcjaWZkZWYgVVNFX1NQRUNVTEFSTUFQJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdcdHVuaWZvcm0gc2FtcGxlcjJEIHNwZWN1bGFyTWFwOycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnI2VuZGlmJ1xuICAgICAgICAgICAgICAgICAgICBdLmpvaW4oICdcXG4nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBnbG9zc2luZXNzTWFwUGFyc0ZyYWdtZW50Q2h1bmsgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnI2lmZGVmIFVTRV9HTE9TU0lORVNTTUFQJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdcdHVuaWZvcm0gc2FtcGxlcjJEIGdsb3NzaW5lc3NNYXA7JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICcjZW5kaWYnXG4gICAgICAgICAgICAgICAgICAgIF0uam9pbiggJ1xcbicgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNwZWN1bGFyTWFwRnJhZ21lbnRDaHVuayA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICd2ZWMzIHNwZWN1bGFyRmFjdG9yID0gc3BlY3VsYXI7JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICcjaWZkZWYgVVNFX1NQRUNVTEFSTUFQJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdcdHZlYzQgdGV4ZWxTcGVjdWxhciA9IHRleHR1cmUyRCggc3BlY3VsYXJNYXAsIHZVdiApOycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnXHR0ZXhlbFNwZWN1bGFyID0gc1JHQlRvTGluZWFyKCB0ZXhlbFNwZWN1bGFyICk7JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdcdC8vIHJlYWRzIGNoYW5uZWwgUkdCLCBjb21wYXRpYmxlIHdpdGggYSBnbFRGIFNwZWN1bGFyLUdsb3NzaW5lc3MgKFJHQkEpIHRleHR1cmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1x0c3BlY3VsYXJGYWN0b3IgKj0gdGV4ZWxTcGVjdWxhci5yZ2I7JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICcjZW5kaWYnXG4gICAgICAgICAgICAgICAgICAgIF0uam9pbiggJ1xcbicgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdsb3NzaW5lc3NNYXBGcmFnbWVudENodW5rID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2Zsb2F0IGdsb3NzaW5lc3NGYWN0b3IgPSBnbG9zc2luZXNzOycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnI2lmZGVmIFVTRV9HTE9TU0lORVNTTUFQJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdcdHZlYzQgdGV4ZWxHbG9zc2luZXNzID0gdGV4dHVyZTJEKCBnbG9zc2luZXNzTWFwLCB2VXYgKTsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1x0Ly8gcmVhZHMgY2hhbm5lbCBBLCBjb21wYXRpYmxlIHdpdGggYSBnbFRGIFNwZWN1bGFyLUdsb3NzaW5lc3MgKFJHQkEpIHRleHR1cmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1x0Z2xvc3NpbmVzc0ZhY3RvciAqPSB0ZXhlbEdsb3NzaW5lc3MuYTsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJyNlbmRpZidcbiAgICAgICAgICAgICAgICAgICAgXS5qb2luKCAnXFxuJyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgbGlnaHRQaHlzaWNhbEZyYWdtZW50Q2h1bmsgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbDsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ21hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2I7JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyA9IGNsYW1wKCAxLjAgLSBnbG9zc2luZXNzRmFjdG9yLCAwLjA0LCAxLjAgKTsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ21hdGVyaWFsLnNwZWN1bGFyQ29sb3IgPSBzcGVjdWxhckZhY3Rvci5yZ2I7JyxcbiAgICAgICAgICAgICAgICAgICAgXS5qb2luKCAnXFxuJyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgZnJhZ21lbnRTaGFkZXIgPSBzaGFkZXIuZnJhZ21lbnRTaGFkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCAnI2luY2x1ZGUgPHNwZWN1bGFybWFwX2ZyYWdtZW50PicsICcnIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCAndW5pZm9ybSBmbG9hdCByb3VnaG5lc3M7JywgJ3VuaWZvcm0gdmVjMyBzcGVjdWxhcjsnIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCAndW5pZm9ybSBmbG9hdCBtZXRhbG5lc3M7JywgJ3VuaWZvcm0gZmxvYXQgZ2xvc3NpbmVzczsnIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCAnI2luY2x1ZGUgPHJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50PicsIHNwZWN1bGFyTWFwUGFyc0ZyYWdtZW50Q2h1bmsgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoICcjaW5jbHVkZSA8bWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQ+JywgZ2xvc3NpbmVzc01hcFBhcnNGcmFnbWVudENodW5rIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCAnI2luY2x1ZGUgPHJvdWdobmVzc21hcF9mcmFnbWVudD4nLCBzcGVjdWxhck1hcEZyYWdtZW50Q2h1bmsgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoICcjaW5jbHVkZSA8bWV0YWxuZXNzbWFwX2ZyYWdtZW50PicsIGdsb3NzaW5lc3NNYXBGcmFnbWVudENodW5rIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCAnI2luY2x1ZGUgPGxpZ2h0c19waHlzaWNhbF9mcmFnbWVudD4nLCBsaWdodFBoeXNpY2FsRnJhZ21lbnRDaHVuayApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdW5pZm9ybXMucm91Z2huZXNzO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdW5pZm9ybXMubWV0YWxuZXNzO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdW5pZm9ybXMucm91Z2huZXNzTWFwO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdW5pZm9ybXMubWV0YWxuZXNzTWFwO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5zcGVjdWxhciA9IHsgdmFsdWU6IG5ldyBUSFJFRS5Db2xvcigpLnNldEhleCggMHgxMTExMTEgKSB9O1xuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5nbG9zc2luZXNzID0geyB2YWx1ZTogMC41IH07XG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLnNwZWN1bGFyTWFwID0geyB2YWx1ZTogbnVsbCB9O1xuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5nbG9zc2luZXNzTWFwID0geyB2YWx1ZTogbnVsbCB9O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMudmVydGV4U2hhZGVyID0gc2hhZGVyLnZlcnRleFNoYWRlcjtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmZyYWdtZW50U2hhZGVyID0gZnJhZ21lbnRTaGFkZXI7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy51bmlmb3JtcyA9IHVuaWZvcm1zO1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuZGVmaW5lcyA9IHsgJ1NUQU5EQVJEJzogJycgfTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKCAxLjAsIDEuMCwgMS4wICk7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5vcGFjaXR5ID0gMS4wO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgcGVuZGluZyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIEFycmF5LmlzQXJyYXkoIHBiclNwZWN1bGFyR2xvc3NpbmVzcy5kaWZmdXNlRmFjdG9yICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBwYnJTcGVjdWxhckdsb3NzaW5lc3MuZGlmZnVzZUZhY3RvcjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5jb2xvci5mcm9tQXJyYXkoIGFycmF5ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMub3BhY2l0eSA9IGFycmF5WyAzIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBwYnJTcGVjdWxhckdsb3NzaW5lc3MuZGlmZnVzZVRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmcucHVzaCggcGFyc2VyLmFzc2lnblRleHR1cmUoIHBhcmFtcywgJ21hcCcsIHBiclNwZWN1bGFyR2xvc3NpbmVzcy5kaWZmdXNlVGV4dHVyZS5pbmRleCApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmVtaXNzaXZlID0gbmV3IFRIUkVFLkNvbG9yKCAwLjAsIDAuMCwgMC4wICk7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5nbG9zc2luZXNzID0gcGJyU3BlY3VsYXJHbG9zc2luZXNzLmdsb3NzaW5lc3NGYWN0b3IgIT09IHVuZGVmaW5lZCA/IHBiclNwZWN1bGFyR2xvc3NpbmVzcy5nbG9zc2luZXNzRmFjdG9yIDogMS4wO1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuc3BlY3VsYXIgPSBuZXcgVEhSRUUuQ29sb3IoIDEuMCwgMS4wLCAxLjAgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBBcnJheS5pc0FycmF5KCBwYnJTcGVjdWxhckdsb3NzaW5lc3Muc3BlY3VsYXJGYWN0b3IgKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5zcGVjdWxhci5mcm9tQXJyYXkoIHBiclNwZWN1bGFyR2xvc3NpbmVzcy5zcGVjdWxhckZhY3RvciApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggcGJyU3BlY3VsYXJHbG9zc2luZXNzLnNwZWN1bGFyR2xvc3NpbmVzc1RleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcGVjR2xvc3NJbmRleCA9IHBiclNwZWN1bGFyR2xvc3NpbmVzcy5zcGVjdWxhckdsb3NzaW5lc3NUZXh0dXJlLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZy5wdXNoKCBwYXJzZXIuYXNzaWduVGV4dHVyZSggcGFyYW1zLCAnZ2xvc3NpbmVzc01hcCcsIHNwZWNHbG9zc0luZGV4ICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlbmRpbmcucHVzaCggcGFyc2VyLmFzc2lnblRleHR1cmUoIHBhcmFtcywgJ3NwZWN1bGFyTWFwJywgc3BlY0dsb3NzSW5kZXggKSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbCggcGVuZGluZyApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAgICAgY3JlYXRlTWF0ZXJpYWw6IGZ1bmN0aW9uICggcGFyYW1zICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBzZXR1cCBtYXRlcmlhbCBwcm9wZXJ0aWVzIGJhc2VkIG9uIE1lc2hTdGFuZGFyZE1hdGVyaWFsIGZvciBTcGVjdWxhci1HbG9zc2luZXNzXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCgge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lczogcGFyYW1zLmRlZmluZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXhTaGFkZXI6IHBhcmFtcy52ZXJ0ZXhTaGFkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFnbWVudFNoYWRlcjogcGFyYW1zLmZyYWdtZW50U2hhZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXM6IHBhcmFtcy51bmlmb3JtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IHBhcmFtcy5vcGFjaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHBhcmFtcy50cmFuc3BhcmVudFxuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmlzR0xURlNwZWN1bGFyR2xvc3NpbmVzc01hdGVyaWFsID0gdHJ1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuY29sb3IgPSBwYXJhbXMuY29sb3I7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLm1hcCA9IHBhcmFtcy5tYXAgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBwYXJhbXMubWFwO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5saWdodE1hcCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmxpZ2h0TWFwSW50ZW5zaXR5ID0gMS4wO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5hb01hcCA9IHBhcmFtcy5hb01hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtcy5hb01hcDtcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuYW9NYXBJbnRlbnNpdHkgPSAxLjA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmVtaXNzaXZlID0gcGFyYW1zLmVtaXNzaXZlO1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5lbWlzc2l2ZUludGVuc2l0eSA9IDEuMDtcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuZW1pc3NpdmVNYXAgPSBwYXJhbXMuZW1pc3NpdmVNYXAgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBwYXJhbXMuZW1pc3NpdmVNYXA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmJ1bXBNYXAgPSBwYXJhbXMuYnVtcE1hcCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHBhcmFtcy5idW1wTWFwO1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5idW1wU2NhbGUgPSAxO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5ub3JtYWxNYXAgPSBwYXJhbXMubm9ybWFsTWFwID09PSB1bmRlZmluZWQgPyBudWxsIDogcGFyYW1zLm5vcm1hbE1hcDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBwYXJhbXMubm9ybWFsU2NhbGUgKSBtYXRlcmlhbC5ub3JtYWxTY2FsZSA9IHBhcmFtcy5ub3JtYWxTY2FsZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzID0gMDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuc3BlY3VsYXJNYXAgPSBwYXJhbXMuc3BlY3VsYXJNYXAgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBwYXJhbXMuc3BlY3VsYXJNYXA7XG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLnNwZWN1bGFyID0gcGFyYW1zLnNwZWN1bGFyO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5nbG9zc2luZXNzTWFwID0gcGFyYW1zLmdsb3NzaW5lc3NNYXAgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBwYXJhbXMuZ2xvc3NpbmVzc01hcDtcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwuZ2xvc3NpbmVzcyA9IHBhcmFtcy5nbG9zc2luZXNzO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5hbHBoYU1hcCA9IG51bGw7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmVudk1hcCA9IHBhcmFtcy5lbnZNYXAgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBwYXJhbXMuZW52TWFwO1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5lbnZNYXBJbnRlbnNpdHkgPSAxLjA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLnJlZnJhY3Rpb25SYXRpbyA9IDAuOTg7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmV4dGVuc2lvbnMuZGVyaXZhdGl2ZXMgPSB0cnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF0ZXJpYWw7XG4gICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBDbG9uZXMgYSBHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWwgaW5zdGFuY2UuIFRoZSBTaGFkZXJNYXRlcmlhbC5jb3B5KCkgbWV0aG9kIGNhblxuICAgICAgICAgICAgICAgICAqIGNvcHkgb25seSBwcm9wZXJ0aWVzIGl0IGtub3dzIGFib3V0IG9yIGluaGVyaXRzLCBhbmQgbWlzc2VzIG1hbnkgcHJvcGVydGllcyB0aGF0IHdvdWxkXG4gICAgICAgICAgICAgICAgICogbm9ybWFsbHkgYmUgZGVmaW5lZCBieSBNZXNoU3RhbmRhcmRNYXRlcmlhbC5cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIFRoaXMgbWV0aG9kIGFsbG93cyBHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWxzIHRvIGJlIGNsb25lZCBpbiB0aGUgcHJvY2VzcyBvZlxuICAgICAgICAgICAgICAgICAqIGxvYWRpbmcgYSBnbFRGIG1vZGVsLCBidXQgY2xvbmluZyBsYXRlciAoZS5nLiBieSB0aGUgdXNlcikgd291bGQgcmVxdWlyZSB0aGVzZSBjaGFuZ2VzXG4gICAgICAgICAgICAgICAgICogQU5EIGFsc28gdXBkYXRpbmcgYC5vbkJlZm9yZVJlbmRlcmAgb24gdGhlIHBhcmVudCBtZXNoLlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogQHBhcmFtICB7VEhSRUUuU2hhZGVyTWF0ZXJpYWx9IHNvdXJjZVxuICAgICAgICAgICAgICAgICAqIEByZXR1cm4ge1RIUkVFLlNoYWRlck1hdGVyaWFsfVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGNsb25lTWF0ZXJpYWw6IGZ1bmN0aW9uICggc291cmNlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gc291cmNlLmNsb25lKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5pc0dMVEZTcGVjdWxhckdsb3NzaW5lc3NNYXRlcmlhbCA9IHRydWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB0aGlzLnNwZWN1bGFyR2xvc3NpbmVzc1BhcmFtcztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBpbCA9IHBhcmFtcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFsgcGFyYW1zWyBpIF0gXSA9IHNvdXJjZVsgcGFyYW1zWyBpIF0gXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIFxuICAgICAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAgICAgLy8gSGVyZSdzIGJhc2VkIG9uIHJlZnJlc2hVbmlmb3Jtc0NvbW1vbigpIGFuZCByZWZyZXNoVW5pZm9ybXNTdGFuZGFyZCgpIGluIFdlYkdMUmVuZGVyZXIuXG4gICAgICAgICAgICAgICAgcmVmcmVzaFVuaWZvcm1zOiBmdW5jdGlvbiAoIHJlbmRlcmVyLCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIG1hdGVyaWFsLmlzR0xURlNwZWN1bGFyR2xvc3NpbmVzc01hdGVyaWFsICE9PSB0cnVlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciB1bmlmb3JtcyA9IG1hdGVyaWFsLnVuaWZvcm1zO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVmaW5lcyA9IG1hdGVyaWFsLmRlZmluZXM7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNvbG9yICk7XG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLmVtaXNzaXZlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmVtaXNzaXZlICkubXVsdGlwbHlTY2FsYXIoIG1hdGVyaWFsLmVtaXNzaXZlSW50ZW5zaXR5ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLm1hcC52YWx1ZSA9IG1hdGVyaWFsLm1hcDtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMuc3BlY3VsYXJNYXAudmFsdWUgPSBtYXRlcmlhbC5zcGVjdWxhck1hcDtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMuYWxwaGFNYXAudmFsdWUgPSBtYXRlcmlhbC5hbHBoYU1hcDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMubGlnaHRNYXAudmFsdWUgPSBtYXRlcmlhbC5saWdodE1hcDtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMubGlnaHRNYXBJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5saWdodE1hcEludGVuc2l0eTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMuYW9NYXAudmFsdWUgPSBtYXRlcmlhbC5hb01hcDtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMuYW9NYXBJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5hb01hcEludGVuc2l0eTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gdXYgcmVwZWF0IGFuZCBvZmZzZXQgc2V0dGluZyBwcmlvcml0aWVzXG4gICAgICAgICAgICAgICAgICAgIC8vIDEuIGNvbG9yIG1hcFxuICAgICAgICAgICAgICAgICAgICAvLyAyLiBzcGVjdWxhciBtYXBcbiAgICAgICAgICAgICAgICAgICAgLy8gMy4gbm9ybWFsIG1hcFxuICAgICAgICAgICAgICAgICAgICAvLyA0LiBidW1wIG1hcFxuICAgICAgICAgICAgICAgICAgICAvLyA1LiBhbHBoYSBtYXBcbiAgICAgICAgICAgICAgICAgICAgLy8gNi4gZW1pc3NpdmUgbWFwXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciB1dlNjYWxlTWFwO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIG1hdGVyaWFsLm1hcCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5tYXA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG1hdGVyaWFsLnNwZWN1bGFyTWFwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdXZTY2FsZU1hcCA9IG1hdGVyaWFsLnNwZWN1bGFyTWFwO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB1dlNjYWxlTWFwID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB1dlNjYWxlTWFwID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBtYXRlcmlhbC5idW1wTWFwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdXZTY2FsZU1hcCA9IG1hdGVyaWFsLmJ1bXBNYXA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG1hdGVyaWFsLmdsb3NzaW5lc3NNYXAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB1dlNjYWxlTWFwID0gbWF0ZXJpYWwuZ2xvc3NpbmVzc01hcDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggbWF0ZXJpYWwuYWxwaGFNYXAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB1dlNjYWxlTWFwID0gbWF0ZXJpYWwuYWxwaGFNYXA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG1hdGVyaWFsLmVtaXNzaXZlTWFwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdXZTY2FsZU1hcCA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggdXZTY2FsZU1hcCAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdXZTY2FsZU1hcC5pc1dlYkdMUmVuZGVyVGFyZ2V0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV2U2NhbGVNYXAgPSB1dlNjYWxlTWFwLnRleHR1cmU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlcGVhdDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdXZTY2FsZU1hcC5tYXRyaXggIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA+IHI4OC5cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHV2U2NhbGVNYXAubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gdXZTY2FsZU1hcC5vZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdCA9IHV2U2NhbGVNYXAucmVwZWF0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm90YXRpb24gPSB1dlNjYWxlTWFwLnJvdGF0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2VudGVyID0gdXZTY2FsZU1hcC5jZW50ZXI7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV2U2NhbGVNYXAubWF0cml4LnNldFV2VHJhbnNmb3JtKCBvZmZzZXQueCwgb2Zmc2V0LnksIHJlcGVhdC54LCByZXBlYXQueSwgcm90YXRpb24sIGNlbnRlci54LCBjZW50ZXIueSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy51dlRyYW5zZm9ybS52YWx1ZS5jb3B5KCB1dlNjYWxlTWFwLm1hdHJpeCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8PSByODcuIFJlbW92ZSB3aGVuIHJlYXNvbmFibGUuXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gdXZTY2FsZU1hcC5vZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0ID0gdXZTY2FsZU1hcC5yZXBlYXQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMub2Zmc2V0UmVwZWF0LnZhbHVlLnNldCggb2Zmc2V0LngsIG9mZnNldC55LCByZXBlYXQueCwgcmVwZWF0LnkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5lbnZNYXAudmFsdWUgPSBtYXRlcmlhbC5lbnZNYXA7XG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLmVudk1hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcEludGVuc2l0eTtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMuZmxpcEVudk1hcC52YWx1ZSA9ICggbWF0ZXJpYWwuZW52TWFwICYmIG1hdGVyaWFsLmVudk1hcC5pc0N1YmVUZXh0dXJlICkgPyAtIDEgOiAxO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5yZWZyYWN0aW9uUmF0aW8udmFsdWUgPSBtYXRlcmlhbC5yZWZyYWN0aW9uUmF0aW87XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLnNwZWN1bGFyLnZhbHVlLmNvcHkoIG1hdGVyaWFsLnNwZWN1bGFyICk7XG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLmdsb3NzaW5lc3MudmFsdWUgPSBtYXRlcmlhbC5nbG9zc2luZXNzO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5nbG9zc2luZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwuZ2xvc3NpbmVzc01hcDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMuZW1pc3NpdmVNYXAudmFsdWUgPSBtYXRlcmlhbC5lbWlzc2l2ZU1hcDtcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMuYnVtcE1hcC52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBNYXA7XG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLm5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLm5vcm1hbE1hcDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB1bmlmb3Jtcy5nbG9zc2luZXNzTWFwLnZhbHVlICE9PSBudWxsICYmIGRlZmluZXMuVVNFX0dMT1NTSU5FU1NNQVAgPT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluZXMuVVNFX0dMT1NTSU5FU1NNQVAgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBVU0VfUk9VR0hORVNTTUFQIHRvIGVuYWJsZSB2VXZcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluZXMuVVNFX1JPVUdITkVTU01BUCA9ICcnO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggdW5pZm9ybXMuZ2xvc3NpbmVzc01hcC52YWx1ZSA9PT0gbnVsbCAmJiBkZWZpbmVzLlVTRV9HTE9TU0lORVNTTUFQICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZGVmaW5lcy5VU0VfR0xPU1NJTkVTU01BUDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBkZWZpbmVzLlVTRV9ST1VHSE5FU1NNQVA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgICAgIC8qKioqKioqKioqIElOVEVSUE9MQVRJT04gKioqKioqKiovXG4gICAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4gICAgXG4gICAgICAgIC8vIFNwbGluZSBJbnRlcnBvbGF0aW9uXG4gICAgICAgIC8vIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjYXBwZW5kaXgtYy1zcGxpbmUtaW50ZXJwb2xhdGlvblxuICAgICAgICBmdW5jdGlvbiBHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudCggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcbiAgICBcbiAgICAgICAgICAgIFRIUkVFLkludGVycG9sYW50LmNhbGwoIHRoaXMsIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKTtcbiAgICBcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgR0xURkN1YmljU3BsaW5lSW50ZXJwb2xhbnQucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVEhSRUUuSW50ZXJwb2xhbnQucHJvdG90eXBlICk7XG4gICAgICAgIEdMVEZDdWJpY1NwbGluZUludGVycG9sYW50LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdMVEZDdWJpY1NwbGluZUludGVycG9sYW50O1xuICAgIFxuICAgICAgICBHTFRGQ3ViaWNTcGxpbmVJbnRlcnBvbGFudC5wcm90b3R5cGUuaW50ZXJwb2xhdGVfID0gZnVuY3Rpb24gKCBpMSwgdDAsIHQsIHQxICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMucmVzdWx0QnVmZmVyO1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzO1xuICAgICAgICAgICAgdmFyIHN0cmlkZSA9IHRoaXMudmFsdWVTaXplO1xuICAgIFxuICAgICAgICAgICAgdmFyIHN0cmlkZTIgPSBzdHJpZGUgKiAyO1xuICAgICAgICAgICAgdmFyIHN0cmlkZTMgPSBzdHJpZGUgKiAzO1xuICAgIFxuICAgICAgICAgICAgdmFyIHRkID0gdDEgLSB0MDtcbiAgICBcbiAgICAgICAgICAgIHZhciBwID0gKCB0IC0gdDAgKSAvIHRkO1xuICAgICAgICAgICAgdmFyIHBwID0gcCAqIHA7XG4gICAgICAgICAgICB2YXIgcHBwID0gcHAgKiBwO1xuICAgIFxuICAgICAgICAgICAgdmFyIG9mZnNldDEgPSBpMSAqIHN0cmlkZTM7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0MCA9IG9mZnNldDEgLSBzdHJpZGUzO1xuICAgIFxuICAgICAgICAgICAgdmFyIHMwID0gMiAqIHBwcCAtIDMgKiBwcCArIDE7XG4gICAgICAgICAgICB2YXIgczEgPSBwcHAgLSAyICogcHAgKyBwO1xuICAgICAgICAgICAgdmFyIHMyID0gLSAyICogcHBwICsgMyAqIHBwO1xuICAgICAgICAgICAgdmFyIHMzID0gcHBwIC0gcHA7XG4gICAgXG4gICAgICAgICAgICAvLyBMYXlvdXQgb2Yga2V5ZnJhbWUgb3V0cHV0IHZhbHVlcyBmb3IgQ1VCSUNTUExJTkUgYW5pbWF0aW9uczpcbiAgICAgICAgICAgIC8vICAgWyBpblRhbmdlbnRfMSwgc3BsaW5lVmVydGV4XzEsIG91dFRhbmdlbnRfMSwgaW5UYW5nZW50XzIsIHNwbGluZVZlcnRleF8yLCAuLi4gXVxuICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpICE9PSBzdHJpZGU7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHAwID0gdmFsdWVzWyBvZmZzZXQwICsgaSArIHN0cmlkZSBdOyAgICAgICAgLy8gc3BsaW5lVmVydGV4X2tcbiAgICAgICAgICAgICAgICB2YXIgbTAgPSB2YWx1ZXNbIG9mZnNldDAgKyBpICsgc3RyaWRlMiBdICogdGQ7ICAvLyBvdXRUYW5nZW50X2sgKiAodF9rKzEgLSB0X2spXG4gICAgICAgICAgICAgICAgdmFyIHAxID0gdmFsdWVzWyBvZmZzZXQxICsgaSArIHN0cmlkZSBdOyAgICAgICAgLy8gc3BsaW5lVmVydGV4X2srMVxuICAgICAgICAgICAgICAgIHZhciBtMSA9IHZhbHVlc1sgb2Zmc2V0MSArIGkgXSAqIHRkOyAgICAgICAgICAgIC8vIGluVGFuZ2VudF9rKzEgKiAodF9rKzEgLSB0X2spXG4gICAgXG4gICAgICAgICAgICAgICAgcmVzdWx0WyBpIF0gPSBzMCAqIHAwICsgczEgKiBtMCArIHMyICogcDEgKyBzMyAqIG0xO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICBcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAgICAgLyoqKioqKioqKiogSU5URVJOQUxTICoqKioqKioqKioqKi9cbiAgICAgICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICBcbiAgICAgICAgLyogQ09OU1RBTlRTICovXG4gICAgXG4gICAgICAgIHZhciBXRUJHTF9DT05TVEFOVFMgPSB7XG4gICAgICAgICAgICBGTE9BVDogNTEyNixcbiAgICAgICAgICAgIC8vRkxPQVRfTUFUMjogMzU2NzQsXG4gICAgICAgICAgICBGTE9BVF9NQVQzOiAzNTY3NSxcbiAgICAgICAgICAgIEZMT0FUX01BVDQ6IDM1Njc2LFxuICAgICAgICAgICAgRkxPQVRfVkVDMjogMzU2NjQsXG4gICAgICAgICAgICBGTE9BVF9WRUMzOiAzNTY2NSxcbiAgICAgICAgICAgIEZMT0FUX1ZFQzQ6IDM1NjY2LFxuICAgICAgICAgICAgTElORUFSOiA5NzI5LFxuICAgICAgICAgICAgUkVQRUFUOiAxMDQ5NyxcbiAgICAgICAgICAgIFNBTVBMRVJfMkQ6IDM1Njc4LFxuICAgICAgICAgICAgUE9JTlRTOiAwLFxuICAgICAgICAgICAgTElORVM6IDEsXG4gICAgICAgICAgICBMSU5FX0xPT1A6IDIsXG4gICAgICAgICAgICBMSU5FX1NUUklQOiAzLFxuICAgICAgICAgICAgVFJJQU5HTEVTOiA0LFxuICAgICAgICAgICAgVFJJQU5HTEVfU1RSSVA6IDUsXG4gICAgICAgICAgICBUUklBTkdMRV9GQU46IDYsXG4gICAgICAgICAgICBVTlNJR05FRF9CWVRFOiA1MTIxLFxuICAgICAgICAgICAgVU5TSUdORURfU0hPUlQ6IDUxMjNcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgdmFyIFdFQkdMX1RZUEUgPSB7XG4gICAgICAgICAgICA1MTI2OiBOdW1iZXIsXG4gICAgICAgICAgICAvLzM1Njc0OiBUSFJFRS5NYXRyaXgyLFxuICAgICAgICAgICAgMzU2NzU6IFRIUkVFLk1hdHJpeDMsXG4gICAgICAgICAgICAzNTY3NjogVEhSRUUuTWF0cml4NCxcbiAgICAgICAgICAgIDM1NjY0OiBUSFJFRS5WZWN0b3IyLFxuICAgICAgICAgICAgMzU2NjU6IFRIUkVFLlZlY3RvcjMsXG4gICAgICAgICAgICAzNTY2NjogVEhSRUUuVmVjdG9yNCxcbiAgICAgICAgICAgIDM1Njc4OiBUSFJFRS5UZXh0dXJlXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIHZhciBXRUJHTF9DT01QT05FTlRfVFlQRVMgPSB7XG4gICAgICAgICAgICA1MTIwOiBJbnQ4QXJyYXksXG4gICAgICAgICAgICA1MTIxOiBVaW50OEFycmF5LFxuICAgICAgICAgICAgNTEyMjogSW50MTZBcnJheSxcbiAgICAgICAgICAgIDUxMjM6IFVpbnQxNkFycmF5LFxuICAgICAgICAgICAgNTEyNTogVWludDMyQXJyYXksXG4gICAgICAgICAgICA1MTI2OiBGbG9hdDMyQXJyYXlcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgdmFyIFdFQkdMX0ZJTFRFUlMgPSB7XG4gICAgICAgICAgICA5NzI4OiBUSFJFRS5OZWFyZXN0RmlsdGVyLFxuICAgICAgICAgICAgOTcyOTogVEhSRUUuTGluZWFyRmlsdGVyLFxuICAgICAgICAgICAgOTk4NDogVEhSRUUuTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIsXG4gICAgICAgICAgICA5OTg1OiBUSFJFRS5MaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyLFxuICAgICAgICAgICAgOTk4NjogVEhSRUUuTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlcixcbiAgICAgICAgICAgIDk5ODc6IFRIUkVFLkxpbmVhck1pcE1hcExpbmVhckZpbHRlclxuICAgICAgICB9O1xuICAgIFxuICAgICAgICB2YXIgV0VCR0xfV1JBUFBJTkdTID0ge1xuICAgICAgICAgICAgMzMwNzE6IFRIUkVFLkNsYW1wVG9FZGdlV3JhcHBpbmcsXG4gICAgICAgICAgICAzMzY0ODogVEhSRUUuTWlycm9yZWRSZXBlYXRXcmFwcGluZyxcbiAgICAgICAgICAgIDEwNDk3OiBUSFJFRS5SZXBlYXRXcmFwcGluZ1xuICAgICAgICB9O1xuICAgIFxuICAgICAgICB2YXIgV0VCR0xfVEVYVFVSRV9GT1JNQVRTID0ge1xuICAgICAgICAgICAgNjQwNjogVEhSRUUuQWxwaGFGb3JtYXQsXG4gICAgICAgICAgICA2NDA3OiBUSFJFRS5SR0JGb3JtYXQsXG4gICAgICAgICAgICA2NDA4OiBUSFJFRS5SR0JBRm9ybWF0LFxuICAgICAgICAgICAgNjQwOTogVEhSRUUuTHVtaW5hbmNlRm9ybWF0LFxuICAgICAgICAgICAgNjQxMDogVEhSRUUuTHVtaW5hbmNlQWxwaGFGb3JtYXRcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgdmFyIFdFQkdMX1RFWFRVUkVfREFUQVRZUEVTID0ge1xuICAgICAgICAgICAgNTEyMTogVEhSRUUuVW5zaWduZWRCeXRlVHlwZSxcbiAgICAgICAgICAgIDMyODE5OiBUSFJFRS5VbnNpZ25lZFNob3J0NDQ0NFR5cGUsXG4gICAgICAgICAgICAzMjgyMDogVEhSRUUuVW5zaWduZWRTaG9ydDU1NTFUeXBlLFxuICAgICAgICAgICAgMzM2MzU6IFRIUkVFLlVuc2lnbmVkU2hvcnQ1NjVUeXBlXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIHZhciBXRUJHTF9TSURFUyA9IHtcbiAgICAgICAgICAgIDEwMjg6IFRIUkVFLkJhY2tTaWRlLCAvLyBDdWxsaW5nIGZyb250XG4gICAgICAgICAgICAxMDI5OiBUSFJFRS5Gcm9udFNpZGUgLy8gQ3VsbGluZyBiYWNrXG4gICAgICAgICAgICAvLzEwMzI6IFRIUkVFLk5vU2lkZSAgIC8vIEN1bGxpbmcgZnJvbnQgYW5kIGJhY2ssIHdoYXQgdG8gZG8/XG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIHZhciBXRUJHTF9ERVBUSF9GVU5DUyA9IHtcbiAgICAgICAgICAgIDUxMjogVEhSRUUuTmV2ZXJEZXB0aCxcbiAgICAgICAgICAgIDUxMzogVEhSRUUuTGVzc0RlcHRoLFxuICAgICAgICAgICAgNTE0OiBUSFJFRS5FcXVhbERlcHRoLFxuICAgICAgICAgICAgNTE1OiBUSFJFRS5MZXNzRXF1YWxEZXB0aCxcbiAgICAgICAgICAgIDUxNjogVEhSRUUuR3JlYXRlckVxdWFsRGVwdGgsXG4gICAgICAgICAgICA1MTc6IFRIUkVFLk5vdEVxdWFsRGVwdGgsXG4gICAgICAgICAgICA1MTg6IFRIUkVFLkdyZWF0ZXJFcXVhbERlcHRoLFxuICAgICAgICAgICAgNTE5OiBUSFJFRS5BbHdheXNEZXB0aFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICB2YXIgV0VCR0xfQkxFTkRfRVFVQVRJT05TID0ge1xuICAgICAgICAgICAgMzI3NzQ6IFRIUkVFLkFkZEVxdWF0aW9uLFxuICAgICAgICAgICAgMzI3Nzg6IFRIUkVFLlN1YnRyYWN0RXF1YXRpb24sXG4gICAgICAgICAgICAzMjc3OTogVEhSRUUuUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb25cbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgdmFyIFdFQkdMX0JMRU5EX0ZVTkNTID0ge1xuICAgICAgICAgICAgMDogVEhSRUUuWmVyb0ZhY3RvcixcbiAgICAgICAgICAgIDE6IFRIUkVFLk9uZUZhY3RvcixcbiAgICAgICAgICAgIDc2ODogVEhSRUUuU3JjQ29sb3JGYWN0b3IsXG4gICAgICAgICAgICA3Njk6IFRIUkVFLk9uZU1pbnVzU3JjQ29sb3JGYWN0b3IsXG4gICAgICAgICAgICA3NzA6IFRIUkVFLlNyY0FscGhhRmFjdG9yLFxuICAgICAgICAgICAgNzcxOiBUSFJFRS5PbmVNaW51c1NyY0FscGhhRmFjdG9yLFxuICAgICAgICAgICAgNzcyOiBUSFJFRS5Ec3RBbHBoYUZhY3RvcixcbiAgICAgICAgICAgIDc3MzogVEhSRUUuT25lTWludXNEc3RBbHBoYUZhY3RvcixcbiAgICAgICAgICAgIDc3NDogVEhSRUUuRHN0Q29sb3JGYWN0b3IsXG4gICAgICAgICAgICA3NzU6IFRIUkVFLk9uZU1pbnVzRHN0Q29sb3JGYWN0b3IsXG4gICAgICAgICAgICA3NzY6IFRIUkVFLlNyY0FscGhhU2F0dXJhdGVGYWN0b3JcbiAgICAgICAgICAgIC8vIFRoZSBmb2xsb3dpbmdzIGFyZSBub3Qgc3VwcG9ydGVkIGJ5IFRocmVlLmpzIHlldFxuICAgICAgICAgICAgLy8zMjc2OTogQ09OU1RBTlRfQ09MT1IsXG4gICAgICAgICAgICAvLzMyNzcwOiBPTkVfTUlOVVNfQ09OU1RBTlRfQ09MT1IsXG4gICAgICAgICAgICAvLzMyNzcxOiBDT05TVEFOVF9BTFBIQSxcbiAgICAgICAgICAgIC8vMzI3NzI6IE9ORV9NSU5VU19DT05TVEFOVF9DT0xPUlxuICAgICAgICB9O1xuICAgIFxuICAgICAgICB2YXIgV0VCR0xfVFlQRV9TSVpFUyA9IHtcbiAgICAgICAgICAgICdTQ0FMQVInOiAxLFxuICAgICAgICAgICAgJ1ZFQzInOiAyLFxuICAgICAgICAgICAgJ1ZFQzMnOiAzLFxuICAgICAgICAgICAgJ1ZFQzQnOiA0LFxuICAgICAgICAgICAgJ01BVDInOiA0LFxuICAgICAgICAgICAgJ01BVDMnOiA5LFxuICAgICAgICAgICAgJ01BVDQnOiAxNlxuICAgICAgICB9O1xuICAgIFxuICAgICAgICB2YXIgUEFUSF9QUk9QRVJUSUVTID0ge1xuICAgICAgICAgICAgc2NhbGU6ICdzY2FsZScsXG4gICAgICAgICAgICB0cmFuc2xhdGlvbjogJ3Bvc2l0aW9uJyxcbiAgICAgICAgICAgIHJvdGF0aW9uOiAncXVhdGVybmlvbicsXG4gICAgICAgICAgICB3ZWlnaHRzOiAnbW9ycGhUYXJnZXRJbmZsdWVuY2VzJ1xuICAgICAgICB9O1xuICAgIFxuICAgICAgICB2YXIgSU5URVJQT0xBVElPTiA9IHtcbiAgICAgICAgICAgIENVQklDU1BMSU5FOiBUSFJFRS5JbnRlcnBvbGF0ZVNtb290aCwgLy8gV2UgdXNlIGN1c3RvbSBpbnRlcnBvbGF0aW9uIEdMVEZDdWJpY1NwbGluZUludGVycG9sYXRpb24gZm9yIENVQklDU1BMSU5FLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBLZXlmcmFtZVRyYWNrLm9wdGltaXplKCkgY2FuJ3QgaGFuZGxlIGdsVEYgQ3ViaWMgU3BsaW5lIG91dHB1dCB2YWx1ZXMgbGF5b3V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1c2luZyBUSFJFRS5JbnRlcnBvbGF0ZVNtb290aCBmb3IgS2V5ZnJhbWVUcmFjayBpbnN0YW50aWF0aW9uIHRvIHByZXZlbnQgb3B0aW1pemF0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTZWUgS2V5ZnJhbWVUcmFjay5vcHRpbWl6ZSgpIGZvciB0aGUgZGV0YWlsLlxuICAgICAgICAgICAgTElORUFSOiBUSFJFRS5JbnRlcnBvbGF0ZUxpbmVhcixcbiAgICAgICAgICAgIFNURVA6IFRIUkVFLkludGVycG9sYXRlRGlzY3JldGVcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgdmFyIFNUQVRFU19FTkFCTEVTID0ge1xuICAgICAgICAgICAgMjg4NDogJ0NVTExfRkFDRScsXG4gICAgICAgICAgICAyOTI5OiAnREVQVEhfVEVTVCcsXG4gICAgICAgICAgICAzMDQyOiAnQkxFTkQnLFxuICAgICAgICAgICAgMzA4OTogJ1NDSVNTT1JfVEVTVCcsXG4gICAgICAgICAgICAzMjgyMzogJ1BPTFlHT05fT0ZGU0VUX0ZJTEwnLFxuICAgICAgICAgICAgMzI5MjY6ICdTQU1QTEVfQUxQSEFfVE9fQ09WRVJBR0UnXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIHZhciBBTFBIQV9NT0RFUyA9IHtcbiAgICAgICAgICAgIE9QQVFVRTogJ09QQVFVRScsXG4gICAgICAgICAgICBNQVNLOiAnTUFTSycsXG4gICAgICAgICAgICBCTEVORDogJ0JMRU5EJ1xuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvKiBVVElMSVRZIEZVTkNUSU9OUyAqL1xuICAgIFxuICAgICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKCB1cmwsIHBhdGggKSB7XG4gICAgXG4gICAgICAgICAgICAvLyBJbnZhbGlkIFVSTFxuICAgICAgICAgICAgaWYgKCB0eXBlb2YgdXJsICE9PSAnc3RyaW5nJyB8fCB1cmwgPT09ICcnICkgcmV0dXJuICcnO1xuICAgIFxuICAgICAgICAgICAgLy8gQWJzb2x1dGUgVVJMIGh0dHA6Ly8saHR0cHM6Ly8sLy9cbiAgICAgICAgICAgIGlmICggL14oaHR0cHM/Oik/XFwvXFwvL2kudGVzdCggdXJsICkgKSByZXR1cm4gdXJsO1xuICAgIFxuICAgICAgICAgICAgLy8gRGF0YSBVUklcbiAgICAgICAgICAgIGlmICggL15kYXRhOi4qLC4qJC9pLnRlc3QoIHVybCApICkgcmV0dXJuIHVybDtcbiAgICBcbiAgICAgICAgICAgIC8vIEJsb2IgVVJMXG4gICAgICAgICAgICBpZiAoIC9eYmxvYjouKiQvaS50ZXN0KCB1cmwgKSApIHJldHVybiB1cmw7XG4gICAgXG4gICAgICAgICAgICAvLyBSZWxhdGl2ZSBVUkxcbiAgICAgICAgICAgIHJldHVybiBwYXRoICsgdXJsO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI2RlZmF1bHQtbWF0ZXJpYWxcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZURlZmF1bHRNYXRlcmlhbCgpIHtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwoIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogMHhGRkZGRkYsXG4gICAgICAgICAgICAgICAgZW1pc3NpdmU6IDB4MDAwMDAwLFxuICAgICAgICAgICAgICAgIG1ldGFsbmVzczogMSxcbiAgICAgICAgICAgICAgICByb3VnaG5lc3M6IDEsXG4gICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRlcHRoVGVzdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzaWRlOiBUSFJFRS5Gcm9udFNpZGVcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNtb3JwaC10YXJnZXRzXG4gICAgICAgICAqXG4gICAgICAgICAqIFRPRE86IEltcGxlbWVudCBzdXBwb3J0IGZvciBtb3JwaCB0YXJnZXRzIG9uIFRBTkdFTlQgYXR0cmlidXRlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge1RIUkVFLk1lc2h9IG1lc2hcbiAgICAgICAgICogQHBhcmFtIHtHTFRGLk1lc2h9IG1lc2hEZWZcbiAgICAgICAgICogQHBhcmFtIHtHTFRGLlByaW1pdGl2ZX0gcHJpbWl0aXZlRGVmXG4gICAgICAgICAqIEBwYXJhbSB7QXJyYXk8VEhSRUUuQnVmZmVyQXR0cmlidXRlPn0gYWNjZXNzb3JzXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBhZGRNb3JwaFRhcmdldHMoIG1lc2gsIG1lc2hEZWYsIHByaW1pdGl2ZURlZiwgYWNjZXNzb3JzICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIGdlb21ldHJ5ID0gbWVzaC5nZW9tZXRyeTtcbiAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9IG1lc2gubWF0ZXJpYWw7XG4gICAgXG4gICAgICAgICAgICB2YXIgdGFyZ2V0cyA9IHByaW1pdGl2ZURlZi50YXJnZXRzO1xuICAgICAgICAgICAgdmFyIG1vcnBoQXR0cmlidXRlcyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcztcbiAgICBcbiAgICAgICAgICAgIG1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbiA9IFtdO1xuICAgICAgICAgICAgbW9ycGhBdHRyaWJ1dGVzLm5vcm1hbCA9IFtdO1xuICAgIFxuICAgICAgICAgICAgbWF0ZXJpYWwubW9ycGhUYXJnZXRzID0gdHJ1ZTtcbiAgICBcbiAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgaWwgPSB0YXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0YXJnZXRzWyBpIF07XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSAnbW9ycGhUYXJnZXQnICsgaTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcG9zaXRpb25BdHRyaWJ1dGUsIG5vcm1hbEF0dHJpYnV0ZTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHRhcmdldC5QT1NJVElPTiAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBUaHJlZS5qcyBtb3JwaCBmb3JtdWxhIGlzXG4gICAgICAgICAgICAgICAgICAgIC8vICAgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICsgd2VpZ2h0MCAqICggbW9ycGhUYXJnZXQwIC0gcG9zaXRpb24gKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgKyB3ZWlnaHQxICogKCBtb3JwaFRhcmdldDEgLSBwb3NpdGlvbiApXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuLi5cbiAgICAgICAgICAgICAgICAgICAgLy8gd2hpbGUgdGhlIGdsVEYgb25lIGlzXG4gICAgICAgICAgICAgICAgICAgIC8vICAgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICsgd2VpZ2h0MCAqIG1vcnBoVGFyZ2V0MFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgKyB3ZWlnaHQxICogbW9ycGhUYXJnZXQxXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuLi5cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlbiBhZGRpbmcgcG9zaXRpb24gdG8gbW9ycGhUYXJnZXQuXG4gICAgICAgICAgICAgICAgICAgIC8vIFNvIG1vcnBoVGFyZ2V0IHZhbHVlIHdpbGwgZGVwZW5kIG9uIG1lc2gncyBwb3NpdGlvbiwgdGhlbiBjbG9uaW5nIGF0dHJpYnV0ZVxuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgdGhlIGNhc2UgaWYgYXR0cmlidXRlIGlzIHNoYXJlZCBhbW9uZyB0d28gb3IgbW9yZSBtZXNoZXMuXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uQXR0cmlidXRlID0gY2xvbmVCdWZmZXJBdHRyaWJ1dGUoIGFjY2Vzc29yc1sgdGFyZ2V0LlBPU0lUSU9OIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGogPSAwLCBqbCA9IHBvc2l0aW9uQXR0cmlidXRlLmNvdW50OyBqIDwgamw7IGogKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbkF0dHJpYnV0ZS5zZXRYWVooXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbkF0dHJpYnV0ZS5nZXRYKCBqICkgKyBwb3NpdGlvbi5nZXRYKCBqICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25BdHRyaWJ1dGUuZ2V0WSggaiApICsgcG9zaXRpb24uZ2V0WSggaiApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uQXR0cmlidXRlLmdldFooIGogKSArIHBvc2l0aW9uLmdldFooIGogKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIENvcHlpbmcgdGhlIG9yaWdpbmFsIHBvc2l0aW9uIG5vdCB0byBhZmZlY3QgdGhlIGZpbmFsIHBvc2l0aW9uLlxuICAgICAgICAgICAgICAgICAgICAvLyBTZWUgdGhlIGZvcm11bGEgYWJvdmUuXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uQXR0cmlidXRlID0gY2xvbmVCdWZmZXJBdHRyaWJ1dGUoIGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBwb3NpdGlvbkF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbkF0dHJpYnV0ZS5uYW1lID0gYXR0cmlidXRlTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgbW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uLnB1c2goIHBvc2l0aW9uQXR0cmlidXRlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggdGFyZ2V0Lk5PUk1BTCAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5tb3JwaE5vcm1hbHMgPSB0cnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBzZWUgdGFyZ2V0LlBPU0lUSU9OJ3MgY29tbWVudFxuICAgIFxuICAgICAgICAgICAgICAgICAgICBub3JtYWxBdHRyaWJ1dGUgPSBjbG9uZUJ1ZmZlckF0dHJpYnV0ZSggYWNjZXNzb3JzWyB0YXJnZXQuTk9STUFMIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vcm1hbCA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaiA9IDAsIGpsID0gbm9ybWFsQXR0cmlidXRlLmNvdW50OyBqIDwgamw7IGogKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxBdHRyaWJ1dGUuc2V0WFlaKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGosXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsQXR0cmlidXRlLmdldFgoIGogKSArIG5vcm1hbC5nZXRYKCBqICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsQXR0cmlidXRlLmdldFkoIGogKSArIG5vcm1hbC5nZXRZKCBqICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsQXR0cmlidXRlLmdldFooIGogKSArIG5vcm1hbC5nZXRaKCBqIClcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBnZW9tZXRyeS5hdHRyaWJ1dGVzLm5vcm1hbCAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBub3JtYWxBdHRyaWJ1dGUgPSBjbG9uZUJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkuYXR0cmlidXRlcy5ub3JtYWwgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBub3JtYWxBdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsQXR0cmlidXRlLm5hbWUgPSBhdHRyaWJ1dGVOYW1lO1xuICAgICAgICAgICAgICAgICAgICBtb3JwaEF0dHJpYnV0ZXMubm9ybWFsLnB1c2goIG5vcm1hbEF0dHJpYnV0ZSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIG1lc2gudXBkYXRlTW9ycGhUYXJnZXRzKCk7XG4gICAgXG4gICAgICAgICAgICBpZiAoIG1lc2hEZWYud2VpZ2h0cyAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgaWwgPSBtZXNoRGVmLndlaWdodHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1lc2gubW9ycGhUYXJnZXRJbmZsdWVuY2VzWyBpIF0gPSBtZXNoRGVmLndlaWdodHNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gaXNQcmltaXRpdmVFcXVhbCggYSwgYiApIHtcbiAgICBcbiAgICAgICAgICAgIGlmICggYS5pbmRpY2VzICE9PSBiLmluZGljZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdmFyIGF0dHJpYkEgPSBhLmF0dHJpYnV0ZXMgfHwge307XG4gICAgICAgICAgICB2YXIgYXR0cmliQiA9IGIuYXR0cmlidXRlcyB8fCB7fTtcbiAgICAgICAgICAgIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKCBhdHRyaWJBICk7XG4gICAgICAgICAgICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyggYXR0cmliQiApO1xuICAgIFxuICAgICAgICAgICAgaWYgKCBrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGlsID0ga2V5c0EubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNBWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBhdHRyaWJBWyBrZXkgXSAhPT0gYXR0cmliQlsga2V5IF0gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBnZXRDYWNoZWRHZW9tZXRyeSggY2FjaGUsIG5ld1ByaW1pdGl2ZSApIHtcbiAgICBcbiAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgaWwgPSBjYWNoZS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgY2FjaGVkID0gY2FjaGVbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGlzUHJpbWl0aXZlRXF1YWwoIGNhY2hlZC5wcmltaXRpdmUsIG5ld1ByaW1pdGl2ZSApICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkLmdlb21ldHJ5O1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGNsb25lQnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG4gICAgXG4gICAgICAgICAgICBpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IGF0dHJpYnV0ZS5jb3VudDtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbVNpemUgPSBhdHRyaWJ1dGUuaXRlbVNpemU7XG4gICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gYXR0cmlidXRlLmFycmF5LnNsaWNlKCAwLCBjb3VudCAqIGl0ZW1TaXplICk7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgY291bnQ7ICsrIGkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGFycmF5WyBpIF0gPSBhdHRyaWJ1dGUuZ2V0WCggaSApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIGl0ZW1TaXplID49IDIgKSBhcnJheVsgaSArIDEgXSA9IGF0dHJpYnV0ZS5nZXRZKCBpICk7XG4gICAgICAgICAgICAgICAgICAgIGlmICggaXRlbVNpemUgPj0gMyApIGFycmF5WyBpICsgMiBdID0gYXR0cmlidXRlLmdldFooIGkgKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBpdGVtU2l6ZSA+PSA0ICkgYXJyYXlbIGkgKyAzIF0gPSBhdHRyaWJ1dGUuZ2V0VyggaSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBhdHRyaWJ1dGUubm9ybWFsaXplZCApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZS5jbG9uZSgpO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8qIEdMVEYgUEFSU0VSICovXG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIEdMVEZQYXJzZXIoIGpzb24sIGV4dGVuc2lvbnMsIG9wdGlvbnMgKSB7XG4gICAgXG4gICAgICAgICAgICB0aGlzLmpzb24gPSBqc29uIHx8IHt9O1xuICAgICAgICAgICAgdGhpcy5leHRlbnNpb25zID0gZXh0ZW5zaW9ucyB8fCB7fTtcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgXG4gICAgICAgICAgICAvLyBsb2FkZXIgb2JqZWN0IGNhY2hlXG4gICAgICAgICAgICB0aGlzLmNhY2hlID0gbmV3IEdMVEZSZWdpc3RyeSgpO1xuICAgIFxuICAgICAgICAgICAgLy8gQnVmZmVyR2VvbWV0cnkgY2FjaGluZ1xuICAgICAgICAgICAgdGhpcy5wcmltaXRpdmVDYWNoZSA9IFtdO1xuICAgIFxuICAgICAgICAgICAgdGhpcy50ZXh0dXJlTG9hZGVyID0gbmV3IFRIUkVFLlRleHR1cmVMb2FkZXIoIHRoaXMub3B0aW9ucy5tYW5hZ2VyICk7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmVMb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oIHRoaXMub3B0aW9ucy5jcm9zc09yaWdpbiApO1xuICAgIFxuICAgICAgICAgICAgdGhpcy5maWxlTG9hZGVyID0gbmV3IFRIUkVFLkZpbGVMb2FkZXIoIHRoaXMub3B0aW9ucy5tYW5hZ2VyICk7XG4gICAgICAgICAgICB0aGlzLmZpbGVMb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCAnYXJyYXlidWZmZXInICk7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgR0xURlBhcnNlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAoIG9uTG9hZCwgb25FcnJvciApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBqc29uID0gdGhpcy5qc29uO1xuICAgIFxuICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIGxvYWRlciBjYWNoZVxuICAgICAgICAgICAgdGhpcy5jYWNoZS5yZW1vdmVBbGwoKTtcbiAgICBcbiAgICAgICAgICAgIC8vIE1hcmsgdGhlIHNwZWNpYWwgbm9kZXMvbWVzaGVzIGluIGpzb24gZm9yIGVmZmljaWVudCBwYXJzZVxuICAgICAgICAgICAgdGhpcy5tYXJrRGVmcygpO1xuICAgIFxuICAgICAgICAgICAgLy8gRmlyZSB0aGUgY2FsbGJhY2sgb24gY29tcGxldGVcbiAgICAgICAgICAgIHRoaXMuZ2V0TXVsdGlEZXBlbmRlbmNpZXMoIFtcbiAgICBcbiAgICAgICAgICAgICAgICAnc2NlbmUnLFxuICAgICAgICAgICAgICAgICdhbmltYXRpb24nLFxuICAgICAgICAgICAgICAgICdjYW1lcmEnXG4gICAgXG4gICAgICAgICAgICBdICkudGhlbiggZnVuY3Rpb24gKCBkZXBlbmRlbmNpZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHNjZW5lcyA9IGRlcGVuZGVuY2llcy5zY2VuZXMgfHwgW107XG4gICAgICAgICAgICAgICAgdmFyIHNjZW5lID0gc2NlbmVzWyBqc29uLnNjZW5lIHx8IDAgXTtcbiAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9ucyA9IGRlcGVuZGVuY2llcy5hbmltYXRpb25zIHx8IFtdO1xuICAgICAgICAgICAgICAgIHZhciBhc3NldCA9IGpzb24uYXNzZXQ7XG4gICAgICAgICAgICAgICAgdmFyIGNhbWVyYXMgPSBkZXBlbmRlbmNpZXMuY2FtZXJhcyB8fCBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICBvbkxvYWQoIHNjZW5lLCBzY2VuZXMsIGNhbWVyYXMsIGFuaW1hdGlvbnMsIGFzc2V0ICk7XG4gICAgXG4gICAgICAgICAgICB9ICkuY2F0Y2goIG9uRXJyb3IgKTtcbiAgICBcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1hcmtzIHRoZSBzcGVjaWFsIG5vZGVzL21lc2hlcyBpbiBqc29uIGZvciBlZmZpY2llbnQgcGFyc2UuXG4gICAgICAgICAqL1xuICAgICAgICBHTFRGUGFyc2VyLnByb3RvdHlwZS5tYXJrRGVmcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBub2RlRGVmcyA9IHRoaXMuanNvbi5ub2RlcyB8fCBbXTtcbiAgICAgICAgICAgIHZhciBza2luRGVmcyA9IHRoaXMuanNvbi5za2lucyB8fCBbXTtcbiAgICAgICAgICAgIHZhciBtZXNoRGVmcyA9IHRoaXMuanNvbi5tZXNoZXMgfHwgW107XG4gICAgXG4gICAgICAgICAgICB2YXIgbWVzaFJlZmVyZW5jZXMgPSB7fTtcbiAgICAgICAgICAgIHZhciBtZXNoVXNlcyA9IHt9O1xuICAgIFxuICAgICAgICAgICAgLy8gTm90aGluZyBpbiB0aGUgbm9kZSBkZWZpbml0aW9uIGluZGljYXRlcyB3aGV0aGVyIGl0IGlzIGEgQm9uZSBvciBhblxuICAgICAgICAgICAgLy8gT2JqZWN0M0QuIFVzZSB0aGUgc2tpbnMnIGpvaW50IHJlZmVyZW5jZXMgdG8gbWFyayBib25lcy5cbiAgICAgICAgICAgIGZvciAoIHZhciBza2luSW5kZXggPSAwLCBza2luTGVuZ3RoID0gc2tpbkRlZnMubGVuZ3RoOyBza2luSW5kZXggPCBza2luTGVuZ3RoOyBza2luSW5kZXggKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGpvaW50cyA9IHNraW5EZWZzWyBza2luSW5kZXggXS5qb2ludHM7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBpbCA9IGpvaW50cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbm9kZURlZnNbIGpvaW50c1sgaSBdIF0uaXNCb25lID0gdHJ1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBNZXNoZXMgY2FuIChhbmQgc2hvdWxkKSBiZSByZXVzZWQgYnkgbXVsdGlwbGUgbm9kZXMgaW4gYSBnbFRGIGFzc2V0LiBUb1xuICAgICAgICAgICAgLy8gYXZvaWQgaGF2aW5nIG1vcmUgdGhhbiBvbmUgVEhSRUUuTWVzaCB3aXRoIHRoZSBzYW1lIG5hbWUsIGNvdW50XG4gICAgICAgICAgICAvLyByZWZlcmVuY2VzIGFuZCByZW5hbWUgaW5zdGFuY2VzIGJlbG93LlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEV4YW1wbGU6IENlc2l1bU1pbGtUcnVjayBzYW1wbGUgbW9kZWwgcmV1c2VzIFwiV2hlZWxcIiBtZXNoZXMuXG4gICAgICAgICAgICBmb3IgKCB2YXIgbm9kZUluZGV4ID0gMCwgbm9kZUxlbmd0aCA9IG5vZGVEZWZzLmxlbmd0aDsgbm9kZUluZGV4IDwgbm9kZUxlbmd0aDsgbm9kZUluZGV4ICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBub2RlRGVmID0gbm9kZURlZnNbIG5vZGVJbmRleCBdO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbm9kZURlZi5tZXNoICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggbWVzaFJlZmVyZW5jZXNbIG5vZGVEZWYubWVzaCBdID09PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNoUmVmZXJlbmNlc1sgbm9kZURlZi5tZXNoIF0gPSBtZXNoVXNlc1sgbm9kZURlZi5tZXNoIF0gPSAwO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1lc2hSZWZlcmVuY2VzWyBub2RlRGVmLm1lc2ggXSArKztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gTm90aGluZyBpbiB0aGUgbWVzaCBkZWZpbml0aW9uIGluZGljYXRlcyB3aGV0aGVyIGl0IGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIGEgU2tpbm5lZE1lc2ggb3IgTWVzaC4gVXNlIHRoZSBub2RlJ3MgbWVzaCByZWZlcmVuY2VcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gbWFyayBTa2lubmVkTWVzaCBpZiBub2RlIGhhcyBza2luLlxuICAgICAgICAgICAgICAgICAgICBpZiAoIG5vZGVEZWYuc2tpbiAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzaERlZnNbIG5vZGVEZWYubWVzaCBdLmlzU2tpbm5lZE1lc2ggPSB0cnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdGhpcy5qc29uLm1lc2hSZWZlcmVuY2VzID0gbWVzaFJlZmVyZW5jZXM7XG4gICAgICAgICAgICB0aGlzLmpzb24ubWVzaFVzZXMgPSBtZXNoVXNlcztcbiAgICBcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcXVlc3RzIHRoZSBzcGVjaWZpZWQgZGVwZW5kZW5jeSBhc3luY2hyb25vdXNseSwgd2l0aCBjYWNoaW5nLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZTxPYmplY3Q+fVxuICAgICAgICAgKi9cbiAgICAgICAgR0xURlBhcnNlci5wcm90b3R5cGUuZ2V0RGVwZW5kZW5jeSA9IGZ1bmN0aW9uICggdHlwZSwgaW5kZXggKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgY2FjaGVLZXkgPSB0eXBlICsgJzonICsgaW5kZXg7XG4gICAgICAgICAgICB2YXIgZGVwZW5kZW5jeSA9IHRoaXMuY2FjaGUuZ2V0KCBjYWNoZUtleSApO1xuICAgIFxuICAgICAgICAgICAgaWYgKCAhIGRlcGVuZGVuY3kgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGZuTmFtZSA9ICdsb2FkJyArIHR5cGUuY2hhckF0KCAwICkudG9VcHBlckNhc2UoKSArIHR5cGUuc2xpY2UoIDEgKTtcbiAgICAgICAgICAgICAgICBkZXBlbmRlbmN5ID0gdGhpc1sgZm5OYW1lIF0oIGluZGV4ICk7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZS5hZGQoIGNhY2hlS2V5LCBkZXBlbmRlbmN5ICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gZGVwZW5kZW5jeTtcbiAgICBcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcXVlc3RzIGFsbCBkZXBlbmRlbmNpZXMgb2YgdGhlIHNwZWNpZmllZCB0eXBlIGFzeW5jaHJvbm91c2x5LCB3aXRoIGNhY2hpbmcuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAgICAgICAqIEByZXR1cm4ge1Byb21pc2U8QXJyYXk8T2JqZWN0Pj59XG4gICAgICAgICAqL1xuICAgICAgICBHTFRGUGFyc2VyLnByb3RvdHlwZS5nZXREZXBlbmRlbmNpZXMgPSBmdW5jdGlvbiAoIHR5cGUgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgZGVwZW5kZW5jaWVzID0gdGhpcy5jYWNoZS5nZXQoIHR5cGUgKTtcbiAgICBcbiAgICAgICAgICAgIGlmICggISBkZXBlbmRlbmNpZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHBhcnNlciA9IHRoaXM7XG4gICAgICAgICAgICAgICAgdmFyIGRlZnMgPSB0aGlzLmpzb25bIHR5cGUgKyAoIHR5cGUgPT09ICdtZXNoJyA/ICdlcycgOiAncycgKSBdIHx8IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgIGRlcGVuZGVuY2llcyA9IFByb21pc2UuYWxsKCBkZWZzLm1hcCggZnVuY3Rpb24gKCBkZWYsIGluZGV4ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VyLmdldERlcGVuZGVuY3koIHR5cGUsIGluZGV4ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZS5hZGQoIHR5cGUsIGRlcGVuZGVuY2llcyApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGRlcGVuZGVuY2llcztcbiAgICBcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcXVlc3RzIGFsbCBtdWx0aXBsZSBkZXBlbmRlbmNpZXMgb2YgdGhlIHNwZWNpZmllZCB0eXBlcyBhc3luY2hyb25vdXNseSwgd2l0aCBjYWNoaW5nLlxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IHR5cGVzXG4gICAgICAgICAqIEByZXR1cm4ge1Byb21pc2U8T2JqZWN0PEFycmF5PE9iamVjdD4+Pn1cbiAgICAgICAgICovXG4gICAgICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmdldE11bHRpRGVwZW5kZW5jaWVzID0gZnVuY3Rpb24gKCB0eXBlcyApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciByZXN1bHRzID0ge307XG4gICAgICAgICAgICB2YXIgcGVuZGluZ3MgPSBbXTtcbiAgICBcbiAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgaWwgPSB0eXBlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHR5cGVzWyBpIF07XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXREZXBlbmRlbmNpZXMoIHR5cGUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRoZW4oIGZ1bmN0aW9uICgga2V5LCB2YWx1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0c1sga2V5IF0gPSB2YWx1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICB9LmJpbmQoIHRoaXMsIHR5cGUgKyAoIHR5cGUgPT09ICdtZXNoJyA/ICdlcycgOiAncycgKSApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgcGVuZGluZ3MucHVzaCggdmFsdWUgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbCggcGVuZGluZ3MgKS50aGVuKCBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgXG4gICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI2J1ZmZlcnMtYW5kLWJ1ZmZlci12aWV3c1xuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gYnVmZmVySW5kZXhcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZTxBcnJheUJ1ZmZlcj59XG4gICAgICAgICAqL1xuICAgICAgICBHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkQnVmZmVyID0gZnVuY3Rpb24gKCBidWZmZXJJbmRleCApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBidWZmZXJEZWYgPSB0aGlzLmpzb24uYnVmZmVyc1sgYnVmZmVySW5kZXggXTtcbiAgICAgICAgICAgIHZhciBsb2FkZXIgPSB0aGlzLmZpbGVMb2FkZXI7XG4gICAgXG4gICAgICAgICAgICBpZiAoIGJ1ZmZlckRlZi50eXBlICYmIGJ1ZmZlckRlZi50eXBlICE9PSAnYXJyYXlidWZmZXInICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggJ1RIUkVFLkdMVEZMb2FkZXI6ICcgKyBidWZmZXJEZWYudHlwZSArICcgYnVmZmVyIHR5cGUgaXMgbm90IHN1cHBvcnRlZC4nICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBJZiBwcmVzZW50LCBHTEIgY29udGFpbmVyIGlzIHJlcXVpcmVkIHRvIGJlIHRoZSBmaXJzdCBidWZmZXIuXG4gICAgICAgICAgICBpZiAoIGJ1ZmZlckRlZi51cmkgPT09IHVuZGVmaW5lZCAmJiBidWZmZXJJbmRleCA9PT0gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCB0aGlzLmV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0JJTkFSWV9HTFRGIF0uYm9keSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoIGZ1bmN0aW9uICggcmVzb2x2ZSwgcmVqZWN0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGxvYWRlci5sb2FkKCByZXNvbHZlVVJMKCBidWZmZXJEZWYudXJpLCBvcHRpb25zLnBhdGggKSwgcmVzb2x2ZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCggbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogRmFpbGVkIHRvIGxvYWQgYnVmZmVyIFwiJyArIGJ1ZmZlckRlZi51cmkgKyAnXCIuJyApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNidWZmZXJzLWFuZC1idWZmZXItdmlld3NcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGJ1ZmZlclZpZXdJbmRleFxuICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5QnVmZmVyPn1cbiAgICAgICAgICovXG4gICAgICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRCdWZmZXJWaWV3ID0gZnVuY3Rpb24gKCBidWZmZXJWaWV3SW5kZXggKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgYnVmZmVyVmlld0RlZiA9IHRoaXMuanNvbi5idWZmZXJWaWV3c1sgYnVmZmVyVmlld0luZGV4IF07XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXREZXBlbmRlbmN5KCAnYnVmZmVyJywgYnVmZmVyVmlld0RlZi5idWZmZXIgKS50aGVuKCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYnl0ZUxlbmd0aCA9IGJ1ZmZlclZpZXdEZWYuYnl0ZUxlbmd0aCB8fCAwO1xuICAgICAgICAgICAgICAgIHZhciBieXRlT2Zmc2V0ID0gYnVmZmVyVmlld0RlZi5ieXRlT2Zmc2V0IHx8IDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlci5zbGljZSggYnl0ZU9mZnNldCwgYnl0ZU9mZnNldCArIGJ5dGVMZW5ndGggKTtcbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjYWNjZXNzb3JzXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhY2Nlc3NvckluZGV4XG4gICAgICAgICAqIEByZXR1cm4ge1Byb21pc2U8VEhSRUUuQnVmZmVyQXR0cmlidXRlfFRIUkVFLkludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlPn1cbiAgICAgICAgICovXG4gICAgICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRBY2Nlc3NvciA9IGZ1bmN0aW9uICggYWNjZXNzb3JJbmRleCApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBwYXJzZXIgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGpzb24gPSB0aGlzLmpzb247XG4gICAgXG4gICAgICAgICAgICB2YXIgYWNjZXNzb3JEZWYgPSB0aGlzLmpzb24uYWNjZXNzb3JzWyBhY2Nlc3NvckluZGV4IF07XG4gICAgXG4gICAgICAgICAgICB2YXIgcGVuZGluZ0J1ZmZlclZpZXdzID0gW107XG4gICAgXG4gICAgICAgICAgICBpZiAoIGFjY2Vzc29yRGVmLmJ1ZmZlclZpZXcgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBwZW5kaW5nQnVmZmVyVmlld3MucHVzaCggdGhpcy5nZXREZXBlbmRlbmN5KCAnYnVmZmVyVmlldycsIGFjY2Vzc29yRGVmLmJ1ZmZlclZpZXcgKSApO1xuICAgIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICBwZW5kaW5nQnVmZmVyVmlld3MucHVzaCggbnVsbCApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCBhY2Nlc3NvckRlZi5zcGFyc2UgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBwZW5kaW5nQnVmZmVyVmlld3MucHVzaCggdGhpcy5nZXREZXBlbmRlbmN5KCAnYnVmZmVyVmlldycsIGFjY2Vzc29yRGVmLnNwYXJzZS5pbmRpY2VzLmJ1ZmZlclZpZXcgKSApO1xuICAgICAgICAgICAgICAgIHBlbmRpbmdCdWZmZXJWaWV3cy5wdXNoKCB0aGlzLmdldERlcGVuZGVuY3koICdidWZmZXJWaWV3JywgYWNjZXNzb3JEZWYuc3BhcnNlLnZhbHVlcy5idWZmZXJWaWV3ICkgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbCggcGVuZGluZ0J1ZmZlclZpZXdzICkudGhlbiggZnVuY3Rpb24gKCBidWZmZXJWaWV3cyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyVmlldyA9IGJ1ZmZlclZpZXdzWyAwIF07XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGl0ZW1TaXplID0gV0VCR0xfVFlQRV9TSVpFU1sgYWNjZXNzb3JEZWYudHlwZSBdO1xuICAgICAgICAgICAgICAgIHZhciBUeXBlZEFycmF5ID0gV0VCR0xfQ09NUE9ORU5UX1RZUEVTWyBhY2Nlc3NvckRlZi5jb21wb25lbnRUeXBlIF07XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gRm9yIFZFQzM6IGl0ZW1TaXplIGlzIDMsIGVsZW1lbnRCeXRlcyBpcyA0LCBpdGVtQnl0ZXMgaXMgMTIuXG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRCeXRlcyA9IFR5cGVkQXJyYXkuQllURVNfUEVSX0VMRU1FTlQ7XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW1CeXRlcyA9IGVsZW1lbnRCeXRlcyAqIGl0ZW1TaXplO1xuICAgICAgICAgICAgICAgIHZhciBieXRlT2Zmc2V0ID0gYWNjZXNzb3JEZWYuYnl0ZU9mZnNldCB8fCAwO1xuICAgICAgICAgICAgICAgIHZhciBieXRlU3RyaWRlID0ganNvbi5idWZmZXJWaWV3c1sgYWNjZXNzb3JEZWYuYnVmZmVyVmlldyBdLmJ5dGVTdHJpZGU7XG4gICAgICAgICAgICAgICAgdmFyIG5vcm1hbGl6ZWQgPSBhY2Nlc3NvckRlZi5ub3JtYWxpemVkID09PSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBhcnJheSwgYnVmZmVyQXR0cmlidXRlO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIFRoZSBidWZmZXIgaXMgbm90IGludGVybGVhdmVkIGlmIHRoZSBzdHJpZGUgaXMgdGhlIGl0ZW0gc2l6ZSBpbiBieXRlcy5cbiAgICAgICAgICAgICAgICBpZiAoIGJ5dGVTdHJpZGUgJiYgYnl0ZVN0cmlkZSAhPT0gaXRlbUJ5dGVzICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgaWJDYWNoZUtleSA9ICdJbnRlcmxlYXZlZEJ1ZmZlcjonICsgYWNjZXNzb3JEZWYuYnVmZmVyVmlldyArICc6JyArIGFjY2Vzc29yRGVmLmNvbXBvbmVudFR5cGU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpYiA9IHBhcnNlci5jYWNoZS5nZXQoIGliQ2FjaGVLZXkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAhIGliICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHRoZSBmdWxsIGJ1ZmZlciBpZiBpdCdzIGludGVybGVhdmVkLlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXkgPSBuZXcgVHlwZWRBcnJheSggYnVmZmVyVmlldyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW50ZWdlciBwYXJhbWV0ZXJzIHRvIElCL0lCQSBhcmUgaW4gYXJyYXkgZWxlbWVudHMsIG5vdCBieXRlcy5cbiAgICAgICAgICAgICAgICAgICAgICAgIGliID0gbmV3IFRIUkVFLkludGVybGVhdmVkQnVmZmVyKCBhcnJheSwgYnl0ZVN0cmlkZSAvIGVsZW1lbnRCeXRlcyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VyLmNhY2hlLmFkZCggaWJDYWNoZUtleSwgaWIgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBidWZmZXJBdHRyaWJ1dGUgPSBuZXcgVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUoIGliLCBpdGVtU2l6ZSwgYnl0ZU9mZnNldCAvIGVsZW1lbnRCeXRlcywgbm9ybWFsaXplZCApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggYnVmZmVyVmlldyA9PT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5ID0gbmV3IFR5cGVkQXJyYXkoIGFjY2Vzc29yRGVmLmNvdW50ICogaXRlbVNpemUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5ID0gbmV3IFR5cGVkQXJyYXkoIGJ1ZmZlclZpZXcsIGJ5dGVPZmZzZXQsIGFjY2Vzc29yRGVmLmNvdW50ICogaXRlbVNpemUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBidWZmZXJBdHRyaWJ1dGUgPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNzcGFyc2UtYWNjZXNzb3JzXG4gICAgICAgICAgICAgICAgaWYgKCBhY2Nlc3NvckRlZi5zcGFyc2UgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW1TaXplSW5kaWNlcyA9IFdFQkdMX1RZUEVfU0laRVMuU0NBTEFSO1xuICAgICAgICAgICAgICAgICAgICB2YXIgVHlwZWRBcnJheUluZGljZXMgPSBXRUJHTF9DT01QT05FTlRfVFlQRVNbIGFjY2Vzc29yRGVmLnNwYXJzZS5pbmRpY2VzLmNvbXBvbmVudFR5cGUgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ5dGVPZmZzZXRJbmRpY2VzID0gYWNjZXNzb3JEZWYuc3BhcnNlLmluZGljZXMuYnl0ZU9mZnNldCB8fCAwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnl0ZU9mZnNldFZhbHVlcyA9IGFjY2Vzc29yRGVmLnNwYXJzZS52YWx1ZXMuYnl0ZU9mZnNldCB8fCAwO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc3BhcnNlSW5kaWNlcyA9IG5ldyBUeXBlZEFycmF5SW5kaWNlcyggYnVmZmVyVmlld3NbIDEgXSwgYnl0ZU9mZnNldEluZGljZXMsIGFjY2Vzc29yRGVmLnNwYXJzZS5jb3VudCAqIGl0ZW1TaXplSW5kaWNlcyApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3BhcnNlVmFsdWVzID0gbmV3IFR5cGVkQXJyYXkoIGJ1ZmZlclZpZXdzWyAyIF0sIGJ5dGVPZmZzZXRWYWx1ZXMsIGFjY2Vzc29yRGVmLnNwYXJzZS5jb3VudCAqIGl0ZW1TaXplICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggYnVmZmVyVmlldyAhPT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEF2b2lkIG1vZGlmeWluZyB0aGUgb3JpZ2luYWwgQXJyYXlCdWZmZXIsIGlmIHRoZSBidWZmZXJWaWV3IHdhc24ndCBpbml0aWFsaXplZCB3aXRoIHplcm9lcy5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlckF0dHJpYnV0ZS5zZXRBcnJheSggYnVmZmVyQXR0cmlidXRlLmFycmF5LnNsaWNlKCkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGlsID0gc3BhcnNlSW5kaWNlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHNwYXJzZUluZGljZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlckF0dHJpYnV0ZS5zZXRYKCBpbmRleCwgc3BhcnNlVmFsdWVzWyBpICogaXRlbVNpemUgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBpdGVtU2l6ZSA+PSAyICkgYnVmZmVyQXR0cmlidXRlLnNldFkoIGluZGV4LCBzcGFyc2VWYWx1ZXNbIGkgKiBpdGVtU2l6ZSArIDEgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBpdGVtU2l6ZSA+PSAzICkgYnVmZmVyQXR0cmlidXRlLnNldFooIGluZGV4LCBzcGFyc2VWYWx1ZXNbIGkgKiBpdGVtU2l6ZSArIDIgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBpdGVtU2l6ZSA+PSA0ICkgYnVmZmVyQXR0cmlidXRlLnNldFcoIGluZGV4LCBzcGFyc2VWYWx1ZXNbIGkgKiBpdGVtU2l6ZSArIDMgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBpdGVtU2l6ZSA+PSA1ICkgdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogVW5zdXBwb3J0ZWQgaXRlbVNpemUgaW4gc3BhcnNlIEJ1ZmZlckF0dHJpYnV0ZS4nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlckF0dHJpYnV0ZTtcbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMCN0ZXh0dXJlc1xuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gdGV4dHVyZUluZGV4XG4gICAgICAgICAqIEByZXR1cm4ge1Byb21pc2U8VEhSRUUuVGV4dHVyZT59XG4gICAgICAgICAqL1xuICAgICAgICBHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkVGV4dHVyZSA9IGZ1bmN0aW9uICggdGV4dHVyZUluZGV4ICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHBhcnNlciA9IHRoaXM7XG4gICAgICAgICAgICB2YXIganNvbiA9IHRoaXMuanNvbjtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICAgICAgdmFyIHRleHR1cmVMb2FkZXIgPSB0aGlzLnRleHR1cmVMb2FkZXI7XG4gICAgXG4gICAgICAgICAgICB2YXIgVVJMID0gd2luZG93LlVSTCB8fCB3aW5kb3cud2Via2l0VVJMO1xuICAgIFxuICAgICAgICAgICAgdmFyIHRleHR1cmVEZWYgPSBqc29uLnRleHR1cmVzWyB0ZXh0dXJlSW5kZXggXTtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBqc29uLmltYWdlc1sgdGV4dHVyZURlZi5zb3VyY2UgXTtcbiAgICAgICAgICAgIHZhciBzb3VyY2VVUkkgPSBzb3VyY2UudXJpO1xuICAgICAgICAgICAgdmFyIGlzT2JqZWN0VVJMID0gZmFsc2U7XG4gICAgXG4gICAgICAgICAgICBpZiAoIHNvdXJjZS5idWZmZXJWaWV3ICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gTG9hZCBiaW5hcnkgaW1hZ2UgZGF0YSBmcm9tIGJ1ZmZlclZpZXcsIGlmIHByb3ZpZGVkLlxuICAgIFxuICAgICAgICAgICAgICAgIHNvdXJjZVVSSSA9IHBhcnNlci5nZXREZXBlbmRlbmN5KCAnYnVmZmVyVmlldycsIHNvdXJjZS5idWZmZXJWaWV3ICkudGhlbiggZnVuY3Rpb24gKCBidWZmZXJWaWV3ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpc09iamVjdFVSTCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoIFsgYnVmZmVyVmlldyBdLCB7IHR5cGU6IHNvdXJjZS5taW1lVHlwZSB9ICk7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZVVSSSA9IFVSTC5jcmVhdGVPYmplY3RVUkwoIGJsb2IgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZVVSSTtcbiAgICBcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCBzb3VyY2VVUkkgKS50aGVuKCBmdW5jdGlvbiAoIHNvdXJjZVVSSSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBMb2FkIFRleHR1cmUgcmVzb3VyY2UuXG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGxvYWRlciA9IFRIUkVFLkxvYWRlci5IYW5kbGVycy5nZXQoIHNvdXJjZVVSSSApIHx8IHRleHR1cmVMb2FkZXI7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCBmdW5jdGlvbiAoIHJlc29sdmUsIHJlamVjdCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbG9hZGVyLmxvYWQoIHJlc29sdmVVUkwoIHNvdXJjZVVSSSwgb3B0aW9ucy5wYXRoICksIHJlc29sdmUsIHVuZGVmaW5lZCwgcmVqZWN0ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgfSApLnRoZW4oIGZ1bmN0aW9uICggdGV4dHVyZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBDbGVhbiB1cCByZXNvdXJjZXMgYW5kIGNvbmZpZ3VyZSBUZXh0dXJlLlxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggaXNPYmplY3RVUkwgPT09IHRydWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwoIHNvdXJjZVVSSSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLmZsaXBZID0gZmFsc2U7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCB0ZXh0dXJlRGVmLm5hbWUgIT09IHVuZGVmaW5lZCApIHRleHR1cmUubmFtZSA9IHRleHR1cmVEZWYubmFtZTtcbiAgICBcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLmZvcm1hdCA9IHRleHR1cmVEZWYuZm9ybWF0ICE9PSB1bmRlZmluZWQgPyBXRUJHTF9URVhUVVJFX0ZPUk1BVFNbIHRleHR1cmVEZWYuZm9ybWF0IF0gOiBUSFJFRS5SR0JBRm9ybWF0O1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggdGV4dHVyZURlZi5pbnRlcm5hbEZvcm1hdCAhPT0gdW5kZWZpbmVkICYmIHRleHR1cmUuZm9ybWF0ICE9PSBXRUJHTF9URVhUVVJFX0ZPUk1BVFNbIHRleHR1cmVEZWYuaW50ZXJuYWxGb3JtYXQgXSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCAnVEhSRUUuR0xURkxvYWRlcjogVGhyZWUuanMgZG9lcyBub3Qgc3VwcG9ydCB0ZXh0dXJlIGludGVybmFsRm9ybWF0IHdoaWNoIGlzIGRpZmZlcmVudCBmcm9tIHRleHR1cmUgZm9ybWF0LiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpbnRlcm5hbEZvcm1hdCB3aWxsIGJlIGZvcmNlZCB0byBiZSB0aGUgc2FtZSB2YWx1ZSBhcyBmb3JtYXQuJyApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLnR5cGUgPSB0ZXh0dXJlRGVmLnR5cGUgIT09IHVuZGVmaW5lZCA/IFdFQkdMX1RFWFRVUkVfREFUQVRZUEVTWyB0ZXh0dXJlRGVmLnR5cGUgXSA6IFRIUkVFLlVuc2lnbmVkQnl0ZVR5cGU7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHNhbXBsZXJzID0ganNvbi5zYW1wbGVycyB8fCB7fTtcbiAgICAgICAgICAgICAgICB2YXIgc2FtcGxlciA9IHNhbXBsZXJzWyB0ZXh0dXJlRGVmLnNhbXBsZXIgXSB8fCB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLm1hZ0ZpbHRlciA9IFdFQkdMX0ZJTFRFUlNbIHNhbXBsZXIubWFnRmlsdGVyIF0gfHwgVEhSRUUuTGluZWFyRmlsdGVyO1xuICAgICAgICAgICAgICAgIHRleHR1cmUubWluRmlsdGVyID0gV0VCR0xfRklMVEVSU1sgc2FtcGxlci5taW5GaWx0ZXIgXSB8fCBUSFJFRS5MaW5lYXJNaXBNYXBMaW5lYXJGaWx0ZXI7XG4gICAgICAgICAgICAgICAgdGV4dHVyZS53cmFwUyA9IFdFQkdMX1dSQVBQSU5HU1sgc2FtcGxlci53cmFwUyBdIHx8IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xuICAgICAgICAgICAgICAgIHRleHR1cmUud3JhcFQgPSBXRUJHTF9XUkFQUElOR1NbIHNhbXBsZXIud3JhcFQgXSB8fCBUSFJFRS5SZXBlYXRXcmFwcGluZztcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFzeW5jaHJvbm91c2x5IGFzc2lnbnMgYSB0ZXh0dXJlIHRvIHRoZSBnaXZlbiBtYXRlcmlhbCBwYXJhbWV0ZXJzLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gbWF0ZXJpYWxQYXJhbXNcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHR1cmVOYW1lXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0ZXh0dXJlSW5kZXhcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZX1cbiAgICAgICAgICovXG4gICAgICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmFzc2lnblRleHR1cmUgPSBmdW5jdGlvbiAoIG1hdGVyaWFsUGFyYW1zLCB0ZXh0dXJlTmFtZSwgdGV4dHVyZUluZGV4ICkge1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGVwZW5kZW5jeSggJ3RleHR1cmUnLCB0ZXh0dXJlSW5kZXggKS50aGVuKCBmdW5jdGlvbiAoIHRleHR1cmUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXNbIHRleHR1cmVOYW1lIF0gPSB0ZXh0dXJlO1xuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNtYXRlcmlhbHNcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG1hdGVyaWFsSW5kZXhcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZTxUSFJFRS5NYXRlcmlhbD59XG4gICAgICAgICAqL1xuICAgICAgICBHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkTWF0ZXJpYWwgPSBmdW5jdGlvbiAoIG1hdGVyaWFsSW5kZXggKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgcGFyc2VyID0gdGhpcztcbiAgICAgICAgICAgIHZhciBqc29uID0gdGhpcy5qc29uO1xuICAgICAgICAgICAgdmFyIGV4dGVuc2lvbnMgPSB0aGlzLmV4dGVuc2lvbnM7XG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWxEZWYgPSB0aGlzLmpzb24ubWF0ZXJpYWxzWyBtYXRlcmlhbEluZGV4IF07XG4gICAgXG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWxUeXBlO1xuICAgICAgICAgICAgdmFyIG1hdGVyaWFsUGFyYW1zID0ge307XG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWxFeHRlbnNpb25zID0gbWF0ZXJpYWxEZWYuZXh0ZW5zaW9ucyB8fCB7fTtcbiAgICBcbiAgICAgICAgICAgIHZhciBwZW5kaW5nID0gW107XG4gICAgXG4gICAgICAgICAgICBpZiAoIG1hdGVyaWFsRXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTIF0gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHNnRXh0ZW5zaW9uID0gZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTIF07XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxUeXBlID0gc2dFeHRlbnNpb24uZ2V0TWF0ZXJpYWxUeXBlKCBtYXRlcmlhbERlZiApO1xuICAgICAgICAgICAgICAgIHBlbmRpbmcucHVzaCggc2dFeHRlbnNpb24uZXh0ZW5kUGFyYW1zKCBtYXRlcmlhbFBhcmFtcywgbWF0ZXJpYWxEZWYsIHBhcnNlciApICk7XG4gICAgXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBtYXRlcmlhbERlZi5wYnJNZXRhbGxpY1JvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIFNwZWNpZmljYXRpb246XG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wI21ldGFsbGljLXJvdWdobmVzcy1tYXRlcmlhbFxuICAgIFxuICAgICAgICAgICAgICAgIG1hdGVyaWFsVHlwZSA9IFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBtZXRhbGxpY1JvdWdobmVzcyA9IG1hdGVyaWFsRGVmLnBick1ldGFsbGljUm91Z2huZXNzO1xuICAgIFxuICAgICAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLmNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKCAxLjAsIDEuMCwgMS4wICk7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMub3BhY2l0eSA9IDEuMDtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIEFycmF5LmlzQXJyYXkoIG1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvckZhY3RvciApICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBtZXRhbGxpY1JvdWdobmVzcy5iYXNlQ29sb3JGYWN0b3I7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLmNvbG9yLmZyb21BcnJheSggYXJyYXkgKTtcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMub3BhY2l0eSA9IGFycmF5WyAzIF07XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbWV0YWxsaWNSb3VnaG5lc3MuYmFzZUNvbG9yVGV4dHVyZSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nLnB1c2goIHBhcnNlci5hc3NpZ25UZXh0dXJlKCBtYXRlcmlhbFBhcmFtcywgJ21hcCcsIG1ldGFsbGljUm91Z2huZXNzLmJhc2VDb2xvclRleHR1cmUuaW5kZXggKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5tZXRhbG5lc3MgPSBtZXRhbGxpY1JvdWdobmVzcy5tZXRhbGxpY0ZhY3RvciAhPT0gdW5kZWZpbmVkID8gbWV0YWxsaWNSb3VnaG5lc3MubWV0YWxsaWNGYWN0b3IgOiAxLjA7XG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMucm91Z2huZXNzID0gbWV0YWxsaWNSb3VnaG5lc3Mucm91Z2huZXNzRmFjdG9yICE9PSB1bmRlZmluZWQgPyBtZXRhbGxpY1JvdWdobmVzcy5yb3VnaG5lc3NGYWN0b3IgOiAxLjA7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBtZXRhbGxpY1JvdWdobmVzcy5tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRleHR1cmVJbmRleCA9IG1ldGFsbGljUm91Z2huZXNzLm1ldGFsbGljUm91Z2huZXNzVGV4dHVyZS5pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZy5wdXNoKCBwYXJzZXIuYXNzaWduVGV4dHVyZSggbWF0ZXJpYWxQYXJhbXMsICdtZXRhbG5lc3NNYXAnLCB0ZXh0dXJlSW5kZXggKSApO1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nLnB1c2goIHBhcnNlci5hc3NpZ25UZXh0dXJlKCBtYXRlcmlhbFBhcmFtcywgJ3JvdWdobmVzc01hcCcsIHRleHR1cmVJbmRleCApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICBtYXRlcmlhbFR5cGUgPSBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbDtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmICggbWF0ZXJpYWxEZWYuZG91YmxlU2lkZWQgPT09IHRydWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMuc2lkZSA9IFRIUkVFLkRvdWJsZVNpZGU7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB2YXIgYWxwaGFNb2RlID0gbWF0ZXJpYWxEZWYuYWxwaGFNb2RlIHx8IEFMUEhBX01PREVTLk9QQVFVRTtcbiAgICBcbiAgICAgICAgICAgIGlmICggYWxwaGFNb2RlID09PSBBTFBIQV9NT0RFUy5CTEVORCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy50cmFuc3BhcmVudCA9IHRydWU7XG4gICAgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLnRyYW5zcGFyZW50ID0gZmFsc2U7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBhbHBoYU1vZGUgPT09IEFMUEhBX01PREVTLk1BU0sgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLmFscGhhVGVzdCA9IG1hdGVyaWFsRGVmLmFscGhhQ3V0b2ZmICE9PSB1bmRlZmluZWQgPyBtYXRlcmlhbERlZi5hbHBoYUN1dG9mZiA6IDAuNTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAoIG1hdGVyaWFsRGVmLm5vcm1hbFRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBwZW5kaW5nLnB1c2goIHBhcnNlci5hc3NpZ25UZXh0dXJlKCBtYXRlcmlhbFBhcmFtcywgJ25vcm1hbE1hcCcsIG1hdGVyaWFsRGVmLm5vcm1hbFRleHR1cmUuaW5kZXggKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIG1hdGVyaWFsUGFyYW1zLm5vcm1hbFNjYWxlID0gbmV3IFRIUkVFLlZlY3RvcjIoIDEsIDEgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIG1hdGVyaWFsRGVmLm5vcm1hbFRleHR1cmUuc2NhbGUgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMubm9ybWFsU2NhbGUuc2V0KCBtYXRlcmlhbERlZi5ub3JtYWxUZXh0dXJlLnNjYWxlLCBtYXRlcmlhbERlZi5ub3JtYWxUZXh0dXJlLnNjYWxlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCBtYXRlcmlhbERlZi5vY2NsdXNpb25UZXh0dXJlICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcGVuZGluZy5wdXNoKCBwYXJzZXIuYXNzaWduVGV4dHVyZSggbWF0ZXJpYWxQYXJhbXMsICdhb01hcCcsIG1hdGVyaWFsRGVmLm9jY2x1c2lvblRleHR1cmUuaW5kZXggKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWxEZWYub2NjbHVzaW9uVGV4dHVyZS5zdHJlbmd0aCAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbFBhcmFtcy5hb01hcEludGVuc2l0eSA9IG1hdGVyaWFsRGVmLm9jY2x1c2lvblRleHR1cmUuc3RyZW5ndGg7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCBtYXRlcmlhbERlZi5lbWlzc2l2ZUZhY3RvciAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWxUeXBlID09PSBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMuY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoKS5mcm9tQXJyYXkoIG1hdGVyaWFsRGVmLmVtaXNzaXZlRmFjdG9yICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxQYXJhbXMuZW1pc3NpdmUgPSBuZXcgVEhSRUUuQ29sb3IoKS5mcm9tQXJyYXkoIG1hdGVyaWFsRGVmLmVtaXNzaXZlRmFjdG9yICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCBtYXRlcmlhbERlZi5lbWlzc2l2ZVRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIG1hdGVyaWFsVHlwZSA9PT0gVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmcucHVzaCggcGFyc2VyLmFzc2lnblRleHR1cmUoIG1hdGVyaWFsUGFyYW1zLCAnbWFwJywgbWF0ZXJpYWxEZWYuZW1pc3NpdmVUZXh0dXJlLmluZGV4ICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nLnB1c2goIHBhcnNlci5hc3NpZ25UZXh0dXJlKCBtYXRlcmlhbFBhcmFtcywgJ2VtaXNzaXZlTWFwJywgbWF0ZXJpYWxEZWYuZW1pc3NpdmVUZXh0dXJlLmluZGV4ICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoIHBlbmRpbmcgKS50aGVuKCBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG1hdGVyaWFsO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWxUeXBlID09PSBUSFJFRS5TaGFkZXJNYXRlcmlhbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBleHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9NQVRFUklBTFNfUEJSX1NQRUNVTEFSX0dMT1NTSU5FU1MgXS5jcmVhdGVNYXRlcmlhbCggbWF0ZXJpYWxQYXJhbXMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IG5ldyBtYXRlcmlhbFR5cGUoIG1hdGVyaWFsUGFyYW1zICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWxEZWYubmFtZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubmFtZSA9IG1hdGVyaWFsRGVmLm5hbWU7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gTm9ybWFsIG1hcCB0ZXh0dXJlcyB1c2UgT3BlbkdMIGNvbnZlbnRpb25zOlxuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMCNtYXRlcmlhbG5vcm1hbHRleHR1cmVcbiAgICAgICAgICAgICAgICBpZiAoIG1hdGVyaWFsLm5vcm1hbFNjYWxlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5ub3JtYWxTY2FsZS54ID0gLSBtYXRlcmlhbC5ub3JtYWxTY2FsZS54O1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBlbWlzc2l2ZVRleHR1cmUgYW5kIGJhc2VDb2xvclRleHR1cmUgdXNlIHNSR0IgZW5jb2RpbmcuXG4gICAgICAgICAgICAgICAgaWYgKCBtYXRlcmlhbC5tYXAgKSBtYXRlcmlhbC5tYXAuZW5jb2RpbmcgPSBUSFJFRS5zUkdCRW5jb2Rpbmc7XG4gICAgICAgICAgICAgICAgaWYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApIG1hdGVyaWFsLmVtaXNzaXZlTWFwLmVuY29kaW5nID0gVEhSRUUuc1JHQkVuY29kaW5nO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWxEZWYuZXh0cmFzICkgbWF0ZXJpYWwudXNlckRhdGEgPSBtYXRlcmlhbERlZi5leHRyYXM7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hdGVyaWFsO1xuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNnZW9tZXRyeVxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5PE9iamVjdD59IHByaW1pdGl2ZXNcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZTxBcnJheTxUSFJFRS5CdWZmZXJHZW9tZXRyeT4+fVxuICAgICAgICAgKi9cbiAgICAgICAgR0xURlBhcnNlci5wcm90b3R5cGUubG9hZEdlb21ldHJpZXMgPSBmdW5jdGlvbiAoIHByaW1pdGl2ZXMgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgY2FjaGUgPSB0aGlzLnByaW1pdGl2ZUNhY2hlO1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGVwZW5kZW5jaWVzKCAnYWNjZXNzb3InICkudGhlbiggZnVuY3Rpb24gKCBhY2Nlc3NvcnMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGdlb21ldHJpZXMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGlsID0gcHJpbWl0aXZlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByaW1pdGl2ZSA9IHByaW1pdGl2ZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gU2VlIGlmIHdlJ3ZlIGFscmVhZHkgY3JlYXRlZCB0aGlzIGdlb21ldHJ5XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYWNoZWQgPSBnZXRDYWNoZWRHZW9tZXRyeSggY2FjaGUsIHByaW1pdGl2ZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNhY2hlZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzZSB0aGUgY2FjaGVkIGdlb21ldHJ5IGlmIGl0IGV4aXN0c1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cmllcy5wdXNoKCBjYWNoZWQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZ2VvbWV0cnlcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBwcmltaXRpdmUuYXR0cmlidXRlcztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBhdHRyaWJ1dGVJZCBpbiBhdHRyaWJ1dGVzICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVFbnRyeSA9IGF0dHJpYnV0ZXNbIGF0dHJpYnV0ZUlkIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlckF0dHJpYnV0ZSA9IGFjY2Vzc29yc1sgYXR0cmlidXRlRW50cnkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBhdHRyaWJ1dGVJZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUE9TSVRJT04nOlxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBidWZmZXJBdHRyaWJ1dGUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdOT1JNQUwnOlxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgYnVmZmVyQXR0cmlidXRlICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnVEVYQ09PUkRfMCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1RFWENPT1JEMCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1RFWENPT1JEJzpcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3V2JywgYnVmZmVyQXR0cmlidXRlICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnVEVYQ09PUkRfMSc6XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICd1djInLCBidWZmZXJBdHRyaWJ1dGUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdDT0xPUl8wJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQ09MT1IwJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnQ09MT1InOlxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnY29sb3InLCBidWZmZXJBdHRyaWJ1dGUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdXRUlHSFRTXzAnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdXRUlHSFQnOiAvLyBXRUlHSFQgc2VtYW50aWMgZGVwcmVjYXRlZC5cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3NraW5XZWlnaHQnLCBidWZmZXJBdHRyaWJ1dGUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdKT0lOVFNfMCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0pPSU5UJzogLy8gSk9JTlQgc2VtYW50aWMgZGVwcmVjYXRlZC5cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3NraW5JbmRleCcsIGJ1ZmZlckF0dHJpYnV0ZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwcmltaXRpdmUuaW5kaWNlcyAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5LnNldEluZGV4KCBhY2Nlc3NvcnNbIHByaW1pdGl2ZS5pbmRpY2VzIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhY2hlIHRoaXMgZ2VvbWV0cnlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlLnB1c2goIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmU6IHByaW1pdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeTogZ2VvbWV0cnlcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb21ldHJpZXMucHVzaCggZ2VvbWV0cnkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2VvbWV0cmllcztcbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMC9SRUFETUUubWQjbWVzaGVzXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtZXNoSW5kZXhcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZTxUSFJFRS5Hcm91cHxUSFJFRS5NZXNofFRIUkVFLlNraW5uZWRNZXNoPn1cbiAgICAgICAgICovXG4gICAgICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRNZXNoID0gZnVuY3Rpb24gKCBtZXNoSW5kZXggKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgc2NvcGUgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGpzb24gPSB0aGlzLmpzb247XG4gICAgICAgICAgICB2YXIgZXh0ZW5zaW9ucyA9IHRoaXMuZXh0ZW5zaW9ucztcbiAgICBcbiAgICAgICAgICAgIHZhciBtZXNoRGVmID0gdGhpcy5qc29uLm1lc2hlc1sgbWVzaEluZGV4IF07XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRNdWx0aURlcGVuZGVuY2llcyggW1xuICAgIFxuICAgICAgICAgICAgICAgICdhY2Nlc3NvcicsXG4gICAgICAgICAgICAgICAgJ21hdGVyaWFsJ1xuICAgIFxuICAgICAgICAgICAgXSApLnRoZW4oIGZ1bmN0aW9uICggZGVwZW5kZW5jaWVzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBncm91cCA9IG5ldyBUSFJFRS5Hcm91cCgpO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBwcmltaXRpdmVzID0gbWVzaERlZi5wcmltaXRpdmVzO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZS5sb2FkR2VvbWV0cmllcyggcHJpbWl0aXZlcyApLnRoZW4oIGZ1bmN0aW9uICggZ2VvbWV0cmllcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBpbCA9IHByaW1pdGl2ZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJpbWl0aXZlID0gcHJpbWl0aXZlc1sgaSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdlb21ldHJ5ID0gZ2VvbWV0cmllc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGVyaWFsID0gcHJpbWl0aXZlLm1hdGVyaWFsID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGNyZWF0ZURlZmF1bHRNYXRlcmlhbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBkZXBlbmRlbmNpZXMubWF0ZXJpYWxzWyBwcmltaXRpdmUubWF0ZXJpYWwgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWwuYW9NYXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgZ2VvbWV0cnkuYXR0cmlidXRlcy51djIgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBnZW9tZXRyeS5hdHRyaWJ1dGVzLnV2ICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdUSFJFRS5HTFRGTG9hZGVyOiBEdXBsaWNhdGluZyBVVnMgdG8gc3VwcG9ydCBhb01hcC4nICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCAndXYyJywgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkuYXR0cmlidXRlcy51di5hcnJheSwgMiApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgbWF0ZXJpYWwgd2lsbCBiZSBtb2RpZmllZCBsYXRlciBvbiwgY2xvbmUgaXQgbm93LlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZVZlcnRleENvbG9ycyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMuY29sb3IgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1c2VGbGF0U2hhZGluZyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMubm9ybWFsID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXNlU2tpbm5pbmcgPSBtZXNoRGVmLmlzU2tpbm5lZE1lc2ggPT09IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXNlTW9ycGhUYXJnZXRzID0gcHJpbWl0aXZlLnRhcmdldHMgIT09IHVuZGVmaW5lZDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdXNlVmVydGV4Q29sb3JzIHx8IHVzZUZsYXRTaGFkaW5nIHx8IHVzZVNraW5uaW5nIHx8IHVzZU1vcnBoVGFyZ2V0cyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG1hdGVyaWFsLmlzR0xURlNwZWN1bGFyR2xvc3NpbmVzc01hdGVyaWFsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3BlY0dsb3NzRXh0ZW5zaW9uID0gZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTUFURVJJQUxTX1BCUl9TUEVDVUxBUl9HTE9TU0lORVNTIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsID0gc3BlY0dsb3NzRXh0ZW5zaW9uLmNsb25lTWF0ZXJpYWwoIG1hdGVyaWFsICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBtYXRlcmlhbC5jbG9uZSgpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdXNlVmVydGV4Q29sb3JzICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLnZlcnRleENvbG9ycyA9IFRIUkVFLlZlcnRleENvbG9ycztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHVzZUZsYXRTaGFkaW5nICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmZsYXRTaGFkaW5nID0gdHJ1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXNoO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLlRSSUFOR0xFUyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW1pdGl2ZS5tb2RlID09PSBXRUJHTF9DT05TVEFOVFMuVFJJQU5HTEVfU1RSSVAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLlRSSUFOR0xFX0ZBTiB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW1pdGl2ZS5tb2RlID09PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB1c2VTa2lubmluZyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaCA9IG5ldyBUSFJFRS5Ta2lubmVkTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLnNraW5uaW5nID0gdHJ1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNoID0gbmV3IFRIUkVFLk1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHByaW1pdGl2ZS5tb2RlID09PSBXRUJHTF9DT05TVEFOVFMuVFJJQU5HTEVfU1RSSVAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc2guZHJhd01vZGUgPSBUSFJFRS5UcmlhbmdsZVN0cmlwRHJhd01vZGU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5UUklBTkdMRV9GQU4gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc2guZHJhd01vZGUgPSBUSFJFRS5UcmlhbmdsZUZhbkRyYXdNb2RlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHByaW1pdGl2ZS5tb2RlID09PSBXRUJHTF9DT05TVEFOVFMuTElORVMgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLkxJTkVfU1RSSVAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLkxJTkVfTE9PUCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FjaGVLZXkgPSAnTGluZUJhc2ljTWF0ZXJpYWw6JyArIG1hdGVyaWFsLnV1aWQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmVNYXRlcmlhbCA9IHNjb3BlLmNhY2hlLmdldCggY2FjaGVLZXkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICEgbGluZU1hdGVyaWFsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggbGluZU1hdGVyaWFsLCBtYXRlcmlhbCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTWF0ZXJpYWwuY29sb3IuY29weSggbWF0ZXJpYWwuY29sb3IgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU1hdGVyaWFsLmxpZ2h0cyA9IGZhbHNlOyAgLy8gTGluZUJhc2ljTWF0ZXJpYWwgZG9lc24ndCBzdXBwb3J0IGxpZ2h0cyB5ZXRcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuY2FjaGUuYWRkKCBjYWNoZUtleSwgbGluZU1hdGVyaWFsICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsID0gbGluZU1hdGVyaWFsO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcHJpbWl0aXZlLm1vZGUgPT09IFdFQkdMX0NPTlNUQU5UUy5MSU5FUyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaCA9IG5ldyBUSFJFRS5MaW5lU2VnbWVudHMoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHByaW1pdGl2ZS5tb2RlID09PSBXRUJHTF9DT05TVEFOVFMuTElORV9TVFJJUCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaCA9IG5ldyBUSFJFRS5MaW5lKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNoID0gbmV3IFRIUkVFLkxpbmVMb29wKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBwcmltaXRpdmUubW9kZSA9PT0gV0VCR0xfQ09OU1RBTlRTLlBPSU5UUyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FjaGVLZXkgPSAnUG9pbnRzTWF0ZXJpYWw6JyArIG1hdGVyaWFsLnV1aWQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvaW50c01hdGVyaWFsID0gc2NvcGUuY2FjaGUuZ2V0KCBjYWNoZUtleSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggISBwb2ludHNNYXRlcmlhbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzTWF0ZXJpYWwgPSBuZXcgVEhSRUUuUG9pbnRzTWF0ZXJpYWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVEhSRUUuTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggcG9pbnRzTWF0ZXJpYWwsIG1hdGVyaWFsICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50c01hdGVyaWFsLmNvbG9yLmNvcHkoIG1hdGVyaWFsLmNvbG9yICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50c01hdGVyaWFsLm1hcCA9IG1hdGVyaWFsLm1hcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzTWF0ZXJpYWwubGlnaHRzID0gZmFsc2U7ICAvLyBQb2ludHNNYXRlcmlhbCBkb2Vzbid0IHN1cHBvcnQgbGlnaHRzIHlldFxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZS5jYWNoZS5hZGQoIGNhY2hlS2V5LCBwb2ludHNNYXRlcmlhbCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IHBvaW50c01hdGVyaWFsO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc2ggPSBuZXcgVEhSRUUuUG9pbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuR0xURkxvYWRlcjogUHJpbWl0aXZlIG1vZGUgdW5zdXBwb3J0ZWQ6ICcgKyBwcmltaXRpdmUubW9kZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzaC5uYW1lID0gbWVzaERlZi5uYW1lIHx8ICggJ21lc2hfJyArIG1lc2hJbmRleCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB1c2VNb3JwaFRhcmdldHMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkTW9ycGhUYXJnZXRzKCBtZXNoLCBtZXNoRGVmLCBwcmltaXRpdmUsIGRlcGVuZGVuY2llcy5hY2Nlc3NvcnMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbWVzaERlZi5leHRyYXMgIT09IHVuZGVmaW5lZCApIG1lc2gudXNlckRhdGEgPSBtZXNoRGVmLmV4dHJhcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcHJpbWl0aXZlLmV4dHJhcyAhPT0gdW5kZWZpbmVkICkgbWVzaC5nZW9tZXRyeS51c2VyRGF0YSA9IHByaW1pdGl2ZS5leHRyYXM7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgU3BlY3VsYXItR2xvc3NpbmVzcy5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWwuaXNHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWwgPT09IHRydWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaC5vbkJlZm9yZVJlbmRlciA9IGV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX01BVEVSSUFMU19QQlJfU1BFQ1VMQVJfR0xPU1NJTkVTUyBdLnJlZnJlc2hVbmlmb3JtcztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcHJpbWl0aXZlcy5sZW5ndGggPiAxICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc2gubmFtZSArPSAnXycgKyBpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLmFkZCggbWVzaCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVzaDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ3JvdXA7XG4gICAgXG4gICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wI2NhbWVyYXNcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGNhbWVyYUluZGV4XG4gICAgICAgICAqIEByZXR1cm4ge1Byb21pc2U8VEhSRUUuQ2FtZXJhPn1cbiAgICAgICAgICovXG4gICAgICAgIEdMVEZQYXJzZXIucHJvdG90eXBlLmxvYWRDYW1lcmEgPSBmdW5jdGlvbiAoIGNhbWVyYUluZGV4ICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIGNhbWVyYTtcbiAgICAgICAgICAgIHZhciBjYW1lcmFEZWYgPSB0aGlzLmpzb24uY2FtZXJhc1sgY2FtZXJhSW5kZXggXTtcbiAgICAgICAgICAgIHZhciBwYXJhbXMgPSBjYW1lcmFEZWZbIGNhbWVyYURlZi50eXBlIF07XG4gICAgXG4gICAgICAgICAgICBpZiAoICEgcGFyYW1zICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ1RIUkVFLkdMVEZMb2FkZXI6IE1pc3NpbmcgY2FtZXJhIHBhcmFtZXRlcnMuJyApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmICggY2FtZXJhRGVmLnR5cGUgPT09ICdwZXJzcGVjdGl2ZScgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGFzcGVjdFJhdGlvID0gcGFyYW1zLmFzcGVjdFJhdGlvIHx8IDE7XG4gICAgICAgICAgICAgICAgdmFyIHhmb3YgPSBwYXJhbXMueWZvdiAqIGFzcGVjdFJhdGlvO1xuICAgIFxuICAgICAgICAgICAgICAgIGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSggVEhSRUUuTWF0aC5yYWRUb0RlZyggeGZvdiApLCBhc3BlY3RSYXRpbywgcGFyYW1zLnpuZWFyIHx8IDEsIHBhcmFtcy56ZmFyIHx8IDJlNiApO1xuICAgIFxuICAgICAgICAgICAgfSBlbHNlIGlmICggY2FtZXJhRGVmLnR5cGUgPT09ICdvcnRob2dyYXBoaWMnICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGNhbWVyYSA9IG5ldyBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEoIHBhcmFtcy54bWFnIC8gLSAyLCBwYXJhbXMueG1hZyAvIDIsIHBhcmFtcy55bWFnIC8gMiwgcGFyYW1zLnltYWcgLyAtIDIsIHBhcmFtcy56bmVhciwgcGFyYW1zLnpmYXIgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmICggY2FtZXJhRGVmLm5hbWUgIT09IHVuZGVmaW5lZCApIGNhbWVyYS5uYW1lID0gY2FtZXJhRGVmLm5hbWU7XG4gICAgICAgICAgICBpZiAoIGNhbWVyYURlZi5leHRyYXMgKSBjYW1lcmEudXNlckRhdGEgPSBjYW1lcmFEZWYuZXh0cmFzO1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggY2FtZXJhICk7XG4gICAgXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjc2tpbnNcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNraW5JbmRleFxuICAgICAgICAgKiBAcmV0dXJuIHtQcm9taXNlPE9iamVjdD59XG4gICAgICAgICAqL1xuICAgICAgICBHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkU2tpbiA9IGZ1bmN0aW9uICggc2tpbkluZGV4ICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHNraW5EZWYgPSB0aGlzLmpzb24uc2tpbnNbIHNraW5JbmRleCBdO1xuICAgIFxuICAgICAgICAgICAgdmFyIHNraW5FbnRyeSA9IHsgam9pbnRzOiBza2luRGVmLmpvaW50cyB9O1xuICAgIFxuICAgICAgICAgICAgaWYgKCBza2luRGVmLmludmVyc2VCaW5kTWF0cmljZXMgPT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCBza2luRW50cnkgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERlcGVuZGVuY3koICdhY2Nlc3NvcicsIHNraW5EZWYuaW52ZXJzZUJpbmRNYXRyaWNlcyApLnRoZW4oIGZ1bmN0aW9uICggYWNjZXNzb3IgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgc2tpbkVudHJ5LmludmVyc2VCaW5kTWF0cmljZXMgPSBhY2Nlc3NvcjtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gc2tpbkVudHJ5O1xuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWNhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL3RyZWUvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wI2FuaW1hdGlvbnNcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGFuaW1hdGlvbkluZGV4XG4gICAgICAgICAqIEByZXR1cm4ge1Byb21pc2U8VEhSRUUuQW5pbWF0aW9uQ2xpcD59XG4gICAgICAgICAqL1xuICAgICAgICBHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkQW5pbWF0aW9uID0gZnVuY3Rpb24gKCBhbmltYXRpb25JbmRleCApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBqc29uID0gdGhpcy5qc29uO1xuICAgIFxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbkRlZiA9IHRoaXMuanNvbi5hbmltYXRpb25zWyBhbmltYXRpb25JbmRleCBdO1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TXVsdGlEZXBlbmRlbmNpZXMoIFtcbiAgICBcbiAgICAgICAgICAgICAgICAnYWNjZXNzb3InLFxuICAgICAgICAgICAgICAgICdub2RlJ1xuICAgIFxuICAgICAgICAgICAgXSApLnRoZW4oIGZ1bmN0aW9uICggZGVwZW5kZW5jaWVzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB0cmFja3MgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGlsID0gYW5pbWF0aW9uRGVmLmNoYW5uZWxzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hhbm5lbCA9IGFuaW1hdGlvbkRlZi5jaGFubmVsc1sgaSBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2FtcGxlciA9IGFuaW1hdGlvbkRlZi5zYW1wbGVyc1sgY2hhbm5lbC5zYW1wbGVyIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggc2FtcGxlciApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBjaGFubmVsLnRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gdGFyZ2V0Lm5vZGUgIT09IHVuZGVmaW5lZCA/IHRhcmdldC5ub2RlIDogdGFyZ2V0LmlkOyAvLyBOT1RFOiB0YXJnZXQuaWQgaXMgZGVwcmVjYXRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IGFuaW1hdGlvbkRlZi5wYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgPyBhbmltYXRpb25EZWYucGFyYW1ldGVyc1sgc2FtcGxlci5pbnB1dCBdIDogc2FtcGxlci5pbnB1dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXRwdXQgPSBhbmltYXRpb25EZWYucGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkID8gYW5pbWF0aW9uRGVmLnBhcmFtZXRlcnNbIHNhbXBsZXIub3V0cHV0IF0gOiBzYW1wbGVyLm91dHB1dDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dEFjY2Vzc29yID0gZGVwZW5kZW5jaWVzLmFjY2Vzc29yc1sgaW5wdXQgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXRwdXRBY2Nlc3NvciA9IGRlcGVuZGVuY2llcy5hY2Nlc3NvcnNbIG91dHB1dCBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBkZXBlbmRlbmNpZXMubm9kZXNbIG5hbWUgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnVwZGF0ZU1hdHJpeCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUubWF0cml4QXV0b1VwZGF0ZSA9IHRydWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFR5cGVkS2V5ZnJhbWVUcmFjaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBQQVRIX1BST1BFUlRJRVNbIHRhcmdldC5wYXRoIF0gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgUEFUSF9QUk9QRVJUSUVTLndlaWdodHM6XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUeXBlZEtleWZyYW1lVHJhY2sgPSBUSFJFRS5OdW1iZXJLZXlmcmFtZVRyYWNrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgUEFUSF9QUk9QRVJUSUVTLnJvdGF0aW9uOlxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVHlwZWRLZXlmcmFtZVRyYWNrID0gVEhSRUUuUXVhdGVybmlvbktleWZyYW1lVHJhY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBQQVRIX1BST1BFUlRJRVMucG9zaXRpb246XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgUEFUSF9QUk9QRVJUSUVTLnNjYWxlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVHlwZWRLZXlmcmFtZVRyYWNrID0gVEhSRUUuVmVjdG9yS2V5ZnJhbWVUcmFjaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0TmFtZSA9IG5vZGUubmFtZSA/IG5vZGUubmFtZSA6IG5vZGUudXVpZDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW50ZXJwb2xhdGlvbiA9IHNhbXBsZXIuaW50ZXJwb2xhdGlvbiAhPT0gdW5kZWZpbmVkID8gSU5URVJQT0xBVElPTlsgc2FtcGxlci5pbnRlcnBvbGF0aW9uIF0gOiBUSFJFRS5JbnRlcnBvbGF0ZUxpbmVhcjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0TmFtZXMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIFBBVEhfUFJPUEVSVElFU1sgdGFyZ2V0LnBhdGggXSA9PT0gUEFUSF9QUk9QRVJUSUVTLndlaWdodHMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vZGUgc2hvdWxkIGJlIFRIUkVFLkdyb3VwIGhlcmUgYnV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBBVEhfUFJPUEVSVElFUy53ZWlnaHRzKG1vcnBoVGFyZ2V0SW5mbHVlbmNlcykgc2hvdWxkIGJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBwcm9wZXJ0eSBvZiBhIG1lc2ggb2JqZWN0IHVuZGVyIG5vZGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNvIGZpbmRpbmcgdGFyZ2V0cyBoZXJlLlxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnRyYXZlcnNlKCBmdW5jdGlvbiAoIG9iamVjdCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggb2JqZWN0LmlzTWVzaCA9PT0gdHJ1ZSAmJiBvYmplY3QubWF0ZXJpYWwubW9ycGhUYXJnZXRzID09PSB0cnVlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWVzLnB1c2goIG9iamVjdC5uYW1lID8gb2JqZWN0Lm5hbWUgOiBvYmplY3QudXVpZCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TmFtZXMucHVzaCggdGFyZ2V0TmFtZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBLZXlmcmFtZVRyYWNrLm9wdGltaXplKCkgd2lsbCBtb2RpZnkgZ2l2ZW4gJ3RpbWVzJyBhbmQgJ3ZhbHVlcydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBidWZmZXJzIGJlZm9yZSBjcmVhdGluZyBhIHRydW5jYXRlZCBjb3B5IHRvIGtlZXAuIEJlY2F1c2UgYnVmZmVycyBtYXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBiZSByZXVzZWQgYnkgb3RoZXIgdHJhY2tzLCBtYWtlIGNvcGllcyBoZXJlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBqID0gMCwgamwgPSB0YXJnZXROYW1lcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYWNrID0gbmV3IFR5cGVkS2V5ZnJhbWVUcmFjayhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWVzWyBqIF0gKyAnLicgKyBQQVRIX1BST1BFUlRJRVNbIHRhcmdldC5wYXRoIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUSFJFRS5BbmltYXRpb25VdGlscy5hcnJheVNsaWNlKCBpbnB1dEFjY2Vzc29yLmFycmF5LCAwICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUSFJFRS5BbmltYXRpb25VdGlscy5hcnJheVNsaWNlKCBvdXRwdXRBY2Nlc3Nvci5hcnJheSwgMCApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJwb2xhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIZXJlIGlzIHRoZSB0cmljayB0byBlbmFibGUgY3VzdG9tIGludGVycG9sYXRpb24uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE92ZXJyaWRlcyAuY3JlYXRlSW50ZXJwb2xhbnQgaW4gYSBmYWN0b3J5IG1ldGhvZCB3aGljaCBjcmVhdGVzIGN1c3RvbSBpbnRlcnBvbGF0aW9uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHNhbXBsZXIuaW50ZXJwb2xhdGlvbiA9PT0gJ0NVQklDU1BMSU5FJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrLmNyZWF0ZUludGVycG9sYW50ID0gZnVuY3Rpb24gKCByZXN1bHQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQSBDVUJJQ1NQTElORSBrZXlmcmFtZSBpbiBnbFRGIGhhcyB0aHJlZSBvdXRwdXQgdmFsdWVzIGZvciBlYWNoIGlucHV0IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlcHJlc2VudGluZyBpblRhbmdlbnQsIHNwbGluZVZlcnRleCwgYW5kIG91dFRhbmdlbnQuIEFzIGEgcmVzdWx0LCB0cmFjay5nZXRWYWx1ZVNpemUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG11c3QgYmUgZGl2aWRlZCBieSB0aHJlZSB0byBnZXQgdGhlIGludGVycG9sYW50J3Mgc2FtcGxlU2l6ZSBhcmd1bWVudC5cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEdMVEZDdWJpY1NwbGluZUludGVycG9sYW50KCB0aGlzLnRpbWVzLCB0aGlzLnZhbHVlcywgdGhpcy5nZXRWYWx1ZVNpemUoKSAvIDMsIHJlc3VsdCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja3MucHVzaCggdHJhY2sgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBhbmltYXRpb25EZWYubmFtZSAhPT0gdW5kZWZpbmVkID8gYW5pbWF0aW9uRGVmLm5hbWUgOiAnYW5pbWF0aW9uXycgKyBhbmltYXRpb25JbmRleDtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFRIUkVFLkFuaW1hdGlvbkNsaXAoIG5hbWUsIHVuZGVmaW5lZCwgdHJhY2tzICk7XG4gICAgXG4gICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgIH07XG4gICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTcGVjaWZpY2F0aW9uOiBodHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvdHJlZS9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAjbm9kZXMtYW5kLWhpZXJhcmNoeVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gbm9kZUluZGV4XG4gICAgICAgICAqIEByZXR1cm4ge1Byb21pc2U8VEhSRUUuT2JqZWN0M0Q+fVxuICAgICAgICAgKi9cbiAgICAgICAgR0xURlBhcnNlci5wcm90b3R5cGUubG9hZE5vZGUgPSBmdW5jdGlvbiAoIG5vZGVJbmRleCApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBqc29uID0gdGhpcy5qc29uO1xuICAgICAgICAgICAgdmFyIGV4dGVuc2lvbnMgPSB0aGlzLmV4dGVuc2lvbnM7XG4gICAgXG4gICAgICAgICAgICB2YXIgbWVzaFJlZmVyZW5jZXMgPSB0aGlzLmpzb24ubWVzaFJlZmVyZW5jZXM7XG4gICAgICAgICAgICB2YXIgbWVzaFVzZXMgPSB0aGlzLmpzb24ubWVzaFVzZXM7XG4gICAgXG4gICAgICAgICAgICB2YXIgbm9kZURlZiA9IHRoaXMuanNvbi5ub2Rlc1sgbm9kZUluZGV4IF07XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRNdWx0aURlcGVuZGVuY2llcyggW1xuICAgIFxuICAgICAgICAgICAgICAgICdtZXNoJyxcbiAgICAgICAgICAgICAgICAnc2tpbicsXG4gICAgICAgICAgICAgICAgJ2NhbWVyYSdcbiAgICBcbiAgICAgICAgICAgIF0gKS50aGVuKCBmdW5jdGlvbiAoIGRlcGVuZGVuY2llcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbm9kZTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIG5vZGVEZWYuaXNCb25lID09PSB0cnVlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBub2RlID0gbmV3IFRIUkVFLkJvbmUoKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBub2RlRGVmLm1lc2ggIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc2ggPSBkZXBlbmRlbmNpZXMubWVzaGVzWyBub2RlRGVmLm1lc2ggXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG1lc2guY2xvbmUoKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yIFNwZWN1bGFyLUdsb3NzaW5lc3NcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBtZXNoLmlzR3JvdXAgPT09IHRydWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGlsID0gbWVzaC5jaGlsZHJlbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBtZXNoLmNoaWxkcmVuWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5tYXRlcmlhbCAmJiBjaGlsZC5tYXRlcmlhbC5pc0dMVEZTcGVjdWxhckdsb3NzaW5lc3NNYXRlcmlhbCA9PT0gdHJ1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5jaGlsZHJlblsgaSBdLm9uQmVmb3JlUmVuZGVyID0gY2hpbGQub25CZWZvcmVSZW5kZXI7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBtZXNoLm1hdGVyaWFsICYmIG1lc2gubWF0ZXJpYWwuaXNHTFRGU3BlY3VsYXJHbG9zc2luZXNzTWF0ZXJpYWwgPT09IHRydWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5vbkJlZm9yZVJlbmRlciA9IG1lc2gub25CZWZvcmVSZW5kZXI7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBtZXNoUmVmZXJlbmNlc1sgbm9kZURlZi5tZXNoIF0gPiAxICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5uYW1lICs9ICdfaW5zdGFuY2VfJyArIG1lc2hVc2VzWyBub2RlRGVmLm1lc2ggXSArKztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG5vZGVEZWYuY2FtZXJhICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBkZXBlbmRlbmNpZXMuY2FtZXJhc1sgbm9kZURlZi5jYW1lcmEgXTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBub2RlRGVmLmV4dGVuc2lvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAmJiBub2RlRGVmLmV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0xJR0hUUyBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgJiYgbm9kZURlZi5leHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9MSUdIVFMgXS5saWdodCAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgbGlnaHRzID0gZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTElHSFRTIF0ubGlnaHRzO1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gbGlnaHRzWyBub2RlRGVmLmV4dGVuc2lvbnNbIEVYVEVOU0lPTlMuS0hSX0xJR0hUUyBdLmxpZ2h0IF07XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIG5vZGVEZWYubmFtZSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBub2RlLm5hbWUgPSBUSFJFRS5Qcm9wZXJ0eUJpbmRpbmcuc2FuaXRpemVOb2RlTmFtZSggbm9kZURlZi5uYW1lICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbm9kZURlZi5leHRyYXMgKSBub2RlLnVzZXJEYXRhID0gbm9kZURlZi5leHRyYXM7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBub2RlRGVmLm1hdHJpeCAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDQoKTtcbiAgICAgICAgICAgICAgICAgICAgbWF0cml4LmZyb21BcnJheSggbm9kZURlZi5tYXRyaXggKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5hcHBseU1hdHJpeCggbWF0cml4ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBub2RlRGVmLnRyYW5zbGF0aW9uICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBvc2l0aW9uLmZyb21BcnJheSggbm9kZURlZi50cmFuc2xhdGlvbiApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggbm9kZURlZi5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5xdWF0ZXJuaW9uLmZyb21BcnJheSggbm9kZURlZi5yb3RhdGlvbiApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggbm9kZURlZi5zY2FsZSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zY2FsZS5mcm9tQXJyYXkoIG5vZGVEZWYuc2NhbGUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmljYXRpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvZ2xURi90cmVlL21hc3Rlci9zcGVjaWZpY2F0aW9uLzIuMCNzY2VuZXNcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNjZW5lSW5kZXhcbiAgICAgICAgICogQHJldHVybiB7UHJvbWlzZTxUSFJFRS5TY2VuZT59XG4gICAgICAgICAqL1xuICAgICAgICBHTFRGUGFyc2VyLnByb3RvdHlwZS5sb2FkU2NlbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgICAgICAvLyBzY2VuZSBub2RlIGhpZXJhY2h5IGJ1aWxkZXJcbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkTm9kZUhpZXJhY2h5KCBub2RlSWQsIHBhcmVudE9iamVjdCwganNvbiwgYWxsTm9kZXMsIHNraW5zICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBub2RlID0gYWxsTm9kZXNbIG5vZGVJZCBdO1xuICAgICAgICAgICAgICAgIHZhciBub2RlRGVmID0ganNvbi5ub2Rlc1sgbm9kZUlkIF07XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gYnVpbGQgc2tlbGV0b24gaGVyZSBhcyB3ZWxsXG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBub2RlRGVmLnNraW4gIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc2hlcyA9IG5vZGUuaXNHcm91cCA9PT0gdHJ1ZSA/IG5vZGUuY2hpbGRyZW4gOiBbIG5vZGUgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBpbCA9IG1lc2hlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZXNoID0gbWVzaGVzWyBpIF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2tpbkVudHJ5ID0gc2tpbnNbIG5vZGVEZWYuc2tpbiBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJvbmVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm9uZUludmVyc2VzID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaiA9IDAsIGpsID0gc2tpbkVudHJ5LmpvaW50cy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgam9pbnRJZCA9IHNraW5FbnRyeS5qb2ludHNbIGogXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgam9pbnROb2RlID0gYWxsTm9kZXNbIGpvaW50SWQgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGpvaW50Tm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9uZXMucHVzaCggam9pbnROb2RlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXQgPSBuZXcgVEhSRUUuTWF0cml4NCgpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHNraW5FbnRyeS5pbnZlcnNlQmluZE1hdHJpY2VzICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXQuZnJvbUFycmF5KCBza2luRW50cnkuaW52ZXJzZUJpbmRNYXRyaWNlcy5hcnJheSwgaiAqIDE2ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9uZUludmVyc2VzLnB1c2goIG1hdCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ1RIUkVFLkdMVEZMb2FkZXI6IEpvaW50IFwiJXNcIiBjb3VsZCBub3QgYmUgZm91bmQuJywgam9pbnRJZCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc2guYmluZCggbmV3IFRIUkVFLlNrZWxldG9uKCBib25lcywgYm9uZUludmVyc2VzICksIG1lc2gubWF0cml4V29ybGQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBidWlsZCBub2RlIGhpZXJhY2h5XG4gICAgXG4gICAgICAgICAgICAgICAgcGFyZW50T2JqZWN0LmFkZCggbm9kZSApO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbm9kZURlZi5jaGlsZHJlbiApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gbm9kZURlZi5jaGlsZHJlbjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBpbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5bIGkgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkTm9kZUhpZXJhY2h5KCBjaGlsZCwgbm9kZSwganNvbiwgYWxsTm9kZXMsIHNraW5zICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gbG9hZFNjZW5lKCBzY2VuZUluZGV4ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBqc29uID0gdGhpcy5qc29uO1xuICAgICAgICAgICAgICAgIHZhciBleHRlbnNpb25zID0gdGhpcy5leHRlbnNpb25zO1xuICAgICAgICAgICAgICAgIHZhciBzY2VuZURlZiA9IHRoaXMuanNvbi5zY2VuZXNbIHNjZW5lSW5kZXggXTtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRNdWx0aURlcGVuZGVuY2llcyggW1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAnbm9kZScsXG4gICAgICAgICAgICAgICAgICAgICdza2luJ1xuICAgIFxuICAgICAgICAgICAgICAgIF0gKS50aGVuKCBmdW5jdGlvbiAoIGRlcGVuZGVuY2llcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICggc2NlbmVEZWYubmFtZSAhPT0gdW5kZWZpbmVkICkgc2NlbmUubmFtZSA9IHNjZW5lRGVmLm5hbWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggc2NlbmVEZWYuZXh0cmFzICkgc2NlbmUudXNlckRhdGEgPSBzY2VuZURlZi5leHRyYXM7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBub2RlSWRzID0gc2NlbmVEZWYubm9kZXMgfHwgW107XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgaWwgPSBub2RlSWRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGROb2RlSGllcmFjaHkoIG5vZGVJZHNbIGkgXSwgc2NlbmUsIGpzb24sIGRlcGVuZGVuY2llcy5ub2RlcywgZGVwZW5kZW5jaWVzLnNraW5zICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gQW1iaWVudCBsaWdodGluZywgaWYgcHJlc2VudCwgaXMgYWx3YXlzIGF0dGFjaGVkIHRvIHRoZSBzY2VuZSByb290LlxuICAgICAgICAgICAgICAgICAgICBpZiAoIHNjZW5lRGVmLmV4dGVuc2lvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgc2NlbmVEZWYuZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTElHSFRTIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgc2NlbmVEZWYuZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTElHSFRTIF0ubGlnaHQgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaWdodHMgPSBleHRlbnNpb25zWyBFWFRFTlNJT05TLktIUl9MSUdIVFMgXS5saWdodHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY2VuZS5hZGQoIGxpZ2h0c1sgc2NlbmVEZWYuZXh0ZW5zaW9uc1sgRVhURU5TSU9OUy5LSFJfTElHSFRTIF0ubGlnaHQgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzY2VuZTtcbiAgICBcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICB9KCk7XG4gICAgXG4gICAgICAgIHJldHVybiBHTFRGTG9hZGVyO1xuICAgIFxuICAgIH0gKSgpOyIsIi8qKlxuICogQGF1dGhvciBLeWxlLUxhcnNvbiBodHRwczovL2dpdGh1Yi5jb20vS3lsZS1MYXJzb25cbiAqIEBhdXRob3IgVGFrYWhpcm8gaHR0cHM6Ly9naXRodWIuY29tL3Rha2FoaXJveFxuICogQGF1dGhvciBMZXd5IEJsdWUgaHR0cHM6Ly9naXRodWIuY29tL2xvb2VlZVxuICpcbiAqIExvYWRlciBsb2FkcyBGQlggZmlsZSBhbmQgZ2VuZXJhdGVzIEdyb3VwIHJlcHJlc2VudGluZyBGQlggc2NlbmUuXG4gKiBSZXF1aXJlcyBGQlggZmlsZSB0byBiZSA+PSA3LjAgYW5kIGluIEFTQ0lJIG9yIHRvIGJlIGFueSB2ZXJzaW9uIGluIEJpbmFyeSBmb3JtYXQuXG4gKlxuICogU3VwcG9ydHM6XG4gKiBcdE1lc2ggR2VuZXJhdGlvbiAoUG9zaXRpb25hbCBEYXRhKVxuICogXHROb3JtYWwgRGF0YSAoUGVyIFZlcnRleCBEcmF3aW5nIEluc3RhbmNlKVxuICpcdFVWIERhdGEgKFBlciBWZXJ0ZXggRHJhd2luZyBJbnN0YW5jZSlcbiAqXHRTa2lubmluZ1xuICpcdEFuaW1hdGlvblxuICogXHQtIFNlcGFyYXRlZCBBbmltYXRpb25zIGJhc2VkIG9uIHN0YWNrcy5cbiAqIFx0LSBTa2VsZXRhbCAmIE5vbi1Ta2VsZXRhbCBBbmltYXRpb25zXG4gKlx0TlVSQlMgKE9wZW4sIENsb3NlZCBhbmQgUGVyaW9kaWMgZm9ybXMpXG4gKlxuICogTmVlZHMgU3VwcG9ydDpcbiAqXHRFdWxlciByb3RhdGlvbiBvcmRlclxuICpcbiAqXG4gKiBGQlggZm9ybWF0IHJlZmVyZW5jZXM6XG4gKiBcdGh0dHBzOi8vd2lraS5ibGVuZGVyLm9yZy9pbmRleC5waHAvVXNlcjpNb250MjkvRm91bmRhdGlvbi9GQlhfRmlsZV9TdHJ1Y3R1cmVcbiAqXG4gKiBcdEJpbmFyeSBmb3JtYXQgc3BlY2lmaWNhdGlvbjpcbiAqXHRcdGh0dHBzOi8vY29kZS5ibGVuZGVyLm9yZy8yMDEzLzA4L2ZieC1iaW5hcnktZmlsZS1mb3JtYXQtc3BlY2lmaWNhdGlvbi9cbiAqXHRcdGh0dHBzOi8vd2lraS5yb2dpa2VuLm9yZy9zcGVjaWZpY2F0aW9ucy9maWxlLWZvcm1hdC9mYngvIChtb3JlIGRldGFpbCBidXQgSmFwYW5lc2UpXG4gKi9cblxuKCBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgIFRIUkVFLkZCWExvYWRlciA9IGZ1bmN0aW9uICggbWFuYWdlciApIHtcbiAgICBcbiAgICAgICAgICAgIHRoaXMubWFuYWdlciA9ICggbWFuYWdlciAhPT0gdW5kZWZpbmVkICkgPyBtYW5hZ2VyIDogVEhSRUUuRGVmYXVsdExvYWRpbmdNYW5hZ2VyO1xuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICBPYmplY3QuYXNzaWduKCBUSFJFRS5GQlhMb2FkZXIucHJvdG90eXBlLCB7XG4gICAgXG4gICAgICAgICAgICBsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcmVzb3VyY2VEaXJlY3RvcnkgPSBUSFJFRS5Mb2FkZXJVdGlscy5leHRyYWN0VXJsQmFzZSggdXJsICk7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGxvYWRlciA9IG5ldyBUSFJFRS5GaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcbiAgICAgICAgICAgICAgICBsb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCAnYXJyYXlidWZmZXInICk7XG4gICAgICAgICAgICAgICAgbG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCBidWZmZXIgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2NlbmUgPSBzZWxmLnBhcnNlKCBidWZmZXIsIHJlc291cmNlRGlyZWN0b3J5ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkxvYWQoIHNjZW5lICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKCBlcnJvciApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBvbkVycm9yICkgb25FcnJvciggZXJyb3IgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDAgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBwYXJzZTogZnVuY3Rpb24gKCBGQlhCdWZmZXIsIHJlc291cmNlRGlyZWN0b3J5ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBGQlhUcmVlO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggaXNGYnhGb3JtYXRCaW5hcnkoIEZCWEJ1ZmZlciApICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBGQlhUcmVlID0gbmV3IEJpbmFyeVBhcnNlcigpLnBhcnNlKCBGQlhCdWZmZXIgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgRkJYVGV4dCA9IGNvbnZlcnRBcnJheUJ1ZmZlclRvU3RyaW5nKCBGQlhCdWZmZXIgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAhIGlzRmJ4Rm9ybWF0QVNDSUkoIEZCWFRleHQgKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggJ1RIUkVFLkZCWExvYWRlcjogVW5rbm93biBmb3JtYXQuJyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggZ2V0RmJ4VmVyc2lvbiggRkJYVGV4dCApIDwgNzAwMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciggJ1RIUkVFLkZCWExvYWRlcjogRkJYIHZlcnNpb24gbm90IHN1cHBvcnRlZCwgRmlsZVZlcnNpb246ICcgKyBnZXRGYnhWZXJzaW9uKCBGQlhUZXh0ICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBGQlhUcmVlID0gbmV3IFRleHRQYXJzZXIoKS5wYXJzZSggRkJYVGV4dCApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyggRkJYVHJlZSApO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBjb25uZWN0aW9ucyA9IHBhcnNlQ29ubmVjdGlvbnMoIEZCWFRyZWUgKTtcbiAgICAgICAgICAgICAgICB2YXIgaW1hZ2VzID0gcGFyc2VJbWFnZXMoIEZCWFRyZWUgKTtcbiAgICAgICAgICAgICAgICB2YXIgdGV4dHVyZXMgPSBwYXJzZVRleHR1cmVzKCBGQlhUcmVlLCBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlciggdGhpcy5tYW5hZ2VyICkuc2V0UGF0aCggcmVzb3VyY2VEaXJlY3RvcnkgKSwgaW1hZ2VzLCBjb25uZWN0aW9ucyApO1xuICAgICAgICAgICAgICAgIHZhciBtYXRlcmlhbHMgPSBwYXJzZU1hdGVyaWFscyggRkJYVHJlZSwgdGV4dHVyZXMsIGNvbm5lY3Rpb25zICk7XG4gICAgICAgICAgICAgICAgdmFyIHNrZWxldG9ucyA9IHBhcnNlRGVmb3JtZXJzKCBGQlhUcmVlLCBjb25uZWN0aW9ucyApO1xuICAgICAgICAgICAgICAgIHZhciBnZW9tZXRyeU1hcCA9IHBhcnNlR2VvbWV0cmllcyggRkJYVHJlZSwgY29ubmVjdGlvbnMsIHNrZWxldG9ucyApO1xuICAgICAgICAgICAgICAgIHZhciBzY2VuZUdyYXBoID0gcGFyc2VTY2VuZSggRkJYVHJlZSwgY29ubmVjdGlvbnMsIHNrZWxldG9ucywgZ2VvbWV0cnlNYXAsIG1hdGVyaWFscyApO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBzY2VuZUdyYXBoO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgIC8vIFBhcnNlcyBGQlhUcmVlLkNvbm5lY3Rpb25zIHdoaWNoIGhvbGRzIHBhcmVudC1jaGlsZCBjb25uZWN0aW9ucyBiZXR3ZWVuIG9iamVjdHMgKGUuZy4gbWF0ZXJpYWwgLT4gdGV4dHVyZSwgbW9kZWwtPmdlb21ldHJ5IClcbiAgICAgICAgLy8gYW5kIGRldGFpbHMgdGhlIGNvbm5lY3Rpb24gdHlwZVxuICAgICAgICBmdW5jdGlvbiBwYXJzZUNvbm5lY3Rpb25zKCBGQlhUcmVlICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIGNvbm5lY3Rpb25NYXAgPSBuZXcgTWFwKCk7XG4gICAgXG4gICAgICAgICAgICBpZiAoICdDb25uZWN0aW9ucycgaW4gRkJYVHJlZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcmF3Q29ubmVjdGlvbnMgPSBGQlhUcmVlLkNvbm5lY3Rpb25zLmNvbm5lY3Rpb25zO1xuICAgIFxuICAgICAgICAgICAgICAgIHJhd0Nvbm5lY3Rpb25zLmZvckVhY2goIGZ1bmN0aW9uICggcmF3Q29ubmVjdGlvbiApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb21JRCA9IHJhd0Nvbm5lY3Rpb25bIDAgXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvSUQgPSByYXdDb25uZWN0aW9uWyAxIF07XG4gICAgICAgICAgICAgICAgICAgIHZhciByZWxhdGlvbnNoaXAgPSByYXdDb25uZWN0aW9uWyAyIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggISBjb25uZWN0aW9uTWFwLmhhcyggZnJvbUlEICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uTWFwLnNldCggZnJvbUlELCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50czogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudFJlbGF0aW9uc2hpcCA9IHsgSUQ6IHRvSUQsIHJlbGF0aW9uc2hpcDogcmVsYXRpb25zaGlwIH07XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25NYXAuZ2V0KCBmcm9tSUQgKS5wYXJlbnRzLnB1c2goIHBhcmVudFJlbGF0aW9uc2hpcCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoICEgY29ubmVjdGlvbk1hcC5oYXMoIHRvSUQgKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25NYXAuc2V0KCB0b0lELCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50czogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkUmVsYXRpb25zaGlwID0geyBJRDogZnJvbUlELCByZWxhdGlvbnNoaXA6IHJlbGF0aW9uc2hpcCB9O1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uTWFwLmdldCggdG9JRCApLmNoaWxkcmVuLnB1c2goIGNoaWxkUmVsYXRpb25zaGlwICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb25NYXA7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gUGFyc2UgRkJYVHJlZS5PYmplY3RzLlZpZGVvIGZvciBlbWJlZGRlZCBpbWFnZSBkYXRhXG4gICAgICAgIC8vIFRoZXNlIGltYWdlcyBhcmUgY29ubmVjdGVkIHRvIHRleHR1cmVzIGluIEZCWFRyZWUuT2JqZWN0cy5UZXh0dXJlc1xuICAgICAgICAvLyB2aWEgRkJYVHJlZS5Db25uZWN0aW9ucy5cbiAgICAgICAgZnVuY3Rpb24gcGFyc2VJbWFnZXMoIEZCWFRyZWUgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgaW1hZ2VzID0ge307XG4gICAgICAgICAgICB2YXIgYmxvYnMgPSB7fTtcbiAgICBcbiAgICAgICAgICAgIGlmICggJ1ZpZGVvJyBpbiBGQlhUcmVlLk9iamVjdHMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHZpZGVvTm9kZXMgPSBGQlhUcmVlLk9iamVjdHMuVmlkZW87XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIG5vZGVJRCBpbiB2aWRlb05vZGVzICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgdmlkZW9Ob2RlID0gdmlkZW9Ob2Rlc1sgbm9kZUlEIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IHBhcnNlSW50KCBub2RlSUQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VzWyBpZCBdID0gdmlkZW9Ob2RlLkZpbGVuYW1lO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyByYXcgaW1hZ2UgZGF0YSBpcyBpbiB2aWRlb05vZGUuQ29udGVudFxuICAgICAgICAgICAgICAgICAgICBpZiAoICdDb250ZW50JyBpbiB2aWRlb05vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYXlCdWZmZXJDb250ZW50ID0gKCB2aWRlb05vZGUuQ29udGVudCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyICkgJiYgKCB2aWRlb05vZGUuQ29udGVudC5ieXRlTGVuZ3RoID4gMCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJhc2U2NENvbnRlbnQgPSAoIHR5cGVvZiB2aWRlb05vZGUuQ29udGVudCA9PT0gJ3N0cmluZycgKSAmJiAoIHZpZGVvTm9kZS5Db250ZW50ICE9PSAnJyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBhcnJheUJ1ZmZlckNvbnRlbnQgfHwgYmFzZTY0Q29udGVudCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW1hZ2UgPSBwYXJzZUltYWdlKCB2aWRlb05vZGVzWyBub2RlSUQgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsb2JzWyB2aWRlb05vZGUuRmlsZW5hbWUgXSA9IGltYWdlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZm9yICggdmFyIGlkIGluIGltYWdlcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZmlsZW5hbWUgPSBpbWFnZXNbIGlkIF07XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBibG9ic1sgZmlsZW5hbWUgXSAhPT0gdW5kZWZpbmVkICkgaW1hZ2VzWyBpZCBdID0gYmxvYnNbIGZpbGVuYW1lIF07XG4gICAgICAgICAgICAgICAgZWxzZSBpbWFnZXNbIGlkIF0gPSBpbWFnZXNbIGlkIF0uc3BsaXQoICdcXFxcJyApLnBvcCgpO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGltYWdlcztcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBQYXJzZSBlbWJlZGRlZCBpbWFnZSBkYXRhIGluIEZCWFRyZWUuVmlkZW8uQ29udGVudFxuICAgICAgICBmdW5jdGlvbiBwYXJzZUltYWdlKCB2aWRlb05vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHZpZGVvTm9kZS5Db250ZW50O1xuICAgICAgICAgICAgdmFyIGZpbGVOYW1lID0gdmlkZW9Ob2RlLlJlbGF0aXZlRmlsZW5hbWUgfHwgdmlkZW9Ob2RlLkZpbGVuYW1lO1xuICAgICAgICAgICAgdmFyIGV4dGVuc2lvbiA9IGZpbGVOYW1lLnNsaWNlKCBmaWxlTmFtZS5sYXN0SW5kZXhPZiggJy4nICkgKyAxICkudG9Mb3dlckNhc2UoKTtcbiAgICBcbiAgICAgICAgICAgIHZhciB0eXBlO1xuICAgIFxuICAgICAgICAgICAgc3dpdGNoICggZXh0ZW5zaW9uICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGNhc2UgJ2JtcCc6XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnaW1hZ2UvYm1wJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgY2FzZSAnanBnJzpcbiAgICAgICAgICAgICAgICBjYXNlICdqcGVnJzpcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdpbWFnZS9qcGVnJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgY2FzZSAncG5nJzpcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdpbWFnZS9wbmcnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICBjYXNlICd0aWYnOlxuICAgIFxuICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ2ltYWdlL3RpZmYnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdGQlhMb2FkZXI6IEltYWdlIHR5cGUgXCInICsgZXh0ZW5zaW9uICsgJ1wiIGlzIG5vdCBzdXBwb3J0ZWQuJyApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAoIHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJyApIHsgLy8gQVNDSUkgZm9ybWF0XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuICdkYXRhOicgKyB0eXBlICsgJztiYXNlNjQsJyArIGNvbnRlbnQ7XG4gICAgXG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBCaW5hcnkgRm9ybWF0XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoIGNvbnRlbnQgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoIG5ldyBCbG9iKCBbIGFycmF5IF0sIHsgdHlwZTogdHlwZSB9ICkgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBQYXJzZSBub2RlcyBpbiBGQlhUcmVlLk9iamVjdHMuVGV4dHVyZVxuICAgICAgICAvLyBUaGVzZSBjb250YWluIGRldGFpbHMgc3VjaCBhcyBVViBzY2FsaW5nLCBjcm9wcGluZywgcm90YXRpb24gZXRjIGFuZCBhcmUgY29ubmVjdGVkXG4gICAgICAgIC8vIHRvIGltYWdlcyBpbiBGQlhUcmVlLk9iamVjdHMuVmlkZW9cbiAgICAgICAgZnVuY3Rpb24gcGFyc2VUZXh0dXJlcyggRkJYVHJlZSwgbG9hZGVyLCBpbWFnZXMsIGNvbm5lY3Rpb25zICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHRleHR1cmVNYXAgPSBuZXcgTWFwKCk7XG4gICAgXG4gICAgICAgICAgICBpZiAoICdUZXh0dXJlJyBpbiBGQlhUcmVlLk9iamVjdHMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHRleHR1cmVOb2RlcyA9IEZCWFRyZWUuT2JqZWN0cy5UZXh0dXJlO1xuICAgICAgICAgICAgICAgIGZvciAoIHZhciBub2RlSUQgaW4gdGV4dHVyZU5vZGVzICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dHVyZSA9IHBhcnNlVGV4dHVyZSggdGV4dHVyZU5vZGVzWyBub2RlSUQgXSwgbG9hZGVyLCBpbWFnZXMsIGNvbm5lY3Rpb25zICk7XG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmVNYXAuc2V0KCBwYXJzZUludCggbm9kZUlEICksIHRleHR1cmUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gdGV4dHVyZU1hcDtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBQYXJzZSBpbmRpdmlkdWFsIG5vZGUgaW4gRkJYVHJlZS5PYmplY3RzLlRleHR1cmVcbiAgICAgICAgZnVuY3Rpb24gcGFyc2VUZXh0dXJlKCB0ZXh0dXJlTm9kZSwgbG9hZGVyLCBpbWFnZXMsIGNvbm5lY3Rpb25zICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHRleHR1cmUgPSBsb2FkVGV4dHVyZSggdGV4dHVyZU5vZGUsIGxvYWRlciwgaW1hZ2VzLCBjb25uZWN0aW9ucyApO1xuICAgIFxuICAgICAgICAgICAgdGV4dHVyZS5JRCA9IHRleHR1cmVOb2RlLmlkO1xuICAgIFxuICAgICAgICAgICAgdGV4dHVyZS5uYW1lID0gdGV4dHVyZU5vZGUuYXR0ck5hbWU7XG4gICAgXG4gICAgICAgICAgICB2YXIgd3JhcE1vZGVVID0gdGV4dHVyZU5vZGUuV3JhcE1vZGVVO1xuICAgICAgICAgICAgdmFyIHdyYXBNb2RlViA9IHRleHR1cmVOb2RlLldyYXBNb2RlVjtcbiAgICBcbiAgICAgICAgICAgIHZhciB2YWx1ZVUgPSB3cmFwTW9kZVUgIT09IHVuZGVmaW5lZCA/IHdyYXBNb2RlVS52YWx1ZSA6IDA7XG4gICAgICAgICAgICB2YXIgdmFsdWVWID0gd3JhcE1vZGVWICE9PSB1bmRlZmluZWQgPyB3cmFwTW9kZVYudmFsdWUgOiAwO1xuICAgIFxuICAgICAgICAgICAgLy8gaHR0cDovL2Rvd25sb2FkLmF1dG9kZXNrLmNvbS91cy9mYngvU0RLZG9jcy9GQlhfU0RLX0hlbHAvZmlsZXMvZmJ4c2RrcmVmL2NsYXNzX2tfZmJ4X3RleHR1cmUuaHRtbCM4ODk2NDBlNjNlMmU2ODEyNTllYTgxMDYxYjg1MTQzYVxuICAgICAgICAgICAgLy8gMDogcmVwZWF0KGRlZmF1bHQpLCAxOiBjbGFtcFxuICAgIFxuICAgICAgICAgICAgdGV4dHVyZS53cmFwUyA9IHZhbHVlVSA9PT0gMCA/IFRIUkVFLlJlcGVhdFdyYXBwaW5nIDogVEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZztcbiAgICAgICAgICAgIHRleHR1cmUud3JhcFQgPSB2YWx1ZVYgPT09IDAgPyBUSFJFRS5SZXBlYXRXcmFwcGluZyA6IFRIUkVFLkNsYW1wVG9FZGdlV3JhcHBpbmc7XG4gICAgXG4gICAgICAgICAgICBpZiAoICdTY2FsaW5nJyBpbiB0ZXh0dXJlTm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gdGV4dHVyZU5vZGUuU2NhbGluZy52YWx1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICB0ZXh0dXJlLnJlcGVhdC54ID0gdmFsdWVzWyAwIF07XG4gICAgICAgICAgICAgICAgdGV4dHVyZS5yZXBlYXQueSA9IHZhbHVlc1sgMSBdO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRleHR1cmU7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gbG9hZCBhIHRleHR1cmUgc3BlY2lmaWVkIGFzIGEgYmxvYiBvciBkYXRhIFVSSSwgb3IgdmlhIGFuIGV4dGVybmFsIFVSTCB1c2luZyBUSFJFRS5UZXh0dXJlTG9hZGVyXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRUZXh0dXJlKCB0ZXh0dXJlTm9kZSwgbG9hZGVyLCBpbWFnZXMsIGNvbm5lY3Rpb25zICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIGZpbGVOYW1lO1xuICAgIFxuICAgICAgICAgICAgdmFyIGN1cnJlbnRQYXRoID0gbG9hZGVyLnBhdGg7XG4gICAgXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBjb25uZWN0aW9ucy5nZXQoIHRleHR1cmVOb2RlLmlkICkuY2hpbGRyZW47XG4gICAgXG4gICAgICAgICAgICBpZiAoIGNoaWxkcmVuICE9PSB1bmRlZmluZWQgJiYgY2hpbGRyZW4ubGVuZ3RoID4gMCAmJiBpbWFnZXNbIGNoaWxkcmVuWyAwIF0uSUQgXSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGZpbGVOYW1lID0gaW1hZ2VzWyBjaGlsZHJlblsgMCBdLklEIF07XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBmaWxlTmFtZS5pbmRleE9mKCAnYmxvYjonICkgPT09IDAgfHwgZmlsZU5hbWUuaW5kZXhPZiggJ2RhdGE6JyApID09PSAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBsb2FkZXIuc2V0UGF0aCggdW5kZWZpbmVkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdmFyIHRleHR1cmUgPSBsb2FkZXIubG9hZCggZmlsZU5hbWUgKTtcbiAgICBcbiAgICAgICAgICAgIGxvYWRlci5zZXRQYXRoKCBjdXJyZW50UGF0aCApO1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRleHR1cmU7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gUGFyc2Ugbm9kZXMgaW4gRkJYVHJlZS5PYmplY3RzLk1hdGVyaWFsXG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlTWF0ZXJpYWxzKCBGQlhUcmVlLCB0ZXh0dXJlTWFwLCBjb25uZWN0aW9ucyApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBtYXRlcmlhbE1hcCA9IG5ldyBNYXAoKTtcbiAgICBcbiAgICAgICAgICAgIGlmICggJ01hdGVyaWFsJyBpbiBGQlhUcmVlLk9iamVjdHMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG1hdGVyaWFsTm9kZXMgPSBGQlhUcmVlLk9iamVjdHMuTWF0ZXJpYWw7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIG5vZGVJRCBpbiBtYXRlcmlhbE5vZGVzICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSBwYXJzZU1hdGVyaWFsKCBGQlhUcmVlLCBtYXRlcmlhbE5vZGVzWyBub2RlSUQgXSwgdGV4dHVyZU1hcCwgY29ubmVjdGlvbnMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBtYXRlcmlhbCAhPT0gbnVsbCApIG1hdGVyaWFsTWFwLnNldCggcGFyc2VJbnQoIG5vZGVJRCApLCBtYXRlcmlhbCApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBtYXRlcmlhbE1hcDtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBQYXJzZSBzaW5nbGUgbm9kZSBpbiBGQlhUcmVlLk9iamVjdHMuTWF0ZXJpYWxcbiAgICAgICAgLy8gTWF0ZXJpYWxzIGFyZSBjb25uZWN0ZWQgdG8gdGV4dHVyZSBtYXBzIGluIEZCWFRyZWUuT2JqZWN0cy5UZXh0dXJlc1xuICAgICAgICAvLyBGQlggZm9ybWF0IGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIExhbWJlcnQgYW5kIFBob25nIHNoYWRpbmcgbW9kZWxzXG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlTWF0ZXJpYWwoIEZCWFRyZWUsIG1hdGVyaWFsTm9kZSwgdGV4dHVyZU1hcCwgY29ubmVjdGlvbnMgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgSUQgPSBtYXRlcmlhbE5vZGUuaWQ7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IG1hdGVyaWFsTm9kZS5hdHRyTmFtZTtcbiAgICAgICAgICAgIHZhciB0eXBlID0gbWF0ZXJpYWxOb2RlLlNoYWRpbmdNb2RlbDtcbiAgICBcbiAgICAgICAgICAgIC8vQ2FzZSB3aGVyZSBGQlggd3JhcHMgc2hhZGluZyBtb2RlbCBpbiBwcm9wZXJ0eSBvYmplY3QuXG4gICAgICAgICAgICBpZiAoIHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB0eXBlID0gdHlwZS52YWx1ZTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIC8vIElnbm9yZSB1bnVzZWQgbWF0ZXJpYWxzIHdoaWNoIGRvbid0IGhhdmUgYW55IGNvbm5lY3Rpb25zLlxuICAgICAgICAgICAgaWYgKCAhIGNvbm5lY3Rpb25zLmhhcyggSUQgKSApIHJldHVybiBudWxsO1xuICAgIFxuICAgICAgICAgICAgdmFyIHBhcmFtZXRlcnMgPSBwYXJzZVBhcmFtZXRlcnMoIEZCWFRyZWUsIG1hdGVyaWFsTm9kZSwgdGV4dHVyZU1hcCwgSUQsIGNvbm5lY3Rpb25zICk7XG4gICAgXG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWw7XG4gICAgXG4gICAgICAgICAgICBzd2l0Y2ggKCB0eXBlLnRvTG93ZXJDYXNlKCkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgY2FzZSAncGhvbmcnOlxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdsYW1iZXJ0JzpcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaExhbWJlcnRNYXRlcmlhbCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5GQlhMb2FkZXI6IHVua25vd24gbWF0ZXJpYWwgdHlwZSBcIiVzXCIuIERlZmF1bHRpbmcgdG8gTWVzaFBob25nTWF0ZXJpYWwuJywgdHlwZSApO1xuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCggeyBjb2xvcjogMHgzMzAwZmYgfSApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIG1hdGVyaWFsLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuICAgICAgICAgICAgbWF0ZXJpYWwubmFtZSA9IG5hbWU7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gbWF0ZXJpYWw7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gUGFyc2UgRkJYIG1hdGVyaWFsIGFuZCByZXR1cm4gcGFyYW1ldGVycyBzdWl0YWJsZSBmb3IgYSB0aHJlZS5qcyBtYXRlcmlhbFxuICAgICAgICAvLyBBbHNvIHBhcnNlIHRoZSB0ZXh0dXJlIG1hcCBhbmQgcmV0dXJuIGFueSB0ZXh0dXJlcyBhc3NvY2lhdGVkIHdpdGggdGhlIG1hdGVyaWFsXG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlUGFyYW1ldGVycyggRkJYVHJlZSwgcHJvcGVydGllcywgdGV4dHVyZU1hcCwgSUQsIGNvbm5lY3Rpb25zICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHBhcmFtZXRlcnMgPSB7fTtcbiAgICBcbiAgICAgICAgICAgIGlmICggcHJvcGVydGllcy5CdW1wRmFjdG9yICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMuYnVtcFNjYWxlID0gcHJvcGVydGllcy5CdW1wRmFjdG9yLnZhbHVlO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCBwcm9wZXJ0aWVzLkRpZmZ1c2UgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycy5jb2xvciA9IG5ldyBUSFJFRS5Db2xvcigpLmZyb21BcnJheSggcHJvcGVydGllcy5EaWZmdXNlLnZhbHVlICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIHByb3BlcnRpZXMuRGlzcGxhY2VtZW50RmFjdG9yICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMuZGlzcGxhY2VtZW50U2NhbGUgPSBwcm9wZXJ0aWVzLkRpc3BsYWNlbWVudEZhY3Rvci52YWx1ZTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggcHJvcGVydGllcy5SZWZsZWN0aW9uRmFjdG9yICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMucmVmbGVjdGl2aXR5ID0gcHJvcGVydGllcy5SZWZsZWN0aW9uRmFjdG9yLnZhbHVlO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCBwcm9wZXJ0aWVzLlNwZWN1bGFyICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMuc3BlY3VsYXIgPSBuZXcgVEhSRUUuQ29sb3IoKS5mcm9tQXJyYXkoIHByb3BlcnRpZXMuU3BlY3VsYXIudmFsdWUgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggcHJvcGVydGllcy5TaGluaW5lc3MgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycy5zaGluaW5lc3MgPSBwcm9wZXJ0aWVzLlNoaW5pbmVzcy52YWx1ZTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggcHJvcGVydGllcy5FbWlzc2l2ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLmVtaXNzaXZlID0gbmV3IFRIUkVFLkNvbG9yKCkuZnJvbUFycmF5KCBwcm9wZXJ0aWVzLkVtaXNzaXZlLnZhbHVlICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIHByb3BlcnRpZXMuRW1pc3NpdmVGYWN0b3IgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycy5lbWlzc2l2ZUludGVuc2l0eSA9IHBhcnNlRmxvYXQoIHByb3BlcnRpZXMuRW1pc3NpdmVGYWN0b3IudmFsdWUgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggcHJvcGVydGllcy5PcGFjaXR5ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMub3BhY2l0eSA9IHBhcnNlRmxvYXQoIHByb3BlcnRpZXMuT3BhY2l0eS52YWx1ZSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCBwYXJhbWV0ZXJzLm9wYWNpdHkgPCAxLjAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcGFyYW1ldGVycy50cmFuc3BhcmVudCA9IHRydWU7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBjb25uZWN0aW9ucy5nZXQoIElEICkuY2hpbGRyZW4uZm9yRWFjaCggZnVuY3Rpb24gKCBjaGlsZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IGNoaWxkLnJlbGF0aW9uc2hpcDtcbiAgICBcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKCB0eXBlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdCdW1wJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMuYnVtcE1hcCA9IHRleHR1cmVNYXAuZ2V0KCBjaGlsZC5JRCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0RpZmZ1c2VDb2xvcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLm1hcCA9IGdldFRleHR1cmUoIEZCWFRyZWUsIHRleHR1cmVNYXAsIGNoaWxkLklELCBjb25uZWN0aW9ucyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0Rpc3BsYWNlbWVudENvbG9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMuZGlzcGxhY2VtZW50TWFwID0gZ2V0VGV4dHVyZSggRkJYVHJlZSwgdGV4dHVyZU1hcCwgY2hpbGQuSUQsIGNvbm5lY3Rpb25zICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnRW1pc3NpdmVDb2xvcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwID0gZ2V0VGV4dHVyZSggRkJYVHJlZSwgdGV4dHVyZU1hcCwgY2hpbGQuSUQsIGNvbm5lY3Rpb25zICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTm9ybWFsTWFwJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMubm9ybWFsTWFwID0gZ2V0VGV4dHVyZSggRkJYVHJlZSwgdGV4dHVyZU1hcCwgY2hpbGQuSUQsIGNvbm5lY3Rpb25zICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnUmVmbGVjdGlvbkNvbG9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnMuZW52TWFwID0gZ2V0VGV4dHVyZSggRkJYVHJlZSwgdGV4dHVyZU1hcCwgY2hpbGQuSUQsIGNvbm5lY3Rpb25zICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLmVudk1hcC5tYXBwaW5nID0gVEhSRUUuRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnU3BlY3VsYXJDb2xvcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLnNwZWN1bGFyTWFwID0gZ2V0VGV4dHVyZSggRkJYVHJlZSwgdGV4dHVyZU1hcCwgY2hpbGQuSUQsIGNvbm5lY3Rpb25zICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnVHJhbnNwYXJlbnRDb2xvcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLmFscGhhTWFwID0gZ2V0VGV4dHVyZSggRkJYVHJlZSwgdGV4dHVyZU1hcCwgY2hpbGQuSUQsIGNvbm5lY3Rpb25zICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLnRyYW5zcGFyZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdBbWJpZW50Q29sb3InOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdTaGluaW5lc3NFeHBvbmVudCc6IC8vIEFLQSBnbG9zc2luZXNzIG1hcFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdTcGVjdWxhckZhY3Rvcic6IC8vIEFLQSBzcGVjdWxhckxldmVsXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1ZlY3RvckRpc3BsYWNlbWVudENvbG9yJzogLy8gTk9URTogU2VlbXMgdG8gYmUgYSBjb3B5IG9mIERpc3BsYWNlbWVudENvbG9yXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5GQlhMb2FkZXI6ICVzIG1hcCBpcyBub3Qgc3VwcG9ydGVkIGluIHRocmVlLmpzLCBza2lwcGluZyB0ZXh0dXJlLicsIHR5cGUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBwYXJhbWV0ZXJzO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIGdldCBhIHRleHR1cmUgZnJvbSB0aGUgdGV4dHVyZU1hcCBmb3IgdXNlIGJ5IGEgbWF0ZXJpYWwuXG4gICAgICAgIGZ1bmN0aW9uIGdldFRleHR1cmUoIEZCWFRyZWUsIHRleHR1cmVNYXAsIGlkLCBjb25uZWN0aW9ucyApIHtcbiAgICBcbiAgICAgICAgICAgIC8vIGlmIHRoZSB0ZXh0dXJlIGlzIGEgbGF5ZXJlZCB0ZXh0dXJlLCBqdXN0IHVzZSB0aGUgZmlyc3QgbGF5ZXIgYW5kIGlzc3VlIGEgd2FybmluZ1xuICAgICAgICAgICAgaWYgKCAnTGF5ZXJlZFRleHR1cmUnIGluIEZCWFRyZWUuT2JqZWN0cyAmJiBpZCBpbiBGQlhUcmVlLk9iamVjdHMuTGF5ZXJlZFRleHR1cmUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCAnVEhSRUUuRkJYTG9hZGVyOiBsYXllcmVkIHRleHR1cmVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIHRocmVlLmpzLiBEaXNjYXJkaW5nIGFsbCBidXQgZmlyc3QgbGF5ZXIuJyApO1xuICAgICAgICAgICAgICAgIGlkID0gY29ubmVjdGlvbnMuZ2V0KCBpZCApLmNoaWxkcmVuWyAwIF0uSUQ7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gdGV4dHVyZU1hcC5nZXQoIGlkICk7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gUGFyc2Ugbm9kZXMgaW4gRkJYVHJlZS5PYmplY3RzLkRlZm9ybWVyXG4gICAgICAgIC8vIERlZm9ybWVyIG5vZGUgY2FuIGNvbnRhaW4gc2tpbm5pbmcgb3IgVmVydGV4IENhY2hlIGFuaW1hdGlvbiBkYXRhLCBob3dldmVyIG9ubHkgc2tpbm5pbmcgaXMgc3VwcG9ydGVkIGhlcmVcbiAgICAgICAgLy8gR2VuZXJhdGVzIG1hcCBvZiBTa2VsZXRvbi1saWtlIG9iamVjdHMgZm9yIHVzZSBsYXRlciB3aGVuIGdlbmVyYXRpbmcgYW5kIGJpbmRpbmcgc2tlbGV0b25zLlxuICAgICAgICBmdW5jdGlvbiBwYXJzZURlZm9ybWVycyggRkJYVHJlZSwgY29ubmVjdGlvbnMgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgc2tlbGV0b25zID0ge307XG4gICAgXG4gICAgICAgICAgICBpZiAoICdEZWZvcm1lcicgaW4gRkJYVHJlZS5PYmplY3RzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBEZWZvcm1lck5vZGVzID0gRkJYVHJlZS5PYmplY3RzLkRlZm9ybWVyO1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBub2RlSUQgaW4gRGVmb3JtZXJOb2RlcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlZm9ybWVyTm9kZSA9IERlZm9ybWVyTm9kZXNbIG5vZGVJRCBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGRlZm9ybWVyTm9kZS5hdHRyVHlwZSA9PT0gJ1NraW4nICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlbGF0aW9uc2hpcHMgPSBjb25uZWN0aW9ucy5nZXQoIHBhcnNlSW50KCBub2RlSUQgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNrZWxldG9uID0gcGFyc2VTa2VsZXRvbiggcmVsYXRpb25zaGlwcywgRGVmb3JtZXJOb2RlcyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2tlbGV0b24uSUQgPSBub2RlSUQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHJlbGF0aW9uc2hpcHMucGFyZW50cy5sZW5ndGggPiAxICkgY29uc29sZS53YXJuKCAnVEhSRUUuRkJYTG9hZGVyOiBza2VsZXRvbiBhdHRhY2hlZCB0byBtb3JlIHRoYW4gb25lIGdlb21ldHJ5IGlzIG5vdCBzdXBwb3J0ZWQuJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2tlbGV0b24uZ2VvbWV0cnlJRCA9IHJlbGF0aW9uc2hpcHMucGFyZW50c1sgMCBdLklEO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgc2tlbGV0b25zWyBub2RlSUQgXSA9IHNrZWxldG9uO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIHNrZWxldG9ucztcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBQYXJzZSBzaW5nbGUgbm9kZXMgaW4gRkJYVHJlZS5PYmplY3RzLkRlZm9ybWVyXG4gICAgICAgIC8vIFRoZSB0b3AgbGV2ZWwgZGVmb3JtZXIgbm9kZXMgaGF2ZSB0eXBlICdTa2luJyBhbmQgc3ViRGVmb3JtZXIgbm9kZXMgaGF2ZSB0eXBlICdDbHVzdGVyJ1xuICAgICAgICAvLyBFYWNoIHNraW4gbm9kZSByZXByZXNlbnRzIGEgc2tlbGV0b24gYW5kIGVhY2ggY2x1c3RlciBub2RlIHJlcHJlc2VudHMgYSBib25lXG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlU2tlbGV0b24oIGNvbm5lY3Rpb25zLCBkZWZvcm1lck5vZGVzICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHJhd0JvbmVzID0gW107XG4gICAgXG4gICAgICAgICAgICBjb25uZWN0aW9ucy5jaGlsZHJlbi5mb3JFYWNoKCBmdW5jdGlvbiAoIGNoaWxkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBzdWJEZWZvcm1lck5vZGUgPSBkZWZvcm1lck5vZGVzWyBjaGlsZC5JRCBdO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggc3ViRGVmb3JtZXJOb2RlLmF0dHJUeXBlICE9PSAnQ2x1c3RlcicgKSByZXR1cm47XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHJhd0JvbmUgPSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIElEOiBjaGlsZC5JRCxcbiAgICAgICAgICAgICAgICAgICAgaW5kaWNlczogW10sXG4gICAgICAgICAgICAgICAgICAgIHdlaWdodHM6IFtdLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IG5ldyBUSFJFRS5NYXRyaXg0KCkuZnJvbUFycmF5KCBzdWJEZWZvcm1lck5vZGUuVHJhbnNmb3JtLmEgKSxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtTGluazogbmV3IFRIUkVFLk1hdHJpeDQoKS5mcm9tQXJyYXkoIHN1YkRlZm9ybWVyTm9kZS5UcmFuc2Zvcm1MaW5rLmEgKSxcbiAgICAgICAgICAgICAgICAgICAgbGlua01vZGU6IHN1YkRlZm9ybWVyTm9kZS5Nb2RlLFxuICAgIFxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCAnSW5kZXhlcycgaW4gc3ViRGVmb3JtZXJOb2RlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByYXdCb25lLmluZGljZXMgPSBzdWJEZWZvcm1lck5vZGUuSW5kZXhlcy5hO1xuICAgICAgICAgICAgICAgICAgICByYXdCb25lLndlaWdodHMgPSBzdWJEZWZvcm1lck5vZGUuV2VpZ2h0cy5hO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByYXdCb25lcy5wdXNoKCByYXdCb25lICk7XG4gICAgXG4gICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgIFxuICAgICAgICAgICAgICAgIHJhd0JvbmVzOiByYXdCb25lcyxcbiAgICAgICAgICAgICAgICBib25lczogW11cbiAgICBcbiAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gUGFyc2Ugbm9kZXMgaW4gRkJYVHJlZS5PYmplY3RzLkdlb21ldHJ5XG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlR2VvbWV0cmllcyggRkJYVHJlZSwgY29ubmVjdGlvbnMsIHNrZWxldG9ucyApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBnZW9tZXRyeU1hcCA9IG5ldyBNYXAoKTtcbiAgICBcbiAgICAgICAgICAgIGlmICggJ0dlb21ldHJ5JyBpbiBGQlhUcmVlLk9iamVjdHMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGdlb21ldHJ5Tm9kZXMgPSBGQlhUcmVlLk9iamVjdHMuR2VvbWV0cnk7XG4gICAgXG4gICAgXG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIG5vZGVJRCBpbiBnZW9tZXRyeU5vZGVzICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVsYXRpb25zaGlwcyA9IGNvbm5lY3Rpb25zLmdldCggcGFyc2VJbnQoIG5vZGVJRCApICk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBnZW8gPSBwYXJzZUdlb21ldHJ5KCBGQlhUcmVlLCByZWxhdGlvbnNoaXBzLCBnZW9tZXRyeU5vZGVzWyBub2RlSUQgXSwgc2tlbGV0b25zICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5TWFwLnNldCggcGFyc2VJbnQoIG5vZGVJRCApLCBnZW8gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gZ2VvbWV0cnlNYXA7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gUGFyc2Ugc2luZ2xlIG5vZGUgaW4gRkJYVHJlZS5PYmplY3RzLkdlb21ldHJ5XG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlR2VvbWV0cnkoIEZCWFRyZWUsIHJlbGF0aW9uc2hpcHMsIGdlb21ldHJ5Tm9kZSwgc2tlbGV0b25zICkge1xuICAgIFxuICAgICAgICAgICAgc3dpdGNoICggZ2VvbWV0cnlOb2RlLmF0dHJUeXBlICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGNhc2UgJ01lc2gnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VNZXNoR2VvbWV0cnkoIEZCWFRyZWUsIHJlbGF0aW9uc2hpcHMsIGdlb21ldHJ5Tm9kZSwgc2tlbGV0b25zICk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgIGNhc2UgJ051cmJzQ3VydmUnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VOdXJic0dlb21ldHJ5KCBnZW9tZXRyeU5vZGUgKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICBcbiAgICAgICAgLy8gUGFyc2Ugc2luZ2xlIG5vZGUgbWVzaCBnZW9tZXRyeSBpbiBGQlhUcmVlLk9iamVjdHMuR2VvbWV0cnlcbiAgICAgICAgZnVuY3Rpb24gcGFyc2VNZXNoR2VvbWV0cnkoIEZCWFRyZWUsIHJlbGF0aW9uc2hpcHMsIGdlb21ldHJ5Tm9kZSwgc2tlbGV0b25zICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIG1vZGVsTm9kZXMgPSByZWxhdGlvbnNoaXBzLnBhcmVudHMubWFwKCBmdW5jdGlvbiAoIHBhcmVudCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gRkJYVHJlZS5PYmplY3RzLk1vZGVsWyBwYXJlbnQuSUQgXTtcbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgIC8vIGRvbid0IGNyZWF0ZSBnZW9tZXRyeSBpZiBpdCBpcyBub3QgYXNzb2NpYXRlZCB3aXRoIGFueSBtb2RlbHNcbiAgICAgICAgICAgIGlmICggbW9kZWxOb2Rlcy5sZW5ndGggPT09IDAgKSByZXR1cm47XG4gICAgXG4gICAgICAgICAgICB2YXIgc2tlbGV0b24gPSByZWxhdGlvbnNoaXBzLmNoaWxkcmVuLnJlZHVjZSggZnVuY3Rpb24gKCBza2VsZXRvbiwgY2hpbGQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBza2VsZXRvbnNbIGNoaWxkLklEIF0gIT09IHVuZGVmaW5lZCApIHNrZWxldG9uID0gc2tlbGV0b25zWyBjaGlsZC5JRCBdO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBza2VsZXRvbjtcbiAgICBcbiAgICAgICAgICAgIH0sIG51bGwgKTtcbiAgICBcbiAgICAgICAgICAgIHZhciBwcmVUcmFuc2Zvcm0gPSBuZXcgVEhSRUUuTWF0cml4NCgpO1xuICAgIFxuICAgICAgICAgICAgLy8gVE9ETzogaWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBtb2RlbCBhc3NvY2lhdGVkIHdpdGggdGhlIGdlb21ldHJ5LCBBTkQgdGhlIG1vZGVscyBoYXZlXG4gICAgICAgICAgICAvLyBkaWZmZXJlbnQgZ2VvbWV0cmljIHRyYW5zZm9ybXMsIHRoZW4gdGhpcyB3aWxsIGNhdXNlIHByb2JsZW1zXG4gICAgICAgICAgICAvLyBpZiAoIG1vZGVsTm9kZXMubGVuZ3RoID4gMSApIHsgfVxuICAgIFxuICAgICAgICAgICAgLy8gRm9yIG5vdyBqdXN0IGFzc3VtZSBvbmUgbW9kZWwgYW5kIGdldCB0aGUgcHJlUm90YXRpb25zIGZyb20gdGhhdFxuICAgICAgICAgICAgdmFyIG1vZGVsTm9kZSA9IG1vZGVsTm9kZXNbIDAgXTtcbiAgICBcbiAgICAgICAgICAgIGlmICggJ0dlb21ldHJpY1JvdGF0aW9uJyBpbiBtb2RlbE5vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gbW9kZWxOb2RlLkdlb21ldHJpY1JvdGF0aW9uLnZhbHVlLm1hcCggVEhSRUUuTWF0aC5kZWdUb1JhZCApO1xuICAgICAgICAgICAgICAgIGFycmF5WyAzIF0gPSAnWllYJztcbiAgICBcbiAgICAgICAgICAgICAgICBwcmVUcmFuc2Zvcm0ubWFrZVJvdGF0aW9uRnJvbUV1bGVyKCBuZXcgVEhSRUUuRXVsZXIoKS5mcm9tQXJyYXkoIGFycmF5ICkgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmICggJ0dlb21ldHJpY1RyYW5zbGF0aW9uJyBpbiBtb2RlbE5vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcHJlVHJhbnNmb3JtLnNldFBvc2l0aW9uKCBuZXcgVEhSRUUuVmVjdG9yMygpLmZyb21BcnJheSggbW9kZWxOb2RlLkdlb21ldHJpY1RyYW5zbGF0aW9uLnZhbHVlICkgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBnZW5HZW9tZXRyeSggRkJYVHJlZSwgcmVsYXRpb25zaGlwcywgZ2VvbWV0cnlOb2RlLCBza2VsZXRvbiwgcHJlVHJhbnNmb3JtICk7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gR2VuZXJhdGUgYSBUSFJFRS5CdWZmZXJHZW9tZXRyeSBmcm9tIGEgbm9kZSBpbiBGQlhUcmVlLk9iamVjdHMuR2VvbWV0cnlcbiAgICAgICAgZnVuY3Rpb24gZ2VuR2VvbWV0cnkoIEZCWFRyZWUsIHJlbGF0aW9uc2hpcHMsIGdlb21ldHJ5Tm9kZSwgc2tlbGV0b24sIHByZVRyYW5zZm9ybSApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciB2ZXJ0ZXhQb3NpdGlvbnMgPSBnZW9tZXRyeU5vZGUuVmVydGljZXMuYTtcbiAgICAgICAgICAgIHZhciB2ZXJ0ZXhJbmRpY2VzID0gZ2VvbWV0cnlOb2RlLlBvbHlnb25WZXJ0ZXhJbmRleC5hO1xuICAgIFxuICAgICAgICAgICAgLy8gY3JlYXRlIGFycmF5cyB0byBob2xkIHRoZSBmaW5hbCBkYXRhIHVzZWQgdG8gYnVpbGQgdGhlIGJ1ZmZlcmdlb21ldHJ5XG4gICAgICAgICAgICB2YXIgdmVydGV4QnVmZmVyID0gW107XG4gICAgICAgICAgICB2YXIgbm9ybWFsQnVmZmVyID0gW107XG4gICAgICAgICAgICB2YXIgY29sb3JzQnVmZmVyID0gW107XG4gICAgICAgICAgICB2YXIgdXZzQnVmZmVyID0gW107XG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWxJbmRleEJ1ZmZlciA9IFtdO1xuICAgICAgICAgICAgdmFyIHZlcnRleFdlaWdodHNCdWZmZXIgPSBbXTtcbiAgICAgICAgICAgIHZhciB3ZWlnaHRzSW5kaWNlc0J1ZmZlciA9IFtdO1xuICAgIFxuICAgICAgICAgICAgaWYgKCBnZW9tZXRyeU5vZGUuTGF5ZXJFbGVtZW50Q29sb3IgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGNvbG9ySW5mbyA9IGdldENvbG9ycyggZ2VvbWV0cnlOb2RlLkxheWVyRWxlbWVudENvbG9yWyAwIF0gKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmICggZ2VvbWV0cnlOb2RlLkxheWVyRWxlbWVudE1hdGVyaWFsICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBtYXRlcmlhbEluZm8gPSBnZXRNYXRlcmlhbHMoIGdlb21ldHJ5Tm9kZS5MYXllckVsZW1lbnRNYXRlcmlhbFsgMCBdICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAoIGdlb21ldHJ5Tm9kZS5MYXllckVsZW1lbnROb3JtYWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG5vcm1hbEluZm8gPSBnZXROb3JtYWxzKCBnZW9tZXRyeU5vZGUuTGF5ZXJFbGVtZW50Tm9ybWFsWyAwIF0gKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmICggZ2VvbWV0cnlOb2RlLkxheWVyRWxlbWVudFVWICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB1dkluZm8gPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICAgICAgd2hpbGUgKCBnZW9tZXRyeU5vZGUuTGF5ZXJFbGVtZW50VVZbIGkgXSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdXZJbmZvLnB1c2goIGdldFVWcyggZ2VvbWV0cnlOb2RlLkxheWVyRWxlbWVudFVWWyBpIF0gKSApO1xuICAgICAgICAgICAgICAgICAgICBpICsrO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHZhciB3ZWlnaHRUYWJsZSA9IHt9O1xuICAgIFxuICAgICAgICAgICAgaWYgKCBza2VsZXRvbiAhPT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBza2VsZXRvbi5yYXdCb25lcy5mb3JFYWNoKCBmdW5jdGlvbiAoIHJhd0JvbmUsIGkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGxvb3Agb3ZlciB0aGUgYm9uZSdzIHZlcnRleCBpbmRpY2VzIGFuZCB3ZWlnaHRzXG4gICAgICAgICAgICAgICAgICAgIHJhd0JvbmUuaW5kaWNlcy5mb3JFYWNoKCBmdW5jdGlvbiAoIGluZGV4LCBqICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB3ZWlnaHRUYWJsZVsgaW5kZXggXSA9PT0gdW5kZWZpbmVkICkgd2VpZ2h0VGFibGVbIGluZGV4IF0gPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodFRhYmxlWyBpbmRleCBdLnB1c2goIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IHJhd0JvbmUud2VpZ2h0c1sgaiBdLFxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdmFyIHBvbHlnb25JbmRleCA9IDA7XG4gICAgICAgICAgICB2YXIgZmFjZUxlbmd0aCA9IDA7XG4gICAgICAgICAgICB2YXIgZGlzcGxheWVkV2VpZ2h0c1dhcm5pbmcgPSBmYWxzZTtcbiAgICBcbiAgICAgICAgICAgIC8vIHRoZXNlIHdpbGwgaG9sZCBkYXRhIGZvciBhIHNpbmdsZSBmYWNlXG4gICAgICAgICAgICB2YXIgdmVydGV4UG9zaXRpb25JbmRleGVzID0gW107XG4gICAgICAgICAgICB2YXIgZmFjZU5vcm1hbHMgPSBbXTtcbiAgICAgICAgICAgIHZhciBmYWNlQ29sb3JzID0gW107XG4gICAgICAgICAgICB2YXIgZmFjZVVWcyA9IFtdO1xuICAgICAgICAgICAgdmFyIGZhY2VXZWlnaHRzID0gW107XG4gICAgICAgICAgICB2YXIgZmFjZVdlaWdodEluZGljZXMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgIHZlcnRleEluZGljZXMuZm9yRWFjaCggZnVuY3Rpb24gKCB2ZXJ0ZXhJbmRleCwgcG9seWdvblZlcnRleEluZGV4ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBlbmRPZkZhY2UgPSBmYWxzZTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBGYWNlIGluZGV4IGFuZCB2ZXJ0ZXggaW5kZXggYXJyYXlzIGFyZSBjb21iaW5lZCBpbiBhIHNpbmdsZSBhcnJheVxuICAgICAgICAgICAgICAgIC8vIEEgY3ViZSB3aXRoIHF1YWQgZmFjZXMgbG9va3MgbGlrZSB0aGlzOlxuICAgICAgICAgICAgICAgIC8vIFBvbHlnb25WZXJ0ZXhJbmRleDogKjI0IHtcbiAgICAgICAgICAgICAgICAvLyAgYTogMCwgMSwgMywgLTMsIDIsIDMsIDUsIC01LCA0LCA1LCA3LCAtNywgNiwgNywgMSwgLTEsIDEsIDcsIDUsIC00LCA2LCAwLCAyLCAtNVxuICAgICAgICAgICAgICAgIC8vICB9XG4gICAgICAgICAgICAgICAgLy8gTmVnYXRpdmUgbnVtYmVycyBtYXJrIHRoZSBlbmQgb2YgYSBmYWNlIC0gZmlyc3QgZmFjZSBoZXJlIGlzIDAsIDEsIDMsIC0zXG4gICAgICAgICAgICAgICAgLy8gdG8gZmluZCBpbmRleCBvZiBsYXN0IHZlcnRleCBtdWx0aXBseSBieSAtMSBhbmQgc3VidHJhY3QgMTogLTMgKiAtIDEgLSAxID0gMlxuICAgICAgICAgICAgICAgIGlmICggdmVydGV4SW5kZXggPCAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXhJbmRleCA9IHZlcnRleEluZGV4IF4gLSAxOyAvLyBlcXVpdmFsZW50IHRvICggeCAqIC0xICkgLSAxXG4gICAgICAgICAgICAgICAgICAgIHZlcnRleEluZGljZXNbIHBvbHlnb25WZXJ0ZXhJbmRleCBdID0gdmVydGV4SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGVuZE9mRmFjZSA9IHRydWU7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHZhciB3ZWlnaHRJbmRpY2VzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHdlaWdodHMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhQb3NpdGlvbkluZGV4ZXMucHVzaCggdmVydGV4SW5kZXggKiAzLCB2ZXJ0ZXhJbmRleCAqIDMgKyAxLCB2ZXJ0ZXhJbmRleCAqIDMgKyAyICk7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBjb2xvckluZm8gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gZ2V0RGF0YSggcG9seWdvblZlcnRleEluZGV4LCBwb2x5Z29uSW5kZXgsIHZlcnRleEluZGV4LCBjb2xvckluZm8gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZmFjZUNvbG9ycy5wdXNoKCBkYXRhWyAwIF0sIGRhdGFbIDEgXSwgZGF0YVsgMiBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggc2tlbGV0b24gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggd2VpZ2h0VGFibGVbIHZlcnRleEluZGV4IF0gIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodFRhYmxlWyB2ZXJ0ZXhJbmRleCBdLmZvckVhY2goIGZ1bmN0aW9uICggd3QgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0cy5wdXNoKCB3dC53ZWlnaHQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHRJbmRpY2VzLnB1c2goIHd0LmlkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB3ZWlnaHRzLmxlbmd0aCA+IDQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoICEgZGlzcGxheWVkV2VpZ2h0c1dhcm5pbmcgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCAnVEhSRUUuRkJYTG9hZGVyOiBWZXJ0ZXggaGFzIG1vcmUgdGhhbiA0IHNraW5uaW5nIHdlaWdodHMgYXNzaWduZWQgdG8gdmVydGV4LiBEZWxldGluZyBhZGRpdGlvbmFsIHdlaWdodHMuJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXllZFdlaWdodHNXYXJuaW5nID0gdHJ1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3SW5kZXggPSBbIDAsIDAsIDAsIDAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBXZWlnaHQgPSBbIDAsIDAsIDAsIDAgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodHMuZm9yRWFjaCggZnVuY3Rpb24gKCB3ZWlnaHQsIHdlaWdodEluZGV4ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50V2VpZ2h0ID0gd2VpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50SW5kZXggPSB3ZWlnaHRJbmRpY2VzWyB3ZWlnaHRJbmRleCBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdlaWdodC5mb3JFYWNoKCBmdW5jdGlvbiAoIGNvbXBhcmVkV2VpZ2h0LCBjb21wYXJlZFdlaWdodEluZGV4LCBjb21wYXJlZFdlaWdodEFycmF5ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGN1cnJlbnRXZWlnaHQgPiBjb21wYXJlZFdlaWdodCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmVkV2VpZ2h0QXJyYXlbIGNvbXBhcmVkV2VpZ2h0SW5kZXggXSA9IGN1cnJlbnRXZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50V2VpZ2h0ID0gY29tcGFyZWRXZWlnaHQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wID0gd0luZGV4WyBjb21wYXJlZFdlaWdodEluZGV4IF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3SW5kZXhbIGNvbXBhcmVkV2VpZ2h0SW5kZXggXSA9IGN1cnJlbnRJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleCA9IHRtcDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodEluZGljZXMgPSB3SW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHRzID0gV2VpZ2h0O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSB3ZWlnaHQgYXJyYXkgaXMgc2hvcnRlciB0aGFuIDQgcGFkIHdpdGggMHNcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCB3ZWlnaHRzLmxlbmd0aCA8IDQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHRzLnB1c2goIDAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodEluZGljZXMucHVzaCggMCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IDQ7ICsrIGkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWNlV2VpZ2h0cy5wdXNoKCB3ZWlnaHRzWyBpIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2VXZWlnaHRJbmRpY2VzLnB1c2goIHdlaWdodEluZGljZXNbIGkgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbm9ybWFsSW5mbyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBnZXREYXRhKCBwb2x5Z29uVmVydGV4SW5kZXgsIHBvbHlnb25JbmRleCwgdmVydGV4SW5kZXgsIG5vcm1hbEluZm8gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZmFjZU5vcm1hbHMucHVzaCggZGF0YVsgMCBdLCBkYXRhWyAxIF0sIGRhdGFbIDIgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIG1hdGVyaWFsSW5mbyAmJiBtYXRlcmlhbEluZm8ubWFwcGluZ1R5cGUgIT09ICdBbGxTYW1lJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGVyaWFsSW5kZXggPSBnZXREYXRhKCBwb2x5Z29uVmVydGV4SW5kZXgsIHBvbHlnb25JbmRleCwgdmVydGV4SW5kZXgsIG1hdGVyaWFsSW5mbyApWyAwIF07XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggdXZJbmZvICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB1dkluZm8uZm9yRWFjaCggZnVuY3Rpb24gKCB1diwgaSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gZ2V0RGF0YSggcG9seWdvblZlcnRleEluZGV4LCBwb2x5Z29uSW5kZXgsIHZlcnRleEluZGV4LCB1diApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBmYWNlVVZzWyBpIF0gPT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWNlVVZzWyBpIF0gPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2VVVnNbIGkgXS5wdXNoKCBkYXRhWyAwIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2VVVnNbIGkgXS5wdXNoKCBkYXRhWyAxIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBmYWNlTGVuZ3RoICsrO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIHdlIGhhdmUgcmVhY2hlZCB0aGUgZW5kIG9mIGEgZmFjZSAtIGl0IG1heSBoYXZlIDQgc2lkZXMgdGhvdWdoXG4gICAgICAgICAgICAgICAgLy8gaW4gd2hpY2ggY2FzZSB0aGUgZGF0YSBpcyBzcGxpdCB0byByZXByZXNlbnQgdHdvIDMgc2lkZWQgZmFjZXNcbiAgICAgICAgICAgICAgICBpZiAoIGVuZE9mRmFjZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAyOyBpIDwgZmFjZUxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleEJ1ZmZlci5wdXNoKCB2ZXJ0ZXhQb3NpdGlvbnNbIHZlcnRleFBvc2l0aW9uSW5kZXhlc1sgMCBdIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleEJ1ZmZlci5wdXNoKCB2ZXJ0ZXhQb3NpdGlvbnNbIHZlcnRleFBvc2l0aW9uSW5kZXhlc1sgMSBdIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleEJ1ZmZlci5wdXNoKCB2ZXJ0ZXhQb3NpdGlvbnNbIHZlcnRleFBvc2l0aW9uSW5kZXhlc1sgMiBdIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleEJ1ZmZlci5wdXNoKCB2ZXJ0ZXhQb3NpdGlvbnNbIHZlcnRleFBvc2l0aW9uSW5kZXhlc1sgKCBpIC0gMSApICogMyBdIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleEJ1ZmZlci5wdXNoKCB2ZXJ0ZXhQb3NpdGlvbnNbIHZlcnRleFBvc2l0aW9uSW5kZXhlc1sgKCBpIC0gMSApICogMyArIDEgXSBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXhCdWZmZXIucHVzaCggdmVydGV4UG9zaXRpb25zWyB2ZXJ0ZXhQb3NpdGlvbkluZGV4ZXNbICggaSAtIDEgKSAqIDMgKyAyIF0gXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4QnVmZmVyLnB1c2goIHZlcnRleFBvc2l0aW9uc1sgdmVydGV4UG9zaXRpb25JbmRleGVzWyBpICogMyBdIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleEJ1ZmZlci5wdXNoKCB2ZXJ0ZXhQb3NpdGlvbnNbIHZlcnRleFBvc2l0aW9uSW5kZXhlc1sgaSAqIDMgKyAxIF0gXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4QnVmZmVyLnB1c2goIHZlcnRleFBvc2l0aW9uc1sgdmVydGV4UG9zaXRpb25JbmRleGVzWyBpICogMyArIDIgXSBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHNrZWxldG9uICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleFdlaWdodHNCdWZmZXIucHVzaCggZmFjZVdlaWdodHNbIDAgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleFdlaWdodHNCdWZmZXIucHVzaCggZmFjZVdlaWdodHNbIDEgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleFdlaWdodHNCdWZmZXIucHVzaCggZmFjZVdlaWdodHNbIDIgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleFdlaWdodHNCdWZmZXIucHVzaCggZmFjZVdlaWdodHNbIDMgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleFdlaWdodHNCdWZmZXIucHVzaCggZmFjZVdlaWdodHNbICggaSAtIDEgKSAqIDQgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleFdlaWdodHNCdWZmZXIucHVzaCggZmFjZVdlaWdodHNbICggaSAtIDEgKSAqIDQgKyAxIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXhXZWlnaHRzQnVmZmVyLnB1c2goIGZhY2VXZWlnaHRzWyAoIGkgLSAxICkgKiA0ICsgMiBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4V2VpZ2h0c0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0c1sgKCBpIC0gMSApICogNCArIDMgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleFdlaWdodHNCdWZmZXIucHVzaCggZmFjZVdlaWdodHNbIGkgKiA0IF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXhXZWlnaHRzQnVmZmVyLnB1c2goIGZhY2VXZWlnaHRzWyBpICogNCArIDEgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleFdlaWdodHNCdWZmZXIucHVzaCggZmFjZVdlaWdodHNbIGkgKiA0ICsgMiBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4V2VpZ2h0c0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0c1sgaSAqIDQgKyAzIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHRzSW5kaWNlc0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0SW5kaWNlc1sgMCBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0c0luZGljZXNCdWZmZXIucHVzaCggZmFjZVdlaWdodEluZGljZXNbIDEgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodHNJbmRpY2VzQnVmZmVyLnB1c2goIGZhY2VXZWlnaHRJbmRpY2VzWyAyIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHRzSW5kaWNlc0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0SW5kaWNlc1sgMyBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0c0luZGljZXNCdWZmZXIucHVzaCggZmFjZVdlaWdodEluZGljZXNbICggaSAtIDEgKSAqIDQgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodHNJbmRpY2VzQnVmZmVyLnB1c2goIGZhY2VXZWlnaHRJbmRpY2VzWyAoIGkgLSAxICkgKiA0ICsgMSBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0c0luZGljZXNCdWZmZXIucHVzaCggZmFjZVdlaWdodEluZGljZXNbICggaSAtIDEgKSAqIDQgKyAyIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHRzSW5kaWNlc0J1ZmZlci5wdXNoKCBmYWNlV2VpZ2h0SW5kaWNlc1sgKCBpIC0gMSApICogNCArIDMgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodHNJbmRpY2VzQnVmZmVyLnB1c2goIGZhY2VXZWlnaHRJbmRpY2VzWyBpICogNCBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0c0luZGljZXNCdWZmZXIucHVzaCggZmFjZVdlaWdodEluZGljZXNbIGkgKiA0ICsgMSBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0c0luZGljZXNCdWZmZXIucHVzaCggZmFjZVdlaWdodEluZGljZXNbIGkgKiA0ICsgMiBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0c0luZGljZXNCdWZmZXIucHVzaCggZmFjZVdlaWdodEluZGljZXNbIGkgKiA0ICsgMyBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGNvbG9ySW5mbyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnNCdWZmZXIucHVzaCggZmFjZUNvbG9yc1sgMCBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzQnVmZmVyLnB1c2goIGZhY2VDb2xvcnNbIDEgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yc0J1ZmZlci5wdXNoKCBmYWNlQ29sb3JzWyAyIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnNCdWZmZXIucHVzaCggZmFjZUNvbG9yc1sgKCBpIC0gMSApICogMyBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzQnVmZmVyLnB1c2goIGZhY2VDb2xvcnNbICggaSAtIDEgKSAqIDMgKyAxIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnNCdWZmZXIucHVzaCggZmFjZUNvbG9yc1sgKCBpIC0gMSApICogMyArIDIgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yc0J1ZmZlci5wdXNoKCBmYWNlQ29sb3JzWyBpICogMyBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzQnVmZmVyLnB1c2goIGZhY2VDb2xvcnNbIGkgKiAzICsgMSBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzQnVmZmVyLnB1c2goIGZhY2VDb2xvcnNbIGkgKiAzICsgMiBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG1hdGVyaWFsSW5mbyAmJiBtYXRlcmlhbEluZm8ubWFwcGluZ1R5cGUgIT09ICdBbGxTYW1lJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbEluZGV4QnVmZmVyLnB1c2goIG1hdGVyaWFsSW5kZXggKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbEluZGV4QnVmZmVyLnB1c2goIG1hdGVyaWFsSW5kZXggKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbEluZGV4QnVmZmVyLnB1c2goIG1hdGVyaWFsSW5kZXggKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbm9ybWFsSW5mbyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxCdWZmZXIucHVzaCggZmFjZU5vcm1hbHNbIDAgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbEJ1ZmZlci5wdXNoKCBmYWNlTm9ybWFsc1sgMSBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsQnVmZmVyLnB1c2goIGZhY2VOb3JtYWxzWyAyIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxCdWZmZXIucHVzaCggZmFjZU5vcm1hbHNbICggaSAtIDEgKSAqIDMgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbEJ1ZmZlci5wdXNoKCBmYWNlTm9ybWFsc1sgKCBpIC0gMSApICogMyArIDEgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbEJ1ZmZlci5wdXNoKCBmYWNlTm9ybWFsc1sgKCBpIC0gMSApICogMyArIDIgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbEJ1ZmZlci5wdXNoKCBmYWNlTm9ybWFsc1sgaSAqIDMgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbEJ1ZmZlci5wdXNoKCBmYWNlTm9ybWFsc1sgaSAqIDMgKyAxIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxCdWZmZXIucHVzaCggZmFjZU5vcm1hbHNbIGkgKiAzICsgMiBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHV2SW5mbyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dkluZm8uZm9yRWFjaCggZnVuY3Rpb24gKCB1diwgaiApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB1dnNCdWZmZXJbIGogXSA9PT0gdW5kZWZpbmVkICkgdXZzQnVmZmVyWyBqIF0gPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXZzQnVmZmVyWyBqIF0ucHVzaCggZmFjZVVWc1sgaiBdWyAwIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXZzQnVmZmVyWyBqIF0ucHVzaCggZmFjZVVWc1sgaiBdWyAxIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXZzQnVmZmVyWyBqIF0ucHVzaCggZmFjZVVWc1sgaiBdWyAoIGkgLSAxICkgKiAyIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXZzQnVmZmVyWyBqIF0ucHVzaCggZmFjZVVWc1sgaiBdWyAoIGkgLSAxICkgKiAyICsgMSBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV2c0J1ZmZlclsgaiBdLnB1c2goIGZhY2VVVnNbIGogXVsgaSAqIDIgXSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dnNCdWZmZXJbIGogXS5wdXNoKCBmYWNlVVZzWyBqIF1bIGkgKiAyICsgMSBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHBvbHlnb25JbmRleCArKztcbiAgICAgICAgICAgICAgICAgICAgZmFjZUxlbmd0aCA9IDA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc2V0IGFycmF5cyBmb3IgdGhlIG5leHQgZmFjZVxuICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXhQb3NpdGlvbkluZGV4ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZmFjZU5vcm1hbHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZmFjZUNvbG9ycyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmYWNlVVZzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZhY2VXZWlnaHRzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZhY2VXZWlnaHRJbmRpY2VzID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgdmFyIGdlbyA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuICAgICAgICAgICAgZ2VvLm5hbWUgPSBnZW9tZXRyeU5vZGUubmFtZTtcbiAgICBcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbkF0dHJpYnV0ZSA9IG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0ZXhCdWZmZXIsIDMgKTtcbiAgICBcbiAgICAgICAgICAgIHByZVRyYW5zZm9ybS5hcHBseVRvQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSApO1xuICAgIFxuICAgICAgICAgICAgZ2VvLmFkZEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgcG9zaXRpb25BdHRyaWJ1dGUgKTtcbiAgICBcbiAgICAgICAgICAgIGlmICggY29sb3JzQnVmZmVyLmxlbmd0aCA+IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgZ2VvLmFkZEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGNvbG9yc0J1ZmZlciwgMyApICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAoIHNrZWxldG9uICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGdlby5hZGRBdHRyaWJ1dGUoICdza2luSW5kZXgnLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggd2VpZ2h0c0luZGljZXNCdWZmZXIsIDQgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIGdlby5hZGRBdHRyaWJ1dGUoICdza2luV2VpZ2h0JywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRleFdlaWdodHNCdWZmZXIsIDQgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIHVzZWQgbGF0ZXIgdG8gYmluZCB0aGUgc2tlbGV0b24gdG8gdGhlIG1vZGVsXG4gICAgICAgICAgICAgICAgZ2VvLkZCWF9EZWZvcm1lciA9IHNrZWxldG9uO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCBub3JtYWxCdWZmZXIubGVuZ3RoID4gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsQXR0cmlidXRlID0gbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbEJ1ZmZlciwgMyApO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBub3JtYWxNYXRyaXggPSBuZXcgVEhSRUUuTWF0cml4MygpLmdldE5vcm1hbE1hdHJpeCggcHJlVHJhbnNmb3JtICk7XG4gICAgICAgICAgICAgICAgbm9ybWFsTWF0cml4LmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbEF0dHJpYnV0ZSApO1xuICAgIFxuICAgICAgICAgICAgICAgIGdlby5hZGRBdHRyaWJ1dGUoICdub3JtYWwnLCBub3JtYWxBdHRyaWJ1dGUgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHV2c0J1ZmZlci5mb3JFYWNoKCBmdW5jdGlvbiAoIHV2QnVmZmVyLCBpICkge1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIHN1YnNlcXVlbnQgdXYgYnVmZmVycyBhcmUgY2FsbGVkICd1djEnLCAndXYyJywgLi4uXG4gICAgICAgICAgICAgICAgdmFyIG5hbWUgPSAndXYnICsgKCBpICsgMSApLnRvU3RyaW5nKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gdGhlIGZpcnN0IHV2IGJ1ZmZlciBpcyBqdXN0IGNhbGxlZCAndXYnXG4gICAgICAgICAgICAgICAgaWYgKCBpID09PSAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBuYW1lID0gJ3V2JztcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgZ2VvLmFkZEF0dHJpYnV0ZSggbmFtZSwgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2c0J1ZmZlclsgaSBdLCAyICkgKTtcbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgIGlmICggbWF0ZXJpYWxJbmZvICYmIG1hdGVyaWFsSW5mby5tYXBwaW5nVHlwZSAhPT0gJ0FsbFNhbWUnICkge1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIG1hdGVyaWFsIGluZGljZXMgb2YgZWFjaCB2ZXJ0ZXggaW50byByZW5kZXJpbmcgZ3JvdXBzIG9uIHRoZSBnZW9tZXRyeS5cbiAgICAgICAgICAgICAgICB2YXIgcHJldk1hdGVyaWFsSW5kZXggPSBtYXRlcmlhbEluZGV4QnVmZmVyWyAwIF07XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0SW5kZXggPSAwO1xuICAgIFxuICAgICAgICAgICAgICAgIG1hdGVyaWFsSW5kZXhCdWZmZXIuZm9yRWFjaCggZnVuY3Rpb24gKCBjdXJyZW50SW5kZXgsIGkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY3VycmVudEluZGV4ICE9PSBwcmV2TWF0ZXJpYWxJbmRleCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlby5hZGRHcm91cCggc3RhcnRJbmRleCwgaSAtIHN0YXJ0SW5kZXgsIHByZXZNYXRlcmlhbEluZGV4ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2TWF0ZXJpYWxJbmRleCA9IGN1cnJlbnRJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0SW5kZXggPSBpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIHRoZSBsb29wIGFib3ZlIGRvZXNuJ3QgYWRkIHRoZSBsYXN0IGdyb3VwLCBkbyB0aGF0IGhlcmUuXG4gICAgICAgICAgICAgICAgaWYgKCBnZW8uZ3JvdXBzLmxlbmd0aCA+IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0R3JvdXAgPSBnZW8uZ3JvdXBzWyBnZW8uZ3JvdXBzLmxlbmd0aCAtIDEgXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RJbmRleCA9IGxhc3RHcm91cC5zdGFydCArIGxhc3RHcm91cC5jb3VudDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBsYXN0SW5kZXggIT09IG1hdGVyaWFsSW5kZXhCdWZmZXIubGVuZ3RoICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvLmFkZEdyb3VwKCBsYXN0SW5kZXgsIG1hdGVyaWFsSW5kZXhCdWZmZXIubGVuZ3RoIC0gbGFzdEluZGV4LCBwcmV2TWF0ZXJpYWxJbmRleCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIGNhc2Ugd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIG1hdGVyaWFscyBidXQgdGhlIHdob2xlIGdlb21ldHJ5IGlzIG9ubHlcbiAgICAgICAgICAgICAgICAvLyB1c2luZyBvbmUgb2YgdGhlbVxuICAgICAgICAgICAgICAgIGlmICggZ2VvLmdyb3Vwcy5sZW5ndGggPT09IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGdlby5hZGRHcm91cCggMCwgbWF0ZXJpYWxJbmRleEJ1ZmZlci5sZW5ndGgsIG1hdGVyaWFsSW5kZXhCdWZmZXJbIDAgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBnZW87XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICBcbiAgICAgICAgLy8gUGFyc2Ugbm9ybWFsIGZyb20gRkJYVHJlZS5PYmplY3RzLkdlb21ldHJ5LkxheWVyRWxlbWVudE5vcm1hbCBpZiBpdCBleGlzdHNcbiAgICAgICAgZnVuY3Rpb24gZ2V0Tm9ybWFscyggTm9ybWFsTm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBtYXBwaW5nVHlwZSA9IE5vcm1hbE5vZGUuTWFwcGluZ0luZm9ybWF0aW9uVHlwZTtcbiAgICAgICAgICAgIHZhciByZWZlcmVuY2VUeXBlID0gTm9ybWFsTm9kZS5SZWZlcmVuY2VJbmZvcm1hdGlvblR5cGU7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gTm9ybWFsTm9kZS5Ob3JtYWxzLmE7XG4gICAgICAgICAgICB2YXIgaW5kZXhCdWZmZXIgPSBbXTtcbiAgICAgICAgICAgIGlmICggcmVmZXJlbmNlVHlwZSA9PT0gJ0luZGV4VG9EaXJlY3QnICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggJ05vcm1hbEluZGV4JyBpbiBOb3JtYWxOb2RlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpbmRleEJ1ZmZlciA9IE5vcm1hbE5vZGUuTm9ybWFsSW5kZXguYTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAnTm9ybWFsc0luZGV4JyBpbiBOb3JtYWxOb2RlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpbmRleEJ1ZmZlciA9IE5vcm1hbE5vZGUuTm9ybWFsc0luZGV4LmE7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhU2l6ZTogMyxcbiAgICAgICAgICAgICAgICBidWZmZXI6IGJ1ZmZlcixcbiAgICAgICAgICAgICAgICBpbmRpY2VzOiBpbmRleEJ1ZmZlcixcbiAgICAgICAgICAgICAgICBtYXBwaW5nVHlwZTogbWFwcGluZ1R5cGUsXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlVHlwZTogcmVmZXJlbmNlVHlwZVxuICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBQYXJzZSBVVnMgZnJvbSBGQlhUcmVlLk9iamVjdHMuR2VvbWV0cnkuTGF5ZXJFbGVtZW50VVYgaWYgaXQgZXhpc3RzXG4gICAgICAgIGZ1bmN0aW9uIGdldFVWcyggVVZOb2RlICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIG1hcHBpbmdUeXBlID0gVVZOb2RlLk1hcHBpbmdJbmZvcm1hdGlvblR5cGU7XG4gICAgICAgICAgICB2YXIgcmVmZXJlbmNlVHlwZSA9IFVWTm9kZS5SZWZlcmVuY2VJbmZvcm1hdGlvblR5cGU7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gVVZOb2RlLlVWLmE7XG4gICAgICAgICAgICB2YXIgaW5kZXhCdWZmZXIgPSBbXTtcbiAgICAgICAgICAgIGlmICggcmVmZXJlbmNlVHlwZSA9PT0gJ0luZGV4VG9EaXJlY3QnICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGluZGV4QnVmZmVyID0gVVZOb2RlLlVWSW5kZXguYTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGF0YVNpemU6IDIsXG4gICAgICAgICAgICAgICAgYnVmZmVyOiBidWZmZXIsXG4gICAgICAgICAgICAgICAgaW5kaWNlczogaW5kZXhCdWZmZXIsXG4gICAgICAgICAgICAgICAgbWFwcGluZ1R5cGU6IG1hcHBpbmdUeXBlLFxuICAgICAgICAgICAgICAgIHJlZmVyZW5jZVR5cGU6IHJlZmVyZW5jZVR5cGVcbiAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gUGFyc2UgVmVydGV4IENvbG9ycyBmcm9tIEZCWFRyZWUuT2JqZWN0cy5HZW9tZXRyeS5MYXllckVsZW1lbnRDb2xvciBpZiBpdCBleGlzdHNcbiAgICAgICAgZnVuY3Rpb24gZ2V0Q29sb3JzKCBDb2xvck5vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgbWFwcGluZ1R5cGUgPSBDb2xvck5vZGUuTWFwcGluZ0luZm9ybWF0aW9uVHlwZTtcbiAgICAgICAgICAgIHZhciByZWZlcmVuY2VUeXBlID0gQ29sb3JOb2RlLlJlZmVyZW5jZUluZm9ybWF0aW9uVHlwZTtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBDb2xvck5vZGUuQ29sb3JzLmE7XG4gICAgICAgICAgICB2YXIgaW5kZXhCdWZmZXIgPSBbXTtcbiAgICAgICAgICAgIGlmICggcmVmZXJlbmNlVHlwZSA9PT0gJ0luZGV4VG9EaXJlY3QnICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGluZGV4QnVmZmVyID0gQ29sb3JOb2RlLkNvbG9ySW5kZXguYTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGF0YVNpemU6IDQsXG4gICAgICAgICAgICAgICAgYnVmZmVyOiBidWZmZXIsXG4gICAgICAgICAgICAgICAgaW5kaWNlczogaW5kZXhCdWZmZXIsXG4gICAgICAgICAgICAgICAgbWFwcGluZ1R5cGU6IG1hcHBpbmdUeXBlLFxuICAgICAgICAgICAgICAgIHJlZmVyZW5jZVR5cGU6IHJlZmVyZW5jZVR5cGVcbiAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gUGFyc2UgbWFwcGluZyBhbmQgbWF0ZXJpYWwgZGF0YSBpbiBGQlhUcmVlLk9iamVjdHMuR2VvbWV0cnkuTGF5ZXJFbGVtZW50TWF0ZXJpYWwgaWYgaXQgZXhpc3RzXG4gICAgICAgIGZ1bmN0aW9uIGdldE1hdGVyaWFscyggTWF0ZXJpYWxOb2RlICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIG1hcHBpbmdUeXBlID0gTWF0ZXJpYWxOb2RlLk1hcHBpbmdJbmZvcm1hdGlvblR5cGU7XG4gICAgICAgICAgICB2YXIgcmVmZXJlbmNlVHlwZSA9IE1hdGVyaWFsTm9kZS5SZWZlcmVuY2VJbmZvcm1hdGlvblR5cGU7XG4gICAgXG4gICAgICAgICAgICBpZiAoIG1hcHBpbmdUeXBlID09PSAnTm9NYXBwaW5nSW5mb3JtYXRpb24nICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFTaXplOiAxLFxuICAgICAgICAgICAgICAgICAgICBidWZmZXI6IFsgMCBdLFxuICAgICAgICAgICAgICAgICAgICBpbmRpY2VzOiBbIDAgXSxcbiAgICAgICAgICAgICAgICAgICAgbWFwcGluZ1R5cGU6ICdBbGxTYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlVHlwZTogcmVmZXJlbmNlVHlwZVxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWxJbmRleEJ1ZmZlciA9IE1hdGVyaWFsTm9kZS5NYXRlcmlhbHMuYTtcbiAgICBcbiAgICAgICAgICAgIC8vIFNpbmNlIG1hdGVyaWFscyBhcmUgc3RvcmVkIGFzIGluZGljZXMsIHRoZXJlJ3MgYSBiaXQgb2YgYSBtaXNtYXRjaCBiZXR3ZWVuIEZCWCBhbmQgd2hhdFxuICAgICAgICAgICAgLy8gd2UgZXhwZWN0LlNvIHdlIGNyZWF0ZSBhbiBpbnRlcm1lZGlhdGUgYnVmZmVyIHRoYXQgcG9pbnRzIHRvIHRoZSBpbmRleCBpbiB0aGUgYnVmZmVyLFxuICAgICAgICAgICAgLy8gZm9yIGNvbmZvcm1pbmcgd2l0aCB0aGUgb3RoZXIgZnVuY3Rpb25zIHdlJ3ZlIHdyaXR0ZW4gZm9yIG90aGVyIGRhdGEuXG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWxJbmRpY2VzID0gW107XG4gICAgXG4gICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBtYXRlcmlhbEluZGV4QnVmZmVyLmxlbmd0aDsgKysgaSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBtYXRlcmlhbEluZGljZXMucHVzaCggaSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhU2l6ZTogMSxcbiAgICAgICAgICAgICAgICBidWZmZXI6IG1hdGVyaWFsSW5kZXhCdWZmZXIsXG4gICAgICAgICAgICAgICAgaW5kaWNlczogbWF0ZXJpYWxJbmRpY2VzLFxuICAgICAgICAgICAgICAgIG1hcHBpbmdUeXBlOiBtYXBwaW5nVHlwZSxcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VUeXBlOiByZWZlcmVuY2VUeXBlXG4gICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIEZ1bmN0aW9ucyB1c2UgdGhlIGluZm9PYmplY3QgYW5kIGdpdmVuIGluZGljZXMgdG8gcmV0dXJuIHZhbHVlIGFycmF5IG9mIGdlb21ldHJ5LlxuICAgICAgICAvLyBQYXJhbWV0ZXJzOlxuICAgICAgICAvLyBcdC0gcG9seWdvblZlcnRleEluZGV4IC0gSW5kZXggb2YgdmVydGV4IGluIGRyYXcgb3JkZXIgKHdoaWNoIGluZGV4IG9mIHRoZSBpbmRleCBidWZmZXIgcmVmZXJzIHRvIHRoaXMgdmVydGV4KS5cbiAgICAgICAgLy8gXHQtIHBvbHlnb25JbmRleCAtIEluZGV4IG9mIHBvbHlnb24gaW4gZ2VvbWV0cnkuXG4gICAgICAgIC8vIFx0LSB2ZXJ0ZXhJbmRleCAtIEluZGV4IG9mIHZlcnRleCBpbnNpZGUgdmVydGV4IGJ1ZmZlciAodXNlZCBiZWNhdXNlIHNvbWUgZGF0YSByZWZlcnMgdG8gb2xkIGluZGV4IGJ1ZmZlciB0aGF0IHdlIGRvbid0IHVzZSBhbnltb3JlKS5cbiAgICAgICAgLy8gXHQtIGluZm9PYmplY3Q6IGNhbiBiZSBtYXRlcmlhbEluZm8sIG5vcm1hbEluZm8sIFVWSW5mbyBvciBjb2xvckluZm9cbiAgICAgICAgLy8gSW5kZXggdHlwZTpcbiAgICAgICAgLy9cdC0gRGlyZWN0OiBpbmRleCBpcyBzYW1lIGFzIHBvbHlnb25WZXJ0ZXhJbmRleFxuICAgICAgICAvL1x0LSBJbmRleFRvRGlyZWN0OiBpbmZvT2JqZWN0IGhhcyBpdCdzIG93biBzZXQgb2YgaW5kaWNlc1xuICAgICAgICB2YXIgZGF0YUFycmF5ID0gW107XG4gICAgXG4gICAgICAgIHZhciBHZXREYXRhID0ge1xuICAgIFxuICAgICAgICAgICAgQnlQb2x5Z29uVmVydGV4OiB7XG4gICAgXG4gICAgICAgICAgICAgICAgRGlyZWN0OiBmdW5jdGlvbiAoIHBvbHlnb25WZXJ0ZXhJbmRleCwgcG9seWdvbkluZGV4LCB2ZXJ0ZXhJbmRleCwgaW5mb09iamVjdCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb20gPSAoIHBvbHlnb25WZXJ0ZXhJbmRleCAqIGluZm9PYmplY3QuZGF0YVNpemUgKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvID0gKCBwb2x5Z29uVmVydGV4SW5kZXggKiBpbmZvT2JqZWN0LmRhdGFTaXplICkgKyBpbmZvT2JqZWN0LmRhdGFTaXplO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2xpY2UoIGRhdGFBcnJheSwgaW5mb09iamVjdC5idWZmZXIsIGZyb20sIHRvICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICBJbmRleFRvRGlyZWN0OiBmdW5jdGlvbiAoIHBvbHlnb25WZXJ0ZXhJbmRleCwgcG9seWdvbkluZGV4LCB2ZXJ0ZXhJbmRleCwgaW5mb09iamVjdCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gaW5mb09iamVjdC5pbmRpY2VzWyBwb2x5Z29uVmVydGV4SW5kZXggXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb20gPSAoIGluZGV4ICogaW5mb09iamVjdC5kYXRhU2l6ZSApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG8gPSAoIGluZGV4ICogaW5mb09iamVjdC5kYXRhU2l6ZSApICsgaW5mb09iamVjdC5kYXRhU2l6ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNsaWNlKCBkYXRhQXJyYXksIGluZm9PYmplY3QuYnVmZmVyLCBmcm9tLCB0byApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBCeVBvbHlnb246IHtcbiAgICBcbiAgICAgICAgICAgICAgICBEaXJlY3Q6IGZ1bmN0aW9uICggcG9seWdvblZlcnRleEluZGV4LCBwb2x5Z29uSW5kZXgsIHZlcnRleEluZGV4LCBpbmZvT2JqZWN0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbSA9IHBvbHlnb25JbmRleCAqIGluZm9PYmplY3QuZGF0YVNpemU7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0byA9IHBvbHlnb25JbmRleCAqIGluZm9PYmplY3QuZGF0YVNpemUgKyBpbmZvT2JqZWN0LmRhdGFTaXplO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2xpY2UoIGRhdGFBcnJheSwgaW5mb09iamVjdC5idWZmZXIsIGZyb20sIHRvICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICBJbmRleFRvRGlyZWN0OiBmdW5jdGlvbiAoIHBvbHlnb25WZXJ0ZXhJbmRleCwgcG9seWdvbkluZGV4LCB2ZXJ0ZXhJbmRleCwgaW5mb09iamVjdCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gaW5mb09iamVjdC5pbmRpY2VzWyBwb2x5Z29uSW5kZXggXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb20gPSBpbmRleCAqIGluZm9PYmplY3QuZGF0YVNpemU7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0byA9IGluZGV4ICogaW5mb09iamVjdC5kYXRhU2l6ZSArIGluZm9PYmplY3QuZGF0YVNpemU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzbGljZSggZGF0YUFycmF5LCBpbmZvT2JqZWN0LmJ1ZmZlciwgZnJvbSwgdG8gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgQnlWZXJ0aWNlOiB7XG4gICAgXG4gICAgICAgICAgICAgICAgRGlyZWN0OiBmdW5jdGlvbiAoIHBvbHlnb25WZXJ0ZXhJbmRleCwgcG9seWdvbkluZGV4LCB2ZXJ0ZXhJbmRleCwgaW5mb09iamVjdCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb20gPSAoIHZlcnRleEluZGV4ICogaW5mb09iamVjdC5kYXRhU2l6ZSApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG8gPSAoIHZlcnRleEluZGV4ICogaW5mb09iamVjdC5kYXRhU2l6ZSApICsgaW5mb09iamVjdC5kYXRhU2l6ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNsaWNlKCBkYXRhQXJyYXksIGluZm9PYmplY3QuYnVmZmVyLCBmcm9tLCB0byApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBBbGxTYW1lOiB7XG4gICAgXG4gICAgICAgICAgICAgICAgSW5kZXhUb0RpcmVjdDogZnVuY3Rpb24gKCBwb2x5Z29uVmVydGV4SW5kZXgsIHBvbHlnb25JbmRleCwgdmVydGV4SW5kZXgsIGluZm9PYmplY3QgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBmcm9tID0gaW5mb09iamVjdC5pbmRpY2VzWyAwIF0gKiBpbmZvT2JqZWN0LmRhdGFTaXplO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG8gPSBpbmZvT2JqZWN0LmluZGljZXNbIDAgXSAqIGluZm9PYmplY3QuZGF0YVNpemUgKyBpbmZvT2JqZWN0LmRhdGFTaXplO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2xpY2UoIGRhdGFBcnJheSwgaW5mb09iamVjdC5idWZmZXIsIGZyb20sIHRvICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICB9O1xuICAgIFxuICAgICAgICBmdW5jdGlvbiBnZXREYXRhKCBwb2x5Z29uVmVydGV4SW5kZXgsIHBvbHlnb25JbmRleCwgdmVydGV4SW5kZXgsIGluZm9PYmplY3QgKSB7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gR2V0RGF0YVsgaW5mb09iamVjdC5tYXBwaW5nVHlwZSBdWyBpbmZvT2JqZWN0LnJlZmVyZW5jZVR5cGUgXSggcG9seWdvblZlcnRleEluZGV4LCBwb2x5Z29uSW5kZXgsIHZlcnRleEluZGV4LCBpbmZvT2JqZWN0ICk7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gR2VuZXJhdGUgYSBOdXJiR2VvbWV0cnkgZnJvbSBhIG5vZGUgaW4gRkJYVHJlZS5PYmplY3RzLkdlb21ldHJ5XG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlTnVyYnNHZW9tZXRyeSggZ2VvbWV0cnlOb2RlICkge1xuICAgIFxuICAgICAgICAgICAgaWYgKCBUSFJFRS5OVVJCU0N1cnZlID09PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvciggJ1RIUkVFLkZCWExvYWRlcjogVGhlIGxvYWRlciByZWxpZXMgb24gVEhSRUUuTlVSQlNDdXJ2ZSBmb3IgYW55IG51cmJzIHByZXNlbnQgaW4gdGhlIG1vZGVsLiBOdXJicyB3aWxsIHNob3cgdXAgYXMgZW1wdHkgZ2VvbWV0cnkuJyApO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHZhciBvcmRlciA9IHBhcnNlSW50KCBnZW9tZXRyeU5vZGUuT3JkZXIgKTtcbiAgICBcbiAgICAgICAgICAgIGlmICggaXNOYU4oIG9yZGVyICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvciggJ1RIUkVFLkZCWExvYWRlcjogSW52YWxpZCBPcmRlciAlcyBnaXZlbiBmb3IgZ2VvbWV0cnkgSUQ6ICVzJywgZ2VvbWV0cnlOb2RlLk9yZGVyLCBnZW9tZXRyeU5vZGUuaWQgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB2YXIgZGVncmVlID0gb3JkZXIgLSAxO1xuICAgIFxuICAgICAgICAgICAgdmFyIGtub3RzID0gZ2VvbWV0cnlOb2RlLktub3RWZWN0b3IuYTtcbiAgICAgICAgICAgIHZhciBjb250cm9sUG9pbnRzID0gW107XG4gICAgICAgICAgICB2YXIgcG9pbnRzVmFsdWVzID0gZ2VvbWV0cnlOb2RlLlBvaW50cy5hO1xuICAgIFxuICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0gcG9pbnRzVmFsdWVzLmxlbmd0aDsgaSA8IGw7IGkgKz0gNCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBjb250cm9sUG9pbnRzLnB1c2goIG5ldyBUSFJFRS5WZWN0b3I0KCkuZnJvbUFycmF5KCBwb2ludHNWYWx1ZXMsIGkgKSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdmFyIHN0YXJ0S25vdCwgZW5kS25vdDtcbiAgICBcbiAgICAgICAgICAgIGlmICggZ2VvbWV0cnlOb2RlLkZvcm0gPT09ICdDbG9zZWQnICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGNvbnRyb2xQb2ludHMucHVzaCggY29udHJvbFBvaW50c1sgMCBdICk7XG4gICAgXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBnZW9tZXRyeU5vZGUuRm9ybSA9PT0gJ1BlcmlvZGljJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBzdGFydEtub3QgPSBkZWdyZWU7XG4gICAgICAgICAgICAgICAgZW5kS25vdCA9IGtub3RzLmxlbmd0aCAtIDEgLSBzdGFydEtub3Q7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgZGVncmVlOyArKyBpICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sUG9pbnRzLnB1c2goIGNvbnRyb2xQb2ludHNbIGkgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHZhciBjdXJ2ZSA9IG5ldyBUSFJFRS5OVVJCU0N1cnZlKCBkZWdyZWUsIGtub3RzLCBjb250cm9sUG9pbnRzLCBzdGFydEtub3QsIGVuZEtub3QgKTtcbiAgICAgICAgICAgIHZhciB2ZXJ0aWNlcyA9IGN1cnZlLmdldFBvaW50cyggY29udHJvbFBvaW50cy5sZW5ndGggKiA3ICk7XG4gICAgXG4gICAgICAgICAgICB2YXIgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSggdmVydGljZXMubGVuZ3RoICogMyApO1xuICAgIFxuICAgICAgICAgICAgdmVydGljZXMuZm9yRWFjaCggZnVuY3Rpb24gKCB2ZXJ0ZXgsIGkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmVydGV4LnRvQXJyYXkoIHBvc2l0aW9ucywgaSAqIDMgKTtcbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuICAgICAgICAgICAgZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGdlb21ldHJ5O1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgbWFpbiBUSFJFRS5Hcm91cCgpIHRvIGJlIHJldHVybmVkIGJ5IHRoZSBsb2FkZXJcbiAgICAgICAgZnVuY3Rpb24gcGFyc2VTY2VuZSggRkJYVHJlZSwgY29ubmVjdGlvbnMsIHNrZWxldG9ucywgZ2VvbWV0cnlNYXAsIG1hdGVyaWFsTWFwICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHNjZW5lR3JhcGggPSBuZXcgVEhSRUUuR3JvdXAoKTtcbiAgICBcbiAgICAgICAgICAgIHZhciBtb2RlbE1hcCA9IHBhcnNlTW9kZWxzKCBGQlhUcmVlLCBza2VsZXRvbnMsIGdlb21ldHJ5TWFwLCBtYXRlcmlhbE1hcCwgY29ubmVjdGlvbnMgKTtcbiAgICBcbiAgICAgICAgICAgIHZhciBtb2RlbE5vZGVzID0gRkJYVHJlZS5PYmplY3RzLk1vZGVsO1xuICAgIFxuICAgICAgICAgICAgbW9kZWxNYXAuZm9yRWFjaCggZnVuY3Rpb24gKCBtb2RlbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbW9kZWxOb2RlID0gbW9kZWxOb2Rlc1sgbW9kZWwuSUQgXTtcbiAgICAgICAgICAgICAgICBzZXRMb29rQXRQcm9wZXJ0aWVzKCBGQlhUcmVlLCBtb2RlbCwgbW9kZWxOb2RlLCBjb25uZWN0aW9ucywgc2NlbmVHcmFwaCApO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRDb25uZWN0aW9ucyA9IGNvbm5lY3Rpb25zLmdldCggbW9kZWwuSUQgKS5wYXJlbnRzO1xuICAgIFxuICAgICAgICAgICAgICAgIHBhcmVudENvbm5lY3Rpb25zLmZvckVhY2goIGZ1bmN0aW9uICggY29ubmVjdGlvbiApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudCA9IG1vZGVsTWFwLmdldCggY29ubmVjdGlvbi5JRCApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHBhcmVudCAhPT0gdW5kZWZpbmVkICkgcGFyZW50LmFkZCggbW9kZWwgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBtb2RlbC5wYXJlbnQgPT09IG51bGwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHNjZW5lR3JhcGguYWRkKCBtb2RlbCApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgIGJpbmRTa2VsZXRvbiggRkJYVHJlZSwgc2tlbGV0b25zLCBnZW9tZXRyeU1hcCwgbW9kZWxNYXAsIGNvbm5lY3Rpb25zICk7XG4gICAgXG4gICAgICAgICAgICBhZGRBbmltYXRpb25zKCBGQlhUcmVlLCBjb25uZWN0aW9ucywgc2NlbmVHcmFwaCApO1xuICAgIFxuICAgICAgICAgICAgY3JlYXRlQW1iaWVudExpZ2h0KCBGQlhUcmVlLCBzY2VuZUdyYXBoICk7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gc2NlbmVHcmFwaDtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBwYXJzZSBub2RlcyBpbiBGQlhUcmVlLk9iamVjdHMuTW9kZWxcbiAgICAgICAgZnVuY3Rpb24gcGFyc2VNb2RlbHMoIEZCWFRyZWUsIHNrZWxldG9ucywgZ2VvbWV0cnlNYXAsIG1hdGVyaWFsTWFwLCBjb25uZWN0aW9ucyApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBtb2RlbE1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIHZhciBtb2RlbE5vZGVzID0gRkJYVHJlZS5PYmplY3RzLk1vZGVsO1xuICAgIFxuICAgICAgICAgICAgZm9yICggdmFyIG5vZGVJRCBpbiBtb2RlbE5vZGVzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBpZCA9IHBhcnNlSW50KCBub2RlSUQgKTtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IG1vZGVsTm9kZXNbIG5vZGVJRCBdO1xuICAgICAgICAgICAgICAgIHZhciByZWxhdGlvbnNoaXBzID0gY29ubmVjdGlvbnMuZ2V0KCBpZCApO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9IGJ1aWxkU2tlbGV0b24oIHJlbGF0aW9uc2hpcHMsIHNrZWxldG9ucywgaWQsIG5vZGUuYXR0ck5hbWUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoICEgbW9kZWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIG5vZGUuYXR0clR5cGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdDYW1lcmEnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsID0gY3JlYXRlQ2FtZXJhKCBGQlhUcmVlLCByZWxhdGlvbnNoaXBzICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdMaWdodCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBjcmVhdGVMaWdodCggRkJYVHJlZSwgcmVsYXRpb25zaGlwcyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnTWVzaCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBjcmVhdGVNZXNoKCBGQlhUcmVlLCByZWxhdGlvbnNoaXBzLCBnZW9tZXRyeU1hcCwgbWF0ZXJpYWxNYXAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ051cmJzQ3VydmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsID0gY3JlYXRlQ3VydmUoIHJlbGF0aW9uc2hpcHMsIGdlb21ldHJ5TWFwICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdMaW1iTm9kZSc6IC8vIHVzdWFsbHkgYXNzb2NpYXRlZCB3aXRoIGEgQm9uZSwgaG93ZXZlciBpZiBhIEJvbmUgd2FzIG5vdCBjcmVhdGVkIHdlJ2xsIG1ha2UgYSBHcm91cCBpbnN0ZWFkXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdOdWxsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBuZXcgVEhSRUUuR3JvdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5uYW1lID0gVEhSRUUuUHJvcGVydHlCaW5kaW5nLnNhbml0aXplTm9kZU5hbWUoIG5vZGUuYXR0ck5hbWUgKTtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuSUQgPSBpZDtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgc2V0TW9kZWxUcmFuc2Zvcm1zKCBGQlhUcmVlLCBtb2RlbCwgbm9kZSApO1xuICAgICAgICAgICAgICAgIG1vZGVsTWFwLnNldCggaWQsIG1vZGVsICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gbW9kZWxNYXA7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gYnVpbGRTa2VsZXRvbiggcmVsYXRpb25zaGlwcywgc2tlbGV0b25zLCBpZCwgbmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBib25lID0gbnVsbDtcbiAgICBcbiAgICAgICAgICAgIHJlbGF0aW9uc2hpcHMucGFyZW50cy5mb3JFYWNoKCBmdW5jdGlvbiAoIHBhcmVudCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgSUQgaW4gc2tlbGV0b25zICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc2tlbGV0b24gPSBza2VsZXRvbnNbIElEIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHNrZWxldG9uLnJhd0JvbmVzLmZvckVhY2goIGZ1bmN0aW9uICggcmF3Qm9uZSwgaSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcmF3Qm9uZS5JRCA9PT0gcGFyZW50LklEICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJCb25lID0gYm9uZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib25lID0gbmV3IFRIUkVFLkJvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib25lLm1hdHJpeFdvcmxkLmNvcHkoIHJhd0JvbmUudHJhbnNmb3JtTGluayApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNldCBuYW1lIGFuZCBpZCBoZXJlIC0gb3RoZXJ3aXNlIGluIGNhc2VzIHdoZXJlIFwic3ViQm9uZVwiIGlzIGNyZWF0ZWQgaXQgd2lsbCBub3QgaGF2ZSBhIG5hbWUgLyBpZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvbmUubmFtZSA9IFRIUkVFLlByb3BlcnR5QmluZGluZy5zYW5pdGl6ZU5vZGVOYW1lKCBuYW1lICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9uZS5JRCA9IGlkO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNrZWxldG9uLmJvbmVzWyBpIF0gPSBib25lO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluIGNhc2VzIHdoZXJlIGEgYm9uZSBpcyBzaGFyZWQgYmV0d2VlbiBtdWx0aXBsZSBtZXNoZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkdXBsaWNhdGUgdGhlIGJvbmUgaGVyZSBhbmQgYW5kIGl0IGFzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IGJvbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHN1YkJvbmUgIT09IG51bGwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvbmUuYWRkKCBzdWJCb25lICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGJvbmU7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gY3JlYXRlIGEgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEgb3IgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUNhbWVyYSggRkJYVHJlZSwgcmVsYXRpb25zaGlwcyApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBtb2RlbDtcbiAgICAgICAgICAgIHZhciBjYW1lcmFBdHRyaWJ1dGU7XG4gICAgXG4gICAgICAgICAgICByZWxhdGlvbnNoaXBzLmNoaWxkcmVuLmZvckVhY2goIGZ1bmN0aW9uICggY2hpbGQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGF0dHIgPSBGQlhUcmVlLk9iamVjdHMuTm9kZUF0dHJpYnV0ZVsgY2hpbGQuSUQgXTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGF0dHIgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FtZXJhQXR0cmlidXRlID0gYXR0cjtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICBpZiAoIGNhbWVyYUF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIG1vZGVsID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gMDtcbiAgICAgICAgICAgICAgICBpZiAoIGNhbWVyYUF0dHJpYnV0ZS5DYW1lcmFQcm9qZWN0aW9uVHlwZSAhPT0gdW5kZWZpbmVkICYmIGNhbWVyYUF0dHJpYnV0ZS5DYW1lcmFQcm9qZWN0aW9uVHlwZS52YWx1ZSA9PT0gMSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9IDE7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHZhciBuZWFyQ2xpcHBpbmdQbGFuZSA9IDE7XG4gICAgICAgICAgICAgICAgaWYgKCBjYW1lcmFBdHRyaWJ1dGUuTmVhclBsYW5lICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG5lYXJDbGlwcGluZ1BsYW5lID0gY2FtZXJhQXR0cmlidXRlLk5lYXJQbGFuZS52YWx1ZSAvIDEwMDA7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHZhciBmYXJDbGlwcGluZ1BsYW5lID0gMTAwMDtcbiAgICAgICAgICAgICAgICBpZiAoIGNhbWVyYUF0dHJpYnV0ZS5GYXJQbGFuZSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmYXJDbGlwcGluZ1BsYW5lID0gY2FtZXJhQXR0cmlidXRlLkZhclBsYW5lLnZhbHVlIC8gMTAwMDtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGNhbWVyYUF0dHJpYnV0ZS5Bc3BlY3RXaWR0aCAhPT0gdW5kZWZpbmVkICYmIGNhbWVyYUF0dHJpYnV0ZS5Bc3BlY3RIZWlnaHQgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBjYW1lcmFBdHRyaWJ1dGUuQXNwZWN0V2lkdGgudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGNhbWVyYUF0dHJpYnV0ZS5Bc3BlY3RIZWlnaHQudmFsdWU7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHZhciBhc3BlY3QgPSB3aWR0aCAvIGhlaWdodDtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZm92ID0gNDU7XG4gICAgICAgICAgICAgICAgaWYgKCBjYW1lcmFBdHRyaWJ1dGUuRmllbGRPZlZpZXcgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm92ID0gY2FtZXJhQXR0cmlidXRlLkZpZWxkT2ZWaWV3LnZhbHVlO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZm9jYWxMZW5ndGggPSBjYW1lcmFBdHRyaWJ1dGUuRm9jYWxMZW5ndGggPyBjYW1lcmFBdHRyaWJ1dGUuRm9jYWxMZW5ndGgudmFsdWUgOiBudWxsO1xuICAgIFxuICAgICAgICAgICAgICAgIHN3aXRjaCAoIHR5cGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogLy8gUGVyc3BlY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhckNsaXBwaW5nUGxhbmUsIGZhckNsaXBwaW5nUGxhbmUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZm9jYWxMZW5ndGggIT09IG51bGwgKSBtb2RlbC5zZXRGb2NhbExlbmd0aCggZm9jYWxMZW5ndGggKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IC8vIE9ydGhvZ3JhcGhpY1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBuZXcgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKCAtIHdpZHRoIC8gMiwgd2lkdGggLyAyLCBoZWlnaHQgLyAyLCAtIGhlaWdodCAvIDIsIG5lYXJDbGlwcGluZ1BsYW5lLCBmYXJDbGlwcGluZ1BsYW5lICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ1RIUkVFLkZCWExvYWRlcjogVW5rbm93biBjYW1lcmEgdHlwZSAnICsgdHlwZSArICcuJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBtb2RlbDtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBDcmVhdGUgYSBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0LCBUSFJFRS5Qb2ludExpZ2h0IG9yIFRIUkVFLlNwb3RMaWdodFxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVMaWdodCggRkJYVHJlZSwgcmVsYXRpb25zaGlwcyApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBtb2RlbDtcbiAgICAgICAgICAgIHZhciBsaWdodEF0dHJpYnV0ZTtcbiAgICBcbiAgICAgICAgICAgIHJlbGF0aW9uc2hpcHMuY2hpbGRyZW4uZm9yRWFjaCggZnVuY3Rpb24gKCBjaGlsZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYXR0ciA9IEZCWFRyZWUuT2JqZWN0cy5Ob2RlQXR0cmlidXRlWyBjaGlsZC5JRCBdO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggYXR0ciAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBsaWdodEF0dHJpYnV0ZSA9IGF0dHI7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgaWYgKCBsaWdodEF0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIG1vZGVsID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG4gICAgXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB0eXBlO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIExpZ2h0VHlwZSBjYW4gYmUgdW5kZWZpbmVkIGZvciBQb2ludCBsaWdodHNcbiAgICAgICAgICAgICAgICBpZiAoIGxpZ2h0QXR0cmlidXRlLkxpZ2h0VHlwZSA9PT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB0eXBlID0gMDtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB0eXBlID0gbGlnaHRBdHRyaWJ1dGUuTGlnaHRUeXBlLnZhbHVlO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgY29sb3IgPSAweGZmZmZmZjtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGxpZ2h0QXR0cmlidXRlLkNvbG9yICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yID0gbmV3IFRIUkVFLkNvbG9yKCkuZnJvbUFycmF5KCBsaWdodEF0dHJpYnV0ZS5Db2xvci52YWx1ZSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgaW50ZW5zaXR5ID0gKCBsaWdodEF0dHJpYnV0ZS5JbnRlbnNpdHkgPT09IHVuZGVmaW5lZCApID8gMSA6IGxpZ2h0QXR0cmlidXRlLkludGVuc2l0eS52YWx1ZSAvIDEwMDtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBsaWdodCBkaXNhYmxlZFxuICAgICAgICAgICAgICAgIGlmICggbGlnaHRBdHRyaWJ1dGUuQ2FzdExpZ2h0T25PYmplY3QgIT09IHVuZGVmaW5lZCAmJiBsaWdodEF0dHJpYnV0ZS5DYXN0TGlnaHRPbk9iamVjdC52YWx1ZSA9PT0gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaW50ZW5zaXR5ID0gMDtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gMDtcbiAgICAgICAgICAgICAgICBpZiAoIGxpZ2h0QXR0cmlidXRlLkZhckF0dGVudWF0aW9uRW5kICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggbGlnaHRBdHRyaWJ1dGUuRW5hYmxlRmFyQXR0ZW51YXRpb24gIT09IHVuZGVmaW5lZCAmJiBsaWdodEF0dHJpYnV0ZS5FbmFibGVGYXJBdHRlbnVhdGlvbi52YWx1ZSA9PT0gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gMDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gbGlnaHRBdHRyaWJ1dGUuRmFyQXR0ZW51YXRpb25FbmQudmFsdWUgLyAxMDAwO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGNvdWxkIHRoaXMgYmUgY2FsY3VsYXRlZCBsaW5lYXJseSBmcm9tIEZhckF0dGVudWF0aW9uU3RhcnQgdG8gRmFyQXR0ZW51YXRpb25FbmQ/XG4gICAgICAgICAgICAgICAgdmFyIGRlY2F5ID0gMTtcbiAgICBcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKCB0eXBlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IC8vIFBvaW50XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IG5ldyBUSFJFRS5Qb2ludExpZ2h0KCBjb2xvciwgaW50ZW5zaXR5LCBkaXN0YW5jZSwgZGVjYXkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IC8vIERpcmVjdGlvbmFsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KCBjb2xvciwgaW50ZW5zaXR5ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiAvLyBTcG90XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYW5nbGUgPSBNYXRoLlBJIC8gMztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbGlnaHRBdHRyaWJ1dGUuSW5uZXJBbmdsZSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ2xlID0gVEhSRUUuTWF0aC5kZWdUb1JhZCggbGlnaHRBdHRyaWJ1dGUuSW5uZXJBbmdsZS52YWx1ZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBlbnVtYnJhID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbGlnaHRBdHRyaWJ1dGUuT3V0ZXJBbmdsZSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IHRoaXMgaXMgbm90IGNvcnJlY3QgLSBGQlggY2FsY3VsYXRlcyBvdXRlciBhbmQgaW5uZXIgYW5nbGUgaW4gZGVncmVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdpdGggT3V0ZXJBbmdsZSA+IElubmVyQW5nbGUgJiYgT3V0ZXJBbmdsZSA8PSBNYXRoLlBJXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hpbGUgdGhyZWUuanMgdXNlcyBhIHBlbnVtYnJhIGJldHdlZW4gKDAsIDEpIHRvIGF0dGVudWF0ZSB0aGUgaW5uZXIgYW5nbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZW51bWJyYSA9IFRIUkVFLk1hdGguZGVnVG9SYWQoIGxpZ2h0QXR0cmlidXRlLk91dGVyQW5nbGUudmFsdWUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZW51bWJyYSA9IE1hdGgubWF4KCBwZW51bWJyYSwgMSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBuZXcgVEhSRUUuU3BvdExpZ2h0KCBjb2xvciwgaW50ZW5zaXR5LCBkaXN0YW5jZSwgYW5nbGUsIHBlbnVtYnJhLCBkZWNheSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5GQlhMb2FkZXI6IFVua25vd24gbGlnaHQgdHlwZSAnICsgbGlnaHRBdHRyaWJ1dGUuTGlnaHRUeXBlLnZhbHVlICsgJywgZGVmYXVsdGluZyB0byBhIFRIUkVFLlBvaW50TGlnaHQuJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBuZXcgVEhSRUUuUG9pbnRMaWdodCggY29sb3IsIGludGVuc2l0eSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbGlnaHRBdHRyaWJ1dGUuQ2FzdFNoYWRvd3MgIT09IHVuZGVmaW5lZCAmJiBsaWdodEF0dHJpYnV0ZS5DYXN0U2hhZG93cy52YWx1ZSA9PT0gMSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuY2FzdFNoYWRvdyA9IHRydWU7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZU1lc2goIEZCWFRyZWUsIHJlbGF0aW9uc2hpcHMsIGdlb21ldHJ5TWFwLCBtYXRlcmlhbE1hcCApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBtb2RlbDtcbiAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IG51bGw7XG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSBudWxsO1xuICAgICAgICAgICAgdmFyIG1hdGVyaWFscyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgLy8gZ2V0IGdlb21ldHJ5IGFuZCBtYXRlcmlhbHMocykgZnJvbSBjb25uZWN0aW9uc1xuICAgICAgICAgICAgcmVsYXRpb25zaGlwcy5jaGlsZHJlbi5mb3JFYWNoKCBmdW5jdGlvbiAoIGNoaWxkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggZ2VvbWV0cnlNYXAuaGFzKCBjaGlsZC5JRCApICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBnZW9tZXRyeSA9IGdlb21ldHJ5TWFwLmdldCggY2hpbGQuSUQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBtYXRlcmlhbE1hcC5oYXMoIGNoaWxkLklEICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFscy5wdXNoKCBtYXRlcmlhbE1hcC5nZXQoIGNoaWxkLklEICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICBpZiAoIG1hdGVyaWFscy5sZW5ndGggPiAxICkge1xuICAgIFxuICAgICAgICAgICAgICAgIG1hdGVyaWFsID0gbWF0ZXJpYWxzO1xuICAgIFxuICAgICAgICAgICAgfSBlbHNlIGlmICggbWF0ZXJpYWxzLmxlbmd0aCA+IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBtYXRlcmlhbHNbIDAgXTtcbiAgICBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoIHsgY29sb3I6IDB4Y2NjY2NjIH0gKTtcbiAgICAgICAgICAgICAgICBtYXRlcmlhbHMucHVzaCggbWF0ZXJpYWwgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmICggJ2NvbG9yJyBpbiBnZW9tZXRyeS5hdHRyaWJ1dGVzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIG1hdGVyaWFscy5mb3JFYWNoKCBmdW5jdGlvbiAoIG1hdGVyaWFsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC52ZXJ0ZXhDb2xvcnMgPSBUSFJFRS5WZXJ0ZXhDb2xvcnM7XG4gICAgXG4gICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCBnZW9tZXRyeS5GQlhfRGVmb3JtZXIgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxzLmZvckVhY2goIGZ1bmN0aW9uICggbWF0ZXJpYWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLnNraW5uaW5nID0gdHJ1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgbW9kZWwgPSBuZXcgVEhSRUUuU2tpbm5lZE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuICAgIFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICBtb2RlbCA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBtb2RlbDtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVDdXJ2ZSggcmVsYXRpb25zaGlwcywgZ2VvbWV0cnlNYXAgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgZ2VvbWV0cnkgPSByZWxhdGlvbnNoaXBzLmNoaWxkcmVuLnJlZHVjZSggZnVuY3Rpb24gKCBnZW8sIGNoaWxkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggZ2VvbWV0cnlNYXAuaGFzKCBjaGlsZC5JRCApICkgZ2VvID0gZ2VvbWV0cnlNYXAuZ2V0KCBjaGlsZC5JRCApO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBnZW87XG4gICAgXG4gICAgICAgICAgICB9LCBudWxsICk7XG4gICAgXG4gICAgICAgICAgICAvLyBGQlggZG9lcyBub3QgbGlzdCBtYXRlcmlhbHMgZm9yIE51cmJzIGxpbmVzLCBzbyB3ZSdsbCBqdXN0IHB1dCBvdXIgb3duIGluIGhlcmUuXG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IDB4MzMwMGZmLCBsaW5ld2lkdGg6IDEgfSApO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5MaW5lKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBQYXJzZSBhbWJpZW50IGNvbG9yIGluIEZCWFRyZWUuR2xvYmFsU2V0dGluZ3MgLSBpZiBpdCdzIG5vdCBzZXQgdG8gYmxhY2sgKGRlZmF1bHQpLCBjcmVhdGUgYW4gYW1iaWVudCBsaWdodFxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVBbWJpZW50TGlnaHQoIEZCWFRyZWUsIHNjZW5lR3JhcGggKSB7XG4gICAgXG4gICAgICAgICAgICBpZiAoICdHbG9iYWxTZXR0aW5ncycgaW4gRkJYVHJlZSAmJiAnQW1iaWVudENvbG9yJyBpbiBGQlhUcmVlLkdsb2JhbFNldHRpbmdzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBhbWJpZW50Q29sb3IgPSBGQlhUcmVlLkdsb2JhbFNldHRpbmdzLkFtYmllbnRDb2xvci52YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgciA9IGFtYmllbnRDb2xvclsgMCBdO1xuICAgICAgICAgICAgICAgIHZhciBnID0gYW1iaWVudENvbG9yWyAxIF07XG4gICAgICAgICAgICAgICAgdmFyIGIgPSBhbWJpZW50Q29sb3JbIDIgXTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHIgIT09IDAgfHwgZyAhPT0gMCB8fCBiICE9PSAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoIHIsIGcsIGIgKTtcbiAgICAgICAgICAgICAgICAgICAgc2NlbmVHcmFwaC5hZGQoIG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoIGNvbG9yLCAxICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gc2V0TG9va0F0UHJvcGVydGllcyggRkJYVHJlZSwgbW9kZWwsIG1vZGVsTm9kZSwgY29ubmVjdGlvbnMsIHNjZW5lR3JhcGggKSB7XG4gICAgXG4gICAgICAgICAgICBpZiAoICdMb29rQXRQcm9wZXJ0eScgaW4gbW9kZWxOb2RlICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IGNvbm5lY3Rpb25zLmdldCggbW9kZWwuSUQgKS5jaGlsZHJlbjtcbiAgICBcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKCBmdW5jdGlvbiAoIGNoaWxkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLnJlbGF0aW9uc2hpcCA9PT0gJ0xvb2tBdFByb3BlcnR5JyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb29rQXRUYXJnZXQgPSBGQlhUcmVlLk9iamVjdHMuTW9kZWxbIGNoaWxkLklEIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoICdMY2xfVHJhbnNsYXRpb24nIGluIGxvb2tBdFRhcmdldCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gbG9va0F0VGFyZ2V0LkxjbF9UcmFuc2xhdGlvbi52YWx1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEaXJlY3Rpb25hbExpZ2h0LCBTcG90TGlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG1vZGVsLnRhcmdldCAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC50YXJnZXQucG9zaXRpb24uZnJvbUFycmF5KCBwb3MgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NlbmVHcmFwaC5hZGQoIG1vZGVsLnRhcmdldCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIENhbWVyYXMgYW5kIG90aGVyIE9iamVjdDNEc1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5sb29rQXQoIG5ldyBUSFJFRS5WZWN0b3IzKCkuZnJvbUFycmF5KCBwb3MgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBwYXJzZSB0aGUgbW9kZWwgbm9kZSBmb3IgdHJhbnNmb3JtIGRldGFpbHMgYW5kIGFwcGx5IHRoZW0gdG8gdGhlIG1vZGVsXG4gICAgICAgIGZ1bmN0aW9uIHNldE1vZGVsVHJhbnNmb3JtcyggRkJYVHJlZSwgbW9kZWwsIG1vZGVsTm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgIC8vIGh0dHA6Ly9oZWxwLmF1dG9kZXNrLmNvbS92aWV3L0ZCWC8yMDE3L0VOVS8/Z3VpZD1fX2NwcF9yZWZfY2xhc3NfZmJ4X2V1bGVyX2h0bWxcbiAgICAgICAgICAgIGlmICggJ1JvdGF0aW9uT3JkZXInIGluIG1vZGVsTm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZW51bXMgPSBbXG4gICAgICAgICAgICAgICAgICAgICdYWVonLCAvLyBkZWZhdWx0XG4gICAgICAgICAgICAgICAgICAgICdYWlknLFxuICAgICAgICAgICAgICAgICAgICAnWVpYJyxcbiAgICAgICAgICAgICAgICAgICAgJ1pYWScsXG4gICAgICAgICAgICAgICAgICAgICdZWFonLFxuICAgICAgICAgICAgICAgICAgICAnWllYJyxcbiAgICAgICAgICAgICAgICAgICAgJ1NwaGVyaWNYWVonLFxuICAgICAgICAgICAgICAgIF07XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VJbnQoIG1vZGVsTm9kZS5Sb3RhdGlvbk9yZGVyLnZhbHVlLCAxMCApO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggdmFsdWUgPiAwICYmIHZhbHVlIDwgNiApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gbW9kZWwucm90YXRpb24ub3JkZXIgPSBlbnVtc1sgdmFsdWUgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gTm90ZTogRXVsZXIgb3JkZXIgb3RoZXIgdGhhbiBYWVogaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQsIHNvIGp1c3QgZGlzcGxheSBhIHdhcm5pbmcgZm9yIG5vd1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5GQlhMb2FkZXI6IHVuc3VwcG9ydGVkIEV1bGVyIE9yZGVyOiAlcy4gQ3VycmVudGx5IG9ubHkgWFlaIG9yZGVyIGlzIHN1cHBvcnRlZC4gQW5pbWF0aW9ucyBhbmQgcm90YXRpb25zIG1heSBiZSBpbmNvcnJlY3QuJywgZW51bXNbIHZhbHVlIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gNiApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCAnVEhSRUUuRkJYTG9hZGVyOiB1bnN1cHBvcnRlZCBFdWxlciBPcmRlcjogU3BoZXJpY2FsIFhZWi4gQW5pbWF0aW9ucyBhbmQgcm90YXRpb25zIG1heSBiZSBpbmNvcnJlY3QuJyApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmICggJ0xjbF9UcmFuc2xhdGlvbicgaW4gbW9kZWxOb2RlICkge1xuICAgIFxuICAgICAgICAgICAgICAgIG1vZGVsLnBvc2l0aW9uLmZyb21BcnJheSggbW9kZWxOb2RlLkxjbF9UcmFuc2xhdGlvbi52YWx1ZSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgaWYgKCAnTGNsX1JvdGF0aW9uJyBpbiBtb2RlbE5vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHJvdGF0aW9uID0gbW9kZWxOb2RlLkxjbF9Sb3RhdGlvbi52YWx1ZS5tYXAoIFRIUkVFLk1hdGguZGVnVG9SYWQgKTtcbiAgICAgICAgICAgICAgICByb3RhdGlvbi5wdXNoKCAnWllYJyApO1xuICAgICAgICAgICAgICAgIG1vZGVsLnJvdGF0aW9uLmZyb21BcnJheSggcm90YXRpb24gKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmICggJ0xjbF9TY2FsaW5nJyBpbiBtb2RlbE5vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgbW9kZWwuc2NhbGUuZnJvbUFycmF5KCBtb2RlbE5vZGUuTGNsX1NjYWxpbmcudmFsdWUgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmICggJ1ByZVJvdGF0aW9uJyBpbiBtb2RlbE5vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gbW9kZWxOb2RlLlByZVJvdGF0aW9uLnZhbHVlLm1hcCggVEhSRUUuTWF0aC5kZWdUb1JhZCApO1xuICAgICAgICAgICAgICAgIGFycmF5WyAzIF0gPSAnWllYJztcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcHJlUm90YXRpb25zID0gbmV3IFRIUkVFLkV1bGVyKCkuZnJvbUFycmF5KCBhcnJheSApO1xuICAgIFxuICAgICAgICAgICAgICAgIHByZVJvdGF0aW9ucyA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCkuc2V0RnJvbUV1bGVyKCBwcmVSb3RhdGlvbnMgKTtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFJvdGF0aW9uID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKS5zZXRGcm9tRXVsZXIoIG1vZGVsLnJvdGF0aW9uICk7XG4gICAgICAgICAgICAgICAgcHJlUm90YXRpb25zLm11bHRpcGx5KCBjdXJyZW50Um90YXRpb24gKTtcbiAgICAgICAgICAgICAgICBtb2RlbC5yb3RhdGlvbi5zZXRGcm9tUXVhdGVybmlvbiggcHJlUm90YXRpb25zLCAnWllYJyApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGJpbmRTa2VsZXRvbiggRkJYVHJlZSwgc2tlbGV0b25zLCBnZW9tZXRyeU1hcCwgbW9kZWxNYXAsIGNvbm5lY3Rpb25zICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIGJpbmRNYXRyaWNlcyA9IHBhcnNlUG9zZU5vZGVzKCBGQlhUcmVlICk7XG4gICAgXG4gICAgICAgICAgICBmb3IgKCB2YXIgSUQgaW4gc2tlbGV0b25zICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBza2VsZXRvbiA9IHNrZWxldG9uc1sgSUQgXTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50cyA9IGNvbm5lY3Rpb25zLmdldCggcGFyc2VJbnQoIHNrZWxldG9uLklEICkgKS5wYXJlbnRzO1xuICAgIFxuICAgICAgICAgICAgICAgIHBhcmVudHMuZm9yRWFjaCggZnVuY3Rpb24gKCBwYXJlbnQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggZ2VvbWV0cnlNYXAuaGFzKCBwYXJlbnQuSUQgKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnZW9JRCA9IHBhcmVudC5JRDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnZW9SZWxhdGlvbnNoaXBzID0gY29ubmVjdGlvbnMuZ2V0KCBnZW9JRCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VvUmVsYXRpb25zaGlwcy5wYXJlbnRzLmZvckVhY2goIGZ1bmN0aW9uICggZ2VvQ29ublBhcmVudCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG1vZGVsTWFwLmhhcyggZ2VvQ29ublBhcmVudC5JRCApICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbW9kZWwgPSBtb2RlbE1hcC5nZXQoIGdlb0Nvbm5QYXJlbnQuSUQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwuYmluZCggbmV3IFRIUkVFLlNrZWxldG9uKCBza2VsZXRvbi5ib25lcyApLCBiaW5kTWF0cmljZXNbIGdlb0Nvbm5QYXJlbnQuSUQgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBwYXJzZVBvc2VOb2RlcyggRkJYVHJlZSApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBiaW5kTWF0cmljZXMgPSB7fTtcbiAgICBcbiAgICAgICAgICAgIGlmICggJ1Bvc2UnIGluIEZCWFRyZWUuT2JqZWN0cyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgQmluZFBvc2VOb2RlID0gRkJYVHJlZS5PYmplY3RzLlBvc2U7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIG5vZGVJRCBpbiBCaW5kUG9zZU5vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggQmluZFBvc2VOb2RlWyBub2RlSUQgXS5hdHRyVHlwZSA9PT0gJ0JpbmRQb3NlJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3NlTm9kZXMgPSBCaW5kUG9zZU5vZGVbIG5vZGVJRCBdLlBvc2VOb2RlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBBcnJheS5pc0FycmF5KCBwb3NlTm9kZXMgKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NlTm9kZXMuZm9yRWFjaCggZnVuY3Rpb24gKCBwb3NlTm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluZE1hdHJpY2VzWyBwb3NlTm9kZS5Ob2RlIF0gPSBuZXcgVEhSRUUuTWF0cml4NCgpLmZyb21BcnJheSggcG9zZU5vZGUuTWF0cml4LmEgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRNYXRyaWNlc1sgcG9zZU5vZGVzLk5vZGUgXSA9IG5ldyBUSFJFRS5NYXRyaXg0KCkuZnJvbUFycmF5KCBwb3NlTm9kZXMuTWF0cml4LmEgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBiaW5kTWF0cmljZXM7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gcGFyc2VBbmltYXRpb25zKCBGQlhUcmVlLCBjb25uZWN0aW9ucyApIHtcbiAgICBcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBhY3R1YWwgdHJhbnNmb3JtYXRpb24gZGF0YSBpcyBzdG9yZWQgaW4gRkJYVHJlZS5PYmplY3RzLkFuaW1hdGlvbkN1cnZlLFxuICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyB1bmRlZmluZWQgd2UgY2FuIHNhZmVseSBhc3N1bWUgdGhlcmUgYXJlIG5vIGFuaW1hdGlvbnNcbiAgICAgICAgICAgIGlmICggRkJYVHJlZS5PYmplY3RzLkFuaW1hdGlvbkN1cnZlID09PSB1bmRlZmluZWQgKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIFxuICAgICAgICAgICAgdmFyIGN1cnZlTm9kZXNNYXAgPSBwYXJzZUFuaW1hdGlvbkN1cnZlTm9kZXMoIEZCWFRyZWUgKTtcbiAgICBcbiAgICAgICAgICAgIHBhcnNlQW5pbWF0aW9uQ3VydmVzKCBGQlhUcmVlLCBjb25uZWN0aW9ucywgY3VydmVOb2Rlc01hcCApO1xuICAgIFxuICAgICAgICAgICAgdmFyIGxheWVyc01hcCA9IHBhcnNlQW5pbWF0aW9uTGF5ZXJzKCBGQlhUcmVlLCBjb25uZWN0aW9ucywgY3VydmVOb2Rlc01hcCApO1xuICAgICAgICAgICAgdmFyIHJhd0NsaXBzID0gcGFyc2VBbmltU3RhY2tzKCBGQlhUcmVlLCBjb25uZWN0aW9ucywgbGF5ZXJzTWFwICk7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gcmF3Q2xpcHM7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gcGFyc2Ugbm9kZXMgaW4gRkJYVHJlZS5PYmplY3RzLkFuaW1hdGlvbkN1cnZlTm9kZVxuICAgICAgICAvLyBlYWNoIEFuaW1hdGlvbkN1cnZlTm9kZSBob2xkcyBkYXRhIGZvciBhbiBhbmltYXRpb24gdHJhbnNmb3JtIGZvciBhIG1vZGVsIChlLmcuIGxlZnQgYXJtIHJvdGF0aW9uIClcbiAgICAgICAgLy8gYW5kIGlzIHJlZmVyZW5jZWQgYnkgYW4gQW5pbWF0aW9uTGF5ZXJcbiAgICAgICAgZnVuY3Rpb24gcGFyc2VBbmltYXRpb25DdXJ2ZU5vZGVzKCBGQlhUcmVlICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHJhd0N1cnZlTm9kZXMgPSBGQlhUcmVlLk9iamVjdHMuQW5pbWF0aW9uQ3VydmVOb2RlO1xuICAgIFxuICAgICAgICAgICAgdmFyIGN1cnZlTm9kZXNNYXAgPSBuZXcgTWFwKCk7XG4gICAgXG4gICAgICAgICAgICBmb3IgKCB2YXIgbm9kZUlEIGluIHJhd0N1cnZlTm9kZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHJhd0N1cnZlTm9kZSA9IHJhd0N1cnZlTm9kZXNbIG5vZGVJRCBdO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggcmF3Q3VydmVOb2RlLmF0dHJOYW1lLm1hdGNoKCAvU3xSfFQvICkgIT09IG51bGwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJ2ZU5vZGUgPSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogcmF3Q3VydmVOb2RlLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogcmF3Q3VydmVOb2RlLmF0dHJOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VydmVzOiB7fSxcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY3VydmVOb2Rlc01hcC5zZXQoIGN1cnZlTm9kZS5pZCwgY3VydmVOb2RlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGN1cnZlTm9kZXNNYXA7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gcGFyc2Ugbm9kZXMgaW4gRkJYVHJlZS5PYmplY3RzLkFuaW1hdGlvbkN1cnZlIGFuZCBjb25uZWN0IHRoZW0gdXAgdG9cbiAgICAgICAgLy8gcHJldmlvdXNseSBwYXJzZWQgQW5pbWF0aW9uQ3VydmVOb2Rlcy4gRWFjaCBBbmltYXRpb25DdXJ2ZSBob2xkcyBkYXRhIGZvciBhIHNpbmdsZSBhbmltYXRlZFxuICAgICAgICAvLyBheGlzICggZS5nLiB0aW1lcyBhbmQgdmFsdWVzIG9mIHggcm90YXRpb24pXG4gICAgICAgIGZ1bmN0aW9uIHBhcnNlQW5pbWF0aW9uQ3VydmVzKCBGQlhUcmVlLCBjb25uZWN0aW9ucywgY3VydmVOb2Rlc01hcCApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciByYXdDdXJ2ZXMgPSBGQlhUcmVlLk9iamVjdHMuQW5pbWF0aW9uQ3VydmU7XG4gICAgXG4gICAgICAgICAgICBmb3IgKCB2YXIgbm9kZUlEIGluIHJhd0N1cnZlcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uQ3VydmUgPSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlkOiByYXdDdXJ2ZXNbIG5vZGVJRCBdLmlkLFxuICAgICAgICAgICAgICAgICAgICB0aW1lczogcmF3Q3VydmVzWyBub2RlSUQgXS5LZXlUaW1lLmEubWFwKCBjb252ZXJ0RkJYVGltZVRvU2Vjb25kcyApLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IHJhd0N1cnZlc1sgbm9kZUlEIF0uS2V5VmFsdWVGbG9hdC5hLFxuICAgIFxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHJlbGF0aW9uc2hpcHMgPSBjb25uZWN0aW9ucy5nZXQoIGFuaW1hdGlvbkN1cnZlLmlkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCByZWxhdGlvbnNoaXBzICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb25DdXJ2ZUlEID0gcmVsYXRpb25zaGlwcy5wYXJlbnRzWyAwIF0uSUQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb25DdXJ2ZVJlbGF0aW9uc2hpcCA9IHJlbGF0aW9uc2hpcHMucGFyZW50c1sgMCBdLnJlbGF0aW9uc2hpcDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF4aXMgPSAnJztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBhbmltYXRpb25DdXJ2ZVJlbGF0aW9uc2hpcC5tYXRjaCggL1gvICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBheGlzID0gJ3gnO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBhbmltYXRpb25DdXJ2ZVJlbGF0aW9uc2hpcC5tYXRjaCggL1kvICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBheGlzID0gJ3knO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBhbmltYXRpb25DdXJ2ZVJlbGF0aW9uc2hpcC5tYXRjaCggL1ovICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBheGlzID0gJ3onO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY3VydmVOb2Rlc01hcC5nZXQoIGFuaW1hdGlvbkN1cnZlSUQgKS5jdXJ2ZXNbIGF4aXMgXSA9IGFuaW1hdGlvbkN1cnZlO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBwYXJzZSBub2RlcyBpbiBGQlhUcmVlLk9iamVjdHMuQW5pbWF0aW9uTGF5ZXIuIEVhY2ggbGF5ZXJzIGhvbGRzIHJlZmVyZW5jZXNcbiAgICAgICAgLy8gdG8gdmFyaW91cyBBbmltYXRpb25DdXJ2ZU5vZGVzIGFuZCBpcyByZWZlcmVuY2VkIGJ5IGFuIEFuaW1hdGlvblN0YWNrIG5vZGVcbiAgICAgICAgLy8gbm90ZTogdGhlb3JldGljYWxseSBhIHN0YWNrIGNhbiBtdWx0aXBsZSBsYXllcnMsIGhvd2V2ZXIgaW4gcHJhY3RpY2UgdGhlcmUgYWx3YXlzIHNlZW1zIHRvIGJlIG9uZSBwZXIgc3RhY2tcbiAgICAgICAgZnVuY3Rpb24gcGFyc2VBbmltYXRpb25MYXllcnMoIEZCWFRyZWUsIGNvbm5lY3Rpb25zLCBjdXJ2ZU5vZGVzTWFwICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHJhd0xheWVycyA9IEZCWFRyZWUuT2JqZWN0cy5BbmltYXRpb25MYXllcjtcbiAgICBcbiAgICAgICAgICAgIHZhciBsYXllcnNNYXAgPSBuZXcgTWFwKCk7XG4gICAgXG4gICAgICAgICAgICBmb3IgKCB2YXIgbm9kZUlEIGluIHJhd0xheWVycyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbGF5ZXJDdXJ2ZU5vZGVzID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSBjb25uZWN0aW9ucy5nZXQoIHBhcnNlSW50KCBub2RlSUQgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggY29ubmVjdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBhbGwgdGhlIGFuaW1hdGlvbkN1cnZlTm9kZXMgdXNlZCBpbiB0aGUgbGF5ZXJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gY29ubmVjdGlvbi5jaGlsZHJlbjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4uZm9yRWFjaCggZnVuY3Rpb24gKCBjaGlsZCwgaSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY3VydmVOb2Rlc01hcC5oYXMoIGNoaWxkLklEICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnZlTm9kZSA9IGN1cnZlTm9kZXNNYXAuZ2V0KCBjaGlsZC5JRCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIHRoYXQgdGhlIGN1cnZlcyBhcmUgZGVmaW5lZCBmb3IgYXQgbGVhc3Qgb25lIGF4aXMsIG90aGVyd2lzZSBpZ25vcmUgdGhlIGN1cnZlTm9kZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY3VydmVOb2RlLmN1cnZlcy54ICE9PSB1bmRlZmluZWQgfHwgY3VydmVOb2RlLmN1cnZlcy55ICE9PSB1bmRlZmluZWQgfHwgY3VydmVOb2RlLmN1cnZlcy56ICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbGF5ZXJDdXJ2ZU5vZGVzWyBpIF0gPT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb2RlbElEO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbnMuZ2V0KCBjaGlsZC5JRCApLnBhcmVudHMuZm9yRWFjaCggZnVuY3Rpb24gKCBwYXJlbnQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwYXJlbnQucmVsYXRpb25zaGlwICE9PSB1bmRlZmluZWQgKSBtb2RlbElEID0gcGFyZW50LklEO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhd01vZGVsID0gRkJYVHJlZS5PYmplY3RzLk1vZGVsWyBtb2RlbElELnRvU3RyaW5nKCkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub2RlID0ge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsTmFtZTogVEhSRUUuUHJvcGVydHlCaW5kaW5nLnNhbml0aXplTm9kZU5hbWUoIHJhd01vZGVsLmF0dHJOYW1lICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFBvc2l0aW9uOiBbIDAsIDAsIDAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsUm90YXRpb246IFsgMCwgMCwgMCBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxTY2FsZTogWyAxLCAxLCAxIF0sXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAnTGNsX1RyYW5zbGF0aW9uJyBpbiByYXdNb2RlbCApIG5vZGUuaW5pdGlhbFBvc2l0aW9uID0gcmF3TW9kZWwuTGNsX1RyYW5zbGF0aW9uLnZhbHVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAnTGNsX1JvdGF0aW9uJyBpbiByYXdNb2RlbCApIG5vZGUuaW5pdGlhbFJvdGF0aW9uID0gcmF3TW9kZWwuTGNsX1JvdGF0aW9uLnZhbHVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAnTGNsX1NjYWxpbmcnIGluIHJhd01vZGVsICkgbm9kZS5pbml0aWFsU2NhbGUgPSByYXdNb2RlbC5MY2xfU2NhbGluZy52YWx1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBhbmltYXRlZCBtb2RlbCBpcyBwcmUgcm90YXRlZCwgd2UnbGwgaGF2ZSB0byBhcHBseSB0aGUgcHJlIHJvdGF0aW9ucyB0byBldmVyeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW5pbWF0aW9uIHZhbHVlIGFzIHdlbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJ1ByZVJvdGF0aW9uJyBpbiByYXdNb2RlbCApIG5vZGUucHJlUm90YXRpb25zID0gcmF3TW9kZWwuUHJlUm90YXRpb24udmFsdWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllckN1cnZlTm9kZXNbIGkgXSA9IG5vZGU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJDdXJ2ZU5vZGVzWyBpIF1bIGN1cnZlTm9kZS5hdHRyIF0gPSBjdXJ2ZU5vZGU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgIFxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGxheWVyc01hcC5zZXQoIHBhcnNlSW50KCBub2RlSUQgKSwgbGF5ZXJDdXJ2ZU5vZGVzICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGxheWVyc01hcDtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBwYXJzZSBub2RlcyBpbiBGQlhUcmVlLk9iamVjdHMuQW5pbWF0aW9uU3RhY2suIFRoZXNlIGFyZSB0aGUgdG9wIGxldmVsIG5vZGUgaW4gdGhlIGFuaW1hdGlvblxuICAgICAgICAvLyBoaWVyYXJjaHkuIEVhY2ggU3RhY2sgbm9kZSB3aWxsIGJlIHVzZWQgdG8gY3JlYXRlIGEgVEhSRUUuQW5pbWF0aW9uQ2xpcFxuICAgICAgICBmdW5jdGlvbiBwYXJzZUFuaW1TdGFja3MoIEZCWFRyZWUsIGNvbm5lY3Rpb25zLCBsYXllcnNNYXAgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgcmF3U3RhY2tzID0gRkJYVHJlZS5PYmplY3RzLkFuaW1hdGlvblN0YWNrO1xuICAgIFxuICAgICAgICAgICAgLy8gY29ubmVjdCB0aGUgc3RhY2tzIChjbGlwcykgdXAgdG8gdGhlIGxheWVyc1xuICAgICAgICAgICAgdmFyIHJhd0NsaXBzID0ge307XG4gICAgXG4gICAgICAgICAgICBmb3IgKCB2YXIgbm9kZUlEIGluIHJhd1N0YWNrcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBjb25uZWN0aW9ucy5nZXQoIHBhcnNlSW50KCBub2RlSUQgKSApLmNoaWxkcmVuO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggY2hpbGRyZW4ubGVuZ3RoID4gMSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gaXQgc2VlbXMgbGlrZSBzdGFja3Mgd2lsbCBhbHdheXMgYmUgYXNzb2NpYXRlZCB3aXRoIGEgc2luZ2xlIGxheWVyLiBCdXQganVzdCBpbiBjYXNlIHRoZXJlIGFyZSBmaWxlc1xuICAgICAgICAgICAgICAgICAgICAvLyB3aGVyZSB0aGVyZSBhcmUgbXVsdGlwbGUgbGF5ZXJzIHBlciBzdGFjaywgd2UnbGwgZGlzcGxheSBhIHdhcm5pbmdcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCAnVEhSRUUuRkJYTG9hZGVyOiBFbmNvdW50ZXJlZCBhbiBhbmltYXRpb24gc3RhY2sgd2l0aCBtdWx0aXBsZSBsYXllcnMsIHRoaXMgaXMgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQuIElnbm9yaW5nIHN1YnNlcXVlbnQgbGF5ZXJzLicgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGxheWVyID0gbGF5ZXJzTWFwLmdldCggY2hpbGRyZW5bIDAgXS5JRCApO1xuICAgIFxuICAgICAgICAgICAgICAgIHJhd0NsaXBzWyBub2RlSUQgXSA9IHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogcmF3U3RhY2tzWyBub2RlSUQgXS5hdHRyTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXI6IGxheWVyLFxuICAgIFxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gcmF3Q2xpcHM7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gdGFrZSByYXcgYW5pbWF0aW9uIGRhdGEgZnJvbSBwYXJzZUFuaW1hdGlvbnMgYW5kIGNvbm5lY3QgaXQgdXAgdG8gdGhlIGxvYWRlZCBtb2RlbHNcbiAgICAgICAgZnVuY3Rpb24gYWRkQW5pbWF0aW9ucyggRkJYVHJlZSwgY29ubmVjdGlvbnMsIHNjZW5lR3JhcGggKSB7XG4gICAgXG4gICAgICAgICAgICBzY2VuZUdyYXBoLmFuaW1hdGlvbnMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgIHZhciByYXdDbGlwcyA9IHBhcnNlQW5pbWF0aW9ucyggRkJYVHJlZSwgY29ubmVjdGlvbnMgKTtcbiAgICBcbiAgICAgICAgICAgIGlmICggcmF3Q2xpcHMgPT09IHVuZGVmaW5lZCApIHJldHVybjtcbiAgICBcbiAgICBcbiAgICAgICAgICAgIGZvciAoIHZhciBrZXkgaW4gcmF3Q2xpcHMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHJhd0NsaXAgPSByYXdDbGlwc1sga2V5IF07XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGNsaXAgPSBhZGRDbGlwKCByYXdDbGlwICk7XG4gICAgXG4gICAgICAgICAgICAgICAgc2NlbmVHcmFwaC5hbmltYXRpb25zLnB1c2goIGNsaXAgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBhZGRDbGlwKCByYXdDbGlwICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHRyYWNrcyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgcmF3Q2xpcC5sYXllci5mb3JFYWNoKCBmdW5jdGlvbiAoIHJhd1RyYWNrcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB0cmFja3MgPSB0cmFja3MuY29uY2F0KCBnZW5lcmF0ZVRyYWNrcyggcmF3VHJhY2tzICkgKTtcbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBuZXcgVEhSRUUuQW5pbWF0aW9uQ2xpcCggcmF3Q2xpcC5uYW1lLCAtIDEsIHRyYWNrcyApO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlVHJhY2tzKCByYXdUcmFja3MgKSB7XG4gICAgXG4gICAgICAgICAgICB2YXIgdHJhY2tzID0gW107XG4gICAgXG4gICAgICAgICAgICBpZiAoIHJhd1RyYWNrcy5UICE9PSB1bmRlZmluZWQgJiYgT2JqZWN0LmtleXMoIHJhd1RyYWNrcy5ULmN1cnZlcyApLmxlbmd0aCA+IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uVHJhY2sgPSBnZW5lcmF0ZVZlY3RvclRyYWNrKCByYXdUcmFja3MubW9kZWxOYW1lLCByYXdUcmFja3MuVC5jdXJ2ZXMsIHJhd1RyYWNrcy5pbml0aWFsUG9zaXRpb24sICdwb3NpdGlvbicgKTtcbiAgICAgICAgICAgICAgICBpZiAoIHBvc2l0aW9uVHJhY2sgIT09IHVuZGVmaW5lZCApIHRyYWNrcy5wdXNoKCBwb3NpdGlvblRyYWNrICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBpZiAoIHJhd1RyYWNrcy5SICE9PSB1bmRlZmluZWQgJiYgT2JqZWN0LmtleXMoIHJhd1RyYWNrcy5SLmN1cnZlcyApLmxlbmd0aCA+IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHJvdGF0aW9uVHJhY2sgPSBnZW5lcmF0ZVJvdGF0aW9uVHJhY2soIHJhd1RyYWNrcy5tb2RlbE5hbWUsIHJhd1RyYWNrcy5SLmN1cnZlcywgcmF3VHJhY2tzLmluaXRpYWxSb3RhdGlvbiwgcmF3VHJhY2tzLnByZVJvdGF0aW9ucyApO1xuICAgICAgICAgICAgICAgIGlmICggcm90YXRpb25UcmFjayAhPT0gdW5kZWZpbmVkICkgdHJhY2tzLnB1c2goIHJvdGF0aW9uVHJhY2sgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGlmICggcmF3VHJhY2tzLlMgIT09IHVuZGVmaW5lZCAmJiBPYmplY3Qua2V5cyggcmF3VHJhY2tzLlMuY3VydmVzICkubGVuZ3RoID4gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGVUcmFjayA9IGdlbmVyYXRlVmVjdG9yVHJhY2soIHJhd1RyYWNrcy5tb2RlbE5hbWUsIHJhd1RyYWNrcy5TLmN1cnZlcywgcmF3VHJhY2tzLmluaXRpYWxTY2FsZSwgJ3NjYWxlJyApO1xuICAgICAgICAgICAgICAgIGlmICggc2NhbGVUcmFjayAhPT0gdW5kZWZpbmVkICkgdHJhY2tzLnB1c2goIHNjYWxlVHJhY2sgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiB0cmFja3M7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVWZWN0b3JUcmFjayggbW9kZWxOYW1lLCBjdXJ2ZXMsIGluaXRpYWxWYWx1ZSwgdHlwZSApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciB0aW1lcyA9IGdldFRpbWVzRm9yQWxsQXhlcyggY3VydmVzICk7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gZ2V0S2V5ZnJhbWVUcmFja1ZhbHVlcyggdGltZXMsIGN1cnZlcywgaW5pdGlhbFZhbHVlICk7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gbmV3IFRIUkVFLlZlY3RvcktleWZyYW1lVHJhY2soIG1vZGVsTmFtZSArICcuJyArIHR5cGUsIHRpbWVzLCB2YWx1ZXMgKTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZVJvdGF0aW9uVHJhY2soIG1vZGVsTmFtZSwgY3VydmVzLCBpbml0aWFsVmFsdWUsIHByZVJvdGF0aW9ucyApIHtcbiAgICBcbiAgICAgICAgICAgIGlmICggY3VydmVzLnggIT09IHVuZGVmaW5lZCApIGN1cnZlcy54LnZhbHVlcyA9IGN1cnZlcy54LnZhbHVlcy5tYXAoIFRIUkVFLk1hdGguZGVnVG9SYWQgKTtcbiAgICAgICAgICAgIGlmICggY3VydmVzLnkgIT09IHVuZGVmaW5lZCApIGN1cnZlcy55LnZhbHVlcyA9IGN1cnZlcy55LnZhbHVlcy5tYXAoIFRIUkVFLk1hdGguZGVnVG9SYWQgKTtcbiAgICAgICAgICAgIGlmICggY3VydmVzLnogIT09IHVuZGVmaW5lZCApIGN1cnZlcy56LnZhbHVlcyA9IGN1cnZlcy56LnZhbHVlcy5tYXAoIFRIUkVFLk1hdGguZGVnVG9SYWQgKTtcbiAgICBcbiAgICAgICAgICAgIHZhciB0aW1lcyA9IGdldFRpbWVzRm9yQWxsQXhlcyggY3VydmVzICk7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gZ2V0S2V5ZnJhbWVUcmFja1ZhbHVlcyggdGltZXMsIGN1cnZlcywgaW5pdGlhbFZhbHVlICk7XG4gICAgXG4gICAgICAgICAgICBpZiAoIHByZVJvdGF0aW9ucyAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHByZVJvdGF0aW9ucyA9IHByZVJvdGF0aW9ucy5tYXAoIFRIUkVFLk1hdGguZGVnVG9SYWQgKTtcbiAgICAgICAgICAgICAgICBwcmVSb3RhdGlvbnMucHVzaCggJ1pZWCcgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBwcmVSb3RhdGlvbnMgPSBuZXcgVEhSRUUuRXVsZXIoKS5mcm9tQXJyYXkoIHByZVJvdGF0aW9ucyApO1xuICAgICAgICAgICAgICAgIHByZVJvdGF0aW9ucyA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCkuc2V0RnJvbUV1bGVyKCBwcmVSb3RhdGlvbnMgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHZhciBxdWF0ZXJuaW9uID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcbiAgICAgICAgICAgIHZhciBldWxlciA9IG5ldyBUSFJFRS5FdWxlcigpO1xuICAgIFxuICAgICAgICAgICAgdmFyIHF1YXRlcm5pb25WYWx1ZXMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBldWxlci5zZXQoIHZhbHVlc1sgaSBdLCB2YWx1ZXNbIGkgKyAxIF0sIHZhbHVlc1sgaSArIDIgXSwgJ1pZWCcgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBxdWF0ZXJuaW9uLnNldEZyb21FdWxlciggZXVsZXIgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHByZVJvdGF0aW9ucyAhPT0gdW5kZWZpbmVkIClxdWF0ZXJuaW9uLnByZW11bHRpcGx5KCBwcmVSb3RhdGlvbnMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBxdWF0ZXJuaW9uLnRvQXJyYXkoIHF1YXRlcm5pb25WYWx1ZXMsICggaSAvIDMgKSAqIDQgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBuZXcgVEhSRUUuUXVhdGVybmlvbktleWZyYW1lVHJhY2soIG1vZGVsTmFtZSArICcucXVhdGVybmlvbicsIHRpbWVzLCBxdWF0ZXJuaW9uVmFsdWVzICk7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gZ2V0S2V5ZnJhbWVUcmFja1ZhbHVlcyggdGltZXMsIGN1cnZlcywgaW5pdGlhbFZhbHVlICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHByZXZWYWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICBcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgIHZhciB4SW5kZXggPSAtIDE7XG4gICAgICAgICAgICB2YXIgeUluZGV4ID0gLSAxO1xuICAgICAgICAgICAgdmFyIHpJbmRleCA9IC0gMTtcbiAgICBcbiAgICAgICAgICAgIHRpbWVzLmZvckVhY2goIGZ1bmN0aW9uICggdGltZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGN1cnZlcy54ICkgeEluZGV4ID0gY3VydmVzLngudGltZXMuaW5kZXhPZiggdGltZSApO1xuICAgICAgICAgICAgICAgIGlmICggY3VydmVzLnkgKSB5SW5kZXggPSBjdXJ2ZXMueS50aW1lcy5pbmRleE9mKCB0aW1lICk7XG4gICAgICAgICAgICAgICAgaWYgKCBjdXJ2ZXMueiApIHpJbmRleCA9IGN1cnZlcy56LnRpbWVzLmluZGV4T2YoIHRpbWUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbiB4IHZhbHVlIGRlZmluZWQgZm9yIHRoaXMgZnJhbWUsIHVzZSB0aGF0XG4gICAgICAgICAgICAgICAgaWYgKCB4SW5kZXggIT09IC0gMSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHhWYWx1ZSA9IGN1cnZlcy54LnZhbHVlc1sgeEluZGV4IF07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKCB4VmFsdWUgKTtcbiAgICAgICAgICAgICAgICAgICAgcHJldlZhbHVlWyAwIF0gPSB4VmFsdWU7XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHVzZSB0aGUgeCB2YWx1ZSBmcm9tIHRoZSBwcmV2aW91cyBmcmFtZVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCggcHJldlZhbHVlWyAwIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCB5SW5kZXggIT09IC0gMSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHlWYWx1ZSA9IGN1cnZlcy55LnZhbHVlc1sgeUluZGV4IF07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKCB5VmFsdWUgKTtcbiAgICAgICAgICAgICAgICAgICAgcHJldlZhbHVlWyAxIF0gPSB5VmFsdWU7XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnB1c2goIHByZXZWYWx1ZVsgMSBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggekluZGV4ICE9PSAtIDEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciB6VmFsdWUgPSBjdXJ2ZXMuei52YWx1ZXNbIHpJbmRleCBdO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCggelZhbHVlICk7XG4gICAgICAgICAgICAgICAgICAgIHByZXZWYWx1ZVsgMiBdID0gelZhbHVlO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKCBwcmV2VmFsdWVbIDIgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gRm9yIGFsbCBhbmltYXRlZCBvYmplY3RzLCB0aW1lcyBhcmUgZGVmaW5lZCBzZXBhcmF0ZWx5IGZvciBlYWNoIGF4aXNcbiAgICAgICAgLy8gSGVyZSB3ZSdsbCBjb21iaW5lIHRoZSB0aW1lcyBpbnRvIG9uZSBzb3J0ZWQgYXJyYXkgd2l0aG91dCBkdXBsaWNhdGVzXG4gICAgICAgIGZ1bmN0aW9uIGdldFRpbWVzRm9yQWxsQXhlcyggY3VydmVzICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHRpbWVzID0gW107XG4gICAgXG4gICAgICAgICAgICAvLyBmaXJzdCBqb2luIHRvZ2V0aGVyIHRoZSB0aW1lcyBmb3IgZWFjaCBheGlzLCBpZiBkZWZpbmVkXG4gICAgICAgICAgICBpZiAoIGN1cnZlcy54ICE9PSB1bmRlZmluZWQgKSB0aW1lcyA9IHRpbWVzLmNvbmNhdCggY3VydmVzLngudGltZXMgKTtcbiAgICAgICAgICAgIGlmICggY3VydmVzLnkgIT09IHVuZGVmaW5lZCApIHRpbWVzID0gdGltZXMuY29uY2F0KCBjdXJ2ZXMueS50aW1lcyApO1xuICAgICAgICAgICAgaWYgKCBjdXJ2ZXMueiAhPT0gdW5kZWZpbmVkICkgdGltZXMgPSB0aW1lcy5jb25jYXQoIGN1cnZlcy56LnRpbWVzICk7XG4gICAgXG4gICAgICAgICAgICAvLyB0aGVuIHNvcnQgdGhlbSBhbmQgcmVtb3ZlIGR1cGxpY2F0ZXNcbiAgICAgICAgICAgIHRpbWVzID0gdGltZXMuc29ydCggZnVuY3Rpb24gKCBhLCBiICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBhIC0gYjtcbiAgICBcbiAgICAgICAgICAgIH0gKS5maWx0ZXIoIGZ1bmN0aW9uICggZWxlbSwgaW5kZXgsIGFycmF5ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBhcnJheS5pbmRleE9mKCBlbGVtICkgPT0gaW5kZXg7XG4gICAgXG4gICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gdGltZXM7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gcGFyc2UgYW4gRkJYIGZpbGUgaW4gQVNDSUkgZm9ybWF0XG4gICAgICAgIGZ1bmN0aW9uIFRleHRQYXJzZXIoKSB7fVxuICAgIFxuICAgICAgICBPYmplY3QuYXNzaWduKCBUZXh0UGFyc2VyLnByb3RvdHlwZSwge1xuICAgIFxuICAgICAgICAgICAgZ2V0UHJldk5vZGU6IGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ub2RlU3RhY2tbIHRoaXMuY3VycmVudEluZGVudCAtIDIgXTtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBnZXRDdXJyZW50Tm9kZTogZnVuY3Rpb24gKCkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5vZGVTdGFja1sgdGhpcy5jdXJyZW50SW5kZW50IC0gMSBdO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIGdldEN1cnJlbnRQcm9wOiBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFByb3A7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgcHVzaFN0YWNrOiBmdW5jdGlvbiAoIG5vZGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlU3RhY2sucHVzaCggbm9kZSApO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEluZGVudCArPSAxO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIHBvcFN0YWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlU3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50SW5kZW50IC09IDE7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgc2V0Q3VycmVudFByb3A6IGZ1bmN0aW9uICggdmFsLCBuYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFByb3AgPSB2YWw7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UHJvcE5hbWUgPSBuYW1lO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIHBhcnNlOiBmdW5jdGlvbiAoIHRleHQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50SW5kZW50ID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLmFsbE5vZGVzID0gbmV3IEZCWFRyZWUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVTdGFjayA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFByb3AgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQcm9wTmFtZSA9ICcnO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgc3BsaXQgPSB0ZXh0LnNwbGl0KCAnXFxuJyApO1xuICAgIFxuICAgICAgICAgICAgICAgIHNwbGl0LmZvckVhY2goIGZ1bmN0aW9uICggbGluZSwgaSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoQ29tbWVudCA9IGxpbmUubWF0Y2goIC9eW1xcc1xcdF0qOy8gKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoRW1wdHkgPSBsaW5lLm1hdGNoKCAvXltcXHNcXHRdKiQvICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggbWF0Y2hDb21tZW50IHx8IG1hdGNoRW1wdHkgKSByZXR1cm47XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaEJlZ2lubmluZyA9IGxpbmUubWF0Y2goICdeXFxcXHR7JyArIHNlbGYuY3VycmVudEluZGVudCArICd9KFxcXFx3Kyk6KC4qKXsnLCAnJyApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hQcm9wZXJ0eSA9IGxpbmUubWF0Y2goICdeXFxcXHR7JyArICggc2VsZi5jdXJyZW50SW5kZW50ICkgKyAnfShcXFxcdyspOltcXFxcc1xcXFx0XFxcXHJcXFxcbl0oLiopJyApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hFbmQgPSBsaW5lLm1hdGNoKCAnXlxcXFx0eycgKyAoIHNlbGYuY3VycmVudEluZGVudCAtIDEgKSArICd9fScgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBtYXRjaEJlZ2lubmluZyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucGFyc2VOb2RlQmVnaW4oIGxpbmUsIG1hdGNoQmVnaW5uaW5nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG1hdGNoUHJvcGVydHkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnBhcnNlTm9kZVByb3BlcnR5KCBsaW5lLCBtYXRjaFByb3BlcnR5LCBzcGxpdFsgKysgaSBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG1hdGNoRW5kICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wb3BTdGFjaygpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBsaW5lLm1hdGNoKCAvXlteXFxzXFx0fV0vICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsYXJnZSBhcnJheXMgYXJlIHNwbGl0IG92ZXIgbXVsdGlwbGUgbGluZXMgdGVybWluYXRlZCB3aXRoIGEgJywnIGNoYXJhY3RlclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBlbmNvdW50ZXJlZCB0aGUgbGluZSBuZWVkcyB0byBiZSBqb2luZWQgdG8gdGhlIHByZXZpb3VzIGxpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucGFyc2VOb2RlUHJvcGVydHlDb250aW51ZWQoIGxpbmUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hbGxOb2RlcztcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBwYXJzZU5vZGVCZWdpbjogZnVuY3Rpb24gKCBsaW5lLCBwcm9wZXJ0eSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbm9kZU5hbWUgPSBwcm9wZXJ0eVsgMSBdLnRyaW0oKS5yZXBsYWNlKCAvXlwiLywgJycgKS5yZXBsYWNlKCAvXCIkLywgJycgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbm9kZUF0dHJzID0gcHJvcGVydHlbIDIgXS5zcGxpdCggJywnICkubWFwKCBmdW5jdGlvbiAoIGF0dHIgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhdHRyLnRyaW0oKS5yZXBsYWNlKCAvXlwiLywgJycgKS5yZXBsYWNlKCAvXCIkLywgJycgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSB7IG5hbWU6IG5vZGVOYW1lIH07XG4gICAgICAgICAgICAgICAgdmFyIGF0dHJzID0gdGhpcy5wYXJzZU5vZGVBdHRyKCBub2RlQXR0cnMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudE5vZGUgPSB0aGlzLmdldEN1cnJlbnROb2RlKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gYSB0b3Agbm9kZVxuICAgICAgICAgICAgICAgIGlmICggdGhpcy5jdXJyZW50SW5kZW50ID09PSAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFsbE5vZGVzLmFkZCggbm9kZU5hbWUsIG5vZGUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBhIHN1Ym5vZGVcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHN1Ym5vZGUgYWxyZWFkeSBleGlzdHMsIGFwcGVuZCBpdFxuICAgICAgICAgICAgICAgICAgICBpZiAoIG5vZGVOYW1lIGluIGN1cnJlbnROb2RlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2UgUG9zZSBuZWVkcyBQb3NlTm9kZXMgYXMgYW4gYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbm9kZU5hbWUgPT09ICdQb3NlTm9kZScgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE5vZGUuUG9zZU5vZGUucHVzaCggbm9kZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggY3VycmVudE5vZGVbIG5vZGVOYW1lIF0uaWQgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZVsgbm9kZU5hbWUgXSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlWyBub2RlTmFtZSBdWyBjdXJyZW50Tm9kZVsgbm9kZU5hbWUgXS5pZCBdID0gY3VycmVudE5vZGVbIG5vZGVOYW1lIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGF0dHJzLmlkICE9PSAnJyApIGN1cnJlbnROb2RlWyBub2RlTmFtZSBdWyBhdHRycy5pZCBdID0gbm9kZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggdHlwZW9mIGF0dHJzLmlkID09PSAnbnVtYmVyJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlWyBub2RlTmFtZSBdID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZVsgbm9kZU5hbWUgXVsgYXR0cnMuaWQgXSA9IG5vZGU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIG5vZGVOYW1lICE9PSAnUHJvcGVydGllczcwJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggbm9kZU5hbWUgPT09ICdQb3NlTm9kZScgKVx0Y3VycmVudE5vZGVbIG5vZGVOYW1lIF0gPSBbIG5vZGUgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgY3VycmVudE5vZGVbIG5vZGVOYW1lIF0gPSBub2RlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggdHlwZW9mIGF0dHJzLmlkID09PSAnbnVtYmVyJyApIG5vZGUuaWQgPSBhdHRycy5pZDtcbiAgICAgICAgICAgICAgICBpZiAoIGF0dHJzLm5hbWUgIT09ICcnICkgbm9kZS5hdHRyTmFtZSA9IGF0dHJzLm5hbWU7XG4gICAgICAgICAgICAgICAgaWYgKCBhdHRycy50eXBlICE9PSAnJyApIG5vZGUuYXR0clR5cGUgPSBhdHRycy50eXBlO1xuICAgIFxuICAgICAgICAgICAgICAgIHRoaXMucHVzaFN0YWNrKCBub2RlICk7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgcGFyc2VOb2RlQXR0cjogZnVuY3Rpb24gKCBhdHRycyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSBhdHRyc1sgMCBdO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggYXR0cnNbIDAgXSAhPT0gJycgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlkID0gcGFyc2VJbnQoIGF0dHJzWyAwIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBpc05hTiggaWQgKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gYXR0cnNbIDAgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9ICcnLCB0eXBlID0gJyc7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBhdHRycy5sZW5ndGggPiAxICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBuYW1lID0gYXR0cnNbIDEgXS5yZXBsYWNlKCAvXihcXHcrKTo6LywgJycgKTtcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9IGF0dHJzWyAyIF07XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB7IGlkOiBpZCwgbmFtZTogbmFtZSwgdHlwZTogdHlwZSB9O1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIHBhcnNlTm9kZVByb3BlcnR5OiBmdW5jdGlvbiAoIGxpbmUsIHByb3BlcnR5LCBjb250ZW50TGluZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcHJvcE5hbWUgPSBwcm9wZXJ0eVsgMSBdLnJlcGxhY2UoIC9eXCIvLCAnJyApLnJlcGxhY2UoIC9cIiQvLCAnJyApLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcGVydHlbIDIgXS5yZXBsYWNlKCAvXlwiLywgJycgKS5yZXBsYWNlKCAvXCIkLywgJycgKS50cmltKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gZm9yIHNwZWNpYWwgY2FzZTogYmFzZTY0IGltYWdlIGRhdGEgZm9sbG93cyBcIkNvbnRlbnQ6ICxcIiBsaW5lXG4gICAgICAgICAgICAgICAgLy9cdENvbnRlbnQ6ICxcbiAgICAgICAgICAgICAgICAvL1x0IFwiLzlqLzRSRGFSWGhwWmdBQVRVMEEuLi5cIlxuICAgICAgICAgICAgICAgIGlmICggcHJvcE5hbWUgPT09ICdDb250ZW50JyAmJiBwcm9wVmFsdWUgPT09ICcsJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcHJvcFZhbHVlID0gY29udGVudExpbmUucmVwbGFjZSggL1wiL2csICcnICkucmVwbGFjZSggLywkLywgJycgKS50cmltKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Tm9kZSA9IHRoaXMuZ2V0Q3VycmVudE5vZGUoKTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50TmFtZSA9IGN1cnJlbnROb2RlLm5hbWU7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBwYXJlbnROYW1lID09PSAnUHJvcGVydGllczcwJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJzZU5vZGVTcGVjaWFsUHJvcGVydHkoIGxpbmUsIHByb3BOYW1lLCBwcm9wVmFsdWUgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBDb25uZWN0aW9uc1xuICAgICAgICAgICAgICAgIGlmICggcHJvcE5hbWUgPT09ICdDJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbm5Qcm9wcyA9IHByb3BWYWx1ZS5zcGxpdCggJywnICkuc2xpY2UoIDEgKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyb20gPSBwYXJzZUludCggY29ublByb3BzWyAwIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvID0gcGFyc2VJbnQoIGNvbm5Qcm9wc1sgMSBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN0ID0gcHJvcFZhbHVlLnNwbGl0KCAnLCcgKS5zbGljZSggMyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXN0ID0gcmVzdC5tYXAoIGZ1bmN0aW9uICggZWxlbSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLnRyaW0oKS5yZXBsYWNlKCAvXlwiLywgJycgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBwcm9wTmFtZSA9ICdjb25uZWN0aW9ucyc7XG4gICAgICAgICAgICAgICAgICAgIHByb3BWYWx1ZSA9IFsgZnJvbSwgdG8gXTtcbiAgICAgICAgICAgICAgICAgICAgYXBwZW5kKCBwcm9wVmFsdWUsIHJlc3QgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjdXJyZW50Tm9kZVsgcHJvcE5hbWUgXSA9PT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE5vZGVbIHByb3BOYW1lIF0gPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBOb2RlXG4gICAgICAgICAgICAgICAgaWYgKCBwcm9wTmFtZSA9PT0gJ05vZGUnICkgY3VycmVudE5vZGUuaWQgPSBwcm9wVmFsdWU7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gY29ubmVjdGlvbnNcbiAgICAgICAgICAgICAgICBpZiAoIHByb3BOYW1lIGluIGN1cnJlbnROb2RlICYmIEFycmF5LmlzQXJyYXkoIGN1cnJlbnROb2RlWyBwcm9wTmFtZSBdICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlWyBwcm9wTmFtZSBdLnB1c2goIHByb3BWYWx1ZSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggcHJvcE5hbWUgIT09ICdhJyApIGN1cnJlbnROb2RlWyBwcm9wTmFtZSBdID0gcHJvcFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGN1cnJlbnROb2RlLmEgPSBwcm9wVmFsdWU7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudFByb3AoIGN1cnJlbnROb2RlLCBwcm9wTmFtZSApO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIGNvbnZlcnQgc3RyaW5nIHRvIGFycmF5LCB1bmxlc3MgaXQgZW5kcyBpbiAnLCcgaW4gd2hpY2ggY2FzZSBtb3JlIHdpbGwgYmUgYWRkZWQgdG8gaXRcbiAgICAgICAgICAgICAgICBpZiAoIHByb3BOYW1lID09PSAnYScgJiYgcHJvcFZhbHVlLnNsaWNlKCAtIDEgKSAhPT0gJywnICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZS5hID0gcGFyc2VOdW1iZXJBcnJheSggcHJvcFZhbHVlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIHBhcnNlTm9kZVByb3BlcnR5Q29udGludWVkOiBmdW5jdGlvbiAoIGxpbmUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnROb2RlID0gdGhpcy5nZXRDdXJyZW50Tm9kZSgpO1xuICAgIFxuICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlLmEgKz0gbGluZTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgbGluZSBkb2Vzbid0IGVuZCBpbiAnLCcgd2UgaGF2ZSByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIHByb3BlcnR5IHZhbHVlXG4gICAgICAgICAgICAgICAgLy8gc28gY29udmVydCB0aGUgc3RyaW5nIHRvIGFuIGFycmF5XG4gICAgICAgICAgICAgICAgaWYgKCBsaW5lLnNsaWNlKCAtIDEgKSAhPT0gJywnICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZS5hID0gcGFyc2VOdW1iZXJBcnJheSggY3VycmVudE5vZGUuYSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAvLyBwYXJzZSBcIlByb3BlcnR5NzBcIlxuICAgICAgICAgICAgcGFyc2VOb2RlU3BlY2lhbFByb3BlcnR5OiBmdW5jdGlvbiAoIGxpbmUsIHByb3BOYW1lLCBwcm9wVmFsdWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gc3BsaXQgdGhpc1xuICAgICAgICAgICAgICAgIC8vIFA6IFwiTGNsIFNjYWxpbmdcIiwgXCJMY2wgU2NhbGluZ1wiLCBcIlwiLCBcIkFcIiwxLDEsMVxuICAgICAgICAgICAgICAgIC8vIGludG8gYXJyYXkgbGlrZSBiZWxvd1xuICAgICAgICAgICAgICAgIC8vIFtcIkxjbCBTY2FsaW5nXCIsIFwiTGNsIFNjYWxpbmdcIiwgXCJcIiwgXCJBXCIsIFwiMSwxLDFcIiBdXG4gICAgICAgICAgICAgICAgdmFyIHByb3BzID0gcHJvcFZhbHVlLnNwbGl0KCAnXCIsJyApLm1hcCggZnVuY3Rpb24gKCBwcm9wICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcC50cmltKCkucmVwbGFjZSggL15cXFwiLywgJycgKS5yZXBsYWNlKCAvXFxzLywgJ18nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfSApO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBpbm5lclByb3BOYW1lID0gcHJvcHNbIDAgXTtcbiAgICAgICAgICAgICAgICB2YXIgaW5uZXJQcm9wVHlwZTEgPSBwcm9wc1sgMSBdO1xuICAgICAgICAgICAgICAgIHZhciBpbm5lclByb3BUeXBlMiA9IHByb3BzWyAyIF07XG4gICAgICAgICAgICAgICAgdmFyIGlubmVyUHJvcEZsYWcgPSBwcm9wc1sgMyBdO1xuICAgICAgICAgICAgICAgIHZhciBpbm5lclByb3BWYWx1ZSA9IHByb3BzWyA0IF07XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gY2FzdCB2YWx1ZXMgd2hlcmUgbmVlZGVkLCBvdGhlcndpc2UgbGVhdmUgYXMgc3RyaW5nc1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoIGlubmVyUHJvcFR5cGUxICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdpbnQnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdlbnVtJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9vbCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1VMb25nTG9uZyc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RvdWJsZSc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ051bWJlcic6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0ZpZWxkT2ZWaWV3JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyUHJvcFZhbHVlID0gcGFyc2VGbG9hdCggaW5uZXJQcm9wVmFsdWUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdDb2xvcic6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ0NvbG9yUkdCJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnVmVjdG9yM0QnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdMY2xfVHJhbnNsYXRpb24nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdMY2xfUm90YXRpb24nOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdMY2xfU2NhbGluZyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBpbm5lclByb3BWYWx1ZSA9IHBhcnNlTnVtYmVyQXJyYXkoIGlubmVyUHJvcFZhbHVlICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gQ0FVVElPTjogdGhlc2UgcHJvcHMgbXVzdCBhcHBlbmQgdG8gcGFyZW50J3MgcGFyZW50XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRQcmV2Tm9kZSgpWyBpbm5lclByb3BOYW1lIF0gPSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICd0eXBlJzogaW5uZXJQcm9wVHlwZTEsXG4gICAgICAgICAgICAgICAgICAgICd0eXBlMic6IGlubmVyUHJvcFR5cGUyLFxuICAgICAgICAgICAgICAgICAgICAnZmxhZyc6IGlubmVyUHJvcEZsYWcsXG4gICAgICAgICAgICAgICAgICAgICd2YWx1ZSc6IGlubmVyUHJvcFZhbHVlXG4gICAgXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICB0aGlzLnNldEN1cnJlbnRQcm9wKCB0aGlzLmdldFByZXZOb2RlKCksIGlubmVyUHJvcE5hbWUgKTtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgLy8gUGFyc2UgYW4gRkJYIGZpbGUgaW4gQmluYXJ5IGZvcm1hdFxuICAgICAgICBmdW5jdGlvbiBCaW5hcnlQYXJzZXIoKSB7fVxuICAgIFxuICAgICAgICBPYmplY3QuYXNzaWduKCBCaW5hcnlQYXJzZXIucHJvdG90eXBlLCB7XG4gICAgXG4gICAgICAgICAgICBwYXJzZTogZnVuY3Rpb24gKCBidWZmZXIgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBCaW5hcnlSZWFkZXIoIGJ1ZmZlciApO1xuICAgICAgICAgICAgICAgIHJlYWRlci5za2lwKCAyMyApOyAvLyBza2lwIG1hZ2ljIDIzIGJ5dGVzXG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHZlcnNpb24gPSByZWFkZXIuZ2V0VWludDMyKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdUSFJFRS5GQlhMb2FkZXI6IEZCWCBiaW5hcnkgdmVyc2lvbjogJyArIHZlcnNpb24gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYWxsTm9kZXMgPSBuZXcgRkJYVHJlZSgpO1xuICAgIFxuICAgICAgICAgICAgICAgIHdoaWxlICggISB0aGlzLmVuZE9mQ29udGVudCggcmVhZGVyICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5wYXJzZU5vZGUoIHJlYWRlciwgdmVyc2lvbiApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIG5vZGUgIT09IG51bGwgKSBhbGxOb2Rlcy5hZGQoIG5vZGUubmFtZSwgbm9kZSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxsTm9kZXM7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgcmVhZGVyIGhhcyByZWFjaGVkIHRoZSBlbmQgb2YgY29udGVudC5cbiAgICAgICAgICAgIGVuZE9mQ29udGVudDogZnVuY3Rpb24gKCByZWFkZXIgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gZm9vdGVyIHNpemU6IDE2MGJ5dGVzICsgMTYtYnl0ZSBhbGlnbm1lbnQgcGFkZGluZ1xuICAgICAgICAgICAgICAgIC8vIC0gMTZieXRlczogbWFnaWNcbiAgICAgICAgICAgICAgICAvLyAtIHBhZGRpbmcgdGlsIDE2LWJ5dGUgYWxpZ25tZW50IChhdCBsZWFzdCAxYnl0ZT8pXG4gICAgICAgICAgICAgICAgLy9cdChzZWVtcyBsaWtlIHNvbWUgZXhwb3J0ZXJzIGVtYmVkIGZpeGVkIDE1IG9yIDE2Ynl0ZXM/KVxuICAgICAgICAgICAgICAgIC8vIC0gNGJ5dGVzOiBtYWdpY1xuICAgICAgICAgICAgICAgIC8vIC0gNGJ5dGVzOiB2ZXJzaW9uXG4gICAgICAgICAgICAgICAgLy8gLSAxMjBieXRlczogemVyb1xuICAgICAgICAgICAgICAgIC8vIC0gMTZieXRlczogbWFnaWNcbiAgICAgICAgICAgICAgICBpZiAoIHJlYWRlci5zaXplKCkgJSAxNiA9PT0gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICggKCByZWFkZXIuZ2V0T2Zmc2V0KCkgKyAxNjAgKyAxNiApICYgfiAweGYgKSA+PSByZWFkZXIuc2l6ZSgpO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIuZ2V0T2Zmc2V0KCkgKyAxNjAgKyAxNiA+PSByZWFkZXIuc2l6ZSgpO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAvLyByZWN1cnNpdmVseSBwYXJzZSBub2RlcyB1bnRpbCB0aGUgZW5kIG9mIHRoZSBmaWxlIGlzIHJlYWNoZWRcbiAgICAgICAgICAgIHBhcnNlTm9kZTogZnVuY3Rpb24gKCByZWFkZXIsIHZlcnNpb24gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBUaGUgZmlyc3QgdGhyZWUgZGF0YSBzaXplcyBkZXBlbmRzIG9uIHZlcnNpb24uXG4gICAgICAgICAgICAgICAgdmFyIGVuZE9mZnNldCA9ICggdmVyc2lvbiA+PSA3NTAwICkgPyByZWFkZXIuZ2V0VWludDY0KCkgOiByZWFkZXIuZ2V0VWludDMyKCk7XG4gICAgICAgICAgICAgICAgdmFyIG51bVByb3BlcnRpZXMgPSAoIHZlcnNpb24gPj0gNzUwMCApID8gcmVhZGVyLmdldFVpbnQ2NCgpIDogcmVhZGVyLmdldFVpbnQzMigpO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIG5vdGU6IGRvIG5vdCByZW1vdmUgdGhpcyBldmVuIGlmIHlvdSBnZXQgYSBsaW50ZXIgd2FybmluZyBhcyBpdCBtb3ZlcyB0aGUgYnVmZmVyIGZvcndhcmRcbiAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHlMaXN0TGVuID0gKCB2ZXJzaW9uID49IDc1MDAgKSA/IHJlYWRlci5nZXRVaW50NjQoKSA6IHJlYWRlci5nZXRVaW50MzIoKTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbmFtZUxlbiA9IHJlYWRlci5nZXRVaW50OCgpO1xuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gcmVhZGVyLmdldFN0cmluZyggbmFtZUxlbiApO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIFJlZ2FyZHMgdGhpcyBub2RlIGFzIE5VTEwtcmVjb3JkIGlmIGVuZE9mZnNldCBpcyB6ZXJvXG4gICAgICAgICAgICAgICAgaWYgKCBlbmRPZmZzZXQgPT09IDAgKSByZXR1cm4gbnVsbDtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHlMaXN0ID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgbnVtUHJvcGVydGllczsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlMaXN0LnB1c2goIHRoaXMucGFyc2VQcm9wZXJ0eSggcmVhZGVyICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gUmVnYXJkcyB0aGUgZmlyc3QgdGhyZWUgZWxlbWVudHMgaW4gcHJvcGVydHlMaXN0IGFzIGlkLCBhdHRyTmFtZSwgYW5kIGF0dHJUeXBlXG4gICAgICAgICAgICAgICAgdmFyIGlkID0gcHJvcGVydHlMaXN0Lmxlbmd0aCA+IDAgPyBwcm9wZXJ0eUxpc3RbIDAgXSA6ICcnO1xuICAgICAgICAgICAgICAgIHZhciBhdHRyTmFtZSA9IHByb3BlcnR5TGlzdC5sZW5ndGggPiAxID8gcHJvcGVydHlMaXN0WyAxIF0gOiAnJztcbiAgICAgICAgICAgICAgICB2YXIgYXR0clR5cGUgPSBwcm9wZXJ0eUxpc3QubGVuZ3RoID4gMiA/IHByb3BlcnR5TGlzdFsgMiBdIDogJyc7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBub2RlIHJlcHJlc2VudHMganVzdCBhIHNpbmdsZSBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgIC8vIGxpa2UgKG5hbWUsIDApIHNldCBvciAobmFtZTIsIFswLCAxLCAyXSkgc2V0IG9mIHtuYW1lOiAwLCBuYW1lMjogWzAsIDEsIDJdfVxuICAgICAgICAgICAgICAgIG5vZGUuc2luZ2xlUHJvcGVydHkgPSAoIG51bVByb3BlcnRpZXMgPT09IDEgJiYgcmVhZGVyLmdldE9mZnNldCgpID09PSBlbmRPZmZzZXQgKSA/IHRydWUgOiBmYWxzZTtcbiAgICBcbiAgICAgICAgICAgICAgICB3aGlsZSAoIGVuZE9mZnNldCA+IHJlYWRlci5nZXRPZmZzZXQoKSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1Yk5vZGUgPSB0aGlzLnBhcnNlTm9kZSggcmVhZGVyLCB2ZXJzaW9uICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggc3ViTm9kZSAhPT0gbnVsbCApIHRoaXMucGFyc2VTdWJOb2RlKCBuYW1lLCBub2RlLCBzdWJOb2RlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIG5vZGUucHJvcGVydHlMaXN0ID0gcHJvcGVydHlMaXN0OyAvLyByYXcgcHJvcGVydHkgbGlzdCB1c2VkIGJ5IHBhcmVudFxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggdHlwZW9mIGlkID09PSAnbnVtYmVyJyApIG5vZGUuaWQgPSBpZDtcbiAgICAgICAgICAgICAgICBpZiAoIGF0dHJOYW1lICE9PSAnJyApIG5vZGUuYXR0ck5hbWUgPSBhdHRyTmFtZTtcbiAgICAgICAgICAgICAgICBpZiAoIGF0dHJUeXBlICE9PSAnJyApIG5vZGUuYXR0clR5cGUgPSBhdHRyVHlwZTtcbiAgICAgICAgICAgICAgICBpZiAoIG5hbWUgIT09ICcnICkgbm9kZS5uYW1lID0gbmFtZTtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBwYXJzZVN1Yk5vZGU6IGZ1bmN0aW9uICggbmFtZSwgbm9kZSwgc3ViTm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2U6IGNoaWxkIG5vZGUgaXMgc2luZ2xlIHByb3BlcnR5XG4gICAgICAgICAgICAgICAgaWYgKCBzdWJOb2RlLnNpbmdsZVByb3BlcnR5ID09PSB0cnVlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBzdWJOb2RlLnByb3BlcnR5TGlzdFsgMCBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlWyBzdWJOb2RlLm5hbWUgXSA9IHN1Yk5vZGU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJOb2RlLmEgPSB2YWx1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVbIHN1Yk5vZGUubmFtZSBdID0gdmFsdWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBuYW1lID09PSAnQ29ubmVjdGlvbnMnICYmIHN1Yk5vZGUubmFtZSA9PT0gJ0MnICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3ViTm9kZS5wcm9wZXJ0eUxpc3QuZm9yRWFjaCggZnVuY3Rpb24gKCBwcm9wZXJ0eSwgaSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpcnN0IENvbm5lY3Rpb24gaXMgRkJYIHR5cGUgKE9PLCBPUCwgZXRjLikuIFdlJ2xsIGRpc2NhcmQgdGhlc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggaSAhPT0gMCApIGFycmF5LnB1c2goIHByb3BlcnR5ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBub2RlLmNvbm5lY3Rpb25zID09PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmNvbm5lY3Rpb25zID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5jb25uZWN0aW9ucy5wdXNoKCBhcnJheSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHN1Yk5vZGUubmFtZSA9PT0gJ1Byb3BlcnRpZXM3MCcgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoIHN1Yk5vZGUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAga2V5cy5mb3JFYWNoKCBmdW5jdGlvbiAoIGtleSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVbIGtleSBdID0gc3ViTm9kZVsga2V5IF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBuYW1lID09PSAnUHJvcGVydGllczcwJyAmJiBzdWJOb2RlLm5hbWUgPT09ICdQJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlubmVyUHJvcE5hbWUgPSBzdWJOb2RlLnByb3BlcnR5TGlzdFsgMCBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5uZXJQcm9wVHlwZTEgPSBzdWJOb2RlLnByb3BlcnR5TGlzdFsgMSBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5uZXJQcm9wVHlwZTIgPSBzdWJOb2RlLnByb3BlcnR5TGlzdFsgMiBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5uZXJQcm9wRmxhZyA9IHN1Yk5vZGUucHJvcGVydHlMaXN0WyAzIF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbm5lclByb3BWYWx1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBpbm5lclByb3BOYW1lLmluZGV4T2YoICdMY2wgJyApID09PSAwICkgaW5uZXJQcm9wTmFtZSA9IGlubmVyUHJvcE5hbWUucmVwbGFjZSggJ0xjbCAnLCAnTGNsXycgKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBpbm5lclByb3BUeXBlMS5pbmRleE9mKCAnTGNsICcgKSA9PT0gMCApIGlubmVyUHJvcFR5cGUxID0gaW5uZXJQcm9wVHlwZTEucmVwbGFjZSggJ0xjbCAnLCAnTGNsXycgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBpbm5lclByb3BUeXBlMSA9PT0gJ0NvbG9yJyB8fCBpbm5lclByb3BUeXBlMSA9PT0gJ0NvbG9yUkdCJyB8fCBpbm5lclByb3BUeXBlMSA9PT0gJ1ZlY3RvcicgfHwgaW5uZXJQcm9wVHlwZTEgPT09ICdWZWN0b3IzRCcgfHwgaW5uZXJQcm9wVHlwZTEuaW5kZXhPZiggJ0xjbF8nICkgPT09IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpbm5lclByb3BWYWx1ZSA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJOb2RlLnByb3BlcnR5TGlzdFsgNCBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk5vZGUucHJvcGVydHlMaXN0WyA1IF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTm9kZS5wcm9wZXJ0eUxpc3RbIDYgXVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlubmVyUHJvcFZhbHVlID0gc3ViTm9kZS5wcm9wZXJ0eUxpc3RbIDQgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIHdpbGwgYmUgY29waWVkIHRvIHBhcmVudCwgc2VlIGFib3ZlXG4gICAgICAgICAgICAgICAgICAgIG5vZGVbIGlubmVyUHJvcE5hbWUgXSA9IHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogaW5uZXJQcm9wVHlwZTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAndHlwZTInOiBpbm5lclByb3BUeXBlMixcbiAgICAgICAgICAgICAgICAgICAgICAgICdmbGFnJzogaW5uZXJQcm9wRmxhZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd2YWx1ZSc6IGlubmVyUHJvcFZhbHVlXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggbm9kZVsgc3ViTm9kZS5uYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB0eXBlb2Ygc3ViTm9kZS5pZCA9PT0gJ251bWJlcicgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlWyBzdWJOb2RlLm5hbWUgXSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVsgc3ViTm9kZS5uYW1lIF1bIHN1Yk5vZGUuaWQgXSA9IHN1Yk5vZGU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlWyBzdWJOb2RlLm5hbWUgXSA9IHN1Yk5vZGU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIHN1Yk5vZGUubmFtZSA9PT0gJ1Bvc2VOb2RlJyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggISBBcnJheS5pc0FycmF5KCBub2RlWyBzdWJOb2RlLm5hbWUgXSApICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVbIHN1Yk5vZGUubmFtZSBdID0gWyBub2RlWyBzdWJOb2RlLm5hbWUgXSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVsgc3ViTm9kZS5uYW1lIF0ucHVzaCggc3ViTm9kZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBub2RlWyBzdWJOb2RlLm5hbWUgXVsgc3ViTm9kZS5pZCBdID09PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlWyBzdWJOb2RlLm5hbWUgXVsgc3ViTm9kZS5pZCBdID0gc3ViTm9kZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBwYXJzZVByb3BlcnR5OiBmdW5jdGlvbiAoIHJlYWRlciApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHJlYWRlci5nZXRTdHJpbmcoIDEgKTtcbiAgICBcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKCB0eXBlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdDJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIuZ2V0Qm9vbGVhbigpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIuZ2V0RmxvYXQ2NCgpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdGJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIuZ2V0RmxvYXQzMigpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdJJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIuZ2V0SW50MzIoKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnTCc6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVhZGVyLmdldEludDY0KCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1InOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHJlYWRlci5nZXRVaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIuZ2V0QXJyYXlCdWZmZXIoIGxlbmd0aCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdTJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSByZWFkZXIuZ2V0VWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVhZGVyLmdldFN0cmluZyggbGVuZ3RoICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ1knOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5nZXRJbnQxNigpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdiJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYyc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdmJzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnaSc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2wnOlxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFycmF5TGVuZ3RoID0gcmVhZGVyLmdldFVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVuY29kaW5nID0gcmVhZGVyLmdldFVpbnQzMigpOyAvLyAwOiBub24tY29tcHJlc3NlZCwgMTogY29tcHJlc3NlZFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbXByZXNzZWRMZW5ndGggPSByZWFkZXIuZ2V0VWludDMyKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGVuY29kaW5nID09PSAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIHR5cGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2InOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIuZ2V0Qm9vbGVhbkFycmF5KCBhcnJheUxlbmd0aCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIuZ2V0RmxvYXQ2NEFycmF5KCBhcnJheUxlbmd0aCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIuZ2V0RmxvYXQzMkFycmF5KCBhcnJheUxlbmd0aCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdpJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIuZ2V0SW50MzJBcnJheSggYXJyYXlMZW5ndGggKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVhZGVyLmdldEludDY0QXJyYXkoIGFycmF5TGVuZ3RoICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB3aW5kb3cuWmxpYiA9PT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoICdUSFJFRS5GQlhMb2FkZXI6IEV4dGVybmFsIGxpYnJhcnkgSW5mbGF0ZS5taW4uanMgcmVxdWlyZWQsIG9idGFpbiBvciBpbXBvcnQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vaW1heWEvemxpYi5qcycgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmZsYXRlID0gbmV3IFpsaWIuSW5mbGF0ZSggbmV3IFVpbnQ4QXJyYXkoIHJlYWRlci5nZXRBcnJheUJ1ZmZlciggY29tcHJlc3NlZExlbmd0aCApICkgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlYWRlcjIgPSBuZXcgQmluYXJ5UmVhZGVyKCBpbmZsYXRlLmRlY29tcHJlc3MoKS5idWZmZXIgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIHR5cGUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIyLmdldEJvb2xlYW5BcnJheSggYXJyYXlMZW5ndGggKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRlcjIuZ2V0RmxvYXQ2NEFycmF5KCBhcnJheUxlbmd0aCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2YnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVhZGVyMi5nZXRGbG9hdDMyQXJyYXkoIGFycmF5TGVuZ3RoICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIyLmdldEludDMyQXJyYXkoIGFycmF5TGVuZ3RoICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkZXIyLmdldEludDY0QXJyYXkoIGFycmF5TGVuZ3RoICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5GQlhMb2FkZXI6IFVua25vd24gcHJvcGVydHkgdHlwZSAnICsgdHlwZSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgfSApO1xuICAgIFxuICAgIFxuICAgICAgICBmdW5jdGlvbiBCaW5hcnlSZWFkZXIoIGJ1ZmZlciwgbGl0dGxlRW5kaWFuICkge1xuICAgIFxuICAgICAgICAgICAgdGhpcy5kdiA9IG5ldyBEYXRhVmlldyggYnVmZmVyICk7XG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgICAgICAgICB0aGlzLmxpdHRsZUVuZGlhbiA9ICggbGl0dGxlRW5kaWFuICE9PSB1bmRlZmluZWQgKSA/IGxpdHRsZUVuZGlhbiA6IHRydWU7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgT2JqZWN0LmFzc2lnbiggQmluYXJ5UmVhZGVyLnByb3RvdHlwZSwge1xuICAgIFxuICAgICAgICAgICAgZ2V0T2Zmc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0O1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIHNpemU6IGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kdi5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBza2lwOiBmdW5jdGlvbiAoIGxlbmd0aCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCArPSBsZW5ndGg7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgLy8gc2VlbXMgbGlrZSB0cnVlL2ZhbHNlIHJlcHJlc2VudGF0aW9uIGRlcGVuZHMgb24gZXhwb3J0ZXIuXG4gICAgICAgICAgICAvLyB0cnVlOiAxIG9yICdZJyg9MHg1OSksIGZhbHNlOiAwIG9yICdUJyg9MHg1NClcbiAgICAgICAgICAgIC8vIHRoZW4gc2VlcyBMU0IuXG4gICAgICAgICAgICBnZXRCb29sZWFuOiBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuICggdGhpcy5nZXRVaW50OCgpICYgMSApID09PSAxO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIGdldEJvb2xlYW5BcnJheTogZnVuY3Rpb24gKCBzaXplICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBhID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgYS5wdXNoKCB0aGlzLmdldEJvb2xlYW4oKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBnZXRVaW50ODogZnVuY3Rpb24gKCkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZHYuZ2V0VWludDgoIHRoaXMub2Zmc2V0ICk7XG4gICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQgKz0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgZ2V0SW50MTY6IGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLmR2LmdldEludDE2KCB0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4gKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCArPSAyO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBnZXRJbnQzMjogZnVuY3Rpb24gKCkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZHYuZ2V0SW50MzIoIHRoaXMub2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbiApO1xuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IDQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIGdldEludDMyQXJyYXk6IGZ1bmN0aW9uICggc2l6ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYSA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHNpemU7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGEucHVzaCggdGhpcy5nZXRJbnQzMigpICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIGdldFVpbnQzMjogZnVuY3Rpb24gKCkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZHYuZ2V0VWludDMyKCB0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4gKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAvLyBKYXZhU2NyaXB0IGRvZXNuJ3Qgc3VwcG9ydCA2NC1iaXQgaW50ZWdlciBzbyBjYWxjdWxhdGUgdGhpcyBoZXJlXG4gICAgICAgICAgICAvLyAxIDw8IDMyIHdpbGwgcmV0dXJuIDEgc28gdXNpbmcgbXVsdGlwbHkgb3BlcmF0aW9uIGluc3RlYWQgaGVyZS5cbiAgICAgICAgICAgIC8vIFRoZXJlJ3MgYSBwb3NzaWJpbGl0eSB0aGF0IHRoaXMgbWV0aG9kIHJldHVybnMgd3JvbmcgdmFsdWUgaWYgdGhlIHZhbHVlXG4gICAgICAgICAgICAvLyBpcyBvdXQgb2YgdGhlIHJhbmdlIGJldHdlZW4gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgYW5kIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSLlxuICAgICAgICAgICAgLy8gVE9ETzogc2FmZWx5IGhhbmRsZSA2NC1iaXQgaW50ZWdlclxuICAgICAgICAgICAgZ2V0SW50NjQ6IGZ1bmN0aW9uICgpIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbG93LCBoaWdoO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggdGhpcy5saXR0bGVFbmRpYW4gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGxvdyA9IHRoaXMuZ2V0VWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGhpZ2ggPSB0aGlzLmdldFVpbnQzMigpO1xuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGhpZ2ggPSB0aGlzLmdldFVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBsb3cgPSB0aGlzLmdldFVpbnQzMigpO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgbmVnYXRpdmUgdmFsdWVcbiAgICAgICAgICAgICAgICBpZiAoIGhpZ2ggJiAweDgwMDAwMDAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBoaWdoID0gfiBoaWdoICYgMHhGRkZGRkZGRjtcbiAgICAgICAgICAgICAgICAgICAgbG93ID0gfiBsb3cgJiAweEZGRkZGRkZGO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGxvdyA9PT0gMHhGRkZGRkZGRiApIGhpZ2ggPSAoIGhpZ2ggKyAxICkgJiAweEZGRkZGRkZGO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBsb3cgPSAoIGxvdyArIDEgKSAmIDB4RkZGRkZGRkY7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtICggaGlnaCAqIDB4MTAwMDAwMDAwICsgbG93ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBoaWdoICogMHgxMDAwMDAwMDAgKyBsb3c7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgZ2V0SW50NjRBcnJheTogZnVuY3Rpb24gKCBzaXplICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBhID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgYS5wdXNoKCB0aGlzLmdldEludDY0KCkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgLy8gTm90ZTogc2VlIGdldEludDY0KCkgY29tbWVudFxuICAgICAgICAgICAgZ2V0VWludDY0OiBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGxvdywgaGlnaDtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHRoaXMubGl0dGxlRW5kaWFuICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBsb3cgPSB0aGlzLmdldFVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBoaWdoID0gdGhpcy5nZXRVaW50MzIoKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBoaWdoID0gdGhpcy5nZXRVaW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgbG93ID0gdGhpcy5nZXRVaW50MzIoKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhpZ2ggKiAweDEwMDAwMDAwMCArIGxvdztcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiAoKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5kdi5nZXRGbG9hdDMyKCB0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4gKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBnZXRGbG9hdDMyQXJyYXk6IGZ1bmN0aW9uICggc2l6ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYSA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHNpemU7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGEucHVzaCggdGhpcy5nZXRGbG9hdDMyKCkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gKCkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZHYuZ2V0RmxvYXQ2NCggdGhpcy5vZmZzZXQsIHRoaXMubGl0dGxlRW5kaWFuICk7XG4gICAgICAgICAgICAgICAgdGhpcy5vZmZzZXQgKz0gODtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgXG4gICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgZ2V0RmxvYXQ2NEFycmF5OiBmdW5jdGlvbiAoIHNpemUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGEgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBzaXplOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBhLnB1c2goIHRoaXMuZ2V0RmxvYXQ2NCgpICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgIGdldEFycmF5QnVmZmVyOiBmdW5jdGlvbiAoIHNpemUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5kdi5idWZmZXIuc2xpY2UoIHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIHNpemUgKTtcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCArPSBzaXplO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICBcbiAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICBnZXRTdHJpbmc6IGZ1bmN0aW9uICggc2l6ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYSA9IG5ldyBVaW50OEFycmF5KCBzaXplICk7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgc2l6ZTsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgYVsgaSBdID0gdGhpcy5nZXRVaW50OCgpO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbnVsbEJ5dGUgPSBhLmluZGV4T2YoIDAgKTtcbiAgICAgICAgICAgICAgICBpZiAoIG51bGxCeXRlID49IDAgKSBhID0gYS5zbGljZSggMCwgbnVsbEJ5dGUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gVEhSRUUuTG9hZGVyVXRpbHMuZGVjb2RlVGV4dCggYSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICB9ICk7XG4gICAgXG4gICAgICAgIC8vIEZCWFRyZWUgaG9sZHMgYSByZXByZXNlbnRhdGlvbiBvZiB0aGUgRkJYIGRhdGEsIHJldHVybmVkIGJ5IHRoZSBUZXh0UGFyc2VyICggRkJYIEFTQ0lJIGZvcm1hdClcbiAgICAgICAgLy8gYW5kIEJpbmFyeVBhcnNlciggRkJYIEJpbmFyeSBmb3JtYXQpXG4gICAgICAgIGZ1bmN0aW9uIEZCWFRyZWUoKSB7fVxuICAgIFxuICAgICAgICBPYmplY3QuYXNzaWduKCBGQlhUcmVlLnByb3RvdHlwZSwge1xuICAgIFxuICAgICAgICAgICAgYWRkOiBmdW5jdGlvbiAoIGtleSwgdmFsICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHRoaXNbIGtleSBdID0gdmFsO1xuICAgIFxuICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgfSApO1xuICAgIFxuICAgICAgICBmdW5jdGlvbiBpc0ZieEZvcm1hdEJpbmFyeSggYnVmZmVyICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIENPUlJFQ1QgPSAnS2F5ZGFyYSBGQlggQmluYXJ5ICBcXDAnO1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlci5ieXRlTGVuZ3RoID49IENPUlJFQ1QubGVuZ3RoICYmIENPUlJFQ1QgPT09IGNvbnZlcnRBcnJheUJ1ZmZlclRvU3RyaW5nKCBidWZmZXIsIDAsIENPUlJFQ1QubGVuZ3RoICk7XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gaXNGYnhGb3JtYXRBU0NJSSggdGV4dCApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBDT1JSRUNUID0gWyAnSycsICdhJywgJ3knLCAnZCcsICdhJywgJ3InLCAnYScsICdcXFxcJywgJ0YnLCAnQicsICdYJywgJ1xcXFwnLCAnQicsICdpJywgJ24nLCAnYScsICdyJywgJ3knLCAnXFxcXCcsICdcXFxcJyBdO1xuICAgIFxuICAgICAgICAgICAgdmFyIGN1cnNvciA9IDA7XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiByZWFkKCBvZmZzZXQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRleHRbIG9mZnNldCAtIDEgXTtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gdGV4dC5zbGljZSggY3Vyc29yICsgb2Zmc2V0ICk7XG4gICAgICAgICAgICAgICAgY3Vyc29yICsrO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBDT1JSRUNULmxlbmd0aDsgKysgaSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbnVtID0gcmVhZCggMSApO1xuICAgICAgICAgICAgICAgIGlmICggbnVtID09PSBDT1JSRUNUWyBpIF0gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBnZXRGYnhWZXJzaW9uKCB0ZXh0ICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHZlcnNpb25SZWdFeHAgPSAvRkJYVmVyc2lvbjogKFxcZCspLztcbiAgICAgICAgICAgIHZhciBtYXRjaCA9IHRleHQubWF0Y2goIHZlcnNpb25SZWdFeHAgKTtcbiAgICAgICAgICAgIGlmICggbWF0Y2ggKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHZlcnNpb24gPSBwYXJzZUludCggbWF0Y2hbIDEgXSApO1xuICAgICAgICAgICAgICAgIHJldHVybiB2ZXJzaW9uO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuRkJYTG9hZGVyOiBDYW5ub3QgZmluZCB0aGUgdmVyc2lvbiBudW1iZXIgZm9yIHRoZSBmaWxlIGdpdmVuLicgKTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyBDb252ZXJ0cyBGQlggdGlja3MgaW50byByZWFsIHRpbWUgc2Vjb25kcy5cbiAgICAgICAgZnVuY3Rpb24gY29udmVydEZCWFRpbWVUb1NlY29uZHMoIHRpbWUgKSB7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gdGltZSAvIDQ2MTg2MTU4MDAwO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgXG4gICAgICAgIC8vIFBhcnNlcyBjb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBudW1iZXJzIGFuZCByZXR1cm5zIHRoZW0gYW4gYXJyYXkuXG4gICAgICAgIC8vIFVzZWQgaW50ZXJuYWxseSBieSB0aGUgVGV4dFBhcnNlclxuICAgICAgICBmdW5jdGlvbiBwYXJzZU51bWJlckFycmF5KCB2YWx1ZSApIHtcbiAgICBcbiAgICAgICAgICAgIHZhciBhcnJheSA9IHZhbHVlLnNwbGl0KCAnLCcgKS5tYXAoIGZ1bmN0aW9uICggdmFsICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KCB2YWwgKTtcbiAgICBcbiAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBjb252ZXJ0QXJyYXlCdWZmZXJUb1N0cmluZyggYnVmZmVyLCBmcm9tLCB0byApIHtcbiAgICBcbiAgICAgICAgICAgIGlmICggZnJvbSA9PT0gdW5kZWZpbmVkICkgZnJvbSA9IDA7XG4gICAgICAgICAgICBpZiAoIHRvID09PSB1bmRlZmluZWQgKSB0byA9IGJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgIFxuICAgICAgICAgICAgcmV0dXJuIFRIUkVFLkxvYWRlclV0aWxzLmRlY29kZVRleHQoIG5ldyBVaW50OEFycmF5KCBidWZmZXIsIGZyb20sIHRvICkgKTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgICAgICBmdW5jdGlvbiBhcHBlbmQoIGEsIGIgKSB7XG4gICAgXG4gICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGogPSBhLmxlbmd0aCwgbCA9IGIubGVuZ3RoOyBpIDwgbDsgaSArKywgaiArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBhWyBqIF0gPSBiWyBpIF07XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgZnVuY3Rpb24gc2xpY2UoIGEsIGIsIGZyb20sIHRvICkge1xuICAgIFxuICAgICAgICAgICAgZm9yICggdmFyIGkgPSBmcm9tLCBqID0gMDsgaSA8IHRvOyBpICsrLCBqICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGFbIGogXSA9IGJbIGkgXTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgIFxuICAgICAgICB9XG4gICAgXG4gICAgfSApKCk7IiwiLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG5USFJFRS5Db2xsYWRhTG9hZGVyID0gZnVuY3Rpb24gKCBtYW5hZ2VyICkge1xuICAgIFxuICAgICAgICB0aGlzLm1hbmFnZXIgPSAoIG1hbmFnZXIgIT09IHVuZGVmaW5lZCApID8gbWFuYWdlciA6IFRIUkVFLkRlZmF1bHRMb2FkaW5nTWFuYWdlcjtcbiAgICBcbiAgICB9O1xuICAgIFxuICAgIFRIUkVFLkNvbGxhZGFMb2FkZXIucHJvdG90eXBlID0ge1xuICAgIFxuICAgICAgICBjb25zdHJ1Y3RvcjogVEhSRUUuQ29sbGFkYUxvYWRlcixcbiAgICBcbiAgICAgICAgY3Jvc3NPcmlnaW46ICdBbm9ueW1vdXMnLFxuICAgIFxuICAgICAgICBsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuICAgIFxuICAgICAgICAgICAgdmFyIHNjb3BlID0gdGhpcztcbiAgICBcbiAgICAgICAgICAgIHZhciBwYXRoID0gc2NvcGUucGF0aCA9PT0gdW5kZWZpbmVkID8gVEhSRUUuTG9hZGVyVXRpbHMuZXh0cmFjdFVybEJhc2UoIHVybCApIDogc2NvcGUucGF0aDtcbiAgICBcbiAgICAgICAgICAgIHZhciBsb2FkZXIgPSBuZXcgVEhSRUUuRmlsZUxvYWRlciggc2NvcGUubWFuYWdlciApO1xuICAgICAgICAgICAgbG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIG9uTG9hZCggc2NvcGUucGFyc2UoIHRleHQsIHBhdGggKSApO1xuICAgIFxuICAgICAgICAgICAgfSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuICAgIFxuICAgICAgICB9LFxuICAgIFxuICAgICAgICBzZXRQYXRoOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuICAgIFxuICAgICAgICAgICAgdGhpcy5wYXRoID0gdmFsdWU7XG4gICAgXG4gICAgICAgIH0sXG4gICAgXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICBcbiAgICAgICAgICAgIHNldCBjb252ZXJ0VXBBeGlzKCB2YWx1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBvcHRpb25zLmNvbnZlcnRVcEF4aXMoKSBoYXMgYmVlbiByZW1vdmVkLiBVcCBheGlzIGlzIGNvbnZlcnRlZCBhdXRvbWF0aWNhbGx5LicgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgfSxcbiAgICBcbiAgICAgICAgc2V0Q3Jvc3NPcmlnaW46IGZ1bmN0aW9uICggdmFsdWUgKSB7XG4gICAgXG4gICAgICAgICAgICB0aGlzLmNyb3NzT3JpZ2luID0gdmFsdWU7XG4gICAgXG4gICAgICAgIH0sXG4gICAgXG4gICAgICAgIHBhcnNlOiBmdW5jdGlvbiAoIHRleHQsIHBhdGggKSB7XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRFbGVtZW50c0J5VGFnTmFtZSggeG1sLCBuYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIE5vbiByZWN1cnNpdmUgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCkgLi4uXG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkTm9kZXMgPSB4bWwuY2hpbGROb2RlcztcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IGNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlTmFtZSA9PT0gbmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5LnB1c2goIGNoaWxkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VTdHJpbmdzKCB0ZXh0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggdGV4dC5sZW5ndGggPT09IDAgKSByZXR1cm4gW107XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gdGV4dC50cmltKCkuc3BsaXQoIC9cXHMrLyApO1xuICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IG5ldyBBcnJheSggcGFydHMubGVuZ3RoICk7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0gcGFydHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbIGkgXSA9IHBhcnRzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlRmxvYXRzKCB0ZXh0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggdGV4dC5sZW5ndGggPT09IDAgKSByZXR1cm4gW107XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gdGV4dC50cmltKCkuc3BsaXQoIC9cXHMrLyApO1xuICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IG5ldyBBcnJheSggcGFydHMubGVuZ3RoICk7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0gcGFydHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbIGkgXSA9IHBhcnNlRmxvYXQoIHBhcnRzWyBpIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VJbnRzKCB0ZXh0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggdGV4dC5sZW5ndGggPT09IDAgKSByZXR1cm4gW107XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gdGV4dC50cmltKCkuc3BsaXQoIC9cXHMrLyApO1xuICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IG5ldyBBcnJheSggcGFydHMubGVuZ3RoICk7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0gcGFydHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbIGkgXSA9IHBhcnNlSW50KCBwYXJ0c1sgaSBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlSWQoIHRleHQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHQuc3Vic3RyaW5nKCAxICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZUlkKCkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiAndGhyZWVfZGVmYXVsdF8nICsgKCBjb3VudCArKyApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gaXNFbXB0eSggb2JqZWN0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyggb2JqZWN0ICkubGVuZ3RoID09PSAwO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLy8gYXNzZXRcbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlQXNzZXQoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB1bml0OiBwYXJzZUFzc2V0VW5pdCggZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHhtbCwgJ3VuaXQnIClbIDAgXSApLFxuICAgICAgICAgICAgICAgICAgICB1cEF4aXM6IHBhcnNlQXNzZXRVcEF4aXMoIGdldEVsZW1lbnRzQnlUYWdOYW1lKCB4bWwsICd1cF9heGlzJyApWyAwIF0gKVxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUFzc2V0VW5pdCggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB4bWwgIT09IHVuZGVmaW5lZCA/IHBhcnNlRmxvYXQoIHhtbC5nZXRBdHRyaWJ1dGUoICdtZXRlcicgKSApIDogMTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlQXNzZXRVcEF4aXMoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4geG1sICE9PSB1bmRlZmluZWQgPyB4bWwudGV4dENvbnRlbnQgOiAnWV9VUCc7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBsaWJyYXJ5XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUxpYnJhcnkoIHhtbCwgbGlicmFyeU5hbWUsIG5vZGVOYW1lLCBwYXJzZXIgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGxpYnJhcnkgPSBnZXRFbGVtZW50c0J5VGFnTmFtZSggeG1sLCBsaWJyYXJ5TmFtZSApWyAwIF07XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBsaWJyYXJ5ICE9PSB1bmRlZmluZWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IGdldEVsZW1lbnRzQnlUYWdOYW1lKCBsaWJyYXJ5LCBub2RlTmFtZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJzZXIoIGVsZW1lbnRzWyBpIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkTGlicmFyeSggZGF0YSwgYnVpbGRlciApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgbmFtZSBpbiBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgb2JqZWN0ID0gZGF0YVsgbmFtZSBdO1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QuYnVpbGQgPSBidWlsZGVyKCBkYXRhWyBuYW1lIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBnZXRcbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEJ1aWxkKCBkYXRhLCBidWlsZGVyICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggZGF0YS5idWlsZCAhPT0gdW5kZWZpbmVkICkgcmV0dXJuIGRhdGEuYnVpbGQ7XG4gICAgXG4gICAgICAgICAgICAgICAgZGF0YS5idWlsZCA9IGJ1aWxkZXIoIGRhdGEgKTtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5idWlsZDtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIC8vIGFuaW1hdGlvblxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VBbmltYXRpb24oIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlczoge30sXG4gICAgICAgICAgICAgICAgICAgIHNhbXBsZXJzOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgY2hhbm5lbHM6IHt9XG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzb3VyY2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gY2hpbGQuZ2V0QXR0cmlidXRlKCAnaWQnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zb3VyY2VzWyBpZCBdID0gcGFyc2VTb3VyY2UoIGNoaWxkICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzYW1wbGVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZCA9IGNoaWxkLmdldEF0dHJpYnV0ZSggJ2lkJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuc2FtcGxlcnNbIGlkIF0gPSBwYXJzZUFuaW1hdGlvblNhbXBsZXIoIGNoaWxkICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjaGFubmVsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZCA9IGNoaWxkLmdldEF0dHJpYnV0ZSggJ3RhcmdldCcgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmNoYW5uZWxzWyBpZCBdID0gcGFyc2VBbmltYXRpb25DaGFubmVsKCBjaGlsZCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggY2hpbGQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBsaWJyYXJ5LmFuaW1hdGlvbnNbIHhtbC5nZXRBdHRyaWJ1dGUoICdpZCcgKSBdID0gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlQW5pbWF0aW9uU2FtcGxlciggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dHM6IHt9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0geG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSBwYXJzZUlkKCBjaGlsZC5nZXRBdHRyaWJ1dGUoICdzb3VyY2UnICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VtYW50aWMgPSBjaGlsZC5nZXRBdHRyaWJ1dGUoICdzZW1hbnRpYycgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmlucHV0c1sgc2VtYW50aWMgXSA9IGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VBbmltYXRpb25DaGFubmVsKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0geG1sLmdldEF0dHJpYnV0ZSggJ3RhcmdldCcgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBwYXJzaW5nIFNJRCBBZGRyZXNzaW5nIFN5bnRheFxuICAgIFxuICAgICAgICAgICAgICAgIHZhciBwYXJ0cyA9IHRhcmdldC5zcGxpdCggJy8nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGlkID0gcGFydHMuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgc2lkID0gcGFydHMuc2hpZnQoKTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBzZWxlY3Rpb24gc3ludGF4XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGFycmF5U3ludGF4ID0gKCBzaWQuaW5kZXhPZiggJygnICkgIT09IC0gMSApO1xuICAgICAgICAgICAgICAgIHZhciBtZW1iZXJTeW50YXggPSAoIHNpZC5pbmRleE9mKCAnLicgKSAhPT0gLSAxICk7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBtZW1iZXJTeW50YXggKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vICBtZW1iZXIgc2VsZWN0aW9uIGFjY2Vzc1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBwYXJ0cyA9IHNpZC5zcGxpdCggJy4nICk7XG4gICAgICAgICAgICAgICAgICAgIHNpZCA9IHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEubWVtYmVyID0gcGFydHMuc2hpZnQoKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBhcnJheVN5bnRheCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gYXJyYXktYWNjZXNzIHN5bnRheC4gY2FuIGJlIHVzZWQgdG8gZXhwcmVzcyBmaWVsZHMgaW4gb25lLWRpbWVuc2lvbmFsIHZlY3RvcnMgb3IgdHdvLWRpbWVuc2lvbmFsIG1hdHJpY2VzLlxuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kaWNlcyA9IHNpZC5zcGxpdCggJygnICk7XG4gICAgICAgICAgICAgICAgICAgIHNpZCA9IGluZGljZXMuc2hpZnQoKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgaW5kaWNlcy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRpY2VzWyBpIF0gPSBwYXJzZUludCggaW5kaWNlc1sgaSBdLnJlcGxhY2UoIC9cXCkvLCAnJyApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5pbmRpY2VzID0gaW5kaWNlcztcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgZGF0YS5pZCA9IGlkO1xuICAgICAgICAgICAgICAgIGRhdGEuc2lkID0gc2lkO1xuICAgIFxuICAgICAgICAgICAgICAgIGRhdGEuYXJyYXlTeW50YXggPSBhcnJheVN5bnRheDtcbiAgICAgICAgICAgICAgICBkYXRhLm1lbWJlclN5bnRheCA9IG1lbWJlclN5bnRheDtcbiAgICBcbiAgICAgICAgICAgICAgICBkYXRhLnNhbXBsZXIgPSBwYXJzZUlkKCB4bWwuZ2V0QXR0cmlidXRlKCAnc291cmNlJyApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZEFuaW1hdGlvbiggZGF0YSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdHJhY2tzID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGNoYW5uZWxzID0gZGF0YS5jaGFubmVscztcbiAgICAgICAgICAgICAgICB2YXIgc2FtcGxlcnMgPSBkYXRhLnNhbXBsZXJzO1xuICAgICAgICAgICAgICAgIHZhciBzb3VyY2VzID0gZGF0YS5zb3VyY2VzO1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciB0YXJnZXQgaW4gY2hhbm5lbHMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hhbm5lbHMuaGFzT3duUHJvcGVydHkoIHRhcmdldCApICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoYW5uZWwgPSBjaGFubmVsc1sgdGFyZ2V0IF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2FtcGxlciA9IHNhbXBsZXJzWyBjaGFubmVsLnNhbXBsZXIgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dElkID0gc2FtcGxlci5pbnB1dHMuSU5QVVQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3V0cHV0SWQgPSBzYW1wbGVyLmlucHV0cy5PVVRQVVQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXRTb3VyY2UgPSBzb3VyY2VzWyBpbnB1dElkIF07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3V0cHV0U291cmNlID0gc291cmNlc1sgb3V0cHV0SWQgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSBidWlsZEFuaW1hdGlvbkNoYW5uZWwoIGNoYW5uZWwsIGlucHV0U291cmNlLCBvdXRwdXRTb3VyY2UgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUtleWZyYW1lVHJhY2tzKCBhbmltYXRpb24sIHRyYWNrcyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFja3M7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRBbmltYXRpb24oIGlkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRCdWlsZCggbGlicmFyeS5hbmltYXRpb25zWyBpZCBdLCBidWlsZEFuaW1hdGlvbiApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRBbmltYXRpb25DaGFubmVsKCBjaGFubmVsLCBpbnB1dFNvdXJjZSwgb3V0cHV0U291cmNlICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBub2RlID0gbGlicmFyeS5ub2Rlc1sgY2hhbm5lbC5pZCBdO1xuICAgICAgICAgICAgICAgIHZhciBvYmplY3QzRCA9IGdldE5vZGUoIG5vZGUuaWQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtID0gbm9kZS50cmFuc2Zvcm1zWyBjaGFubmVsLnNpZCBdO1xuICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0TWF0cml4ID0gbm9kZS5tYXRyaXguY2xvbmUoKS50cmFuc3Bvc2UoKTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdGltZSwgc3RyaWRlO1xuICAgICAgICAgICAgICAgIHZhciBpLCBpbCwgaiwgamw7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyB0aGUgY29sbGFkYSBzcGVjIGFsbG93cyB0aGUgYW5pbWF0aW9uIG9mIGRhdGEgaW4gdmFyaW91cyB3YXlzLlxuICAgICAgICAgICAgICAgIC8vIGRlcGVuZGluZyBvbiB0aGUgdHJhbnNmb3JtIHR5cGUgKG1hdHJpeCwgdHJhbnNsYXRlLCByb3RhdGUsIHNjYWxlKSwgd2UgZXhlY3V0ZSBkaWZmZXJlbnQgbG9naWNcbiAgICBcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKCB0cmFuc2Zvcm0gKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hdHJpeCc6XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCBpID0gMCwgaWwgPSBpbnB1dFNvdXJjZS5hcnJheS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lID0gaW5wdXRTb3VyY2UuYXJyYXlbIGkgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpZGUgPSBpICogb3V0cHV0U291cmNlLnN0cmlkZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGRhdGFbIHRpbWUgXSA9PT0gdW5kZWZpbmVkICkgZGF0YVsgdGltZSBdID0ge307XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGFubmVsLmFycmF5U3ludGF4ID09PSB0cnVlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBvdXRwdXRTb3VyY2UuYXJyYXlbIHN0cmlkZSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBjaGFubmVsLmluZGljZXNbIDAgXSArIDQgKiBjaGFubmVsLmluZGljZXNbIDEgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVsgdGltZSBdWyBpbmRleCBdID0gdmFsdWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggaiA9IDAsIGpsID0gb3V0cHV0U291cmNlLnN0cmlkZTsgaiA8IGpsOyBqICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVsgdGltZSBdWyBqIF0gPSBvdXRwdXRTb3VyY2UuYXJyYXlbIHN0cmlkZSArIGogXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICd0cmFuc2xhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCAnVEhSRUUuQ29sbGFkYUxvYWRlcjogQW5pbWF0aW9uIHRyYW5zZm9ybSB0eXBlIFwiJXNcIiBub3QgeWV0IGltcGxlbWVudGVkLicsIHRyYW5zZm9ybSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JvdGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBBbmltYXRpb24gdHJhbnNmb3JtIHR5cGUgXCIlc1wiIG5vdCB5ZXQgaW1wbGVtZW50ZWQuJywgdHJhbnNmb3JtICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2NhbGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCAnVEhSRUUuQ29sbGFkYUxvYWRlcjogQW5pbWF0aW9uIHRyYW5zZm9ybSB0eXBlIFwiJXNcIiBub3QgeWV0IGltcGxlbWVudGVkLicsIHRyYW5zZm9ybSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHZhciBrZXlmcmFtZXMgPSBwcmVwYXJlQW5pbWF0aW9uRGF0YSggZGF0YSwgZGVmYXVsdE1hdHJpeCApO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG9iamVjdDNELnV1aWQsXG4gICAgICAgICAgICAgICAgICAgIGtleWZyYW1lczoga2V5ZnJhbWVzXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5pbWF0aW9uO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcHJlcGFyZUFuaW1hdGlvbkRhdGEoIGRhdGEsIGRlZmF1bHRNYXRyaXggKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGtleWZyYW1lcyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIHRyYW5zZmVyIGRhdGEgaW50byBhIHNvcnRhYmxlIGFycmF5XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIHRpbWUgaW4gZGF0YSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAga2V5ZnJhbWVzLnB1c2goIHsgdGltZTogcGFyc2VGbG9hdCggdGltZSApLCB2YWx1ZTogZGF0YVsgdGltZSBdIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gZW5zdXJlIGtleWZyYW1lcyBhcmUgc29ydGVkIGJ5IHRpbWVcbiAgICBcbiAgICAgICAgICAgICAgICBrZXlmcmFtZXMuc29ydCggYXNjZW5kaW5nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gbm93IHdlIGNsZWFuIHVwIGFsbCBhbmltYXRpb24gZGF0YSwgc28gd2UgY2FuIHVzZSB0aGVtIGZvciBrZXlmcmFtZSB0cmFja3NcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCAxNjsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtQW5pbWF0aW9uRGF0YSgga2V5ZnJhbWVzLCBpLCBkZWZhdWx0TWF0cml4LmVsZW1lbnRzWyBpIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleWZyYW1lcztcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBhcnJheSBzb3J0IGZ1bmN0aW9uXG4gICAgXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYXNjZW5kaW5nKCBhLCBiICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS50aW1lIC0gYi50aW1lO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gICAgICAgICAgICB2YXIgc2NhbGUgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuICAgICAgICAgICAgdmFyIHF1YXRlcm5pb24gPSBuZXcgVEhSRUUuUXVhdGVybmlvbigpO1xuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlS2V5ZnJhbWVUcmFja3MoIGFuaW1hdGlvbiwgdHJhY2tzICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBrZXlmcmFtZXMgPSBhbmltYXRpb24ua2V5ZnJhbWVzO1xuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gYW5pbWF0aW9uLm5hbWU7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHRpbWVzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uRGF0YSA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBxdWF0ZXJuaW9uRGF0YSA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBzY2FsZURhdGEgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBrZXlmcmFtZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleWZyYW1lID0ga2V5ZnJhbWVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lID0ga2V5ZnJhbWUudGltZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0ga2V5ZnJhbWUudmFsdWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG1hdHJpeC5mcm9tQXJyYXkoIHZhbHVlICkudHJhbnNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIG1hdHJpeC5kZWNvbXBvc2UoIHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBzY2FsZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB0aW1lcy5wdXNoKCB0aW1lICk7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uRGF0YS5wdXNoKCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCBwb3NpdGlvbi56ICk7XG4gICAgICAgICAgICAgICAgICAgIHF1YXRlcm5pb25EYXRhLnB1c2goIHF1YXRlcm5pb24ueCwgcXVhdGVybmlvbi55LCBxdWF0ZXJuaW9uLnosIHF1YXRlcm5pb24udyApO1xuICAgICAgICAgICAgICAgICAgICBzY2FsZURhdGEucHVzaCggc2NhbGUueCwgc2NhbGUueSwgc2NhbGUueiApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHBvc2l0aW9uRGF0YS5sZW5ndGggPiAwICkgdHJhY2tzLnB1c2goIG5ldyBUSFJFRS5WZWN0b3JLZXlmcmFtZVRyYWNrKCBuYW1lICsgJy5wb3NpdGlvbicsIHRpbWVzLCBwb3NpdGlvbkRhdGEgKSApO1xuICAgICAgICAgICAgICAgIGlmICggcXVhdGVybmlvbkRhdGEubGVuZ3RoID4gMCApIHRyYWNrcy5wdXNoKCBuZXcgVEhSRUUuUXVhdGVybmlvbktleWZyYW1lVHJhY2soIG5hbWUgKyAnLnF1YXRlcm5pb24nLCB0aW1lcywgcXVhdGVybmlvbkRhdGEgKSApO1xuICAgICAgICAgICAgICAgIGlmICggc2NhbGVEYXRhLmxlbmd0aCA+IDAgKSB0cmFja3MucHVzaCggbmV3IFRIUkVFLlZlY3RvcktleWZyYW1lVHJhY2soIG5hbWUgKyAnLnNjYWxlJywgdGltZXMsIHNjYWxlRGF0YSApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYWNrcztcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHRyYW5zZm9ybUFuaW1hdGlvbkRhdGEoIGtleWZyYW1lcywgcHJvcGVydHksIGRlZmF1bHRWYWx1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIga2V5ZnJhbWU7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGVtcHR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgaSwgbDtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBjaGVjaywgaWYgdmFsdWVzIG9mIGEgcHJvcGVydHkgYXJlIG1pc3NpbmcgaW4gb3VyIGtleWZyYW1lc1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIGkgPSAwLCBsID0ga2V5ZnJhbWVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGtleWZyYW1lID0ga2V5ZnJhbWVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICgga2V5ZnJhbWUudmFsdWVbIHByb3BlcnR5IF0gPT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWZyYW1lLnZhbHVlWyBwcm9wZXJ0eSBdID0gbnVsbDsgLy8gbWFyayBhcyBtaXNzaW5nXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBlbXB0eSA9IGZhbHNlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggZW1wdHkgPT09IHRydWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vIHZhbHVlcyBhdCBhbGwsIHNvIHdlIHNldCBhIGRlZmF1bHQgdmFsdWVcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggaSA9IDAsIGwgPSBrZXlmcmFtZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWZyYW1lID0ga2V5ZnJhbWVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlmcmFtZS52YWx1ZVsgcHJvcGVydHkgXSA9IGRlZmF1bHRWYWx1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGZpbGxpbmcgZ2Fwc1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVNaXNzaW5nS2V5ZnJhbWVzKCBrZXlmcmFtZXMsIHByb3BlcnR5ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlTWlzc2luZ0tleWZyYW1lcygga2V5ZnJhbWVzLCBwcm9wZXJ0eSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcHJldiwgbmV4dDtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBrZXlmcmFtZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleWZyYW1lID0ga2V5ZnJhbWVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICgga2V5ZnJhbWUudmFsdWVbIHByb3BlcnR5IF0gPT09IG51bGwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2ID0gZ2V0UHJldigga2V5ZnJhbWVzLCBpLCBwcm9wZXJ0eSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCA9IGdldE5leHQoIGtleWZyYW1lcywgaSwgcHJvcGVydHkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcHJldiA9PT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlmcmFtZS52YWx1ZVsgcHJvcGVydHkgXSA9IG5leHQudmFsdWVbIHByb3BlcnR5IF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG5leHQgPT09IG51bGwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ZnJhbWUudmFsdWVbIHByb3BlcnR5IF0gPSBwcmV2LnZhbHVlWyBwcm9wZXJ0eSBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJwb2xhdGUoIGtleWZyYW1lLCBwcmV2LCBuZXh0LCBwcm9wZXJ0eSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0UHJldigga2V5ZnJhbWVzLCBpLCBwcm9wZXJ0eSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB3aGlsZSAoIGkgPj0gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleWZyYW1lID0ga2V5ZnJhbWVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICgga2V5ZnJhbWUudmFsdWVbIHByb3BlcnR5IF0gIT09IG51bGwgKSByZXR1cm4ga2V5ZnJhbWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGkgLS07XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0TmV4dCgga2V5ZnJhbWVzLCBpLCBwcm9wZXJ0eSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB3aGlsZSAoIGkgPCBrZXlmcmFtZXMubGVuZ3RoICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ZnJhbWUgPSBrZXlmcmFtZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBrZXlmcmFtZS52YWx1ZVsgcHJvcGVydHkgXSAhPT0gbnVsbCApIHJldHVybiBrZXlmcmFtZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaSArKztcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZSgga2V5LCBwcmV2LCBuZXh0LCBwcm9wZXJ0eSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoICggbmV4dC50aW1lIC0gcHJldi50aW1lICkgPT09IDAgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGtleS52YWx1ZVsgcHJvcGVydHkgXSA9IHByZXYudmFsdWVbIHByb3BlcnR5IF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAga2V5LnZhbHVlWyBwcm9wZXJ0eSBdID0gKCAoIGtleS50aW1lIC0gcHJldi50aW1lICkgKiAoIG5leHQudmFsdWVbIHByb3BlcnR5IF0gLSBwcmV2LnZhbHVlWyBwcm9wZXJ0eSBdICkgLyAoIG5leHQudGltZSAtIHByZXYudGltZSApICkgKyBwcmV2LnZhbHVlWyBwcm9wZXJ0eSBdO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLy8gYW5pbWF0aW9uIGNsaXBzXG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUFuaW1hdGlvbkNsaXAoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogeG1sLmdldEF0dHJpYnV0ZSggJ2lkJyApIHx8ICdkZWZhdWx0JyxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHBhcnNlRmxvYXQoIHhtbC5nZXRBdHRyaWJ1dGUoICdzdGFydCcgKSB8fCAwICksXG4gICAgICAgICAgICAgICAgICAgIGVuZDogcGFyc2VGbG9hdCggeG1sLmdldEF0dHJpYnV0ZSggJ2VuZCcgKSB8fCAwICksXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbnM6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW5zdGFuY2VfYW5pbWF0aW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmFuaW1hdGlvbnMucHVzaCggcGFyc2VJZCggY2hpbGQuZ2V0QXR0cmlidXRlKCAndXJsJyApICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBsaWJyYXJ5LmNsaXBzWyB4bWwuZ2V0QXR0cmlidXRlKCAnaWQnICkgXSA9IGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZEFuaW1hdGlvbkNsaXAoIGRhdGEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHRyYWNrcyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBuYW1lID0gZGF0YS5uYW1lO1xuICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9ICggZGF0YS5lbmQgLSBkYXRhLnN0YXJ0ICkgfHwgLSAxO1xuICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb25zID0gZGF0YS5hbmltYXRpb25zO1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgaWwgPSBhbmltYXRpb25zLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uVHJhY2tzID0gZ2V0QW5pbWF0aW9uKCBhbmltYXRpb25zWyBpIF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGogPSAwLCBqbCA9IGFuaW1hdGlvblRyYWNrcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrcy5wdXNoKCBhbmltYXRpb25UcmFja3NbIGogXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVEhSRUUuQW5pbWF0aW9uQ2xpcCggbmFtZSwgZHVyYXRpb24sIHRyYWNrcyApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0QW5pbWF0aW9uQ2xpcCggaWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEJ1aWxkKCBsaWJyYXJ5LmNsaXBzWyBpZCBdLCBidWlsZEFuaW1hdGlvbkNsaXAgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIC8vIGNvbnRyb2xsZXJcbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlQ29udHJvbGxlciggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge307XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0geG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NraW4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZXJlIGlzIGV4YWN0bHkgb25lIHNraW4gcGVyIGNvbnRyb2xsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmlkID0gcGFyc2VJZCggY2hpbGQuZ2V0QXR0cmlidXRlKCAnc291cmNlJyApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5za2luID0gcGFyc2VTa2luKCBjaGlsZCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbW9ycGgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuaWQgPSBwYXJzZUlkKCBjaGlsZC5nZXRBdHRyaWJ1dGUoICdzb3VyY2UnICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBNb3JwaCB0YXJnZXQgYW5pbWF0aW9uIG5vdCBzdXBwb3J0ZWQgeWV0LicgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBsaWJyYXJ5LmNvbnRyb2xsZXJzWyB4bWwuZ2V0QXR0cmlidXRlKCAnaWQnICkgXSA9IGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZVNraW4oIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlczoge31cbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdiaW5kX3NoYXBlX21hdHJpeCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5iaW5kU2hhcGVNYXRyaXggPSBwYXJzZUZsb2F0cyggY2hpbGQudGV4dENvbnRlbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NvdXJjZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0gY2hpbGQuZ2V0QXR0cmlidXRlKCAnaWQnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zb3VyY2VzWyBpZCBdID0gcGFyc2VTb3VyY2UoIGNoaWxkICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdqb2ludHMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuam9pbnRzID0gcGFyc2VKb2ludHMoIGNoaWxkICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd2ZXJ0ZXhfd2VpZ2h0cyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS52ZXJ0ZXhXZWlnaHRzID0gcGFyc2VWZXJ0ZXhXZWlnaHRzKCBjaGlsZCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VKb2ludHMoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRzOiB7fVxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0geG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VtYW50aWMgPSBjaGlsZC5nZXRBdHRyaWJ1dGUoICdzZW1hbnRpYycgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSBwYXJzZUlkKCBjaGlsZC5nZXRBdHRyaWJ1dGUoICdzb3VyY2UnICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmlucHV0c1sgc2VtYW50aWMgXSA9IGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VWZXJ0ZXhXZWlnaHRzKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0czoge31cbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbWFudGljID0gY2hpbGQuZ2V0QXR0cmlidXRlKCAnc2VtYW50aWMnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0gcGFyc2VJZCggY2hpbGQuZ2V0QXR0cmlidXRlKCAnc291cmNlJyApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IHBhcnNlSW50KCBjaGlsZC5nZXRBdHRyaWJ1dGUoICdvZmZzZXQnICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmlucHV0c1sgc2VtYW50aWMgXSA9IHsgaWQ6IGlkLCBvZmZzZXQ6IG9mZnNldCB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndmNvdW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnZjb3VudCA9IHBhcnNlSW50cyggY2hpbGQudGV4dENvbnRlbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3YnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudiA9IHBhcnNlSW50cyggY2hpbGQudGV4dENvbnRlbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkQ29udHJvbGxlciggZGF0YSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYnVpbGQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBkYXRhLmlkXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZ2VvbWV0cnkgPSBsaWJyYXJ5Lmdlb21ldHJpZXNbIGJ1aWxkLmlkIF07XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBkYXRhLnNraW4gIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgYnVpbGQuc2tpbiA9IGJ1aWxkU2tpbiggZGF0YS5za2luICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIGVuaGFuY2UgdGhlICdzb3VyY2VzJyBwcm9wZXJ0eSBvZiB0aGUgY29ycmVzcG9uZGluZyBnZW9tZXRyeSB3aXRoIG91ciBza2luIGRhdGFcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkuc291cmNlcy5za2luSW5kaWNlcyA9IGJ1aWxkLnNraW4uaW5kaWNlcztcbiAgICAgICAgICAgICAgICAgICAgZ2VvbWV0cnkuc291cmNlcy5za2luV2VpZ2h0cyA9IGJ1aWxkLnNraW4ud2VpZ2h0cztcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1aWxkO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRTa2luKCBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBCT05FX0xJTUlUID0gNDtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYnVpbGQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGpvaW50czogW10sIC8vIHRoaXMgbXVzdCBiZSBhbiBhcnJheSB0byBwcmVzZXJ2ZSB0aGUgam9pbnQgb3JkZXJcbiAgICAgICAgICAgICAgICAgICAgaW5kaWNlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXk6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaWRlOiBCT05FX0xJTUlUXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHdlaWdodHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5OiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlkZTogQk9ORV9MSU1JVFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgc291cmNlcyA9IGRhdGEuc291cmNlcztcbiAgICAgICAgICAgICAgICB2YXIgdmVydGV4V2VpZ2h0cyA9IGRhdGEudmVydGV4V2VpZ2h0cztcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdmNvdW50ID0gdmVydGV4V2VpZ2h0cy52Y291bnQ7XG4gICAgICAgICAgICAgICAgdmFyIHYgPSB2ZXJ0ZXhXZWlnaHRzLnY7XG4gICAgICAgICAgICAgICAgdmFyIGpvaW50T2Zmc2V0ID0gdmVydGV4V2VpZ2h0cy5pbnB1dHMuSk9JTlQub2Zmc2V0O1xuICAgICAgICAgICAgICAgIHZhciB3ZWlnaHRPZmZzZXQgPSB2ZXJ0ZXhXZWlnaHRzLmlucHV0cy5XRUlHSFQub2Zmc2V0O1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBqb2ludFNvdXJjZSA9IGRhdGEuc291cmNlc1sgZGF0YS5qb2ludHMuaW5wdXRzLkpPSU5UIF07XG4gICAgICAgICAgICAgICAgdmFyIGludmVyc2VTb3VyY2UgPSBkYXRhLnNvdXJjZXNbIGRhdGEuam9pbnRzLmlucHV0cy5JTlZfQklORF9NQVRSSVggXTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgd2VpZ2h0cyA9IHNvdXJjZXNbIHZlcnRleFdlaWdodHMuaW5wdXRzLldFSUdIVC5pZCBdLmFycmF5O1xuICAgICAgICAgICAgICAgIHZhciBzdHJpZGUgPSAwO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBpLCBqLCBsO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIHByb2NjZXMgc2tpbiBkYXRhIGZvciBlYWNoIHZlcnRleFxuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIGkgPSAwLCBsID0gdmNvdW50Lmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBqb2ludENvdW50ID0gdmNvdW50WyBpIF07IC8vIHRoaXMgaXMgdGhlIGFtb3VudCBvZiBqb2ludHMgdGhhdCBhZmZlY3QgYSBzaW5nbGUgdmVydGV4XG4gICAgICAgICAgICAgICAgICAgIHZhciB2ZXJ0ZXhTa2luRGF0YSA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCBqID0gMDsgaiA8IGpvaW50Q291bnQ7IGogKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2tpbkluZGV4ID0gdlsgc3RyaWRlICsgam9pbnRPZmZzZXQgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3ZWlnaHRJZCA9IHZbIHN0cmlkZSArIHdlaWdodE9mZnNldCBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNraW5XZWlnaHQgPSB3ZWlnaHRzWyB3ZWlnaHRJZCBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4U2tpbkRhdGEucHVzaCggeyBpbmRleDogc2tpbkluZGV4LCB3ZWlnaHQ6IHNraW5XZWlnaHQgfSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaWRlICs9IDI7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gd2Ugc29ydCB0aGUgam9pbnRzIGluIGRlc2NlbmRpbmcgb3JkZXIgYmFzZWQgb24gdGhlIHdlaWdodHMuXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgZW5zdXJlcywgd2Ugb25seSBwcm9jY2VkIHRoZSBtb3N0IGltcG9ydGFudCBqb2ludHMgb2YgdGhlIHZlcnRleFxuICAgIFxuICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXhTa2luRGF0YS5zb3J0KCBkZXNjZW5kaW5nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdyB3ZSBwcm92aWRlIGZvciBlYWNoIHZlcnRleCBhIHNldCBvZiBmb3VyIGluZGV4IGFuZCB3ZWlnaHQgdmFsdWVzLlxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgb3JkZXIgb2YgdGhlIHNraW4gZGF0YSBtYXRjaGVzIHRoZSBvcmRlciBvZiB2ZXJ0aWNlc1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCBqID0gMDsgaiA8IEJPTkVfTElNSVQ7IGogKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IHZlcnRleFNraW5EYXRhWyBqIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGQgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZC5pbmRpY2VzLmFycmF5LnB1c2goIGQuaW5kZXggKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZC53ZWlnaHRzLmFycmF5LnB1c2goIGQud2VpZ2h0ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkLmluZGljZXMuYXJyYXkucHVzaCggMCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkLndlaWdodHMuYXJyYXkucHVzaCggMCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIHNldHVwIGJpbmQgbWF0cml4XG4gICAgXG4gICAgICAgICAgICAgICAgYnVpbGQuYmluZE1hdHJpeCA9IG5ldyBUSFJFRS5NYXRyaXg0KCkuZnJvbUFycmF5KCBkYXRhLmJpbmRTaGFwZU1hdHJpeCApLnRyYW5zcG9zZSgpO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIHByb2Nlc3MgYm9uZXMgYW5kIGludmVyc2UgYmluZCBtYXRyaXggZGF0YVxuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIGkgPSAwLCBsID0gam9pbnRTb3VyY2UuYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBqb2ludFNvdXJjZS5hcnJheVsgaSBdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYm9uZUludmVyc2UgPSBuZXcgVEhSRUUuTWF0cml4NCgpLmZyb21BcnJheSggaW52ZXJzZVNvdXJjZS5hcnJheSwgaSAqIGludmVyc2VTb3VyY2Uuc3RyaWRlICkudHJhbnNwb3NlKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkLmpvaW50cy5wdXNoKCB7IG5hbWU6IG5hbWUsIGJvbmVJbnZlcnNlOiBib25lSW52ZXJzZSB9ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBidWlsZDtcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBhcnJheSBzb3J0IGZ1bmN0aW9uXG4gICAgXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZGVzY2VuZGluZyggYSwgYiApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIud2VpZ2h0IC0gYS53ZWlnaHQ7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q29udHJvbGxlciggaWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEJ1aWxkKCBsaWJyYXJ5LmNvbnRyb2xsZXJzWyBpZCBdLCBidWlsZENvbnRyb2xsZXIgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIC8vIGltYWdlXG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUltYWdlKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRfZnJvbTogZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHhtbCwgJ2luaXRfZnJvbScgKVsgMCBdLnRleHRDb250ZW50XG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICBsaWJyYXJ5LmltYWdlc1sgeG1sLmdldEF0dHJpYnV0ZSggJ2lkJyApIF0gPSBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRJbWFnZSggZGF0YSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGRhdGEuYnVpbGQgIT09IHVuZGVmaW5lZCApIHJldHVybiBkYXRhLmJ1aWxkO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmluaXRfZnJvbTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEltYWdlKCBpZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QnVpbGQoIGxpYnJhcnkuaW1hZ2VzWyBpZCBdLCBidWlsZEltYWdlICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBlZmZlY3RcbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlRWZmZWN0KCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncHJvZmlsZV9DT01NT04nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHJvZmlsZSA9IHBhcnNlRWZmZWN0UHJvZmlsZUNPTU1PTiggY2hpbGQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBsaWJyYXJ5LmVmZmVjdHNbIHhtbC5nZXRBdHRyaWJ1dGUoICdpZCcgKSBdID0gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlRWZmZWN0UHJvZmlsZUNPTU1PTiggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBzdXJmYWNlczoge30sXG4gICAgICAgICAgICAgICAgICAgIHNhbXBsZXJzOiB7fVxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0geG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ25ld3BhcmFtJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUVmZmVjdE5ld3BhcmFtKCBjaGlsZCwgZGF0YSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndGVjaG5pcXVlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnRlY2huaXF1ZSA9IHBhcnNlRWZmZWN0VGVjaG5pcXVlKCBjaGlsZCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZXh0cmEnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZXh0cmEgPSBwYXJzZUVmZmVjdEV4dHJhKCBjaGlsZCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VFZmZlY3ROZXdwYXJhbSggeG1sLCBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBzaWQgPSB4bWwuZ2V0QXR0cmlidXRlKCAnc2lkJyApO1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzdXJmYWNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnN1cmZhY2VzWyBzaWQgXSA9IHBhcnNlRWZmZWN0U3VyZmFjZSggY2hpbGQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NhbXBsZXIyRCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zYW1wbGVyc1sgc2lkIF0gPSBwYXJzZUVmZmVjdFNhbXBsZXIoIGNoaWxkICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUVmZmVjdFN1cmZhY2UoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdpbml0X2Zyb20nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuaW5pdF9mcm9tID0gY2hpbGQudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUVmZmVjdFNhbXBsZXIoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzb3VyY2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuc291cmNlID0gY2hpbGQudGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUVmZmVjdFRlY2huaXF1ZSggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge307XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0geG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvbnN0YW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xhbWJlcnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmxpbm4nOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncGhvbmcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudHlwZSA9IGNoaWxkLm5vZGVOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucGFyYW1ldGVycyA9IHBhcnNlRWZmZWN0UGFyYW1ldGVycyggY2hpbGQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlRWZmZWN0UGFyYW1ldGVycyggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge307XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0geG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VtaXNzaW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RpZmZ1c2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3BlY3VsYXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2hpbmluZXNzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RyYW5zcGFyZW5jeSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVsgY2hpbGQubm9kZU5hbWUgXSA9IHBhcnNlRWZmZWN0UGFyYW1ldGVyKCBjaGlsZCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndHJhbnNwYXJlbnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbIGNoaWxkLm5vZGVOYW1lIF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYXF1ZTogY2hpbGQuZ2V0QXR0cmlidXRlKCAnb3BhcXVlJyApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBwYXJzZUVmZmVjdFBhcmFtZXRlciggY2hpbGQgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUVmZmVjdFBhcmFtZXRlciggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge307XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0geG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NvbG9yJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhWyBjaGlsZC5ub2RlTmFtZSBdID0gcGFyc2VGbG9hdHMoIGNoaWxkLnRleHRDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmbG9hdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVsgY2hpbGQubm9kZU5hbWUgXSA9IHBhcnNlRmxvYXQoIGNoaWxkLnRleHRDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0ZXh0dXJlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhWyBjaGlsZC5ub2RlTmFtZSBdID0geyBpZDogY2hpbGQuZ2V0QXR0cmlidXRlKCAndGV4dHVyZScgKSwgZXh0cmE6IHBhcnNlRWZmZWN0UGFyYW1ldGVyVGV4dHVyZSggY2hpbGQgKSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VFZmZlY3RQYXJhbWV0ZXJUZXh0dXJlKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIHRlY2huaXF1ZToge31cbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdleHRyYSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VFZmZlY3RQYXJhbWV0ZXJUZXh0dXJlRXh0cmEoIGNoaWxkLCBkYXRhICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUVmZmVjdFBhcmFtZXRlclRleHR1cmVFeHRyYSggeG1sLCBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0ZWNobmlxdWUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRWZmZWN0UGFyYW1ldGVyVGV4dHVyZUV4dHJhVGVjaG5pcXVlKCBjaGlsZCwgZGF0YSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VFZmZlY3RQYXJhbWV0ZXJUZXh0dXJlRXh0cmFUZWNobmlxdWUoIHhtbCwgZGF0YSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncmVwZWF0VSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyZXBlYXRWJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ29mZnNldFUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnb2Zmc2V0Vic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS50ZWNobmlxdWVbIGNoaWxkLm5vZGVOYW1lIF0gPSBwYXJzZUZsb2F0KCBjaGlsZC50ZXh0Q29udGVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnd3JhcFUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnd3JhcFYnOlxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvbWUgZmlsZXMgaGF2ZSB2YWx1ZXMgZm9yIHdyYXBVL3dyYXBWIHdoaWNoIGJlY29tZSBOYU4gdmlhIHBhcnNlSW50XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC50ZXh0Q29udGVudC50b1VwcGVyQ2FzZSgpID09PSAnVFJVRScgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudGVjaG5pcXVlWyBjaGlsZC5ub2RlTmFtZSBdID0gMTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBjaGlsZC50ZXh0Q29udGVudC50b1VwcGVyQ2FzZSgpID09PSAnRkFMU0UnICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnRlY2huaXF1ZVsgY2hpbGQubm9kZU5hbWUgXSA9IDA7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS50ZWNobmlxdWVbIGNoaWxkLm5vZGVOYW1lIF0gPSBwYXJzZUludCggY2hpbGQudGV4dENvbnRlbnQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUVmZmVjdEV4dHJhKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndGVjaG5pcXVlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnRlY2huaXF1ZSA9IHBhcnNlRWZmZWN0RXh0cmFUZWNobmlxdWUoIGNoaWxkICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUVmZmVjdEV4dHJhVGVjaG5pcXVlKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZG91YmxlX3NpZGVkJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhWyBjaGlsZC5ub2RlTmFtZSBdID0gcGFyc2VJbnQoIGNoaWxkLnRleHRDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZEVmZmVjdCggZGF0YSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEVmZmVjdCggaWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEJ1aWxkKCBsaWJyYXJ5LmVmZmVjdHNbIGlkIF0sIGJ1aWxkRWZmZWN0ICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAvLyBtYXRlcmlhbFxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VNYXRlcmlhbCggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB4bWwuZ2V0QXR0cmlidXRlKCAnbmFtZScgKVxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0geG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2luc3RhbmNlX2VmZmVjdCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS51cmwgPSBwYXJzZUlkKCBjaGlsZC5nZXRBdHRyaWJ1dGUoICd1cmwnICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBsaWJyYXJ5Lm1hdGVyaWFsc1sgeG1sLmdldEF0dHJpYnV0ZSggJ2lkJyApIF0gPSBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRNYXRlcmlhbCggZGF0YSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZWZmZWN0ID0gZ2V0RWZmZWN0KCBkYXRhLnVybCApO1xuICAgICAgICAgICAgICAgIHZhciB0ZWNobmlxdWUgPSBlZmZlY3QucHJvZmlsZS50ZWNobmlxdWU7XG4gICAgICAgICAgICAgICAgdmFyIGV4dHJhID0gZWZmZWN0LnByb2ZpbGUuZXh0cmE7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG1hdGVyaWFsO1xuICAgIFxuICAgICAgICAgICAgICAgIHN3aXRjaCAoIHRlY2huaXF1ZS50eXBlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdwaG9uZyc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JsaW5uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnbGFtYmVydCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwubmFtZSA9IGRhdGEubmFtZTtcbiAgICBcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRUZXh0dXJlKCB0ZXh0dXJlT2JqZWN0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc2FtcGxlciA9IGVmZmVjdC5wcm9maWxlLnNhbXBsZXJzWyB0ZXh0dXJlT2JqZWN0LmlkIF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbWFnZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IGltYWdlXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggc2FtcGxlciAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1cmZhY2UgPSBlZmZlY3QucHJvZmlsZS5zdXJmYWNlc1sgc2FtcGxlci5zb3VyY2UgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlID0gZ2V0SW1hZ2UoIHN1cmZhY2UuaW5pdF9mcm9tICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBVbmRlZmluZWQgc2FtcGxlci4gQWNjZXNzIGltYWdlIGRpcmVjdGx5IChzZWUgIzEyNTMwKS4nICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZSA9IGdldEltYWdlKCB0ZXh0dXJlT2JqZWN0LmlkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIHRleHR1cmUgaWYgaW1hZ2UgaXMgYXZhaWFibGVcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBpbWFnZSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRleHR1cmUgPSB0ZXh0dXJlTG9hZGVyLmxvYWQoIGltYWdlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXh0cmEgPSB0ZXh0dXJlT2JqZWN0LmV4dHJhO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBleHRyYSAhPT0gdW5kZWZpbmVkICYmIGV4dHJhLnRlY2huaXF1ZSAhPT0gdW5kZWZpbmVkICYmIGlzRW1wdHkoIGV4dHJhLnRlY2huaXF1ZSApID09PSBmYWxzZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVjaG5pcXVlID0gZXh0cmEudGVjaG5pcXVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmUud3JhcFMgPSB0ZWNobmlxdWUud3JhcFUgPyBUSFJFRS5SZXBlYXRXcmFwcGluZyA6IFRIUkVFLkNsYW1wVG9FZGdlV3JhcHBpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS53cmFwVCA9IHRlY2huaXF1ZS53cmFwViA/IFRIUkVFLlJlcGVhdFdyYXBwaW5nIDogVEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLm9mZnNldC5zZXQoIHRlY2huaXF1ZS5vZmZzZXRVIHx8IDAsIHRlY2huaXF1ZS5vZmZzZXRWIHx8IDAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLnJlcGVhdC5zZXQoIHRlY2huaXF1ZS5yZXBlYXRVIHx8IDEsIHRlY2huaXF1ZS5yZXBlYXRWIHx8IDEgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS53cmFwUyA9IFRIUkVFLlJlcGVhdFdyYXBwaW5nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmUud3JhcFQgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvciggJ1RIUkVFLkNvbGxhZGFMb2FkZXI6IFVuYWJsZSB0byBsb2FkIHRleHR1cmUgd2l0aCBJRDonLCB0ZXh0dXJlT2JqZWN0LmlkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1ldGVycyA9IHRlY2huaXF1ZS5wYXJhbWV0ZXJzO1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBrZXkgaW4gcGFyYW1ldGVycyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtZXRlciA9IHBhcmFtZXRlcnNbIGtleSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBrZXkgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdkaWZmdXNlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHBhcmFtZXRlci5jb2xvciApIG1hdGVyaWFsLmNvbG9yLmZyb21BcnJheSggcGFyYW1ldGVyLmNvbG9yICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwYXJhbWV0ZXIudGV4dHVyZSApIG1hdGVyaWFsLm1hcCA9IGdldFRleHR1cmUoIHBhcmFtZXRlci50ZXh0dXJlICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzcGVjdWxhcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwYXJhbWV0ZXIuY29sb3IgJiYgbWF0ZXJpYWwuc3BlY3VsYXIgKSBtYXRlcmlhbC5zcGVjdWxhci5mcm9tQXJyYXkoIHBhcmFtZXRlci5jb2xvciApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcGFyYW1ldGVyLnRleHR1cmUgKSBtYXRlcmlhbC5zcGVjdWxhck1hcCA9IGdldFRleHR1cmUoIHBhcmFtZXRlci50ZXh0dXJlICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzaGluaW5lc3MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcGFyYW1ldGVyLmZsb2F0ICYmIG1hdGVyaWFsLnNoaW5pbmVzcyApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLnNoaW5pbmVzcyA9IHBhcmFtZXRlci5mbG9hdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VtaXNzaW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHBhcmFtZXRlci5jb2xvciAmJiBtYXRlcmlhbC5lbWlzc2l2ZSApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLmVtaXNzaXZlLmZyb21BcnJheSggcGFyYW1ldGVyLmNvbG9yICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy9cbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNwYXJlbnQgPSBwYXJhbWV0ZXJzWyAndHJhbnNwYXJlbnQnIF07XG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zcGFyZW5jeSA9IHBhcmFtZXRlcnNbICd0cmFuc3BhcmVuY3knIF07XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gPHRyYW5zcGFyZW5jeT4gZG9lcyBub3QgZXhpc3QgYnV0IDx0cmFuc3BhcmVudD5cbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHRyYW5zcGFyZW5jeSA9PT0gdW5kZWZpbmVkICYmIHRyYW5zcGFyZW50ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB0cmFuc3BhcmVuY3kgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbG9hdDogMVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyA8dHJhbnNwYXJlbnQ+IGRvZXMgbm90IGV4aXN0IGJ1dCA8dHJhbnNwYXJlbmN5PlxuICAgIFxuICAgICAgICAgICAgICAgIGlmICggdHJhbnNwYXJlbnQgPT09IHVuZGVmaW5lZCAmJiB0cmFuc3BhcmVuY3kgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zcGFyZW50ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BhcXVlOiAnQV9PTkUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBbIDEsIDEsIDEsIDEgXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSB9O1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHRyYW5zcGFyZW50ICYmIHRyYW5zcGFyZW5jeSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIGNhc2UgaWYgYSB0ZXh0dXJlIGV4aXN0cyBidXQgbm8gY29sb3JcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB0cmFuc3BhcmVudC5kYXRhLnRleHR1cmUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5hbHBoYU1hcCA9IGdldFRleHR1cmUoIHRyYW5zcGFyZW50LmRhdGEudGV4dHVyZSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwudHJhbnNwYXJlbnQgPSB0cnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbG9yID0gdHJhbnNwYXJlbnQuZGF0YS5jb2xvcjtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIHRyYW5zcGFyZW50Lm9wYXF1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdBX09ORSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLm9wYWNpdHkgPSBjb2xvclsgMyBdICogdHJhbnNwYXJlbmN5LmZsb2F0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdSR0JfWkVSTyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLm9wYWNpdHkgPSAxIC0gKCBjb2xvclsgMCBdICogdHJhbnNwYXJlbmN5LmZsb2F0ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0FfWkVSTyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsLm9wYWNpdHkgPSAxIC0gKCBjb2xvclsgMyBdICogdHJhbnNwYXJlbmN5LmZsb2F0ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1JHQl9PTkUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5vcGFjaXR5ID0gY29sb3JbIDAgXSAqIHRyYW5zcGFyZW5jeS5mbG9hdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCAnVEhSRUUuQ29sbGFkYUxvYWRlcjogSW52YWxpZCBvcGFxdWUgdHlwZSBcIiVzXCIgb2YgdHJhbnNwYXJlbnQgdGFnLicsIHRyYW5zcGFyZW50Lm9wYXF1ZSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBtYXRlcmlhbC5vcGFjaXR5IDwgMSApIG1hdGVyaWFsLnRyYW5zcGFyZW50ID0gdHJ1ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvL1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggZXh0cmEgIT09IHVuZGVmaW5lZCAmJiBleHRyYS50ZWNobmlxdWUgIT09IHVuZGVmaW5lZCAmJiBleHRyYS50ZWNobmlxdWUuZG91YmxlX3NpZGVkID09PSAxICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbC5zaWRlID0gVEhSRUUuRG91YmxlU2lkZTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hdGVyaWFsO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0TWF0ZXJpYWwoIGlkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBnZXRCdWlsZCggbGlicmFyeS5tYXRlcmlhbHNbIGlkIF0sIGJ1aWxkTWF0ZXJpYWwgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIC8vIGNhbWVyYVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VDYW1lcmEoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogeG1sLmdldEF0dHJpYnV0ZSggJ25hbWUnIClcbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdvcHRpY3MnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEub3B0aWNzID0gcGFyc2VDYW1lcmFPcHRpY3MoIGNoaWxkICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgbGlicmFyeS5jYW1lcmFzWyB4bWwuZ2V0QXR0cmlidXRlKCAnaWQnICkgXSA9IGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUNhbWVyYU9wdGljcyggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0ZWNobmlxdWVfY29tbW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VDYW1lcmFUZWNobmlxdWUoIGNoaWxkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VDYW1lcmFUZWNobmlxdWUoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwZXJzcGVjdGl2ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdvcnRob2dyYXBoaWMnOlxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudGVjaG5pcXVlID0gY2hpbGQubm9kZU5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wYXJhbWV0ZXJzID0gcGFyc2VDYW1lcmFQYXJhbWV0ZXJzKCBjaGlsZCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VDYW1lcmFQYXJhbWV0ZXJzKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAneGZvdic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd5Zm92JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3htYWcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAneW1hZyc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd6bmVhcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd6ZmFyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FzcGVjdF9yYXRpbyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVsgY2hpbGQubm9kZU5hbWUgXSA9IHBhcnNlRmxvYXQoIGNoaWxkLnRleHRDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZENhbWVyYSggZGF0YSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgY2FtZXJhO1xuICAgIFxuICAgICAgICAgICAgICAgIHN3aXRjaCAoIGRhdGEub3B0aWNzLnRlY2huaXF1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncGVyc3BlY3RpdmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEub3B0aWNzLnBhcmFtZXRlcnMueWZvdixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm9wdGljcy5wYXJhbWV0ZXJzLmFzcGVjdF9yYXRpbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm9wdGljcy5wYXJhbWV0ZXJzLnpuZWFyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEub3B0aWNzLnBhcmFtZXRlcnMuemZhclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdvcnRob2dyYXBoaWMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHltYWcgPSBkYXRhLm9wdGljcy5wYXJhbWV0ZXJzLnltYWc7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeG1hZyA9IGRhdGEub3B0aWNzLnBhcmFtZXRlcnMueG1hZztcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhc3BlY3RSYXRpbyA9IGRhdGEub3B0aWNzLnBhcmFtZXRlcnMuYXNwZWN0X3JhdGlvO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgeG1hZyA9ICggeG1hZyA9PT0gdW5kZWZpbmVkICkgPyAoIHltYWcgKiBhc3BlY3RSYXRpbyApIDogeG1hZztcbiAgICAgICAgICAgICAgICAgICAgICAgIHltYWcgPSAoIHltYWcgPT09IHVuZGVmaW5lZCApID8gKCB4bWFnIC8gYXNwZWN0UmF0aW8gKSA6IHltYWc7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB4bWFnICo9IDAuNTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHltYWcgKj0gMC41O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FtZXJhID0gbmV3IFRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHhtYWcsIHhtYWcsIHltYWcsIC0geW1hZywgLy8gbGVmdCwgcmlnaHQsIHRvcCwgYm90dG9tXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5vcHRpY3MucGFyYW1ldGVycy56bmVhcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm9wdGljcy5wYXJhbWV0ZXJzLnpmYXJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGNhbWVyYS5uYW1lID0gZGF0YS5uYW1lO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBjYW1lcmE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRDYW1lcmEoIGlkICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gbGlicmFyeS5jYW1lcmFzWyBpZCBdO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QnVpbGQoIGRhdGEsIGJ1aWxkQ2FtZXJhICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbGxhZGFMb2FkZXI6IENvdWxkblxcJ3QgZmluZCBjYW1lcmEgd2l0aCBJRDonLCBpZCApO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLy8gbGlnaHRcbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlTGlnaHQoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0ZWNobmlxdWVfY29tbW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gcGFyc2VMaWdodFRlY2huaXF1ZSggY2hpbGQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBsaWJyYXJ5LmxpZ2h0c1sgeG1sLmdldEF0dHJpYnV0ZSggJ2lkJyApIF0gPSBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VMaWdodFRlY2huaXF1ZSggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge307XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0geG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RpcmVjdGlvbmFsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3BvaW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Nwb3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYW1iaWVudCc6XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS50ZWNobmlxdWUgPSBjaGlsZC5ub2RlTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnBhcmFtZXRlcnMgPSBwYXJzZUxpZ2h0UGFyYW1ldGVycyggY2hpbGQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlTGlnaHRQYXJhbWV0ZXJzKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29sb3InOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IHBhcnNlRmxvYXRzKCBjaGlsZC50ZXh0Q29udGVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY29sb3IgPSBuZXcgVEhSRUUuQ29sb3IoKS5mcm9tQXJyYXkoIGFycmF5ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmYWxsb2ZmX2FuZ2xlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmZhbGxvZmZBbmdsZSA9IHBhcnNlRmxvYXQoIGNoaWxkLnRleHRDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdxdWFkcmF0aWNfYXR0ZW51YXRpb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmID0gcGFyc2VGbG9hdCggY2hpbGQudGV4dENvbnRlbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmRpc3RhbmNlID0gZiA/IE1hdGguc3FydCggMSAvIGYgKSA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZExpZ2h0KCBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBsaWdodDtcbiAgICBcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKCBkYXRhLnRlY2huaXF1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGlyZWN0aW9uYWwnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3BvaW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0ID0gbmV3IFRIUkVFLlBvaW50TGlnaHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdzcG90JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpZ2h0ID0gbmV3IFRIUkVFLlNwb3RMaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FtYmllbnQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGlnaHQgPSBuZXcgVEhSRUUuQW1iaWVudExpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBkYXRhLnBhcmFtZXRlcnMuY29sb3IgKSBsaWdodC5jb2xvci5jb3B5KCBkYXRhLnBhcmFtZXRlcnMuY29sb3IgKTtcbiAgICAgICAgICAgICAgICBpZiAoIGRhdGEucGFyYW1ldGVycy5kaXN0YW5jZSApIGxpZ2h0LmRpc3RhbmNlID0gZGF0YS5wYXJhbWV0ZXJzLmRpc3RhbmNlO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBsaWdodDtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldExpZ2h0KCBpZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGxpYnJhcnkubGlnaHRzWyBpZCBdO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QnVpbGQoIGRhdGEsIGJ1aWxkTGlnaHQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCAnVEhSRUUuQ29sbGFkYUxvYWRlcjogQ291bGRuXFwndCBmaW5kIGxpZ2h0IHdpdGggSUQ6JywgaWQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIC8vIGdlb21ldHJ5XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUdlb21ldHJ5KCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHhtbC5nZXRBdHRyaWJ1dGUoICduYW1lJyApLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgdmVydGljZXM6IHt9LFxuICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmVzOiBbXVxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG1lc2ggPSBnZXRFbGVtZW50c0J5VGFnTmFtZSggeG1sLCAnbWVzaCcgKVsgMCBdO1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIHRoZSBmb2xsb3dpbmcgdGFncyBpbnNpZGUgZ2VvbWV0cnkgYXJlIG5vdCBzdXBwb3J0ZWQgeWV0IChzZWUgaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9wdWxsLzEyNjA2KTogY29udmV4X21lc2gsIHNwbGluZSwgYnJlcFxuICAgICAgICAgICAgICAgIGlmICggbWVzaCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IG1lc2guY2hpbGROb2Rlcy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IG1lc2guY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IGNoaWxkLmdldEF0dHJpYnV0ZSggJ2lkJyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NvdXJjZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zb3VyY2VzWyBpZCBdID0gcGFyc2VTb3VyY2UoIGNoaWxkICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd2ZXJ0aWNlcyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGF0YS5zb3VyY2VzWyBpZCBdID0gZGF0YS5zb3VyY2VzWyBwYXJzZUlkKCBnZXRFbGVtZW50c0J5VGFnTmFtZSggY2hpbGQsICdpbnB1dCcgKVsgMCBdLmdldEF0dHJpYnV0ZSggJ3NvdXJjZScgKSApIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS52ZXJ0aWNlcyA9IHBhcnNlR2VvbWV0cnlWZXJ0aWNlcyggY2hpbGQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3BvbHlnb25zJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBVbnN1cHBvcnRlZCBwcmltaXRpdmUgdHlwZTogJywgY2hpbGQubm9kZU5hbWUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmVzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmVzdHJpcHMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncG9seWxpc3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndHJpYW5nbGVzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnByaW1pdGl2ZXMucHVzaCggcGFyc2VHZW9tZXRyeVByaW1pdGl2ZSggY2hpbGQgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyggY2hpbGQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBsaWJyYXJ5Lmdlb21ldHJpZXNbIHhtbC5nZXRBdHRyaWJ1dGUoICdpZCcgKSBdID0gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlU291cmNlKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGFycmF5OiBbXSxcbiAgICAgICAgICAgICAgICAgICAgc3RyaWRlOiAzXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmbG9hdF9hcnJheSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5hcnJheSA9IHBhcnNlRmxvYXRzKCBjaGlsZC50ZXh0Q29udGVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnTmFtZV9hcnJheSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5hcnJheSA9IHBhcnNlU3RyaW5ncyggY2hpbGQudGV4dENvbnRlbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RlY2huaXF1ZV9jb21tb24nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhY2Nlc3NvciA9IGdldEVsZW1lbnRzQnlUYWdOYW1lKCBjaGlsZCwgJ2FjY2Vzc29yJyApWyAwIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBhY2Nlc3NvciAhPT0gdW5kZWZpbmVkICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnN0cmlkZSA9IHBhcnNlSW50KCBhY2Nlc3Nvci5nZXRBdHRyaWJ1dGUoICdzdHJpZGUnICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUdlb21ldHJ5VmVydGljZXMoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHt9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBkYXRhWyBjaGlsZC5nZXRBdHRyaWJ1dGUoICdzZW1hbnRpYycgKSBdID0gcGFyc2VJZCggY2hpbGQuZ2V0QXR0cmlidXRlKCAnc291cmNlJyApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VHZW9tZXRyeVByaW1pdGl2ZSggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBwcmltaXRpdmUgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHhtbC5ub2RlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWw6IHhtbC5nZXRBdHRyaWJ1dGUoICdtYXRlcmlhbCcgKSxcbiAgICAgICAgICAgICAgICAgICAgY291bnQ6IHBhcnNlSW50KCB4bWwuZ2V0QXR0cmlidXRlKCAnY291bnQnICkgKSxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRzOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgc3RyaWRlOiAwXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZCA9IHBhcnNlSWQoIGNoaWxkLmdldEF0dHJpYnV0ZSggJ3NvdXJjZScgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW1hbnRpYyA9IGNoaWxkLmdldEF0dHJpYnV0ZSggJ3NlbWFudGljJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSBwYXJzZUludCggY2hpbGQuZ2V0QXR0cmlidXRlKCAnb2Zmc2V0JyApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbWl0aXZlLmlucHV0c1sgc2VtYW50aWMgXSA9IHsgaWQ6IGlkLCBvZmZzZXQ6IG9mZnNldCB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW1pdGl2ZS5zdHJpZGUgPSBNYXRoLm1heCggcHJpbWl0aXZlLnN0cmlkZSwgb2Zmc2V0ICsgMSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndmNvdW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmltaXRpdmUudmNvdW50ID0gcGFyc2VJbnRzKCBjaGlsZC50ZXh0Q29udGVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbWl0aXZlLnAgPSBwYXJzZUludHMoIGNoaWxkLnRleHRDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdyb3VwUHJpbWl0aXZlcyggcHJpbWl0aXZlcyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYnVpbGQgPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBwcmltaXRpdmVzLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByaW1pdGl2ZSA9IHByaW1pdGl2ZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBidWlsZFsgcHJpbWl0aXZlLnR5cGUgXSA9PT0gdW5kZWZpbmVkICkgYnVpbGRbIHByaW1pdGl2ZS50eXBlIF0gPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRbIHByaW1pdGl2ZS50eXBlIF0ucHVzaCggcHJpbWl0aXZlICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBidWlsZDtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkR2VvbWV0cnkoIGRhdGEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGJ1aWxkID0ge307XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHNvdXJjZXMgPSBkYXRhLnNvdXJjZXM7XG4gICAgICAgICAgICAgICAgdmFyIHZlcnRpY2VzID0gZGF0YS52ZXJ0aWNlcztcbiAgICAgICAgICAgICAgICB2YXIgcHJpbWl0aXZlcyA9IGRhdGEucHJpbWl0aXZlcztcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHByaW1pdGl2ZXMubGVuZ3RoID09PSAwICkgcmV0dXJuIHt9O1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIG91ciBnb2FsIGlzIHRvIGNyZWF0ZSBvbmUgYnVmZmVyIGdlb2VtdHJ5IGZvciBhIHNpbmdsZSB0eXBlIG9mIHByaW1pdGl2ZXNcbiAgICAgICAgICAgICAgICAvLyBmaXJzdCwgd2UgZ3JvdXAgYWxsIHByaW1pdGl2ZXMgYnkgdGhlaXIgdHlwZVxuICAgIFxuICAgICAgICAgICAgICAgIHZhciBncm91cGVkUHJpbWl0aXZlcyA9IGdyb3VwUHJpbWl0aXZlcyggcHJpbWl0aXZlcyApO1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciB0eXBlIGluIGdyb3VwZWRQcmltaXRpdmVzICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBzZWNvbmQsIHdlIGNyZWF0ZSBmb3IgZWFjaCB0eXBlIG9mIHByaW1pdGl2ZXMgKHBvbHlsaXN0LHRyaWFuZ2xlcyBvciBsaW5lcykgYSBidWZmZXIgZ2VvbWV0cnlcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRbIHR5cGUgXSA9IGJ1aWxkR2VvbWV0cnlUeXBlKCBncm91cGVkUHJpbWl0aXZlc1sgdHlwZSBdLCBzb3VyY2VzLCB2ZXJ0aWNlcyApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gYnVpbGQ7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZEdlb21ldHJ5VHlwZSggcHJpbWl0aXZlcywgc291cmNlcywgdmVydGljZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGJ1aWxkID0ge307XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0geyBhcnJheTogW10sIHN0cmlkZTogMCB9O1xuICAgICAgICAgICAgICAgIHZhciBub3JtYWwgPSB7IGFycmF5OiBbXSwgc3RyaWRlOiAwIH07XG4gICAgICAgICAgICAgICAgdmFyIHV2ID0geyBhcnJheTogW10sIHN0cmlkZTogMCB9O1xuICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IHsgYXJyYXk6IFtdLCBzdHJpZGU6IDAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgc2tpbkluZGV4ID0geyBhcnJheTogW10sIHN0cmlkZTogNCB9O1xuICAgICAgICAgICAgICAgIHZhciBza2luV2VpZ2h0ID0geyBhcnJheTogW10sIHN0cmlkZTogNCB9O1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBtYXRlcmlhbEtleXMgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSAwLCBjb3VudCA9IDA7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIHAgPSAwOyBwIDwgcHJpbWl0aXZlcy5sZW5ndGg7IHAgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmltaXRpdmUgPSBwcmltaXRpdmVzWyBwIF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dHMgPSBwcmltaXRpdmUuaW5wdXRzO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJpYW5nbGVDb3VudCA9IDE7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggcHJpbWl0aXZlLnZjb3VudCAmJiBwcmltaXRpdmUudmNvdW50WyAwIF0gPT09IDQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlhbmdsZUNvdW50ID0gMjsgLy8gb25lIHF1YWQgLT4gdHdvIHRyaWFuZ2xlc1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGdyb3Vwc1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIHByaW1pdGl2ZS50eXBlID09PSAnbGluZXMnIHx8IHByaW1pdGl2ZS50eXBlID09PSAnbGluZXN0cmlwcycgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCA9IHByaW1pdGl2ZS5jb3VudCAqIDI7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCA9IHByaW1pdGl2ZS5jb3VudCAqIDMgKiB0cmlhbmdsZUNvdW50O1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGdlb21ldHJ5LmFkZEdyb3VwKCBzdGFydCwgY291bnQsIHAgKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgKz0gY291bnQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIG1hdGVyaWFsXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggcHJpbWl0aXZlLm1hdGVyaWFsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxLZXlzLnB1c2goIHByaW1pdGl2ZS5tYXRlcmlhbCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGdlb21ldHJ5IGRhdGFcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIG5hbWUgaW4gaW5wdXRzICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gaW5wdXRzWyBuYW1lIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBuYW1lIClcdHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdWRVJURVgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIga2V5IGluIHZlcnRpY2VzICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0gdmVydGljZXNbIGtleSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICgga2V5ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1BPU0lUSU9OJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRHZW9tZXRyeURhdGEoIHByaW1pdGl2ZSwgc291cmNlc1sgaWQgXSwgaW5wdXQub2Zmc2V0LCBwb3NpdGlvbi5hcnJheSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbi5zdHJpZGUgPSBzb3VyY2VzWyBpZCBdLnN0cmlkZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzb3VyY2VzLnNraW5XZWlnaHRzICYmIHNvdXJjZXMuc2tpbkluZGljZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZEdlb21ldHJ5RGF0YSggcHJpbWl0aXZlLCBzb3VyY2VzLnNraW5JbmRpY2VzLCBpbnB1dC5vZmZzZXQsIHNraW5JbmRleC5hcnJheSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRHZW9tZXRyeURhdGEoIHByaW1pdGl2ZSwgc291cmNlcy5za2luV2VpZ2h0cywgaW5wdXQub2Zmc2V0LCBza2luV2VpZ2h0LmFycmF5ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnTk9STUFMJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRHZW9tZXRyeURhdGEoIHByaW1pdGl2ZSwgc291cmNlc1sgaWQgXSwgaW5wdXQub2Zmc2V0LCBub3JtYWwuYXJyYXkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsLnN0cmlkZSA9IHNvdXJjZXNbIGlkIF0uc3RyaWRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdDT0xPUic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkR2VvbWV0cnlEYXRhKCBwcmltaXRpdmUsIHNvdXJjZXNbIGlkIF0sIGlucHV0Lm9mZnNldCwgY29sb3IuYXJyYXkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3Iuc3RyaWRlID0gc291cmNlc1sgaWQgXS5zdHJpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1RFWENPT1JEJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRHZW9tZXRyeURhdGEoIHByaW1pdGl2ZSwgc291cmNlc1sgaWQgXSwgaW5wdXQub2Zmc2V0LCB1di5hcnJheSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1di5zdHJpZGUgPSBzb3VyY2VzWyBpZCBdLnN0cmlkZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCAnVEhSRUUuQ29sbGFkYUxvYWRlcjogU2VtYW50aWMgXCIlc1wiIG5vdCBoYW5kbGVkIGluIGdlb21ldHJ5IGJ1aWxkIHByb2Nlc3MuJywga2V5ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnTk9STUFMJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRHZW9tZXRyeURhdGEoIHByaW1pdGl2ZSwgc291cmNlc1sgaW5wdXQuaWQgXSwgaW5wdXQub2Zmc2V0LCBub3JtYWwuYXJyYXkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsLnN0cmlkZSA9IHNvdXJjZXNbIGlucHV0LmlkIF0uc3RyaWRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdDT0xPUic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkR2VvbWV0cnlEYXRhKCBwcmltaXRpdmUsIHNvdXJjZXNbIGlucHV0LmlkIF0sIGlucHV0Lm9mZnNldCwgY29sb3IuYXJyYXkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3Iuc3RyaWRlID0gc291cmNlc1sgaW5wdXQuaWQgXS5zdHJpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1RFWENPT1JEJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRHZW9tZXRyeURhdGEoIHByaW1pdGl2ZSwgc291cmNlc1sgaW5wdXQuaWQgXSwgaW5wdXQub2Zmc2V0LCB1di5hcnJheSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1di5zdHJpZGUgPSBzb3VyY2VzWyBpbnB1dC5pZCBdLnN0cmlkZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gYnVpbGQgZ2VvbWV0cnlcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHBvc2l0aW9uLmFycmF5Lmxlbmd0aCA+IDAgKSBnZW9tZXRyeS5hZGRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbi5hcnJheSwgcG9zaXRpb24uc3RyaWRlICkgKTtcbiAgICAgICAgICAgICAgICBpZiAoIG5vcm1hbC5hcnJheS5sZW5ndGggPiAwICkgZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IFRIUkVFLkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbC5hcnJheSwgbm9ybWFsLnN0cmlkZSApICk7XG4gICAgICAgICAgICAgICAgaWYgKCBjb2xvci5hcnJheS5sZW5ndGggPiAwICkgZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnY29sb3InLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3IuYXJyYXksIGNvbG9yLnN0cmlkZSApICk7XG4gICAgICAgICAgICAgICAgaWYgKCB1di5hcnJheS5sZW5ndGggPiAwICkgZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCAndXYnLCBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXYuYXJyYXksIHV2LnN0cmlkZSApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBza2luSW5kZXguYXJyYXkubGVuZ3RoID4gMCApIGdlb21ldHJ5LmFkZEF0dHJpYnV0ZSggJ3NraW5JbmRleCcsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBza2luSW5kZXguYXJyYXksIHNraW5JbmRleC5zdHJpZGUgKSApO1xuICAgICAgICAgICAgICAgIGlmICggc2tpbldlaWdodC5hcnJheS5sZW5ndGggPiAwICkgZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCAnc2tpbldlaWdodCcsIG5ldyBUSFJFRS5GbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBza2luV2VpZ2h0LmFycmF5LCBza2luV2VpZ2h0LnN0cmlkZSApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgYnVpbGQuZGF0YSA9IGdlb21ldHJ5O1xuICAgICAgICAgICAgICAgIGJ1aWxkLnR5cGUgPSBwcmltaXRpdmVzWyAwIF0udHlwZTtcbiAgICAgICAgICAgICAgICBidWlsZC5tYXRlcmlhbEtleXMgPSBtYXRlcmlhbEtleXM7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1aWxkO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRHZW9tZXRyeURhdGEoIHByaW1pdGl2ZSwgc291cmNlLCBvZmZzZXQsIGFycmF5ICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBpbmRpY2VzID0gcHJpbWl0aXZlLnA7XG4gICAgICAgICAgICAgICAgdmFyIHN0cmlkZSA9IHByaW1pdGl2ZS5zdHJpZGU7XG4gICAgICAgICAgICAgICAgdmFyIHZjb3VudCA9IHByaW1pdGl2ZS52Y291bnQ7XG4gICAgXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcHVzaFZlY3RvciggaSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gaW5kaWNlc1sgaSArIG9mZnNldCBdICogc291cmNlU3RyaWRlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gaW5kZXggKyBzb3VyY2VTdHJpZGU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXkucHVzaCggc291cmNlQXJyYXlbIGluZGV4IF0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbWF4Y291bnQgPSAwO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBzb3VyY2VBcnJheSA9IHNvdXJjZS5hcnJheTtcbiAgICAgICAgICAgICAgICB2YXIgc291cmNlU3RyaWRlID0gc291cmNlLnN0cmlkZTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIHByaW1pdGl2ZS52Y291bnQgIT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0gdmNvdW50Lmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnQgPSB2Y291bnRbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY291bnQgPT09IDQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBpbmRleCArIHN0cmlkZSAqIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBpbmRleCArIHN0cmlkZSAqIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBpbmRleCArIHN0cmlkZSAqIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBpbmRleCArIHN0cmlkZSAqIDM7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVzaFZlY3RvciggYSApOyBwdXNoVmVjdG9yKCBiICk7IHB1c2hWZWN0b3IoIGQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXNoVmVjdG9yKCBiICk7IHB1c2hWZWN0b3IoIGMgKTsgcHVzaFZlY3RvciggZCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggY291bnQgPT09IDMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBpbmRleCArIHN0cmlkZSAqIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBpbmRleCArIHN0cmlkZSAqIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBpbmRleCArIHN0cmlkZSAqIDI7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVzaFZlY3RvciggYSApOyBwdXNoVmVjdG9yKCBiICk7IHB1c2hWZWN0b3IoIGMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4Y291bnQgPSBNYXRoLm1heCggbWF4Y291bnQsIGNvdW50ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCArPSBzdHJpZGUgKiBjb3VudDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIG1heGNvdW50ID4gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnVEhSRUUuQ29sbGFkYUxvYWRlcjogR2VvbWV0cnkgaGFzIGZhY2VzIHdpdGggbW9yZSB0aGFuIDQgdmVydGljZXMuJyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0gaW5kaWNlcy5sZW5ndGg7IGkgPCBsOyBpICs9IHN0cmlkZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2hWZWN0b3IoIGkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEdlb21ldHJ5KCBpZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QnVpbGQoIGxpYnJhcnkuZ2VvbWV0cmllc1sgaWQgXSwgYnVpbGRHZW9tZXRyeSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLy8ga2luZW1hdGljc1xuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VLaW5lbWF0aWNzTW9kZWwoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogeG1sLmdldEF0dHJpYnV0ZSggJ25hbWUnICkgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIGpvaW50czoge30sXG4gICAgICAgICAgICAgICAgICAgIGxpbmtzOiBbXVxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgeG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndGVjaG5pcXVlX2NvbW1vbic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VLaW5lbWF0aWNzVGVjaG5pcXVlQ29tbW9uKCBjaGlsZCwgZGF0YSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGxpYnJhcnkua2luZW1hdGljc01vZGVsc1sgeG1sLmdldEF0dHJpYnV0ZSggJ2lkJyApIF0gPSBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRLaW5lbWF0aWNzTW9kZWwoIGRhdGEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBkYXRhLmJ1aWxkICE9PSB1bmRlZmluZWQgKSByZXR1cm4gZGF0YS5idWlsZDtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEtpbmVtYXRpY3NNb2RlbCggaWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEJ1aWxkKCBsaWJyYXJ5LmtpbmVtYXRpY3NNb2RlbHNbIGlkIF0sIGJ1aWxkS2luZW1hdGljc01vZGVsICk7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUtpbmVtYXRpY3NUZWNobmlxdWVDb21tb24oIHhtbCwgZGF0YSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdqb2ludCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5qb2ludHNbIGNoaWxkLmdldEF0dHJpYnV0ZSggJ3NpZCcgKSBdID0gcGFyc2VLaW5lbWF0aWNzSm9pbnQoIGNoaWxkICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdsaW5rJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmxpbmtzLnB1c2goIHBhcnNlS2luZW1hdGljc0xpbmsoIGNoaWxkICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlS2luZW1hdGljc0pvaW50KCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGE7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgeG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncHJpc21hdGljJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Jldm9sdXRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gcGFyc2VLaW5lbWF0aWNzSm9pbnRQYXJhbWV0ZXIoIGNoaWxkICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUtpbmVtYXRpY3NKb2ludFBhcmFtZXRlciggeG1sLCBkYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBzaWQ6IHhtbC5nZXRBdHRyaWJ1dGUoICdzaWQnICksXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHhtbC5nZXRBdHRyaWJ1dGUoICduYW1lJyApIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBheGlzOiBuZXcgVEhSRUUuVmVjdG9yMygpLFxuICAgICAgICAgICAgICAgICAgICBsaW1pdHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heDogMFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiB4bWwubm9kZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRpYzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHplcm9Qb3NpdGlvbjogMCxcbiAgICAgICAgICAgICAgICAgICAgbWlkZGxlUG9zaXRpb246IDBcbiAgICAgICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IHhtbC5jaGlsZE5vZGVzLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0geG1sLmNoaWxkTm9kZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjaGlsZC5ub2RlVHlwZSAhPT0gMSApIGNvbnRpbnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCBjaGlsZC5ub2RlTmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2F4aXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IHBhcnNlRmxvYXRzKCBjaGlsZC50ZXh0Q29udGVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuYXhpcy5mcm9tQXJyYXkoIGFycmF5ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdsaW1pdHMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXggPSBjaGlsZC5nZXRFbGVtZW50c0J5VGFnTmFtZSggJ21heCcgKVsgMCBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtaW4gPSBjaGlsZC5nZXRFbGVtZW50c0J5VGFnTmFtZSggJ21pbicgKVsgMCBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubGltaXRzLm1heCA9IHBhcnNlRmxvYXQoIG1heC50ZXh0Q29udGVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubGltaXRzLm1pbiA9IHBhcnNlRmxvYXQoIG1pbi50ZXh0Q29udGVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIGlmIG1pbiBpcyBlcXVhbCB0byBvciBncmVhdGVyIHRoYW4gbWF4LCBjb25zaWRlciB0aGUgam9pbnQgc3RhdGljXG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBkYXRhLmxpbWl0cy5taW4gPj0gZGF0YS5saW1pdHMubWF4ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBkYXRhLnN0YXRpYyA9IHRydWU7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSBtaWRkbGUgcG9zaXRpb25cbiAgICBcbiAgICAgICAgICAgICAgICBkYXRhLm1pZGRsZVBvc2l0aW9uID0gKCBkYXRhLmxpbWl0cy5taW4gKyBkYXRhLmxpbWl0cy5tYXggKSAvIDIuMDtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlS2luZW1hdGljc0xpbmsoIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgc2lkOiB4bWwuZ2V0QXR0cmlidXRlKCAnc2lkJyApLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB4bWwuZ2V0QXR0cmlidXRlKCAnbmFtZScgKSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgYXR0YWNobWVudHM6IFtdLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zOiBbXVxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgeG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYXR0YWNobWVudF9mdWxsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmF0dGFjaG1lbnRzLnB1c2goIHBhcnNlS2luZW1hdGljc0F0dGFjaG1lbnQoIGNoaWxkICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hdHJpeCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0cmFuc2xhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncm90YXRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnRyYW5zZm9ybXMucHVzaCggcGFyc2VLaW5lbWF0aWNzVHJhbnNmb3JtKCBjaGlsZCApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUtpbmVtYXRpY3NBdHRhY2htZW50KCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGpvaW50OiB4bWwuZ2V0QXR0cmlidXRlKCAnam9pbnQnICkuc3BsaXQoICcvJyApLnBvcCgpLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgbGlua3M6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdsaW5rJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmxpbmtzLnB1c2goIHBhcnNlS2luZW1hdGljc0xpbmsoIGNoaWxkICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21hdHJpeCc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0cmFuc2xhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncm90YXRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnRyYW5zZm9ybXMucHVzaCggcGFyc2VLaW5lbWF0aWNzVHJhbnNmb3JtKCBjaGlsZCApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUtpbmVtYXRpY3NUcmFuc2Zvcm0oIHhtbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogeG1sLm5vZGVOYW1lXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBwYXJzZUZsb2F0cyggeG1sLnRleHRDb250ZW50ICk7XG4gICAgXG4gICAgICAgICAgICAgICAgc3dpdGNoICggZGF0YS50eXBlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlICdtYXRyaXgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5vYmogPSBuZXcgVEhSRUUuTWF0cml4NCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5vYmouZnJvbUFycmF5KCBhcnJheSApLnRyYW5zcG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RyYW5zbGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm9iaiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm9iai5mcm9tQXJyYXkoIGFycmF5ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncm90YXRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEub2JqID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEub2JqLmZyb21BcnJheSggYXJyYXkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuYW5nbGUgPSBUSFJFRS5NYXRoLmRlZ1RvUmFkKCBhcnJheVsgMyBdICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZUtpbmVtYXRpY3NTY2VuZSggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBiaW5kSm9pbnRBeGlzOiBbXVxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgeG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmluZF9qb2ludF9heGlzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmJpbmRKb2ludEF4aXMucHVzaCggcGFyc2VLaW5lbWF0aWNzQmluZEpvaW50QXhpcyggY2hpbGQgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGxpYnJhcnkua2luZW1hdGljc1NjZW5lc1sgcGFyc2VJZCggeG1sLmdldEF0dHJpYnV0ZSggJ3VybCcgKSApIF0gPSBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VLaW5lbWF0aWNzQmluZEpvaW50QXhpcyggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHhtbC5nZXRBdHRyaWJ1dGUoICd0YXJnZXQnICkuc3BsaXQoICcvJyApLnBvcCgpXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggY2hpbGQubm9kZVR5cGUgIT09IDEgKSBjb250aW51ZTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggY2hpbGQubm9kZU5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdheGlzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW0gPSBjaGlsZC5nZXRFbGVtZW50c0J5VGFnTmFtZSggJ3BhcmFtJyApWyAwIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5heGlzID0gcGFyYW0udGV4dENvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcEpvaW50SW5kZXggPSBkYXRhLmF4aXMuc3BsaXQoICdpbnN0XycgKS5wb3AoKS5zcGxpdCggJ2F4aXMnIClbIDAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmpvaW50SW5kZXggPSB0bXBKb2ludEluZGV4LnN1YnN0ciggMCwgdG1wSm9pbnRJbmRleC5sZW5ndGggLSAxICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBidWlsZEtpbmVtYXRpY3NTY2VuZSggZGF0YSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAoIGRhdGEuYnVpbGQgIT09IHVuZGVmaW5lZCApIHJldHVybiBkYXRhLmJ1aWxkO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0S2luZW1hdGljc1NjZW5lKCBpZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QnVpbGQoIGxpYnJhcnkua2luZW1hdGljc1NjZW5lc1sgaWQgXSwgYnVpbGRLaW5lbWF0aWNzU2NlbmUgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldHVwS2luZW1hdGljcygpIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIga2luZW1hdGljc01vZGVsSWQgPSBPYmplY3Qua2V5cyggbGlicmFyeS5raW5lbWF0aWNzTW9kZWxzIClbIDAgXTtcbiAgICAgICAgICAgICAgICB2YXIga2luZW1hdGljc1NjZW5lSWQgPSBPYmplY3Qua2V5cyggbGlicmFyeS5raW5lbWF0aWNzU2NlbmVzIClbIDAgXTtcbiAgICAgICAgICAgICAgICB2YXIgdmlzdWFsU2NlbmVJZCA9IE9iamVjdC5rZXlzKCBsaWJyYXJ5LnZpc3VhbFNjZW5lcyApWyAwIF07XG4gICAgXG4gICAgICAgICAgICAgICAgaWYgKCBraW5lbWF0aWNzTW9kZWxJZCA9PT0gdW5kZWZpbmVkIHx8IGtpbmVtYXRpY3NTY2VuZUlkID09PSB1bmRlZmluZWQgKSByZXR1cm47XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGtpbmVtYXRpY3NNb2RlbCA9IGdldEtpbmVtYXRpY3NNb2RlbCgga2luZW1hdGljc01vZGVsSWQgKTtcbiAgICAgICAgICAgICAgICB2YXIga2luZW1hdGljc1NjZW5lID0gZ2V0S2luZW1hdGljc1NjZW5lKCBraW5lbWF0aWNzU2NlbmVJZCApO1xuICAgICAgICAgICAgICAgIHZhciB2aXN1YWxTY2VuZSA9IGdldFZpc3VhbFNjZW5lKCB2aXN1YWxTY2VuZUlkICk7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGJpbmRKb2ludEF4aXMgPSBraW5lbWF0aWNzU2NlbmUuYmluZEpvaW50QXhpcztcbiAgICAgICAgICAgICAgICB2YXIgam9pbnRNYXAgPSB7fTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBiaW5kSm9pbnRBeGlzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBheGlzID0gYmluZEpvaW50QXhpc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgcmVzdWx0IG9mIHRoZSBmb2xsb3dpbmcgcXVlcnkgaXMgYW4gZWxlbWVudCBvZiB0eXBlICd0cmFuc2xhdGUnLCAncm90YXRlJywnc2NhbGUnIG9yICdtYXRyaXgnXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRFbGVtZW50ID0gY29sbGFkYS5xdWVyeVNlbGVjdG9yKCAnW3NpZD1cIicgKyBheGlzLnRhcmdldCArICdcIl0nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggdGFyZ2V0RWxlbWVudCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgcGFyZW50IG9mIHRoZSB0cmFuc2Zyb20gZWxlbWVudFxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudFZpc3VhbEVsZW1lbnQgPSB0YXJnZXRFbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25uZWN0IHRoZSBqb2ludCBvZiB0aGUga2luZW1hdGljcyBtb2RlbCB3aXRoIHRoZSBlbGVtZW50IGluIHRoZSB2aXN1YWwgc2NlbmVcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3QoIGF4aXMuam9pbnRJbmRleCwgcGFyZW50VmlzdWFsRWxlbWVudCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvbm5lY3QoIGpvaW50SW5kZXgsIHZpc3VhbEVsZW1lbnQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciB2aXN1YWxFbGVtZW50TmFtZSA9IHZpc3VhbEVsZW1lbnQuZ2V0QXR0cmlidXRlKCAnbmFtZScgKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGpvaW50ID0ga2luZW1hdGljc01vZGVsLmpvaW50c1sgam9pbnRJbmRleCBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2aXN1YWxTY2VuZS50cmF2ZXJzZSggZnVuY3Rpb24gKCBvYmplY3QgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIG9iamVjdC5uYW1lID09PSB2aXN1YWxFbGVtZW50TmFtZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqb2ludE1hcFsgam9pbnRJbmRleCBdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IG9iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtczogYnVpbGRUcmFuc2Zvcm1MaXN0KCB2aXN1YWxFbGVtZW50ICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpvaW50OiBqb2ludCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGpvaW50Lnplcm9Qb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIG0wID0gbmV3IFRIUkVFLk1hdHJpeDQoKTtcbiAgICBcbiAgICAgICAgICAgICAgICBraW5lbWF0aWNzID0ge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBqb2ludHM6IGtpbmVtYXRpY3NNb2RlbCAmJiBraW5lbWF0aWNzTW9kZWwuam9pbnRzLFxuICAgIFxuICAgICAgICAgICAgICAgICAgICBnZXRKb2ludFZhbHVlOiBmdW5jdGlvbiAoIGpvaW50SW5kZXggKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgam9pbnREYXRhID0gam9pbnRNYXBbIGpvaW50SW5kZXggXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggam9pbnREYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBqb2ludERhdGEucG9zaXRpb247XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybiggJ1RIUkVFLkNvbGxhZGFMb2FkZXI6IEpvaW50ICcgKyBqb2ludEluZGV4ICsgJyBkb2VzblxcJ3QgZXhpc3QuJyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgICAgICBzZXRKb2ludFZhbHVlOiBmdW5jdGlvbiAoIGpvaW50SW5kZXgsIHZhbHVlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGpvaW50RGF0YSA9IGpvaW50TWFwWyBqb2ludEluZGV4IF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGpvaW50RGF0YSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgam9pbnQgPSBqb2ludERhdGEuam9pbnQ7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSA+IGpvaW50LmxpbWl0cy5tYXggfHwgdmFsdWUgPCBqb2ludC5saW1pdHMubWluICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBKb2ludCAnICsgam9pbnRJbmRleCArICcgdmFsdWUgJyArIHZhbHVlICsgJyBvdXRzaWRlIG9mIGxpbWl0cyAobWluOiAnICsgam9pbnQubGltaXRzLm1pbiArICcsIG1heDogJyArIGpvaW50LmxpbWl0cy5tYXggKyAnKS4nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggam9pbnQuc3RhdGljICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBKb2ludCAnICsgam9pbnRJbmRleCArICcgaXMgc3RhdGljLicgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqZWN0ID0gam9pbnREYXRhLm9iamVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF4aXMgPSBqb2ludC5heGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtcyA9IGpvaW50RGF0YS50cmFuc2Zvcm1zO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRyaXguaWRlbnRpdHkoKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWFjaCB1cGRhdGUsIHdlIGhhdmUgdG8gYXBwbHkgYWxsIHRyYW5zZm9ybXMgaW4gdGhlIGNvcnJlY3Qgb3JkZXJcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgdHJhbnNmb3Jtcy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtID0gdHJhbnNmb3Jtc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYSBjb25uZWN0aW9uIG9mIHRoZSB0cmFuc2Zvcm0gbm9kZSB3aXRoIGEgam9pbnQsIGFwcGx5IHRoZSBqb2ludCB2YWx1ZVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB0cmFuc2Zvcm0uc2lkICYmIHRyYW5zZm9ybS5zaWQuaW5kZXhPZiggam9pbnRJbmRleCApICE9PSAtIDEgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggam9pbnQudHlwZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncmV2b2x1dGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0cml4Lm11bHRpcGx5KCBtMC5tYWtlUm90YXRpb25BeGlzKCBheGlzLCBUSFJFRS5NYXRoLmRlZ1RvUmFkKCB2YWx1ZSApICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwcmlzbWF0aWMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0cml4Lm11bHRpcGx5KCBtMC5tYWtlVHJhbnNsYXRpb24oIGF4aXMueCAqIHZhbHVlLCBheGlzLnkgKiB2YWx1ZSwgYXhpcy56ICogdmFsdWUgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBVbmtub3duIGpvaW50IHR5cGU6ICcgKyBqb2ludC50eXBlICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIHRyYW5zZm9ybS50eXBlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtYXRyaXgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0cml4Lm11bHRpcGx5KCB0cmFuc2Zvcm0ub2JqICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndHJhbnNsYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdHJpeC5tdWx0aXBseSggbTAubWFrZVRyYW5zbGF0aW9uKCB0cmFuc2Zvcm0ub2JqLngsIHRyYW5zZm9ybS5vYmoueSwgdHJhbnNmb3JtLm9iai56ICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzY2FsZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRyaXguc2NhbGUoIHRyYW5zZm9ybS5vYmogKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyb3RhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0cml4Lm11bHRpcGx5KCBtMC5tYWtlUm90YXRpb25BeGlzKCB0cmFuc2Zvcm0ub2JqLCB0cmFuc2Zvcm0uYW5nbGUgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5tYXRyaXguY29weSggbWF0cml4ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5tYXRyaXguZGVjb21wb3NlKCBvYmplY3QucG9zaXRpb24sIG9iamVjdC5xdWF0ZXJuaW9uLCBvYmplY3Quc2NhbGUgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgam9pbnRNYXBbIGpvaW50SW5kZXggXS5wb3NpdGlvbiA9IHZhbHVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdUSFJFRS5Db2xsYWRhTG9hZGVyOiAnICsgam9pbnRJbmRleCArICcgZG9lcyBub3QgZXhpc3QuJyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkVHJhbnNmb3JtTGlzdCggbm9kZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtcyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciB4bWwgPSBjb2xsYWRhLnF1ZXJ5U2VsZWN0b3IoICdbaWQ9XCInICsgbm9kZS5pZCArICdcIl0nICk7XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgeG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWF0cml4JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBwYXJzZUZsb2F0cyggY2hpbGQudGV4dENvbnRlbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5mcm9tQXJyYXkoIGFycmF5ICkudHJhbnNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3Jtcy5wdXNoKCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpZDogY2hpbGQuZ2V0QXR0cmlidXRlKCAnc2lkJyApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBjaGlsZC5ub2RlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqOiBtYXRyaXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0cmFuc2xhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2NhbGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IHBhcnNlRmxvYXRzKCBjaGlsZC50ZXh0Q29udGVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2ZWN0b3IgPSBuZXcgVEhSRUUuVmVjdG9yMygpLmZyb21BcnJheSggYXJyYXkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zLnB1c2goIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkOiBjaGlsZC5nZXRBdHRyaWJ1dGUoICdzaWQnICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGNoaWxkLm5vZGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmo6IHZlY3RvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JvdGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gcGFyc2VGbG9hdHMoIGNoaWxkLnRleHRDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZlY3RvciA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuZnJvbUFycmF5KCBhcnJheSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbmdsZSA9IFRIUkVFLk1hdGguZGVnVG9SYWQoIGFycmF5WyAzIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zLnB1c2goIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lkOiBjaGlsZC5nZXRBdHRyaWJ1dGUoICdzaWQnICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGNoaWxkLm5vZGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmo6IHZlY3RvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5nbGU6IGFuZ2xlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1zO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLy8gbm9kZXNcbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHByZXBhcmVOb2RlcyggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggJ25vZGUnICk7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gZW5zdXJlIGFsbCBub2RlIGVsZW1lbnRzIGhhdmUgaWQgYXR0cmlidXRlc1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBlbGVtZW50c1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGVsZW1lbnQuaGFzQXR0cmlidXRlKCAnaWQnICkgPT09IGZhbHNlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoICdpZCcsIGdlbmVyYXRlSWQoKSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgdmFyIG1hdHJpeCA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XG4gICAgICAgICAgICB2YXIgdmVjdG9yID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhcnNlTm9kZSggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB4bWwuZ2V0QXR0cmlidXRlKCAnbmFtZScgKSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogeG1sLmdldEF0dHJpYnV0ZSggJ3R5cGUnICksXG4gICAgICAgICAgICAgICAgICAgIGlkOiB4bWwuZ2V0QXR0cmlidXRlKCAnaWQnICksXG4gICAgICAgICAgICAgICAgICAgIHNpZDogeG1sLmdldEF0dHJpYnV0ZSggJ3NpZCcgKSxcbiAgICAgICAgICAgICAgICAgICAgbWF0cml4OiBuZXcgVEhSRUUuTWF0cml4NCgpLFxuICAgICAgICAgICAgICAgICAgICBub2RlczogW10sXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlQ2FtZXJhczogW10sXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlQ29udHJvbGxlcnM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZUxpZ2h0czogW10sXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlR2VvbWV0cmllczogW10sXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlTm9kZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zOiB7fVxuICAgICAgICAgICAgICAgIH07XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgeG1sLmNoaWxkTm9kZXMubGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB4bWwuY2hpbGROb2Rlc1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLm5vZGVUeXBlICE9PSAxICkgY29udGludWU7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbm9kZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5ub2Rlcy5wdXNoKCBjaGlsZC5nZXRBdHRyaWJ1dGUoICdpZCcgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlTm9kZSggY2hpbGQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2luc3RhbmNlX2NhbWVyYSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5pbnN0YW5jZUNhbWVyYXMucHVzaCggcGFyc2VJZCggY2hpbGQuZ2V0QXR0cmlidXRlKCAndXJsJyApICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2luc3RhbmNlX2NvbnRyb2xsZXInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuaW5zdGFuY2VDb250cm9sbGVycy5wdXNoKCBwYXJzZU5vZGVJbnN0YW5jZSggY2hpbGQgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW5zdGFuY2VfbGlnaHQnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuaW5zdGFuY2VMaWdodHMucHVzaCggcGFyc2VJZCggY2hpbGQuZ2V0QXR0cmlidXRlKCAndXJsJyApICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2luc3RhbmNlX2dlb21ldHJ5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmluc3RhbmNlR2VvbWV0cmllcy5wdXNoKCBwYXJzZU5vZGVJbnN0YW5jZSggY2hpbGQgKSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW5zdGFuY2Vfbm9kZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5pbnN0YW5jZU5vZGVzLnB1c2goIHBhcnNlSWQoIGNoaWxkLmdldEF0dHJpYnV0ZSggJ3VybCcgKSApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtYXRyaXgnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IHBhcnNlRmxvYXRzKCBjaGlsZC50ZXh0Q29udGVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubWF0cml4Lm11bHRpcGx5KCBtYXRyaXguZnJvbUFycmF5KCBhcnJheSApLnRyYW5zcG9zZSgpICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS50cmFuc2Zvcm1zWyBjaGlsZC5nZXRBdHRyaWJ1dGUoICdzaWQnICkgXSA9IGNoaWxkLm5vZGVOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndHJhbnNsYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBwYXJzZUZsb2F0cyggY2hpbGQudGV4dENvbnRlbnQgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWN0b3IuZnJvbUFycmF5KCBhcnJheSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubWF0cml4Lm11bHRpcGx5KCBtYXRyaXgubWFrZVRyYW5zbGF0aW9uKCB2ZWN0b3IueCwgdmVjdG9yLnksIHZlY3Rvci56ICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnRyYW5zZm9ybXNbIGNoaWxkLmdldEF0dHJpYnV0ZSggJ3NpZCcgKSBdID0gY2hpbGQubm9kZU5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyb3RhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcnJheSA9IHBhcnNlRmxvYXRzKCBjaGlsZC50ZXh0Q29udGVudCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbmdsZSA9IFRIUkVFLk1hdGguZGVnVG9SYWQoIGFycmF5WyAzIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm1hdHJpeC5tdWx0aXBseSggbWF0cml4Lm1ha2VSb3RhdGlvbkF4aXMoIHZlY3Rvci5mcm9tQXJyYXkoIGFycmF5ICksIGFuZ2xlICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnRyYW5zZm9ybXNbIGNoaWxkLmdldEF0dHJpYnV0ZSggJ3NpZCcgKSBdID0gY2hpbGQubm9kZU5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzY2FsZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFycmF5ID0gcGFyc2VGbG9hdHMoIGNoaWxkLnRleHRDb250ZW50ICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5tYXRyaXguc2NhbGUoIHZlY3Rvci5mcm9tQXJyYXkoIGFycmF5ICkgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnRyYW5zZm9ybXNbIGNoaWxkLmdldEF0dHJpYnV0ZSggJ3NpZCcgKSBdID0gY2hpbGQubm9kZU5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdleHRyYSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCBjaGlsZCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIGxpYnJhcnkubm9kZXNbIGRhdGEuaWQgXSA9IGRhdGE7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZU5vZGVJbnN0YW5jZSggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBpZDogcGFyc2VJZCggeG1sLmdldEF0dHJpYnV0ZSggJ3VybCcgKSApLFxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbHM6IHt9LFxuICAgICAgICAgICAgICAgICAgICBza2VsZXRvbnM6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCB4bWwuY2hpbGROb2Rlcy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHhtbC5jaGlsZE5vZGVzWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIGNoaWxkLm5vZGVOYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmluZF9tYXRlcmlhbCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlcyA9IGNoaWxkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCAnaW5zdGFuY2VfbWF0ZXJpYWwnICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGogPSAwOyBqIDwgaW5zdGFuY2VzLmxlbmd0aDsgaiArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gaW5zdGFuY2VzWyBqIF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzeW1ib2wgPSBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoICdzeW1ib2wnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBpbnN0YW5jZS5nZXRBdHRyaWJ1dGUoICd0YXJnZXQnICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubWF0ZXJpYWxzWyBzeW1ib2wgXSA9IHBhcnNlSWQoIHRhcmdldCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NrZWxldG9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnNrZWxldG9ucy5wdXNoKCBwYXJzZUlkKCBjaGlsZC50ZXh0Q29udGVudCApICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRTa2VsZXRvbiggc2tlbGV0b25zLCBqb2ludHMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGJvbmVEYXRhID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHNvcnRlZEJvbmVEYXRhID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGksIGosIGRhdGE7XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gYSBza2VsZXRvbiBjYW4gaGF2ZSBtdWx0aXBsZSByb290IGJvbmVzLiBjb2xsYWRhIGV4cHJlc3NlcyB0aGlzXG4gICAgICAgICAgICAgICAgLy8gc2l0dXRhdGlvbiB3aXRoIG11bHRpcGxlIFwic2tlbGV0b25cIiB0YWdzIHBlciBjb250cm9sbGVyIGluc3RhbmNlXG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPCBza2VsZXRvbnMubGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc2tlbGV0b24gPSBza2VsZXRvbnNbIGkgXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvb3QgPSBnZXROb2RlKCBza2VsZXRvbiApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBzZXR1cCBib25lIGRhdGEgZm9yIGEgc2luZ2xlIGJvbmUgaGllcmFyY2h5XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkQm9uZUhpZXJhcmNoeSggcm9vdCwgam9pbnRzLCBib25lRGF0YSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBzb3J0IGJvbmUgZGF0YSAodGhlIG9yZGVyIGlzIGRlZmluZWQgaW4gdGhlIGNvcnJlc3BvbmRpbmcgY29udHJvbGxlcilcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCBpID0gMDsgaSA8IGpvaW50cy5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIGogPSAwOyBqIDwgYm9uZURhdGEubGVuZ3RoOyBqICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGJvbmVEYXRhWyBqIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGRhdGEuYm9uZS5uYW1lID09PSBqb2ludHNbIGkgXS5uYW1lICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRlZEJvbmVEYXRhWyBpIF0gPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucHJvY2Vzc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBhZGQgdW5wcm9jZXNzZWQgYm9uZSBkYXRhIGF0IHRoZSBlbmQgb2YgdGhlIGxpc3RcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCBpID0gMDsgaSA8IGJvbmVEYXRhLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGJvbmVEYXRhWyBpIF07XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggZGF0YS5wcm9jZXNzZWQgPT09IGZhbHNlICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgc29ydGVkQm9uZURhdGEucHVzaCggZGF0YSApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5wcm9jZXNzZWQgPSB0cnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIHNldHVwIGFycmF5cyBmb3Igc2tlbGV0b24gY3JlYXRpb25cbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgYm9uZXMgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgYm9uZUludmVyc2VzID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPCBzb3J0ZWRCb25lRGF0YS5sZW5ndGg7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBzb3J0ZWRCb25lRGF0YVsgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBib25lcy5wdXNoKCBkYXRhLmJvbmUgKTtcbiAgICAgICAgICAgICAgICAgICAgYm9uZUludmVyc2VzLnB1c2goIGRhdGEuYm9uZUludmVyc2UgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5Ta2VsZXRvbiggYm9uZXMsIGJvbmVJbnZlcnNlcyApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRCb25lSGllcmFyY2h5KCByb290LCBqb2ludHMsIGJvbmVEYXRhICkge1xuICAgIFxuICAgICAgICAgICAgICAgIC8vIHNldHVwIGJvbmUgZGF0YSBmcm9tIHZpc3VhbCBzY2VuZVxuICAgIFxuICAgICAgICAgICAgICAgIHJvb3QudHJhdmVyc2UoIGZ1bmN0aW9uICggb2JqZWN0ICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIG9iamVjdC5pc0JvbmUgPT09IHRydWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm9uZUludmVyc2U7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZXRyaWV2ZSB0aGUgYm9uZUludmVyc2UgZnJvbSB0aGUgY29udHJvbGxlciBkYXRhXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBqb2ludHMubGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqb2ludCA9IGpvaW50c1sgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggam9pbnQubmFtZSA9PT0gb2JqZWN0Lm5hbWUgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvbmVJbnZlcnNlID0gam9pbnQuYm9uZUludmVyc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggYm9uZUludmVyc2UgPT09IHVuZGVmaW5lZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVbmZvcnR1bmF0ZWx5LCB0aGVyZSBjYW4gYmUgam9pbnRzIGluIHRoZSB2aXN1YWwgc2NlbmUgdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29ycmVzcG9uZGluZyBjb250cm9sbGVyLiBJbiB0aGlzIGNhc2UsIHdlIGhhdmUgdG8gY3JlYXRlIGEgZHVtbXkgYm9uZUludmVyc2UgbWF0cml4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIHRoZSByZXNwZWN0aXZlIGJvbmUuIFRoaXMgYm9uZSB3b24ndCBhZmZlY3QgYW55IHZlcnRpY2VzLCBiZWNhdXNlIHRoZXJlIGFyZSBubyBza2luIGluZGljZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgd2VpZ2h0cyBkZWZpbmVkIGZvciBpdC4gQnV0IHdlIHN0aWxsIGhhdmUgdG8gYWRkIHRoZSBib25lIHRvIHRoZSBzb3J0ZWQgYm9uZSBsaXN0IGluIG9yZGVyIHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIGEgY29ycmVjdCBhbmltYXRpb24gb2YgdGhlIG1vZGVsLlxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib25lSW52ZXJzZSA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBib25lRGF0YS5wdXNoKCB7IGJvbmU6IG9iamVjdCwgYm9uZUludmVyc2U6IGJvbmVJbnZlcnNlLCBwcm9jZXNzZWQ6IGZhbHNlIH0gKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH0gKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIGJ1aWxkTm9kZSggZGF0YSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBtYXRyaXggPSBkYXRhLm1hdHJpeDtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZXMgPSBkYXRhLm5vZGVzO1xuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZUNhbWVyYXMgPSBkYXRhLmluc3RhbmNlQ2FtZXJhcztcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2VDb250cm9sbGVycyA9IGRhdGEuaW5zdGFuY2VDb250cm9sbGVycztcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2VMaWdodHMgPSBkYXRhLmluc3RhbmNlTGlnaHRzO1xuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZUdlb21ldHJpZXMgPSBkYXRhLmluc3RhbmNlR2VvbWV0cmllcztcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2VOb2RlcyA9IGRhdGEuaW5zdGFuY2VOb2RlcztcbiAgICBcbiAgICAgICAgICAgICAgICAvLyBub2Rlc1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IG5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdHMucHVzaCggZ2V0Tm9kZSggbm9kZXNbIGkgXSApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIC8vIGluc3RhbmNlIGNhbWVyYXNcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBpbnN0YW5jZUNhbWVyYXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlQ2FtZXJhID0gZ2V0Q2FtZXJhKCBpbnN0YW5jZUNhbWVyYXNbIGkgXSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGluc3RhbmNlQ2FtZXJhICE9PSBudWxsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0cy5wdXNoKCBpbnN0YW5jZUNhbWVyYS5jbG9uZSgpICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gaW5zdGFuY2UgY29udHJvbGxlcnNcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBpbnN0YW5jZUNvbnRyb2xsZXJzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGluc3RhbmNlQ29udHJvbGxlcnNbIGkgXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBnZXRDb250cm9sbGVyKCBpbnN0YW5jZS5pZCApO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvbWV0cmllcyA9IGdldEdlb21ldHJ5KCBjb250cm9sbGVyLmlkICk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdPYmplY3RzID0gYnVpbGRPYmplY3RzKCBnZW9tZXRyaWVzLCBpbnN0YW5jZS5tYXRlcmlhbHMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNrZWxldG9ucyA9IGluc3RhbmNlLnNrZWxldG9ucztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGpvaW50cyA9IGNvbnRyb2xsZXIuc2tpbi5qb2ludHM7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBza2VsZXRvbiA9IGJ1aWxkU2tlbGV0b24oIHNrZWxldG9ucywgam9pbnRzICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBqID0gMCwgamwgPSBuZXdPYmplY3RzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iamVjdCA9IG5ld09iamVjdHNbIGogXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggb2JqZWN0LmlzU2tpbm5lZE1lc2ggKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmJpbmQoIHNrZWxldG9uLCBjb250cm9sbGVyLnNraW4uYmluZE1hdHJpeCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5ub3JtYWxpemVTa2luV2VpZ2h0cygpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0cy5wdXNoKCBvYmplY3QgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAvLyBpbnN0YW5jZSBsaWdodHNcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBpbnN0YW5jZUxpZ2h0cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2VMaWdodCA9IGdldExpZ2h0KCBpbnN0YW5jZUxpZ2h0c1sgaSBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggaW5zdGFuY2VMaWdodCAhPT0gbnVsbCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdHMucHVzaCggaW5zdGFuY2VMaWdodC5jbG9uZSgpICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gaW5zdGFuY2UgZ2VvbWV0cmllc1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCwgbCA9IGluc3RhbmNlR2VvbWV0cmllcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBpbnN0YW5jZUdlb21ldHJpZXNbIGkgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gYSBzaW5nbGUgZ2VvbWV0cnkgaW5zdGFuY2UgaW4gY29sbGFkYSBjYW4gbGVhZCB0byBtdWx0aXBsZSBvYmplY3QzRHMuXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIGNhc2Ugd2hlbiBwcmltaXRpdmVzIGFyZSBjb21iaW5lZCBsaWtlIHRyaWFuZ2xlcyBhbmQgbGluZXNcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdlb21ldHJpZXMgPSBnZXRHZW9tZXRyeSggaW5zdGFuY2UuaWQgKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld09iamVjdHMgPSBidWlsZE9iamVjdHMoIGdlb21ldHJpZXMsIGluc3RhbmNlLm1hdGVyaWFscyApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaiA9IDAsIGpsID0gbmV3T2JqZWN0cy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdHMucHVzaCggbmV3T2JqZWN0c1sgaiBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgLy8gaW5zdGFuY2Ugbm9kZXNcbiAgICBcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBpbnN0YW5jZU5vZGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdHMucHVzaCggZ2V0Tm9kZSggaW5zdGFuY2VOb2Rlc1sgaSBdICkuY2xvbmUoKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgb2JqZWN0O1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggbm9kZXMubGVuZ3RoID09PSAwICYmIG9iamVjdHMubGVuZ3RoID09PSAxICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBvYmplY3QgPSBvYmplY3RzWyAwIF07XG4gICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0ID0gKCB0eXBlID09PSAnSk9JTlQnICkgPyBuZXcgVEhSRUUuQm9uZSgpIDogbmV3IFRIUkVFLkdyb3VwKCk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IG9iamVjdHMubGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmFkZCggb2JqZWN0c1sgaSBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgb2JqZWN0Lm5hbWUgPSAoIHR5cGUgPT09ICdKT0lOVCcgKSA/IGRhdGEuc2lkIDogZGF0YS5uYW1lO1xuICAgICAgICAgICAgICAgIG9iamVjdC5tYXRyaXguY29weSggbWF0cml4ICk7XG4gICAgICAgICAgICAgICAgb2JqZWN0Lm1hdHJpeC5kZWNvbXBvc2UoIG9iamVjdC5wb3NpdGlvbiwgb2JqZWN0LnF1YXRlcm5pb24sIG9iamVjdC5zY2FsZSApO1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlTWF0ZXJpYWxCaW5kaW5nKCBrZXlzLCBpbnN0YW5jZU1hdGVyaWFscyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgbWF0ZXJpYWxzID0gW107XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSBpbnN0YW5jZU1hdGVyaWFsc1sga2V5c1sgaSBdIF07XG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFscy5wdXNoKCBnZXRNYXRlcmlhbCggaWQgKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gbWF0ZXJpYWxzO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRPYmplY3RzKCBnZW9tZXRyaWVzLCBpbnN0YW5jZU1hdGVyaWFscyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciB0eXBlIGluIGdlb21ldHJpZXMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IGdlb21ldHJpZXNbIHR5cGUgXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGVyaWFscyA9IHJlc29sdmVNYXRlcmlhbEJpbmRpbmcoIGdlb21ldHJ5Lm1hdGVyaWFsS2V5cywgaW5zdGFuY2VNYXRlcmlhbHMgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIGNhc2UgaWYgbm8gbWF0ZXJpYWxzIGFyZSBkZWZpbmVkXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICggbWF0ZXJpYWxzLmxlbmd0aCA9PT0gMCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdHlwZSA9PT0gJ2xpbmVzJyB8fCB0eXBlID09PSAnbGluZXN0cmlwcycgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxzLnB1c2goIG5ldyBUSFJFRS5MaW5lQmFzaWNNYXRlcmlhbCgpICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFscy5wdXNoKCBuZXcgVEhSRUUuTWVzaFBob25nTWF0ZXJpYWwoKSApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlZ2FyZCBza2lubmluZ1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc2tpbm5pbmcgPSAoIGdlb21ldHJ5LmRhdGEuYXR0cmlidXRlcy5za2luSW5kZXggIT09IHVuZGVmaW5lZCApO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIHNraW5uaW5nICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwLCBsID0gbWF0ZXJpYWxzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWxzWyBpIF0uc2tpbm5pbmcgPSB0cnVlO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGNob29zZSBiZXR3ZWVuIGEgc2luZ2xlIG9yIG11bHRpIG1hdGVyaWFscyAobWF0ZXJpYWwgYXJyYXkpXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRlcmlhbCA9ICggbWF0ZXJpYWxzLmxlbmd0aCA9PT0gMSApID8gbWF0ZXJpYWxzWyAwIF0gOiBtYXRlcmlhbHM7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdyBjcmVhdGUgYSBzcGVjaWZpYyAzRCBvYmplY3RcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9iamVjdDtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICggdHlwZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmVzJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QgPSBuZXcgVEhSRUUuTGluZVNlZ21lbnRzKCBnZW9tZXRyeS5kYXRhLCBtYXRlcmlhbCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbGluZXN0cmlwcyc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0ID0gbmV3IFRIUkVFLkxpbmUoIGdlb21ldHJ5LmRhdGEsIG1hdGVyaWFsICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd0cmlhbmdsZXMnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncG9seWxpc3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggc2tpbm5pbmcgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdCA9IG5ldyBUSFJFRS5Ta2lubmVkTWVzaCggZ2VvbWV0cnkuZGF0YSwgbWF0ZXJpYWwgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QgPSBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnkuZGF0YSwgbWF0ZXJpYWwgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0cy5wdXNoKCBvYmplY3QgKTtcbiAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdHM7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXROb2RlKCBpZCApIHtcbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QnVpbGQoIGxpYnJhcnkubm9kZXNbIGlkIF0sIGJ1aWxkTm9kZSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLy8gdmlzdWFsIHNjZW5lc1xuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gcGFyc2VWaXN1YWxTY2VuZSggeG1sICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiB4bWwuZ2V0QXR0cmlidXRlKCAnbmFtZScgKSxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgICAgICAgICBwcmVwYXJlTm9kZXMoIHhtbCApO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IGdldEVsZW1lbnRzQnlUYWdOYW1lKCB4bWwsICdub2RlJyApO1xuICAgIFxuICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5jaGlsZHJlbi5wdXNoKCBwYXJzZU5vZGUoIGVsZW1lbnRzWyBpIF0gKSApO1xuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICBsaWJyYXJ5LnZpc3VhbFNjZW5lc1sgeG1sLmdldEF0dHJpYnV0ZSggJ2lkJyApIF0gPSBkYXRhO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRWaXN1YWxTY2VuZSggZGF0YSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgZ3JvdXAgPSBuZXcgVEhSRUUuR3JvdXAoKTtcbiAgICAgICAgICAgICAgICBncm91cC5uYW1lID0gZGF0YS5uYW1lO1xuICAgIFxuICAgICAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IGRhdGEuY2hpbGRyZW47XG4gICAgXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlblsgaSBdO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoIGNoaWxkLmlkID09PSBudWxsICkge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXAuYWRkKCBidWlsZE5vZGUoIGNoaWxkICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGFuIElELCBsZXQncyB0cnkgdG8gZ2V0IHRoZSBmaW5pc2hlZCBidWlsZCAoZS5nLiBqb2ludHMgYXJlIGFscmVhZHkgYnVpbGQpXG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5hZGQoIGdldE5vZGUoIGNoaWxkLmlkICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gZ3JvdXA7XG4gICAgXG4gICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRWaXN1YWxTY2VuZSggaWQgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEJ1aWxkKCBsaWJyYXJ5LnZpc3VhbFNjZW5lc1sgaWQgXSwgYnVpbGRWaXN1YWxTY2VuZSApO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLy8gc2NlbmVzXG4gICAgXG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZVNjZW5lKCB4bWwgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHhtbCwgJ2luc3RhbmNlX3Zpc3VhbF9zY2VuZScgKVsgMCBdO1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRWaXN1YWxTY2VuZSggcGFyc2VJZCggaW5zdGFuY2UuZ2V0QXR0cmlidXRlKCAndXJsJyApICkgKTtcbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldHVwQW5pbWF0aW9ucygpIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgY2xpcHMgPSBsaWJyYXJ5LmNsaXBzO1xuICAgIFxuICAgICAgICAgICAgICAgIGlmICggaXNFbXB0eSggY2xpcHMgKSA9PT0gdHJ1ZSApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBpc0VtcHR5KCBsaWJyYXJ5LmFuaW1hdGlvbnMgKSA9PT0gZmFsc2UgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBhcmUgYW5pbWF0aW9ucyBidXQgbm8gY2xpcHMsIHdlIGNyZWF0ZSBhIGRlZmF1bHQgY2xpcCBmb3IgcGxheWJhY2tcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0cmFja3MgPSBbXTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpZCBpbiBsaWJyYXJ5LmFuaW1hdGlvbnMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFuaW1hdGlvblRyYWNrcyA9IGdldEFuaW1hdGlvbiggaWQgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBhbmltYXRpb25UcmFja3MubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tzLnB1c2goIGFuaW1hdGlvblRyYWNrc1sgaSBdICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9ucy5wdXNoKCBuZXcgVEhSRUUuQW5pbWF0aW9uQ2xpcCggJ2RlZmF1bHQnLCAtIDEsIHRyYWNrcyApICk7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgIFxuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaWQgaW4gY2xpcHMgKSB7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25zLnB1c2goIGdldEFuaW1hdGlvbkNsaXAoIGlkICkgKTtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIGNvbnNvbGUudGltZSggJ1RIUkVFLkNvbGxhZGFMb2FkZXInICk7XG4gICAgXG4gICAgICAgICAgICBpZiAoIHRleHQubGVuZ3RoID09PSAwICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiB7IHNjZW5lOiBuZXcgVEhSRUUuU2NlbmUoKSB9O1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgY29uc29sZS50aW1lKCAnVEhSRUUuQ29sbGFkYUxvYWRlcjogRE9NUGFyc2VyJyApO1xuICAgIFxuICAgICAgICAgICAgdmFyIHhtbCA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoIHRleHQsICdhcHBsaWNhdGlvbi94bWwnICk7XG4gICAgXG4gICAgICAgICAgICBjb25zb2xlLnRpbWVFbmQoICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBET01QYXJzZXInICk7XG4gICAgXG4gICAgICAgICAgICB2YXIgY29sbGFkYSA9IGdldEVsZW1lbnRzQnlUYWdOYW1lKCB4bWwsICdDT0xMQURBJyApWyAwIF07XG4gICAgXG4gICAgICAgICAgICAvLyBtZXRhZGF0YVxuICAgIFxuICAgICAgICAgICAgdmFyIHZlcnNpb24gPSBjb2xsYWRhLmdldEF0dHJpYnV0ZSggJ3ZlcnNpb24nICk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyggJ1RIUkVFLkNvbGxhZGFMb2FkZXI6IEZpbGUgdmVyc2lvbicsIHZlcnNpb24gKTtcbiAgICBcbiAgICAgICAgICAgIHZhciBhc3NldCA9IHBhcnNlQXNzZXQoIGdldEVsZW1lbnRzQnlUYWdOYW1lKCBjb2xsYWRhLCAnYXNzZXQnIClbIDAgXSApO1xuICAgICAgICAgICAgdmFyIHRleHR1cmVMb2FkZXIgPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlciggdGhpcy5tYW5hZ2VyICk7XG4gICAgICAgICAgICB0ZXh0dXJlTG9hZGVyLnNldFBhdGgoIHBhdGggKS5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApO1xuICAgIFxuICAgICAgICAgICAgLy9cbiAgICBcbiAgICAgICAgICAgIHZhciBhbmltYXRpb25zID0gW107XG4gICAgICAgICAgICB2YXIga2luZW1hdGljcyA9IHt9O1xuICAgICAgICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICBcbiAgICAgICAgICAgIC8vXG4gICAgXG4gICAgICAgICAgICB2YXIgbGlicmFyeSA9IHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25zOiB7fSxcbiAgICAgICAgICAgICAgICBjbGlwczoge30sXG4gICAgICAgICAgICAgICAgY29udHJvbGxlcnM6IHt9LFxuICAgICAgICAgICAgICAgIGltYWdlczoge30sXG4gICAgICAgICAgICAgICAgZWZmZWN0czoge30sXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWxzOiB7fSxcbiAgICAgICAgICAgICAgICBjYW1lcmFzOiB7fSxcbiAgICAgICAgICAgICAgICBsaWdodHM6IHt9LFxuICAgICAgICAgICAgICAgIGdlb21ldHJpZXM6IHt9LFxuICAgICAgICAgICAgICAgIG5vZGVzOiB7fSxcbiAgICAgICAgICAgICAgICB2aXN1YWxTY2VuZXM6IHt9LFxuICAgICAgICAgICAgICAgIGtpbmVtYXRpY3NNb2RlbHM6IHt9LFxuICAgICAgICAgICAgICAgIGtpbmVtYXRpY3NTY2VuZXM6IHt9XG4gICAgICAgICAgICB9O1xuICAgIFxuICAgICAgICAgICAgY29uc29sZS50aW1lKCAnVEhSRUUuQ29sbGFkYUxvYWRlcjogUGFyc2UnICk7XG4gICAgXG4gICAgICAgICAgICBwYXJzZUxpYnJhcnkoIGNvbGxhZGEsICdsaWJyYXJ5X2FuaW1hdGlvbnMnLCAnYW5pbWF0aW9uJywgcGFyc2VBbmltYXRpb24gKTtcbiAgICAgICAgICAgIHBhcnNlTGlicmFyeSggY29sbGFkYSwgJ2xpYnJhcnlfYW5pbWF0aW9uX2NsaXBzJywgJ2FuaW1hdGlvbl9jbGlwJywgcGFyc2VBbmltYXRpb25DbGlwICk7XG4gICAgICAgICAgICBwYXJzZUxpYnJhcnkoIGNvbGxhZGEsICdsaWJyYXJ5X2NvbnRyb2xsZXJzJywgJ2NvbnRyb2xsZXInLCBwYXJzZUNvbnRyb2xsZXIgKTtcbiAgICAgICAgICAgIHBhcnNlTGlicmFyeSggY29sbGFkYSwgJ2xpYnJhcnlfaW1hZ2VzJywgJ2ltYWdlJywgcGFyc2VJbWFnZSApO1xuICAgICAgICAgICAgcGFyc2VMaWJyYXJ5KCBjb2xsYWRhLCAnbGlicmFyeV9lZmZlY3RzJywgJ2VmZmVjdCcsIHBhcnNlRWZmZWN0ICk7XG4gICAgICAgICAgICBwYXJzZUxpYnJhcnkoIGNvbGxhZGEsICdsaWJyYXJ5X21hdGVyaWFscycsICdtYXRlcmlhbCcsIHBhcnNlTWF0ZXJpYWwgKTtcbiAgICAgICAgICAgIHBhcnNlTGlicmFyeSggY29sbGFkYSwgJ2xpYnJhcnlfY2FtZXJhcycsICdjYW1lcmEnLCBwYXJzZUNhbWVyYSApO1xuICAgICAgICAgICAgcGFyc2VMaWJyYXJ5KCBjb2xsYWRhLCAnbGlicmFyeV9saWdodHMnLCAnbGlnaHQnLCBwYXJzZUxpZ2h0ICk7XG4gICAgICAgICAgICBwYXJzZUxpYnJhcnkoIGNvbGxhZGEsICdsaWJyYXJ5X2dlb21ldHJpZXMnLCAnZ2VvbWV0cnknLCBwYXJzZUdlb21ldHJ5ICk7XG4gICAgICAgICAgICBwYXJzZUxpYnJhcnkoIGNvbGxhZGEsICdsaWJyYXJ5X25vZGVzJywgJ25vZGUnLCBwYXJzZU5vZGUgKTtcbiAgICAgICAgICAgIHBhcnNlTGlicmFyeSggY29sbGFkYSwgJ2xpYnJhcnlfdmlzdWFsX3NjZW5lcycsICd2aXN1YWxfc2NlbmUnLCBwYXJzZVZpc3VhbFNjZW5lICk7XG4gICAgICAgICAgICBwYXJzZUxpYnJhcnkoIGNvbGxhZGEsICdsaWJyYXJ5X2tpbmVtYXRpY3NfbW9kZWxzJywgJ2tpbmVtYXRpY3NfbW9kZWwnLCBwYXJzZUtpbmVtYXRpY3NNb2RlbCApO1xuICAgICAgICAgICAgcGFyc2VMaWJyYXJ5KCBjb2xsYWRhLCAnc2NlbmUnLCAnaW5zdGFuY2Vfa2luZW1hdGljc19zY2VuZScsIHBhcnNlS2luZW1hdGljc1NjZW5lICk7XG4gICAgXG4gICAgICAgICAgICBjb25zb2xlLnRpbWVFbmQoICdUSFJFRS5Db2xsYWRhTG9hZGVyOiBQYXJzZScgKTtcbiAgICBcbiAgICAgICAgICAgIGNvbnNvbGUudGltZSggJ1RIUkVFLkNvbGxhZGFMb2FkZXI6IEJ1aWxkJyApO1xuICAgIFxuICAgICAgICAgICAgYnVpbGRMaWJyYXJ5KCBsaWJyYXJ5LmFuaW1hdGlvbnMsIGJ1aWxkQW5pbWF0aW9uICk7XG4gICAgICAgICAgICBidWlsZExpYnJhcnkoIGxpYnJhcnkuY2xpcHMsIGJ1aWxkQW5pbWF0aW9uQ2xpcCApO1xuICAgICAgICAgICAgYnVpbGRMaWJyYXJ5KCBsaWJyYXJ5LmNvbnRyb2xsZXJzLCBidWlsZENvbnRyb2xsZXIgKTtcbiAgICAgICAgICAgIGJ1aWxkTGlicmFyeSggbGlicmFyeS5pbWFnZXMsIGJ1aWxkSW1hZ2UgKTtcbiAgICAgICAgICAgIGJ1aWxkTGlicmFyeSggbGlicmFyeS5lZmZlY3RzLCBidWlsZEVmZmVjdCApO1xuICAgICAgICAgICAgYnVpbGRMaWJyYXJ5KCBsaWJyYXJ5Lm1hdGVyaWFscywgYnVpbGRNYXRlcmlhbCApO1xuICAgICAgICAgICAgYnVpbGRMaWJyYXJ5KCBsaWJyYXJ5LmNhbWVyYXMsIGJ1aWxkQ2FtZXJhICk7XG4gICAgICAgICAgICBidWlsZExpYnJhcnkoIGxpYnJhcnkubGlnaHRzLCBidWlsZExpZ2h0ICk7XG4gICAgICAgICAgICBidWlsZExpYnJhcnkoIGxpYnJhcnkuZ2VvbWV0cmllcywgYnVpbGRHZW9tZXRyeSApO1xuICAgICAgICAgICAgYnVpbGRMaWJyYXJ5KCBsaWJyYXJ5LnZpc3VhbFNjZW5lcywgYnVpbGRWaXN1YWxTY2VuZSApO1xuICAgIFxuICAgICAgICAgICAgY29uc29sZS50aW1lRW5kKCAnVEhSRUUuQ29sbGFkYUxvYWRlcjogQnVpbGQnICk7XG4gICAgXG4gICAgICAgICAgICBzZXR1cEFuaW1hdGlvbnMoKTtcbiAgICAgICAgICAgIHNldHVwS2luZW1hdGljcygpO1xuICAgIFxuICAgICAgICAgICAgdmFyIHNjZW5lID0gcGFyc2VTY2VuZSggZ2V0RWxlbWVudHNCeVRhZ05hbWUoIGNvbGxhZGEsICdzY2VuZScgKVsgMCBdICk7XG4gICAgXG4gICAgICAgICAgICBpZiAoIGFzc2V0LnVwQXhpcyA9PT0gJ1pfVVAnICkge1xuICAgIFxuICAgICAgICAgICAgICAgIHNjZW5lLnJvdGF0aW9uLnggPSAtIE1hdGguUEkgLyAyO1xuICAgIFxuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgc2NlbmUuc2NhbGUubXVsdGlwbHlTY2FsYXIoIGFzc2V0LnVuaXQgKTtcbiAgICBcbiAgICAgICAgICAgIGNvbnNvbGUudGltZUVuZCggJ1RIUkVFLkNvbGxhZGFMb2FkZXInICk7XG4gICAgXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbnM6IGFuaW1hdGlvbnMsXG4gICAgICAgICAgICAgICAga2luZW1hdGljczoga2luZW1hdGljcyxcbiAgICAgICAgICAgICAgICBsaWJyYXJ5OiBsaWJyYXJ5LFxuICAgICAgICAgICAgICAgIHNjZW5lOiBzY2VuZVxuICAgICAgICAgICAgfTtcbiAgICBcbiAgICAgICAgfVxuICAgIFxuICAgIH07Iiwie0Jhc2VDbGFzc30gPSByZXF1aXJlICcuL19CYXNlQ2xhc3MuY29mZmVlJ1xuXG5hY2NlcHRlZE1vZGVsUHJvcGVydGllcyA9IFtcbiAgICAneCdcbiAgICAneSdcbiAgICAneidcbiAgICAncm90YXRpb25YJ1xuICAgICdyb3RhdGlvblknXG4gICAgJ3JvdGF0aW9uWidcbiAgICAnc2NhbGUnXG4gICAgJ3NjYWxlWCdcbiAgICAnc2NhbGVZJ1xuICAgICdzY2FsZVonXG4gICAgJ29wdGlvbnMnXG5dXG5cbnJlc2VydmVkU3RhdGVFcnJvciA9IChuYW1lKSAtPlxuXHR0aHJvdyBFcnJvcihcIlRoZSBzdGF0ZSAnI3tuYW1lfScgaXMgYSByZXNlcnZlZCBuYW1lLlwiKVxuXG5jbGFzcyBleHBvcnRzLlN0YXRlcyBleHRlbmRzIEJhc2VDbGFzc1xuXG4gICAgY29uc3RydWN0b3I6IChtb2RlbCkgLT5cbiAgICAgICAgc3VwZXIoKVxuXG4gICAgICAgIEBtb2RlbCA9IG1vZGVsXG5cbiAgICAgICAgQGluaXRpYWxNb2RlbFByb3BlcnRpZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgQG1vZGVsLmluaXRpYWxQcm9wZXJ0aWVzXG5cbiAgICAgICAgQHN0YXRlcyA9IFxuICAgICAgICAgICAgZGVmYXVsdDogQGZpbHRlclByb3BlcnRpZXMgQGluaXRpYWxNb2RlbFByb3BlcnRpZXNcbiAgICAgICAgICAgIGN1cnJlbnQ6IEBmaWx0ZXJQcm9wZXJ0aWVzIEBpbml0aWFsTW9kZWxQcm9wZXJ0aWVzXG5cbiAgICBmaWx0ZXJQcm9wZXJ0aWVzOiAocHJvcGV0aWVzKSAtPlxuICAgICAgICBuZXdQcm9wZXJ0eU9iaiA9IHt9XG4gICAgICAgIHByb3BldGllcy5tYXAgKGspID0+XG4gICAgICAgICAgICBpZiBhY2NlcHRlZE1vZGVsUHJvcGVydGllcy5pbmNsdWRlcyBrXG4gICAgICAgICAgICAgICAgbmV3UHJvcGVydHlPYmpba10gPSBAbW9kZWxba11cbiAgICAgICAgcmV0dXJuIG5ld1Byb3BlcnR5T2JqXG4gICAgXG4gICAgQGRlZmluZSAnY3VycmVudCcsXG4gICAgICAgIGdldDogLT4gQHN0YXRlcy5jdXJyZW50LFxuICAgICAgICBzZXQ6IChzdGF0ZSkgLT5cbiAgICAgICAgICAgIEBzdGF0ZXMucHJldmlvdXMgPSBAc3RhdGVzLmN1cnJlbnRcbiAgICAgICAgICAgIEBzdGF0ZXMuY3VycmVudCA9IHN0YXRlXG4gICAgXG4gICAgQGRlZmluZSAncHJldmlvdXMnLFxuICAgICAgICBnZXQ6IC0+IEBzdGF0ZXMucHJldmlvdXMiLCJfID0gRnJhbWVyLl9cblxucmVxdWlyZSAnLi9saWIvT3JiaXRDb250cm9scydcbntCYXNlQ2xhc3N9ID0gcmVxdWlyZSAnLi9fQmFzZUNsYXNzLmNvZmZlZSdcbntBbmltYXRpb259ID0gcmVxdWlyZSAnLi9fQW5pbWF0aW9uLmNvZmZlZSdcbntTdGF0ZXN9ID0gcmVxdWlyZSAnLi9fU3RhdGVzLmNvZmZlZSdcblxuY2xhc3MgZXhwb3J0cy5DYW1lcmEgZXh0ZW5kcyBCYXNlQ2xhc3NcbiAgICBjb25zdHJ1Y3RvcjogKHByb3BlcnRpZXM9e30sIHNjZW5lRE9NKSAtPlxuICAgICAgICBzdXBlcigpXG5cbiAgICAgICAgQHNjZW5lRE9NID0gc2NlbmVET01cblxuICAgICAgICBfLmRlZmF1bHRzIHByb3BlcnRpZXMsXG4gICAgICAgICAgICB4OiAwXG4gICAgICAgICAgICB5OiAwXG4gICAgICAgICAgICB6OiA1MDBcbiAgICAgICAgICAgIHJvdGF0aW9uWDogMFxuICAgICAgICAgICAgcm90YXRpb25ZOiAwXG4gICAgICAgICAgICByb3RhdGlvblo6IDBcbiAgICAgICAgICAgIGZvdjogMzVcbiAgICAgICAgICAgIG5lYXI6IDAuMVxuICAgICAgICAgICAgZmFyOiAxMDAwMFxuICAgICAgICAgICAgZW5hYmxlUGFuOiBmYWxzZVxuICAgICAgICAgICAgZW5hYmxlWm9vbTogZmFsc2VcbiAgICAgICAgICAgIGVuYWJsZVJvdGF0ZTogZmFsc2VcbiAgICAgICAgICAgIGF1dG9Sb3RhdGU6IGZhbHNlXG4gICAgICAgICAgICBhdXRvUm90YXRlU3BlZWQ6IDEwXG4gICAgICAgICAgICB0YXJnZXQ6IG5ldyBUSFJFRS5WZWN0b3IzIDAsIDAsIDBcblxuICAgICAgICBAbmF0aXZlQ2FtZXJhID0gbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKFxuICAgICAgICAgICAgcHJvcGVydGllcy5mb3YsIFxuICAgICAgICAgICAgcHJvcGVydGllcy5hc3BlY3QsIFxuICAgICAgICAgICAgcHJvcGVydGllcy5uZWFyLCBcbiAgICAgICAgICAgIHByb3BlcnRpZXMuZmFyXG4gICAgICAgIClcblxuICAgICAgICBpZiBwcm9wZXJ0aWVzLm9yYml0Q29udHJvbHNcbiAgICAgICAgICAgIEBzZXR1cE9yYml0Q29udHJvbHMgcHJvcGVydGllc1xuXG4gICAgICAgIEBzZXRQb3NpdGlvbiBbcHJvcGVydGllcy54LCBwcm9wZXJ0aWVzLnksIHByb3BlcnRpZXMuel1cbiAgICAgICAgQHNldFJvdGF0aW9uIFtwcm9wZXJ0aWVzLnJvdGF0aW9uWCwgcHJvcGVydGllcy5yb3RhdGlvblksIHByb3BlcnRpZXMucm90YXRpb25aXVxuXG4gICAgICAgIEBzYXZlSW5pdGlhbFByb3BlcnRpZXMoKVxuXG4gICAgICAgIEBfc3RhdGVzID0gbmV3IFN0YXRlcyBAXG4gICAgXG4gICAgc2V0dXBPcmJpdENvbnRyb2xzOiAocHJvcGVydGllcykgLT5cbiAgICAgICAgQGNvbnRyb2xzID0gbmV3IFRIUkVFLk9yYml0Q29udHJvbHMgQG5hdGl2ZUNhbWVyYSwgQHNjZW5lRE9NXG4gICAgICAgIEBlbmFibGVQYW4gPSBwcm9wZXJ0aWVzLmVuYWJsZVBhblxuICAgICAgICBAZW5hYmxlWm9vbSA9IHByb3BlcnRpZXMuZW5hYmxlWm9vbVxuICAgICAgICBAZW5hYmxlUm90YXRlID0gcHJvcGVydGllcy5lbmFibGVSb3RhdGVcbiAgICAgICAgQGF1dG9Sb3RhdGUgPSBwcm9wZXJ0aWVzLmF1dG9Sb3RhdGVcbiAgICAgICAgQGF1dG9Sb3RhdGVTcGVlZCA9IHByb3BlcnRpZXMuYXV0b1JvdGF0ZVNwZWVkXG4gICAgICAgIEB0YXJnZXQgPSBwcm9wZXJ0aWVzLnRhcmdldFxuXG4gICAgc2F2ZUluaXRpYWxQcm9wZXJ0aWVzOiAoKSAtPlxuICAgICAgICBAaW5pdGlhbFByb3BlcnRpZXMgPSBAXG5cbiAgICBvbjogKGV2ZW50TmFtZSwgY2IpIC0+XG5cbiAgICAgICAgaWYgZXZlbnROYW1lLmluY2x1ZGVzICdjaGFuZ2UnXG4gICAgICAgICAgICBjYWxsYmFjayA9IChlKSAtPiBjYihlLnZhbHVlKVxuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5hZGRFdmVudExpc3RlbmVyIGV2ZW50TmFtZSwgY2FsbGJhY2tcblxuICAgICAgICAgICAgRnJhbWVyLkN1cnJlbnRDb250ZXh0Lm9uICdyZXNldCcsID0+XG4gICAgICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5yZW1vdmVFdmVudExpc3RlbmVyIGV2ZW50TmFtZSwgY2FsbGJhY2tcblxuICAgIHNldFBvc2l0aW9uOiAocG9zaXRpb25zKSAtPlxuICAgICAgICBAeCA9IHBvc2l0aW9uc1swXVxuICAgICAgICBAeSA9IHBvc2l0aW9uc1sxXVxuICAgICAgICBAeiA9IHBvc2l0aW9uc1syXVxuICAgIFxuICAgIHNldFJvdGF0aW9uOiAocm90YXRpb25zKSAtPlxuICAgICAgICBAcm90YXRpb25YID0gcm90YXRpb25zWzBdXG4gICAgICAgIEByb3RhdGlvblkgPSByb3RhdGlvbnNbMV1cbiAgICAgICAgQHJvdGF0aW9uWiA9IHJvdGF0aW9uc1syXVxuICAgIFxuICAgIGFuaW1hdGU6IChwcm9wZXJ0aWVzKSAtPlxuICAgICAgICBuZXcgQW5pbWF0aW9uIEAsIHByb3BlcnRpZXNcbiAgICBcbiAgICBsb29rQXQ6IChhLCBiLCBjKSAtPlxuICAgICAgICBpZiBhcmd1bWVudHMubGVuZ3RoID09IDFcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEubG9va0F0IGFcbiAgICAgICAgZWxzZSBpZiBhcmd1bWVudHMubGVuZ3RoID09IDNcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEubG9va0F0IGEsIGIsIGNcbiAgICBcbiAgICBzdGF0ZVN3aXRjaDogKHN0YXRlKSAtPlxuICAgICAgICAjIExvb3AgdGhyb3VnaCBzdGF0ZXMgb24gbW9kZWwgdG8gZmluZCB0aGUgc3BlY2lmaWVkIG9uZVxuICAgICAgICBPYmplY3Qua2V5cyhAc3RhdGVzKS5tYXAgKGspID0+IFxuICAgICAgICAgICAgaWYgayA9PSBzdGF0ZVxuICAgICAgICAgICAgICAgIEBzdGF0ZXMuY3VycmVudCA9IEBzdGF0ZXNba11cblxuICAgICAgICAgICAgICAgICMgTG9vcCB0aHJvdWdoIHByb3BlcnR5IGtleXMgb24gdGhlIHN0YXRlIGFuZCBhcHBseSB0aGUgdmFsdWVzIHRvIG1vZGVsXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoQHN0YXRlcy5jdXJyZW50KS5tYXAgKHBrKSAgPT5cbiAgICAgICAgICAgICAgICAgICAgQFtwa10gPSBAc3RhdGVzLmN1cnJlbnRbcGtdXG4gICAgXG4gICAgc3RhdGVDeWNsZTogKHN0YXRlQSwgc3RhdGVCKSAtPlxuICAgICAgICAjIENoZWNrIGlmIHN0YXRlQSBvciBzdGF0ZUIgYWxyZWFkeSBpcyB0aGUgY3VycmVudCBzdGF0ZSBvbiBtb2RlbFxuICAgICAgICBpZiBAc3RhdGVzLmN1cnJlbnQgPT0gQHN0YXRlc1tzdGF0ZUFdIHx8IEBzdGF0ZXMuY3VycmVudCA9PSBAc3RhdGVzW3N0YXRlQl1cbiAgICAgICAgICAgIGlmIEBzdGF0ZXMuY3VycmVudCA9PSBAc3RhdGVzW3N0YXRlQV0gdGhlbiBAYW5pbWF0ZSBzdGF0ZUJcbiAgICAgICAgICAgIGVsc2UgaWYgQHN0YXRlcy5jdXJyZW50ID09IEBzdGF0ZXNbc3RhdGVCXSB0aGVuIEBhbmltYXRlIHN0YXRlQVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICAjIElmIG5laXRoZXIgYXJlIGN1cnJlbnQsIGFuaW1hdGUgdG8gc3RhdGVBXG4gICAgICAgICAgICBAYW5pbWF0ZSBzdGF0ZUFcblxuICAgIEBkZWZpbmUgJ3Bvc2l0aW9uJyxcbiAgICAgICAgZ2V0OiAtPiBAbmF0aXZlQ2FtZXJhLnBvc2l0aW9uXG4gICAgXG4gICAgQGRlZmluZSAneCcsXG4gICAgICAgIGdldDogLT4gQG5hdGl2ZUNhbWVyYS5wb3NpdGlvbi54XG4gICAgICAgIHNldDogKHgpIC0+IFxuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5wb3NpdGlvbi54ID0geFxuICAgICAgICAgICAgQGNvbnRyb2xzLnVwZGF0ZSgpIGlmIEBjb250cm9sc1xuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOngnLCB2YWx1ZTogQHh9XG4gICAgXG4gICAgQGRlZmluZSAneScsXG4gICAgICAgIGdldDogLT4gQG5hdGl2ZUNhbWVyYS5wb3NpdGlvbi55XG4gICAgICAgIHNldDogKHkpIC0+IFxuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5wb3NpdGlvbi55ID0geVxuICAgICAgICAgICAgQGNvbnRyb2xzLnVwZGF0ZSgpIGlmIEBjb250cm9sc1xuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOnknLCB2YWx1ZTogQHl9XG4gICAgXG4gICAgQGRlZmluZSAneicsXG4gICAgICAgIGdldDogLT4gQG5hdGl2ZUNhbWVyYS5wb3NpdGlvbi56XG4gICAgICAgIHNldDogKHopIC0+IFxuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5wb3NpdGlvbi56ID0gelxuICAgICAgICAgICAgQGNvbnRyb2xzLnVwZGF0ZSgpIGlmIEBjb250cm9sc1xuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOnonLCB2YWx1ZTogQHp9XG5cbiAgICBAZGVmaW5lICdyb3RhdGlvbicsXG4gICAgICAgIGdldDogLT4gQG5hdGl2ZUNhbWVyYS5yb3RhdGlvblxuICAgIFxuICAgIEBkZWZpbmUgJ3JvdGF0aW9uWCcsXG4gICAgICAgIGdldDogLT4gVEhSRUUuTWF0aC5yYWRUb0RlZyBAbmF0aXZlQ2FtZXJhLnJvdGF0aW9uLnhcbiAgICAgICAgc2V0OiAoeCkgLT4gXG4gICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLnJvdGF0aW9uLnggPSBUSFJFRS5NYXRoLmRlZ1RvUmFkIHhcbiAgICAgICAgICAgIEBjb250cm9scy51cGRhdGUoKSBpZiBAY29udHJvbHNcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpyb3RhdGlvblgnLCB2YWx1ZTogQHJvdGF0aW9uWH1cbiAgICBcbiAgICBAZGVmaW5lICdyb3RhdGlvblknLFxuICAgICAgICBnZXQ6IC0+IFRIUkVFLk1hdGgucmFkVG9EZWcgQG5hdGl2ZUNhbWVyYS5yb3RhdGlvbi55XG4gICAgICAgIHNldDogKHkpIC0+IFxuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5yb3RhdGlvbi55ID0gVEhSRUUuTWF0aC5kZWdUb1JhZCB5XG4gICAgICAgICAgICBAY29udHJvbHMudXBkYXRlKCkgaWYgQGNvbnRyb2xzXG4gICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6cm90YXRpb25ZJywgdmFsdWU6IEByb3RhdGlvbll9XG4gICAgXG4gICAgQGRlZmluZSAncm90YXRpb25aJyxcbiAgICAgICAgZ2V0OiAtPiBUSFJFRS5NYXRoLnJhZFRvRGVnIEBuYXRpdmVDYW1lcmEucm90YXRpb24uelxuICAgICAgICBzZXQ6ICh6KSAtPiBcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEucm90YXRpb24ueiA9IFRIUkVFLk1hdGguZGVnVG9SYWQgelxuICAgICAgICAgICAgQGNvbnRyb2xzLnVwZGF0ZSgpIGlmIEBjb250cm9sc1xuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOnJvdGF0aW9uWicsIHZhbHVlOiBAcm90YXRpb25afVxuICAgIFxuICAgIEBkZWZpbmUgJ2ZvdicsXG4gICAgICAgIGdldDogLT4gQG5hdGl2ZUNhbWVyYS5mb3ZcbiAgICAgICAgc2V0OiAoZm92KSAtPiBcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEuZm92ID0gZm92XG4gICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6Zm92JywgdmFsdWU6IEBmb3Z9XG4gICAgXG4gICAgQGRlZmluZSAnem9vbScsXG4gICAgICAgIGdldDogLT4gQG5hdGl2ZUNhbWVyYS56b29tXG4gICAgICAgIHNldDogKGZhY3RvcikgLT4gXG4gICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLnpvb20gPSBmYWN0b3JcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTp6b29tJywgdmFsdWU6IEB6b29tfVxuICAgIFxuICAgIEBkZWZpbmUgJ25lYXInLFxuICAgICAgICBnZXQ6IC0+IEBuYXRpdmVDYW1lcmEubmVhclxuICAgICAgICBzZXQ6IChuZWFyKSAtPiBcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEubmVhciA9IG5lYXJcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpuZWFyJywgdmFsdWU6IEBuZWFyfVxuICAgIFxuICAgIEBkZWZpbmUgJ2ZhcicsXG4gICAgICAgIGdldDogLT4gQG5hdGl2ZUNhbWVyYS5mYXJcbiAgICAgICAgc2V0OiAoZmFyKSAtPiBcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEuZmFyID0gZmFyXG4gICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6ZmFyJywgdmFsdWU6IEBmYXJ9XG4gICAgXG4gICAgQGRlZmluZSAnYXNwZWN0JyxcbiAgICAgICAgZ2V0OiAtPiBAbmF0aXZlQ2FtZXJhLmFzcGVjdFxuICAgICAgICBzZXQ6IChhc3BlY3QpIC0+IFxuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5hc3BlY3QgPSBhc3BlY3RcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTphc3BlY3QnLCB2YWx1ZTogQGFzcGVjdH1cbiAgICBcbiAgICBAZGVmaW5lICdzdGF0ZXMnLFxuICAgICAgICBnZXQ6IC0+XG4gICAgICAgICAgICBAX3N0YXRlcy5zdGF0ZXNcbiAgICAgICAgc2V0OiAoc3RhdGVzKSAtPlxuICAgICAgICAgICAgXy5leHRlbmQgQHN0YXRlcywgc3RhdGVzXG5cbiAgICBAZGVmaW5lICdlbmFibGVQYW4nLFxuICAgICAgICBnZXQ6IC0+IEBjb250cm9scy5lbmFibGVQYW5cbiAgICAgICAgc2V0OiAoYm9vbCkgLT5cbiAgICAgICAgICAgIEBjb250cm9scy5lbmFibGVQYW4gPSBib29sXG4gICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6ZW5hYmxlUGFuJywgdmFsdWU6IEBlbmFibGVQYW59XG4gICAgXG4gICAgQGRlZmluZSAnZW5hYmxlWm9vbScsXG4gICAgICAgIGdldDogLT4gQGNvbnRyb2xzLmVuYWJsZVpvb21cbiAgICAgICAgc2V0OiAoYm9vbCkgLT4gXG4gICAgICAgICAgICBAY29udHJvbHMuZW5hYmxlWm9vbSA9IGJvb2xcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTplbmFibGVab29tJywgdmFsdWU6IEBlbmFibGVab29tfVxuICAgIFxuICAgIEBkZWZpbmUgJ2VuYWJsZVJvdGF0ZScsXG4gICAgICAgIGdldDogLT4gQGNvbnRyb2xzLmVuYWJsZVJvdGF0ZVxuICAgICAgICBzZXQ6IChib29sKSAtPiBcbiAgICAgICAgICAgIEBjb250cm9scy5lbmFibGVSb3RhdGUgPSBib29sXG4gICAgICAgICAgICBAbmF0aXZlQ2FtZXJhLmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6ZW5hYmxlUm90YXRlJywgdmFsdWU6IEBlbmFibGVSb3RhdGV9XG4gICAgXG4gICAgQGRlZmluZSAnYXV0b1JvdGF0ZScsXG4gICAgICAgIGdldDogLT4gQGNvbnRyb2xzLmF1dG9Sb3RhdGVcbiAgICAgICAgc2V0OiAoYm9vbCkgLT4gXG4gICAgICAgICAgICBAY29udHJvbHMuYXV0b1JvdGF0ZSA9IGJvb2xcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTphdXRvUm90YXRlJywgdmFsdWU6IEBhdXRvUm90YXRlfVxuICAgIFxuICAgIEBkZWZpbmUgJ2F1dG9Sb3RhdGVTcGVlZCcsXG4gICAgICAgIGdldDogLT4gQGNvbnRyb2xzLmF1dG9Sb3RhdGVTcGVlZFxuICAgICAgICBzZXQ6IChzcGVlZCkgLT4gXG4gICAgICAgICAgICBAY29udHJvbHMuYXV0b1JvdGF0ZVNwZWVkID0gc3BlZWRcbiAgICAgICAgICAgIEBuYXRpdmVDYW1lcmEuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTphdXRvUm90YXRlU3BlZWQnLCB2YWx1ZTogQGF1dG9Sb3RhdGVTcGVlZH1cbiAgICBcbiAgICBAZGVmaW5lICd0YXJnZXQnLFxuICAgICAgICBnZXQ6IC0+IEBjb250cm9scy50YXJnZXRcbiAgICAgICAgc2V0OiAodmVjdG9yMykgLT4gXG4gICAgICAgICAgICBAY29udHJvbHMudGFyZ2V0ID0gdmVjdG9yM1xuICAgICAgICAgICAgQG5hdGl2ZUNhbWVyYS5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOnRhcmdldCcsIHZhbHVlOiBAdGFyZ2V0fSIsImNsYXNzIGV4cG9ydHMuQmFzZUNsYXNzXG5cbiAgICBAZGVmaW5lID0gKHByb3BlcnR5TmFtZSwgZGVzY3JpcHRvcikgLT5cbiAgICAgICAgaWYgZGVzY3JpcHRvci5yZWFkb25seVxuICAgICAgICAgICAgZGVzY3JpcHRvci5zZXQgPSAodmFsdWUpIC0+XG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCIje0Bjb25zdHJ1Y3Rvci5uYW1lfS4je3Byb3BlcnR5TmFtZX0gaXMgcmVhZG9ubHlcIilcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQHByb3RvdHlwZSwgcHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yKSIsIl8gPSBGcmFtZXIuX1xuXG57TW9kZWx9ID0gcmVxdWlyZSAnLi9Nb2RlbC5jb2ZmZWUnXG5cbmNsYXNzIGV4cG9ydHMuQW5pbWF0aW9uIGV4dGVuZHMgRnJhbWVyLkV2ZW50RW1pdHRlclxuICAgIGNvbnN0cnVjdG9yOiAobW9kZWwsIHByb3BlcnRpZXM9e30pIC0+XG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgXG4gICAgICAgIGlmICFwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IgJ1BsZWFzZSBzcGVjaWZ5IHByb3BlcnRpZXMgb3IgYSBzdGF0ZSB0byBhbmltYXRlISdcbiAgICAgICAgICAgIFxuICAgICAgICAjIElmIHByb3BlcnRpZXMgaXMgYSBzdHJpbmcsIHRoZW4gaXQgaXMgYSBTdGF0ZSBOYW1lXG4gICAgICAgIGlmIF8uaXNTdHJpbmcgcHJvcGVydGllc1xuICAgICAgICAgICAgc3RhdGVOYW1lID0gcHJvcGVydGllc1xuXG4gICAgICAgICAgICAjIExvb3AgdGhyb3VnaCBzdGF0ZXMgb24gbW9kZWwgdG8gZmluZCB0aGUgc3BlY2lmaWVkIHN0YXRlXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhtb2RlbC5zdGF0ZXMpLm1hcCAoaykgPT4gXG4gICAgICAgICAgICAgICAgaWYgayA9PSBzdGF0ZU5hbWVcbiAgICAgICAgICAgICAgICAgICAgIyBTZXQgY3VycmVudCBzdGF0ZSB0byBzcGVjaWZpZWQgc3RhdGUgYW5kIGFwcGx5IHN0YXRlIHByb3BlcnRpZXMgdG8gcHJvcGVydGllcyB2YXJpYWJsZVxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5zdGF0ZXMuY3VycmVudCA9IG1vZGVsLnN0YXRlc1trXVxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0gbW9kZWwuc3RhdGVzW3N0YXRlTmFtZV1cblxuICAgICAgICBAcHJvcGVydGllcyA9IEBmaWx0ZXJQcm9wZXJ0aWVzIHByb3BlcnRpZXNcbiAgICAgICAgQG9wdGlvbnMgPSBfLmRlZmF1bHRzIHByb3BlcnRpZXMub3B0aW9ucywgXG4gICAgICAgICAgICB0aW1lOiAxXG4gICAgICAgICAgICBkZWxheTogMFxuICAgICAgICAgICAgY3VydmU6ICdsaW5lYXInXG5cbiAgICAgICAgIyBEZWxheSB0aGUgbG9vcCBpZiBzcGVjaWZpZWQsIG90aGVyd2lzZSAwc1xuICAgICAgICBVdGlscy5kZWxheSBAb3B0aW9ucy5kZWxheSwgPT5cblxuICAgICAgICAgICAgQG1vZGVsID0gbW9kZWxcbiAgICAgICAgICAgIEBtZXNoID0gbW9kZWwubWVzaCB8fCBtb2RlbC5saWdodCB8fCBtb2RlbC5uYXRpdmVDYW1lcmFcbiAgICAgICAgICAgIEBmcHMgPSA2MFxuICAgICAgICAgICAgQHRpbWUgPSBAb3B0aW9ucy50aW1lXG4gICAgICAgICAgICBAcmVuZGVyZWRGcmFtZXMgPSAwXG4gICAgICAgICAgICBAdG90YWxGcmFtZXMgPSBAdGltZSAqIEBmcHNcbiAgICAgICAgICAgIEBtb2RlbFByb3BlcnR5SW5pdGlhbFZhbHVlcyA9IHt9XG4gICAgICAgICAgICBAZGVsdGFzID0gQGNhbGN1bGF0ZURlbHRhcygpXG5cblxuICAgICAgICAgICAgIyBJZiB0aGVyZSBhcmUgZGlmZmVyZW5jZXMgYmV0d2VlbiBhbmltYXRpb24gcHJvcGVydHkgdmFsdWVzIGFuZCB0aGUgbW9kZWwncyBjdXJyZW50IHByb3BlcnR5IHZhbHVlcyAoRGVsdGEpXG4gICAgICAgICAgICBpZiBAZGVsdGFzLmxlbmd0aFxuICAgICAgICAgICAgICAgICMgQ3JlYXRlIGFuIGludGVydmFsIHRoYXQgcnVucyBldmVyeSA2MCBzZWNvbmRzXG4gICAgICAgICAgICAgICAgQGludGVydmFsRGlzcG9zZXIgPSBzZXRJbnRlcnZhbCAoKSA9PiBcbiAgICAgICAgICAgICAgICAgICAgIyBDaGVjayBpZiB0aGUgYW1vdW50IG9mIHJlbmRlcmVkIGZyYW1lcyBleGNlZWRzIGFtb3VudCBvZiB0b3RhbCBmcmFtZXMgdGhhdCB0aGUgYW5pbXRpb24gaXMgc3VwcG9zZWQgdG8gcnVuIGZvclxuICAgICAgICAgICAgICAgICAgICBpZiBAcmVuZGVyZWRGcmFtZXMgPj0gQHRvdGFsRnJhbWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAjIElmIGl0IGV4Y2VlZHMsIGRpc3Bvc2UvZW5kIHRoZSBhbmltYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBAZGlzcG9zZUludGVydmFsXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAjIEVsc2Uga2VlcCB0aGUgbG9vcCBnb2luZ1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgQGFuaW1hdGlvbkxvb3BcbiAgICAgICAgICAgICAgICAgICAgQHJlbmRlcmVkRnJhbWVzKytcbiAgICAgICAgICAgICAgICAsIDEwMDAgLyBAZnBzXG4gICAgICAgICAgICBcbiAgICAgICAgICAgICMgTWFrZSBzdXJlIHRvIGRpc3Bvc2Ugb3VyIGFuaW1hdGlvbiBsb29wIGlmIEZyYW1lcidzIEN1cnJlbnRDb250ZXh0IHJlc2V0c1xuICAgICAgICAgICAgIyBPdGhlcndpc2Ugd2UnbGwgbGVhayBsb2FkcyBvZiBtZW1vcnlcbiAgICAgICAgICAgIEZyYW1lci5DdXJyZW50Q29udGV4dC5vbiAncmVzZXQnLCA9PlxuICAgICAgICAgICAgICAgIGlmIEBpbnRlcnZhbERpc3Bvc2VyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwgQGludGVydmFsRGlzcG9zZXJcblxuICAgIGZpbHRlclByb3BlcnRpZXM6IChwcm9wZXJ0aWVzKSAtPlxuICAgICAgICBwcm9wcyA9IE9iamVjdC5hc3NpZ24ge30sIHByb3BlcnRpZXNcbiAgICAgICAgZGVsZXRlIHByb3BzLm9wdGlvbnNcbiAgICAgICAgcHJvcHNcblxuICAgIGNhbGN1bGF0ZURlbHRhczogKCkgLT5cbiAgICAgICAgIyBMb29wIHRocm91Z2ggYWxsIHByb3BlcnRpZXMgYW5kIGNhbGN1bGF0ZSB0aGUgZGVsdGEgYmV0d2VlbiBjdXJyZW50IG1vZGVsIHByb3BlcnR5IHZhbHVlIGFuZFxuICAgICAgICAjIHRoZSB2YWx1ZSBzcGVjaWZpZWQgaW4gdGhpcyBhbmltYXRpb25cbiAgICAgICAgIyBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYW4gYXJyYXkgb2Yga2V5L3ZhbHVlIHBhaXJzIHRoYXQgY29udGFpbnMgdGhlIHZhbHVlIChEZWx0YSkgdG8gYW5pbWF0ZSBmb3IgZXZlcnkgcHJvcGVydHlcblxuICAgICAgICBkZWx0YXMgPSBPYmplY3Qua2V5cyhAcHJvcGVydGllcykubWFwIChrKSA9PlxuXG4gICAgICAgICAgICBAbW9kZWxQcm9wZXJ0eUluaXRpYWxWYWx1ZXNba10gPSBAbW9kZWxba11cblxuICAgICAgICAgICAgbmV3T2JqID0ge31cbiAgICAgICAgICAgIGlmIEBtb2RlbFtrXSA+IEBwcm9wZXJ0aWVzW2tdXG4gICAgICAgICAgICAgICAgbmV3T2JqW2tdID0gLU1hdGguYWJzIEBtb2RlbFtrXSAtIEBwcm9wZXJ0aWVzW2tdXG4gICAgICAgICAgICBlbHNlIGlmIEBtb2RlbFtrXSA8IEBwcm9wZXJ0aWVzW2tdXG4gICAgICAgICAgICAgICAgbmV3T2JqW2tdID0gTWF0aC5hYnMgQG1vZGVsW2tdIC0gQHByb3BlcnRpZXNba11cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICBuZXdPYmpcblxuICAgICAgICBkZWx0YXMuZmlsdGVyIChkKSAtPlxuICAgICAgICAgICAgZFxuXG4gICAgYXBwbHlFYXNpbmc6ICh0LCBiLCBjLCBkKSAtPlxuXG4gICAgICAgIGlmIEBvcHRpb25zLmN1cnZlLmluY2x1ZGVzICdlYXNlJ1xuICAgICAgICAgICAgQFtAb3B0aW9ucy5jdXJ2ZV0gdCwgYiwgYywgZFxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBAbGluZWFyIHQsIGIsIGMsIGRcblxuICAgIGFuaW1hdGlvbkxvb3A6ICgpID0+XG5cbiAgICAgICAgZm9yIGRlbHRhLCBpIGluIEBkZWx0YXNcblxuICAgICAgICAgICAgcHJvcCA9IE9iamVjdC5rZXlzKGRlbHRhKVswXVxuICAgICAgICAgICAgZGVsdGFWYWx1ZSA9IE9iamVjdC52YWx1ZXMoZGVsdGEpWzBdXG5cbiAgICAgICAgICAgIGVhc2VkVmFsdWUgPSBAYXBwbHlFYXNpbmcoQHJlbmRlcmVkRnJhbWVzLCBAbW9kZWxQcm9wZXJ0eUluaXRpYWxWYWx1ZXNbcHJvcF0sIGRlbHRhVmFsdWUsIEB0b3RhbEZyYW1lcylcblxuICAgICAgICAgICAgQG1vZGVsW3Byb3BdID0gZWFzZWRWYWx1ZVxuXG4gICAgZGlzcG9zZUludGVydmFsOiAoKSAtPlxuICAgICAgICBjbGVhckludGVydmFsIEBpbnRlcnZhbERpc3Bvc2VyXG4gICAgXG5cblxuXG4gICAgbGluZWFyOiAodCwgYiwgYywgZCkgLT5cbiAgICAgICAgYyAqIHQgLyBkICsgYlxuXG4gICAgZWFzZUluUXVhZDogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgIGMgKiAodCAvPSBkKSAqIHQgKyBiXG5cbiAgICBlYXNlT3V0UXVhZDogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgIC1jICogKHQgLz0gZCkgKiAodCAtIDIpICsgYlxuXG4gICAgZWFzZUluT3V0UXVhZDogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgIGlmICh0IC89IGQgLyAyKSA8IDFcbiAgICAgICAgICAgIGMgLyAyICogdCAqIHQgKyBiXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIC1jIC8gMiAqICgoLS10KSAqICh0IC0gMikgLSAxKSArIGJcblxuICAgIGVhc2VJbkN1YmljOiAodCwgYiwgYywgZCkgLT5cbiAgICAgICAgYyAqICh0IC89IGQpICogdCAqIHQgKyBiXG5cbiAgICBlYXNlT3V0Q3ViaWM6ICh0LCBiLCBjLCBkKSAtPlxuICAgICAgICBjICogKCh0ID0gdCAvIGQgLSAxKSAqIHQgKiB0ICsgMSkgKyBiXG5cbiAgICBlYXNlSW5PdXRDdWJpYzogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgIGlmICh0IC89IGQgLyAyKSA8IDEgXG4gICAgICAgICAgICBjIC8gMiAqIHQgKiB0ICogdCArIGJcbiAgICAgICAgZWxzZSBcbiAgICAgICAgICAgIGMgLyAyICogKCh0IC09IDIpICogdCAqIHQgKyAyKSArIGJcblxuICAgIGVhc2VJblF1YXJ0OiAodCwgYiwgYywgZCkgLT5cbiAgICAgICAgYyAqICh0IC89IGQpICogdCAqIHQgKiB0ICsgYlxuXG4gICAgZWFzZU91dFF1YXJ0OiAodCwgYiwgYywgZCkgLT5cbiAgICAgICAgLWMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqIHQgKiB0IC0gMSkgKyBiXG5cbiAgICBlYXNlSW5PdXRRdWFydDogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgIGlmICh0IC89IGQgLyAyKSA8IDFcbiAgICAgICAgICAgIGMgLyAyICogdCAqIHQgKiB0ICogdCArIGJcbiAgICAgICAgZWxzZSBcbiAgICAgICAgICAgIC1jIC8gMiAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAtIDIpICsgYlxuXG4gICAgZWFzZUluUXVpbnQ6ICh0LCBiLCBjLCBkKSAtPlxuICAgICAgICBjICogKHQgLz0gZCkgKiB0ICogdCAqIHQgKiB0ICsgYlxuXG4gICAgZWFzZU91dFF1aW50OiAodCwgYiwgYywgZCkgLT5cbiAgICAgICAgYyAqICgodCA9IHQgLyBkIC0gMSkgKiB0ICogdCAqIHQgKiB0ICsgMSkgKyBiXG5cbiAgICBlYXNlSW5PdXRRdWludDogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgIGlmICh0IC89IGQgLyAyKSA8IDFcbiAgICAgICAgICAgIGMgLyAyICogdCAqIHQgKiB0ICogdCAqIHQgKyBiXG4gICAgICAgIGVsc2UgXG4gICAgICAgICAgICBjIC8gMiAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAqIHQgKyAyKSArIGJcblxuICAgIGVhc2VJblNpbmU6ICh0LCBiLCBjLCBkKSAtPlxuICAgICAgICAtYyAqIE1hdGguY29zKHQgLyBkICogKE1hdGguUEkgLyAyKSkgKyBjICsgYlxuXG4gICAgZWFzZU91dFNpbmU6ICh0LCBiLCBjLCBkKSAtPlxuICAgICAgICBjICogTWF0aC5zaW4odCAvIGQgKiAoTWF0aC5QSSAvIDIpKSArIGJcblxuICAgIGVhc2VJbk91dFNpbmU6ICh0LCBiLCBjLCBkKSAtPlxuICAgICAgICAtYyAvIDIgKiAoTWF0aC5jb3MoTWF0aC5QSSAqIHQgLyBkKSAtIDEpICsgYlxuXG4gICAgZWFzZUluRXhwbzogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgICh0ID09IDApID8gYiA6IGMgKiBNYXRoLnBvdygyLCAxMCAqICh0IC8gZCAtIDEpKSArIGJcblxuICAgIGVhc2VPdXRFeHBvOiAodCwgYiwgYywgZCkgLT5cbiAgICAgICAgKHQgPT0gZCkgPyBiICsgYyA6IGMgKiAoLU1hdGgucG93KDIsIC0xMCAqIHQgLyBkKSArIDEpICsgYlxuXG4gICAgZWFzZUluT3V0RXhwbzogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgIGlmIHQgPT0gMFxuICAgICAgICAgICAgYlxuICAgICAgICBpZiB0ID09IGRcbiAgICAgICAgICAgIGIgKyBjXG4gICAgICAgIGlmICh0IC89IGQgLyAyKSA8IDEgXG4gICAgICAgICAgICBjIC8gMiAqIE1hdGgucG93KDIsIDEwICogKHQgLSAxKSkgKyBiXG4gICAgICAgIGVsc2UgXG4gICAgICAgICAgICBjIC8gMiAqICgtTWF0aC5wb3coMiwgLTEwICogLS10KSArIDIpICsgYlxuXG4gICAgZWFzZUluQ2lyYzogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgIC1jICogKE1hdGguc3FydCgxIC0gKHQgLz0gZCkgKiB0KSAtIDEpICsgYlxuXG4gICAgZWFzZU91dENpcmM6ICh0LCBiLCBjLCBkKSAtPlxuICAgICAgICBjICogTWF0aC5zcXJ0KDEgLSAodCA9IHQgLyBkIC0gMSkgKiB0KSArIGJcblxuICAgIGVhc2VJbk91dENpcmM6ICh0LCBiLCBjLCBkKSAtPlxuICAgICAgICBpZiAodCAvPSBkIC8gMikgPCAxXG4gICAgICAgICAgICAtYyAvIDIgKiAoTWF0aC5zcXJ0KDEgLSB0ICogdCkgLSAxKSArIGJcbiAgICAgICAgZWxzZSBcbiAgICAgICAgICAgIGMgLyAyICogKE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpICsgYlxuXG4gICAgZWFzZUluRWxhc3RpYzogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgIHMgPSAxLjcwMTU4XG4gICAgICAgIHAgPSAwXG4gICAgICAgIGEgPSBjXG5cbiAgICAgICAgaWYgdCA9PSAwIFxuICAgICAgICAgICAgYiAgXG4gICAgICAgIGlmICh0IC89IGQpID09IDFcbiAgICAgICAgICAgIGIgKyBjXG5cbiAgICAgICAgaWYgIXAgXG4gICAgICAgICAgICBwID0gZCAqIC4zXG4gICAgICAgIGlmIGEgPCBNYXRoLmFicyhjKVxuICAgICAgICAgICAgYSA9IGNcbiAgICAgICAgICAgIHMgPSBwIC8gNFxuICAgICAgICBlbHNlIFxuICAgICAgICAgICAgcyA9IHAgLyAoMiAqIE1hdGguUEkpICogTWF0aC5hc2luIChjIC8gYSlcblxuICAgICAgICAtKGEgKiBNYXRoLnBvdygyLCAxMCAqICh0IC09IDEpKSAqIE1hdGguc2luKCh0ICogZCAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHAgKSkgKyBiXG5cbiAgICBlYXNlT3V0RWxhc3RpYzogKHQsIGIsIGMsIGQpIC0+XG4gICAgICAgIHMgPSAxLjcwMTU4XG4gICAgICAgIHAgPSAwXG4gICAgICAgIGEgPSBjXG5cbiAgICAgICAgaWYgdCA9PSAwIFxuICAgICAgICAgICAgYlxuICAgICAgICBpZiAodCAvPSBkKSA9PSAxIFxuICAgICAgICAgICAgYiArIGMgXG5cbiAgICAgICAgaWYgIXBcbiAgICAgICAgICAgIHAgPSBkICogLjNcbiAgICAgICAgaWYgYSA8IE1hdGguYWJzKGMpXG4gICAgICAgICAgICBhID0gY1xuICAgICAgICAgICAgcyA9IHAgLyA0XG4gICAgICAgIGVsc2UgXG4gICAgICAgICAgICBzID0gcCAvICgyICogTWF0aC5QSSkgKiBNYXRoLmFzaW4gKGMgLyBhKVxuXG4gICAgICAgIGEgKiBNYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKCh0ICogZCAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApICsgYyArIGJcblxuICAgIGVhc2VJbk91dEVsYXN0aWM6ICh0LCBiLCBjLCBkKSAtPlxuICAgICAgICBzID0gMS43MDE1OFxuICAgICAgICBwID0gMFxuICAgICAgICBhID0gY1xuXG4gICAgICAgIGlmIHQgPT0gMFxuICAgICAgICAgICAgYlxuICAgICAgICBpZiAodCAvPSBkIC8gMikgPT0gMlxuICAgICAgICAgICAgYiArIGMgXG4gICAgICAgIFxuICAgICAgICBpZiAhcCBcbiAgICAgICAgICAgIHAgPSBkICogKC4zICogMS41KVxuICAgICAgICBpZiBhIDwgTWF0aC5hYnMoYylcbiAgICAgICAgICAgIGEgPSBjXG4gICAgICAgICAgICBzID0gcCAvIDRcbiAgICAgICAgZWxzZSBcbiAgICAgICAgICAgIHMgPSBwIC8gKDIgKiBNYXRoLlBJKSAqIE1hdGguYXNpbiAoYyAvIGEpXG4gICAgICAgIGlmICh0IDwgMSkgXG4gICAgICAgICAgICAtLjUgKiAoYSAqIE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICogTWF0aC5zaW4oKHQgKiBkIC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkpICsgYlxuICAgICAgICBcbiAgICAgICAgYSAqIE1hdGgucG93KDIsIC0xMCAqICh0IC09IDEpKSAqIE1hdGguc2luKCh0ICogZCAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApICogLjUgKyBjICsgYiIsIl8gPSBGcmFtZXIuX1xuXG57U2NlbmV9ID0gcmVxdWlyZSAnLi9TY2VuZS5jb2ZmZWUnXG5cbmNsYXNzIGV4cG9ydHMuU3R1ZGlvIGV4dGVuZHMgU2NlbmVcbiAgICBjb25zdHJ1Y3RvcjogKHByb3BlcnRpZXM9e30pIC0+XG5cbiAgICAgICAgXy5kZWZhdWx0cyBwcm9wZXJ0aWVzLFxuICAgICAgICAgICAgY2FtZXJhOlxuICAgICAgICAgICAgICAgIHk6IDIyMFxuICAgICAgICAgICAgICAgIHJvdGF0aW9uWDogLTE1XG5cbiAgICAgICAgc3VwZXIgcHJvcGVydGllc1xuXG4gICAgICAgIEBzY2VuZS5iYWNrZ3JvdW5kID0gbmV3IFRIUkVFLkNvbG9yIDB4RkZGNkVCXG4gICAgICAgIEBzY2VuZS5mb2cgPSBuZXcgVEhSRUUuRm9nIDB4RkZGNkVCLCA0MDAsIDEwMDBcblxuICAgICAgICBAaGxpZ2h0ID0gbmV3IFRIUkVFLkhlbWlzcGhlcmVMaWdodCAweGZmZmZmZiwgMHg0NDQ0NDRcbiAgICAgICAgQGhsaWdodC5wb3NpdGlvbi55ID0gMjAwXG4gICAgICAgIEBzY2VuZS5hZGQgQGhsaWdodFxuXG4gICAgICAgIEBsaWdodCA9IG5ldyBUSFJFRS5Qb2ludExpZ2h0IDB4ZmZmZmZmLCAuMVxuICAgICAgICBAbGlnaHQucG9zaXRpb24uc2V0IDAsIDgwMCwgMFxuICAgICAgICBAbGlnaHQuY2FzdFNoYWRvdyA9IHRydWVcbiAgICAgICAgQGxpZ2h0LnNoYWRvdy5jYW1lcmEubmVhciA9IDEwMFxuICAgICAgICBAbGlnaHQuc2hhZG93LmNhbWVyYS5mYXIgPSAxMDAwXG4gICAgICAgIEBsaWdodC5zaGFkb3cuYmlhcyA9IC4wMDAxXG4gICAgICAgIEBsaWdodC5zaGFkb3cucmFkaXVzID0gNVxuICAgICAgICBAbGlnaHQuc2hhZG93Lm1hcFNpemUud2lkdGggPSAxMDI0XG4gICAgICAgIEBsaWdodC5zaGFkb3cubWFwU2l6ZS5oZWlnaHQgPSAxMDI0XG4gICAgICAgIEBzY2VuZS5hZGQgQGxpZ2h0XG5cbiAgICAgICAgQGxpZ2h0MiA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0IDB4ZmY5OTk5LCAuM1xuICAgICAgICBAbGlnaHQyLnBvc2l0aW9uLnNldCAtMTAwLCAyMDAsIC0zMDBcbiAgICAgICAgQHNjZW5lLmFkZCBAbGlnaHQyXG5cbiAgICAgICAgQGxpZ2h0MyA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0IDB4NjY2NmZmLCAuMlxuICAgICAgICBAbGlnaHQzLnBvc2l0aW9uLnNldCAxMDAsIDIwMCwgLTMwMFxuICAgICAgICBAc2NlbmUuYWRkIEBsaWdodDNcblxuICAgICAgICBAbGlnaHQ0ID0gbmV3IFRIUkVFLkRpcmVjdGlvbmFsTGlnaHQgMHhmZjk5OTksIC4zXG4gICAgICAgIEBsaWdodDQucG9zaXRpb24uc2V0IC0xMDAsIDIwMCwgMzAwXG4gICAgICAgIEBzY2VuZS5hZGQgQGxpZ2h0NFxuXG4gICAgICAgIEBsaWdodDUgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCAweDY2NjZmZiwgLjJcbiAgICAgICAgQGxpZ2h0NS5wb3NpdGlvbi5zZXQgMTAwLCAyMDAsIDMwMFxuICAgICAgICBAc2NlbmUuYWRkIEBsaWdodDVcblxuICAgICAgICBAZmxvb3JHZW8gPSBuZXcgVEhSRUUuQ2lyY2xlR2VvbWV0cnkgODAwLCAxMDBcbiAgICAgICAgQGZsb29yTWF0ID0gbmV3IFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsXG4gICAgICAgICAgICByb3VnaG5lc3M6IC42XG4gICAgICAgICAgICBjb2xvcjogMHhhYWFhYWFcbiAgICAgICAgICAgIG1ldGFsbmVzczogMC4yXG4gICAgICAgICAgICBidW1wU2NhbGU6IDAuMDAwNVxuICAgICAgICBAZmxvb3IgPSBuZXcgVEhSRUUuTWVzaCBAZmxvb3JHZW8sIEBmbG9vck1hdFxuICAgICAgICBAZmxvb3Iucm90YXRpb24ueCA9IC1NYXRoLlBJIC8gMlxuICAgICAgICBAZmxvb3IucmVjZWl2ZVNoYWRvdyA9IHRydWVcbiAgICAgICAgIyBAc2NlbmUuYWRkIEBmbG9vclxuXG4gICAgICAgICMjI1xuICAgICAgICBAZ3JpZCA9IG5ldyBUSFJFRS5HcmlkSGVscGVyIDIwMDAsIDIwLCAweDAwMDAwMCwgMHgwMDAwMDBcbiAgICAgICAgQGdyaWQubWF0ZXJpYWwub3BhY2l0eSA9IC4yXG4gICAgICAgIEBncmlkLm1hdGVyaWFsLnRyYW5zcGFyZW50ID0gdHJ1ZVxuICAgICAgICBAc2NlbmUuYWRkIEBncmlkXG4gICAgICAgICMjI1xuIiwiXyA9IEZyYW1lci5fXG5cbntDYW1lcmF9ID0gcmVxdWlyZSAnLi9fQ2FtZXJhLmNvZmZlZSdcblxuY2xhc3MgZXhwb3J0cy5TY2VuZSBleHRlbmRzIExheWVyXG4gICAgY29uc3RydWN0b3I6IChwcm9wZXJ0aWVzPXt9KSAtPlxuICAgICAgICBzdXBlciBfLmRlZmF1bHRzIHByb3BlcnRpZXMsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMDAwJ1xuXG4gICAgICAgICMgUkVOREVSRVJcbiAgICAgICAgXG4gICAgICAgIEByZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyXG4gICAgICAgICAgICBhbnRpYWxpYXM6IHRydWVcbiAgICAgICAgICAgIGFscGhhOiB0cnVlXG5cbiAgICAgICAgQF9lbGVtZW50LmFwcGVuZENoaWxkIEByZW5kZXJlci5kb21FbGVtZW50XG4gICAgICAgIEByZW5kZXJlci5zZXRTaXplIEB3aWR0aCwgQGhlaWdodFxuICAgICAgICBAcmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpb1xuICAgICAgICBAcmVuZGVyZXIuZG9tRWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJ1xuICAgICAgICBAcmVuZGVyZXIuZG9tRWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnMTAwJSdcbiAgICAgICAgQHJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkID0gdHJ1ZVxuICAgICAgICBAcmVuZGVyZXIuc2hhZG93TWFwLnR5cGUgPSBUSFJFRS5QQ0ZTb2Z0U2hhZG93TWFwXG5cblxuICAgICAgICAjIFNDRU5FXG5cbiAgICAgICAgQHNjZW5lID0gbmV3IFRIUkVFLlNjZW5lXG5cblxuICAgICAgICAjIENBTUVSQVxuXG4gICAgICAgIGNhbWVyYVByb3BzID0gXy5kZWZhdWx0cyBwcm9wZXJ0aWVzLmNhbWVyYSxcbiAgICAgICAgICAgIGFzcGVjdDogQHdpZHRoIC8gQGhlaWdodFxuXG4gICAgICAgIEBjYW1lcmEgPSBuZXcgQ2FtZXJhIGNhbWVyYVByb3BzLCBALl9lbGVtZW50XG5cblxuICAgICAgICAjIFJFU0laSU5HXG5cbiAgICAgICAgQ2FudmFzLm9uUmVzaXplIEBvbldpbmRvd1Jlc2l6ZVxuXG5cbiAgICAgICAgIyBSQVlDQVNURVJcblxuICAgICAgICBAcmF5Y2FzdGVyID0gbmV3IFRIUkVFLlJheWNhc3RlclxuICAgICAgICBAbW91c2UgPSBuZXcgVEhSRUUuVmVjdG9yMlxuICAgICAgICBAaW50ZXJzZWN0ZWQgPSBudWxsXG4gICAgICAgIEBpbnRlcnNlY3RlZEV2ZW50RW1pdHRlZCA9IGZhbHNlXG4gICAgICAgIEBtb3VzZWRvd24gPSBmYWxzZVxuICAgICAgICBcbiAgICAgICAgQG9uICdtb3VzZW1vdmUnLCAoZSkgPT5cbiAgICAgICAgICAgIEBtb3VzZS54ID0gKGUuY2xpZW50WCAvIEB3aWR0aCkgKiAyIC0gMVxuICAgICAgICAgICAgQG1vdXNlLnkgPSAtKGUuY2xpZW50WSAvIEBoZWlnaHQpICogMiArIDFcblxuICAgICAgICBAb24gJ21vdXNlZG93bicsIChlKSA9PlxuICAgICAgICAgICAgQG1vdXNlZG93biA9IHRydWVcbiAgICAgICAgICAgIGlmIEBpbnRlcnNlY3RlZFxuICAgICAgICAgICAgICAgIEBpbnRlcnNlY3RlZC5vYmplY3QuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ21vdXNlZG93bid9XG4gICAgICAgICAgICAgICAgQGludGVyc2VjdGVkLm9iamVjdC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnb25tb3VzZWRvd24nfVxuICAgICAgICAgICAgICAgIEBpbnRlcnNlY3RlZC5vYmplY3QuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NsaWNrJ31cbiAgICAgICAgICAgICAgICBAaW50ZXJzZWN0ZWQub2JqZWN0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdvbmNsaWNrJ31cbiAgICAgICAgXG4gICAgICAgIEBvbiAnbW91c2V1cCcsIChlKSA9PlxuICAgICAgICAgICAgQG1vdXNlZG93biA9IGZhbHNlXG4gICAgICAgICAgICBpZiBAaW50ZXJzZWN0ZWRcbiAgICAgICAgICAgICAgICBAaW50ZXJzZWN0ZWQub2JqZWN0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdtb3VzZXVwJ31cbiAgICAgICAgICAgICAgICBAaW50ZXJzZWN0ZWQub2JqZWN0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdvbm1vdXNldXAnfVxuXG5cbiAgICAgICAgIyBBTklNQVRJT04gTE9PUFxuXG4gICAgICAgIEBsb29wKClcblxuICAgICAgICBGcmFtZXIuQ3VycmVudENvbnRleHQub24gJ3Jlc2V0JywgPT5cbiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lIEBhbmltYXRpb25Mb29wUmVxdWVzdElkXG5cblxuXG4gICAgbG9vcDogKCkgPT5cbiAgICAgICAgQGFuaW1hdGlvbkxvb3BSZXF1ZXN0SWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgQGxvb3BcblxuICAgICAgICBpZiBAYW5pbWF0aW9uTG9vcFxuICAgICAgICAgICAgQGFuaW1hdGlvbkxvb3AoKVxuXG4gICAgICAgIGlmIEBjYW1lcmEuY29udHJvbHNcbiAgICAgICAgICAgIEBjYW1lcmEuY29udHJvbHMudXBkYXRlKClcblxuICAgICAgICBAaGFuZGxlUmF5Y2FzdGVyKClcblxuICAgICAgICBAcmVuZGVyZXIucmVuZGVyIEBzY2VuZSwgQGNhbWVyYS5uYXRpdmVDYW1lcmFcbiAgICBcblxuICAgIFxuICAgIGhhbmRsZVJheWNhc3RlcjogKCkgPT5cbiAgICAgICAgQHJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhIEBtb3VzZSwgQGNhbWVyYS5uYXRpdmVDYW1lcmFcbiAgICAgICAgaW50ZXJzZWN0cyA9IEByYXljYXN0ZXIuaW50ZXJzZWN0T2JqZWN0cyBAc2NlbmUuY2hpbGRyZW4sIHRydWVcblxuICAgICAgICBpZiBpbnRlcnNlY3RzLmxlbmd0aCAmJiBAaW50ZXJzZWN0ZWQgIT0gaW50ZXJzZWN0c1swXVxuICAgICAgICAgICAgQGludGVyc2VjdGVkID0gaW50ZXJzZWN0c1swXVxuICAgICAgICBcbiAgICAgICAgaWYgQGludGVyc2VjdGVkICYmICFpbnRlcnNlY3RzLmxlbmd0aFxuICAgICAgICAgICAgQGludGVyc2VjdGVkLm9iamVjdC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnbW91c2VvdXQnfVxuICAgICAgICAgICAgQGludGVyc2VjdGVkLm9iamVjdC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnb25tb3VzZW91dCd9XG4gICAgICAgIFxuICAgICAgICBpZiAhaW50ZXJzZWN0cy5sZW5ndGhcbiAgICAgICAgICAgIEBpbnRlcnNlY3RlZCA9IG51bGxcbiAgICAgICAgICAgIEBpbnRlcnNlY3RlZEV2ZW50RW1pdHRlZCA9IGZhbHNlXG4gICAgICAgIFxuICAgICAgICBpZiAhQGludGVyc2VjdGVkRXZlbnRFbWl0dGVkICYmIEBpbnRlcnNlY3RlZFxuICAgICAgICAgICAgQGludGVyc2VjdGVkLm9iamVjdC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnbW91c2VvdmVyJ31cbiAgICAgICAgICAgIEBpbnRlcnNlY3RlZC5vYmplY3QuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ29ubW91c2VvdmVyJ31cbiAgICAgICAgICAgIEBpbnRlcnNlY3RlZEV2ZW50RW1pdHRlZCA9IHRydWVcbiAgICBcbiAgICBvbldpbmRvd1Jlc2l6ZTogKGUpID0+XG4gICAgICAgIEBjYW1lcmEuYXNwZWN0ID0gQHdpZHRoIC8gQGhlaWdodFxuICAgICAgICBAY2FtZXJhLm5hdGl2ZUNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KClcbiAgICAgICAgQHJlbmRlcmVyLnNldFNpemUgQHdpZHRoLCBAaGVpZ2h0IiwiXyA9IEZyYW1lci5fXG5cbiMgQ0xBU1NFU1xuXG57QmFzZUNsYXNzfSA9IHJlcXVpcmUgJy4vX0Jhc2VDbGFzcy5jb2ZmZWUnXG57QW5pbWF0aW9ufSA9IHJlcXVpcmUgJy4vX0FuaW1hdGlvbi5jb2ZmZWUnXG57U3RhdGVzfSA9IHJlcXVpcmUgJy4vX1N0YXRlcy5jb2ZmZWUnXG5cbiMgTE9BREVSU1xuXG57T0JKfSA9IHJlcXVpcmUgJy4vbG9hZGVycy9PQkouY29mZmVlJ1xue0ZCWH0gPSByZXF1aXJlICcuL2xvYWRlcnMvRkJYLmNvZmZlZSdcbntHTFRGfSA9IHJlcXVpcmUgJy4vbG9hZGVycy9HTFRGLmNvZmZlZSdcbntDb2xsYWRhfSA9IHJlcXVpcmUgJy4vbG9hZGVycy9Db2xsYWRhLmNvZmZlZSdcbntKU09OT2JqZWN0fSA9IHJlcXVpcmUgJy4vbG9hZGVycy9KU09OT2JqZWN0LmNvZmZlZSdcblxuY2xhc3MgZXhwb3J0cy5Nb2RlbCBleHRlbmRzIEJhc2VDbGFzc1xuICAgIGNvbnN0cnVjdG9yOiAocHJvcGVydGllcz17fSkgLT5cbiAgICAgICAgc3VwZXIoKVxuXG4gICAgICAgIF8uZGVmYXVsdHMgcHJvcGVydGllcyxcbiAgICAgICAgICAgIGFuaW1hdGU6IHRydWVcbiAgICAgICAgICAgIGNhc3RTaGFkb3c6IHRydWVcbiAgICAgICAgICAgIHJlY2VpdmVTaGFkb3c6IHRydWVcbiAgICAgICAgICAgIHJlcG9zaXRpb246IHRydWVcblxuICAgICAgICBzd2l0Y2ggQGdldEV4dGVuc2lvbiBwcm9wZXJ0aWVzLnBhdGhcbiAgICAgICAgICAgIHdoZW4gJ29iaidcbiAgICAgICAgICAgICAgICBuZXcgT0JKIHByb3BlcnRpZXMsIChtb2RlbCkgPT5cbiAgICAgICAgICAgICAgICAgICAgQG1lc2ggPSBtb2RlbFxuICAgICAgICAgICAgICAgICAgICBAc2V0dXBNb2RlbCBwcm9wZXJ0aWVzXG4gICAgICAgICAgICB3aGVuICdmYngnXG4gICAgICAgICAgICAgICAgbmV3IEZCWCBwcm9wZXJ0aWVzLCAobW9kZWwpID0+XG4gICAgICAgICAgICAgICAgICAgIEBtZXNoID0gbW9kZWxcbiAgICAgICAgICAgICAgICAgICAgQHNldHVwTW9kZWwgcHJvcGVydGllc1xuICAgICAgICAgICAgd2hlbiAnZ2x0ZicgfHwgJ2dsYidcbiAgICAgICAgICAgICAgICBuZXcgR0xURiBwcm9wZXJ0aWVzLCAobW9kZWwpID0+XG4gICAgICAgICAgICAgICAgICAgIEBtZXNoID0gbW9kZWxcbiAgICAgICAgICAgICAgICAgICAgQHNldHVwTW9kZWwgcHJvcGVydGllc1xuICAgICAgICAgICAgd2hlbiAnZGFlJ1xuICAgICAgICAgICAgICAgIG5ldyBDb2xsYWRhIHByb3BlcnRpZXMsIChtb2RlbCkgPT5cbiAgICAgICAgICAgICAgICAgICAgQG1lc2ggPSBtb2RlbFxuICAgICAgICAgICAgICAgICAgICBAc2V0dXBNb2RlbCBwcm9wZXJ0aWVzXG4gICAgICAgICAgICB3aGVuICdqc29uJ1xuICAgICAgICAgICAgICAgIG5ldyBKU09OT2JqZWN0IHByb3BlcnRpZXMsIChtb2RlbCkgPT5cbiAgICAgICAgICAgICAgICAgICAgQG1lc2ggPSBtb2RlbFxuICAgICAgICAgICAgICAgICAgICBAc2V0dXBNb2RlbCBwcm9wZXJ0aWVzXG5cblxuICAgIGdldEV4dGVuc2lvbjogKHBhdGgpIC0+XG4gICAgICAgIHBhdGguc3BsaXQoJy4nKS5wb3AoKVxuXG4gICAgc2V0dXBNb2RlbDogKHByb3BlcnRpZXMpIC0+XG4gICAgICAgIGlmIHByb3BlcnRpZXMucmVwb3NpdGlvblxuICAgICAgICAgICAgQHJlcG9zaXRpb25NZXNoKClcblxuICAgICAgICBAcGl2b3QgPSBuZXcgVEhSRUUuR3JvdXBcbiAgICAgICAgQHBpdm90LmFkZCBAbWVzaFxuXG4gICAgICAgIEBzYXZlSW5pdGlhbFByb3BlcnRpZXMoKVxuXG4gICAgICAgIGlmIHByb3BlcnRpZXMubWF0ZXJpYWxcbiAgICAgICAgICAgIEBhcHBseU1hdGVyaWFsIHByb3BlcnRpZXMubWF0ZXJpYWxcbiAgICAgICAgXG4gICAgICAgIEBzZXR1cFNoYWRvd1NldHRpbmdzIHByb3BlcnRpZXNcbiAgICAgICAgXG4gICAgICAgIGlmIHByb3BlcnRpZXMuc21vb3RoU2hhZGluZ1xuICAgICAgICAgICAgQG1lc2gudHJhdmVyc2UgKGMpIC0+XG4gICAgICAgICAgICAgICAgaWYgYyBpbnN0YW5jZW9mIFRIUkVFLk1lc2hcbiAgICAgICAgICAgICAgICAgICAgYy5tYXRlcmlhbC5zaGFkaW5nID0gVEhSRUUuU21vb3RoU2hhZGluZ1xuICAgICAgICBcbiAgICAgICAgaWYgcHJvcGVydGllcy5hbmltYXRlICYmIEBtZXNoLmFuaW1hdGlvbnMgJiYgQG1lc2guYW5pbWF0aW9uc1swXVxuICAgICAgICAgICAgQGhhbmRsZUFuaW1hdGlvbnMgcHJvcGVydGllc1xuXG4gICAgICAgIGlmIHByb3BlcnRpZXMucGFyZW50XG4gICAgICAgICAgICBAYWRkVG9SZW5kZXJpbmdJbnN0YW5jZSBwcm9wZXJ0aWVzLnBhcmVudFxuXG4gICAgICAgIEBzZXRTY2FsZSBwcm9wZXJ0aWVzLnNjYWxlLCBwcm9wZXJ0aWVzLnNjYWxlWCwgcHJvcGVydGllcy5zY2FsZVksIHByb3BlcnRpZXMuc2NhbGVaXG4gICAgICAgIEBzZXRQb3NpdGlvbiBbcHJvcGVydGllcy54LCBwcm9wZXJ0aWVzLnksIHByb3BlcnRpZXMuel1cbiAgICAgICAgQHNldFJvdGF0aW9uIFtwcm9wZXJ0aWVzLnJvdGF0aW9uWCwgcHJvcGVydGllcy5yb3RhdGlvblksIHByb3BlcnRpZXMucm90YXRpb25aXVxuICAgICAgICBAc2V0TWlkKFxuICAgICAgICAgICAgbWlkWDogcHJvcGVydGllcy5taWRYXG4gICAgICAgICAgICBtaWRZOiBwcm9wZXJ0aWVzLm1pZFlcbiAgICAgICAgICAgIG1pZFo6IHByb3BlcnRpZXMubWlkWlxuICAgICAgICApXG5cbiAgICAgICAgaWYgcHJvcGVydGllcy52aXNpYmxlXG4gICAgICAgICAgICBAdmlzaWJsZSA9IHByb3BlcnRpZXMudmlzaWJsZVxuICAgICAgICBcbiAgICAgICAgQF9zdGF0ZXMgPSBuZXcgU3RhdGVzIEBcblxuICAgICAgICBpZiBwcm9wZXJ0aWVzLm9uTG9hZFxuICAgICAgICAgICAgcHJvcGVydGllcy5vbkxvYWQgQFxuXG4gICAgcmVwb3NpdGlvbk1lc2g6ICgpIC0+XG4gICAgICAgIEBib3VuZGluZ0JveCA9IG5ldyBUSFJFRS5Cb3gzKCkuc2V0RnJvbU9iamVjdCBAbWVzaFxuICAgICAgICBAb2Zmc2V0ID0gQGJvdW5kaW5nQm94LmdldENlbnRlciBAbWVzaC5wb3NpdGlvblxuICAgICAgICBAbWVzaC5wb3NpdGlvbi5tdWx0aXBseVNjYWxhciAtMVxuXG4gICAgc2F2ZUluaXRpYWxQcm9wZXJ0aWVzOiAoKSAtPlxuICAgICAgICBAaW5pdGlhbFByb3BlcnRpZXMgPSBAXG5cbiAgICBhcHBseU1hdGVyaWFsOiAobWF0ZXJpYWwpIC0+XG4gICAgICAgIEBtZXNoLnRyYXZlcnNlIChjKSAtPlxuICAgICAgICAgICAgaWYgYyBpbnN0YW5jZW9mIFRIUkVFLk1lc2hcbiAgICAgICAgICAgICAgICBjLm1hdGVyaWFsID0gbWF0ZXJpYWxcblxuICAgIHNldHVwU2hhZG93U2V0dGluZ3M6IChwcm9wZXJ0aWVzKSAtPlxuICAgICAgICBAbWVzaC50cmF2ZXJzZSAoYykgLT5cbiAgICAgICAgICAgIGlmIGMgaW5zdGFuY2VvZiBUSFJFRS5NZXNoXG4gICAgICAgICAgICAgICAgYy5jYXN0U2hhZG93ID0gcHJvcGVydGllcy5jYXN0U2hhZG93XG4gICAgICAgICAgICAgICAgYy5yZWNlaXZlU2hhZG93ID0gcHJvcGVydGllcy5yZWNlaXZlU2hhZG93XG5cbiAgICBhZGRUb1JlbmRlcmluZ0luc3RhbmNlOiAocGFyZW50KSAtPlxuICAgICAgICBpZiBwYXJlbnQuc2NlbmUgdGhlbiBwYXJlbnQuc2NlbmUuYWRkIEBwaXZvdFxuICAgICAgICBlbHNlIHBhcmVudC5hZGQgQHBpdm90XG4gICAgXG4gICAgaGFuZGxlQW5pbWF0aW9uczogKHByb3BlcnRpZXMpIC0+XG4gICAgICAgIGlmIF8uaXNOdW1iZXIgcHJvcGVydGllcy5hbmltYXRpb25DbGlwXG4gICAgICAgICAgICBAYW5pbWF0aW9uSW5kZXggPSBwcm9wZXJ0aWVzLmFuaW1hdGlvbkNsaXAgLSAxXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIEBhbmltYXRpb25JbmRleCA9IDBcblxuICAgICAgICBAY2xvY2sgPSBuZXcgVEhSRUUuQ2xvY2tcbiAgICAgICAgQG1lc2gubWl4ZXIgPSBuZXcgVEhSRUUuQW5pbWF0aW9uTWl4ZXIgQG1lc2hcblxuICAgICAgICBAYWN0aW9uID0gQG1lc2gubWl4ZXIuY2xpcEFjdGlvbiBAbWVzaC5hbmltYXRpb25zW0BhbmltYXRpb25JbmRleF1cbiAgICAgICAgQGFjdGlvbi5wbGF5KClcbiAgICAgICAgXG4gICAgICAgIEB1cGRhdGVNaXhlcigpXG5cbiAgICAgICAgRnJhbWVyLkN1cnJlbnRDb250ZXh0Lm9uICdyZXNldCcsID0+XG4gICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSBAbWl4ZXJSZXF1ZXN0SWRcbiAgICAgICAgXG4gICAgdXBkYXRlTWl4ZXI6ICgpID0+XG4gICAgICAgIEBtaXhlclJlcXVlc3RJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSBAdXBkYXRlTWl4ZXJcbiAgICAgICAgQG1lc2gubWl4ZXIudXBkYXRlIEBjbG9jay5nZXREZWx0YSgpXG4gICAgXG4gICAgb246IChldmVudE5hbWUsIGNiKSAtPlxuXG4gICAgICAgIGlmIGV2ZW50TmFtZS5pbmNsdWRlcyAnY2hhbmdlJ1xuXG4gICAgICAgICAgICBjYWxsYmFjayA9IChlKSAtPiBjYihlLnZhbHVlKVxuXG4gICAgICAgICAgICBAcGl2b3QuYWRkRXZlbnRMaXN0ZW5lciBldmVudE5hbWUsIGNhbGxiYWNrXG5cbiAgICAgICAgICAgIEZyYW1lci5DdXJyZW50Q29udGV4dC5vbiAncmVzZXQnLCA9PlxuICAgICAgICAgICAgICAgIEBwaXZvdC5yZW1vdmVFdmVudExpc3RlbmVyIGV2ZW50TmFtZSwgY2FsbGJhY2tcblxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBAbWVzaC50cmF2ZXJzZSAoYykgLT5cbiAgICAgICAgICAgICAgICBpZiBjIGluc3RhbmNlb2YgVEhSRUUuTWVzaFxuXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gKCkgLT4gY2IoKVxuXG4gICAgICAgICAgICAgICAgICAgIGMuYWRkRXZlbnRMaXN0ZW5lciBldmVudE5hbWUsIGNhbGxiYWNrXG5cbiAgICAgICAgICAgICAgICAgICAgRnJhbWVyLkN1cnJlbnRDb250ZXh0Lm9uICdyZXNldCcsID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBjLnJlbW92ZUV2ZW50TGlzdGVuZXIgZXZlbnROYW1lLCBjYWxsYmFja1xuXG5cbiAgICBzZXRTY2FsZTogKHVuaWZvcm1TY2FsZSwgc2NhbGVYLCBzY2FsZVksIHNjYWxlWikgLT5cbiAgICAgICAgaWYgdW5pZm9ybVNjYWxlXG4gICAgICAgICAgICBAc2NhbGUgPSB1bmlmb3JtU2NhbGUgfHwgMVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBAc2NhbGVYID0gc2NhbGVYIHx8IDFcbiAgICAgICAgICAgIEBzY2FsZVkgPSBzY2FsZVkgfHwgMVxuICAgICAgICAgICAgQHNjYWxlWiA9IHNjYWxlWiB8fCAxXG4gICAgXG4gICAgc2V0UG9zaXRpb246IChwb3NpdGlvbikgLT5cbiAgICAgICAgQHggPSBwb3NpdGlvblswXSB8fCAwXG4gICAgICAgIEB5ID0gcG9zaXRpb25bMV0gfHwgMFxuICAgICAgICBAeiA9IHBvc2l0aW9uWzJdIHx8IDBcblxuICAgIHNldFJvdGF0aW9uOiAocm90YXRpb24pIC0+XG4gICAgICAgIEByb3RhdGlvblggPSByb3RhdGlvblswXSB8fCAwXG4gICAgICAgIEByb3RhdGlvblkgPSByb3RhdGlvblsxXSB8fCAwXG4gICAgICAgIEByb3RhdGlvblogPSByb3RhdGlvblsyXSB8fCAwXG5cbiAgICBzZXRNaWQ6IChtaWQpIC0+XG4gICAgICAgIE9iamVjdC5rZXlzKG1pZCkubWFwIChrKSA9PlxuICAgICAgICAgICAgaWYgbWlkW2tdXG4gICAgICAgICAgICAgICAgQFtrXSA9IG1pZFtrXVxuICAgIFxuICAgIGFuaW1hdGU6IChwcm9wZXJ0aWVzKSAtPlxuICAgICAgICBuZXcgQW5pbWF0aW9uIEAsIHByb3BlcnRpZXNcbiAgICBcbiAgICBsb29rQXQ6IChhLCBiLCBjKSAtPlxuICAgICAgICBpZiBhcmd1bWVudHMubGVuZ3RoID09IDFcbiAgICAgICAgICAgIEBwaXZvdC5sb29rQXQgYVxuICAgICAgICBlbHNlIGlmIGFyZ3VtZW50cy5sZW5ndGggPT0gM1xuICAgICAgICAgICAgQHBpdm90Lmxvb2tBdCBhLCBiLCBjXG4gICAgXG4gICAgc3RhdGVTd2l0Y2g6IChzdGF0ZSkgLT5cbiAgICAgICAgIyBMb29wIHRocm91Z2ggc3RhdGVzIG9uIG1vZGVsIHRvIGZpbmQgdGhlIHNwZWNpZmllZCBvbmVcbiAgICAgICAgT2JqZWN0LmtleXMoQHN0YXRlcykubWFwIChrKSA9PiBcbiAgICAgICAgICAgIGlmIGsgPT0gc3RhdGVcbiAgICAgICAgICAgICAgICBAc3RhdGVzLmN1cnJlbnQgPSBAc3RhdGVzW2tdXG5cbiAgICAgICAgICAgICAgICAjIExvb3AgdGhyb3VnaCBwcm9wZXJ0eSBrZXlzIG9uIHRoZSBzdGF0ZSBhbmQgYXBwbHkgdGhlIHZhbHVlcyB0byBtb2RlbFxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKEBzdGF0ZXMuY3VycmVudCkubWFwIChwaykgID0+XG4gICAgICAgICAgICAgICAgICAgIEBbcGtdID0gQHN0YXRlcy5jdXJyZW50W3BrXVxuICAgIFxuICAgIHN0YXRlQ3ljbGU6IChzdGF0ZUEsIHN0YXRlQikgLT5cbiAgICAgICAgIyBDaGVjayBpZiBzdGF0ZUEgb3Igc3RhdGVCIGFscmVhZHkgaXMgdGhlIGN1cnJlbnQgc3RhdGUgb24gbW9kZWxcbiAgICAgICAgaWYgQHN0YXRlcy5jdXJyZW50ID09IEBzdGF0ZXNbc3RhdGVBXSB8fCBAc3RhdGVzLmN1cnJlbnQgPT0gQHN0YXRlc1tzdGF0ZUJdXG4gICAgICAgICAgICBpZiBAc3RhdGVzLmN1cnJlbnQgPT0gQHN0YXRlc1tzdGF0ZUFdIHRoZW4gQGFuaW1hdGUgc3RhdGVCXG4gICAgICAgICAgICBlbHNlIGlmIEBzdGF0ZXMuY3VycmVudCA9PSBAc3RhdGVzW3N0YXRlQl0gdGhlbiBAYW5pbWF0ZSBzdGF0ZUFcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgIyBJZiBuZWl0aGVyIGFyZSBjdXJyZW50LCBhbmltYXRlIHRvIHN0YXRlQVxuICAgICAgICAgICAgQGFuaW1hdGUgc3RhdGVBXG4gICAgICAgICAgICBcblxuXG5cbiAgICBAZGVmaW5lICdzY2FsZScsXG4gICAgICAgIGdldDogLT4gQHBpdm90LnNjYWxlLngsXG4gICAgICAgIHNldDogKHNjYWxlKSAtPiBcbiAgICAgICAgICAgIEBwaXZvdC5zY2FsZS5zZXQoc2NhbGUsIHNjYWxlLCBzY2FsZSlcbiAgICAgICAgICAgIEBwaXZvdC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOnNjYWxlJywgdmFsdWU6IEBzY2FsZX1cbiAgICBcbiAgICBAZGVmaW5lICdzY2FsZVgnLFxuICAgICAgICBnZXQ6IC0+IEBwaXZvdC5zY2FsZS54LFxuICAgICAgICBzZXQ6IChzY2FsZSkgLT4gXG4gICAgICAgICAgICBAcGl2b3Quc2NhbGUuc2V0KHNjYWxlLCBAcGl2b3Quc2NhbGUueSwgQHBpdm90LnNjYWxlLnopXG4gICAgICAgICAgICBAcGl2b3QuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpzY2FsZVgnLCB2YWx1ZTogQHNjYWxlWH1cblxuICAgIEBkZWZpbmUgJ3NjYWxlWScsXG4gICAgICAgIGdldDogLT4gQHBpdm90LnNjYWxlLnksXG4gICAgICAgIHNldDogKHNjYWxlKSAtPiBcbiAgICAgICAgICAgIEBwaXZvdC5zY2FsZS5zZXQoQHBpdm90LnNjYWxlLngsIHNjYWxlLCBAcGl2b3Quc2NhbGUueilcbiAgICAgICAgICAgIEBwaXZvdC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOnNjYWxlWScsIHZhbHVlOiBAc2NhbGVZfVxuICAgIFxuICAgIEBkZWZpbmUgJ3NjYWxlWicsXG4gICAgICAgIGdldDogLT4gQHBpdm90LnNjYWxlLnosXG4gICAgICAgIHNldDogKHNjYWxlKSAtPiBcbiAgICAgICAgICAgIEBwaXZvdC5zY2FsZS5zZXQoQHBpdm90LnNjYWxlLngsIEBwaXZvdC5zY2FsZS55LCBzY2FsZSlcbiAgICAgICAgICAgIEBwaXZvdC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOnNjYWxlWicsIHZhbHVlOiBAc2NhbGVafVxuXG4gICAgQGRlZmluZSAncG9zaXRpb24nLFxuICAgICAgICBnZXQ6IC0+IEBwaXZvdC5wb3NpdGlvblxuXG4gICAgQGRlZmluZSAneCcsXG4gICAgICAgIGdldDogLT4gQHBpdm90LnBvc2l0aW9uLngsXG4gICAgICAgIHNldDogKHgpIC0+IFxuICAgICAgICAgICAgQHBpdm90LnBvc2l0aW9uLnggPSB4XG4gICAgICAgICAgICBAcGl2b3QuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTp4JywgdmFsdWU6IEB4fVxuICAgIFxuICAgIEBkZWZpbmUgJ3knLFxuICAgICAgICBnZXQ6IC0+IEBwaXZvdC5wb3NpdGlvbi55LFxuICAgICAgICBzZXQ6ICh5KSAtPiBcbiAgICAgICAgICAgIEBwaXZvdC5wb3NpdGlvbi55ID0geVxuICAgICAgICAgICAgQHBpdm90LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6eScsIHZhbHVlOiBAeX1cbiAgICBcbiAgICBAZGVmaW5lICd6JyxcbiAgICAgICAgZ2V0OiAtPiBAcGl2b3QucG9zaXRpb24ueixcbiAgICAgICAgc2V0OiAoeikgLT4gXG4gICAgICAgICAgICBAcGl2b3QucG9zaXRpb24ueiA9IHpcbiAgICAgICAgICAgIEBwaXZvdC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOnonLCB2YWx1ZTogQHp9XG5cbiAgICBAZGVmaW5lICdyb3RhdGlvbicsXG4gICAgICAgIGdldDogLT4gQHBpdm90LnJvdGF0aW9uXG5cbiAgICBAZGVmaW5lICdyb3RhdGlvblgnLFxuICAgICAgICBnZXQ6IC0+IFRIUkVFLk1hdGgucmFkVG9EZWcoQHBpdm90LnJvdGF0aW9uLngpLFxuICAgICAgICBzZXQ6ICh4KSAtPiBcbiAgICAgICAgICAgIEBwaXZvdC5yb3RhdGlvbi54ID0gVEhSRUUuTWF0aC5kZWdUb1JhZCh4KVxuICAgICAgICAgICAgQHBpdm90LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6cm90YXRpb25YJywgdmFsdWU6IEByb3RhdGlvblh9XG4gICAgXG4gICAgQGRlZmluZSAncm90YXRpb25ZJyxcbiAgICAgICAgZ2V0OiAtPiBUSFJFRS5NYXRoLnJhZFRvRGVnKEBwaXZvdC5yb3RhdGlvbi55KSxcbiAgICAgICAgc2V0OiAoeSkgLT4gXG4gICAgICAgICAgICBAcGl2b3Qucm90YXRpb24ueSA9IFRIUkVFLk1hdGguZGVnVG9SYWQoeSlcbiAgICAgICAgICAgIEBwaXZvdC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOnJvdGF0aW9uWScsIHZhbHVlOiBAcm90YXRpb25ZfVxuICAgIFxuICAgIEBkZWZpbmUgJ3JvdGF0aW9uWicsXG4gICAgICAgIGdldDogLT4gVEhSRUUuTWF0aC5yYWRUb0RlZyhAcGl2b3Qucm90YXRpb24ueiksXG4gICAgICAgIHNldDogKHopIC0+IFxuICAgICAgICAgICAgQHBpdm90LnJvdGF0aW9uLnogPSBUSFJFRS5NYXRoLmRlZ1RvUmFkKHopXG4gICAgICAgICAgICBAcGl2b3QuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpyb3RhdGlvblonLCB2YWx1ZTogQHJvdGF0aW9uWn1cbiAgICBcbiAgICBAZGVmaW5lICdtaWRYJyxcbiAgICAgICAgc2V0OiAobWlkWCkgLT4gQG1lc2gucG9zaXRpb24ueCA9IC1taWRYXG4gICAgXG4gICAgQGRlZmluZSAnbWlkWScsXG4gICAgICAgIHNldDogKG1pZFkpIC0+IEBtZXNoLnBvc2l0aW9uLnkgPSAtbWlkWVxuICAgIFxuICAgIEBkZWZpbmUgJ21pZFonLFxuICAgICAgICBzZXQ6IChtaWRaKSAtPiBAbWVzaC5wb3NpdGlvbi56ID0gLW1pZFpcblxuICAgIEBkZWZpbmUgJ3BhcmVudCcsXG4gICAgICAgIGdldDogLT4gQHBpdm90LnBhcmVudCxcbiAgICAgICAgc2V0OiAocGFyZW50KSAtPiBcbiAgICAgICAgICAgIEBwaXZvdC5wYXJlbnQgPSBwYXJlbnRcbiAgICAgICAgICAgIEBwaXZvdC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOnBhcmVudCcsIHZhbHVlOiBAcGFyZW50fVxuICAgIFxuICAgIEBkZWZpbmUgJ3Zpc2libGUnLFxuICAgICAgICBnZXQ6IC0+IEBwaXZvdC52aXNpYmxlXG4gICAgICAgIHNldDogKGJvb2wpIC0+IFxuICAgICAgICAgICAgQHBpdm90LnZpc2libGUgPSBib29sXG4gICAgICAgICAgICBAcGl2b3QuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTp2aXNpYmxlJywgdmFsdWU6IEB2aXNpYmxlfVxuICAgIFxuICAgIEBkZWZpbmUgJ2NoaWxkcmVuJyxcbiAgICAgICAgZ2V0OiAtPiBAcGl2b3QuY2hpbGRyZW5cbiAgICBcbiAgICBAZGVmaW5lICdzaXplJyxcbiAgICAgICAgZ2V0OiAtPiB7XG4gICAgICAgICAgICBoZWlnaHQ6IEBib3VuZGluZ0JveC5tYXgueSAtIEBib3VuZGluZ0JveC5taW4ueVxuICAgICAgICAgICAgd2lkdGg6IEBib3VuZGluZ0JveC5tYXgueCAtIEBib3VuZGluZ0JveC5taW4ueFxuICAgICAgICAgICAgZGVwdGg6IEBib3VuZGluZ0JveC5tYXgueiAtIEBib3VuZGluZ0JveC5taW4uelxuICAgICAgICB9XG4gICAgXG4gICAgQGRlZmluZSAnc3RhdGVzJyxcbiAgICAgICAgZ2V0OiAtPlxuICAgICAgICAgICAgQF9zdGF0ZXMuc3RhdGVzXG4gICAgICAgIHNldDogKHN0YXRlcykgLT5cbiAgICAgICAgICAgIF8uZXh0ZW5kIEBzdGF0ZXMsIHN0YXRlc1xuICAgIFxuICAgIEBkZWZpbmUgJ2FuaW1hdGlvbkNsaXAnLFxuICAgICAgICBnZXQ6IC0+IEBhbmltYXRpb25JbmRleCArIDEsXG4gICAgICAgIHNldDogKGFuaW1hdGlvbikgLT4gXG4gICAgICAgICAgICBpZiBAbWVzaC5hbmltYXRpb25zW2FuaW1hdGlvbiAtIDFdXG4gICAgICAgICAgICAgICAgQGFuaW1hdGlvbkluZGV4ID0gYW5pbWF0aW9uIC0gMVxuICAgICAgICAgICAgICAgIEBhY3Rpb24gPSBAbWVzaC5taXhlci5jbGlwQWN0aW9uIEBtZXNoLmFuaW1hdGlvbnNbQGFuaW1hdGlvbkluZGV4XVxuICAgICAgICAgICAgICAgIEBhY3Rpb24ucGxheSgpIiwiXyA9IEZyYW1lci5fXG5cbmNsYXNzIGV4cG9ydHMuTWVzaCBleHRlbmRzIFRIUkVFLk1lc2hcblxuICAgIEBkZWZpbmUgPSAocHJvcGVydHlOYW1lLCBkZXNjcmlwdG9yKSAtPlxuICAgICAgICBpZiBkZXNjcmlwdG9yLnJlYWRvbmx5XG4gICAgICAgICAgICBkZXNjcmlwdG9yLnNldCA9ICh2YWx1ZSkgLT5cbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIiN7QGNvbnN0cnVjdG9yLm5hbWV9LiN7cHJvcGVydHlOYW1lfSBpcyByZWFkb25seVwiKVxuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShAcHJvdG90eXBlLCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IpXG5cbiAgICBjb25zdHJ1Y3RvcjogKHByb3BlcnRpZXM9e30pIC0+XG4gICAgICAgIHN1cGVyIHByb3BlcnRpZXMuZ2VvbWV0cnksIHByb3BlcnRpZXMubWF0ZXJpYWxcblxuICAgICAgICBfLmRlZmF1bHRzIHByb3BlcnRpZXMsXG4gICAgICAgICAgICBjYXN0U2hhZG93OiB0cnVlXG4gICAgICAgICAgICByZWNlaXZlU2hhZG93OiB0cnVlXG5cbiAgICAgICAgQHNldHVwU2hhZG93U2V0dGluZ3MgcHJvcGVydGllc1xuXG4gICAgICAgIGlmIHByb3BlcnRpZXMucGFyZW50XG4gICAgICAgICAgICBAYWRkVG9SZW5kZXJpbmdJbnN0YW5jZSBwcm9wZXJ0aWVzLnBhcmVudFxuICAgICAgICBcbiAgICAgICAgQHNldFNjYWxlIHByb3BlcnRpZXMuc2NhbGUsIHByb3BlcnRpZXMuc2NhbGVYLCBwcm9wZXJ0aWVzLnNjYWxlWSwgcHJvcGVydGllcy5zY2FsZVpcbiAgICAgICAgQHNldFBvc2l0aW9uIFtwcm9wZXJ0aWVzLngsIHByb3BlcnRpZXMueSwgcHJvcGVydGllcy56XVxuICAgICAgICBAc2V0Um90YXRpb24gW3Byb3BlcnRpZXMucm90YXRpb25YLCBwcm9wZXJ0aWVzLnJvdGF0aW9uWSwgcHJvcGVydGllcy5yb3RhdGlvblpdXG5cbiAgICBzZXR1cFNoYWRvd1NldHRpbmdzOiAocHJvcGVydGllcykgLT5cbiAgICAgICAgQGNhc3RTaGFkb3cgPSBwcm9wZXJ0aWVzLmNhc3RTaGFkb3dcbiAgICAgICAgQHJlY2VpdmVTaGFkb3cgPSBwcm9wZXJ0aWVzLnJlY2VpdmVTaGFkb3dcblxuICAgIGFkZFRvUmVuZGVyaW5nSW5zdGFuY2U6IChwYXJlbnQpIC0+XG4gICAgICAgIGlmIHBhcmVudC5zY2VuZSB0aGVuIHBhcmVudC5zY2VuZS5hZGQgQFxuICAgICAgICBlbHNlIHBhcmVudC5hZGQgQFxuXG4gICAgc2V0U2NhbGU6ICh1bmlmb3JtU2NhbGUsIHNjYWxlWCwgc2NhbGVZLCBzY2FsZVopIC0+XG4gICAgICAgIGlmIHVuaWZvcm1TY2FsZVxuICAgICAgICAgICAgQHNjYWxlID0gdW5pZm9ybVNjYWxlIHx8IDFcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQHNjYWxlWCA9IHNjYWxlWCB8fCAxXG4gICAgICAgICAgICBAc2NhbGVZID0gc2NhbGVZIHx8IDFcbiAgICAgICAgICAgIEBzY2FsZVogPSBzY2FsZVogfHwgMVxuICAgIFxuICAgIHNldFBvc2l0aW9uOiAocG9zaXRpb24pIC0+XG4gICAgICAgIEB4ID0gcG9zaXRpb25bMF0gfHwgMFxuICAgICAgICBAeSA9IHBvc2l0aW9uWzFdIHx8IDBcbiAgICAgICAgQHogPSBwb3NpdGlvblsyXSB8fCAwXG5cbiAgICBzZXRSb3RhdGlvbjogKHJvdGF0aW9uKSAtPlxuICAgICAgICBAcm90YXRpb25YID0gcm90YXRpb25bMF0gfHwgMFxuICAgICAgICBAcm90YXRpb25ZID0gcm90YXRpb25bMV0gfHwgMFxuICAgICAgICBAcm90YXRpb25aID0gcm90YXRpb25bMl0gfHwgMFxuXG4gICAgQGRlZmluZSAnc2NhbGUnLFxuICAgICAgICBnZXQ6IC0+IEBzY2FsZS54LFxuICAgICAgICBzZXQ6IChzY2FsZSkgLT4gQHNjYWxlLnNldChzY2FsZSwgc2NhbGUsIHNjYWxlKVxuICAgIFxuICAgIEBkZWZpbmUgJ3NjYWxlWCcsXG4gICAgICAgIGdldDogLT4gQHNjYWxlLngsXG4gICAgICAgIHNldDogKHNjYWxlKSAtPiBAc2NhbGUuc2V0KHNjYWxlLCBAc2NhbGUueSwgQHNjYWxlLnopXG5cbiAgICBAZGVmaW5lICdzY2FsZVknLFxuICAgICAgICBnZXQ6IC0+IEBzY2FsZS55LFxuICAgICAgICBzZXQ6IChzY2FsZSkgLT4gQHNjYWxlLnNldChAc2NhbGUueCwgc2NhbGUsIEBzY2FsZS56KVxuICAgIFxuICAgIEBkZWZpbmUgJ3NjYWxlWicsXG4gICAgICAgIGdldDogLT4gQHNjYWxlLnosXG4gICAgICAgIHNldDogKHNjYWxlKSAtPiBAc2NhbGUuc2V0KEBzY2FsZS54LCBAc2NhbGUueSwgc2NhbGUpXG5cbiAgICBAZGVmaW5lICd4JyxcbiAgICAgICAgZ2V0OiAtPiBAcG9zaXRpb24ueCxcbiAgICAgICAgc2V0OiAoeCkgLT4gQHBvc2l0aW9uLnggPSB4XG4gICAgXG4gICAgQGRlZmluZSAneScsXG4gICAgICAgIGdldDogLT4gQHBvc2l0aW9uLnksXG4gICAgICAgIHNldDogKHkpIC0+IEBwb3NpdGlvbi55ID0geVxuICAgIFxuICAgIEBkZWZpbmUgJ3onLFxuICAgICAgICBnZXQ6IC0+IEBwb3NpdGlvbi56LFxuICAgICAgICBzZXQ6ICh6KSAtPiBAcG9zaXRpb24ueiA9IHpcblxuICAgIEBkZWZpbmUgJ3JvdGF0aW9uWCcsXG4gICAgICAgIGdldDogLT4gVEhSRUUuTWF0aC5yYWRUb0RlZyhAcm90YXRpb24ueCksXG4gICAgICAgIHNldDogKHgpIC0+IEByb3RhdGlvbi54ID0gVEhSRUUuTWF0aC5kZWdUb1JhZCh4KVxuICAgIFxuICAgIEBkZWZpbmUgJ3JvdGF0aW9uWScsXG4gICAgICAgIGdldDogLT4gVEhSRUUuTWF0aC5yYWRUb0RlZyhAcm90YXRpb24ueSksXG4gICAgICAgIHNldDogKHkpIC0+IEByb3RhdGlvbi55ID0gVEhSRUUuTWF0aC5kZWdUb1JhZCh5KVxuICAgIFxuICAgIEBkZWZpbmUgJ3JvdGF0aW9uWicsXG4gICAgICAgIGdldDogLT4gVEhSRUUuTWF0aC5yYWRUb0RlZyhAcm90YXRpb24ueiksXG4gICAgICAgIHNldDogKHopIC0+IEByb3RhdGlvbi56ID0gVEhSRUUuTWF0aC5kZWdUb1JhZCh6KSIsIl8gPSBGcmFtZXIuX1xuXG57QmFzZUNsYXNzfSA9IHJlcXVpcmUgJy4vX0Jhc2VDbGFzcy5jb2ZmZWUnXG57QW5pbWF0aW9ufSA9IHJlcXVpcmUgJy4vX0FuaW1hdGlvbi5jb2ZmZWUnXG57U3RhdGVzfSA9IHJlcXVpcmUgJy4vX1N0YXRlcy5jb2ZmZWUnXG5cbmNsYXNzIGV4cG9ydHMuTGlnaHQgZXh0ZW5kcyBCYXNlQ2xhc3NcbiAgICBjb25zdHJ1Y3RvcjogKHByb3BlcnRpZXMpIC0+XG4gICAgICAgIHN1cGVyKClcblxuICAgICAgICBpZiAhcHJvcGVydGllcy50eXBlXG4gICAgICAgICAgICB0aHJvdyBFcnJvciAnUGxlYXNlIHNwZWNpZnkgYSBsaWdodCB0eXBlISdcbiAgICAgICAgXG4gICAgICAgIEBwcm9wZXJ0aWVzID0gXy5kZWZhdWx0cyBwcm9wZXJ0aWVzLFxuICAgICAgICAgICAgY2FzdFNoYWRvdzogdHJ1ZVxuXG4gICAgICAgIEBzZXR1cExpZ2h0KClcblxuICAgIHNldHVwTGlnaHQ6IC0+XG4gICAgICAgIHN3aXRjaCBAcHJvcGVydGllcy50eXBlXG4gICAgICAgICAgICB3aGVuICdwb2ludCdcbiAgICAgICAgICAgICAgICBAbGlnaHQgPSBuZXcgVEhSRUUuUG9pbnRMaWdodChcbiAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLkNvbG9yIEBwcm9wZXJ0aWVzLmNvbG9yLCBcbiAgICAgICAgICAgICAgICAgICAgQHByb3BlcnRpZXMuaW50ZW5zaXR5LCBcbiAgICAgICAgICAgICAgICAgICAgQHByb3BlcnRpZXMuZGlzdGFuY2UsIFxuICAgICAgICAgICAgICAgICAgICBAcHJvcGVydGllcy5kZWNheVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIHdoZW4gJ2RpcmVjdGlvbmFsJ1xuICAgICAgICAgICAgICAgIEBsaWdodCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KFxuICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuQ29sb3IgQHByb3BlcnRpZXMuY29sb3IsIFxuICAgICAgICAgICAgICAgICAgICBAcHJvcGVydGllcy5pbnRlbnNpdHlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB3aGVuICdhbWJpZW50J1xuICAgICAgICAgICAgICAgIEBsaWdodCA9IG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoXG4gICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5Db2xvciBAcHJvcGVydGllcy5jb2xvciwgXG4gICAgICAgICAgICAgICAgICAgIEBwcm9wZXJ0aWVzLmludGVuc2l0eVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIHdoZW4gJ2hlbWlzcGhlcmUnXG4gICAgICAgICAgICAgICAgQGxpZ2h0ID0gbmV3IFRIUkVFLkhlbWlzcGhlcmVMaWdodChcbiAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLkNvbG9yIEBwcm9wZXJ0aWVzLnNreUNvbG9yLCBcbiAgICAgICAgICAgICAgICAgICAgbmV3IFRIUkVFLkNvbG9yIEBwcm9wZXJ0aWVzLmdyb3VuZENvbG9yLCBcbiAgICAgICAgICAgICAgICAgICAgQHByb3BlcnRpZXMuaW50ZW5zaXR5XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgd2hlbiAncmVjdGFyZWEnXG4gICAgICAgICAgICAgICAgQGxpZ2h0ID0gbmV3IFRIUkVFLlJlY3RBcmVhTGlnaHQoXG4gICAgICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5Db2xvciBAcHJvcGVydGllcy5jb2xvciwgXG4gICAgICAgICAgICAgICAgICAgIEBwcm9wZXJ0aWVzLmludGVuc2l0eSwgXG4gICAgICAgICAgICAgICAgICAgIEBwcm9wZXJ0aWVzLndpZHRoLCBcbiAgICAgICAgICAgICAgICAgICAgQHByb3BlcnRpZXMuaGVpZ2h0XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgd2hlbiAnc3BvdCdcbiAgICAgICAgICAgICAgICBAbGlnaHQgPSBuZXcgVEhSRUUuU3BvdExpZ2h0KFxuICAgICAgICAgICAgICAgICAgICBuZXcgVEhSRUUuQ29sb3IgQHByb3BlcnRpZXMuY29sb3IsIFxuICAgICAgICAgICAgICAgICAgICBAcHJvcGVydGllcy5pbnRlbnNpdHksIFxuICAgICAgICAgICAgICAgICAgICBAcHJvcGVydGllcy5kaXN0YW5jZSwgXG4gICAgICAgICAgICAgICAgICAgIEBwcm9wZXJ0aWVzLmFuZ2xlLCBcbiAgICAgICAgICAgICAgICAgICAgQHByb3BlcnRpZXMucGVudW1icmEsIFxuICAgICAgICAgICAgICAgICAgICBAcHJvcGVydGllcy5kZWNheVxuICAgICAgICAgICAgICAgIClcblxuICAgICAgICBAYWRkVG9SZW5kZXJpbmdJbnN0YW5jZSBAcHJvcGVydGllcy5wYXJlbnRcblxuICAgICAgICBAYXBwbHlQcm9wZXJ0aWVzKClcblxuICAgICAgICBAc2F2ZUluaXRpYWxQcm9wZXJ0aWVzKClcbiAgICAgICAgXG4gICAgICAgIEBfc3RhdGVzID0gbmV3IFN0YXRlcyBAXG5cbiAgICBhZGRUb1JlbmRlcmluZ0luc3RhbmNlOiAocGFyZW50KSAtPlxuICAgICAgICBpZiBwYXJlbnQuc2NlbmUgdGhlbiBwYXJlbnQuc2NlbmUuYWRkIEBsaWdodFxuICAgICAgICBlbHNlIHBhcmVudC5hZGQgQGxpZ2h0XG4gICAgXG4gICAgYXBwbHlQcm9wZXJ0aWVzOiAocHJvcGVydGllcykgLT5cbiAgICAgICAgT2JqZWN0LmtleXMoQHByb3BlcnRpZXMpLm1hcCAoaykgPT5cbiAgICAgICAgICAgIEBba10gPSBAcHJvcGVydGllc1trXVxuXG4gICAgc2F2ZUluaXRpYWxQcm9wZXJ0aWVzOiAoKSAtPlxuICAgICAgICBAaW5pdGlhbFByb3BlcnRpZXMgPSBAXG5cbiAgICBvbjogKGV2ZW50TmFtZSwgY2IpIC0+XG5cbiAgICAgICAgaWYgZXZlbnROYW1lLmluY2x1ZGVzICdjaGFuZ2UnXG4gICAgICAgICAgICBjYWxsYmFjayA9IChlKSAtPiBjYihlLnZhbHVlKVxuICAgICAgICAgICAgQGxpZ2h0LmFkZEV2ZW50TGlzdGVuZXIgZXZlbnROYW1lLCBjYWxsYmFja1xuXG4gICAgICAgICAgICBGcmFtZXIuQ3VycmVudENvbnRleHQub24gJ3Jlc2V0JywgPT5cbiAgICAgICAgICAgICAgICBAbGlnaHQucmVtb3ZlRXZlbnRMaXN0ZW5lciBldmVudE5hbWUsIGNhbGxiYWNrXG5cbiAgICBhbmltYXRlOiAocHJvcGVydGllcykgLT5cbiAgICAgICAgbmV3IEFuaW1hdGlvbiBALCBwcm9wZXJ0aWVzXG4gICAgXG4gICAgbG9va0F0OiAoYSwgYiwgYykgLT5cbiAgICAgICAgaWYgYXJndW1lbnRzLmxlbmd0aCA9PSAxXG4gICAgICAgICAgICBAbGlnaHQubG9va0F0IGFcbiAgICAgICAgZWxzZSBpZiBhcmd1bWVudHMubGVuZ3RoID09IDNcbiAgICAgICAgICAgIEBsaWdodC5sb29rQXQgYSwgYiwgY1xuXG4gICAgc3RhdGVTd2l0Y2g6IChzdGF0ZSkgLT5cbiAgICAgICAgIyBMb29wIHRocm91Z2ggc3RhdGVzIG9uIG1vZGVsIHRvIGZpbmQgdGhlIHNwZWNpZmllZCBvbmVcbiAgICAgICAgT2JqZWN0LmtleXMoQHN0YXRlcykubWFwIChrKSA9PiBcbiAgICAgICAgICAgIGlmIGsgPT0gc3RhdGVcbiAgICAgICAgICAgICAgICBAc3RhdGVzLmN1cnJlbnQgPSBAc3RhdGVzW2tdXG5cbiAgICAgICAgICAgICAgICAjIExvb3AgdGhyb3VnaCBwcm9wZXJ0eSBrZXlzIG9uIHRoZSBzdGF0ZSBhbmQgYXBwbHkgdGhlIHZhbHVlcyB0byBtb2RlbFxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKEBzdGF0ZXMuY3VycmVudCkubWFwIChwaykgID0+XG4gICAgICAgICAgICAgICAgICAgIEBbcGtdID0gQHN0YXRlcy5jdXJyZW50W3BrXVxuICAgIFxuICAgIHN0YXRlQ3ljbGU6IChzdGF0ZUEsIHN0YXRlQikgLT5cbiAgICAgICAgIyBDaGVjayBpZiBzdGF0ZUEgb3Igc3RhdGVCIGFscmVhZHkgaXMgdGhlIGN1cnJlbnQgc3RhdGUgb24gbW9kZWxcbiAgICAgICAgaWYgQHN0YXRlcy5jdXJyZW50ID09IEBzdGF0ZXNbc3RhdGVBXSB8fCBAc3RhdGVzLmN1cnJlbnQgPT0gQHN0YXRlc1tzdGF0ZUJdXG4gICAgICAgICAgICBpZiBAc3RhdGVzLmN1cnJlbnQgPT0gQHN0YXRlc1tzdGF0ZUFdIHRoZW4gQGFuaW1hdGUgc3RhdGVCXG4gICAgICAgICAgICBlbHNlIGlmIEBzdGF0ZXMuY3VycmVudCA9PSBAc3RhdGVzW3N0YXRlQl0gdGhlbiBAYW5pbWF0ZSBzdGF0ZUFcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgIyBJZiBuZWl0aGVyIGFyZSBjdXJyZW50LCBhbmltYXRlIHRvIHN0YXRlQVxuICAgICAgICAgICAgQGFuaW1hdGUgc3RhdGVBXG5cblxuICAgICMgR0VORVJJQyBPQkpFQ1QzRCBQUk9QRVJUSUVTXG5cbiAgICBAZGVmaW5lICdwb3NpdGlvbicsXG4gICAgICAgIGdldDogLT4gQGxpZ2h0LnBvc2l0aW9uXG5cbiAgICBAZGVmaW5lICd4JyxcbiAgICAgICAgZ2V0OiAtPiBAbGlnaHQucG9zaXRpb24ueCxcbiAgICAgICAgc2V0OiAoeCkgLT4gXG4gICAgICAgICAgICBAbGlnaHQucG9zaXRpb24ueCA9IHhcbiAgICAgICAgICAgIEBsaWdodC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOngnLCB2YWx1ZTogQHh9XG4gICAgXG4gICAgQGRlZmluZSAneScsXG4gICAgICAgIGdldDogLT4gQGxpZ2h0LnBvc2l0aW9uLnksXG4gICAgICAgIHNldDogKHkpIC0+IFxuICAgICAgICAgICAgQGxpZ2h0LnBvc2l0aW9uLnkgPSB5XG4gICAgICAgICAgICBAbGlnaHQuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTp5JywgdmFsdWU6IEB5fVxuICAgIFxuICAgIEBkZWZpbmUgJ3onLFxuICAgICAgICBnZXQ6IC0+IEBsaWdodC5wb3NpdGlvbi56LFxuICAgICAgICBzZXQ6ICh6KSAtPiBcbiAgICAgICAgICAgIEBsaWdodC5wb3NpdGlvbi56ID0gelxuICAgICAgICAgICAgQGxpZ2h0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6eicsIHZhbHVlOiBAen1cblxuICAgIEBkZWZpbmUgJ3JvdGF0aW9uJyxcbiAgICAgICAgZ2V0OiAtPiBAbGlnaHQucm90YXRpb25cblxuICAgIEBkZWZpbmUgJ3JvdGF0aW9uWCcsXG4gICAgICAgIGdldDogLT4gVEhSRUUuTWF0aC5yYWRUb0RlZyhAbGlnaHQucm90YXRpb24ueCksXG4gICAgICAgIHNldDogKHgpIC0+IFxuICAgICAgICAgICAgQGxpZ2h0LnJvdGF0aW9uLnggPSBUSFJFRS5NYXRoLmRlZ1RvUmFkKHgpXG4gICAgICAgICAgICBAbGlnaHQuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpyb3RhdGlvblgnLCB2YWx1ZTogQHJvdGF0aW9uWH1cbiAgICBcbiAgICBAZGVmaW5lICdyb3RhdGlvblknLFxuICAgICAgICBnZXQ6IC0+IFRIUkVFLk1hdGgucmFkVG9EZWcoQGxpZ2h0LnJvdGF0aW9uLnkpLFxuICAgICAgICBzZXQ6ICh5KSAtPiBcbiAgICAgICAgICAgIEBsaWdodC5yb3RhdGlvbi55ID0gVEhSRUUuTWF0aC5kZWdUb1JhZCh5KVxuICAgICAgICAgICAgQGxpZ2h0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6cm90YXRpb25ZJywgdmFsdWU6IEByb3RhdGlvbll9XG4gICAgXG4gICAgQGRlZmluZSAncm90YXRpb25aJyxcbiAgICAgICAgZ2V0OiAtPiBUSFJFRS5NYXRoLnJhZFRvRGVnKEBsaWdodC5yb3RhdGlvbi56KSxcbiAgICAgICAgc2V0OiAoeikgLT4gXG4gICAgICAgICAgICBAbGlnaHQucm90YXRpb24ueiA9IFRIUkVFLk1hdGguZGVnVG9SYWQoeilcbiAgICAgICAgICAgIEBsaWdodC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOnJvdGF0aW9uWicsIHZhbHVlOiBAcm90YXRpb25afVxuICAgIFxuICAgIEBkZWZpbmUgJ3Zpc2libGUnLFxuICAgICAgICBnZXQ6IC0+IEBsaWdodC52aXNpYmxlXG4gICAgICAgIHNldDogKGJvb2wpIC0+IFxuICAgICAgICAgICAgQGxpZ2h0LnZpc2libGUgPSBib29sXG4gICAgICAgICAgICBAbGlnaHQuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTp2aXNpYmxlJywgdmFsdWU6IEB2aXNpYmxlfVxuICAgIFxuICAgIEBkZWZpbmUgJ3N0YXRlcycsXG4gICAgICAgIGdldDogLT5cbiAgICAgICAgICAgIEBfc3RhdGVzLnN0YXRlc1xuICAgICAgICBzZXQ6IChzdGF0ZXMpIC0+XG4gICAgICAgICAgICBfLmV4dGVuZCBAc3RhdGVzLCBzdGF0ZXNcblxuICAgICMgTElHSFQgUFJPUEVSVElFU1xuXG4gICAgQGRlZmluZSAnY29sb3InLFxuICAgICAgICBnZXQ6IC0+IEBsaWdodC5jb2xvclxuICAgICAgICBzZXQ6IChjb2xvcikgLT5cbiAgICAgICAgICAgIEBsaWdodC5jb2xvciA9IG5ldyBUSFJFRS5Db2xvciBjb2xvclxuICAgICAgICAgICAgQGxpZ2h0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6Y29sb3InLCB2YWx1ZTogQGNvbG9yfVxuICAgIFxuICAgIEBkZWZpbmUgJ2ludGVuc2l0eScsXG4gICAgICAgIGdldDogLT4gQGxpZ2h0LmludGVuc2l0eVxuICAgICAgICBzZXQ6IChpbnRlbnNpdHkpIC0+XG4gICAgICAgICAgICBAbGlnaHQuaW50ZW5zaXR5ID0gaW50ZW5zaXR5XG4gICAgICAgICAgICBAbGlnaHQuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTppbnRlbnNpdHknLCB2YWx1ZTogQGludGVuc2l0eX1cblxuICAgIEBkZWZpbmUgJ2FuZ2xlJyxcbiAgICAgICAgZ2V0OiAtPiBAbGlnaHQuYW5nbGVcbiAgICAgICAgc2V0OiAoYW5nbGUpIC0+XG4gICAgICAgICAgICBAbGlnaHQuYW5nbGUgPSBhbmdsZVxuICAgICAgICAgICAgQGxpZ2h0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6YW5nbGUnLCB2YWx1ZTogQGFuZ2xlfVxuICAgIFxuICAgIEBkZWZpbmUgJ2Nhc3RTaGFkb3cnLFxuICAgICAgICBnZXQ6IC0+IEBsaWdodC5jYXN0U2hhZG93XG4gICAgICAgIHNldDogKGJvb2wpIC0+XG4gICAgICAgICAgICBAbGlnaHQuY2FzdFNoYWRvdyA9IGJvb2xcbiAgICAgICAgICAgIEBsaWdodC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOmNhc3RTaGFkb3cnLCB2YWx1ZTogQGNhc3RTaGFkb3d9XG4gICAgXG4gICAgQGRlZmluZSAnZGVjYXknLFxuICAgICAgICBnZXQ6IC0+IEBsaWdodC5kZWNheVxuICAgICAgICBzZXQ6IChkZWNheSkgLT5cbiAgICAgICAgICAgIEBsaWdodC5kZWNheSA9IGRlY2F5XG4gICAgICAgICAgICBAbGlnaHQuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpkZWNheScsIHZhbHVlOiBAZGVjYXl9XG4gICAgXG4gICAgQGRlZmluZSAnZGlzdGFuY2UnLFxuICAgICAgICBnZXQ6IC0+IEBsaWdodC5kaXN0YW5jZVxuICAgICAgICBzZXQ6IChkaXN0YW5jZSkgLT5cbiAgICAgICAgICAgIEBsaWdodC5kaXN0YW5jZSA9IGRpc3RhbmNlXG4gICAgICAgICAgICBAbGlnaHQuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpkaXN0YW5jZScsIHZhbHVlOiBAZGlzdGFuY2V9XG4gICAgXG4gICAgQGRlZmluZSAncGVudW1icmEnLFxuICAgICAgICBnZXQ6IC0+IEBsaWdodC5wZW51bWJyYVxuICAgICAgICBzZXQ6IChwZW51bWJyYSkgLT5cbiAgICAgICAgICAgIEBsaWdodC5wZW51bWJyYSA9IHBlbnVtYnJhXG4gICAgICAgICAgICBAbGlnaHQuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpwZW51bWJyYScsIHZhbHVlOiBAcGVudW1icmF9XG4gICAgXG4gICAgQGRlZmluZSAncG93ZXInLFxuICAgICAgICBnZXQ6IC0+IEBsaWdodC5wb3dlclxuICAgICAgICBzZXQ6IChwb3dlcikgLT5cbiAgICAgICAgICAgIEBsaWdodC5wb3dlciA9IHBvd2VyXG4gICAgICAgICAgICBAbGlnaHQuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpwb3dlcicsIHZhbHVlOiBAcG93ZXJ9XG4gICAgXG4gICAgQGRlZmluZSAnc2hhZG93JyxcbiAgICAgICAgZ2V0OiAtPiBAbGlnaHQuc2hhZG93XG4gICAgICAgIHNldDogKHNoYWRvdykgLT5cbiAgICAgICAgICAgIEBsaWdodC5zaGFkb3cgPSBzaGFkb3dcbiAgICBcbiAgICBAZGVmaW5lICd0YXJnZXQnLFxuICAgICAgICBnZXQ6IC0+IEBsaWdodC50YXJnZXRcbiAgICAgICAgc2V0OiAodGFyZ2V0KSAtPlxuICAgICAgICAgICAgQGxpZ2h0LnRhcmdldCA9IHRhcmdldFxuICAgICAgICAgICAgQGxpZ2h0LmRpc3BhdGNoRXZlbnQge3R5cGU6ICdjaGFuZ2U6dGFyZ2V0JywgdmFsdWU6IEB0YXJnZXR9XG4gICAgXG4gICAgQGRlZmluZSAnd2lkdGgnLFxuICAgICAgICBnZXQ6IC0+IEBsaWdodC53aWR0aFxuICAgICAgICBzZXQ6ICh3aWR0aCkgLT5cbiAgICAgICAgICAgIEBsaWdodC53aWR0aCA9IHdpZHRoXG4gICAgICAgICAgICBAbGlnaHQuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTp3aWR0aCcsIHZhbHVlOiBAd2lkdGh9XG4gICAgXG4gICAgQGRlZmluZSAnaGVpZ2h0JyxcbiAgICAgICAgZ2V0OiAtPiBAbGlnaHQuaGVpZ2h0XG4gICAgICAgIHNldDogKGhlaWdodCkgLT5cbiAgICAgICAgICAgIEBsaWdodC5oZWlnaHQgPSBoZWlnaHRcbiAgICAgICAgICAgIEBsaWdodC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOmhlaWdodCcsIHZhbHVlOiBAaGVpZ2h0fVxuICAgIFxuICAgIEBkZWZpbmUgJ2dyb3VuZENvbG9yJyxcbiAgICAgICAgZ2V0OiAtPiBAbGlnaHQuZ3JvdW5kQ29sb3JcbiAgICAgICAgc2V0OiAoZ3JvdW5kQ29sb3IpIC0+XG4gICAgICAgICAgICBAbGlnaHQuZ3JvdW5kQ29sb3IgPSBuZXcgVEhSRUUuQ29sb3IgZ3JvdW5kQ29sb3JcbiAgICAgICAgICAgIEBsaWdodC5kaXNwYXRjaEV2ZW50IHt0eXBlOiAnY2hhbmdlOmdyb3VuZENvbG9yJywgdmFsdWU6IEBncm91bmRDb2xvcn1cbiAgICBcbiAgICBAZGVmaW5lICdza3lDb2xvcicsXG4gICAgICAgIGdldDogLT4gQGxpZ2h0LnNreUNvbG9yXG4gICAgICAgIHNldDogKHNreUNvbG9yKSAtPlxuICAgICAgICAgICAgQGxpZ2h0LnNreUNvbG9yID0gbmV3IFRIUkVFLkNvbG9yIHNreUNvbG9yXG4gICAgICAgICAgICBAbGlnaHQuZGlzcGF0Y2hFdmVudCB7dHlwZTogJ2NoYW5nZTpza3lDb2xvcicsIHZhbHVlOiBAc2t5Q29sb3J9IiwicyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgJ3NjcmlwdCdcbnMuc2V0QXR0cmlidXRlICdzcmMnLCAnaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RhZy9qcz9pZD1VQS03NTA1NjUzMy0zJ1xucy5zZXRBdHRyaWJ1dGUgJ2FzeW5jJywgJydcbmRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQgc1xuXG53aW5kb3cuZGF0YUxheWVyID0gd2luZG93LmRhdGFMYXllciB8fCBbXVxuXG53aW5kb3cuZ3RhZyA9ICgpIC0+IFxuICAgIGRhdGFMYXllci5wdXNoIGFyZ3VtZW50c1xud2luZG93Lmd0YWcgJ2pzJywgbmV3IERhdGUoKVxud2luZG93Lmd0YWcgJ2NvbmZpZycsICdVQS03NTA1NjUzMy0zJ1xuXG5pZiB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmNsdWRlcyAnZnJhbWVyLmNsb3VkJ1xuICAgIHdpbmRvdy5ndGFnICdldmVudCcsICdDbG91ZCcsXG4gICAgICAgICdldmVudF9jYXRlZ29yeSc6ICdWaXNpdG9ycydcbmVsc2VcbiAgICB3aW5kb3cuZ3RhZyAnZXZlbnQnLCAnTm9uLUNsb3VkJyxcbiAgICAgICAgJ2V2ZW50X2NhdGVnb3J5JzogJ1Zpc2l0b3JzJyIsIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBeUJBQTtBREFBLElBQUE7O0FBQUEsQ0FBQSxHQUFJLFFBQVEsQ0FBQyxhQUFULENBQXVCLFFBQXZCOztBQUNKLENBQUMsQ0FBQyxZQUFGLENBQWUsS0FBZixFQUFzQiwyREFBdEI7O0FBQ0EsQ0FBQyxDQUFDLFlBQUYsQ0FBZSxPQUFmLEVBQXdCLEVBQXhCOztBQUNBLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBZCxDQUEwQixDQUExQjs7QUFFQSxNQUFNLENBQUMsU0FBUCxHQUFtQixNQUFNLENBQUMsU0FBUCxJQUFvQjs7QUFFdkMsTUFBTSxDQUFDLElBQVAsR0FBYyxTQUFBO1NBQ1YsU0FBUyxDQUFDLElBQVYsQ0FBZSxTQUFmO0FBRFU7O0FBRWQsTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFaLEVBQXNCLElBQUEsSUFBQSxDQUFBLENBQXRCOztBQUNBLE1BQU0sQ0FBQyxJQUFQLENBQVksUUFBWixFQUFzQixlQUF0Qjs7QUFFQSxJQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQXJCLENBQThCLGNBQTlCLENBQUg7RUFDSSxNQUFNLENBQUMsSUFBUCxDQUFZLE9BQVosRUFBcUIsT0FBckIsRUFDSTtJQUFBLGdCQUFBLEVBQWtCLFVBQWxCO0dBREosRUFESjtDQUFBLE1BQUE7RUFJSSxNQUFNLENBQUMsSUFBUCxDQUFZLE9BQVosRUFBcUIsV0FBckIsRUFDSTtJQUFBLGdCQUFBLEVBQWtCLFVBQWxCO0dBREosRUFKSjs7Ozs7QURaQSxJQUFBLCtCQUFBO0VBQUE7OztBQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7O0FBRVYsWUFBYSxPQUFBLENBQVEscUJBQVI7O0FBQ2IsWUFBYSxPQUFBLENBQVEscUJBQVI7O0FBQ2IsU0FBVSxPQUFBLENBQVEsa0JBQVI7O0FBRUwsT0FBTyxDQUFDOzs7RUFDRyxlQUFDLFVBQUQ7SUFDVCxxQ0FBQTtJQUVBLElBQUcsQ0FBQyxVQUFVLENBQUMsSUFBZjtBQUNJLFlBQU0sS0FBQSxDQUFNLDhCQUFOLEVBRFY7O0lBR0EsSUFBQyxDQUFBLFVBQUQsR0FBYyxDQUFDLENBQUMsUUFBRixDQUFXLFVBQVgsRUFDVjtNQUFBLFVBQUEsRUFBWSxJQUFaO0tBRFU7SUFHZCxJQUFDLENBQUEsVUFBRCxDQUFBO0VBVFM7O2tCQVdiLFVBQUEsR0FBWSxTQUFBO0FBQ1IsWUFBTyxJQUFDLENBQUEsVUFBVSxDQUFDLElBQW5CO0FBQUEsV0FDUyxPQURUO1FBRVEsSUFBQyxDQUFBLEtBQUQsR0FBYSxJQUFBLEtBQUssQ0FBQyxVQUFOLENBQ0wsSUFBQSxLQUFLLENBQUMsS0FBTixDQUFZLElBQUMsQ0FBQSxVQUFVLENBQUMsS0FBeEIsRUFDSixJQUFDLENBQUEsVUFBVSxDQUFDLFNBRFIsRUFFSixJQUFDLENBQUEsVUFBVSxDQUFDLFFBRlIsRUFHSixJQUFDLENBQUEsVUFBVSxDQUFDLEtBSFIsQ0FESztBQURaO0FBRFQsV0FRUyxhQVJUO1FBU1EsSUFBQyxDQUFBLEtBQUQsR0FBYSxJQUFBLEtBQUssQ0FBQyxnQkFBTixDQUNMLElBQUEsS0FBSyxDQUFDLEtBQU4sQ0FBWSxJQUFDLENBQUEsVUFBVSxDQUFDLEtBQXhCLEVBQ0osSUFBQyxDQUFBLFVBQVUsQ0FBQyxTQURSLENBREs7QUFEWjtBQVJULFdBYVMsU0FiVDtRQWNRLElBQUMsQ0FBQSxLQUFELEdBQWEsSUFBQSxLQUFLLENBQUMsWUFBTixDQUNMLElBQUEsS0FBSyxDQUFDLEtBQU4sQ0FBWSxJQUFDLENBQUEsVUFBVSxDQUFDLEtBQXhCLEVBQ0osSUFBQyxDQUFBLFVBQVUsQ0FBQyxTQURSLENBREs7QUFEWjtBQWJULFdBa0JTLFlBbEJUO1FBbUJRLElBQUMsQ0FBQSxLQUFELEdBQWEsSUFBQSxLQUFLLENBQUMsZUFBTixDQUNMLElBQUEsS0FBSyxDQUFDLEtBQU4sQ0FBWSxJQUFDLENBQUEsVUFBVSxDQUFDLFFBQXhCLEVBQ0EsSUFBQSxLQUFLLENBQUMsS0FBTixDQUFZLElBQUMsQ0FBQSxVQUFVLENBQUMsV0FBeEIsRUFDSixJQUFDLENBQUEsVUFBVSxDQUFDLFNBRFIsQ0FEQSxDQURLO0FBRFo7QUFsQlQsV0F3QlMsVUF4QlQ7UUF5QlEsSUFBQyxDQUFBLEtBQUQsR0FBYSxJQUFBLEtBQUssQ0FBQyxhQUFOLENBQ0wsSUFBQSxLQUFLLENBQUMsS0FBTixDQUFZLElBQUMsQ0FBQSxVQUFVLENBQUMsS0FBeEIsRUFDSixJQUFDLENBQUEsVUFBVSxDQUFDLFNBRFIsRUFFSixJQUFDLENBQUEsVUFBVSxDQUFDLEtBRlIsRUFHSixJQUFDLENBQUEsVUFBVSxDQUFDLE1BSFIsQ0FESztBQURaO0FBeEJULFdBK0JTLE1BL0JUO1FBZ0NRLElBQUMsQ0FBQSxLQUFELEdBQWEsSUFBQSxLQUFLLENBQUMsU0FBTixDQUNMLElBQUEsS0FBSyxDQUFDLEtBQU4sQ0FBWSxJQUFDLENBQUEsVUFBVSxDQUFDLEtBQXhCLEVBQ0osSUFBQyxDQUFBLFVBQVUsQ0FBQyxTQURSLEVBRUosSUFBQyxDQUFBLFVBQVUsQ0FBQyxRQUZSLEVBR0osSUFBQyxDQUFBLFVBQVUsQ0FBQyxLQUhSLEVBSUosSUFBQyxDQUFBLFVBQVUsQ0FBQyxRQUpSLEVBS0osSUFBQyxDQUFBLFVBQVUsQ0FBQyxLQUxSLENBREs7QUFoQ3JCO0lBeUNBLElBQUMsQ0FBQSxzQkFBRCxDQUF3QixJQUFDLENBQUEsVUFBVSxDQUFDLE1BQXBDO0lBRUEsSUFBQyxDQUFBLGVBQUQsQ0FBQTtJQUVBLElBQUMsQ0FBQSxxQkFBRCxDQUFBO1dBRUEsSUFBQyxDQUFBLE9BQUQsR0FBZSxJQUFBLE1BQUEsQ0FBTyxJQUFQO0VBaERQOztrQkFrRFosc0JBQUEsR0FBd0IsU0FBQyxNQUFEO0lBQ3BCLElBQUcsTUFBTSxDQUFDLEtBQVY7YUFBcUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFiLENBQWlCLElBQUMsQ0FBQSxLQUFsQixFQUFyQjtLQUFBLE1BQUE7YUFDSyxNQUFNLENBQUMsR0FBUCxDQUFXLElBQUMsQ0FBQSxLQUFaLEVBREw7O0VBRG9COztrQkFJeEIsZUFBQSxHQUFpQixTQUFDLFVBQUQ7V0FDYixNQUFNLENBQUMsSUFBUCxDQUFZLElBQUMsQ0FBQSxVQUFiLENBQXdCLENBQUMsR0FBekIsQ0FBNkIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLENBQUQ7ZUFDekIsS0FBRSxDQUFBLENBQUEsQ0FBRixHQUFPLEtBQUMsQ0FBQSxVQUFXLENBQUEsQ0FBQTtNQURNO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUE3QjtFQURhOztrQkFJakIscUJBQUEsR0FBdUIsU0FBQTtXQUNuQixJQUFDLENBQUEsaUJBQUQsR0FBcUI7RUFERjs7a0JBR3ZCLEVBQUEsR0FBSSxTQUFDLFNBQUQsRUFBWSxFQUFaO0FBRUEsUUFBQTtJQUFBLElBQUcsU0FBUyxDQUFDLFFBQVYsQ0FBbUIsUUFBbkIsQ0FBSDtNQUNJLFFBQUEsR0FBVyxTQUFDLENBQUQ7ZUFBTyxFQUFBLENBQUcsQ0FBQyxDQUFDLEtBQUw7TUFBUDtNQUNYLElBQUMsQ0FBQSxLQUFLLENBQUMsZ0JBQVAsQ0FBd0IsU0FBeEIsRUFBbUMsUUFBbkM7YUFFQSxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQXRCLENBQXlCLE9BQXpCLEVBQWtDLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQTtpQkFDOUIsS0FBQyxDQUFBLEtBQUssQ0FBQyxtQkFBUCxDQUEyQixTQUEzQixFQUFzQyxRQUF0QztRQUQ4QjtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBbEMsRUFKSjs7RUFGQTs7a0JBU0osT0FBQSxHQUFTLFNBQUMsVUFBRDtXQUNELElBQUEsU0FBQSxDQUFVLElBQVYsRUFBYSxVQUFiO0VBREM7O2tCQUdULE1BQUEsR0FBUSxTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUDtJQUNKLElBQUcsU0FBUyxDQUFDLE1BQVYsS0FBb0IsQ0FBdkI7YUFDSSxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsQ0FBYyxDQUFkLEVBREo7S0FBQSxNQUVLLElBQUcsU0FBUyxDQUFDLE1BQVYsS0FBb0IsQ0FBdkI7YUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsQ0FBYyxDQUFkLEVBQWlCLENBQWpCLEVBQW9CLENBQXBCLEVBREM7O0VBSEQ7O2tCQU1SLFdBQUEsR0FBYSxTQUFDLEtBQUQ7V0FFVCxNQUFNLENBQUMsSUFBUCxDQUFZLElBQUMsQ0FBQSxNQUFiLENBQW9CLENBQUMsR0FBckIsQ0FBeUIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLENBQUQ7UUFDckIsSUFBRyxDQUFBLEtBQUssS0FBUjtVQUNJLEtBQUMsQ0FBQSxNQUFNLENBQUMsT0FBUixHQUFrQixLQUFDLENBQUEsTUFBTyxDQUFBLENBQUE7aUJBRzFCLE1BQU0sQ0FBQyxJQUFQLENBQVksS0FBQyxDQUFBLE1BQU0sQ0FBQyxPQUFwQixDQUE0QixDQUFDLEdBQTdCLENBQWlDLFNBQUMsRUFBRDttQkFDN0IsS0FBRSxDQUFBLEVBQUEsQ0FBRixHQUFRLEtBQUMsQ0FBQSxNQUFNLENBQUMsT0FBUSxDQUFBLEVBQUE7VUFESyxDQUFqQyxFQUpKOztNQURxQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBekI7RUFGUzs7a0JBVWIsVUFBQSxHQUFZLFNBQUMsTUFBRCxFQUFTLE1BQVQ7SUFFUixJQUFHLElBQUMsQ0FBQSxNQUFNLENBQUMsT0FBUixLQUFtQixJQUFDLENBQUEsTUFBTyxDQUFBLE1BQUEsQ0FBM0IsSUFBc0MsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLEtBQW1CLElBQUMsQ0FBQSxNQUFPLENBQUEsTUFBQSxDQUFwRTtNQUNJLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLEtBQW1CLElBQUMsQ0FBQSxNQUFPLENBQUEsTUFBQSxDQUE5QjtlQUEyQyxJQUFDLENBQUEsT0FBRCxDQUFTLE1BQVQsRUFBM0M7T0FBQSxNQUNLLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLEtBQW1CLElBQUMsQ0FBQSxNQUFPLENBQUEsTUFBQSxDQUE5QjtlQUEyQyxJQUFDLENBQUEsT0FBRCxDQUFTLE1BQVQsRUFBM0M7T0FGVDtLQUFBLE1BQUE7YUFLSSxJQUFDLENBQUEsT0FBRCxDQUFTLE1BQVQsRUFMSjs7RUFGUTs7RUFZWixLQUFDLENBQUEsTUFBRCxDQUFRLFVBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQztJQUFWLENBQUw7R0FESjs7RUFHQSxLQUFDLENBQUEsTUFBRCxDQUFRLEdBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUM7SUFBbkIsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLENBQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFoQixHQUFvQjthQUNwQixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sVUFBUDtRQUFtQixLQUFBLEVBQU8sSUFBQyxDQUFBLENBQTNCO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsR0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQztJQUFuQixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsQ0FBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQWhCLEdBQW9CO2FBQ3BCLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQjtRQUFDLElBQUEsRUFBTSxVQUFQO1FBQW1CLEtBQUEsRUFBTyxJQUFDLENBQUEsQ0FBM0I7T0FBckI7SUFGQyxDQURMO0dBREo7O0VBTUEsS0FBQyxDQUFBLE1BQUQsQ0FBUSxHQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDO0lBQW5CLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxDQUFEO01BQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBaEIsR0FBb0I7YUFDcEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLENBQXFCO1FBQUMsSUFBQSxFQUFNLFVBQVA7UUFBbUIsS0FBQSxFQUFPLElBQUMsQ0FBQSxDQUEzQjtPQUFyQjtJQUZDLENBREw7R0FESjs7RUFNQSxLQUFDLENBQUEsTUFBRCxDQUFRLFVBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQztJQUFWLENBQUw7R0FESjs7RUFHQSxLQUFDLENBQUEsTUFBRCxDQUFRLFdBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFYLENBQW9CLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQXBDO0lBQUgsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLENBQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFoQixHQUFvQixLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVgsQ0FBb0IsQ0FBcEI7YUFDcEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLENBQXFCO1FBQUMsSUFBQSxFQUFNLGtCQUFQO1FBQTJCLEtBQUEsRUFBTyxJQUFDLENBQUEsU0FBbkM7T0FBckI7SUFGQyxDQURMO0dBREo7O0VBTUEsS0FBQyxDQUFBLE1BQUQsQ0FBUSxXQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBWCxDQUFvQixJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFwQztJQUFILENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxDQUFEO01BQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBaEIsR0FBb0IsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFYLENBQW9CLENBQXBCO2FBQ3BCLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQjtRQUFDLElBQUEsRUFBTSxrQkFBUDtRQUEyQixLQUFBLEVBQU8sSUFBQyxDQUFBLFNBQW5DO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsV0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVgsQ0FBb0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBcEM7SUFBSCxDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsQ0FBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQWhCLEdBQW9CLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBWCxDQUFvQixDQUFwQjthQUNwQixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sa0JBQVA7UUFBMkIsS0FBQSxFQUFPLElBQUMsQ0FBQSxTQUFuQztPQUFyQjtJQUZDLENBREw7R0FESjs7RUFNQSxLQUFDLENBQUEsTUFBRCxDQUFRLFNBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQztJQUFWLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxJQUFEO01BQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxPQUFQLEdBQWlCO2FBQ2pCLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQjtRQUFDLElBQUEsRUFBTSxnQkFBUDtRQUF5QixLQUFBLEVBQU8sSUFBQyxDQUFBLE9BQWpDO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsUUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFDRCxJQUFDLENBQUEsT0FBTyxDQUFDO0lBRFIsQ0FBTDtJQUVBLEdBQUEsRUFBSyxTQUFDLE1BQUQ7YUFDRCxDQUFDLENBQUMsTUFBRixDQUFTLElBQUMsQ0FBQSxNQUFWLEVBQWtCLE1BQWxCO0lBREMsQ0FGTDtHQURKOztFQVFBLEtBQUMsQ0FBQSxNQUFELENBQVEsT0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLEtBQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVAsR0FBbUIsSUFBQSxLQUFLLENBQUMsS0FBTixDQUFZLEtBQVo7YUFDbkIsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLENBQXFCO1FBQUMsSUFBQSxFQUFNLGNBQVA7UUFBdUIsS0FBQSxFQUFPLElBQUMsQ0FBQSxLQUEvQjtPQUFyQjtJQUZDLENBREw7R0FESjs7RUFNQSxLQUFDLENBQUEsTUFBRCxDQUFRLFdBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQztJQUFWLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxTQUFEO01BQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxTQUFQLEdBQW1CO2FBQ25CLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQjtRQUFDLElBQUEsRUFBTSxrQkFBUDtRQUEyQixLQUFBLEVBQU8sSUFBQyxDQUFBLFNBQW5DO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsT0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLEtBQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVAsR0FBZTthQUNmLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQjtRQUFDLElBQUEsRUFBTSxjQUFQO1FBQXVCLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FBL0I7T0FBckI7SUFGQyxDQURMO0dBREo7O0VBTUEsS0FBQyxDQUFBLE1BQUQsQ0FBUSxZQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsSUFBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsVUFBUCxHQUFvQjthQUNwQixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sbUJBQVA7UUFBNEIsS0FBQSxFQUFPLElBQUMsQ0FBQSxVQUFwQztPQUFyQjtJQUZDLENBREw7R0FESjs7RUFNQSxLQUFDLENBQUEsTUFBRCxDQUFRLE9BQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQztJQUFWLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxLQUFEO01BQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLEdBQWU7YUFDZixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sY0FBUDtRQUF1QixLQUFBLEVBQU8sSUFBQyxDQUFBLEtBQS9CO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsVUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLFFBQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVAsR0FBa0I7YUFDbEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLENBQXFCO1FBQUMsSUFBQSxFQUFNLGlCQUFQO1FBQTBCLEtBQUEsRUFBTyxJQUFDLENBQUEsUUFBbEM7T0FBckI7SUFGQyxDQURMO0dBREo7O0VBTUEsS0FBQyxDQUFBLE1BQUQsQ0FBUSxVQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsUUFBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUCxHQUFrQjthQUNsQixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0saUJBQVA7UUFBMEIsS0FBQSxFQUFPLElBQUMsQ0FBQSxRQUFsQztPQUFyQjtJQUZDLENBREw7R0FESjs7RUFNQSxLQUFDLENBQUEsTUFBRCxDQUFRLE9BQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQztJQUFWLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxLQUFEO01BQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFQLEdBQWU7YUFDZixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sY0FBUDtRQUF1QixLQUFBLEVBQU8sSUFBQyxDQUFBLEtBQS9CO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsUUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLE1BQUQ7YUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsR0FBZ0I7SUFEZixDQURMO0dBREo7O0VBS0EsS0FBQyxDQUFBLE1BQUQsQ0FBUSxRQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsTUFBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBUCxHQUFnQjthQUNoQixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sZUFBUDtRQUF3QixLQUFBLEVBQU8sSUFBQyxDQUFBLE1BQWhDO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsT0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLEtBQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQVAsR0FBZTthQUNmLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQjtRQUFDLElBQUEsRUFBTSxjQUFQO1FBQXVCLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FBL0I7T0FBckI7SUFGQyxDQURMO0dBREo7O0VBTUEsS0FBQyxDQUFBLE1BQUQsQ0FBUSxRQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsTUFBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBUCxHQUFnQjthQUNoQixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sZUFBUDtRQUF3QixLQUFBLEVBQU8sSUFBQyxDQUFBLE1BQWhDO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsYUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLFdBQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLFdBQVAsR0FBeUIsSUFBQSxLQUFLLENBQUMsS0FBTixDQUFZLFdBQVo7YUFDekIsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLENBQXFCO1FBQUMsSUFBQSxFQUFNLG9CQUFQO1FBQTZCLEtBQUEsRUFBTyxJQUFDLENBQUEsV0FBckM7T0FBckI7SUFGQyxDQURMO0dBREo7O0VBTUEsS0FBQyxDQUFBLE1BQUQsQ0FBUSxVQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsUUFBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUCxHQUFzQixJQUFBLEtBQUssQ0FBQyxLQUFOLENBQVksUUFBWjthQUN0QixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0saUJBQVA7UUFBMEIsS0FBQSxFQUFPLElBQUMsQ0FBQSxRQUFsQztPQUFyQjtJQUZDLENBREw7R0FESjs7OztHQXRQd0I7Ozs7QURONUIsSUFBQSxDQUFBO0VBQUE7OztBQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7O0FBRUwsT0FBTyxDQUFDOzs7RUFFVixJQUFDLENBQUEsTUFBRCxHQUFVLFNBQUMsWUFBRCxFQUFlLFVBQWY7SUFDTixJQUFHLFVBQVUsQ0FBQyxRQUFkO01BQ0ksVUFBVSxDQUFDLEdBQVgsR0FBaUIsU0FBQyxLQUFEO0FBQ2IsY0FBTSxLQUFBLENBQVMsSUFBQyxDQUFBLFdBQVcsQ0FBQyxJQUFkLEdBQW1CLEdBQW5CLEdBQXNCLFlBQXRCLEdBQW1DLGNBQTNDO01BRE8sRUFEckI7O1dBSUEsTUFBTSxDQUFDLGNBQVAsQ0FBc0IsSUFBQyxDQUFBLFNBQXZCLEVBQWtDLFlBQWxDLEVBQWdELFVBQWhEO0VBTE07O0VBT0csY0FBQyxVQUFEOztNQUFDLGFBQVc7O0lBQ3JCLHNDQUFNLFVBQVUsQ0FBQyxRQUFqQixFQUEyQixVQUFVLENBQUMsUUFBdEM7SUFFQSxDQUFDLENBQUMsUUFBRixDQUFXLFVBQVgsRUFDSTtNQUFBLFVBQUEsRUFBWSxJQUFaO01BQ0EsYUFBQSxFQUFlLElBRGY7S0FESjtJQUlBLElBQUMsQ0FBQSxtQkFBRCxDQUFxQixVQUFyQjtJQUVBLElBQUcsVUFBVSxDQUFDLE1BQWQ7TUFDSSxJQUFDLENBQUEsc0JBQUQsQ0FBd0IsVUFBVSxDQUFDLE1BQW5DLEVBREo7O0lBR0EsSUFBQyxDQUFBLFFBQUQsQ0FBVSxVQUFVLENBQUMsS0FBckIsRUFBNEIsVUFBVSxDQUFDLE1BQXZDLEVBQStDLFVBQVUsQ0FBQyxNQUExRCxFQUFrRSxVQUFVLENBQUMsTUFBN0U7SUFDQSxJQUFDLENBQUEsV0FBRCxDQUFhLENBQUMsVUFBVSxDQUFDLENBQVosRUFBZSxVQUFVLENBQUMsQ0FBMUIsRUFBNkIsVUFBVSxDQUFDLENBQXhDLENBQWI7SUFDQSxJQUFDLENBQUEsV0FBRCxDQUFhLENBQUMsVUFBVSxDQUFDLFNBQVosRUFBdUIsVUFBVSxDQUFDLFNBQWxDLEVBQTZDLFVBQVUsQ0FBQyxTQUF4RCxDQUFiO0VBZFM7O2lCQWdCYixtQkFBQSxHQUFxQixTQUFDLFVBQUQ7SUFDakIsSUFBQyxDQUFBLFVBQUQsR0FBYyxVQUFVLENBQUM7V0FDekIsSUFBQyxDQUFBLGFBQUQsR0FBaUIsVUFBVSxDQUFDO0VBRlg7O2lCQUlyQixzQkFBQSxHQUF3QixTQUFDLE1BQUQ7SUFDcEIsSUFBRyxNQUFNLENBQUMsS0FBVjthQUFxQixNQUFNLENBQUMsS0FBSyxDQUFDLEdBQWIsQ0FBaUIsSUFBakIsRUFBckI7S0FBQSxNQUFBO2FBQ0ssTUFBTSxDQUFDLEdBQVAsQ0FBVyxJQUFYLEVBREw7O0VBRG9COztpQkFJeEIsUUFBQSxHQUFVLFNBQUMsWUFBRCxFQUFlLE1BQWYsRUFBdUIsTUFBdkIsRUFBK0IsTUFBL0I7SUFDTixJQUFHLFlBQUg7YUFDSSxJQUFDLENBQUEsS0FBRCxHQUFTLFlBQUEsSUFBZ0IsRUFEN0I7S0FBQSxNQUFBO01BR0ksSUFBQyxDQUFBLE1BQUQsR0FBVSxNQUFBLElBQVU7TUFDcEIsSUFBQyxDQUFBLE1BQUQsR0FBVSxNQUFBLElBQVU7YUFDcEIsSUFBQyxDQUFBLE1BQUQsR0FBVSxNQUFBLElBQVUsRUFMeEI7O0VBRE07O2lCQVFWLFdBQUEsR0FBYSxTQUFDLFFBQUQ7SUFDVCxJQUFDLENBQUEsQ0FBRCxHQUFLLFFBQVMsQ0FBQSxDQUFBLENBQVQsSUFBZTtJQUNwQixJQUFDLENBQUEsQ0FBRCxHQUFLLFFBQVMsQ0FBQSxDQUFBLENBQVQsSUFBZTtXQUNwQixJQUFDLENBQUEsQ0FBRCxHQUFLLFFBQVMsQ0FBQSxDQUFBLENBQVQsSUFBZTtFQUhYOztpQkFLYixXQUFBLEdBQWEsU0FBQyxRQUFEO0lBQ1QsSUFBQyxDQUFBLFNBQUQsR0FBYSxRQUFTLENBQUEsQ0FBQSxDQUFULElBQWU7SUFDNUIsSUFBQyxDQUFBLFNBQUQsR0FBYSxRQUFTLENBQUEsQ0FBQSxDQUFULElBQWU7V0FDNUIsSUFBQyxDQUFBLFNBQUQsR0FBYSxRQUFTLENBQUEsQ0FBQSxDQUFULElBQWU7RUFIbkI7O0VBS2IsSUFBQyxDQUFBLE1BQUQsQ0FBUSxPQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsS0FBRDthQUFXLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLEtBQVgsRUFBa0IsS0FBbEIsRUFBeUIsS0FBekI7SUFBWCxDQURMO0dBREo7O0VBSUEsSUFBQyxDQUFBLE1BQUQsQ0FBUSxRQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsS0FBRDthQUFXLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLEtBQVgsRUFBa0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxDQUF6QixFQUE0QixJQUFDLENBQUEsS0FBSyxDQUFDLENBQW5DO0lBQVgsQ0FETDtHQURKOztFQUlBLElBQUMsQ0FBQSxNQUFELENBQVEsUUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLEtBQUQ7YUFBVyxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxJQUFDLENBQUEsS0FBSyxDQUFDLENBQWxCLEVBQXFCLEtBQXJCLEVBQTRCLElBQUMsQ0FBQSxLQUFLLENBQUMsQ0FBbkM7SUFBWCxDQURMO0dBREo7O0VBSUEsSUFBQyxDQUFBLE1BQUQsQ0FBUSxRQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUM7SUFBVixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsS0FBRDthQUFXLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLElBQUMsQ0FBQSxLQUFLLENBQUMsQ0FBbEIsRUFBcUIsSUFBQyxDQUFBLEtBQUssQ0FBQyxDQUE1QixFQUErQixLQUEvQjtJQUFYLENBREw7R0FESjs7RUFJQSxJQUFDLENBQUEsTUFBRCxDQUFRLEdBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLFFBQVEsQ0FBQztJQUFiLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxDQUFEO2FBQU8sSUFBQyxDQUFBLFFBQVEsQ0FBQyxDQUFWLEdBQWM7SUFBckIsQ0FETDtHQURKOztFQUlBLElBQUMsQ0FBQSxNQUFELENBQVEsR0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsUUFBUSxDQUFDO0lBQWIsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLENBQUQ7YUFBTyxJQUFDLENBQUEsUUFBUSxDQUFDLENBQVYsR0FBYztJQUFyQixDQURMO0dBREo7O0VBSUEsSUFBQyxDQUFBLE1BQUQsQ0FBUSxHQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxRQUFRLENBQUM7SUFBYixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsQ0FBRDthQUFPLElBQUMsQ0FBQSxRQUFRLENBQUMsQ0FBVixHQUFjO0lBQXJCLENBREw7R0FESjs7RUFJQSxJQUFDLENBQUEsTUFBRCxDQUFRLFdBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFYLENBQW9CLElBQUMsQ0FBQSxRQUFRLENBQUMsQ0FBOUI7SUFBSCxDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsQ0FBRDthQUFPLElBQUMsQ0FBQSxRQUFRLENBQUMsQ0FBVixHQUFjLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBWCxDQUFvQixDQUFwQjtJQUFyQixDQURMO0dBREo7O0VBSUEsSUFBQyxDQUFBLE1BQUQsQ0FBUSxXQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBWCxDQUFvQixJQUFDLENBQUEsUUFBUSxDQUFDLENBQTlCO0lBQUgsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLENBQUQ7YUFBTyxJQUFDLENBQUEsUUFBUSxDQUFDLENBQVYsR0FBYyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVgsQ0FBb0IsQ0FBcEI7SUFBckIsQ0FETDtHQURKOztFQUlBLElBQUMsQ0FBQSxNQUFELENBQVEsV0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVgsQ0FBb0IsSUFBQyxDQUFBLFFBQVEsQ0FBQyxDQUE5QjtJQUFILENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxDQUFEO2FBQU8sSUFBQyxDQUFBLFFBQVEsQ0FBQyxDQUFWLEdBQWMsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFYLENBQW9CLENBQXBCO0lBQXJCLENBREw7R0FESjs7OztHQXZGdUIsS0FBSyxDQUFDOzs7O0FERmpDLElBQUEsb0VBQUE7RUFBQTs7OztBQUFBLENBQUEsR0FBSSxNQUFNLENBQUM7O0FBSVYsWUFBYSxPQUFBLENBQVEscUJBQVI7O0FBQ2IsWUFBYSxPQUFBLENBQVEscUJBQVI7O0FBQ2IsU0FBVSxPQUFBLENBQVEsa0JBQVI7O0FBSVYsTUFBTyxPQUFBLENBQVEsc0JBQVI7O0FBQ1AsTUFBTyxPQUFBLENBQVEsc0JBQVI7O0FBQ1AsT0FBUSxPQUFBLENBQVEsdUJBQVI7O0FBQ1IsVUFBVyxPQUFBLENBQVEsMEJBQVI7O0FBQ1gsYUFBYyxPQUFBLENBQVEsNkJBQVI7O0FBRVQsT0FBTyxDQUFDOzs7RUFDRyxlQUFDLFVBQUQ7O01BQUMsYUFBVzs7O0lBQ3JCLHFDQUFBO0lBRUEsQ0FBQyxDQUFDLFFBQUYsQ0FBVyxVQUFYLEVBQ0k7TUFBQSxPQUFBLEVBQVMsSUFBVDtNQUNBLFVBQUEsRUFBWSxJQURaO01BRUEsYUFBQSxFQUFlLElBRmY7TUFHQSxVQUFBLEVBQVksSUFIWjtLQURKO0FBTUEsWUFBTyxJQUFDLENBQUEsWUFBRCxDQUFjLFVBQVUsQ0FBQyxJQUF6QixDQUFQO0FBQUEsV0FDUyxLQURUO1FBRVksSUFBQSxHQUFBLENBQUksVUFBSixFQUFnQixDQUFBLFNBQUEsS0FBQTtpQkFBQSxTQUFDLEtBQUQ7WUFDaEIsS0FBQyxDQUFBLElBQUQsR0FBUTttQkFDUixLQUFDLENBQUEsVUFBRCxDQUFZLFVBQVo7VUFGZ0I7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWhCO0FBREg7QUFEVCxXQUtTLEtBTFQ7UUFNWSxJQUFBLEdBQUEsQ0FBSSxVQUFKLEVBQWdCLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUMsS0FBRDtZQUNoQixLQUFDLENBQUEsSUFBRCxHQUFRO21CQUNSLEtBQUMsQ0FBQSxVQUFELENBQVksVUFBWjtVQUZnQjtRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBaEI7QUFESDtBQUxULFdBU1MsTUFBQSxJQUFVLEtBVG5CO1FBVVksSUFBQSxJQUFBLENBQUssVUFBTCxFQUFpQixDQUFBLFNBQUEsS0FBQTtpQkFBQSxTQUFDLEtBQUQ7WUFDakIsS0FBQyxDQUFBLElBQUQsR0FBUTttQkFDUixLQUFDLENBQUEsVUFBRCxDQUFZLFVBQVo7VUFGaUI7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWpCO0FBREg7QUFUVCxXQWFTLEtBYlQ7UUFjWSxJQUFBLE9BQUEsQ0FBUSxVQUFSLEVBQW9CLENBQUEsU0FBQSxLQUFBO2lCQUFBLFNBQUMsS0FBRDtZQUNwQixLQUFDLENBQUEsSUFBRCxHQUFRO21CQUNSLEtBQUMsQ0FBQSxVQUFELENBQVksVUFBWjtVQUZvQjtRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBcEI7QUFESDtBQWJULFdBaUJTLE1BakJUO1FBa0JZLElBQUEsVUFBQSxDQUFXLFVBQVgsRUFBdUIsQ0FBQSxTQUFBLEtBQUE7aUJBQUEsU0FBQyxLQUFEO1lBQ3ZCLEtBQUMsQ0FBQSxJQUFELEdBQVE7bUJBQ1IsS0FBQyxDQUFBLFVBQUQsQ0FBWSxVQUFaO1VBRnVCO1FBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF2QjtBQWxCWjtFQVRTOztrQkFnQ2IsWUFBQSxHQUFjLFNBQUMsSUFBRDtXQUNWLElBQUksQ0FBQyxLQUFMLENBQVcsR0FBWCxDQUFlLENBQUMsR0FBaEIsQ0FBQTtFQURVOztrQkFHZCxVQUFBLEdBQVksU0FBQyxVQUFEO0lBQ1IsSUFBRyxVQUFVLENBQUMsVUFBZDtNQUNJLElBQUMsQ0FBQSxjQUFELENBQUEsRUFESjs7SUFHQSxJQUFDLENBQUEsS0FBRCxHQUFTLElBQUksS0FBSyxDQUFDO0lBQ25CLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLElBQUMsQ0FBQSxJQUFaO0lBRUEsSUFBQyxDQUFBLHFCQUFELENBQUE7SUFFQSxJQUFHLFVBQVUsQ0FBQyxRQUFkO01BQ0ksSUFBQyxDQUFBLGFBQUQsQ0FBZSxVQUFVLENBQUMsUUFBMUIsRUFESjs7SUFHQSxJQUFDLENBQUEsbUJBQUQsQ0FBcUIsVUFBckI7SUFFQSxJQUFHLFVBQVUsQ0FBQyxhQUFkO01BQ0ksSUFBQyxDQUFBLElBQUksQ0FBQyxRQUFOLENBQWUsU0FBQyxDQUFEO1FBQ1gsSUFBRyxDQUFBLFlBQWEsS0FBSyxDQUFDLElBQXRCO2lCQUNJLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBWCxHQUFxQixLQUFLLENBQUMsY0FEL0I7O01BRFcsQ0FBZixFQURKOztJQUtBLElBQUcsVUFBVSxDQUFDLE9BQVgsSUFBc0IsSUFBQyxDQUFBLElBQUksQ0FBQyxVQUE1QixJQUEwQyxJQUFDLENBQUEsSUFBSSxDQUFDLFVBQVcsQ0FBQSxDQUFBLENBQTlEO01BQ0ksSUFBQyxDQUFBLGdCQUFELENBQWtCLFVBQWxCLEVBREo7O0lBR0EsSUFBRyxVQUFVLENBQUMsTUFBZDtNQUNJLElBQUMsQ0FBQSxzQkFBRCxDQUF3QixVQUFVLENBQUMsTUFBbkMsRUFESjs7SUFHQSxJQUFDLENBQUEsUUFBRCxDQUFVLFVBQVUsQ0FBQyxLQUFyQixFQUE0QixVQUFVLENBQUMsTUFBdkMsRUFBK0MsVUFBVSxDQUFDLE1BQTFELEVBQWtFLFVBQVUsQ0FBQyxNQUE3RTtJQUNBLElBQUMsQ0FBQSxXQUFELENBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBWixFQUFlLFVBQVUsQ0FBQyxDQUExQixFQUE2QixVQUFVLENBQUMsQ0FBeEMsQ0FBYjtJQUNBLElBQUMsQ0FBQSxXQUFELENBQWEsQ0FBQyxVQUFVLENBQUMsU0FBWixFQUF1QixVQUFVLENBQUMsU0FBbEMsRUFBNkMsVUFBVSxDQUFDLFNBQXhELENBQWI7SUFDQSxJQUFDLENBQUEsTUFBRCxDQUNJO01BQUEsSUFBQSxFQUFNLFVBQVUsQ0FBQyxJQUFqQjtNQUNBLElBQUEsRUFBTSxVQUFVLENBQUMsSUFEakI7TUFFQSxJQUFBLEVBQU0sVUFBVSxDQUFDLElBRmpCO0tBREo7SUFNQSxJQUFHLFVBQVUsQ0FBQyxPQUFkO01BQ0ksSUFBQyxDQUFBLE9BQUQsR0FBVyxVQUFVLENBQUMsUUFEMUI7O0lBR0EsSUFBQyxDQUFBLE9BQUQsR0FBZSxJQUFBLE1BQUEsQ0FBTyxJQUFQO0lBRWYsSUFBRyxVQUFVLENBQUMsTUFBZDthQUNJLFVBQVUsQ0FBQyxNQUFYLENBQWtCLElBQWxCLEVBREo7O0VBdkNROztrQkEwQ1osY0FBQSxHQUFnQixTQUFBO0lBQ1osSUFBQyxDQUFBLFdBQUQsR0FBbUIsSUFBQSxLQUFLLENBQUMsSUFBTixDQUFBLENBQVksQ0FBQyxhQUFiLENBQTJCLElBQUMsQ0FBQSxJQUE1QjtJQUNuQixJQUFDLENBQUEsTUFBRCxHQUFVLElBQUMsQ0FBQSxXQUFXLENBQUMsU0FBYixDQUF1QixJQUFDLENBQUEsSUFBSSxDQUFDLFFBQTdCO1dBQ1YsSUFBQyxDQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBZixDQUE4QixDQUFDLENBQS9CO0VBSFk7O2tCQUtoQixxQkFBQSxHQUF1QixTQUFBO1dBQ25CLElBQUMsQ0FBQSxpQkFBRCxHQUFxQjtFQURGOztrQkFHdkIsYUFBQSxHQUFlLFNBQUMsUUFBRDtXQUNYLElBQUMsQ0FBQSxJQUFJLENBQUMsUUFBTixDQUFlLFNBQUMsQ0FBRDtNQUNYLElBQUcsQ0FBQSxZQUFhLEtBQUssQ0FBQyxJQUF0QjtlQUNJLENBQUMsQ0FBQyxRQUFGLEdBQWEsU0FEakI7O0lBRFcsQ0FBZjtFQURXOztrQkFLZixtQkFBQSxHQUFxQixTQUFDLFVBQUQ7V0FDakIsSUFBQyxDQUFBLElBQUksQ0FBQyxRQUFOLENBQWUsU0FBQyxDQUFEO01BQ1gsSUFBRyxDQUFBLFlBQWEsS0FBSyxDQUFDLElBQXRCO1FBQ0ksQ0FBQyxDQUFDLFVBQUYsR0FBZSxVQUFVLENBQUM7ZUFDMUIsQ0FBQyxDQUFDLGFBQUYsR0FBa0IsVUFBVSxDQUFDLGNBRmpDOztJQURXLENBQWY7RUFEaUI7O2tCQU1yQixzQkFBQSxHQUF3QixTQUFDLE1BQUQ7SUFDcEIsSUFBRyxNQUFNLENBQUMsS0FBVjthQUFxQixNQUFNLENBQUMsS0FBSyxDQUFDLEdBQWIsQ0FBaUIsSUFBQyxDQUFBLEtBQWxCLEVBQXJCO0tBQUEsTUFBQTthQUNLLE1BQU0sQ0FBQyxHQUFQLENBQVcsSUFBQyxDQUFBLEtBQVosRUFETDs7RUFEb0I7O2tCQUl4QixnQkFBQSxHQUFrQixTQUFDLFVBQUQ7SUFDZCxJQUFHLENBQUMsQ0FBQyxRQUFGLENBQVcsVUFBVSxDQUFDLGFBQXRCLENBQUg7TUFDSSxJQUFDLENBQUEsY0FBRCxHQUFrQixVQUFVLENBQUMsYUFBWCxHQUEyQixFQURqRDtLQUFBLE1BQUE7TUFHSSxJQUFDLENBQUEsY0FBRCxHQUFrQixFQUh0Qjs7SUFLQSxJQUFDLENBQUEsS0FBRCxHQUFTLElBQUksS0FBSyxDQUFDO0lBQ25CLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBTixHQUFrQixJQUFBLEtBQUssQ0FBQyxjQUFOLENBQXFCLElBQUMsQ0FBQSxJQUF0QjtJQUVsQixJQUFDLENBQUEsTUFBRCxHQUFVLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVosQ0FBdUIsSUFBQyxDQUFBLElBQUksQ0FBQyxVQUFXLENBQUEsSUFBQyxDQUFBLGNBQUQsQ0FBeEM7SUFDVixJQUFDLENBQUEsTUFBTSxDQUFDLElBQVIsQ0FBQTtJQUVBLElBQUMsQ0FBQSxXQUFELENBQUE7V0FFQSxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQXRCLENBQXlCLE9BQXpCLEVBQWtDLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUM5QixvQkFBQSxDQUFxQixLQUFDLENBQUEsY0FBdEI7TUFEOEI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxDO0VBZGM7O2tCQWlCbEIsV0FBQSxHQUFhLFNBQUE7SUFDVCxJQUFDLENBQUEsY0FBRCxHQUFrQixxQkFBQSxDQUFzQixJQUFDLENBQUEsV0FBdkI7V0FDbEIsSUFBQyxDQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBWixDQUFtQixJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVAsQ0FBQSxDQUFuQjtFQUZTOztrQkFJYixFQUFBLEdBQUksU0FBQyxTQUFELEVBQVksRUFBWjtBQUVBLFFBQUE7SUFBQSxJQUFHLFNBQVMsQ0FBQyxRQUFWLENBQW1CLFFBQW5CLENBQUg7TUFFSSxRQUFBLEdBQVcsU0FBQyxDQUFEO2VBQU8sRUFBQSxDQUFHLENBQUMsQ0FBQyxLQUFMO01BQVA7TUFFWCxJQUFDLENBQUEsS0FBSyxDQUFDLGdCQUFQLENBQXdCLFNBQXhCLEVBQW1DLFFBQW5DO2FBRUEsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUF0QixDQUF5QixPQUF6QixFQUFrQyxDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUE7aUJBQzlCLEtBQUMsQ0FBQSxLQUFLLENBQUMsbUJBQVAsQ0FBMkIsU0FBM0IsRUFBc0MsUUFBdEM7UUFEOEI7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxDLEVBTko7S0FBQSxNQUFBO2FBVUksSUFBQyxDQUFBLElBQUksQ0FBQyxRQUFOLENBQWUsU0FBQyxDQUFEO1FBQ1gsSUFBRyxDQUFBLFlBQWEsS0FBSyxDQUFDLElBQXRCO1VBRUksUUFBQSxHQUFXLFNBQUE7bUJBQU0sRUFBQSxDQUFBO1VBQU47VUFFWCxDQUFDLENBQUMsZ0JBQUYsQ0FBbUIsU0FBbkIsRUFBOEIsUUFBOUI7aUJBRUEsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUF0QixDQUF5QixPQUF6QixFQUFrQyxDQUFBLFNBQUEsS0FBQTttQkFBQSxTQUFBO3FCQUM5QixDQUFDLENBQUMsbUJBQUYsQ0FBc0IsU0FBdEIsRUFBaUMsUUFBakM7WUFEOEI7VUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxDLEVBTko7O01BRFcsQ0FBZixFQVZKOztFQUZBOztrQkF1QkosUUFBQSxHQUFVLFNBQUMsWUFBRCxFQUFlLE1BQWYsRUFBdUIsTUFBdkIsRUFBK0IsTUFBL0I7SUFDTixJQUFHLFlBQUg7YUFDSSxJQUFDLENBQUEsS0FBRCxHQUFTLFlBQUEsSUFBZ0IsRUFEN0I7S0FBQSxNQUFBO01BR0ksSUFBQyxDQUFBLE1BQUQsR0FBVSxNQUFBLElBQVU7TUFDcEIsSUFBQyxDQUFBLE1BQUQsR0FBVSxNQUFBLElBQVU7YUFDcEIsSUFBQyxDQUFBLE1BQUQsR0FBVSxNQUFBLElBQVUsRUFMeEI7O0VBRE07O2tCQVFWLFdBQUEsR0FBYSxTQUFDLFFBQUQ7SUFDVCxJQUFDLENBQUEsQ0FBRCxHQUFLLFFBQVMsQ0FBQSxDQUFBLENBQVQsSUFBZTtJQUNwQixJQUFDLENBQUEsQ0FBRCxHQUFLLFFBQVMsQ0FBQSxDQUFBLENBQVQsSUFBZTtXQUNwQixJQUFDLENBQUEsQ0FBRCxHQUFLLFFBQVMsQ0FBQSxDQUFBLENBQVQsSUFBZTtFQUhYOztrQkFLYixXQUFBLEdBQWEsU0FBQyxRQUFEO0lBQ1QsSUFBQyxDQUFBLFNBQUQsR0FBYSxRQUFTLENBQUEsQ0FBQSxDQUFULElBQWU7SUFDNUIsSUFBQyxDQUFBLFNBQUQsR0FBYSxRQUFTLENBQUEsQ0FBQSxDQUFULElBQWU7V0FDNUIsSUFBQyxDQUFBLFNBQUQsR0FBYSxRQUFTLENBQUEsQ0FBQSxDQUFULElBQWU7RUFIbkI7O2tCQUtiLE1BQUEsR0FBUSxTQUFDLEdBQUQ7V0FDSixNQUFNLENBQUMsSUFBUCxDQUFZLEdBQVosQ0FBZ0IsQ0FBQyxHQUFqQixDQUFxQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsQ0FBRDtRQUNqQixJQUFHLEdBQUksQ0FBQSxDQUFBLENBQVA7aUJBQ0ksS0FBRSxDQUFBLENBQUEsQ0FBRixHQUFPLEdBQUksQ0FBQSxDQUFBLEVBRGY7O01BRGlCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFyQjtFQURJOztrQkFLUixPQUFBLEdBQVMsU0FBQyxVQUFEO1dBQ0QsSUFBQSxTQUFBLENBQVUsSUFBVixFQUFhLFVBQWI7RUFEQzs7a0JBR1QsTUFBQSxHQUFRLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQO0lBQ0osSUFBRyxTQUFTLENBQUMsTUFBVixLQUFvQixDQUF2QjthQUNJLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBUCxDQUFjLENBQWQsRUFESjtLQUFBLE1BRUssSUFBRyxTQUFTLENBQUMsTUFBVixLQUFvQixDQUF2QjthQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBUCxDQUFjLENBQWQsRUFBaUIsQ0FBakIsRUFBb0IsQ0FBcEIsRUFEQzs7RUFIRDs7a0JBTVIsV0FBQSxHQUFhLFNBQUMsS0FBRDtXQUVULE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBQyxDQUFBLE1BQWIsQ0FBb0IsQ0FBQyxHQUFyQixDQUF5QixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsQ0FBRDtRQUNyQixJQUFHLENBQUEsS0FBSyxLQUFSO1VBQ0ksS0FBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLEdBQWtCLEtBQUMsQ0FBQSxNQUFPLENBQUEsQ0FBQTtpQkFHMUIsTUFBTSxDQUFDLElBQVAsQ0FBWSxLQUFDLENBQUEsTUFBTSxDQUFDLE9BQXBCLENBQTRCLENBQUMsR0FBN0IsQ0FBaUMsU0FBQyxFQUFEO21CQUM3QixLQUFFLENBQUEsRUFBQSxDQUFGLEdBQVEsS0FBQyxDQUFBLE1BQU0sQ0FBQyxPQUFRLENBQUEsRUFBQTtVQURLLENBQWpDLEVBSko7O01BRHFCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUF6QjtFQUZTOztrQkFVYixVQUFBLEdBQVksU0FBQyxNQUFELEVBQVMsTUFBVDtJQUVSLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLEtBQW1CLElBQUMsQ0FBQSxNQUFPLENBQUEsTUFBQSxDQUEzQixJQUFzQyxJQUFDLENBQUEsTUFBTSxDQUFDLE9BQVIsS0FBbUIsSUFBQyxDQUFBLE1BQU8sQ0FBQSxNQUFBLENBQXBFO01BQ0ksSUFBRyxJQUFDLENBQUEsTUFBTSxDQUFDLE9BQVIsS0FBbUIsSUFBQyxDQUFBLE1BQU8sQ0FBQSxNQUFBLENBQTlCO2VBQTJDLElBQUMsQ0FBQSxPQUFELENBQVMsTUFBVCxFQUEzQztPQUFBLE1BQ0ssSUFBRyxJQUFDLENBQUEsTUFBTSxDQUFDLE9BQVIsS0FBbUIsSUFBQyxDQUFBLE1BQU8sQ0FBQSxNQUFBLENBQTlCO2VBQTJDLElBQUMsQ0FBQSxPQUFELENBQVMsTUFBVCxFQUEzQztPQUZUO0tBQUEsTUFBQTthQUtJLElBQUMsQ0FBQSxPQUFELENBQVMsTUFBVCxFQUxKOztFQUZROztFQVlaLEtBQUMsQ0FBQSxNQUFELENBQVEsT0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUFoQixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsS0FBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQWIsQ0FBaUIsS0FBakIsRUFBd0IsS0FBeEIsRUFBK0IsS0FBL0I7YUFDQSxJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sY0FBUDtRQUF1QixLQUFBLEVBQU8sSUFBQyxDQUFBLEtBQS9CO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsUUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUFoQixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsS0FBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQWIsQ0FBaUIsS0FBakIsRUFBd0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBckMsRUFBd0MsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBckQ7YUFDQSxJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sZUFBUDtRQUF3QixLQUFBLEVBQU8sSUFBQyxDQUFBLE1BQWhDO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsUUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUFoQixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsS0FBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQWIsQ0FBaUIsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBOUIsRUFBaUMsS0FBakMsRUFBd0MsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBckQ7YUFDQSxJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sZUFBUDtRQUF3QixLQUFBLEVBQU8sSUFBQyxDQUFBLE1BQWhDO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsUUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUFoQixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsS0FBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQWIsQ0FBaUIsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBOUIsRUFBaUMsSUFBQyxDQUFBLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBOUMsRUFBaUQsS0FBakQ7YUFDQSxJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sZUFBUDtRQUF3QixLQUFBLEVBQU8sSUFBQyxDQUFBLE1BQWhDO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsVUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtHQURKOztFQUdBLEtBQUMsQ0FBQSxNQUFELENBQVEsR0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQztJQUFuQixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsQ0FBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQWhCLEdBQW9CO2FBQ3BCLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQjtRQUFDLElBQUEsRUFBTSxVQUFQO1FBQW1CLEtBQUEsRUFBTyxJQUFDLENBQUEsQ0FBM0I7T0FBckI7SUFGQyxDQURMO0dBREo7O0VBTUEsS0FBQyxDQUFBLE1BQUQsQ0FBUSxHQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDO0lBQW5CLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxDQUFEO01BQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBaEIsR0FBb0I7YUFDcEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLENBQXFCO1FBQUMsSUFBQSxFQUFNLFVBQVA7UUFBbUIsS0FBQSxFQUFPLElBQUMsQ0FBQSxDQUEzQjtPQUFyQjtJQUZDLENBREw7R0FESjs7RUFNQSxLQUFDLENBQUEsTUFBRCxDQUFRLEdBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUM7SUFBbkIsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLENBQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFoQixHQUFvQjthQUNwQixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sVUFBUDtRQUFtQixLQUFBLEVBQU8sSUFBQyxDQUFBLENBQTNCO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsVUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtHQURKOztFQUdBLEtBQUMsQ0FBQSxNQUFELENBQVEsV0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVgsQ0FBb0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBcEM7SUFBSCxDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsQ0FBRDtNQUNELElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQWhCLEdBQW9CLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBWCxDQUFvQixDQUFwQjthQUNwQixJQUFDLENBQUEsS0FBSyxDQUFDLGFBQVAsQ0FBcUI7UUFBQyxJQUFBLEVBQU0sa0JBQVA7UUFBMkIsS0FBQSxFQUFPLElBQUMsQ0FBQSxTQUFuQztPQUFyQjtJQUZDLENBREw7R0FESjs7RUFNQSxLQUFDLENBQUEsTUFBRCxDQUFRLFdBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFYLENBQW9CLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQXBDO0lBQUgsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLENBQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFoQixHQUFvQixLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVgsQ0FBb0IsQ0FBcEI7YUFDcEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLENBQXFCO1FBQUMsSUFBQSxFQUFNLGtCQUFQO1FBQTJCLEtBQUEsRUFBTyxJQUFDLENBQUEsU0FBbkM7T0FBckI7SUFGQyxDQURMO0dBREo7O0VBTUEsS0FBQyxDQUFBLE1BQUQsQ0FBUSxXQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBWCxDQUFvQixJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFwQztJQUFILENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxDQUFEO01BQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBaEIsR0FBb0IsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFYLENBQW9CLENBQXBCO2FBQ3BCLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQjtRQUFDLElBQUEsRUFBTSxrQkFBUDtRQUEyQixLQUFBLEVBQU8sSUFBQyxDQUFBLFNBQW5DO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsTUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUMsSUFBRDthQUFVLElBQUMsQ0FBQSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQWYsR0FBbUIsQ0FBQztJQUE5QixDQUFMO0dBREo7O0VBR0EsS0FBQyxDQUFBLE1BQUQsQ0FBUSxNQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQyxJQUFEO2FBQVUsSUFBQyxDQUFBLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBZixHQUFtQixDQUFDO0lBQTlCLENBQUw7R0FESjs7RUFHQSxLQUFDLENBQUEsTUFBRCxDQUFRLE1BQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFDLElBQUQ7YUFBVSxJQUFDLENBQUEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFmLEdBQW1CLENBQUM7SUFBOUIsQ0FBTDtHQURKOztFQUdBLEtBQUMsQ0FBQSxNQUFELENBQVEsUUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLE1BQUQ7TUFDRCxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQVAsR0FBZ0I7YUFDaEIsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLENBQXFCO1FBQUMsSUFBQSxFQUFNLGVBQVA7UUFBd0IsS0FBQSxFQUFPLElBQUMsQ0FBQSxNQUFoQztPQUFyQjtJQUZDLENBREw7R0FESjs7RUFNQSxLQUFDLENBQUEsTUFBRCxDQUFRLFNBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLEtBQUssQ0FBQztJQUFWLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxJQUFEO01BQ0QsSUFBQyxDQUFBLEtBQUssQ0FBQyxPQUFQLEdBQWlCO2FBQ2pCLElBQUMsQ0FBQSxLQUFLLENBQUMsYUFBUCxDQUFxQjtRQUFDLElBQUEsRUFBTSxnQkFBUDtRQUF5QixLQUFBLEVBQU8sSUFBQyxDQUFBLE9BQWpDO09BQXJCO0lBRkMsQ0FETDtHQURKOztFQU1BLEtBQUMsQ0FBQSxNQUFELENBQVEsVUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsS0FBSyxDQUFDO0lBQVYsQ0FBTDtHQURKOztFQUdBLEtBQUMsQ0FBQSxNQUFELENBQVEsTUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRztRQUNKLE1BQUEsRUFBUSxJQUFDLENBQUEsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFqQixHQUFxQixJQUFDLENBQUEsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUQxQztRQUVKLEtBQUEsRUFBTyxJQUFDLENBQUEsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFqQixHQUFxQixJQUFDLENBQUEsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUZ6QztRQUdKLEtBQUEsRUFBTyxJQUFDLENBQUEsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFqQixHQUFxQixJQUFDLENBQUEsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUh6Qzs7SUFBSCxDQUFMO0dBREo7O0VBT0EsS0FBQyxDQUFBLE1BQUQsQ0FBUSxRQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUNELElBQUMsQ0FBQSxPQUFPLENBQUM7SUFEUixDQUFMO0lBRUEsR0FBQSxFQUFLLFNBQUMsTUFBRDthQUNELENBQUMsQ0FBQyxNQUFGLENBQVMsSUFBQyxDQUFBLE1BQVYsRUFBa0IsTUFBbEI7SUFEQyxDQUZMO0dBREo7O0VBTUEsS0FBQyxDQUFBLE1BQUQsQ0FBUSxlQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxjQUFELEdBQWtCO0lBQXJCLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxTQUFEO01BQ0QsSUFBRyxJQUFDLENBQUEsSUFBSSxDQUFDLFVBQVcsQ0FBQSxTQUFBLEdBQVksQ0FBWixDQUFwQjtRQUNJLElBQUMsQ0FBQSxjQUFELEdBQWtCLFNBQUEsR0FBWTtRQUM5QixJQUFDLENBQUEsTUFBRCxHQUFVLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVosQ0FBdUIsSUFBQyxDQUFBLElBQUksQ0FBQyxVQUFXLENBQUEsSUFBQyxDQUFBLGNBQUQsQ0FBeEM7ZUFDVixJQUFDLENBQUEsTUFBTSxDQUFDLElBQVIsQ0FBQSxFQUhKOztJQURDLENBREw7R0FESjs7OztHQTlTd0I7Ozs7QURoQjVCLElBQUEsU0FBQTtFQUFBOzs7O0FBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQzs7QUFFVixTQUFVLE9BQUEsQ0FBUSxrQkFBUjs7QUFFTCxPQUFPLENBQUM7OztFQUNHLGVBQUMsVUFBRDtBQUNULFFBQUE7O01BRFUsYUFBVzs7Ozs7SUFDckIsdUNBQU0sQ0FBQyxDQUFDLFFBQUYsQ0FBVyxVQUFYLEVBQ0Y7TUFBQSxlQUFBLEVBQWlCLE1BQWpCO0tBREUsQ0FBTjtJQUtBLElBQUMsQ0FBQSxRQUFELEdBQWdCLElBQUEsS0FBSyxDQUFDLGFBQU4sQ0FDWjtNQUFBLFNBQUEsRUFBVyxJQUFYO01BQ0EsS0FBQSxFQUFPLElBRFA7S0FEWTtJQUloQixJQUFDLENBQUEsUUFBUSxDQUFDLFdBQVYsQ0FBc0IsSUFBQyxDQUFBLFFBQVEsQ0FBQyxVQUFoQztJQUNBLElBQUMsQ0FBQSxRQUFRLENBQUMsT0FBVixDQUFrQixJQUFDLENBQUEsS0FBbkIsRUFBMEIsSUFBQyxDQUFBLE1BQTNCO0lBQ0EsSUFBQyxDQUFBLFFBQVEsQ0FBQyxhQUFWLENBQXdCLE1BQU0sQ0FBQyxnQkFBL0I7SUFDQSxJQUFDLENBQUEsUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBM0IsR0FBbUM7SUFDbkMsSUFBQyxDQUFBLFFBQVEsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQTNCLEdBQW9DO0lBQ3BDLElBQUMsQ0FBQSxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQXBCLEdBQThCO0lBQzlCLElBQUMsQ0FBQSxRQUFRLENBQUMsU0FBUyxDQUFDLElBQXBCLEdBQTJCLEtBQUssQ0FBQztJQUtqQyxJQUFDLENBQUEsS0FBRCxHQUFTLElBQUksS0FBSyxDQUFDO0lBS25CLFdBQUEsR0FBYyxDQUFDLENBQUMsUUFBRixDQUFXLFVBQVUsQ0FBQyxNQUF0QixFQUNWO01BQUEsTUFBQSxFQUFRLElBQUMsQ0FBQSxLQUFELEdBQVMsSUFBQyxDQUFBLE1BQWxCO0tBRFU7SUFHZCxJQUFDLENBQUEsTUFBRCxHQUFjLElBQUEsTUFBQSxDQUFPLFdBQVAsRUFBb0IsSUFBQyxDQUFDLFFBQXRCO0lBS2QsTUFBTSxDQUFDLFFBQVAsQ0FBZ0IsSUFBQyxDQUFBLGNBQWpCO0lBS0EsSUFBQyxDQUFBLFNBQUQsR0FBYSxJQUFJLEtBQUssQ0FBQztJQUN2QixJQUFDLENBQUEsS0FBRCxHQUFTLElBQUksS0FBSyxDQUFDO0lBQ25CLElBQUMsQ0FBQSxXQUFELEdBQWU7SUFDZixJQUFDLENBQUEsdUJBQUQsR0FBMkI7SUFDM0IsSUFBQyxDQUFBLFNBQUQsR0FBYTtJQUViLElBQUMsQ0FBQSxFQUFELENBQUksV0FBSixFQUFpQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsQ0FBRDtRQUNiLEtBQUMsQ0FBQSxLQUFLLENBQUMsQ0FBUCxHQUFXLENBQUMsQ0FBQyxDQUFDLE9BQUYsR0FBWSxLQUFDLENBQUEsS0FBZCxDQUFBLEdBQXVCLENBQXZCLEdBQTJCO2VBQ3RDLEtBQUMsQ0FBQSxLQUFLLENBQUMsQ0FBUCxHQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBRixHQUFZLEtBQUMsQ0FBQSxNQUFkLENBQUQsR0FBeUIsQ0FBekIsR0FBNkI7TUFGM0I7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWpCO0lBSUEsSUFBQyxDQUFBLEVBQUQsQ0FBSSxXQUFKLEVBQWlCLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxDQUFEO1FBQ2IsS0FBQyxDQUFBLFNBQUQsR0FBYTtRQUNiLElBQUcsS0FBQyxDQUFBLFdBQUo7VUFDSSxLQUFDLENBQUEsV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFwQixDQUFrQztZQUFDLElBQUEsRUFBTSxXQUFQO1dBQWxDO1VBQ0EsS0FBQyxDQUFBLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBcEIsQ0FBa0M7WUFBQyxJQUFBLEVBQU0sYUFBUDtXQUFsQztVQUNBLEtBQUMsQ0FBQSxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQXBCLENBQWtDO1lBQUMsSUFBQSxFQUFNLE9BQVA7V0FBbEM7aUJBQ0EsS0FBQyxDQUFBLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBcEIsQ0FBa0M7WUFBQyxJQUFBLEVBQU0sU0FBUDtXQUFsQyxFQUpKOztNQUZhO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFqQjtJQVFBLElBQUMsQ0FBQSxFQUFELENBQUksU0FBSixFQUFlLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxDQUFEO1FBQ1gsS0FBQyxDQUFBLFNBQUQsR0FBYTtRQUNiLElBQUcsS0FBQyxDQUFBLFdBQUo7VUFDSSxLQUFDLENBQUEsV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFwQixDQUFrQztZQUFDLElBQUEsRUFBTSxTQUFQO1dBQWxDO2lCQUNBLEtBQUMsQ0FBQSxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQXBCLENBQWtDO1lBQUMsSUFBQSxFQUFNLFdBQVA7V0FBbEMsRUFGSjs7TUFGVztJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBZjtJQVNBLElBQUMsQ0FBQSxJQUFELENBQUE7SUFFQSxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQXRCLENBQXlCLE9BQXpCLEVBQWtDLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQTtlQUM5QixvQkFBQSxDQUFxQixLQUFDLENBQUEsc0JBQXRCO01BRDhCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFsQztFQXBFUzs7a0JBeUViLElBQUEsR0FBTSxTQUFBO0lBQ0YsSUFBQyxDQUFBLHNCQUFELEdBQTBCLHFCQUFBLENBQXNCLElBQUMsQ0FBQSxJQUF2QjtJQUUxQixJQUFHLElBQUMsQ0FBQSxhQUFKO01BQ0ksSUFBQyxDQUFBLGFBQUQsQ0FBQSxFQURKOztJQUdBLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFYO01BQ0ksSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBakIsQ0FBQSxFQURKOztJQUdBLElBQUMsQ0FBQSxlQUFELENBQUE7V0FFQSxJQUFDLENBQUEsUUFBUSxDQUFDLE1BQVYsQ0FBaUIsSUFBQyxDQUFBLEtBQWxCLEVBQXlCLElBQUMsQ0FBQSxNQUFNLENBQUMsWUFBakM7RUFYRTs7a0JBZU4sZUFBQSxHQUFpQixTQUFBO0FBQ2IsUUFBQTtJQUFBLElBQUMsQ0FBQSxTQUFTLENBQUMsYUFBWCxDQUF5QixJQUFDLENBQUEsS0FBMUIsRUFBaUMsSUFBQyxDQUFBLE1BQU0sQ0FBQyxZQUF6QztJQUNBLFVBQUEsR0FBYSxJQUFDLENBQUEsU0FBUyxDQUFDLGdCQUFYLENBQTRCLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBbkMsRUFBNkMsSUFBN0M7SUFFYixJQUFHLFVBQVUsQ0FBQyxNQUFYLElBQXFCLElBQUMsQ0FBQSxXQUFELEtBQWdCLFVBQVcsQ0FBQSxDQUFBLENBQW5EO01BQ0ksSUFBQyxDQUFBLFdBQUQsR0FBZSxVQUFXLENBQUEsQ0FBQSxFQUQ5Qjs7SUFHQSxJQUFHLElBQUMsQ0FBQSxXQUFELElBQWdCLENBQUMsVUFBVSxDQUFDLE1BQS9CO01BQ0ksSUFBQyxDQUFBLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBcEIsQ0FBa0M7UUFBQyxJQUFBLEVBQU0sVUFBUDtPQUFsQztNQUNBLElBQUMsQ0FBQSxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQXBCLENBQWtDO1FBQUMsSUFBQSxFQUFNLFlBQVA7T0FBbEMsRUFGSjs7SUFJQSxJQUFHLENBQUMsVUFBVSxDQUFDLE1BQWY7TUFDSSxJQUFDLENBQUEsV0FBRCxHQUFlO01BQ2YsSUFBQyxDQUFBLHVCQUFELEdBQTJCLE1BRi9COztJQUlBLElBQUcsQ0FBQyxJQUFDLENBQUEsdUJBQUYsSUFBNkIsSUFBQyxDQUFBLFdBQWpDO01BQ0ksSUFBQyxDQUFBLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBcEIsQ0FBa0M7UUFBQyxJQUFBLEVBQU0sV0FBUDtPQUFsQztNQUNBLElBQUMsQ0FBQSxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQXBCLENBQWtDO1FBQUMsSUFBQSxFQUFNLGFBQVA7T0FBbEM7YUFDQSxJQUFDLENBQUEsdUJBQUQsR0FBMkIsS0FIL0I7O0VBZmE7O2tCQW9CakIsY0FBQSxHQUFnQixTQUFDLENBQUQ7SUFDWixJQUFDLENBQUEsTUFBTSxDQUFDLE1BQVIsR0FBaUIsSUFBQyxDQUFBLEtBQUQsR0FBUyxJQUFDLENBQUE7SUFDM0IsSUFBQyxDQUFBLE1BQU0sQ0FBQyxZQUFZLENBQUMsc0JBQXJCLENBQUE7V0FDQSxJQUFDLENBQUEsUUFBUSxDQUFDLE9BQVYsQ0FBa0IsSUFBQyxDQUFBLEtBQW5CLEVBQTBCLElBQUMsQ0FBQSxNQUEzQjtFQUhZOzs7O0dBN0dROzs7O0FESjVCLElBQUEsUUFBQTtFQUFBOzs7QUFBQSxDQUFBLEdBQUksTUFBTSxDQUFDOztBQUVWLFFBQVMsT0FBQSxDQUFRLGdCQUFSOztBQUVKLE9BQU8sQ0FBQzs7O0VBQ0csZ0JBQUMsVUFBRDs7TUFBQyxhQUFXOztJQUVyQixDQUFDLENBQUMsUUFBRixDQUFXLFVBQVgsRUFDSTtNQUFBLE1BQUEsRUFDSTtRQUFBLENBQUEsRUFBRyxHQUFIO1FBQ0EsU0FBQSxFQUFXLENBQUMsRUFEWjtPQURKO0tBREo7SUFLQSx3Q0FBTSxVQUFOO0lBRUEsSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUFQLEdBQXdCLElBQUEsS0FBSyxDQUFDLEtBQU4sQ0FBWSxRQUFaO0lBQ3hCLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxHQUFpQixJQUFBLEtBQUssQ0FBQyxHQUFOLENBQVUsUUFBVixFQUFvQixHQUFwQixFQUF5QixJQUF6QjtJQUVqQixJQUFDLENBQUEsTUFBRCxHQUFjLElBQUEsS0FBSyxDQUFDLGVBQU4sQ0FBc0IsUUFBdEIsRUFBZ0MsUUFBaEM7SUFDZCxJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFqQixHQUFxQjtJQUNyQixJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxJQUFDLENBQUEsTUFBWjtJQUVBLElBQUMsQ0FBQSxLQUFELEdBQWEsSUFBQSxLQUFLLENBQUMsVUFBTixDQUFpQixRQUFqQixFQUEyQixFQUEzQjtJQUNiLElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQWhCLENBQW9CLENBQXBCLEVBQXVCLEdBQXZCLEVBQTRCLENBQTVCO0lBQ0EsSUFBQyxDQUFBLEtBQUssQ0FBQyxVQUFQLEdBQW9CO0lBQ3BCLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFyQixHQUE0QjtJQUM1QixJQUFDLENBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBckIsR0FBMkI7SUFDM0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBZCxHQUFxQjtJQUNyQixJQUFDLENBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFkLEdBQXVCO0lBQ3ZCLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUF0QixHQUE4QjtJQUM5QixJQUFDLENBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBdEIsR0FBK0I7SUFDL0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsSUFBQyxDQUFBLEtBQVo7SUFFQSxJQUFDLENBQUEsTUFBRCxHQUFjLElBQUEsS0FBSyxDQUFDLGdCQUFOLENBQXVCLFFBQXZCLEVBQWlDLEVBQWpDO0lBQ2QsSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBakIsQ0FBcUIsQ0FBQyxHQUF0QixFQUEyQixHQUEzQixFQUFnQyxDQUFDLEdBQWpDO0lBQ0EsSUFBQyxDQUFBLEtBQUssQ0FBQyxHQUFQLENBQVcsSUFBQyxDQUFBLE1BQVo7SUFFQSxJQUFDLENBQUEsTUFBRCxHQUFjLElBQUEsS0FBSyxDQUFDLGdCQUFOLENBQXVCLFFBQXZCLEVBQWlDLEVBQWpDO0lBQ2QsSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBakIsQ0FBcUIsR0FBckIsRUFBMEIsR0FBMUIsRUFBK0IsQ0FBQyxHQUFoQztJQUNBLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLElBQUMsQ0FBQSxNQUFaO0lBRUEsSUFBQyxDQUFBLE1BQUQsR0FBYyxJQUFBLEtBQUssQ0FBQyxnQkFBTixDQUF1QixRQUF2QixFQUFpQyxFQUFqQztJQUNkLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWpCLENBQXFCLENBQUMsR0FBdEIsRUFBMkIsR0FBM0IsRUFBZ0MsR0FBaEM7SUFDQSxJQUFDLENBQUEsS0FBSyxDQUFDLEdBQVAsQ0FBVyxJQUFDLENBQUEsTUFBWjtJQUVBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxLQUFLLENBQUMsZ0JBQU4sQ0FBdUIsUUFBdkIsRUFBaUMsRUFBakM7SUFDZCxJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFqQixDQUFxQixHQUFyQixFQUEwQixHQUExQixFQUErQixHQUEvQjtJQUNBLElBQUMsQ0FBQSxLQUFLLENBQUMsR0FBUCxDQUFXLElBQUMsQ0FBQSxNQUFaO0lBRUEsSUFBQyxDQUFBLFFBQUQsR0FBZ0IsSUFBQSxLQUFLLENBQUMsY0FBTixDQUFxQixHQUFyQixFQUEwQixHQUExQjtJQUNoQixJQUFDLENBQUEsUUFBRCxHQUFnQixJQUFBLEtBQUssQ0FBQyxvQkFBTixDQUNaO01BQUEsU0FBQSxFQUFXLEVBQVg7TUFDQSxLQUFBLEVBQU8sUUFEUDtNQUVBLFNBQUEsRUFBVyxHQUZYO01BR0EsU0FBQSxFQUFXLE1BSFg7S0FEWTtJQUtoQixJQUFDLENBQUEsS0FBRCxHQUFhLElBQUEsS0FBSyxDQUFDLElBQU4sQ0FBVyxJQUFDLENBQUEsUUFBWixFQUFzQixJQUFDLENBQUEsUUFBdkI7SUFDYixJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFoQixHQUFvQixDQUFDLElBQUksQ0FBQyxFQUFOLEdBQVc7SUFDL0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLEdBQXVCOztBQUd2Qjs7Ozs7O0VBdERTOzs7O0dBRFk7Ozs7QURKN0IsSUFBQSxRQUFBO0VBQUE7Ozs7QUFBQSxDQUFBLEdBQUksTUFBTSxDQUFDOztBQUVWLFFBQVMsT0FBQSxDQUFRLGdCQUFSOztBQUVKLE9BQU8sQ0FBQzs7O0VBQ0csbUJBQUMsS0FBRCxFQUFRLFVBQVI7QUFDVCxRQUFBOztNQURpQixhQUFXOzs7SUFDNUIseUNBQUE7SUFFQSxJQUFHLENBQUMsVUFBSjtBQUNRLFlBQU0sS0FBQSxDQUFNLGtEQUFOLEVBRGQ7O0lBSUEsSUFBRyxDQUFDLENBQUMsUUFBRixDQUFXLFVBQVgsQ0FBSDtNQUNJLFNBQUEsR0FBWTtNQUdaLE1BQU0sQ0FBQyxJQUFQLENBQVksS0FBSyxDQUFDLE1BQWxCLENBQXlCLENBQUMsR0FBMUIsQ0FBOEIsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFDLENBQUQ7VUFDMUIsSUFBRyxDQUFBLEtBQUssU0FBUjtZQUVJLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBYixHQUF1QixLQUFLLENBQUMsTUFBTyxDQUFBLENBQUE7bUJBQ3BDLFVBQUEsR0FBYSxLQUFLLENBQUMsTUFBTyxDQUFBLFNBQUEsRUFIOUI7O1FBRDBCO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUE5QixFQUpKOztJQVVBLElBQUMsQ0FBQSxVQUFELEdBQWMsSUFBQyxDQUFBLGdCQUFELENBQWtCLFVBQWxCO0lBQ2QsSUFBQyxDQUFBLE9BQUQsR0FBVyxDQUFDLENBQUMsUUFBRixDQUFXLFVBQVUsQ0FBQyxPQUF0QixFQUNQO01BQUEsSUFBQSxFQUFNLENBQU47TUFDQSxLQUFBLEVBQU8sQ0FEUDtNQUVBLEtBQUEsRUFBTyxRQUZQO0tBRE87SUFNWCxLQUFLLENBQUMsS0FBTixDQUFZLElBQUMsQ0FBQSxPQUFPLENBQUMsS0FBckIsRUFBNEIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO1FBRXhCLEtBQUMsQ0FBQSxLQUFELEdBQVM7UUFDVCxLQUFDLENBQUEsSUFBRCxHQUFRLEtBQUssQ0FBQyxJQUFOLElBQWMsS0FBSyxDQUFDLEtBQXBCLElBQTZCLEtBQUssQ0FBQztRQUMzQyxLQUFDLENBQUEsR0FBRCxHQUFPO1FBQ1AsS0FBQyxDQUFBLElBQUQsR0FBUSxLQUFDLENBQUEsT0FBTyxDQUFDO1FBQ2pCLEtBQUMsQ0FBQSxjQUFELEdBQWtCO1FBQ2xCLEtBQUMsQ0FBQSxXQUFELEdBQWUsS0FBQyxDQUFBLElBQUQsR0FBUSxLQUFDLENBQUE7UUFDeEIsS0FBQyxDQUFBLDBCQUFELEdBQThCO1FBQzlCLEtBQUMsQ0FBQSxNQUFELEdBQVUsS0FBQyxDQUFBLGVBQUQsQ0FBQTtRQUlWLElBQUcsS0FBQyxDQUFBLE1BQU0sQ0FBQyxNQUFYO1VBRUksS0FBQyxDQUFBLGdCQUFELEdBQW9CLFdBQUEsQ0FBWSxTQUFBO1lBRTVCLElBQUcsS0FBQyxDQUFBLGNBQUQsSUFBbUIsS0FBQyxDQUFBLFdBQXZCO0FBRUkscUJBQU8sS0FBQyxDQUFBLGdCQUZaOztZQUtBLHFCQUFBLENBQXNCLEtBQUMsQ0FBQSxhQUF2QjttQkFDQSxLQUFDLENBQUEsY0FBRDtVQVI0QixDQUFaLEVBU2xCLElBQUEsR0FBTyxLQUFDLENBQUEsR0FUVSxFQUZ4Qjs7ZUFlQSxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQXRCLENBQXlCLE9BQXpCLEVBQWtDLFNBQUE7VUFDOUIsSUFBRyxLQUFDLENBQUEsZ0JBQUo7bUJBQ0ksYUFBQSxDQUFjLEtBQUMsQ0FBQSxnQkFBZixFQURKOztRQUQ4QixDQUFsQztNQTVCd0I7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTVCO0VBeEJTOztzQkF3RGIsZ0JBQUEsR0FBa0IsU0FBQyxVQUFEO0FBQ2QsUUFBQTtJQUFBLEtBQUEsR0FBUSxNQUFNLENBQUMsTUFBUCxDQUFjLEVBQWQsRUFBa0IsVUFBbEI7SUFDUixPQUFPLEtBQUssQ0FBQztXQUNiO0VBSGM7O3NCQUtsQixlQUFBLEdBQWlCLFNBQUE7QUFLYixRQUFBO0lBQUEsTUFBQSxHQUFTLE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBQyxDQUFBLFVBQWIsQ0FBd0IsQ0FBQyxHQUF6QixDQUE2QixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsQ0FBRDtBQUVsQyxZQUFBO1FBQUEsS0FBQyxDQUFBLDBCQUEyQixDQUFBLENBQUEsQ0FBNUIsR0FBaUMsS0FBQyxDQUFBLEtBQU0sQ0FBQSxDQUFBO1FBRXhDLE1BQUEsR0FBUztRQUNULElBQUcsS0FBQyxDQUFBLEtBQU0sQ0FBQSxDQUFBLENBQVAsR0FBWSxLQUFDLENBQUEsVUFBVyxDQUFBLENBQUEsQ0FBM0I7VUFDSSxNQUFPLENBQUEsQ0FBQSxDQUFQLEdBQVksQ0FBQyxJQUFJLENBQUMsR0FBTCxDQUFTLEtBQUMsQ0FBQSxLQUFNLENBQUEsQ0FBQSxDQUFQLEdBQVksS0FBQyxDQUFBLFVBQVcsQ0FBQSxDQUFBLENBQWpDLEVBRGpCO1NBQUEsTUFFSyxJQUFHLEtBQUMsQ0FBQSxLQUFNLENBQUEsQ0FBQSxDQUFQLEdBQVksS0FBQyxDQUFBLFVBQVcsQ0FBQSxDQUFBLENBQTNCO1VBQ0QsTUFBTyxDQUFBLENBQUEsQ0FBUCxHQUFZLElBQUksQ0FBQyxHQUFMLENBQVMsS0FBQyxDQUFBLEtBQU0sQ0FBQSxDQUFBLENBQVAsR0FBWSxLQUFDLENBQUEsVUFBVyxDQUFBLENBQUEsQ0FBakMsRUFEWDtTQUFBLE1BQUE7VUFHRCxLQUhDOztlQUlMO01BWGtDO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUE3QjtXQWFULE1BQU0sQ0FBQyxNQUFQLENBQWMsU0FBQyxDQUFEO2FBQ1Y7SUFEVSxDQUFkO0VBbEJhOztzQkFxQmpCLFdBQUEsR0FBYSxTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7SUFFVCxJQUFHLElBQUMsQ0FBQSxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQWYsQ0FBd0IsTUFBeEIsQ0FBSDthQUNJLElBQUUsQ0FBQSxJQUFDLENBQUEsT0FBTyxDQUFDLEtBQVQsQ0FBRixDQUFrQixDQUFsQixFQUFxQixDQUFyQixFQUF3QixDQUF4QixFQUEyQixDQUEzQixFQURKO0tBQUEsTUFBQTthQUdJLElBQUMsQ0FBQSxNQUFELENBQVEsQ0FBUixFQUFXLENBQVgsRUFBYyxDQUFkLEVBQWlCLENBQWpCLEVBSEo7O0VBRlM7O3NCQU9iLGFBQUEsR0FBZSxTQUFBO0FBRVgsUUFBQTtBQUFBO0FBQUE7U0FBQSw2Q0FBQTs7TUFFSSxJQUFBLEdBQU8sTUFBTSxDQUFDLElBQVAsQ0FBWSxLQUFaLENBQW1CLENBQUEsQ0FBQTtNQUMxQixVQUFBLEdBQWEsTUFBTSxDQUFDLE1BQVAsQ0FBYyxLQUFkLENBQXFCLENBQUEsQ0FBQTtNQUVsQyxVQUFBLEdBQWEsSUFBQyxDQUFBLFdBQUQsQ0FBYSxJQUFDLENBQUEsY0FBZCxFQUE4QixJQUFDLENBQUEsMEJBQTJCLENBQUEsSUFBQSxDQUExRCxFQUFpRSxVQUFqRSxFQUE2RSxJQUFDLENBQUEsV0FBOUU7bUJBRWIsSUFBQyxDQUFBLEtBQU0sQ0FBQSxJQUFBLENBQVAsR0FBZTtBQVBuQjs7RUFGVzs7c0JBV2YsZUFBQSxHQUFpQixTQUFBO1dBQ2IsYUFBQSxDQUFjLElBQUMsQ0FBQSxnQkFBZjtFQURhOztzQkFNakIsTUFBQSxHQUFRLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVjtXQUNKLENBQUEsR0FBSSxDQUFKLEdBQVEsQ0FBUixHQUFZO0VBRFI7O3NCQUdSLFVBQUEsR0FBWSxTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7V0FDUixDQUFBLEdBQUksQ0FBQyxDQUFBLElBQUssQ0FBTixDQUFKLEdBQWUsQ0FBZixHQUFtQjtFQURYOztzQkFHWixXQUFBLEdBQWEsU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWO1dBQ1QsQ0FBQyxDQUFELEdBQUssQ0FBQyxDQUFBLElBQUssQ0FBTixDQUFMLEdBQWdCLENBQUMsQ0FBQSxHQUFJLENBQUwsQ0FBaEIsR0FBMEI7RUFEakI7O3NCQUdiLGFBQUEsR0FBZSxTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7SUFDWCxJQUFHLENBQUMsQ0FBQSxJQUFLLENBQUEsR0FBSSxDQUFWLENBQUEsR0FBZSxDQUFsQjthQUNJLENBQUEsR0FBSSxDQUFKLEdBQVEsQ0FBUixHQUFZLENBQVosR0FBZ0IsRUFEcEI7S0FBQSxNQUFBO2FBR0ksQ0FBQyxDQUFELEdBQUssQ0FBTCxHQUFTLENBQUMsQ0FBQyxFQUFFLENBQUgsQ0FBQSxHQUFRLENBQUMsQ0FBQSxHQUFJLENBQUwsQ0FBUixHQUFrQixDQUFuQixDQUFULEdBQWlDLEVBSHJDOztFQURXOztzQkFNZixXQUFBLEdBQWEsU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWO1dBQ1QsQ0FBQSxHQUFJLENBQUMsQ0FBQSxJQUFLLENBQU4sQ0FBSixHQUFlLENBQWYsR0FBbUIsQ0FBbkIsR0FBdUI7RUFEZDs7c0JBR2IsWUFBQSxHQUFjLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVjtXQUNWLENBQUEsR0FBSSxDQUFDLENBQUMsQ0FBQSxHQUFJLENBQUEsR0FBSSxDQUFKLEdBQVEsQ0FBYixDQUFBLEdBQWtCLENBQWxCLEdBQXNCLENBQXRCLEdBQTBCLENBQTNCLENBQUosR0FBb0M7RUFEMUI7O3NCQUdkLGNBQUEsR0FBZ0IsU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWO0lBQ1osSUFBRyxDQUFDLENBQUEsSUFBSyxDQUFBLEdBQUksQ0FBVixDQUFBLEdBQWUsQ0FBbEI7YUFDSSxDQUFBLEdBQUksQ0FBSixHQUFRLENBQVIsR0FBWSxDQUFaLEdBQWdCLENBQWhCLEdBQW9CLEVBRHhCO0tBQUEsTUFBQTthQUdJLENBQUEsR0FBSSxDQUFKLEdBQVEsQ0FBQyxDQUFDLENBQUEsSUFBSyxDQUFOLENBQUEsR0FBVyxDQUFYLEdBQWUsQ0FBZixHQUFtQixDQUFwQixDQUFSLEdBQWlDLEVBSHJDOztFQURZOztzQkFNaEIsV0FBQSxHQUFhLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVjtXQUNULENBQUEsR0FBSSxDQUFDLENBQUEsSUFBSyxDQUFOLENBQUosR0FBZSxDQUFmLEdBQW1CLENBQW5CLEdBQXVCLENBQXZCLEdBQTJCO0VBRGxCOztzQkFHYixZQUFBLEdBQWMsU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWO1dBQ1YsQ0FBQyxDQUFELEdBQUssQ0FBQyxDQUFDLENBQUEsR0FBSSxDQUFBLEdBQUksQ0FBSixHQUFRLENBQWIsQ0FBQSxHQUFrQixDQUFsQixHQUFzQixDQUF0QixHQUEwQixDQUExQixHQUE4QixDQUEvQixDQUFMLEdBQXlDO0VBRC9COztzQkFHZCxjQUFBLEdBQWdCLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVjtJQUNaLElBQUcsQ0FBQyxDQUFBLElBQUssQ0FBQSxHQUFJLENBQVYsQ0FBQSxHQUFlLENBQWxCO2FBQ0ksQ0FBQSxHQUFJLENBQUosR0FBUSxDQUFSLEdBQVksQ0FBWixHQUFnQixDQUFoQixHQUFvQixDQUFwQixHQUF3QixFQUQ1QjtLQUFBLE1BQUE7YUFHSSxDQUFDLENBQUQsR0FBSyxDQUFMLEdBQVMsQ0FBQyxDQUFDLENBQUEsSUFBSyxDQUFOLENBQUEsR0FBVyxDQUFYLEdBQWUsQ0FBZixHQUFtQixDQUFuQixHQUF1QixDQUF4QixDQUFULEdBQXNDLEVBSDFDOztFQURZOztzQkFNaEIsV0FBQSxHQUFhLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVjtXQUNULENBQUEsR0FBSSxDQUFDLENBQUEsSUFBSyxDQUFOLENBQUosR0FBZSxDQUFmLEdBQW1CLENBQW5CLEdBQXVCLENBQXZCLEdBQTJCLENBQTNCLEdBQStCO0VBRHRCOztzQkFHYixZQUFBLEdBQWMsU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWO1dBQ1YsQ0FBQSxHQUFJLENBQUMsQ0FBQyxDQUFBLEdBQUksQ0FBQSxHQUFJLENBQUosR0FBUSxDQUFiLENBQUEsR0FBa0IsQ0FBbEIsR0FBc0IsQ0FBdEIsR0FBMEIsQ0FBMUIsR0FBOEIsQ0FBOUIsR0FBa0MsQ0FBbkMsQ0FBSixHQUE0QztFQURsQzs7c0JBR2QsY0FBQSxHQUFnQixTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7SUFDWixJQUFHLENBQUMsQ0FBQSxJQUFLLENBQUEsR0FBSSxDQUFWLENBQUEsR0FBZSxDQUFsQjthQUNJLENBQUEsR0FBSSxDQUFKLEdBQVEsQ0FBUixHQUFZLENBQVosR0FBZ0IsQ0FBaEIsR0FBb0IsQ0FBcEIsR0FBd0IsQ0FBeEIsR0FBNEIsRUFEaEM7S0FBQSxNQUFBO2FBR0ksQ0FBQSxHQUFJLENBQUosR0FBUSxDQUFDLENBQUMsQ0FBQSxJQUFLLENBQU4sQ0FBQSxHQUFXLENBQVgsR0FBZSxDQUFmLEdBQW1CLENBQW5CLEdBQXVCLENBQXZCLEdBQTJCLENBQTVCLENBQVIsR0FBeUMsRUFIN0M7O0VBRFk7O3NCQU1oQixVQUFBLEdBQVksU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWO1dBQ1IsQ0FBQyxDQUFELEdBQUssSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFBLEdBQUksQ0FBSixHQUFRLENBQUMsSUFBSSxDQUFDLEVBQUwsR0FBVSxDQUFYLENBQWpCLENBQUwsR0FBdUMsQ0FBdkMsR0FBMkM7RUFEbkM7O3NCQUdaLFdBQUEsR0FBYSxTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7V0FDVCxDQUFBLEdBQUksSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFBLEdBQUksQ0FBSixHQUFRLENBQUMsSUFBSSxDQUFDLEVBQUwsR0FBVSxDQUFYLENBQWpCLENBQUosR0FBc0M7RUFEN0I7O3NCQUdiLGFBQUEsR0FBZSxTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7V0FDWCxDQUFDLENBQUQsR0FBSyxDQUFMLEdBQVMsQ0FBQyxJQUFJLENBQUMsR0FBTCxDQUFTLElBQUksQ0FBQyxFQUFMLEdBQVUsQ0FBVixHQUFjLENBQXZCLENBQUEsR0FBNEIsQ0FBN0IsQ0FBVCxHQUEyQztFQURoQzs7c0JBR2YsVUFBQSxHQUFZLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVjtBQUNSLFFBQUE7MkNBQVc7TUFBQSxDQUFBLEVBQUksQ0FBQSxHQUFJLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBVCxFQUFZLEVBQUEsR0FBSyxDQUFDLENBQUEsR0FBSSxDQUFKLEdBQVEsQ0FBVCxDQUFqQixDQUFKLEdBQW9DLENBQXhDOztFQURIOztzQkFHWixXQUFBLEdBQWEsU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWO0FBQ1QsUUFBQTsyQ0FBVyxDQUFBLEdBQUk7TUFBQSxDQUFBLEVBQUksQ0FBQSxHQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBTCxDQUFTLENBQVQsRUFBWSxDQUFDLEVBQUQsR0FBTSxDQUFOLEdBQVUsQ0FBdEIsQ0FBRCxHQUE0QixDQUE3QixDQUFKLEdBQXNDLENBQTFDOztFQUROOztzQkFHYixhQUFBLEdBQWUsU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWO0lBQ1gsSUFBRyxDQUFBLEtBQUssQ0FBUjtNQUNJLEVBREo7O0lBRUEsSUFBRyxDQUFBLEtBQUssQ0FBUjtNQUNJLENBQUEsR0FBSSxFQURSOztJQUVBLElBQUcsQ0FBQyxDQUFBLElBQUssQ0FBQSxHQUFJLENBQVYsQ0FBQSxHQUFlLENBQWxCO2FBQ0ksQ0FBQSxHQUFJLENBQUosR0FBUSxJQUFJLENBQUMsR0FBTCxDQUFTLENBQVQsRUFBWSxFQUFBLEdBQUssQ0FBQyxDQUFBLEdBQUksQ0FBTCxDQUFqQixDQUFSLEdBQW9DLEVBRHhDO0tBQUEsTUFBQTthQUdJLENBQUEsR0FBSSxDQUFKLEdBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBVCxFQUFZLENBQUMsRUFBRCxHQUFNLEVBQUUsQ0FBcEIsQ0FBRCxHQUEwQixDQUEzQixDQUFSLEdBQXdDLEVBSDVDOztFQUxXOztzQkFVZixVQUFBLEdBQVksU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWO1dBQ1IsQ0FBQyxDQUFELEdBQUssQ0FBQyxJQUFJLENBQUMsSUFBTCxDQUFVLENBQUEsR0FBSSxDQUFDLENBQUEsSUFBSyxDQUFOLENBQUEsR0FBVyxDQUF6QixDQUFBLEdBQThCLENBQS9CLENBQUwsR0FBeUM7RUFEakM7O3NCQUdaLFdBQUEsR0FBYSxTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7V0FDVCxDQUFBLEdBQUksSUFBSSxDQUFDLElBQUwsQ0FBVSxDQUFBLEdBQUksQ0FBQyxDQUFBLEdBQUksQ0FBQSxHQUFJLENBQUosR0FBUSxDQUFiLENBQUEsR0FBa0IsQ0FBaEMsQ0FBSixHQUF5QztFQURoQzs7c0JBR2IsYUFBQSxHQUFlLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVjtJQUNYLElBQUcsQ0FBQyxDQUFBLElBQUssQ0FBQSxHQUFJLENBQVYsQ0FBQSxHQUFlLENBQWxCO2FBQ0ksQ0FBQyxDQUFELEdBQUssQ0FBTCxHQUFTLENBQUMsSUFBSSxDQUFDLElBQUwsQ0FBVSxDQUFBLEdBQUksQ0FBQSxHQUFJLENBQWxCLENBQUEsR0FBdUIsQ0FBeEIsQ0FBVCxHQUFzQyxFQUQxQztLQUFBLE1BQUE7YUFHSSxDQUFBLEdBQUksQ0FBSixHQUFRLENBQUMsSUFBSSxDQUFDLElBQUwsQ0FBVSxDQUFBLEdBQUksQ0FBQyxDQUFBLElBQUssQ0FBTixDQUFBLEdBQVcsQ0FBekIsQ0FBQSxHQUE4QixDQUEvQixDQUFSLEdBQTRDLEVBSGhEOztFQURXOztzQkFNZixhQUFBLEdBQWUsU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWO0FBQ1gsUUFBQTtJQUFBLENBQUEsR0FBSTtJQUNKLENBQUEsR0FBSTtJQUNKLENBQUEsR0FBSTtJQUVKLElBQUcsQ0FBQSxLQUFLLENBQVI7TUFDSSxFQURKOztJQUVBLElBQUcsQ0FBQyxDQUFBLElBQUssQ0FBTixDQUFBLEtBQVksQ0FBZjtNQUNJLENBQUEsR0FBSSxFQURSOztJQUdBLElBQUcsQ0FBQyxDQUFKO01BQ0ksQ0FBQSxHQUFJLENBQUEsR0FBSSxHQURaOztJQUVBLElBQUcsQ0FBQSxHQUFJLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBVCxDQUFQO01BQ0ksQ0FBQSxHQUFJO01BQ0osQ0FBQSxHQUFJLENBQUEsR0FBSSxFQUZaO0tBQUEsTUFBQTtNQUlJLENBQUEsR0FBSSxDQUFBLEdBQUksQ0FBQyxDQUFBLEdBQUksSUFBSSxDQUFDLEVBQVYsQ0FBSixHQUFvQixJQUFJLENBQUMsSUFBTCxDQUFXLENBQUEsR0FBSSxDQUFmLEVBSjVCOztXQU1BLENBQUMsQ0FBQyxDQUFBLEdBQUksSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFULEVBQVksRUFBQSxHQUFLLENBQUMsQ0FBQSxJQUFLLENBQU4sQ0FBakIsQ0FBSixHQUFpQyxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsQ0FBQSxHQUFJLENBQUosR0FBUSxDQUFULENBQUEsR0FBYyxDQUFDLENBQUEsR0FBSSxJQUFJLENBQUMsRUFBVixDQUFkLEdBQThCLENBQXZDLENBQWxDLENBQUQsR0FBaUY7RUFsQnRFOztzQkFvQmYsY0FBQSxHQUFnQixTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVY7QUFDWixRQUFBO0lBQUEsQ0FBQSxHQUFJO0lBQ0osQ0FBQSxHQUFJO0lBQ0osQ0FBQSxHQUFJO0lBRUosSUFBRyxDQUFBLEtBQUssQ0FBUjtNQUNJLEVBREo7O0lBRUEsSUFBRyxDQUFDLENBQUEsSUFBSyxDQUFOLENBQUEsS0FBWSxDQUFmO01BQ0ksQ0FBQSxHQUFJLEVBRFI7O0lBR0EsSUFBRyxDQUFDLENBQUo7TUFDSSxDQUFBLEdBQUksQ0FBQSxHQUFJLEdBRFo7O0lBRUEsSUFBRyxDQUFBLEdBQUksSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFULENBQVA7TUFDSSxDQUFBLEdBQUk7TUFDSixDQUFBLEdBQUksQ0FBQSxHQUFJLEVBRlo7S0FBQSxNQUFBO01BSUksQ0FBQSxHQUFJLENBQUEsR0FBSSxDQUFDLENBQUEsR0FBSSxJQUFJLENBQUMsRUFBVixDQUFKLEdBQW9CLElBQUksQ0FBQyxJQUFMLENBQVcsQ0FBQSxHQUFJLENBQWYsRUFKNUI7O1dBTUEsQ0FBQSxHQUFJLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBVCxFQUFZLENBQUMsRUFBRCxHQUFNLENBQWxCLENBQUosR0FBMkIsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFDLENBQUEsR0FBSSxDQUFKLEdBQVEsQ0FBVCxDQUFBLEdBQWMsQ0FBQyxDQUFBLEdBQUksSUFBSSxDQUFDLEVBQVYsQ0FBZCxHQUE4QixDQUF2QyxDQUEzQixHQUF1RSxDQUF2RSxHQUEyRTtFQWxCL0Q7O3NCQW9CaEIsZ0JBQUEsR0FBa0IsU0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWO0FBQ2QsUUFBQTtJQUFBLENBQUEsR0FBSTtJQUNKLENBQUEsR0FBSTtJQUNKLENBQUEsR0FBSTtJQUVKLElBQUcsQ0FBQSxLQUFLLENBQVI7TUFDSSxFQURKOztJQUVBLElBQUcsQ0FBQyxDQUFBLElBQUssQ0FBQSxHQUFJLENBQVYsQ0FBQSxLQUFnQixDQUFuQjtNQUNJLENBQUEsR0FBSSxFQURSOztJQUdBLElBQUcsQ0FBQyxDQUFKO01BQ0ksQ0FBQSxHQUFJLENBQUEsR0FBSSxDQUFDLEVBQUEsR0FBSyxHQUFOLEVBRFo7O0lBRUEsSUFBRyxDQUFBLEdBQUksSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFULENBQVA7TUFDSSxDQUFBLEdBQUk7TUFDSixDQUFBLEdBQUksQ0FBQSxHQUFJLEVBRlo7S0FBQSxNQUFBO01BSUksQ0FBQSxHQUFJLENBQUEsR0FBSSxDQUFDLENBQUEsR0FBSSxJQUFJLENBQUMsRUFBVixDQUFKLEdBQW9CLElBQUksQ0FBQyxJQUFMLENBQVcsQ0FBQSxHQUFJLENBQWYsRUFKNUI7O0lBS0EsSUFBSSxDQUFBLEdBQUksQ0FBUjtNQUNJLENBQUMsRUFBRCxHQUFNLENBQUMsQ0FBQSxHQUFJLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBVCxFQUFZLEVBQUEsR0FBSyxDQUFDLENBQUEsSUFBSyxDQUFOLENBQWpCLENBQUosR0FBaUMsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFDLENBQUEsR0FBSSxDQUFKLEdBQVEsQ0FBVCxDQUFBLEdBQWMsQ0FBQyxDQUFBLEdBQUksSUFBSSxDQUFDLEVBQVYsQ0FBZCxHQUE4QixDQUF2QyxDQUFsQyxDQUFOLEdBQXFGLEVBRHpGOztXQUdBLENBQUEsR0FBSSxJQUFJLENBQUMsR0FBTCxDQUFTLENBQVQsRUFBWSxDQUFDLEVBQUQsR0FBTSxDQUFDLENBQUEsSUFBSyxDQUFOLENBQWxCLENBQUosR0FBa0MsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFDLENBQUEsR0FBSSxDQUFKLEdBQVEsQ0FBVCxDQUFBLEdBQWMsQ0FBQyxDQUFBLEdBQUksSUFBSSxDQUFDLEVBQVYsQ0FBZCxHQUE4QixDQUF2QyxDQUFsQyxHQUE4RSxFQUE5RSxHQUFtRixDQUFuRixHQUF1RjtFQXBCekU7Ozs7R0EzT1UsTUFBTSxDQUFDOzs7O0FESmpDLE9BQU8sQ0FBQzs7O0VBRVYsU0FBQyxDQUFBLE1BQUQsR0FBVSxTQUFDLFlBQUQsRUFBZSxVQUFmO0lBQ04sSUFBRyxVQUFVLENBQUMsUUFBZDtNQUNJLFVBQVUsQ0FBQyxHQUFYLEdBQWlCLFNBQUMsS0FBRDtBQUNiLGNBQU0sS0FBQSxDQUFTLElBQUMsQ0FBQSxXQUFXLENBQUMsSUFBZCxHQUFtQixHQUFuQixHQUFzQixZQUF0QixHQUFtQyxjQUEzQztNQURPLEVBRHJCOztXQUlBLE1BQU0sQ0FBQyxjQUFQLENBQXNCLElBQUMsQ0FBQSxTQUF2QixFQUFrQyxZQUFsQyxFQUFnRCxVQUFoRDtFQUxNOzs7Ozs7OztBREZkLElBQUEsK0JBQUE7RUFBQTs7O0FBQUEsQ0FBQSxHQUFJLE1BQU0sQ0FBQzs7QUFFWCxPQUFBLENBQVEscUJBQVI7O0FBQ0MsWUFBYSxPQUFBLENBQVEscUJBQVI7O0FBQ2IsWUFBYSxPQUFBLENBQVEscUJBQVI7O0FBQ2IsU0FBVSxPQUFBLENBQVEsa0JBQVI7O0FBRUwsT0FBTyxDQUFDOzs7RUFDRyxnQkFBQyxVQUFELEVBQWdCLFFBQWhCOztNQUFDLGFBQVc7O0lBQ3JCLHNDQUFBO0lBRUEsSUFBQyxDQUFBLFFBQUQsR0FBWTtJQUVaLENBQUMsQ0FBQyxRQUFGLENBQVcsVUFBWCxFQUNJO01BQUEsQ0FBQSxFQUFHLENBQUg7TUFDQSxDQUFBLEVBQUcsQ0FESDtNQUVBLENBQUEsRUFBRyxHQUZIO01BR0EsU0FBQSxFQUFXLENBSFg7TUFJQSxTQUFBLEVBQVcsQ0FKWDtNQUtBLFNBQUEsRUFBVyxDQUxYO01BTUEsR0FBQSxFQUFLLEVBTkw7TUFPQSxJQUFBLEVBQU0sR0FQTjtNQVFBLEdBQUEsRUFBSyxLQVJMO01BU0EsU0FBQSxFQUFXLEtBVFg7TUFVQSxVQUFBLEVBQVksS0FWWjtNQVdBLFlBQUEsRUFBYyxLQVhkO01BWUEsVUFBQSxFQUFZLEtBWlo7TUFhQSxlQUFBLEVBQWlCLEVBYmpCO01BY0EsTUFBQSxFQUFZLElBQUEsS0FBSyxDQUFDLE9BQU4sQ0FBYyxDQUFkLEVBQWlCLENBQWpCLEVBQW9CLENBQXBCLENBZFo7S0FESjtJQWlCQSxJQUFDLENBQUEsWUFBRCxHQUFvQixJQUFBLEtBQUssQ0FBQyxpQkFBTixDQUNoQixVQUFVLENBQUMsR0FESyxFQUVoQixVQUFVLENBQUMsTUFGSyxFQUdoQixVQUFVLENBQUMsSUFISyxFQUloQixVQUFVLENBQUMsR0FKSztJQU9wQixJQUFHLFVBQVUsQ0FBQyxhQUFkO01BQ0ksSUFBQyxDQUFBLGtCQUFELENBQW9CLFVBQXBCLEVBREo7O0lBR0EsSUFBQyxDQUFBLFdBQUQsQ0FBYSxDQUFDLFVBQVUsQ0FBQyxDQUFaLEVBQWUsVUFBVSxDQUFDLENBQTFCLEVBQTZCLFVBQVUsQ0FBQyxDQUF4QyxDQUFiO0lBQ0EsSUFBQyxDQUFBLFdBQUQsQ0FBYSxDQUFDLFVBQVUsQ0FBQyxTQUFaLEVBQXVCLFVBQVUsQ0FBQyxTQUFsQyxFQUE2QyxVQUFVLENBQUMsU0FBeEQsQ0FBYjtJQUVBLElBQUMsQ0FBQSxxQkFBRCxDQUFBO0lBRUEsSUFBQyxDQUFBLE9BQUQsR0FBZSxJQUFBLE1BQUEsQ0FBTyxJQUFQO0VBckNOOzttQkF1Q2Isa0JBQUEsR0FBb0IsU0FBQyxVQUFEO0lBQ2hCLElBQUMsQ0FBQSxRQUFELEdBQWdCLElBQUEsS0FBSyxDQUFDLGFBQU4sQ0FBb0IsSUFBQyxDQUFBLFlBQXJCLEVBQW1DLElBQUMsQ0FBQSxRQUFwQztJQUNoQixJQUFDLENBQUEsU0FBRCxHQUFhLFVBQVUsQ0FBQztJQUN4QixJQUFDLENBQUEsVUFBRCxHQUFjLFVBQVUsQ0FBQztJQUN6QixJQUFDLENBQUEsWUFBRCxHQUFnQixVQUFVLENBQUM7SUFDM0IsSUFBQyxDQUFBLFVBQUQsR0FBYyxVQUFVLENBQUM7SUFDekIsSUFBQyxDQUFBLGVBQUQsR0FBbUIsVUFBVSxDQUFDO1dBQzlCLElBQUMsQ0FBQSxNQUFELEdBQVUsVUFBVSxDQUFDO0VBUEw7O21CQVNwQixxQkFBQSxHQUF1QixTQUFBO1dBQ25CLElBQUMsQ0FBQSxpQkFBRCxHQUFxQjtFQURGOzttQkFHdkIsRUFBQSxHQUFJLFNBQUMsU0FBRCxFQUFZLEVBQVo7QUFFQSxRQUFBO0lBQUEsSUFBRyxTQUFTLENBQUMsUUFBVixDQUFtQixRQUFuQixDQUFIO01BQ0ksUUFBQSxHQUFXLFNBQUMsQ0FBRDtlQUFPLEVBQUEsQ0FBRyxDQUFDLENBQUMsS0FBTDtNQUFQO01BQ1gsSUFBQyxDQUFBLFlBQVksQ0FBQyxnQkFBZCxDQUErQixTQUEvQixFQUEwQyxRQUExQzthQUVBLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBdEIsQ0FBeUIsT0FBekIsRUFBa0MsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFBO2lCQUM5QixLQUFDLENBQUEsWUFBWSxDQUFDLG1CQUFkLENBQWtDLFNBQWxDLEVBQTZDLFFBQTdDO1FBRDhCO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFsQyxFQUpKOztFQUZBOzttQkFTSixXQUFBLEdBQWEsU0FBQyxTQUFEO0lBQ1QsSUFBQyxDQUFBLENBQUQsR0FBSyxTQUFVLENBQUEsQ0FBQTtJQUNmLElBQUMsQ0FBQSxDQUFELEdBQUssU0FBVSxDQUFBLENBQUE7V0FDZixJQUFDLENBQUEsQ0FBRCxHQUFLLFNBQVUsQ0FBQSxDQUFBO0VBSE47O21CQUtiLFdBQUEsR0FBYSxTQUFDLFNBQUQ7SUFDVCxJQUFDLENBQUEsU0FBRCxHQUFhLFNBQVUsQ0FBQSxDQUFBO0lBQ3ZCLElBQUMsQ0FBQSxTQUFELEdBQWEsU0FBVSxDQUFBLENBQUE7V0FDdkIsSUFBQyxDQUFBLFNBQUQsR0FBYSxTQUFVLENBQUEsQ0FBQTtFQUhkOzttQkFLYixPQUFBLEdBQVMsU0FBQyxVQUFEO1dBQ0QsSUFBQSxTQUFBLENBQVUsSUFBVixFQUFhLFVBQWI7RUFEQzs7bUJBR1QsTUFBQSxHQUFRLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQO0lBQ0osSUFBRyxTQUFTLENBQUMsTUFBVixLQUFvQixDQUF2QjthQUNJLElBQUMsQ0FBQSxZQUFZLENBQUMsTUFBZCxDQUFxQixDQUFyQixFQURKO0tBQUEsTUFFSyxJQUFHLFNBQVMsQ0FBQyxNQUFWLEtBQW9CLENBQXZCO2FBQ0QsSUFBQyxDQUFBLFlBQVksQ0FBQyxNQUFkLENBQXFCLENBQXJCLEVBQXdCLENBQXhCLEVBQTJCLENBQTNCLEVBREM7O0VBSEQ7O21CQU1SLFdBQUEsR0FBYSxTQUFDLEtBQUQ7V0FFVCxNQUFNLENBQUMsSUFBUCxDQUFZLElBQUMsQ0FBQSxNQUFiLENBQW9CLENBQUMsR0FBckIsQ0FBeUIsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFDLENBQUQ7UUFDckIsSUFBRyxDQUFBLEtBQUssS0FBUjtVQUNJLEtBQUMsQ0FBQSxNQUFNLENBQUMsT0FBUixHQUFrQixLQUFDLENBQUEsTUFBTyxDQUFBLENBQUE7aUJBRzFCLE1BQU0sQ0FBQyxJQUFQLENBQVksS0FBQyxDQUFBLE1BQU0sQ0FBQyxPQUFwQixDQUE0QixDQUFDLEdBQTdCLENBQWlDLFNBQUMsRUFBRDttQkFDN0IsS0FBRSxDQUFBLEVBQUEsQ0FBRixHQUFRLEtBQUMsQ0FBQSxNQUFNLENBQUMsT0FBUSxDQUFBLEVBQUE7VUFESyxDQUFqQyxFQUpKOztNQURxQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBekI7RUFGUzs7bUJBVWIsVUFBQSxHQUFZLFNBQUMsTUFBRCxFQUFTLE1BQVQ7SUFFUixJQUFHLElBQUMsQ0FBQSxNQUFNLENBQUMsT0FBUixLQUFtQixJQUFDLENBQUEsTUFBTyxDQUFBLE1BQUEsQ0FBM0IsSUFBc0MsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLEtBQW1CLElBQUMsQ0FBQSxNQUFPLENBQUEsTUFBQSxDQUFwRTtNQUNJLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLEtBQW1CLElBQUMsQ0FBQSxNQUFPLENBQUEsTUFBQSxDQUE5QjtlQUEyQyxJQUFDLENBQUEsT0FBRCxDQUFTLE1BQVQsRUFBM0M7T0FBQSxNQUNLLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLEtBQW1CLElBQUMsQ0FBQSxNQUFPLENBQUEsTUFBQSxDQUE5QjtlQUEyQyxJQUFDLENBQUEsT0FBRCxDQUFTLE1BQVQsRUFBM0M7T0FGVDtLQUFBLE1BQUE7YUFLSSxJQUFDLENBQUEsT0FBRCxDQUFTLE1BQVQsRUFMSjs7RUFGUTs7RUFTWixNQUFDLENBQUEsTUFBRCxDQUFRLFVBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLFlBQVksQ0FBQztJQUFqQixDQUFMO0dBREo7O0VBR0EsTUFBQyxDQUFBLE1BQUQsQ0FBUSxHQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxZQUFZLENBQUMsUUFBUSxDQUFDO0lBQTFCLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxDQUFEO01BQ0QsSUFBQyxDQUFBLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBdkIsR0FBMkI7TUFDM0IsSUFBc0IsSUFBQyxDQUFBLFFBQXZCO1FBQUEsSUFBQyxDQUFBLFFBQVEsQ0FBQyxNQUFWLENBQUEsRUFBQTs7YUFDQSxJQUFDLENBQUEsWUFBWSxDQUFDLGFBQWQsQ0FBNEI7UUFBQyxJQUFBLEVBQU0sVUFBUDtRQUFtQixLQUFBLEVBQU8sSUFBQyxDQUFBLENBQTNCO09BQTVCO0lBSEMsQ0FETDtHQURKOztFQU9BLE1BQUMsQ0FBQSxNQUFELENBQVEsR0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsWUFBWSxDQUFDLFFBQVEsQ0FBQztJQUExQixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsQ0FBRDtNQUNELElBQUMsQ0FBQSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQXZCLEdBQTJCO01BQzNCLElBQXNCLElBQUMsQ0FBQSxRQUF2QjtRQUFBLElBQUMsQ0FBQSxRQUFRLENBQUMsTUFBVixDQUFBLEVBQUE7O2FBQ0EsSUFBQyxDQUFBLFlBQVksQ0FBQyxhQUFkLENBQTRCO1FBQUMsSUFBQSxFQUFNLFVBQVA7UUFBbUIsS0FBQSxFQUFPLElBQUMsQ0FBQSxDQUEzQjtPQUE1QjtJQUhDLENBREw7R0FESjs7RUFPQSxNQUFDLENBQUEsTUFBRCxDQUFRLEdBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLFlBQVksQ0FBQyxRQUFRLENBQUM7SUFBMUIsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLENBQUQ7TUFDRCxJQUFDLENBQUEsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUF2QixHQUEyQjtNQUMzQixJQUFzQixJQUFDLENBQUEsUUFBdkI7UUFBQSxJQUFDLENBQUEsUUFBUSxDQUFDLE1BQVYsQ0FBQSxFQUFBOzthQUNBLElBQUMsQ0FBQSxZQUFZLENBQUMsYUFBZCxDQUE0QjtRQUFDLElBQUEsRUFBTSxVQUFQO1FBQW1CLEtBQUEsRUFBTyxJQUFDLENBQUEsQ0FBM0I7T0FBNUI7SUFIQyxDQURMO0dBREo7O0VBT0EsTUFBQyxDQUFBLE1BQUQsQ0FBUSxVQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxZQUFZLENBQUM7SUFBakIsQ0FBTDtHQURKOztFQUdBLE1BQUMsQ0FBQSxNQUFELENBQVEsV0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVgsQ0FBb0IsSUFBQyxDQUFBLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBM0M7SUFBSCxDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsQ0FBRDtNQUNELElBQUMsQ0FBQSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQXZCLEdBQTJCLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBWCxDQUFvQixDQUFwQjtNQUMzQixJQUFzQixJQUFDLENBQUEsUUFBdkI7UUFBQSxJQUFDLENBQUEsUUFBUSxDQUFDLE1BQVYsQ0FBQSxFQUFBOzthQUNBLElBQUMsQ0FBQSxZQUFZLENBQUMsYUFBZCxDQUE0QjtRQUFDLElBQUEsRUFBTSxrQkFBUDtRQUEyQixLQUFBLEVBQU8sSUFBQyxDQUFBLFNBQW5DO09BQTVCO0lBSEMsQ0FETDtHQURKOztFQU9BLE1BQUMsQ0FBQSxNQUFELENBQVEsV0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVgsQ0FBb0IsSUFBQyxDQUFBLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBM0M7SUFBSCxDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsQ0FBRDtNQUNELElBQUMsQ0FBQSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQXZCLEdBQTJCLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBWCxDQUFvQixDQUFwQjtNQUMzQixJQUFzQixJQUFDLENBQUEsUUFBdkI7UUFBQSxJQUFDLENBQUEsUUFBUSxDQUFDLE1BQVYsQ0FBQSxFQUFBOzthQUNBLElBQUMsQ0FBQSxZQUFZLENBQUMsYUFBZCxDQUE0QjtRQUFDLElBQUEsRUFBTSxrQkFBUDtRQUEyQixLQUFBLEVBQU8sSUFBQyxDQUFBLFNBQW5DO09BQTVCO0lBSEMsQ0FETDtHQURKOztFQU9BLE1BQUMsQ0FBQSxNQUFELENBQVEsV0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVgsQ0FBb0IsSUFBQyxDQUFBLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBM0M7SUFBSCxDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsQ0FBRDtNQUNELElBQUMsQ0FBQSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQXZCLEdBQTJCLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBWCxDQUFvQixDQUFwQjtNQUMzQixJQUFzQixJQUFDLENBQUEsUUFBdkI7UUFBQSxJQUFDLENBQUEsUUFBUSxDQUFDLE1BQVYsQ0FBQSxFQUFBOzthQUNBLElBQUMsQ0FBQSxZQUFZLENBQUMsYUFBZCxDQUE0QjtRQUFDLElBQUEsRUFBTSxrQkFBUDtRQUEyQixLQUFBLEVBQU8sSUFBQyxDQUFBLFNBQW5DO09BQTVCO0lBSEMsQ0FETDtHQURKOztFQU9BLE1BQUMsQ0FBQSxNQUFELENBQVEsS0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsWUFBWSxDQUFDO0lBQWpCLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxHQUFEO01BQ0QsSUFBQyxDQUFBLFlBQVksQ0FBQyxHQUFkLEdBQW9CO2FBQ3BCLElBQUMsQ0FBQSxZQUFZLENBQUMsYUFBZCxDQUE0QjtRQUFDLElBQUEsRUFBTSxZQUFQO1FBQXFCLEtBQUEsRUFBTyxJQUFDLENBQUEsR0FBN0I7T0FBNUI7SUFGQyxDQURMO0dBREo7O0VBTUEsTUFBQyxDQUFBLE1BQUQsQ0FBUSxNQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxZQUFZLENBQUM7SUFBakIsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLE1BQUQ7TUFDRCxJQUFDLENBQUEsWUFBWSxDQUFDLElBQWQsR0FBcUI7YUFDckIsSUFBQyxDQUFBLFlBQVksQ0FBQyxhQUFkLENBQTRCO1FBQUMsSUFBQSxFQUFNLGFBQVA7UUFBc0IsS0FBQSxFQUFPLElBQUMsQ0FBQSxJQUE5QjtPQUE1QjtJQUZDLENBREw7R0FESjs7RUFNQSxNQUFDLENBQUEsTUFBRCxDQUFRLE1BQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLFlBQVksQ0FBQztJQUFqQixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsSUFBRDtNQUNELElBQUMsQ0FBQSxZQUFZLENBQUMsSUFBZCxHQUFxQjthQUNyQixJQUFDLENBQUEsWUFBWSxDQUFDLGFBQWQsQ0FBNEI7UUFBQyxJQUFBLEVBQU0sYUFBUDtRQUFzQixLQUFBLEVBQU8sSUFBQyxDQUFBLElBQTlCO09BQTVCO0lBRkMsQ0FETDtHQURKOztFQU1BLE1BQUMsQ0FBQSxNQUFELENBQVEsS0FBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsWUFBWSxDQUFDO0lBQWpCLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxHQUFEO01BQ0QsSUFBQyxDQUFBLFlBQVksQ0FBQyxHQUFkLEdBQW9CO2FBQ3BCLElBQUMsQ0FBQSxZQUFZLENBQUMsYUFBZCxDQUE0QjtRQUFDLElBQUEsRUFBTSxZQUFQO1FBQXFCLEtBQUEsRUFBTyxJQUFDLENBQUEsR0FBN0I7T0FBNUI7SUFGQyxDQURMO0dBREo7O0VBTUEsTUFBQyxDQUFBLE1BQUQsQ0FBUSxRQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxZQUFZLENBQUM7SUFBakIsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLE1BQUQ7TUFDRCxJQUFDLENBQUEsWUFBWSxDQUFDLE1BQWQsR0FBdUI7YUFDdkIsSUFBQyxDQUFBLFlBQVksQ0FBQyxhQUFkLENBQTRCO1FBQUMsSUFBQSxFQUFNLGVBQVA7UUFBd0IsS0FBQSxFQUFPLElBQUMsQ0FBQSxNQUFoQztPQUE1QjtJQUZDLENBREw7R0FESjs7RUFNQSxNQUFDLENBQUEsTUFBRCxDQUFRLFFBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQ0QsSUFBQyxDQUFBLE9BQU8sQ0FBQztJQURSLENBQUw7SUFFQSxHQUFBLEVBQUssU0FBQyxNQUFEO2FBQ0QsQ0FBQyxDQUFDLE1BQUYsQ0FBUyxJQUFDLENBQUEsTUFBVixFQUFrQixNQUFsQjtJQURDLENBRkw7R0FESjs7RUFNQSxNQUFDLENBQUEsTUFBRCxDQUFRLFdBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLFFBQVEsQ0FBQztJQUFiLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxJQUFEO01BQ0QsSUFBQyxDQUFBLFFBQVEsQ0FBQyxTQUFWLEdBQXNCO2FBQ3RCLElBQUMsQ0FBQSxZQUFZLENBQUMsYUFBZCxDQUE0QjtRQUFDLElBQUEsRUFBTSxrQkFBUDtRQUEyQixLQUFBLEVBQU8sSUFBQyxDQUFBLFNBQW5DO09BQTVCO0lBRkMsQ0FETDtHQURKOztFQU1BLE1BQUMsQ0FBQSxNQUFELENBQVEsWUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsUUFBUSxDQUFDO0lBQWIsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLElBQUQ7TUFDRCxJQUFDLENBQUEsUUFBUSxDQUFDLFVBQVYsR0FBdUI7YUFDdkIsSUFBQyxDQUFBLFlBQVksQ0FBQyxhQUFkLENBQTRCO1FBQUMsSUFBQSxFQUFNLG1CQUFQO1FBQTRCLEtBQUEsRUFBTyxJQUFDLENBQUEsVUFBcEM7T0FBNUI7SUFGQyxDQURMO0dBREo7O0VBTUEsTUFBQyxDQUFBLE1BQUQsQ0FBUSxjQUFSLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxRQUFRLENBQUM7SUFBYixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUMsSUFBRDtNQUNELElBQUMsQ0FBQSxRQUFRLENBQUMsWUFBVixHQUF5QjthQUN6QixJQUFDLENBQUEsWUFBWSxDQUFDLGFBQWQsQ0FBNEI7UUFBQyxJQUFBLEVBQU0scUJBQVA7UUFBOEIsS0FBQSxFQUFPLElBQUMsQ0FBQSxZQUF0QztPQUE1QjtJQUZDLENBREw7R0FESjs7RUFNQSxNQUFDLENBQUEsTUFBRCxDQUFRLFlBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLFFBQVEsQ0FBQztJQUFiLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxJQUFEO01BQ0QsSUFBQyxDQUFBLFFBQVEsQ0FBQyxVQUFWLEdBQXVCO2FBQ3ZCLElBQUMsQ0FBQSxZQUFZLENBQUMsYUFBZCxDQUE0QjtRQUFDLElBQUEsRUFBTSxtQkFBUDtRQUE0QixLQUFBLEVBQU8sSUFBQyxDQUFBLFVBQXBDO09BQTVCO0lBRkMsQ0FETDtHQURKOztFQU1BLE1BQUMsQ0FBQSxNQUFELENBQVEsaUJBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLFFBQVEsQ0FBQztJQUFiLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxLQUFEO01BQ0QsSUFBQyxDQUFBLFFBQVEsQ0FBQyxlQUFWLEdBQTRCO2FBQzVCLElBQUMsQ0FBQSxZQUFZLENBQUMsYUFBZCxDQUE0QjtRQUFDLElBQUEsRUFBTSx3QkFBUDtRQUFpQyxLQUFBLEVBQU8sSUFBQyxDQUFBLGVBQXpDO09BQTVCO0lBRkMsQ0FETDtHQURKOztFQU1BLE1BQUMsQ0FBQSxNQUFELENBQVEsUUFBUixFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsUUFBUSxDQUFDO0lBQWIsQ0FBTDtJQUNBLEdBQUEsRUFBSyxTQUFDLE9BQUQ7TUFDRCxJQUFDLENBQUEsUUFBUSxDQUFDLE1BQVYsR0FBbUI7YUFDbkIsSUFBQyxDQUFBLFlBQVksQ0FBQyxhQUFkLENBQTRCO1FBQUMsSUFBQSxFQUFNLGVBQVA7UUFBd0IsS0FBQSxFQUFPLElBQUMsQ0FBQSxNQUFoQztPQUE1QjtJQUZDLENBREw7R0FESjs7OztHQXJOeUI7Ozs7QURQN0IsSUFBQSxzREFBQTtFQUFBOzs7QUFBQyxZQUFhLE9BQUEsQ0FBUSxxQkFBUjs7QUFFZCx1QkFBQSxHQUEwQixDQUN0QixHQURzQixFQUV0QixHQUZzQixFQUd0QixHQUhzQixFQUl0QixXQUpzQixFQUt0QixXQUxzQixFQU10QixXQU5zQixFQU90QixPQVBzQixFQVF0QixRQVJzQixFQVN0QixRQVRzQixFQVV0QixRQVZzQixFQVd0QixTQVhzQjs7QUFjMUIsa0JBQUEsR0FBcUIsU0FBQyxJQUFEO0FBQ3BCLFFBQU0sS0FBQSxDQUFNLGFBQUEsR0FBYyxJQUFkLEdBQW1CLHVCQUF6QjtBQURjOztBQUdmLE9BQU8sQ0FBQzs7O0VBRUcsZ0JBQUMsS0FBRDtJQUNULHNDQUFBO0lBRUEsSUFBQyxDQUFBLEtBQUQsR0FBUztJQUVULElBQUMsQ0FBQSxzQkFBRCxHQUEwQixNQUFNLENBQUMsbUJBQVAsQ0FBMkIsTUFBTSxDQUFDLGNBQVAsQ0FBc0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxpQkFBN0IsQ0FBM0I7SUFFMUIsSUFBQyxDQUFBLE1BQUQsR0FDSTtNQUFBLENBQUEsT0FBQSxDQUFBLEVBQVMsSUFBQyxDQUFBLGdCQUFELENBQWtCLElBQUMsQ0FBQSxzQkFBbkIsQ0FBVDtNQUNBLE9BQUEsRUFBUyxJQUFDLENBQUEsZ0JBQUQsQ0FBa0IsSUFBQyxDQUFBLHNCQUFuQixDQURUOztFQVJLOzttQkFXYixnQkFBQSxHQUFrQixTQUFDLFNBQUQ7QUFDZCxRQUFBO0lBQUEsY0FBQSxHQUFpQjtJQUNqQixTQUFTLENBQUMsR0FBVixDQUFjLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxDQUFEO1FBQ1YsSUFBRyx1QkFBdUIsQ0FBQyxRQUF4QixDQUFpQyxDQUFqQyxDQUFIO2lCQUNJLGNBQWUsQ0FBQSxDQUFBLENBQWYsR0FBb0IsS0FBQyxDQUFBLEtBQU0sQ0FBQSxDQUFBLEVBRC9COztNQURVO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFkO0FBR0EsV0FBTztFQUxPOztFQU9sQixNQUFDLENBQUEsTUFBRCxDQUFRLFNBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQztJQUFYLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQyxLQUFEO01BQ0QsSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFSLEdBQW1CLElBQUMsQ0FBQSxNQUFNLENBQUM7YUFDM0IsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLEdBQWtCO0lBRmpCLENBREw7R0FESjs7RUFNQSxNQUFDLENBQUEsTUFBRCxDQUFRLFVBQVIsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQztJQUFYLENBQUw7R0FESjs7OztHQTFCeUI7Ozs7QURuQjdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUR2aUhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBRGo5R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBRDNsRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUR6aUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBRHJ1QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FEamhDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FEZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBRGw1QkEsT0FBQSxDQUFRLHlCQUFSOztBQUVNLE9BQU8sQ0FBQztFQUNHLGlCQUFDLFVBQUQsRUFBYSxFQUFiO0lBQ1QsSUFBQyxDQUFBLFdBQUQsR0FBZSxJQUFJLEtBQUssQ0FBQztJQUN6QixJQUFDLENBQUEsV0FBVyxDQUFDLElBQWIsQ0FBa0IsVUFBVSxDQUFDLElBQTdCLEVBQW1DLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxPQUFEO1FBQy9CLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBZCxHQUEyQixPQUFPLENBQUM7ZUFDbkMsRUFBQSxDQUFHLE9BQU8sQ0FBQyxLQUFYO01BRitCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFuQyxFQUdFLElBSEYsRUFHUSxTQUFDLENBQUQ7YUFBTyxPQUFPLENBQUMsR0FBUixDQUFZLENBQVo7SUFBUCxDQUhSO0VBRlM7Ozs7Ozs7O0FESGpCLE9BQUEsQ0FBUSxxQkFBUjs7QUFDQSxNQUFNLENBQUMsSUFBUCxHQUFjLE9BQUEsQ0FBUSx1QkFBUixDQUFnQyxDQUFDOztBQUV6QyxPQUFPLENBQUM7RUFDRyxhQUFDLFVBQUQsRUFBYSxFQUFiO0lBQ1QsSUFBQyxDQUFBLFdBQUQsR0FBZSxJQUFJLEtBQUssQ0FBQztJQUN6QixJQUFDLENBQUEsV0FBVyxDQUFDLElBQWIsQ0FBa0IsVUFBVSxDQUFDLElBQTdCLEVBQW1DLENBQUEsU0FBQSxLQUFBO2FBQUEsU0FBQyxLQUFEO2VBQy9CLEVBQUEsQ0FBRyxLQUFIO01BRCtCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFuQyxFQUVFLElBRkYsRUFFUSxTQUFDLENBQUQ7YUFBTyxPQUFPLENBQUMsR0FBUixDQUFZLENBQVo7SUFBUCxDQUZSO0VBRlM7Ozs7Ozs7O0FESmpCLE9BQUEsQ0FBUSxzQkFBUjs7QUFFTSxPQUFPLENBQUM7RUFDRyxjQUFDLFVBQUQsRUFBYSxFQUFiO0lBQ1QsSUFBQyxDQUFBLFdBQUQsR0FBZSxJQUFJLEtBQUssQ0FBQztJQUN6QixJQUFDLENBQUEsV0FBVyxDQUFDLElBQWIsQ0FBa0IsVUFBVSxDQUFDLElBQTdCLEVBQW1DLFNBQUMsS0FBRDtNQUMvQixLQUFLLENBQUMsS0FBSyxDQUFDLFVBQVosR0FBeUIsS0FBSyxDQUFDO2FBQy9CLEVBQUEsQ0FBRyxLQUFLLENBQUMsS0FBVDtJQUYrQixDQUFuQyxFQUdFLElBSEYsRUFHUSxTQUFDLENBQUQ7YUFBTyxPQUFPLENBQUMsR0FBUixDQUFZLENBQVo7SUFBUCxDQUhSO0VBRlM7Ozs7Ozs7O0FESFgsT0FBTyxDQUFDO0VBQ0csb0JBQUMsVUFBRCxFQUFhLEVBQWI7SUFFVCxJQUFDLENBQUEsUUFBRCxDQUFVLFVBQVUsQ0FBQyxJQUFyQixFQUEyQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsSUFBRDtBQUN2QixZQUFBO1FBQUEsUUFBQSxHQUFXLElBQUksQ0FBQyxLQUFMLENBQVcsSUFBWCxDQUFnQixDQUFDO1FBRTVCLElBQUcsUUFBUSxDQUFDLElBQVQsS0FBaUIsUUFBcEI7aUJBQWtDLEtBQUMsQ0FBQSxVQUFELENBQVksVUFBWixFQUF3QixFQUF4QixFQUFsQztTQUFBLE1BQUE7aUJBQ0ssS0FBQyxDQUFBLFlBQUQsQ0FBYyxVQUFkLEVBQTBCLEVBQTFCLEVBREw7O01BSHVCO0lBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUEzQjtFQUZTOzt1QkFTYixVQUFBLEdBQVksU0FBQyxVQUFELEVBQWEsRUFBYjtJQUNSLElBQUMsQ0FBQSxXQUFELEdBQWUsSUFBSSxLQUFLLENBQUM7V0FDekIsSUFBQyxDQUFBLFdBQVcsQ0FBQyxJQUFiLENBQWtCLFVBQVUsQ0FBQyxJQUE3QixFQUFtQyxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsS0FBRDtlQUMvQixFQUFBLENBQUcsS0FBSDtNQUQrQjtJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBbkMsRUFFRSxJQUZGLEVBRVEsU0FBQyxDQUFEO2FBQU8sT0FBTyxDQUFDLEdBQVIsQ0FBWSxDQUFaO0lBQVAsQ0FGUjtFQUZROzt1QkFNWixZQUFBLEdBQWMsU0FBQyxVQUFELEVBQWEsRUFBYjtJQUNWLElBQUMsQ0FBQSxXQUFELEdBQWUsSUFBSSxLQUFLLENBQUM7V0FDekIsSUFBQyxDQUFBLFdBQVcsQ0FBQyxJQUFiLENBQWtCLFVBQVUsQ0FBQyxJQUE3QixFQUFtQyxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsUUFBRCxFQUFXLFNBQVg7QUFDL0IsWUFBQTtRQUFBLFFBQUEsR0FBVyxTQUFVLENBQUEsQ0FBQTtRQUNyQixLQUFBLEdBQVksSUFBQSxLQUFLLENBQUMsSUFBTixDQUFXLFFBQVgsRUFBcUIsUUFBckI7UUFDWixLQUFLLENBQUMsVUFBTixHQUFtQixRQUFRLENBQUM7ZUFFNUIsRUFBQSxDQUFHLEtBQUg7TUFMK0I7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQW5DLEVBTUUsSUFORixFQU1RLFNBQUMsQ0FBRDthQUFPLE9BQU8sQ0FBQyxHQUFSLENBQVksQ0FBWjtJQUFQLENBTlI7RUFGVTs7dUJBVWQsUUFBQSxHQUFVLFNBQUMsSUFBRCxFQUFPLEVBQVA7QUFDTixRQUFBO0lBQUEsT0FBQSxHQUFVLElBQUk7SUFDZCxPQUFPLENBQUMsZ0JBQVIsQ0FBeUIsa0JBQXpCO0lBQ0EsT0FBTyxDQUFDLElBQVIsQ0FBYSxLQUFiLEVBQW9CLElBQXBCLEVBQTBCLElBQTFCO0lBQ0EsT0FBTyxDQUFDLGtCQUFSLEdBQTZCLFNBQUE7TUFDekIsSUFBRyxPQUFPLENBQUMsVUFBUixLQUFzQixDQUF0QixJQUEyQixPQUFPLENBQUMsTUFBUixLQUFrQixHQUFoRDtlQUNJLEVBQUEsQ0FBRyxPQUFPLENBQUMsWUFBWCxFQURKOztJQUR5QjtXQUc3QixPQUFPLENBQUMsSUFBUixDQUFhLElBQWI7RUFQTTs7Ozs7Ozs7QUQxQmQsT0FBQSxDQUFRLHFCQUFSOztBQUNBLE9BQUEsQ0FBUSxxQkFBUjs7QUFFTSxPQUFPLENBQUM7RUFDRyxhQUFDLFVBQUQsRUFBYSxFQUFiO0FBQ1QsUUFBQTtJQUFBLElBQUEsR0FBTyxVQUFVLENBQUM7SUFDbEIsSUFBQyxDQUFBLE9BQUQsR0FBVyxJQUFJLENBQUMsU0FBTCxDQUFlLENBQWYsRUFBa0IsSUFBSSxDQUFDLE9BQUwsQ0FBYSxJQUFJLENBQUMsS0FBTCxDQUFXLEdBQVgsQ0FBZSxDQUFDLEdBQWhCLENBQUEsQ0FBYixDQUFsQjtJQUNYLElBQUMsQ0FBQSxTQUFELEdBQWEsSUFBSSxDQUFDLEtBQUwsQ0FBVyxHQUFYLENBQWUsQ0FBQyxHQUFoQixDQUFBO0lBQ2IsSUFBQyxDQUFBLFlBQUQsR0FBZ0IsSUFBQyxDQUFBLFNBQVMsQ0FBQyxPQUFYLENBQW1CLE1BQW5CLEVBQTJCLE1BQTNCO0lBRWhCLElBQUMsQ0FBQSxjQUFELEdBQWtCLElBQUksS0FBSyxDQUFDO0lBQzVCLElBQUMsQ0FBQSxXQUFELEdBQWUsSUFBSSxLQUFLLENBQUM7SUFFekIsSUFBQyxDQUFBLGNBQWMsQ0FBQyxPQUFoQixDQUF3QixJQUFDLENBQUEsT0FBekI7SUFDQSxJQUFDLENBQUEsY0FBYyxDQUFDLElBQWhCLENBQXFCLElBQUMsQ0FBQSxZQUF0QixFQUFvQyxDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsU0FBRDtRQUNoQyxTQUFTLENBQUMsT0FBVixDQUFBO1FBRUEsS0FBQyxDQUFBLFdBQVcsQ0FBQyxZQUFiLENBQTBCLFNBQTFCO1FBQ0EsS0FBQyxDQUFBLFdBQVcsQ0FBQyxPQUFiLENBQXFCLEtBQUMsQ0FBQSxPQUF0QjtlQUNBLEtBQUMsQ0FBQSxXQUFXLENBQUMsSUFBYixDQUFrQixLQUFDLENBQUEsU0FBbkIsRUFBOEIsU0FBQyxLQUFEO2lCQUMxQixFQUFBLENBQUcsS0FBSDtRQUQwQixDQUE5QjtNQUxnQztJQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBcEM7RUFWUzs7Ozs7Ozs7QURKakIsSUFBQTs7QUFBQSxNQUFNLENBQUMsS0FBUCxHQUFlLE9BQUEsQ0FBUSx5QkFBUjs7QUFDZixPQUFBLENBQVEsa0JBQVI7O0FBRUMsUUFBUyxPQUFBLENBQVEscUJBQVI7O0FBQ1QsU0FBVSxPQUFBLENBQVEsc0JBQVI7O0FBQ1YsUUFBUyxPQUFBLENBQVEscUJBQVI7O0FBQ1QsT0FBUSxPQUFBLENBQVEsb0JBQVI7O0FBQ1IsUUFBUyxPQUFBLENBQVEscUJBQVI7O0FBRVYsTUFBTSxDQUFDLE9BQVAsR0FDSTtFQUFBLEtBQUEsRUFBTyxLQUFQO0VBQ0EsTUFBQSxFQUFRLE1BRFI7RUFFQSxLQUFBLEVBQU8sS0FGUDtFQUdBLElBQUEsRUFBTSxJQUhOO0VBSUEsS0FBQSxFQUFPLEtBSlA7RUFRQSxpQkFBQSxFQUFtQixLQUFLLENBQUMsaUJBUnpCO0VBU0Esa0JBQUEsRUFBb0IsS0FBSyxDQUFDLGtCQVQxQjtFQVVBLG9CQUFBLEVBQXNCLEtBQUssQ0FBQyxvQkFWNUI7RUFXQSxpQkFBQSxFQUFtQixLQUFLLENBQUMsaUJBWHpCO0VBWUEsa0JBQUEsRUFBb0IsS0FBSyxDQUFDLGtCQVoxQjtFQWFBLGlCQUFBLEVBQW1CLEtBQUssQ0FBQyxpQkFiekI7RUFjQSxpQkFBQSxFQUFtQixLQUFLLENBQUMsaUJBZHpCO0VBZUEsbUJBQUEsRUFBcUIsS0FBSyxDQUFDLG1CQWYzQjtFQWdCQSxvQkFBQSxFQUFzQixLQUFLLENBQUMsb0JBaEI1QjtFQWlCQSxnQkFBQSxFQUFrQixLQUFLLENBQUMsZ0JBakJ4QjtFQWtCQSxjQUFBLEVBQWdCLEtBQUssQ0FBQyxjQWxCdEI7RUFtQkEsaUJBQUEsRUFBbUIsS0FBSyxDQUFDLGlCQW5CekI7RUFvQkEsY0FBQSxFQUFnQixLQUFLLENBQUMsY0FwQnRCO0VBcUJBLGNBQUEsRUFBZ0IsS0FBSyxDQUFDLGNBckJ0QjtFQXNCQSxjQUFBLEVBQWdCLEtBQUssQ0FBQyxjQXRCdEI7Ozs7O0FETkosT0FBTyxDQUFDLEtBQVIsR0FBZ0I7O0FBRWhCLE9BQU8sQ0FBQyxVQUFSLEdBQXFCLFNBQUE7U0FDcEIsS0FBQSxDQUFNLHVCQUFOO0FBRG9COztBQUdyQixPQUFPLENBQUMsT0FBUixHQUFrQixDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCJ9
