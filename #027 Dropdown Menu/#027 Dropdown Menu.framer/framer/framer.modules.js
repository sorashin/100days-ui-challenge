require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"getRandomHeart":[function(require,module,exports){
exports.getRandomHeart = function(heart, streamSize, heartStream) {
  var floatLeft, floatRight, floatUp, heartAnimationProps, horzFloatLayer, newHeart, vertFloatLayer;
  vertFloatLayer = new Layer({
    width: heart.original.width,
    height: heart.original.height,
    y: streamSize.h - 270,
    superLayer: heartStream,
    backgroundColor: "transparent",
    clip: false
  });
  vertFloatLayer.centerX();
  floatUp = new Animation({
    layer: vertFloatLayer,
    properties: {
      y: 0,
      opacity: 0
    },
    time: 4.5,
    curve: "ease-out"
  });
  vertFloatLayer.on(Events.AnimationEnd, function(animation, layer) {
    return layer.destroy();
  });
  floatUp.start();
  horzFloatLayer = new Layer({
    width: heart.original.width,
    height: heart.original.width,
    superLayer: vertFloatLayer,
    backgroundColor: "transparent",
    clip: false
  });
  heartAnimationProps = {
    x: Utils.randomNumber(5, streamSize.w / 1 - horzFloatLayer.width),
    r: Utils.randomNumber(2, 10),
    t: 3,
    c: "ease-in-out"
  };
  floatLeft = new Animation({
    layer: horzFloatLayer,
    properties: {
      x: horzFloatLayer.x - heartAnimationProps.x,
      rotation: heartAnimationProps.r
    },
    time: heartAnimationProps.t,
    curve: heartAnimationProps.c
  });
  floatRight = new Animation({
    layer: horzFloatLayer,
    properties: {
      x: horzFloatLayer.x + heartAnimationProps.x,
      rotation: -heartAnimationProps.r
    },
    time: heartAnimationProps.t,
    curve: heartAnimationProps.c
  });
  floatLeft.start;
  floatRight.start;
  Utils.randomChoice([floatLeft, floatRight]).start();
  newHeart = Utils.randomChoice([heart.blue, heart.pink, heart.green, heart.brown, heart.violet, heart.orange, heart.yellow]).copy();
  horzFloatLayer.addSubLayer(newHeart);
  newHeart.visible = true;
  newHeart.scale = 0;
  newHeart.originY = 1;
  return newHeart.animate({
    properties: {
      scale: .5
    },
    time: .25,
    curve: "spring(100, 30, 35)"
  });
};


},{}],"myModule":[function(require,module,exports){
exports.myVar = "myVariable";

exports.myFunction = function() {
  return print("myFunction is running");
};

exports.myArray = [1, 2, 3];


},{}]},{},[])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWVyLm1vZHVsZXMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL1VzZXJzL3NoaW5ha2FqL0Rlc2t0b3AvRHJpYmJibGUvRGFpbHlfVUkvIzAyNyBEcm9wZG93biBNZW51LyMwMjcgRHJvcGRvd24gTWVudS5mcmFtZXIvbW9kdWxlcy9teU1vZHVsZS5jb2ZmZWUiLCIuLi8uLi8uLi8uLi8uLi9Vc2Vycy9zaGluYWthai9EZXNrdG9wL0RyaWJiYmxlL0RhaWx5X1VJLyMwMjcgRHJvcGRvd24gTWVudS8jMDI3IERyb3Bkb3duIE1lbnUuZnJhbWVyL21vZHVsZXMvZ2V0UmFuZG9tSGVhcnQuY29mZmVlIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIjIEFkZCB0aGUgZm9sbG93aW5nIGxpbmUgdG8geW91ciBwcm9qZWN0IGluIEZyYW1lciBTdHVkaW8uIFxuIyBteU1vZHVsZSA9IHJlcXVpcmUgXCJteU1vZHVsZVwiXG4jIFJlZmVyZW5jZSB0aGUgY29udGVudHMgYnkgbmFtZSwgbGlrZSBteU1vZHVsZS5teUZ1bmN0aW9uKCkgb3IgbXlNb2R1bGUubXlWYXJcblxuZXhwb3J0cy5teVZhciA9IFwibXlWYXJpYWJsZVwiXG5cbmV4cG9ydHMubXlGdW5jdGlvbiA9IC0+XG5cdHByaW50IFwibXlGdW5jdGlvbiBpcyBydW5uaW5nXCJcblxuZXhwb3J0cy5teUFycmF5ID0gWzEsIDIsIDNdIiwiZXhwb3J0cy5nZXRSYW5kb21IZWFydCA9IChoZWFydCwgc3RyZWFtU2l6ZSwgaGVhcnRTdHJlYW0pIC0+XG5cbiAgXHR2ZXJ0RmxvYXRMYXllciA9IG5ldyBMYXllclxuICBcdFx0d2lkdGg6ICBoZWFydC5vcmlnaW5hbC53aWR0aFxuICBcdFx0aGVpZ2h0OiBoZWFydC5vcmlnaW5hbC5oZWlnaHRcbiAgXHRcdHk6IHN0cmVhbVNpemUuaCAtIDI3MFxuICBcdFx0c3VwZXJMYXllcjogaGVhcnRTdHJlYW1cbiAgXHRcdGJhY2tncm91bmRDb2xvcjogXCJ0cmFuc3BhcmVudFwiXG4gIFx0XHRjbGlwOiBmYWxzZVxuXG4gIFx0dmVydEZsb2F0TGF5ZXIuY2VudGVyWCgpXG5cbiAgXHQjIyA+IENyZWF0ZSBUaGUgQW5pbWF0aW9uXG5cbiAgXHRmbG9hdFVwID0gbmV3IEFuaW1hdGlvblxuICBcdFx0bGF5ZXI6IHZlcnRGbG9hdExheWVyXG4gIFx0XHRwcm9wZXJ0aWVzOiAgeTogMCwgb3BhY2l0eTogMFxuICBcdFx0dGltZTogNC41XG4gIFx0XHRjdXJ2ZTogXCJlYXNlLW91dFwiXG5cbiAgXHR2ZXJ0RmxvYXRMYXllci5vbiBFdmVudHMuQW5pbWF0aW9uRW5kLCAoYW5pbWF0aW9uLCBsYXllcikgLT5cbiAgXHRcdGxheWVyLmRlc3Ryb3koKVxuXG4gIFx0ZmxvYXRVcC5zdGFydCgpXG5cbiAgXHQjIENyZWF0ZSB0aGUgSG9yaXpvbnRhbCBmbG9hdFxuXG4gIFx0aG9yekZsb2F0TGF5ZXIgPSBuZXcgTGF5ZXJcbiAgXHRcdHdpZHRoOiAgaGVhcnQub3JpZ2luYWwud2lkdGhcbiAgXHRcdGhlaWdodDogaGVhcnQub3JpZ2luYWwud2lkdGhcbiAgXHRcdHN1cGVyTGF5ZXI6IHZlcnRGbG9hdExheWVyXG4gIFx0XHRiYWNrZ3JvdW5kQ29sb3I6IFwidHJhbnNwYXJlbnRcIlxuICBcdFx0Y2xpcDogZmFsc2VcblxuICBcdGhlYXJ0QW5pbWF0aW9uUHJvcHMgPVxuICBcdFx0eDogVXRpbHMucmFuZG9tTnVtYmVyKDUsIHN0cmVhbVNpemUudy8xIC0gaG9yekZsb2F0TGF5ZXIud2lkdGgpXG4gIFx0XHRyOiBVdGlscy5yYW5kb21OdW1iZXIoMiwgMTApXG4gIFx0XHR0OiAzXG4gIFx0XHRjOiBcImVhc2UtaW4tb3V0XCJcblxuICBcdGZsb2F0TGVmdCA9IG5ldyBBbmltYXRpb25cbiAgXHRcdGxheWVyOiBob3J6RmxvYXRMYXllclxuICBcdFx0cHJvcGVydGllczpcbiAgXHRcdFx0eDogaG9yekZsb2F0TGF5ZXIueCAtIGhlYXJ0QW5pbWF0aW9uUHJvcHMueFxuICBcdFx0XHRyb3RhdGlvbjogaGVhcnRBbmltYXRpb25Qcm9wcy5yXG4gIFx0XHR0aW1lOiBoZWFydEFuaW1hdGlvblByb3BzLnRcbiAgXHRcdGN1cnZlOiBoZWFydEFuaW1hdGlvblByb3BzLmNcblxuICBcdGZsb2F0UmlnaHQgPSBuZXcgQW5pbWF0aW9uXG4gIFx0XHRsYXllcjogaG9yekZsb2F0TGF5ZXJcbiAgXHRcdHByb3BlcnRpZXM6XG4gIFx0XHRcdHg6IGhvcnpGbG9hdExheWVyLnggKyBoZWFydEFuaW1hdGlvblByb3BzLnhcbiAgXHRcdFx0cm90YXRpb246IC1oZWFydEFuaW1hdGlvblByb3BzLnJcbiAgXHRcdHRpbWU6IGhlYXJ0QW5pbWF0aW9uUHJvcHMudFxuICBcdFx0Y3VydmU6IGhlYXJ0QW5pbWF0aW9uUHJvcHMuY1xuXG4gIFx0IyBMb29wIHRoZSBhbmltYXRpb246IENvZGUgZm91bmQgdnZ2XG4gIFx0IyBodHRwOi8vZnJhbWVyanMuY29tL2RvY3MvI2FuaW1hdGlvbi5yZXZlcnNlXG5cbiAgXHRmbG9hdExlZnQuc3RhcnRcbiAgXHRmbG9hdFJpZ2h0LnN0YXJ0XG5cbiAgXHQjIFN0YXJ0IHdpdGggYSBsZWZ0IG9yIHJpZ2h0IGZsb2F0IGZpcnN0XG4gIFx0VXRpbHMucmFuZG9tQ2hvaWNlKCBbZmxvYXRMZWZ0LCBmbG9hdFJpZ2h0XSApLnN0YXJ0KClcblxuICBcdCMgUHV0IGEgcmFuZG9tIGhlYXJ0IGluIHRoZSBmbG9hdCB3cmFwcGVyXG5cbiAgXHRuZXdIZWFydCA9IFV0aWxzLnJhbmRvbUNob2ljZShbXG4gIFx0XHRoZWFydC5ibHVlLFxuICBcdFx0aGVhcnQucGluayxcbiAgXHRcdGhlYXJ0LmdyZWVuLFxuICBcdFx0aGVhcnQuYnJvd24sXG4gIFx0XHRoZWFydC52aW9sZXQsXG4gIFx0XHRoZWFydC5vcmFuZ2UsXG4gIFx0XHRoZWFydC55ZWxsb3dcbiAgXHRdKS5jb3B5KClcblxuICBcdGhvcnpGbG9hdExheWVyLmFkZFN1YkxheWVyIG5ld0hlYXJ0XG4gIFx0bmV3SGVhcnQudmlzaWJsZSA9IHRydWVcbiAgXHRuZXdIZWFydC5zY2FsZSA9IDBcbiAgXHRuZXdIZWFydC5vcmlnaW5ZID0gMVxuXG4gIFx0bmV3SGVhcnQuYW5pbWF0ZVxuICBcdFx0cHJvcGVydGllczpcbiAgXHRcdFx0c2NhbGU6IC41XG4gIFx0XHR0aW1lOiAuMjVcbiAgXHRcdGN1cnZlOiBcInNwcmluZygxMDAsIDMwLCAzNSlcIlxuIiwiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFFQUE7QURBQSxPQUFPLENBQUMsY0FBUixHQUF5QixTQUFDLEtBQUQsRUFBUSxVQUFSLEVBQW9CLFdBQXBCO0FBRXRCLE1BQUE7RUFBQSxjQUFBLEdBQXFCLElBQUEsS0FBQSxDQUNwQjtJQUFBLEtBQUEsRUFBUSxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQXZCO0lBQ0EsTUFBQSxFQUFRLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFEdkI7SUFFQSxDQUFBLEVBQUcs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
